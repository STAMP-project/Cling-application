import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest3 {

    public static boolean debug = false;

    @Test
    public void test01501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01501");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isQualifiedName();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isContinue();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node18.setJSType(jSType20);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isContinue();
        com.google.javascript.rhino.Node node27 = node18.clonePropsFrom(node25);
        node13.addChildrenToBack(node18);
        boolean boolean29 = node13.isLocalResultCall();
        com.google.javascript.rhino.Node node30 = node8.copyInformationFromForTree(node13);
        node13.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node33 = node4.clonePropsFrom(node13);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean38 = node37.isLabelName();
        boolean boolean39 = node37.isTrue();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean44 = node43.isContinue();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean49 = node48.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        node48.setJSType(jSType50);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node57 = node48.clonePropsFrom(node55);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (byte) 0, node13, node37, node43, node57, 10, (int) (byte) -1);
        com.google.javascript.rhino.Node node61 = node13.getParent();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable62 = node13.children();
        com.google.javascript.rhino.Node node63 = node13.detachFromParent();
        java.lang.Appendable appendable64 = null;
        // The following exception was thrown during execution in test generation
        try {
            node13.appendStringTree(appendable64);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(nodeIterable62);
        org.junit.Assert.assertNotNull(node63);
    }

    @Test
    public void test01502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01502");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.hasFileOverview();
        boolean boolean5 = jSDocInfo0.isJavaDispatch();
        boolean boolean6 = jSDocInfo0.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str8 = jSDocInfo0.getLicense();
        boolean boolean9 = jSDocInfo0.isNoSideEffects();
        jSDocInfo0.setDeprecated(false);
        boolean boolean12 = jSDocInfo0.hasType();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test01503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01503");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream21 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream22 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream23 = serializableList17.parallelStream();
        java.util.Spliterator<java.io.Serializable> serializableSpliterator24 = serializableList17.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            serializableList17.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableStream21);
        org.junit.Assert.assertNotNull(serializableStream22);
        org.junit.Assert.assertNotNull(serializableStream23);
        org.junit.Assert.assertNotNull(serializableSpliterator24);
    }

    @Test
    public void test01504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01504");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream21 = serializableList17.stream();
        java.io.Serializable[] serializableArray38 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList39 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray38);
        boolean boolean40 = serializableList39.isEmpty();
        boolean boolean42 = serializableList39.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream43 = serializableList39.stream();
        boolean boolean44 = serializableList17.containsAll((java.util.Collection<java.io.Serializable>) serializableList39);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean54 = node53.isQualifiedName();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean59 = node58.isContinue();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean64 = node63.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType65 = null;
        node63.setJSType(jSType65);
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean71 = node70.isContinue();
        com.google.javascript.rhino.Node node72 = node63.clonePropsFrom(node70);
        node58.addChildrenToBack(node63);
        boolean boolean74 = node58.isLocalResultCall();
        com.google.javascript.rhino.Node node75 = node53.copyInformationFromForTree(node58);
        node58.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node78 = node49.clonePropsFrom(node58);
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean83 = node82.isInstanceOf();
        boolean boolean84 = node82.isComma();
        boolean boolean85 = node49.isEquivalentTo(node82);
        boolean boolean86 = node82.isComma();
        com.google.javascript.rhino.Node node90 = new com.google.javascript.rhino.Node(0, 10, 0);
        com.google.javascript.rhino.Node node93 = new com.google.javascript.rhino.Node(51, node82, node90, (int) (short) 10, (int) ' ');
        int int94 = serializableList17.lastIndexOf((java.lang.Object) node93);
        com.google.javascript.rhino.Node node95 = node93.getLastSibling();
        com.google.javascript.rhino.Node node97 = com.google.javascript.rhino.Node.newNumber((double) 45);
        com.google.javascript.rhino.Node node98 = node95.useSourceInfoIfMissingFromForTree(node97);
        boolean boolean99 = node98.isVar();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableStream21);
        org.junit.Assert.assertNotNull(serializableArray38);
        org.junit.Assert.assertNotNull(serializableList39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(serializableStream43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
        org.junit.Assert.assertNotNull(node95);
        org.junit.Assert.assertNotNull(node97);
        org.junit.Assert.assertNotNull(node98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test01505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01505");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(32, (int) (byte) 10, (int) '#');
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isQualifiedName();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isContinue();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType24 = null;
        node22.setJSType(jSType24);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean30 = node29.isContinue();
        com.google.javascript.rhino.Node node31 = node22.clonePropsFrom(node29);
        node17.addChildrenToBack(node22);
        boolean boolean33 = node17.isLocalResultCall();
        com.google.javascript.rhino.Node node34 = node12.copyInformationFromForTree(node17);
        node17.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node37 = node8.clonePropsFrom(node17);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isInstanceOf();
        boolean boolean43 = node41.isComma();
        boolean boolean44 = node8.isEquivalentTo(node41);
        boolean boolean45 = node41.isComma();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) '#', node4, node41, 42, (int) ' ');
        boolean boolean49 = node48.isComma();
        com.google.javascript.rhino.Node node50 = node48.cloneTree();
        boolean boolean51 = node50.isWith();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        boolean boolean57 = node55.isTry();
        com.google.javascript.rhino.Node node58 = node50.clonePropsFrom(node55);
        int int59 = node50.getType();
        boolean boolean60 = node50.isOnlyModifiesThisCall();
        boolean boolean61 = node50.isObjectLit();
        boolean boolean62 = node50.isCatch();
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 35 + "'", int59 == 35);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test01506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01506");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.hasFileOverview();
        boolean boolean5 = jSDocInfo0.isJavaDispatch();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean7 = jSDocInfo0.hasTypedefType();
        boolean boolean8 = jSDocInfo0.isIdGenerator();
        boolean boolean9 = jSDocInfo0.isDeprecated();
        com.google.common.collect.ImmutableList<java.lang.String> strList10 = jSDocInfo0.getTemplateTypeNames();
        java.util.Set<java.lang.String> strSet11 = jSDocInfo0.getParameterNames();
        jSDocInfo0.addSuppression("InputId: true");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNotNull(strSet11);
    }

    @Test
    public void test01507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01507");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isContinue();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType10 = null;
        node8.setJSType(jSType10);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean16 = node15.isContinue();
        com.google.javascript.rhino.Node node17 = node8.clonePropsFrom(node15);
        node3.addChildrenToBack(node8);
        boolean boolean19 = node3.isLocalResultCall();
        int int20 = node3.getLength();
        boolean boolean21 = node3.isSwitch();
        node3.putBooleanProp(32, false);
        boolean boolean25 = node3.isNull();
        boolean boolean26 = node3.hasChildren();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean31 = node30.isQualifiedName();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isContinue();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean41 = node40.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType42 = null;
        node40.setJSType(jSType42);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean48 = node47.isContinue();
        com.google.javascript.rhino.Node node49 = node40.clonePropsFrom(node47);
        node35.addChildrenToBack(node40);
        boolean boolean51 = node35.isLocalResultCall();
        com.google.javascript.rhino.Node node52 = node30.copyInformationFromForTree(node35);
        boolean boolean53 = node52.isArrayLit();
        node52.putBooleanProp(44, false);
        boolean boolean57 = node52.isIf();
        com.google.javascript.rhino.Node node58 = node3.useSourceInfoFromForTree(node52);
        boolean boolean59 = node52.hasChildren();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test01508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01508");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection2 = jSDocInfo0.getTypeNodes();
        com.google.common.collect.ImmutableList<java.lang.String> strList3 = jSDocInfo0.getTemplateTypeNames();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getEnumParameterType();
        java.util.Collection<java.lang.String> strCollection6 = jSDocInfo0.getReferences();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(nodeCollection2);
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertNull(strCollection6);
    }

    @Test
    public void test01509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01509");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isQualifiedName();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isContinue();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        node32.setJSType(jSType34);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isContinue();
        com.google.javascript.rhino.Node node41 = node32.clonePropsFrom(node39);
        node27.addChildrenToBack(node32);
        boolean boolean43 = node27.isLocalResultCall();
        com.google.javascript.rhino.Node node44 = node22.copyInformationFromForTree(node27);
        boolean boolean45 = serializableList17.contains((java.lang.Object) node27);
        int int46 = node27.getSourcePosition();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isLabelName();
        boolean boolean52 = node50.isDec();
        boolean boolean53 = node50.isNoSideEffectsCall();
        node27.addChildToBack(node50);
        boolean boolean55 = node50.isVoid();
        boolean boolean56 = node50.isEmpty();
        com.google.javascript.rhino.Node node57 = node50.cloneNode();
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean62 = node61.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType63 = null;
        node61.setJSType(jSType63);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean69 = node68.isContinue();
        com.google.javascript.rhino.Node node70 = node61.clonePropsFrom(node68);
        node70.setSourceFileForTesting("hi!");
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean77 = node76.isLabelName();
        com.google.javascript.rhino.Node node78 = node70.copyInformationFrom(node76);
        node50.addChildToBack(node76);
        node76.addSuppression("Not declared as a constructor");
        boolean boolean82 = node76.isAnd();
        boolean boolean83 = node76.isThrow();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test01510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01510");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean8 = node7.isQualifiedName();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isContinue();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType19 = null;
        node17.setJSType(jSType19);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean25 = node24.isContinue();
        com.google.javascript.rhino.Node node26 = node17.clonePropsFrom(node24);
        node12.addChildrenToBack(node17);
        boolean boolean28 = node12.isLocalResultCall();
        com.google.javascript.rhino.Node node29 = node7.copyInformationFromForTree(node12);
        node12.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node32 = node3.clonePropsFrom(node12);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression34 = new com.google.javascript.rhino.JSTypeExpression(node12, "true");
        boolean boolean35 = jSTypeExpression34.isVarArgs();
        com.google.javascript.rhino.Node[] nodeArray40 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(51, nodeArray40, 48, 32);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray40);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(45, nodeArray40);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(40, nodeArray40, 40, (int) (byte) -1);
        boolean boolean49 = jSTypeExpression34.equals((java.lang.Object) (byte) -1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(nodeArray40);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test01511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01511");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        boolean boolean6 = node4.isDec();
        boolean boolean7 = node4.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType13 = null;
        node11.setJSType(jSType13);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isContinue();
        com.google.javascript.rhino.Node node20 = node11.clonePropsFrom(node18);
        boolean boolean21 = node20.isQuotedString();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType27 = null;
        node25.setJSType(jSType27);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isContinue();
        com.google.javascript.rhino.Node node34 = node25.clonePropsFrom(node32);
        int int35 = node34.getLineno();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isLabelName();
        boolean boolean41 = node39.isDec();
        boolean boolean42 = node39.isAssign();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isQualifiedName();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean61 = node60.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType62 = null;
        node60.setJSType(jSType62);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean68 = node67.isContinue();
        com.google.javascript.rhino.Node node69 = node60.clonePropsFrom(node67);
        node55.addChildrenToBack(node60);
        boolean boolean71 = node55.isLocalResultCall();
        com.google.javascript.rhino.Node node72 = node50.copyInformationFromForTree(node55);
        node55.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node75 = node46.clonePropsFrom(node55);
        com.google.javascript.rhino.Node[] nodeArray76 = new com.google.javascript.rhino.Node[] { node4, node20, node34, node39, node46 };
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node(0, nodeArray76, (-1), 54);
        boolean boolean80 = node79.isDo();
        boolean boolean81 = node79.isTry();
        boolean boolean82 = node79.isSetterDef();
        boolean boolean83 = node79.isGetElem();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(nodeArray76);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test01512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01512");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.hasFileOverview();
        boolean boolean5 = jSDocInfo0.isJavaDispatch();
        java.lang.String str6 = jSDocInfo0.toString();
        boolean boolean7 = jSDocInfo0.isDefine();
        boolean boolean8 = jSDocInfo0.isImplicitCast();
        jSDocInfo0.setLicense("CALL hi! 100");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "JSDocInfo" + "'", str6, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test01513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01513");
        java.lang.String[] strArray3 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        java.lang.Object[] objArray6 = strSet4.toArray();
        java.lang.String[] strArray10 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        java.lang.Object[] objArray13 = strSet11.toArray();
        java.lang.String[] strArray17 = new java.lang.String[] { "", "", "hi!" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        java.lang.String[] strArray23 = new java.lang.String[] { "Unknown class name", "", "true" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        java.lang.String[] strArray29 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        java.lang.Object[] objArray32 = strSet30.toArray();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "Unknown class name", "true" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        java.lang.String[] strArray40 = new java.lang.String[] { "true" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        java.lang.String[] strArray46 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet47 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet47, strArray46);
        java.lang.Object[] objArray49 = strSet47.toArray();
        java.lang.String[] strArray53 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet54 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet54, strArray53);
        java.lang.Object[] objArray56 = strSet54.toArray();
        java.lang.String[] strArray60 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet61 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet61, strArray60);
        java.lang.Object[] objArray63 = strSet61.toArray();
        java.lang.String[] strArray68 = new java.lang.String[] { "hi!", "true", "Unknown class name", "Unknown class name" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        java.lang.String[] strArray73 = new java.lang.String[] { "Unknown class name", "true" };
        java.util.ArrayList<java.lang.String> strList74 = new java.util.ArrayList<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList74, strArray73);
        java.util.AbstractCollection[] abstractCollectionArray77 = new java.util.AbstractCollection[0];
        @SuppressWarnings("unchecked")
        java.util.AbstractCollection<java.lang.String>[] strCollectionArray78 = (java.util.AbstractCollection<java.lang.String>[]) abstractCollectionArray77;
        com.google.common.collect.ImmutableList<java.util.AbstractCollection<java.lang.String>> strCollectionList79 = com.google.common.collect.ImmutableList.of((java.util.AbstractCollection<java.lang.String>) strSet4, (java.util.AbstractCollection<java.lang.String>) strSet11, (java.util.AbstractCollection<java.lang.String>) strList18, (java.util.AbstractCollection<java.lang.String>) strList24, (java.util.AbstractCollection<java.lang.String>) strSet30, (java.util.AbstractCollection<java.lang.String>) strList37, (java.util.AbstractCollection<java.lang.String>) strList41, (java.util.AbstractCollection<java.lang.String>) strSet47, (java.util.AbstractCollection<java.lang.String>) strSet54, (java.util.AbstractCollection<java.lang.String>) strSet61, (java.util.AbstractCollection<java.lang.String>) strList69, (java.util.AbstractCollection<java.lang.String>) strList74, (java.util.AbstractCollection<java.lang.String>[]) abstractCollectionArray77);
        java.util.Iterator<java.lang.String> strItor80 = strSet4.iterator();
        boolean boolean82 = strSet4.add("InputId: java.io.IOException: java.io.IOException");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(abstractCollectionArray77);
        org.junit.Assert.assertNotNull(strCollectionArray78);
        org.junit.Assert.assertNotNull(strCollectionList79);
        org.junit.Assert.assertNotNull(strItor80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
    }

    @Test
    public void test01514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01514");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean8 = node7.isQualifiedName();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isContinue();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType19 = null;
        node17.setJSType(jSType19);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean25 = node24.isContinue();
        com.google.javascript.rhino.Node node26 = node17.clonePropsFrom(node24);
        node12.addChildrenToBack(node17);
        boolean boolean28 = node12.isLocalResultCall();
        com.google.javascript.rhino.Node node29 = node7.copyInformationFromForTree(node12);
        node12.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node32 = node3.clonePropsFrom(node12);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean41 = node40.isQualifiedName();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean46 = node45.isContinue();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType52 = null;
        node50.setJSType(jSType52);
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean58 = node57.isContinue();
        com.google.javascript.rhino.Node node59 = node50.clonePropsFrom(node57);
        node45.addChildrenToBack(node50);
        boolean boolean61 = node45.isLocalResultCall();
        com.google.javascript.rhino.Node node62 = node40.copyInformationFromForTree(node45);
        node45.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node65 = node36.clonePropsFrom(node45);
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean70 = node69.isInstanceOf();
        boolean boolean71 = node69.isComma();
        boolean boolean72 = node36.isEquivalentTo(node69);
        com.google.javascript.rhino.Node node73 = node12.useSourceInfoFrom(node36);
        boolean boolean74 = node36.isSwitch();
        boolean boolean75 = node36.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test01515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01515");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isQualifiedName();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isContinue();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        node32.setJSType(jSType34);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isContinue();
        com.google.javascript.rhino.Node node41 = node32.clonePropsFrom(node39);
        node27.addChildrenToBack(node32);
        boolean boolean43 = node27.isLocalResultCall();
        com.google.javascript.rhino.Node node44 = node22.copyInformationFromForTree(node27);
        boolean boolean45 = serializableList17.contains((java.lang.Object) node27);
        java.io.Serializable[] serializableArray62 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList63 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray62);
        boolean boolean64 = serializableList17.containsAll((java.util.Collection<java.io.Serializable>) serializableList63);
        boolean boolean65 = serializableList17.isEmpty();
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean70 = node69.isContinue();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean75 = node74.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType76 = null;
        node74.setJSType(jSType76);
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean82 = node81.isContinue();
        com.google.javascript.rhino.Node node83 = node74.clonePropsFrom(node81);
        node69.addChildrenToBack(node74);
        int int85 = serializableList17.indexOf((java.lang.Object) node69);
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList86 = serializableList17.asList();
        boolean boolean87 = serializableList86.isEmpty();
        int int89 = serializableList86.lastIndexOf((java.lang.Object) 44);
        com.google.common.collect.UnmodifiableIterator<java.io.Serializable> serializableItor90 = serializableList86.iterator();
        java.lang.Object[] objArray91 = serializableList86.toArray();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(serializableArray62);
        org.junit.Assert.assertNotNull(serializableList63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertNotNull(serializableList86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertNotNull(serializableItor90);
        org.junit.Assert.assertNotNull(objArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray91), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray91), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
    }

    @Test
    public void test01516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01516");
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean6 = node5.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType7 = null;
        node5.setJSType(jSType7);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isContinue();
        com.google.javascript.rhino.Node node14 = node5.clonePropsFrom(node12);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable15 = node14.children();
        boolean boolean16 = node14.isNull();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean21 = node20.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType22 = null;
        node20.setJSType(jSType22);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isContinue();
        com.google.javascript.rhino.Node node29 = node20.clonePropsFrom(node27);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean34 = node33.isContinue();
        boolean boolean35 = node33.isString();
        com.google.javascript.rhino.Node node36 = node20.useSourceInfoFromForTree(node33);
        com.google.javascript.rhino.InputId inputId37 = null;
        node36.setInputId(inputId37);
        java.lang.Object obj40 = node36.getProp((int) (short) 10);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(54, node14, node36);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(100, node36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(nodeIterable15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNull(obj40);
    }

    @Test
    public void test01517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01517");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (byte) 100, 47, 48);
        boolean boolean4 = node3.isLabel();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test01518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01518");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        com.google.common.collect.UnmodifiableListIterator<java.io.Serializable> serializableItor21 = serializableList17.listIterator();
        java.util.Spliterator<java.io.Serializable> serializableSpliterator22 = serializableList17.spliterator();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean27 = node26.isLabelName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo28 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean29 = jSDocInfo28.hasEnumParameterType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression30 = jSDocInfo28.getBaseType();
        node26.setJSDocInfo(jSDocInfo28);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isQuotedString();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean41 = node40.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType42 = null;
        node40.setJSType(jSType42);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean48 = node47.isContinue();
        com.google.javascript.rhino.Node node49 = node40.clonePropsFrom(node47);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean54 = node53.isContinue();
        boolean boolean55 = node53.isString();
        com.google.javascript.rhino.Node node56 = node40.useSourceInfoFromForTree(node53);
        com.google.javascript.rhino.InputId inputId57 = null;
        node56.setInputId(inputId57);
        com.google.javascript.rhino.Node node63 = com.google.javascript.rhino.Node.newString(37, "hi!", (int) (byte) 100, (int) (short) 100);
        int int65 = node63.getIntProp(30);
        com.google.javascript.rhino.JSDocInfo jSDocInfo66 = new com.google.javascript.rhino.JSDocInfo();
        int int67 = jSDocInfo66.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility68 = null;
        jSDocInfo66.setVisibility(visibility68);
        boolean boolean70 = jSDocInfo66.hasFileOverview();
        boolean boolean71 = jSDocInfo66.isJavaDispatch();
        boolean boolean72 = jSDocInfo66.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList73 = jSDocInfo66.getExtendedInterfaces();
        java.lang.String str74 = jSDocInfo66.getLicense();
        boolean boolean75 = jSDocInfo66.hasBaseType();
        boolean boolean76 = jSDocInfo66.isNoTypeCheck();
        com.google.javascript.rhino.JSDocInfo jSDocInfo77 = new com.google.javascript.rhino.JSDocInfo();
        int int78 = jSDocInfo77.getImplementedInterfaceCount();
        boolean boolean79 = jSDocInfo77.isExterns();
        com.google.javascript.rhino.JSDocInfo jSDocInfo81 = new com.google.javascript.rhino.JSDocInfo();
        int int82 = jSDocInfo81.getImplementedInterfaceCount();
        com.google.javascript.rhino.Node node86 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean87 = node86.isQualifiedName();
        com.google.javascript.rhino.Node node91 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean92 = node91.isContinue();
        boolean boolean93 = node91.isDo();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList94 = com.google.common.collect.ImmutableList.of((java.io.Serializable) jSDocInfo28, (java.io.Serializable) boolean36, (java.io.Serializable) node56, (java.io.Serializable) int65, (java.io.Serializable) boolean76, (java.io.Serializable) boolean79, (java.io.Serializable) ' ', (java.io.Serializable) jSDocInfo81, (java.io.Serializable) node86, (java.io.Serializable) boolean93);
        int int95 = serializableList17.lastIndexOf((java.lang.Object) jSDocInfo81);
        com.google.common.collect.UnmodifiableListIterator<java.io.Serializable> serializableItor97 = serializableList17.listIterator(0);
        int int98 = serializableList17.size();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableItor21);
        org.junit.Assert.assertNotNull(serializableSpliterator22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(jSTypeExpression30);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList73);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(serializableList94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-1) + "'", int95 == (-1));
        org.junit.Assert.assertNotNull(serializableItor97);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 16 + "'", int98 == 16);
    }

    @Test
    public void test01519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01519");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.isNoAlias();
        java.lang.String str5 = jSDocInfo0.getDeprecationReason();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getBaseType();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(jSTypeExpression6);
    }

    @Test
    public void test01520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01520");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isQualifiedName();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isContinue();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node18.setJSType(jSType20);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isContinue();
        com.google.javascript.rhino.Node node27 = node18.clonePropsFrom(node25);
        node13.addChildrenToBack(node18);
        boolean boolean29 = node13.isLocalResultCall();
        com.google.javascript.rhino.Node node30 = node8.copyInformationFromForTree(node13);
        node13.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node33 = node4.clonePropsFrom(node13);
        com.google.javascript.rhino.Node node34 = node33.getLastSibling();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("Unknown class name");
        boolean boolean37 = node36.isBreak();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(0, node33, node36, (-1), 43);
        boolean boolean41 = node40.isLocalResultCall();
        // The following exception was thrown during execution in test generation
        try {
            int int43 = node40.getExistingIntProp((-8));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: -8");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test01521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01521");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.hasFileOverview();
        boolean boolean5 = jSDocInfo0.isJavaDispatch();
        boolean boolean6 = jSDocInfo0.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean8 = jSDocInfo0.hasThisType();
        int int9 = jSDocInfo0.getParameterCount();
        boolean boolean10 = jSDocInfo0.containsDeclaration();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test01522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01522");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean8 = node7.isQualifiedName();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isContinue();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType19 = null;
        node17.setJSType(jSType19);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean25 = node24.isContinue();
        com.google.javascript.rhino.Node node26 = node17.clonePropsFrom(node24);
        node12.addChildrenToBack(node17);
        boolean boolean28 = node12.isLocalResultCall();
        com.google.javascript.rhino.Node node29 = node7.copyInformationFromForTree(node12);
        node12.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node32 = node3.clonePropsFrom(node12);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression34 = new com.google.javascript.rhino.JSTypeExpression(node12, "true");
        boolean boolean35 = jSTypeExpression34.isVarArgs();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression36 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression34);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression36);
    }

    @Test
    public void test01523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01523");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(0, 10, 0);
        java.lang.Class<?> wildcardClass4 = node3.getClass();
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test01524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01524");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        boolean boolean22 = serializableList17.contains((java.lang.Object) (byte) 0);
        boolean boolean23 = serializableList17.isEmpty();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList24 = serializableList17.reverse();
        boolean boolean25 = serializableList24.isEmpty();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean30 = node29.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType31 = null;
        node29.setJSType(jSType31);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean37 = node36.isContinue();
        com.google.javascript.rhino.Node node38 = node29.clonePropsFrom(node36);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean43 = node42.isContinue();
        boolean boolean44 = node42.isString();
        com.google.javascript.rhino.Node node45 = node29.useSourceInfoFromForTree(node42);
        com.google.javascript.rhino.InputId inputId46 = null;
        node45.setInputId(inputId46);
        node45.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean54 = node53.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType55 = null;
        node53.setJSType(jSType55);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean61 = node60.isContinue();
        com.google.javascript.rhino.Node node62 = node53.clonePropsFrom(node60);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile63 = null;
        node62.setStaticSourceFile(staticSourceFile63);
        com.google.javascript.rhino.Node node65 = node62.getLastSibling();
        com.google.javascript.rhino.Node node66 = node45.srcrefTree(node62);
        boolean boolean67 = serializableList24.equals((java.lang.Object) node66);
        boolean boolean68 = node66.isLocalResultCall();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(serializableList24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test01525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01525");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        int int18 = serializableList17.size();
        java.io.Serializable[] serializableArray35 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList36 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray35);
        boolean boolean37 = serializableList36.isEmpty();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isQualifiedName();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isContinue();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType53 = null;
        node51.setJSType(jSType53);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean59 = node58.isContinue();
        com.google.javascript.rhino.Node node60 = node51.clonePropsFrom(node58);
        node46.addChildrenToBack(node51);
        boolean boolean62 = node46.isLocalResultCall();
        com.google.javascript.rhino.Node node63 = node41.copyInformationFromForTree(node46);
        boolean boolean64 = serializableList36.contains((java.lang.Object) node46);
        boolean boolean65 = serializableList17.containsAll((java.util.Collection<java.io.Serializable>) serializableList36);
        com.google.javascript.rhino.JSDocInfo jSDocInfo66 = new com.google.javascript.rhino.JSDocInfo();
        int int67 = jSDocInfo66.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility68 = null;
        jSDocInfo66.setVisibility(visibility68);
        java.lang.String str70 = jSDocInfo66.getMeaning();
        boolean boolean72 = jSDocInfo66.hasParameter("Unknown class name");
        boolean boolean73 = jSDocInfo66.hasFileOverview();
        boolean boolean74 = jSDocInfo66.isNoSideEffects();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression75 = jSDocInfo66.getTypedefType();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean76 = serializableList17.add((java.io.Serializable) jSDocInfo66);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 16 + "'", int18 == 16);
        org.junit.Assert.assertNotNull(serializableArray35);
        org.junit.Assert.assertNotNull(serializableList36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(jSTypeExpression75);
    }

    @Test
    public void test01526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01526");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        boolean boolean5 = node3.isDec();
        boolean boolean6 = node3.isAssign();
        boolean boolean7 = node3.isIn();
        boolean boolean8 = node3.isThis();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType14 = null;
        node12.setJSType(jSType14);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean20 = node19.isContinue();
        com.google.javascript.rhino.Node node21 = node12.clonePropsFrom(node19);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isContinue();
        boolean boolean27 = node25.isString();
        com.google.javascript.rhino.Node node28 = node12.useSourceInfoFromForTree(node25);
        com.google.javascript.rhino.InputId inputId29 = null;
        node28.setInputId(inputId29);
        node28.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node33 = node3.useSourceInfoIfMissingFrom(node28);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean38 = node37.isLabelName();
        boolean boolean39 = node37.isTrue();
        boolean boolean40 = node37.isFromExterns();
        boolean boolean41 = node37.isSwitch();
        com.google.javascript.rhino.Node node42 = node33.srcref(node37);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
    }

    @Test
    public void test01527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01527");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isContinue();
        boolean boolean5 = node3.isDo();
        node3.setSourceEncodedPosition(2);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isQualifiedName();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean22 = node21.isContinue();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean27 = node26.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType28 = null;
        node26.setJSType(jSType28);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean34 = node33.isContinue();
        com.google.javascript.rhino.Node node35 = node26.clonePropsFrom(node33);
        node21.addChildrenToBack(node26);
        boolean boolean37 = node21.isLocalResultCall();
        com.google.javascript.rhino.Node node38 = node16.copyInformationFromForTree(node21);
        node21.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node41 = node12.clonePropsFrom(node21);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean46 = node45.isLabelName();
        boolean boolean47 = node45.isTrue();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isContinue();
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean57 = node56.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType58 = null;
        node56.setJSType(jSType58);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean64 = node63.isContinue();
        com.google.javascript.rhino.Node node65 = node56.clonePropsFrom(node63);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (byte) 0, node21, node45, node51, node65, 10, (int) (byte) -1);
        com.google.javascript.rhino.Node node69 = node3.useSourceInfoIfMissingFrom(node51);
        boolean boolean70 = node69.isParamList();
        com.google.javascript.rhino.Node node72 = node69.getAncestor((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            int int74 = node69.getExistingIntProp(31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 31");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(node72);
    }

    @Test
    public void test01528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01528");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("Unknown class name");
        boolean boolean2 = node1.isBreak();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean7 = node6.isContinue();
        boolean boolean8 = node6.isBlock();
        node6.removeProp(12);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean16 = node15.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType17 = null;
        node15.setJSType(jSType17);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isContinue();
        com.google.javascript.rhino.Node node24 = node15.clonePropsFrom(node22);
        boolean boolean25 = node24.isQuotedString();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean30 = node29.isLabelName();
        boolean boolean31 = node29.isDec();
        boolean boolean32 = node29.isScript();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(0, node24, node29, node36, 0, (int) (short) 0);
        boolean boolean40 = node24.isTrue();
        com.google.javascript.rhino.Node node41 = node6.useSourceInfoIfMissingFromForTree(node24);
        int int42 = node24.getSourcePosition();
        com.google.javascript.rhino.Node node43 = node1.srcref(node24);
        boolean boolean44 = node43.isOptionalArg();
        node43.putBooleanProp(0, false);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test01529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01529");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isContinue();
        boolean boolean19 = node17.isString();
        com.google.javascript.rhino.Node node20 = node4.useSourceInfoFromForTree(node17);
        com.google.javascript.rhino.InputId inputId21 = null;
        node20.setInputId(inputId21);
        java.lang.Object obj24 = node20.getProp((int) (short) 10);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        node28.setJSType(jSType30);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isContinue();
        com.google.javascript.rhino.Node node37 = node28.clonePropsFrom(node35);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isContinue();
        boolean boolean43 = node41.isString();
        com.google.javascript.rhino.Node node44 = node28.useSourceInfoFromForTree(node41);
        com.google.javascript.rhino.InputId inputId45 = null;
        node44.setInputId(inputId45);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isQualifiedName();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean61 = node60.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType62 = null;
        node60.setJSType(jSType62);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean68 = node67.isContinue();
        com.google.javascript.rhino.Node node69 = node60.clonePropsFrom(node67);
        node55.addChildrenToBack(node60);
        boolean boolean71 = node55.isLocalResultCall();
        com.google.javascript.rhino.Node node72 = node50.copyInformationFromForTree(node55);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(0, node20, node44, node55, (int) (short) 10, 53);
        boolean boolean76 = node44.isCatch();
        com.google.javascript.rhino.Node node77 = node44.getFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean78 = node77.isName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(node77);
    }

    @Test
    public void test01530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01530");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getStartLine();
        int int2 = stringPosition0.getEndLine();
        int int3 = stringPosition0.getEndLine();
        int int4 = stringPosition0.getPositionOnStartLine();
        // The following exception was thrown during execution in test generation
        try {
            stringPosition0.setPositionInformation(49, 4, 45, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Recorded bad position information?start-line: 49?end-line: 45");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test01531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01531");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        boolean boolean13 = node12.isAssign();
        node12.setLength(0);
        boolean boolean16 = node12.isString();
        java.io.Serializable[] serializableArray33 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList34 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray33);
        boolean boolean35 = serializableList34.isEmpty();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isQualifiedName();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean45 = node44.isContinue();
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean50 = node49.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType51 = null;
        node49.setJSType(jSType51);
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean57 = node56.isContinue();
        com.google.javascript.rhino.Node node58 = node49.clonePropsFrom(node56);
        node44.addChildrenToBack(node49);
        boolean boolean60 = node44.isLocalResultCall();
        com.google.javascript.rhino.Node node61 = node39.copyInformationFromForTree(node44);
        boolean boolean62 = serializableList34.contains((java.lang.Object) node44);
        int int63 = node44.getSourcePosition();
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean68 = node67.isLabelName();
        boolean boolean69 = node67.isDec();
        boolean boolean70 = node67.isNoSideEffectsCall();
        node44.addChildToBack(node67);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable72 = node44.getAncestors();
        int int73 = node12.getIndexOfChild(node44);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(serializableArray33);
        org.junit.Assert.assertNotNull(serializableList34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(ancestorIterable72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
    }

    @Test
    public void test01532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01532");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isQualifiedName();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isContinue();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node18.setJSType(jSType20);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isContinue();
        com.google.javascript.rhino.Node node27 = node18.clonePropsFrom(node25);
        node13.addChildrenToBack(node18);
        boolean boolean29 = node13.isLocalResultCall();
        com.google.javascript.rhino.Node node30 = node8.copyInformationFromForTree(node13);
        node13.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node33 = node4.clonePropsFrom(node13);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean38 = node37.isLabelName();
        boolean boolean39 = node37.isTrue();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean44 = node43.isContinue();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean49 = node48.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        node48.setJSType(jSType50);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node57 = node48.clonePropsFrom(node55);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (byte) 0, node13, node37, node43, node57, 10, (int) (byte) -1);
        com.google.javascript.rhino.Node node61 = node13.getParent();
        boolean boolean62 = node61.isOr();
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newString(37, "hi!", (int) (byte) 100, (int) (short) 100);
        node67.setCharno((int) (byte) 1);
        boolean boolean70 = node67.isGetterDef();
        com.google.javascript.rhino.Node node71 = node61.copyInformationFrom(node67);
        boolean boolean72 = node71.isDelProp();
        node71.detachChildren();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test01533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01533");
        java.lang.String[] strArray17 = new java.lang.String[] { "(Unknown class name)", "CALL hi!", "NUMBER -1.0 12", "java.io.IOException: java.io.IOException", "false" };
        com.google.common.collect.ImmutableList<java.lang.String> strList18 = com.google.common.collect.ImmutableList.of(strArray17);
        java.lang.CharSequence[] charSequenceArray22 = new java.lang.CharSequence[] { "[30, 100.0, -1, 0.0, 100, 1.0, 1, 0, a, 0, 0.0, 1.0, hi!, 100, 10.0, 0.0]", "(Unknown class name)", "java.io.IOException: java.io.IOException: Unknown class name" };
        java.lang.CharSequence[] charSequenceArray37 = new java.lang.CharSequence[] { "Unknown class name", "" };
        com.google.common.collect.ImmutableList<java.lang.CharSequence> charSequenceList38 = com.google.common.collect.ImmutableList.of((java.lang.CharSequence) "true", (java.lang.CharSequence) "true", (java.lang.CharSequence) "hi!", (java.lang.CharSequence) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "true", (java.lang.CharSequence) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "", (java.lang.CharSequence) "", charSequenceArray37);
        java.lang.String[] strArray44 = new java.lang.String[] { "(Unknown class name)", "CALL hi!", "NUMBER -1.0 12", "java.io.IOException: java.io.IOException", "false" };
        com.google.common.collect.ImmutableList<java.lang.String> strList45 = com.google.common.collect.ImmutableList.of(strArray44);
        java.lang.String[] strArray49 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet50 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet50, strArray49);
        java.lang.Object[] objArray52 = strSet50.toArray();
        boolean boolean54 = strSet50.equals((java.lang.Object) 12);
        java.lang.String[] strArray60 = new java.lang.String[] { "(Unknown class name)", "CALL hi!", "NUMBER -1.0 12", "java.io.IOException: java.io.IOException", "false" };
        com.google.common.collect.ImmutableList<java.lang.String> strList61 = com.google.common.collect.ImmutableList.of(strArray60);
        java.lang.Comparable<java.lang.String>[] strComparableArray62 = strSet50.toArray((java.lang.Comparable<java.lang.String>[]) strArray60);
        com.google.common.collect.ImmutableList<java.lang.CharSequence[]> charSequenceArrayList63 = com.google.common.collect.ImmutableList.of((java.lang.CharSequence[]) strArray17, charSequenceArray22, charSequenceArray37, (java.lang.CharSequence[]) strArray44, (java.lang.CharSequence[]) strArray60);
        com.google.common.collect.ImmutableList<java.lang.String> strList64 = com.google.common.collect.ImmutableList.of("[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]", "(Unknown class name)", "java.io.IOException: (InputId: true)", "java.io.IOException: Not declared as a type name", "java.io.IOException", "(java.io.IOException: Unknown class name)", "", "true", "(Not declared as a type name)", "(STRING Unknown class name 40\n)", "java.io.IOException: NUMBER -1.0 12", "", strArray44);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(charSequenceArray22);
        org.junit.Assert.assertNotNull(charSequenceArray37);
        org.junit.Assert.assertNotNull(charSequenceList38);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[Unknown class name, ]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertNotNull(strList61);
        org.junit.Assert.assertNotNull(strComparableArray62);
        org.junit.Assert.assertNotNull(charSequenceArrayList63);
        org.junit.Assert.assertNotNull(strList64);
    }

    @Test
    public void test01534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01534");
        java.io.IOException iOException0 = new java.io.IOException();
        java.io.IOException iOException1 = new java.io.IOException((java.lang.Throwable) iOException0);
        java.io.IOException iOException2 = new java.io.IOException((java.lang.Throwable) iOException1);
        java.lang.Throwable[] throwableArray3 = iOException1.getSuppressed();
        java.io.IOException iOException5 = new java.io.IOException("Unknown class name");
        java.io.IOException iOException6 = new java.io.IOException();
        java.io.IOException iOException7 = new java.io.IOException((java.lang.Throwable) iOException6);
        java.io.IOException iOException8 = new java.io.IOException((java.lang.Throwable) iOException7);
        java.lang.Throwable[] throwableArray9 = iOException7.getSuppressed();
        java.io.IOException iOException10 = new java.io.IOException();
        java.io.IOException iOException11 = new java.io.IOException((java.lang.Throwable) iOException10);
        java.io.IOException iOException12 = new java.io.IOException((java.lang.Throwable) iOException11);
        java.io.IOException iOException13 = new java.io.IOException();
        java.io.IOException iOException14 = new java.io.IOException((java.lang.Throwable) iOException13);
        java.io.IOException iOException15 = new java.io.IOException((java.lang.Throwable) iOException14);
        java.lang.Throwable[] throwableArray16 = iOException14.getSuppressed();
        java.io.IOException iOException17 = new java.io.IOException();
        java.io.IOException iOException18 = new java.io.IOException((java.lang.Throwable) iOException17);
        java.io.IOException iOException19 = new java.io.IOException((java.lang.Throwable) iOException18);
        java.io.IOException iOException20 = new java.io.IOException((java.lang.Throwable) iOException18);
        java.io.IOException iOException21 = new java.io.IOException();
        java.io.IOException iOException23 = new java.io.IOException("Unknown class name");
        java.io.IOException iOException25 = new java.io.IOException("Unknown class name");
        java.io.IOException iOException26 = new java.io.IOException();
        java.io.IOException iOException27 = new java.io.IOException((java.lang.Throwable) iOException26);
        java.io.IOException iOException28 = new java.io.IOException((java.lang.Throwable) iOException27);
        java.io.IOException iOException29 = new java.io.IOException((java.lang.Throwable) iOException27);
        java.io.IOException iOException30 = new java.io.IOException();
        com.google.common.collect.ImmutableList<java.io.IOException> iOExceptionList31 = com.google.common.collect.ImmutableList.of(iOException1, iOException5, iOException7, iOException11, iOException14, iOException18, iOException21, iOException23, iOException25, iOException29, iOException30);
        java.lang.String str32 = iOException23.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(iOExceptionList31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "java.io.IOException: Unknown class name" + "'", str32, "java.io.IOException: Unknown class name");
    }

    @Test
    public void test01535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01535");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.hasFileOverview();
        boolean boolean5 = jSDocInfo0.isJavaDispatch();
        boolean boolean6 = jSDocInfo0.hasType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getParameterType("");
        boolean boolean9 = jSDocInfo0.hasReturnType();
        java.lang.String str10 = jSDocInfo0.getBlockDescription();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test01536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01536");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getEnumParameterType();
        java.lang.String str5 = jSDocInfo0.getReturnDescription();
        boolean boolean6 = jSDocInfo0.isImplicitCast();
        boolean boolean7 = jSDocInfo0.isImplicitCast();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getEnumParameterType();
        java.util.Collection<java.lang.String> strCollection9 = jSDocInfo0.getAuthors();
        boolean boolean10 = jSDocInfo0.isExpose();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNull(strCollection9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test01537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01537");
        com.google.javascript.rhino.jstype.ObjectType objectType0 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.ObjectType objectType2 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface(objectType0, "TYPEOF 10\n");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01538");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString((int) (short) 100, "JSDocInfo");
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType10 = null;
        node8.setJSType(jSType10);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean16 = node15.isContinue();
        com.google.javascript.rhino.Node node17 = node8.clonePropsFrom(node15);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean22 = node21.isContinue();
        boolean boolean23 = node21.isString();
        com.google.javascript.rhino.Node node24 = node8.useSourceInfoFromForTree(node21);
        com.google.javascript.rhino.InputId inputId25 = null;
        node24.setInputId(inputId25);
        java.lang.Object obj28 = node24.getProp((int) (short) 10);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        node32.setJSType(jSType34);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isContinue();
        com.google.javascript.rhino.Node node41 = node32.clonePropsFrom(node39);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean46 = node45.isContinue();
        boolean boolean47 = node45.isString();
        com.google.javascript.rhino.Node node48 = node32.useSourceInfoFromForTree(node45);
        com.google.javascript.rhino.InputId inputId49 = null;
        node48.setInputId(inputId49);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean55 = node54.isQualifiedName();
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean60 = node59.isContinue();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean65 = node64.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType66 = null;
        node64.setJSType(jSType66);
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean72 = node71.isContinue();
        com.google.javascript.rhino.Node node73 = node64.clonePropsFrom(node71);
        node59.addChildrenToBack(node64);
        boolean boolean75 = node59.isLocalResultCall();
        com.google.javascript.rhino.Node node76 = node54.copyInformationFromForTree(node59);
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node(0, node24, node48, node59, (int) (short) 10, 53);
        com.google.javascript.rhino.InputId inputId80 = node59.getInputId();
        boolean boolean81 = node59.isReturn();
        boolean boolean82 = node59.isLabelName();
        com.google.javascript.rhino.Node node83 = node3.clonePropsFrom(node59);
        com.google.javascript.rhino.Node node86 = new com.google.javascript.rhino.Node(10, node83, 49, 43);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNull(inputId80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node83);
    }

    @Test
    public void test01539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01539");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        boolean boolean22 = serializableList17.contains((java.lang.Object) (byte) 0);
        java.lang.Object[] objArray23 = serializableList17.toArray();
        java.io.Serializable[] serializableArray40 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList41 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray40);
        boolean boolean42 = serializableList41.isEmpty();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isQualifiedName();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isContinue();
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean57 = node56.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType58 = null;
        node56.setJSType(jSType58);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean64 = node63.isContinue();
        com.google.javascript.rhino.Node node65 = node56.clonePropsFrom(node63);
        node51.addChildrenToBack(node56);
        boolean boolean67 = node51.isLocalResultCall();
        com.google.javascript.rhino.Node node68 = node46.copyInformationFromForTree(node51);
        boolean boolean69 = serializableList41.contains((java.lang.Object) node51);
        java.util.Iterator<java.io.Serializable> serializableItor70 = serializableList41.iterator();
        boolean boolean71 = serializableList17.containsAll((java.util.Collection<java.io.Serializable>) serializableList41);
        java.lang.Object obj72 = null;
        boolean boolean73 = serializableList41.contains(obj72);
        java.io.Serializable[] serializableArray90 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList91 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray90);
        boolean boolean92 = serializableList91.isEmpty();
        boolean boolean94 = serializableList91.contains((java.lang.Object) 52);
        com.google.common.collect.UnmodifiableListIterator<java.io.Serializable> serializableItor95 = serializableList91.listIterator();
        boolean boolean96 = serializableList41.containsAll((java.util.Collection<java.io.Serializable>) serializableList91);
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable serializable98 = serializableList41.remove(37);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertNotNull(serializableArray40);
        org.junit.Assert.assertNotNull(serializableList41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(serializableItor70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(serializableArray90);
        org.junit.Assert.assertNotNull(serializableList91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(serializableItor95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
    }

    @Test
    public void test01540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01540");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isInstanceOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = new com.google.javascript.rhino.JSTypeExpression(node3, "Not declared as a type name");
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.JSType jSType9 = jSTypeExpression6.evaluate(jSTypeStaticScope7, jSTypeRegistry8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test01541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01541");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isContinue();
        boolean boolean19 = node17.isString();
        com.google.javascript.rhino.Node node20 = node4.useSourceInfoFromForTree(node17);
        com.google.javascript.rhino.InputId inputId21 = null;
        node20.setInputId(inputId21);
        java.lang.Object obj24 = node20.getProp((int) (short) 10);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        node28.setJSType(jSType30);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isContinue();
        com.google.javascript.rhino.Node node37 = node28.clonePropsFrom(node35);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isContinue();
        boolean boolean43 = node41.isString();
        com.google.javascript.rhino.Node node44 = node28.useSourceInfoFromForTree(node41);
        com.google.javascript.rhino.InputId inputId45 = null;
        node44.setInputId(inputId45);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isQualifiedName();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean61 = node60.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType62 = null;
        node60.setJSType(jSType62);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean68 = node67.isContinue();
        com.google.javascript.rhino.Node node69 = node60.clonePropsFrom(node67);
        node55.addChildrenToBack(node60);
        boolean boolean71 = node55.isLocalResultCall();
        com.google.javascript.rhino.Node node72 = node50.copyInformationFromForTree(node55);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(0, node20, node44, node55, (int) (short) 10, 53);
        com.google.javascript.rhino.InputId inputId76 = node55.getInputId();
        boolean boolean77 = node55.isReturn();
        com.google.javascript.rhino.Node node78 = node55.getFirstChild();
        com.google.javascript.rhino.Node node79 = node55.cloneNode();
        com.google.javascript.rhino.Node node80 = node55.getLastSibling();
        int int81 = node80.getCharno();
        boolean boolean82 = node80.isContinue();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(inputId76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test01542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01542");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isQuotedString();
        boolean boolean5 = node3.isUnscopedQualifiedName();
        boolean boolean6 = node3.isIf();
        java.io.Serializable[] serializableArray23 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList24 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray23);
        boolean boolean25 = serializableList24.isEmpty();
        boolean boolean27 = serializableList24.contains((java.lang.Object) 52);
        int int29 = serializableList24.indexOf((java.lang.Object) (-1L));
        java.util.Iterator<java.io.Serializable> serializableItor30 = serializableList24.iterator();
        java.util.stream.Stream<java.io.Serializable> serializableStream31 = serializableList24.parallelStream();
        java.util.ListIterator<java.io.Serializable> serializableItor33 = serializableList24.listIterator(0);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean39 = node38.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType40 = null;
        node38.setJSType(jSType40);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean46 = node45.isContinue();
        com.google.javascript.rhino.Node node47 = node38.clonePropsFrom(node45);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable48 = node47.children();
        boolean boolean49 = node47.isNull();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean54 = node53.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType55 = null;
        node53.setJSType(jSType55);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean61 = node60.isContinue();
        com.google.javascript.rhino.Node node62 = node53.clonePropsFrom(node60);
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean67 = node66.isContinue();
        boolean boolean68 = node66.isString();
        com.google.javascript.rhino.Node node69 = node53.useSourceInfoFromForTree(node66);
        com.google.javascript.rhino.InputId inputId70 = null;
        node69.setInputId(inputId70);
        java.lang.Object obj73 = node69.getProp((int) (short) 10);
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node(54, node47, node69);
        boolean boolean75 = serializableList24.contains((java.lang.Object) node69);
        node69.setSourceEncodedPosition((-1));
        // The following exception was thrown during execution in test generation
        try {
            node3.addChildrenToBack(node69);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(serializableArray23);
        org.junit.Assert.assertNotNull(serializableList24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(serializableItor30);
        org.junit.Assert.assertNotNull(serializableStream31);
        org.junit.Assert.assertNotNull(serializableItor33);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(nodeIterable48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNull(obj73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test01543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01543");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean6 = jSDocInfo5.hasEnumParameterType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo5.getBaseType();
        node3.setJSDocInfo(jSDocInfo5);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isQuotedString();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType19 = null;
        node17.setJSType(jSType19);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean25 = node24.isContinue();
        com.google.javascript.rhino.Node node26 = node17.clonePropsFrom(node24);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean31 = node30.isContinue();
        boolean boolean32 = node30.isString();
        com.google.javascript.rhino.Node node33 = node17.useSourceInfoFromForTree(node30);
        com.google.javascript.rhino.InputId inputId34 = null;
        node33.setInputId(inputId34);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString(37, "hi!", (int) (byte) 100, (int) (short) 100);
        int int42 = node40.getIntProp(30);
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = new com.google.javascript.rhino.JSDocInfo();
        int int44 = jSDocInfo43.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility45 = null;
        jSDocInfo43.setVisibility(visibility45);
        boolean boolean47 = jSDocInfo43.hasFileOverview();
        boolean boolean48 = jSDocInfo43.isJavaDispatch();
        boolean boolean49 = jSDocInfo43.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList50 = jSDocInfo43.getExtendedInterfaces();
        java.lang.String str51 = jSDocInfo43.getLicense();
        boolean boolean52 = jSDocInfo43.hasBaseType();
        boolean boolean53 = jSDocInfo43.isNoTypeCheck();
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = new com.google.javascript.rhino.JSDocInfo();
        int int55 = jSDocInfo54.getImplementedInterfaceCount();
        boolean boolean56 = jSDocInfo54.isExterns();
        com.google.javascript.rhino.JSDocInfo jSDocInfo58 = new com.google.javascript.rhino.JSDocInfo();
        int int59 = jSDocInfo58.getImplementedInterfaceCount();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean64 = node63.isQualifiedName();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean69 = node68.isContinue();
        boolean boolean70 = node68.isDo();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList71 = com.google.common.collect.ImmutableList.of((java.io.Serializable) jSDocInfo5, (java.io.Serializable) boolean13, (java.io.Serializable) node33, (java.io.Serializable) int42, (java.io.Serializable) boolean53, (java.io.Serializable) boolean56, (java.io.Serializable) ' ', (java.io.Serializable) jSDocInfo58, (java.io.Serializable) node63, (java.io.Serializable) boolean70);
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList72 = serializableList71.asList();
        boolean boolean73 = serializableList72.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.UnmodifiableListIterator<java.io.Serializable> serializableItor75 = serializableList72.listIterator((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: index (32) must not be greater than size (10)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(serializableList71);
        org.junit.Assert.assertNotNull(serializableList72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test01544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01544");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(32, (int) (byte) 10, (int) '#');
        boolean boolean4 = node3.isLocalResultCall();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isLabelName();
        boolean boolean10 = node8.isTrue();
        node8.setWasEmptyNode(true);
        boolean boolean13 = node8.isAdd();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType19 = null;
        node17.setJSType(jSType19);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean25 = node24.isContinue();
        com.google.javascript.rhino.Node node26 = node17.clonePropsFrom(node24);
        boolean boolean27 = node26.isQuotedString();
        int int28 = node26.getCharno();
        com.google.javascript.rhino.Node node29 = node8.useSourceInfoFrom(node26);
        int int30 = node8.getType();
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newString(37, "hi!", (int) (byte) 100, (int) (short) 100);
        boolean boolean36 = node35.isDo();
        boolean boolean37 = node35.isLabel();
        // The following exception was thrown during execution in test generation
        try {
            node3.addChildrenAfter(node8, node35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test01545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01545");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isQualifiedName();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isContinue();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node18.setJSType(jSType20);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isContinue();
        com.google.javascript.rhino.Node node27 = node18.clonePropsFrom(node25);
        node13.addChildrenToBack(node18);
        boolean boolean29 = node13.isLocalResultCall();
        com.google.javascript.rhino.Node node30 = node8.copyInformationFromForTree(node13);
        node13.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node33 = node4.clonePropsFrom(node13);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean38 = node37.isInstanceOf();
        boolean boolean39 = node37.isComma();
        boolean boolean40 = node4.isEquivalentTo(node37);
        boolean boolean41 = node37.isComma();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(0, 10, 0);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(51, node37, node45, (int) (short) 10, (int) ' ');
        com.google.javascript.rhino.Node node49 = node45.removeChildren();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean50 = node49.isLabelName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(node49);
    }

    @Test
    public void test01546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01546");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("true", 42, 8);
        int int4 = node3.getCharno();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isQualifiedName();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isContinue();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node18.setJSType(jSType20);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isContinue();
        com.google.javascript.rhino.Node node27 = node18.clonePropsFrom(node25);
        node13.addChildrenToBack(node18);
        boolean boolean29 = node13.isLocalResultCall();
        com.google.javascript.rhino.Node node30 = node8.copyInformationFromForTree(node13);
        node13.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.InputId inputId33 = node13.getInputId();
        node13.setOptionalArg(false);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("hi!", (int) '4', 52);
        boolean boolean40 = node13.isEquivalentTo(node39);
        com.google.javascript.rhino.Node node41 = node3.srcref(node39);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newString("true", 42, 8);
        int int46 = node45.getCharno();
        com.google.javascript.rhino.Node node47 = node39.useSourceInfoIfMissingFromForTree(node45);
        boolean boolean48 = node45.isComma();
        boolean boolean49 = node45.isVar();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 8 + "'", int4 == 8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(inputId33);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 8 + "'", int46 == 8);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test01547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01547");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        int int22 = serializableList17.indexOf((java.lang.Object) (-1L));
        java.util.Iterator<java.io.Serializable> serializableItor23 = serializableList17.iterator();
        java.util.stream.Stream<java.io.Serializable> serializableStream24 = serializableList17.parallelStream();
        java.util.ListIterator<java.io.Serializable> serializableItor26 = serializableList17.listIterator(0);
        com.google.common.collect.UnmodifiableIterator<java.io.Serializable> serializableItor27 = serializableList17.iterator();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("hi!", (int) '4', 52);
        boolean boolean32 = node31.isContinue();
        int int33 = serializableList17.lastIndexOf((java.lang.Object) node31);
        java.util.stream.Stream<java.io.Serializable> serializableStream34 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream35 = serializableList17.stream();
        java.util.Iterator<java.io.Serializable> serializableItor36 = serializableList17.iterator();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(serializableItor23);
        org.junit.Assert.assertNotNull(serializableStream24);
        org.junit.Assert.assertNotNull(serializableItor26);
        org.junit.Assert.assertNotNull(serializableItor27);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(serializableStream34);
        org.junit.Assert.assertNotNull(serializableStream35);
        org.junit.Assert.assertNotNull(serializableItor36);
    }

    @Test
    public void test01548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01548");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue0 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue1 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue2 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue3 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList4 = com.google.common.collect.ImmutableList.of(ternaryValue0, ternaryValue1, ternaryValue2, ternaryValue3);
        java.lang.String str5 = ternaryValue2.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue6 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue7 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue8 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue9 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList10 = com.google.common.collect.ImmutableList.of(ternaryValue6, ternaryValue7, ternaryValue8, ternaryValue9);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue11 = ternaryValue2.or(ternaryValue7);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue12 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue13 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue14 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue15 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList16 = com.google.common.collect.ImmutableList.of(ternaryValue12, ternaryValue13, ternaryValue14, ternaryValue15);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue17 = ternaryValue7.xor(ternaryValue12);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue18 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue19 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue20 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue21 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList22 = com.google.common.collect.ImmutableList.of(ternaryValue18, ternaryValue19, ternaryValue20, ternaryValue21);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue23 = ternaryValue12.xor(ternaryValue19);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue24 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = ternaryValue12.or(ternaryValue24);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder26 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>>();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumList27 = ternaryValueEnumBuilder26.build();
        com.google.javascript.rhino.jstype.TernaryValue[] ternaryValueArray28 = new com.google.javascript.rhino.jstype.TernaryValue[] {};
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder29 = ternaryValueEnumBuilder26.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>[]) ternaryValueArray28);
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumList30 = ternaryValueEnumBuilder29.build();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue31 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue32 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue33 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue34 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList35 = com.google.common.collect.ImmutableList.of(ternaryValue31, ternaryValue32, ternaryValue33, ternaryValue34);
        java.lang.String str36 = ternaryValue33.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue37 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue38 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue39 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue40 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList41 = com.google.common.collect.ImmutableList.of(ternaryValue37, ternaryValue38, ternaryValue39, ternaryValue40);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue42 = ternaryValue33.or(ternaryValue38);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue43 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue44 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue45 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue46 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList47 = com.google.common.collect.ImmutableList.of(ternaryValue43, ternaryValue44, ternaryValue45, ternaryValue46);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue48 = ternaryValue38.xor(ternaryValue43);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder49 = ternaryValueEnumBuilder29.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>) ternaryValue43);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue50 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue51 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue52 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue53 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue54 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList55 = com.google.common.collect.ImmutableList.of(ternaryValue51, ternaryValue52, ternaryValue53, ternaryValue54);
        java.lang.String str56 = ternaryValue53.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue57 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue58 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue59 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue60 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList61 = com.google.common.collect.ImmutableList.of(ternaryValue57, ternaryValue58, ternaryValue59, ternaryValue60);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue62 = ternaryValue53.or(ternaryValue58);
        java.lang.String str63 = ternaryValue58.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue64 = ternaryValue50.xor(ternaryValue58);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue65 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue66 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue67 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue68 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList69 = com.google.common.collect.ImmutableList.of(ternaryValue65, ternaryValue66, ternaryValue67, ternaryValue68);
        java.lang.String str70 = ternaryValue67.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue71 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue72 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue73 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue74 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList75 = com.google.common.collect.ImmutableList.of(ternaryValue71, ternaryValue72, ternaryValue73, ternaryValue74);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue76 = ternaryValue67.or(ternaryValue72);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue77 = ternaryValue76.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue78 = ternaryValue76.not();
        boolean boolean80 = ternaryValue78.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue81 = ternaryValue64.xor(ternaryValue78);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder82 = ternaryValueEnumBuilder29.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>) ternaryValue81);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue83 = ternaryValue12.or(ternaryValue81);
        org.junit.Assert.assertNotNull(ternaryValue0);
        org.junit.Assert.assertNotNull(ternaryValue1);
        org.junit.Assert.assertNotNull(ternaryValue2);
        org.junit.Assert.assertNotNull(ternaryValue3);
        org.junit.Assert.assertNotNull(ternaryValueList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "true" + "'", str5, "true");
        org.junit.Assert.assertNotNull(ternaryValue6);
        org.junit.Assert.assertNotNull(ternaryValue7);
        org.junit.Assert.assertNotNull(ternaryValue8);
        org.junit.Assert.assertNotNull(ternaryValue9);
        org.junit.Assert.assertNotNull(ternaryValueList10);
        org.junit.Assert.assertNotNull(ternaryValue11);
        org.junit.Assert.assertNotNull(ternaryValue12);
        org.junit.Assert.assertNotNull(ternaryValue13);
        org.junit.Assert.assertNotNull(ternaryValue14);
        org.junit.Assert.assertNotNull(ternaryValue15);
        org.junit.Assert.assertNotNull(ternaryValueList16);
        org.junit.Assert.assertNotNull(ternaryValue17);
        org.junit.Assert.assertNotNull(ternaryValue18);
        org.junit.Assert.assertNotNull(ternaryValue19);
        org.junit.Assert.assertNotNull(ternaryValue20);
        org.junit.Assert.assertNotNull(ternaryValue21);
        org.junit.Assert.assertNotNull(ternaryValueList22);
        org.junit.Assert.assertNotNull(ternaryValue23);
        org.junit.Assert.assertNotNull(ternaryValue24);
        org.junit.Assert.assertNotNull(ternaryValue25);
        org.junit.Assert.assertNotNull(ternaryValueEnumList27);
        org.junit.Assert.assertNotNull(ternaryValueArray28);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder29);
        org.junit.Assert.assertNotNull(ternaryValueEnumList30);
        org.junit.Assert.assertNotNull(ternaryValue31);
        org.junit.Assert.assertNotNull(ternaryValue32);
        org.junit.Assert.assertNotNull(ternaryValue33);
        org.junit.Assert.assertNotNull(ternaryValue34);
        org.junit.Assert.assertNotNull(ternaryValueList35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "true" + "'", str36, "true");
        org.junit.Assert.assertNotNull(ternaryValue37);
        org.junit.Assert.assertNotNull(ternaryValue38);
        org.junit.Assert.assertNotNull(ternaryValue39);
        org.junit.Assert.assertNotNull(ternaryValue40);
        org.junit.Assert.assertNotNull(ternaryValueList41);
        org.junit.Assert.assertNotNull(ternaryValue42);
        org.junit.Assert.assertNotNull(ternaryValue43);
        org.junit.Assert.assertNotNull(ternaryValue44);
        org.junit.Assert.assertNotNull(ternaryValue45);
        org.junit.Assert.assertNotNull(ternaryValue46);
        org.junit.Assert.assertNotNull(ternaryValueList47);
        org.junit.Assert.assertNotNull(ternaryValue48);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder49);
        org.junit.Assert.assertNotNull(ternaryValue50);
        org.junit.Assert.assertNotNull(ternaryValue51);
        org.junit.Assert.assertNotNull(ternaryValue52);
        org.junit.Assert.assertNotNull(ternaryValue53);
        org.junit.Assert.assertNotNull(ternaryValue54);
        org.junit.Assert.assertNotNull(ternaryValueList55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "true" + "'", str56, "true");
        org.junit.Assert.assertNotNull(ternaryValue57);
        org.junit.Assert.assertNotNull(ternaryValue58);
        org.junit.Assert.assertNotNull(ternaryValue59);
        org.junit.Assert.assertNotNull(ternaryValue60);
        org.junit.Assert.assertNotNull(ternaryValueList61);
        org.junit.Assert.assertNotNull(ternaryValue62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "true" + "'", str63, "true");
        org.junit.Assert.assertNotNull(ternaryValue64);
        org.junit.Assert.assertNotNull(ternaryValue65);
        org.junit.Assert.assertNotNull(ternaryValue66);
        org.junit.Assert.assertNotNull(ternaryValue67);
        org.junit.Assert.assertNotNull(ternaryValue68);
        org.junit.Assert.assertNotNull(ternaryValueList69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "true" + "'", str70, "true");
        org.junit.Assert.assertNotNull(ternaryValue71);
        org.junit.Assert.assertNotNull(ternaryValue72);
        org.junit.Assert.assertNotNull(ternaryValue73);
        org.junit.Assert.assertNotNull(ternaryValue74);
        org.junit.Assert.assertNotNull(ternaryValueList75);
        org.junit.Assert.assertNotNull(ternaryValue76);
        org.junit.Assert.assertNotNull(ternaryValue77);
        org.junit.Assert.assertNotNull(ternaryValue78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(ternaryValue81);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder82);
        org.junit.Assert.assertNotNull(ternaryValue83);
    }

    @Test
    public void test01549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01549");
        java.lang.String str1 = com.google.javascript.rhino.jstype.ObjectType.createDelegateSuffix("java.io.IOException: NUMBER -1.0 12");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "(java.io.IOException: NUMBER -1.0 12)" + "'", str1, "(java.io.IOException: NUMBER -1.0 12)");
    }

    @Test
    public void test01550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01550");
        com.google.javascript.rhino.InputId inputId1 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId3 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId5 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId7 = new com.google.javascript.rhino.InputId("true");
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.InputId> inputIdList8 = com.google.common.collect.ImmutableList.of(inputId1, inputId3, inputId5, inputId7);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isQualifiedName();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isContinue();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType24 = null;
        node22.setJSType(jSType24);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean30 = node29.isContinue();
        com.google.javascript.rhino.Node node31 = node22.clonePropsFrom(node29);
        node17.addChildrenToBack(node22);
        boolean boolean33 = node17.isLocalResultCall();
        com.google.javascript.rhino.Node node34 = node12.copyInformationFromForTree(node17);
        boolean boolean35 = node12.isObjectLit();
        boolean boolean36 = inputId7.equals((java.lang.Object) node12);
        java.lang.String str37 = inputId7.toString();
        java.lang.String str38 = inputId7.toString();
        org.junit.Assert.assertNotNull(inputIdList8);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "InputId: true" + "'", str37, "InputId: true");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "InputId: true" + "'", str38, "InputId: true");
    }

    @Test
    public void test01551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01551");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        int int2 = sideEffectFlags1.valueOf();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.setMutatesThis();
        int int5 = sideEffectFlags1.valueOf();
        sideEffectFlags1.clearSideEffectFlags();
        sideEffectFlags1.setMutatesGlobalState();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 52 + "'", int2 == 52);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 29 + "'", int5 == 29);
    }

    @Test
    public void test01552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01552");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isContinue();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType10 = null;
        node8.setJSType(jSType10);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean16 = node15.isContinue();
        com.google.javascript.rhino.Node node17 = node8.clonePropsFrom(node15);
        node3.addChildrenToBack(node8);
        com.google.javascript.rhino.InputId inputId19 = node3.getInputId();
        boolean boolean20 = node3.isAdd();
        boolean boolean21 = node3.isBlock();
        boolean boolean22 = node3.isNull();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(inputId19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test01553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01553");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isContinue();
        boolean boolean19 = node17.isString();
        com.google.javascript.rhino.Node node20 = node4.useSourceInfoFromForTree(node17);
        com.google.javascript.rhino.InputId inputId21 = null;
        node20.setInputId(inputId21);
        java.lang.Object obj24 = node20.getProp((int) (short) 10);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        node28.setJSType(jSType30);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isContinue();
        com.google.javascript.rhino.Node node37 = node28.clonePropsFrom(node35);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isContinue();
        boolean boolean43 = node41.isString();
        com.google.javascript.rhino.Node node44 = node28.useSourceInfoFromForTree(node41);
        com.google.javascript.rhino.InputId inputId45 = null;
        node44.setInputId(inputId45);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isQualifiedName();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean61 = node60.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType62 = null;
        node60.setJSType(jSType62);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean68 = node67.isContinue();
        com.google.javascript.rhino.Node node69 = node60.clonePropsFrom(node67);
        node55.addChildrenToBack(node60);
        boolean boolean71 = node55.isLocalResultCall();
        com.google.javascript.rhino.Node node72 = node50.copyInformationFromForTree(node55);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(0, node20, node44, node55, (int) (short) 10, 53);
        boolean boolean76 = node44.isCatch();
        boolean boolean77 = node44.isNot();
        boolean boolean78 = node44.isNE();
        boolean boolean79 = node44.isRegExp();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test01554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01554");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getStartLine();
        int int2 = stringPosition0.getEndLine();
        int int3 = stringPosition0.getPositionOnEndLine();
        int int4 = stringPosition0.getStartLine();
        stringPosition0.setItem("false");
        int int7 = stringPosition0.getStartLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test01555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01555");
        java.io.IOException iOException0 = new java.io.IOException();
        java.io.IOException iOException1 = new java.io.IOException((java.lang.Throwable) iOException0);
        java.io.IOException iOException2 = new java.io.IOException((java.lang.Throwable) iOException1);
        java.lang.Throwable[] throwableArray3 = iOException1.getSuppressed();
        java.io.IOException iOException5 = new java.io.IOException("Unknown class name");
        java.io.IOException iOException6 = new java.io.IOException();
        java.io.IOException iOException7 = new java.io.IOException((java.lang.Throwable) iOException6);
        java.io.IOException iOException8 = new java.io.IOException((java.lang.Throwable) iOException7);
        java.lang.Throwable[] throwableArray9 = iOException7.getSuppressed();
        java.io.IOException iOException10 = new java.io.IOException();
        java.io.IOException iOException11 = new java.io.IOException((java.lang.Throwable) iOException10);
        java.io.IOException iOException12 = new java.io.IOException((java.lang.Throwable) iOException11);
        java.io.IOException iOException13 = new java.io.IOException();
        java.io.IOException iOException14 = new java.io.IOException((java.lang.Throwable) iOException13);
        java.io.IOException iOException15 = new java.io.IOException((java.lang.Throwable) iOException14);
        java.lang.Throwable[] throwableArray16 = iOException14.getSuppressed();
        java.io.IOException iOException17 = new java.io.IOException();
        java.io.IOException iOException18 = new java.io.IOException((java.lang.Throwable) iOException17);
        java.io.IOException iOException19 = new java.io.IOException((java.lang.Throwable) iOException18);
        java.io.IOException iOException20 = new java.io.IOException((java.lang.Throwable) iOException18);
        java.io.IOException iOException21 = new java.io.IOException();
        java.io.IOException iOException23 = new java.io.IOException("Unknown class name");
        java.io.IOException iOException25 = new java.io.IOException("Unknown class name");
        java.io.IOException iOException26 = new java.io.IOException();
        java.io.IOException iOException27 = new java.io.IOException((java.lang.Throwable) iOException26);
        java.io.IOException iOException28 = new java.io.IOException((java.lang.Throwable) iOException27);
        java.io.IOException iOException29 = new java.io.IOException((java.lang.Throwable) iOException27);
        java.io.IOException iOException30 = new java.io.IOException();
        com.google.common.collect.ImmutableList<java.io.IOException> iOExceptionList31 = com.google.common.collect.ImmutableList.of(iOException1, iOException5, iOException7, iOException11, iOException14, iOException18, iOException21, iOException23, iOException25, iOException29, iOException30);
        java.io.IOException iOException32 = new java.io.IOException((java.lang.Throwable) iOException5);
        java.io.IOException iOException33 = new java.io.IOException((java.lang.Throwable) iOException32);
        java.lang.Throwable[] throwableArray34 = iOException32.getSuppressed();
        java.lang.Throwable[] throwableArray35 = iOException32.getSuppressed();
        com.google.common.collect.ImmutableList<java.lang.Throwable> throwableList36 = com.google.common.collect.ImmutableList.copyOf(throwableArray35);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(iOExceptionList31);
        org.junit.Assert.assertNotNull(throwableArray34);
        org.junit.Assert.assertNotNull(throwableArray35);
        org.junit.Assert.assertNotNull(throwableList36);
    }

    @Test
    public void test01556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01556");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        java.lang.String str4 = jSDocInfo0.getMeaning();
        boolean boolean6 = jSDocInfo0.hasParameter("Unknown class name");
        boolean boolean7 = jSDocInfo0.hasFileOverview();
        boolean boolean8 = jSDocInfo0.isNoSideEffects();
        boolean boolean9 = jSDocInfo0.isExport();
        java.lang.String str10 = jSDocInfo0.getMeaning();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test01557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01557");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getParameterType("true");
        boolean boolean6 = jSDocInfo0.isNoAlias();
        java.lang.String str7 = jSDocInfo0.getSourceName();
        boolean boolean9 = jSDocInfo0.hasParameter("(STRING true\n)");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test01558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01558");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        java.lang.String str4 = jSDocInfo0.getMeaning();
        java.lang.String str5 = jSDocInfo0.getLicense();
        boolean boolean6 = jSDocInfo0.hasType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getReturnType();
        jSDocInfo0.setLicense("Not declared as a constructor");
        int int10 = jSDocInfo0.getParameterCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo0.getBaseType();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(jSTypeExpression11);
    }

    @Test
    public void test01559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01559");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isQualifiedName();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isContinue();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        node32.setJSType(jSType34);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isContinue();
        com.google.javascript.rhino.Node node41 = node32.clonePropsFrom(node39);
        node27.addChildrenToBack(node32);
        boolean boolean43 = node27.isLocalResultCall();
        com.google.javascript.rhino.Node node44 = node22.copyInformationFromForTree(node27);
        boolean boolean45 = serializableList17.contains((java.lang.Object) node27);
        java.io.Serializable[] serializableArray62 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList63 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray62);
        boolean boolean64 = serializableList17.containsAll((java.util.Collection<java.io.Serializable>) serializableList63);
        boolean boolean65 = serializableList17.isEmpty();
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean70 = node69.isContinue();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean75 = node74.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType76 = null;
        node74.setJSType(jSType76);
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean82 = node81.isContinue();
        com.google.javascript.rhino.Node node83 = node74.clonePropsFrom(node81);
        node69.addChildrenToBack(node74);
        int int85 = serializableList17.indexOf((java.lang.Object) node69);
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList86 = serializableList17.asList();
        boolean boolean87 = serializableList86.isEmpty();
        int int88 = serializableList86.size();
        boolean boolean89 = serializableList86.isEmpty();
        java.util.stream.Stream<java.io.Serializable> serializableStream90 = serializableList86.stream();
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.UnmodifiableListIterator<java.io.Serializable> serializableItor92 = serializableList86.listIterator(54);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: index (54) must not be greater than size (16)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(serializableArray62);
        org.junit.Assert.assertNotNull(serializableList63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertNotNull(serializableList86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 16 + "'", int88 == 16);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(serializableStream90);
    }

    @Test
    public void test01560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01560");
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue[]> ternaryValueArrayList0 = com.google.common.collect.ImmutableList.of();
        org.junit.Assert.assertNotNull(ternaryValueArrayList0);
    }

    @Test
    public void test01561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01561");
        java.lang.String[] strArray3 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        java.lang.Object[] objArray6 = strSet4.toArray();
        java.lang.String[] strArray10 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        java.lang.Object[] objArray13 = strSet11.toArray();
        java.lang.String[] strArray17 = new java.lang.String[] { "", "", "hi!" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        java.lang.String[] strArray23 = new java.lang.String[] { "Unknown class name", "", "true" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        java.lang.String[] strArray29 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        java.lang.Object[] objArray32 = strSet30.toArray();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "Unknown class name", "true" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        java.lang.String[] strArray40 = new java.lang.String[] { "true" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        java.lang.String[] strArray46 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet47 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet47, strArray46);
        java.lang.Object[] objArray49 = strSet47.toArray();
        java.lang.String[] strArray53 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet54 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet54, strArray53);
        java.lang.Object[] objArray56 = strSet54.toArray();
        java.lang.String[] strArray60 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet61 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet61, strArray60);
        java.lang.Object[] objArray63 = strSet61.toArray();
        java.lang.String[] strArray68 = new java.lang.String[] { "hi!", "true", "Unknown class name", "Unknown class name" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        java.lang.String[] strArray73 = new java.lang.String[] { "Unknown class name", "true" };
        java.util.ArrayList<java.lang.String> strList74 = new java.util.ArrayList<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList74, strArray73);
        java.util.AbstractCollection[] abstractCollectionArray77 = new java.util.AbstractCollection[0];
        @SuppressWarnings("unchecked")
        java.util.AbstractCollection<java.lang.String>[] strCollectionArray78 = (java.util.AbstractCollection<java.lang.String>[]) abstractCollectionArray77;
        com.google.common.collect.ImmutableList<java.util.AbstractCollection<java.lang.String>> strCollectionList79 = com.google.common.collect.ImmutableList.of((java.util.AbstractCollection<java.lang.String>) strSet4, (java.util.AbstractCollection<java.lang.String>) strSet11, (java.util.AbstractCollection<java.lang.String>) strList18, (java.util.AbstractCollection<java.lang.String>) strList24, (java.util.AbstractCollection<java.lang.String>) strSet30, (java.util.AbstractCollection<java.lang.String>) strList37, (java.util.AbstractCollection<java.lang.String>) strList41, (java.util.AbstractCollection<java.lang.String>) strSet47, (java.util.AbstractCollection<java.lang.String>) strSet54, (java.util.AbstractCollection<java.lang.String>) strSet61, (java.util.AbstractCollection<java.lang.String>) strList69, (java.util.AbstractCollection<java.lang.String>) strList74, (java.util.AbstractCollection<java.lang.String>[]) abstractCollectionArray77);
        java.util.Spliterator<java.lang.String> strSpliterator80 = strSet47.spliterator();
        java.lang.Object[] objArray81 = strSet47.toArray();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(abstractCollectionArray77);
        org.junit.Assert.assertNotNull(strCollectionArray78);
        org.junit.Assert.assertNotNull(strCollectionList79);
        org.junit.Assert.assertNotNull(strSpliterator80);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[Unknown class name, ]");
    }

    @Test
    public void test01562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01562");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 12);
        boolean boolean2 = node1.isNE();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test01563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01563");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isQualifiedName();
        boolean boolean5 = node3.isHook();
        int int6 = node3.getLength();
        java.io.Serializable[] serializableArray23 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList24 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray23);
        boolean boolean25 = serializableList24.isEmpty();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean30 = node29.isQualifiedName();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean35 = node34.isContinue();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType41 = null;
        node39.setJSType(jSType41);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isContinue();
        com.google.javascript.rhino.Node node48 = node39.clonePropsFrom(node46);
        node34.addChildrenToBack(node39);
        boolean boolean50 = node34.isLocalResultCall();
        com.google.javascript.rhino.Node node51 = node29.copyInformationFromForTree(node34);
        boolean boolean52 = serializableList24.contains((java.lang.Object) node34);
        java.io.Serializable[] serializableArray69 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList70 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray69);
        boolean boolean71 = serializableList24.containsAll((java.util.Collection<java.io.Serializable>) serializableList70);
        boolean boolean72 = serializableList24.isEmpty();
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean77 = node76.isContinue();
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean82 = node81.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType83 = null;
        node81.setJSType(jSType83);
        com.google.javascript.rhino.Node node88 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean89 = node88.isContinue();
        com.google.javascript.rhino.Node node90 = node81.clonePropsFrom(node88);
        node76.addChildrenToBack(node81);
        int int92 = serializableList24.indexOf((java.lang.Object) node76);
        boolean boolean93 = node76.isQualifiedName();
        node3.addChildToBack(node76);
        node3.putIntProp(44, (int) (short) -1);
        boolean boolean98 = node3.isGetProp();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(serializableArray23);
        org.junit.Assert.assertNotNull(serializableList24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(serializableArray69);
        org.junit.Assert.assertNotNull(serializableList70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(node90);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test01564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01564");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isQualifiedName();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isContinue();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType15 = null;
        node13.setJSType(jSType15);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean21 = node20.isContinue();
        com.google.javascript.rhino.Node node22 = node13.clonePropsFrom(node20);
        node8.addChildrenToBack(node13);
        boolean boolean24 = node8.isLocalResultCall();
        com.google.javascript.rhino.Node node25 = node3.copyInformationFromForTree(node8);
        node8.setSourceEncodedPosition((int) (short) -1);
        boolean boolean28 = node8.isName();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isLabelName();
        boolean boolean34 = node32.isDec();
        boolean boolean35 = node32.isNoSideEffectsCall();
        boolean boolean36 = node32.isIf();
        com.google.javascript.rhino.Node node37 = node32.getLastSibling();
        com.google.javascript.rhino.Node node38 = node8.srcref(node32);
        boolean boolean39 = node8.isParamList();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression41 = new com.google.javascript.rhino.JSTypeExpression(node8, "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        boolean boolean42 = jSTypeExpression41.isOptionalArg();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression43 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression41);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(jSTypeExpression43);
    }

    @Test
    public void test01565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01565");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        boolean boolean5 = node3.isDec();
        boolean boolean6 = node3.isAssign();
        boolean boolean7 = node3.isIn();
        node3.setCharno((int) (short) 0);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType15 = null;
        node13.setJSType(jSType15);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean21 = node20.isContinue();
        com.google.javascript.rhino.Node node22 = node13.clonePropsFrom(node20);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean27 = node26.isContinue();
        boolean boolean28 = node26.isString();
        com.google.javascript.rhino.Node node29 = node13.useSourceInfoFromForTree(node26);
        com.google.javascript.rhino.InputId inputId30 = null;
        node29.setInputId(inputId30);
        java.lang.Object obj33 = node29.getProp((int) (short) 10);
        com.google.javascript.rhino.JSDocInfo jSDocInfo34 = node29.getJSDocInfo();
        java.io.Serializable[] serializableArray51 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList52 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray51);
        boolean boolean53 = serializableList52.isEmpty();
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean58 = node57.isQualifiedName();
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean63 = node62.isContinue();
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean68 = node67.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType69 = null;
        node67.setJSType(jSType69);
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean75 = node74.isContinue();
        com.google.javascript.rhino.Node node76 = node67.clonePropsFrom(node74);
        node62.addChildrenToBack(node67);
        boolean boolean78 = node62.isLocalResultCall();
        com.google.javascript.rhino.Node node79 = node57.copyInformationFromForTree(node62);
        boolean boolean80 = serializableList52.contains((java.lang.Object) node62);
        int int81 = node62.getSourcePosition();
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean86 = node85.isLabelName();
        boolean boolean87 = node85.isDec();
        boolean boolean88 = node85.isNoSideEffectsCall();
        node62.addChildToBack(node85);
        boolean boolean90 = node85.isVoid();
        boolean boolean91 = node85.isEmpty();
        com.google.javascript.rhino.Node node92 = node85.cloneNode();
        boolean boolean93 = node29.hasChild(node85);
        node29.setCharno(49);
        node3.addChildToFront(node29);
        boolean boolean97 = node3.isQualifiedName();
        java.lang.Object obj99 = node3.getProp((int) '#');
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertNull(jSDocInfo34);
        org.junit.Assert.assertNotNull(serializableArray51);
        org.junit.Assert.assertNotNull(serializableList52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNull(obj99);
    }

    @Test
    public void test01566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01566");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        node12.setSourceFileForTesting("hi!");
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        com.google.javascript.rhino.Node node20 = node12.copyInformationFrom(node18);
        boolean boolean21 = node20.isParamList();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test01567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01567");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isContinue();
        boolean boolean18 = node16.isString();
        com.google.javascript.rhino.Node node19 = node3.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.InputId inputId20 = null;
        node19.setInputId(inputId20);
        node19.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType29 = null;
        node27.setJSType(jSType29);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean35 = node34.isContinue();
        com.google.javascript.rhino.Node node36 = node27.clonePropsFrom(node34);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile37 = null;
        node36.setStaticSourceFile(staticSourceFile37);
        com.google.javascript.rhino.Node node39 = node36.getLastSibling();
        com.google.javascript.rhino.Node node40 = node19.srcrefTree(node36);
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newString("Unknown class name");
        com.google.javascript.rhino.Node node43 = node42.getLastSibling();
        int int44 = node42.getSourcePosition();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder45 = node42.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean50 = node49.isContinue();
        boolean boolean51 = node49.isDo();
        node49.setSourceEncodedPosition(2);
        int int54 = node49.getSideEffectFlags();
        node42.addChildToFront(node49);
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean60 = node59.isContinue();
        boolean boolean61 = node59.isString();
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean66 = node65.isLabelName();
        boolean boolean67 = node65.isDec();
        boolean boolean68 = node65.isAssign();
        boolean boolean69 = node59.isEquivalentTo(node65);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList70 = com.google.common.collect.ImmutableList.of(node36, node42, node65);
        boolean boolean71 = node65.isLabel();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(nodeList70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test01568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01568");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable13 = node12.children();
        boolean boolean14 = node12.isSetterDef();
        boolean boolean15 = node12.isFromExterns();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean25 = node24.isQualifiedName();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean30 = node29.isContinue();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean35 = node34.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType36 = null;
        node34.setJSType(jSType36);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isContinue();
        com.google.javascript.rhino.Node node43 = node34.clonePropsFrom(node41);
        node29.addChildrenToBack(node34);
        boolean boolean45 = node29.isLocalResultCall();
        com.google.javascript.rhino.Node node46 = node24.copyInformationFromForTree(node29);
        node29.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node49 = node20.clonePropsFrom(node29);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean54 = node53.isInstanceOf();
        boolean boolean55 = node53.isComma();
        boolean boolean56 = node20.isEquivalentTo(node53);
        boolean boolean57 = node53.isComma();
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(0, 10, 0);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(51, node53, node61, (int) (short) 10, (int) ' ');
        com.google.javascript.rhino.Node node65 = node12.copyInformationFrom(node53);
        boolean boolean66 = node53.isTry();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(nodeIterable13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test01569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01569");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(37, "hi!", (int) (byte) 100, (int) (short) 100);
        boolean boolean5 = node4.isDo();
        boolean boolean6 = node4.isLabel();
        boolean boolean7 = node4.isAnd();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test01570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01570");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getModifies();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags4 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        sideEffectFlags4.setMutatesGlobalState();
        boolean boolean6 = sideEffectFlags4.areAllFlagsSet();
        sideEffectFlags4.setMutatesGlobalState();
        boolean boolean8 = strSet2.remove((java.lang.Object) sideEffectFlags4);
        int int9 = strSet2.size();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) 29, 0, 35);
        boolean boolean14 = node13.isIn();
        boolean boolean15 = strSet2.equals((java.lang.Object) node13);
        node13.putBooleanProp(0, false);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test01571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01571");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(32, (int) (byte) 10, (int) '#');
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isQualifiedName();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isContinue();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType24 = null;
        node22.setJSType(jSType24);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean30 = node29.isContinue();
        com.google.javascript.rhino.Node node31 = node22.clonePropsFrom(node29);
        node17.addChildrenToBack(node22);
        boolean boolean33 = node17.isLocalResultCall();
        com.google.javascript.rhino.Node node34 = node12.copyInformationFromForTree(node17);
        node17.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node37 = node8.clonePropsFrom(node17);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isInstanceOf();
        boolean boolean43 = node41.isComma();
        boolean boolean44 = node8.isEquivalentTo(node41);
        boolean boolean45 = node41.isComma();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) '#', node4, node41, 42, (int) ' ');
        boolean boolean49 = node48.isComma();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("true", 42, 8);
        int int54 = node53.getCharno();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean59 = node58.isQualifiedName();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean64 = node63.isContinue();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean69 = node68.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType70 = null;
        node68.setJSType(jSType70);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean76 = node75.isContinue();
        com.google.javascript.rhino.Node node77 = node68.clonePropsFrom(node75);
        node63.addChildrenToBack(node68);
        boolean boolean79 = node63.isLocalResultCall();
        com.google.javascript.rhino.Node node80 = node58.copyInformationFromForTree(node63);
        node63.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.InputId inputId83 = node63.getInputId();
        node63.setOptionalArg(false);
        com.google.javascript.rhino.Node node89 = com.google.javascript.rhino.Node.newString("hi!", (int) '4', 52);
        boolean boolean90 = node63.isEquivalentTo(node89);
        com.google.javascript.rhino.Node node91 = node53.srcref(node89);
        node48.addChildrenToFront(node91);
        boolean boolean93 = node48.isNumber();
        // The following exception was thrown during execution in test generation
        try {
            node48.setString("java.io.IOException: Not declared as a type name");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: GETELEM 42 is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 8 + "'", int54 == 8);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNull(inputId83);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test01572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01572");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        java.lang.String str4 = jSDocInfo0.getMeaning();
        boolean boolean6 = jSDocInfo0.hasParameter("Unknown class name");
        boolean boolean7 = jSDocInfo0.hasEnumParameterType();
        boolean boolean8 = jSDocInfo0.hasType();
        boolean boolean9 = jSDocInfo0.isInterface();
        boolean boolean10 = jSDocInfo0.isConstructor();
        java.lang.String str11 = jSDocInfo0.getFileOverview();
        java.lang.String str12 = jSDocInfo0.getSourceName();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test01573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01573");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean8 = node7.isQualifiedName();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isContinue();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType19 = null;
        node17.setJSType(jSType19);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean25 = node24.isContinue();
        com.google.javascript.rhino.Node node26 = node17.clonePropsFrom(node24);
        node12.addChildrenToBack(node17);
        boolean boolean28 = node12.isLocalResultCall();
        com.google.javascript.rhino.Node node29 = node7.copyInformationFromForTree(node12);
        node12.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node32 = node3.clonePropsFrom(node12);
        com.google.javascript.rhino.Node node33 = node32.getLastSibling();
        java.lang.String str34 = node33.getSourceFileName();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNull(str34);
    }

    @Test
    public void test01574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01574");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isContinue();
        boolean boolean18 = node16.isString();
        com.google.javascript.rhino.Node node19 = node3.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.InputId inputId20 = null;
        node19.setInputId(inputId20);
        java.lang.Object obj23 = node19.getProp((int) (short) 10);
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node19.getJSDocInfo();
        node19.setVarArgs(true);
        boolean boolean27 = node19.isFor();
        java.lang.String str28 = node19.getQualifiedName();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable29 = node19.siblings();
        boolean boolean30 = node19.isDo();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(nodeIterable29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test01575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01575");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isQualifiedName();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isContinue();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType15 = null;
        node13.setJSType(jSType15);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean21 = node20.isContinue();
        com.google.javascript.rhino.Node node22 = node13.clonePropsFrom(node20);
        node8.addChildrenToBack(node13);
        boolean boolean24 = node8.isLocalResultCall();
        com.google.javascript.rhino.Node node25 = node3.copyInformationFromForTree(node8);
        node8.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.InputId inputId28 = node8.getInputId();
        node8.setLineno(54);
        boolean boolean31 = node8.isVoid();
        boolean boolean32 = node8.isFromExterns();
        boolean boolean33 = node8.isSwitch();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean39 = node38.isQualifiedName();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean44 = node43.isContinue();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean49 = node48.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        node48.setJSType(jSType50);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node57 = node48.clonePropsFrom(node55);
        node43.addChildrenToBack(node48);
        boolean boolean59 = node43.isLocalResultCall();
        com.google.javascript.rhino.Node node60 = node38.copyInformationFromForTree(node43);
        boolean boolean61 = node43.isParamList();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(38, node43, 51, 38);
        int int65 = node64.getSideEffectFlags();
        java.lang.String str66 = node64.getSourceFileName();
        node8.addChildrenToBack(node64);
        // The following exception was thrown during execution in test generation
        try {
            node8.setSideEffectFlags((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(inputId28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNull(str66);
    }

    @Test
    public void test01576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01576");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isQualifiedName();
        boolean boolean5 = node3.isHook();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = new com.google.javascript.rhino.JSTypeExpression(node3, "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        boolean boolean8 = jSTypeExpression7.isVarArgs();
        com.google.javascript.rhino.Node node9 = jSTypeExpression7.getRoot();
        java.io.Serializable[] serializableArray26 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList27 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray26);
        boolean boolean28 = serializableList27.isEmpty();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isQualifiedName();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean38 = node37.isContinue();
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean43 = node42.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType44 = null;
        node42.setJSType(jSType44);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean50 = node49.isContinue();
        com.google.javascript.rhino.Node node51 = node42.clonePropsFrom(node49);
        node37.addChildrenToBack(node42);
        boolean boolean53 = node37.isLocalResultCall();
        com.google.javascript.rhino.Node node54 = node32.copyInformationFromForTree(node37);
        boolean boolean55 = serializableList27.contains((java.lang.Object) node37);
        boolean boolean56 = serializableList27.isEmpty();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean61 = node60.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType62 = null;
        node60.setJSType(jSType62);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean68 = node67.isContinue();
        com.google.javascript.rhino.Node node69 = node60.clonePropsFrom(node67);
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean74 = node73.isContinue();
        boolean boolean75 = node73.isString();
        com.google.javascript.rhino.Node node76 = node60.useSourceInfoFromForTree(node73);
        boolean boolean77 = serializableList27.contains((java.lang.Object) node73);
        boolean boolean78 = jSTypeExpression7.equals((java.lang.Object) serializableList27);
        boolean boolean79 = jSTypeExpression7.isVarArgs();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(serializableArray26);
        org.junit.Assert.assertNotNull(serializableList27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test01577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01577");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("true", 42, 8);
        int int4 = node3.getCharno();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isQualifiedName();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isContinue();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node18.setJSType(jSType20);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isContinue();
        com.google.javascript.rhino.Node node27 = node18.clonePropsFrom(node25);
        node13.addChildrenToBack(node18);
        boolean boolean29 = node13.isLocalResultCall();
        com.google.javascript.rhino.Node node30 = node8.copyInformationFromForTree(node13);
        node13.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.InputId inputId33 = node13.getInputId();
        node13.setOptionalArg(false);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newString("hi!", (int) '4', 52);
        boolean boolean40 = node13.isEquivalentTo(node39);
        com.google.javascript.rhino.Node node41 = node3.srcref(node39);
        boolean boolean42 = node41.isSetterDef();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 8 + "'", int4 == 8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(inputId33);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test01578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01578");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getParameterType("true");
        boolean boolean6 = jSDocInfo0.isHidden();
        boolean boolean7 = jSDocInfo0.isDeprecated();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection8 = jSDocInfo0.getTypeNodes();
        java.lang.String str9 = jSDocInfo0.getDescription();
        java.lang.String str10 = jSDocInfo0.getVersion();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(nodeCollection8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test01579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01579");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        java.util.Set<java.lang.String> strSet4 = jSDocInfo0.getParameterNames();
        java.lang.String str5 = jSDocInfo0.getLendsName();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getEnumParameterType();
        java.lang.Class<?> wildcardClass7 = jSDocInfo0.getClass();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test01580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01580");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.hasFileOverview();
        boolean boolean5 = jSDocInfo0.isJavaDispatch();
        boolean boolean6 = jSDocInfo0.hasType();
        boolean boolean8 = jSDocInfo0.hasDescriptionForParameter("");
        boolean boolean9 = jSDocInfo0.isConstant();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getReturnType();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSTypeExpression10);
    }

    @Test
    public void test01581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01581");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isQualifiedName();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isContinue();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node18.setJSType(jSType20);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isContinue();
        com.google.javascript.rhino.Node node27 = node18.clonePropsFrom(node25);
        node13.addChildrenToBack(node18);
        boolean boolean29 = node13.isLocalResultCall();
        com.google.javascript.rhino.Node node30 = node8.copyInformationFromForTree(node13);
        node13.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node33 = node4.clonePropsFrom(node13);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean38 = node37.isLabelName();
        boolean boolean39 = node37.isTrue();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean44 = node43.isContinue();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean49 = node48.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        node48.setJSType(jSType50);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node57 = node48.clonePropsFrom(node55);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (byte) 0, node13, node37, node43, node57, 10, (int) (byte) -1);
        boolean boolean61 = node13.isIf();
        int int62 = node13.getType();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean67 = node66.isQualifiedName();
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean72 = node71.isContinue();
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean77 = node76.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType78 = null;
        node76.setJSType(jSType78);
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean84 = node83.isContinue();
        com.google.javascript.rhino.Node node85 = node76.clonePropsFrom(node83);
        node71.addChildrenToBack(node76);
        boolean boolean87 = node71.isLocalResultCall();
        com.google.javascript.rhino.Node node88 = node66.copyInformationFromForTree(node71);
        boolean boolean89 = node13.hasChild(node88);
        boolean boolean90 = node88.isLabelName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo91 = new com.google.javascript.rhino.JSDocInfo();
        int int92 = jSDocInfo91.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility93 = null;
        jSDocInfo91.setVisibility(visibility93);
        java.lang.String str95 = jSDocInfo91.getMeaning();
        java.lang.String str96 = jSDocInfo91.getLicense();
        boolean boolean97 = jSDocInfo91.hasType();
        boolean boolean98 = jSDocInfo91.isConstructor();
        node88.setJSDocInfo(jSDocInfo91);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertNull(str95);
        org.junit.Assert.assertNull(str96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test01582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01582");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isQualifiedName();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isContinue();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        node32.setJSType(jSType34);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isContinue();
        com.google.javascript.rhino.Node node41 = node32.clonePropsFrom(node39);
        node27.addChildrenToBack(node32);
        boolean boolean43 = node27.isLocalResultCall();
        com.google.javascript.rhino.Node node44 = node22.copyInformationFromForTree(node27);
        boolean boolean45 = serializableList17.contains((java.lang.Object) node27);
        java.io.Serializable[] serializableArray62 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList63 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray62);
        boolean boolean64 = serializableList17.containsAll((java.util.Collection<java.io.Serializable>) serializableList63);
        boolean boolean65 = serializableList17.isEmpty();
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean70 = node69.isContinue();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean75 = node74.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType76 = null;
        node74.setJSType(jSType76);
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean82 = node81.isContinue();
        com.google.javascript.rhino.Node node83 = node74.clonePropsFrom(node81);
        node69.addChildrenToBack(node74);
        int int85 = serializableList17.indexOf((java.lang.Object) node69);
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList86 = serializableList17.asList();
        boolean boolean87 = serializableList86.isEmpty();
        int int88 = serializableList86.size();
        boolean boolean89 = serializableList86.isEmpty();
        java.util.stream.Stream<java.io.Serializable> serializableStream90 = serializableList86.stream();
        java.util.Spliterator<java.io.Serializable> serializableSpliterator91 = serializableList86.spliterator();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(serializableArray62);
        org.junit.Assert.assertNotNull(serializableList63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertNotNull(serializableList86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 16 + "'", int88 == 16);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(serializableStream90);
        org.junit.Assert.assertNotNull(serializableSpliterator91);
    }

    @Test
    public void test01583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01583");
        java.io.IOException iOException0 = new java.io.IOException();
        java.io.IOException iOException1 = new java.io.IOException((java.lang.Throwable) iOException0);
        java.io.IOException iOException2 = new java.io.IOException((java.lang.Throwable) iOException1);
        java.lang.Throwable[] throwableArray3 = iOException1.getSuppressed();
        java.io.IOException iOException5 = new java.io.IOException("Unknown class name");
        java.io.IOException iOException6 = new java.io.IOException();
        java.io.IOException iOException7 = new java.io.IOException((java.lang.Throwable) iOException6);
        java.io.IOException iOException8 = new java.io.IOException((java.lang.Throwable) iOException7);
        java.lang.Throwable[] throwableArray9 = iOException7.getSuppressed();
        java.io.IOException iOException10 = new java.io.IOException();
        java.io.IOException iOException11 = new java.io.IOException((java.lang.Throwable) iOException10);
        java.io.IOException iOException12 = new java.io.IOException((java.lang.Throwable) iOException11);
        java.io.IOException iOException13 = new java.io.IOException();
        java.io.IOException iOException14 = new java.io.IOException((java.lang.Throwable) iOException13);
        java.io.IOException iOException15 = new java.io.IOException((java.lang.Throwable) iOException14);
        java.lang.Throwable[] throwableArray16 = iOException14.getSuppressed();
        java.io.IOException iOException17 = new java.io.IOException();
        java.io.IOException iOException18 = new java.io.IOException((java.lang.Throwable) iOException17);
        java.io.IOException iOException19 = new java.io.IOException((java.lang.Throwable) iOException18);
        java.io.IOException iOException20 = new java.io.IOException((java.lang.Throwable) iOException18);
        java.io.IOException iOException21 = new java.io.IOException();
        java.io.IOException iOException23 = new java.io.IOException("Unknown class name");
        java.io.IOException iOException25 = new java.io.IOException("Unknown class name");
        java.io.IOException iOException26 = new java.io.IOException();
        java.io.IOException iOException27 = new java.io.IOException((java.lang.Throwable) iOException26);
        java.io.IOException iOException28 = new java.io.IOException((java.lang.Throwable) iOException27);
        java.io.IOException iOException29 = new java.io.IOException((java.lang.Throwable) iOException27);
        java.io.IOException iOException30 = new java.io.IOException();
        com.google.common.collect.ImmutableList<java.io.IOException> iOExceptionList31 = com.google.common.collect.ImmutableList.of(iOException1, iOException5, iOException7, iOException11, iOException14, iOException18, iOException21, iOException23, iOException25, iOException29, iOException30);
        java.lang.Throwable[] throwableArray32 = iOException25.getSuppressed();
        java.lang.Throwable[] throwableArray33 = iOException25.getSuppressed();
        java.io.IOException iOException35 = new java.io.IOException();
        java.io.IOException iOException36 = new java.io.IOException((java.lang.Throwable) iOException35);
        java.io.IOException iOException37 = new java.io.IOException((java.lang.Throwable) iOException36);
        java.io.IOException iOException38 = new java.io.IOException((java.lang.Throwable) iOException36);
        java.io.IOException iOException39 = new java.io.IOException();
        java.io.IOException iOException40 = new java.io.IOException((java.lang.Throwable) iOException39);
        java.io.IOException iOException41 = new java.io.IOException((java.lang.Throwable) iOException40);
        java.lang.Throwable[] throwableArray42 = iOException40.getSuppressed();
        java.io.IOException iOException44 = new java.io.IOException("Unknown class name");
        java.io.IOException iOException45 = new java.io.IOException();
        java.io.IOException iOException46 = new java.io.IOException((java.lang.Throwable) iOException45);
        java.io.IOException iOException47 = new java.io.IOException((java.lang.Throwable) iOException46);
        java.lang.Throwable[] throwableArray48 = iOException46.getSuppressed();
        java.io.IOException iOException49 = new java.io.IOException();
        java.io.IOException iOException50 = new java.io.IOException((java.lang.Throwable) iOException49);
        java.io.IOException iOException51 = new java.io.IOException((java.lang.Throwable) iOException50);
        java.io.IOException iOException52 = new java.io.IOException();
        java.io.IOException iOException53 = new java.io.IOException((java.lang.Throwable) iOException52);
        java.io.IOException iOException54 = new java.io.IOException((java.lang.Throwable) iOException53);
        java.lang.Throwable[] throwableArray55 = iOException53.getSuppressed();
        java.io.IOException iOException56 = new java.io.IOException();
        java.io.IOException iOException57 = new java.io.IOException((java.lang.Throwable) iOException56);
        java.io.IOException iOException58 = new java.io.IOException((java.lang.Throwable) iOException57);
        java.io.IOException iOException59 = new java.io.IOException((java.lang.Throwable) iOException57);
        java.io.IOException iOException60 = new java.io.IOException();
        java.io.IOException iOException62 = new java.io.IOException("Unknown class name");
        java.io.IOException iOException64 = new java.io.IOException("Unknown class name");
        java.io.IOException iOException65 = new java.io.IOException();
        java.io.IOException iOException66 = new java.io.IOException((java.lang.Throwable) iOException65);
        java.io.IOException iOException67 = new java.io.IOException((java.lang.Throwable) iOException66);
        java.io.IOException iOException68 = new java.io.IOException((java.lang.Throwable) iOException66);
        java.io.IOException iOException69 = new java.io.IOException();
        com.google.common.collect.ImmutableList<java.io.IOException> iOExceptionList70 = com.google.common.collect.ImmutableList.of(iOException40, iOException44, iOException46, iOException50, iOException53, iOException57, iOException60, iOException62, iOException64, iOException68, iOException69);
        com.google.common.collect.ImmutableList<java.io.IOException> iOExceptionList71 = com.google.common.collect.ImmutableList.of(iOException36, iOException62);
        java.lang.Throwable[] throwableArray72 = iOException36.getSuppressed();
        java.io.IOException iOException73 = new java.io.IOException((java.lang.Throwable) iOException36);
        java.io.IOException iOException74 = new java.io.IOException("Not declared as a type name", (java.lang.Throwable) iOException36);
        iOException25.addSuppressed((java.lang.Throwable) iOException74);
        java.lang.Throwable throwable76 = null;
        // The following exception was thrown during execution in test generation
        try {
            iOException25.addSuppressed(throwable76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Cannot suppress a null exception.");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(iOExceptionList31);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(iOExceptionList70);
        org.junit.Assert.assertNotNull(iOExceptionList71);
        org.junit.Assert.assertNotNull(throwableArray72);
    }

    @Test
    public void test01584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01584");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isQualifiedName();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isContinue();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node18.setJSType(jSType20);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isContinue();
        com.google.javascript.rhino.Node node27 = node18.clonePropsFrom(node25);
        node13.addChildrenToBack(node18);
        boolean boolean29 = node13.isLocalResultCall();
        com.google.javascript.rhino.Node node30 = node8.copyInformationFromForTree(node13);
        node13.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node33 = node4.clonePropsFrom(node13);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean38 = node37.isInstanceOf();
        boolean boolean39 = node37.isComma();
        boolean boolean40 = node4.isEquivalentTo(node37);
        boolean boolean41 = node37.isOr();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean46 = node45.isContinue();
        boolean boolean47 = node45.isBlock();
        node45.removeProp(12);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean55 = node54.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType56 = null;
        node54.setJSType(jSType56);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean62 = node61.isContinue();
        com.google.javascript.rhino.Node node63 = node54.clonePropsFrom(node61);
        boolean boolean64 = node63.isQuotedString();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean69 = node68.isLabelName();
        boolean boolean70 = node68.isDec();
        boolean boolean71 = node68.isScript();
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node(0, node63, node68, node75, 0, (int) (short) 0);
        boolean boolean79 = node63.isTrue();
        com.google.javascript.rhino.Node node80 = node45.useSourceInfoIfMissingFromForTree(node63);
        com.google.javascript.rhino.Node node81 = node80.removeFirstChild();
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node((int) (short) -1, node37, node80, 53, 50);
        boolean boolean85 = node84.isThis();
        boolean boolean86 = node84.isInstanceOf();
        node84.addSuppression("InputId: java.io.IOException: java.io.IOException");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNull(node81);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test01585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01585");
        java.lang.String[] strArray3 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        java.lang.Object[] objArray6 = strSet4.toArray();
        java.io.Serializable[] serializableArray23 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList24 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray23);
        boolean boolean25 = serializableList24.isEmpty();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean30 = node29.isQualifiedName();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean35 = node34.isContinue();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType41 = null;
        node39.setJSType(jSType41);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isContinue();
        com.google.javascript.rhino.Node node48 = node39.clonePropsFrom(node46);
        node34.addChildrenToBack(node39);
        boolean boolean50 = node34.isLocalResultCall();
        com.google.javascript.rhino.Node node51 = node29.copyInformationFromForTree(node34);
        boolean boolean52 = serializableList24.contains((java.lang.Object) node34);
        java.util.Iterator<java.io.Serializable> serializableItor53 = serializableList24.iterator();
        boolean boolean54 = strSet4.containsAll((java.util.Collection<java.io.Serializable>) serializableList24);
        java.lang.Object[] objArray55 = serializableList24.toArray();
        boolean boolean56 = serializableList24.isEmpty();
        java.lang.Object[] objArray57 = serializableList24.toArray();
        com.google.javascript.rhino.JSDocInfo jSDocInfo58 = new com.google.javascript.rhino.JSDocInfo();
        int int59 = jSDocInfo58.getImplementedInterfaceCount();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection60 = jSDocInfo58.getTypeNodes();
        java.lang.String str61 = jSDocInfo58.getDescription();
        boolean boolean62 = jSDocInfo58.hasModifies();
        boolean boolean63 = jSDocInfo58.isConstant();
        int int64 = serializableList24.indexOf((java.lang.Object) jSDocInfo58);
        boolean boolean65 = jSDocInfo58.isInterface();
        com.google.javascript.rhino.Node node66 = jSDocInfo58.getAssociatedNode();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(serializableArray23);
        org.junit.Assert.assertNotNull(serializableList24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(serializableItor53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(nodeCollection60);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(node66);
    }

    @Test
    public void test01586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01586");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue0 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue1 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue2 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue3 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList4 = com.google.common.collect.ImmutableList.of(ternaryValue0, ternaryValue1, ternaryValue2, ternaryValue3);
        java.lang.String str5 = ternaryValue2.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue6 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue7 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue8 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue9 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList10 = com.google.common.collect.ImmutableList.of(ternaryValue6, ternaryValue7, ternaryValue8, ternaryValue9);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue11 = ternaryValue2.or(ternaryValue7);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue12 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue13 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue14 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue15 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList16 = com.google.common.collect.ImmutableList.of(ternaryValue12, ternaryValue13, ternaryValue14, ternaryValue15);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue17 = ternaryValue7.xor(ternaryValue12);
        boolean boolean19 = ternaryValue12.toBoolean(true);
        org.junit.Assert.assertNotNull(ternaryValue0);
        org.junit.Assert.assertNotNull(ternaryValue1);
        org.junit.Assert.assertNotNull(ternaryValue2);
        org.junit.Assert.assertNotNull(ternaryValue3);
        org.junit.Assert.assertNotNull(ternaryValueList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "true" + "'", str5, "true");
        org.junit.Assert.assertNotNull(ternaryValue6);
        org.junit.Assert.assertNotNull(ternaryValue7);
        org.junit.Assert.assertNotNull(ternaryValue8);
        org.junit.Assert.assertNotNull(ternaryValue9);
        org.junit.Assert.assertNotNull(ternaryValueList10);
        org.junit.Assert.assertNotNull(ternaryValue11);
        org.junit.Assert.assertNotNull(ternaryValue12);
        org.junit.Assert.assertNotNull(ternaryValue13);
        org.junit.Assert.assertNotNull(ternaryValue14);
        org.junit.Assert.assertNotNull(ternaryValue15);
        org.junit.Assert.assertNotNull(ternaryValueList16);
        org.junit.Assert.assertNotNull(ternaryValue17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test01587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01587");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        boolean boolean5 = node3.isTrue();
        boolean boolean6 = node3.isNoSideEffectsCall();
        boolean boolean7 = node3.isCase();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean16 = node15.isQualifiedName();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean21 = node20.isContinue();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType27 = null;
        node25.setJSType(jSType27);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isContinue();
        com.google.javascript.rhino.Node node34 = node25.clonePropsFrom(node32);
        node20.addChildrenToBack(node25);
        boolean boolean36 = node20.isLocalResultCall();
        com.google.javascript.rhino.Node node37 = node15.copyInformationFromForTree(node20);
        node20.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node40 = node11.clonePropsFrom(node20);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean45 = node44.isInstanceOf();
        boolean boolean46 = node44.isComma();
        boolean boolean47 = node11.isEquivalentTo(node44);
        boolean boolean48 = node44.isComma();
        com.google.javascript.rhino.Node node49 = node3.clonePropsFrom(node44);
        int int50 = node44.getLineno();
        boolean boolean51 = node44.isTrue();
        boolean boolean52 = node44.isLabel();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test01588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01588");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getStartLine();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isQualifiedName();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isContinue();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean22 = node21.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType23 = null;
        node21.setJSType(jSType23);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isContinue();
        com.google.javascript.rhino.Node node30 = node21.clonePropsFrom(node28);
        node16.addChildrenToBack(node21);
        boolean boolean32 = node16.isLocalResultCall();
        com.google.javascript.rhino.Node node33 = node11.copyInformationFromForTree(node16);
        node16.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node36 = node7.clonePropsFrom(node16);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean41 = node40.isLabelName();
        boolean boolean42 = node40.isTrue();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isContinue();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType53 = null;
        node51.setJSType(jSType53);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean59 = node58.isContinue();
        com.google.javascript.rhino.Node node60 = node51.clonePropsFrom(node58);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (byte) 0, node16, node40, node46, node60, 10, (int) (byte) -1);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) -1, node63);
        typePosition0.setItem(node63);
        com.google.javascript.rhino.Node node66 = typePosition0.getItem();
        com.google.javascript.rhino.Node node67 = typePosition0.getItem();
        boolean boolean68 = typePosition0.hasBrackets();
        int int69 = typePosition0.getEndLine();
        typePosition0.setPositionInformation(9, 63, 12, 30);
        com.google.javascript.rhino.Node node78 = com.google.javascript.rhino.Node.newString("(InputId: true)", 12, 38);
        boolean boolean79 = node78.isThrow();
        typePosition0.setItem(node78);
        // The following exception was thrown during execution in test generation
        try {
            typePosition0.setPositionInformation(52, 4, (-8), 31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Recorded bad position information?start-line: 52?end-line: -8");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test01589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01589");
        com.google.common.collect.ImmutableList<com.google.common.collect.ImmutableCollection.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>>> ternaryValueEnumBuilderList0 = com.google.common.collect.ImmutableList.of();
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilderList0);
    }

    @Test
    public void test01590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01590");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isQualifiedName();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isContinue();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType15 = null;
        node13.setJSType(jSType15);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean21 = node20.isContinue();
        com.google.javascript.rhino.Node node22 = node13.clonePropsFrom(node20);
        node8.addChildrenToBack(node13);
        boolean boolean24 = node8.isLocalResultCall();
        com.google.javascript.rhino.Node node25 = node3.copyInformationFromForTree(node8);
        boolean boolean26 = node3.isStringKey();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable27 = node3.children();
        node3.setVarArgs(true);
        com.google.javascript.rhino.Node node30 = node3.cloneTree();
        boolean boolean31 = node30.isRegExp();
        boolean boolean32 = node30.hasChildren();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(nodeIterable27);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test01591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01591");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isQualifiedName();
        boolean boolean5 = node3.isIn();
        boolean boolean6 = node3.hasOneChild();
        com.google.javascript.rhino.Node node7 = node3.getLastSibling();
        node7.setLineno(51);
        boolean boolean10 = node7.isNoSideEffectsCall();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test01592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01592");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isContinue();
        boolean boolean19 = node17.isString();
        com.google.javascript.rhino.Node node20 = node4.useSourceInfoFromForTree(node17);
        com.google.javascript.rhino.InputId inputId21 = null;
        node20.setInputId(inputId21);
        java.lang.Object obj24 = node20.getProp((int) (short) 10);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        node28.setJSType(jSType30);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isContinue();
        com.google.javascript.rhino.Node node37 = node28.clonePropsFrom(node35);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isContinue();
        boolean boolean43 = node41.isString();
        com.google.javascript.rhino.Node node44 = node28.useSourceInfoFromForTree(node41);
        com.google.javascript.rhino.InputId inputId45 = null;
        node44.setInputId(inputId45);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isQualifiedName();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean61 = node60.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType62 = null;
        node60.setJSType(jSType62);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean68 = node67.isContinue();
        com.google.javascript.rhino.Node node69 = node60.clonePropsFrom(node67);
        node55.addChildrenToBack(node60);
        boolean boolean71 = node55.isLocalResultCall();
        com.google.javascript.rhino.Node node72 = node50.copyInformationFromForTree(node55);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(0, node20, node44, node55, (int) (short) 10, 53);
        com.google.javascript.rhino.InputId inputId76 = node55.getInputId();
        boolean boolean77 = node55.isReturn();
        com.google.javascript.rhino.Node node78 = node55.getFirstChild();
        com.google.javascript.rhino.Node node79 = node55.cloneNode();
        boolean boolean80 = node55.isOptionalArg();
        boolean boolean81 = node55.isFromExterns();
        node55.putBooleanProp((int) (byte) 100, true);
        boolean boolean85 = node55.isVar();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(inputId76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test01593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01593");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isContinue();
        boolean boolean19 = node17.isString();
        com.google.javascript.rhino.Node node20 = node4.useSourceInfoFromForTree(node17);
        com.google.javascript.rhino.InputId inputId21 = null;
        node20.setInputId(inputId21);
        java.lang.Object obj24 = node20.getProp((int) (short) 10);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        node28.setJSType(jSType30);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isContinue();
        com.google.javascript.rhino.Node node37 = node28.clonePropsFrom(node35);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isContinue();
        boolean boolean43 = node41.isString();
        com.google.javascript.rhino.Node node44 = node28.useSourceInfoFromForTree(node41);
        com.google.javascript.rhino.InputId inputId45 = null;
        node44.setInputId(inputId45);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isQualifiedName();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean61 = node60.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType62 = null;
        node60.setJSType(jSType62);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean68 = node67.isContinue();
        com.google.javascript.rhino.Node node69 = node60.clonePropsFrom(node67);
        node55.addChildrenToBack(node60);
        boolean boolean71 = node55.isLocalResultCall();
        com.google.javascript.rhino.Node node72 = node50.copyInformationFromForTree(node55);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(0, node20, node44, node55, (int) (short) 10, 53);
        boolean boolean76 = node55.isOptionalArg();
        // The following exception was thrown during execution in test generation
        try {
            node55.setSideEffectFlags(43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test01594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01594");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getStartLine();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isQualifiedName();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isContinue();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean22 = node21.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType23 = null;
        node21.setJSType(jSType23);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isContinue();
        com.google.javascript.rhino.Node node30 = node21.clonePropsFrom(node28);
        node16.addChildrenToBack(node21);
        boolean boolean32 = node16.isLocalResultCall();
        com.google.javascript.rhino.Node node33 = node11.copyInformationFromForTree(node16);
        node16.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node36 = node7.clonePropsFrom(node16);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean41 = node40.isLabelName();
        boolean boolean42 = node40.isTrue();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isContinue();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType53 = null;
        node51.setJSType(jSType53);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean59 = node58.isContinue();
        com.google.javascript.rhino.Node node60 = node51.clonePropsFrom(node58);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (byte) 0, node16, node40, node46, node60, 10, (int) (byte) -1);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) -1, node63);
        typePosition0.setItem(node63);
        com.google.javascript.rhino.Node node66 = typePosition0.getItem();
        com.google.javascript.rhino.Node node67 = typePosition0.getItem();
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean72 = node71.isContinue();
        boolean boolean73 = node71.isString();
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean78 = node77.isLabelName();
        boolean boolean79 = node77.isDec();
        boolean boolean80 = node77.isAssign();
        boolean boolean81 = node71.isEquivalentTo(node77);
        int int82 = node67.getIndexOfChild(node71);
        int int83 = node71.getCharno();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str84 = node71.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
    }

    @Test
    public void test01595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01595");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isContinue();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType10 = null;
        node8.setJSType(jSType10);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean16 = node15.isContinue();
        com.google.javascript.rhino.Node node17 = node8.clonePropsFrom(node15);
        node3.addChildrenToBack(node8);
        com.google.javascript.rhino.InputId inputId19 = node3.getInputId();
        boolean boolean20 = node3.isAdd();
        boolean boolean21 = node3.isBlock();
        boolean boolean22 = node3.isCatch();
        boolean boolean23 = node3.isAssignAdd();
        boolean boolean24 = node3.isGetElem();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(inputId19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test01596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01596");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isContinue();
        boolean boolean18 = node16.isString();
        com.google.javascript.rhino.Node node19 = node3.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.InputId inputId20 = null;
        node19.setInputId(inputId20);
        java.lang.Object obj23 = node19.getProp((int) (short) 10);
        boolean boolean24 = node19.isVoid();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean34 = node33.isQualifiedName();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean39 = node38.isContinue();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean44 = node43.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType45 = null;
        node43.setJSType(jSType45);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isContinue();
        com.google.javascript.rhino.Node node52 = node43.clonePropsFrom(node50);
        node38.addChildrenToBack(node43);
        boolean boolean54 = node38.isLocalResultCall();
        com.google.javascript.rhino.Node node55 = node33.copyInformationFromForTree(node38);
        node38.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node58 = node29.clonePropsFrom(node38);
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean63 = node62.isLabelName();
        boolean boolean64 = node62.isTrue();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean69 = node68.isContinue();
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean74 = node73.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType75 = null;
        node73.setJSType(jSType75);
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean81 = node80.isContinue();
        com.google.javascript.rhino.Node node82 = node73.clonePropsFrom(node80);
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node((int) (byte) 0, node38, node62, node68, node82, 10, (int) (byte) -1);
        com.google.javascript.rhino.Node node86 = node19.srcrefTree(node38);
        boolean boolean87 = node19.isTypeOf();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test01597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01597");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getStartLine();
        int int2 = typePosition0.getPositionOnEndLine();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean8 = node7.isLabelName();
        boolean boolean9 = node7.isDec();
        boolean boolean10 = node7.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean15 = node14.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType16 = null;
        node14.setJSType(jSType16);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean22 = node21.isContinue();
        com.google.javascript.rhino.Node node23 = node14.clonePropsFrom(node21);
        boolean boolean24 = node23.isQuotedString();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        node28.setJSType(jSType30);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isContinue();
        com.google.javascript.rhino.Node node37 = node28.clonePropsFrom(node35);
        int int38 = node37.getLineno();
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean43 = node42.isLabelName();
        boolean boolean44 = node42.isDec();
        boolean boolean45 = node42.isAssign();
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean54 = node53.isQualifiedName();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean59 = node58.isContinue();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean64 = node63.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType65 = null;
        node63.setJSType(jSType65);
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean71 = node70.isContinue();
        com.google.javascript.rhino.Node node72 = node63.clonePropsFrom(node70);
        node58.addChildrenToBack(node63);
        boolean boolean74 = node58.isLocalResultCall();
        com.google.javascript.rhino.Node node75 = node53.copyInformationFromForTree(node58);
        node58.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node78 = node49.clonePropsFrom(node58);
        com.google.javascript.rhino.Node[] nodeArray79 = new com.google.javascript.rhino.Node[] { node7, node23, node37, node42, node49 };
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node(0, nodeArray79, (-1), 54);
        boolean boolean83 = node82.hasChildren();
        int int84 = node82.getSideEffectFlags();
        typePosition0.setItem(node82);
        // The following exception was thrown during execution in test generation
        try {
            typePosition0.setPositionInformation((int) (short) 10, 0, 1, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Recorded bad position information?start-line: 10?end-line: 1");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(nodeArray79);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
    }

    @Test
    public void test01598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01598");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isQualifiedName();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isContinue();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node18.setJSType(jSType20);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isContinue();
        com.google.javascript.rhino.Node node27 = node18.clonePropsFrom(node25);
        node13.addChildrenToBack(node18);
        boolean boolean29 = node13.isLocalResultCall();
        com.google.javascript.rhino.Node node30 = node8.copyInformationFromForTree(node13);
        node13.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node33 = node4.clonePropsFrom(node13);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean38 = node37.isLabelName();
        boolean boolean39 = node37.isTrue();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean44 = node43.isContinue();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean49 = node48.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        node48.setJSType(jSType50);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node57 = node48.clonePropsFrom(node55);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (byte) 0, node13, node37, node43, node57, 10, (int) (byte) -1);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean65 = node64.isContinue();
        boolean boolean66 = node64.isDo();
        boolean boolean67 = node57.isEquivalentTo(node64);
        boolean boolean68 = node64.isOptionalArg();
        boolean boolean69 = node64.isNE();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test01599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01599");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isQualifiedName();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isContinue();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node18.setJSType(jSType20);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isContinue();
        com.google.javascript.rhino.Node node27 = node18.clonePropsFrom(node25);
        node13.addChildrenToBack(node18);
        boolean boolean29 = node13.isLocalResultCall();
        com.google.javascript.rhino.Node node30 = node8.copyInformationFromForTree(node13);
        node13.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node33 = node4.clonePropsFrom(node13);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean38 = node37.isInstanceOf();
        boolean boolean39 = node37.isComma();
        boolean boolean40 = node4.isEquivalentTo(node37);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean45 = node44.isQualifiedName();
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean50 = node49.isContinue();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean55 = node54.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType56 = null;
        node54.setJSType(jSType56);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean62 = node61.isContinue();
        com.google.javascript.rhino.Node node63 = node54.clonePropsFrom(node61);
        node49.addChildrenToBack(node54);
        boolean boolean65 = node49.isLocalResultCall();
        com.google.javascript.rhino.Node node66 = node44.copyInformationFromForTree(node49);
        node49.setSourceEncodedPosition((int) (short) -1);
        boolean boolean69 = node49.isName();
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node(30, node4, node49, 51, 15);
        node49.setVarArgs(false);
        boolean boolean75 = node49.isNot();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test01600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01600");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet1 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean3 = booleanLiteralSet1.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet5 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean7 = booleanLiteralSet5.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet9 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet10 = booleanLiteralSet5.intersection(booleanLiteralSet9);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet11 = booleanLiteralSet1.intersection(booleanLiteralSet9);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet12 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet14 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean16 = booleanLiteralSet14.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet18 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet19 = booleanLiteralSet14.intersection(booleanLiteralSet18);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet21 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean23 = booleanLiteralSet21.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet25 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet26 = booleanLiteralSet21.intersection(booleanLiteralSet25);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet28 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean30 = booleanLiteralSet28.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet32 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean34 = booleanLiteralSet32.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet36 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet37 = booleanLiteralSet32.intersection(booleanLiteralSet36);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet38 = booleanLiteralSet28.intersection(booleanLiteralSet36);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet40 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet41 = booleanLiteralSet38.union(booleanLiteralSet40);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet43 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.BooleanLiteralSet> booleanLiteralSetList44 = com.google.common.collect.ImmutableList.of(booleanLiteralSet19, booleanLiteralSet26, booleanLiteralSet41, booleanLiteralSet43);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet45 = booleanLiteralSet12.union(booleanLiteralSet41);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet46 = booleanLiteralSet1.intersection(booleanLiteralSet41);
        boolean boolean48 = booleanLiteralSet46.contains(false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet1 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet1.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet5 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet5.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet9 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet9.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet10 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet10.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet11 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet11.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet12 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet12.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet14 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet14.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet18 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet18.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet19 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet19.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet21 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet21.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet25 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet25.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet26 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet26.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet28 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet28.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet32 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet32.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet36 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet36.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet37 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet37.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet38 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet38.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet40 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet40.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet41 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet41.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet43 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet43.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertNotNull(booleanLiteralSetList44);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet45 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet45.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet46 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet46.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test01601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01601");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        int int18 = serializableList17.size();
        java.io.Serializable[] serializableArray35 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList36 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray35);
        boolean boolean37 = serializableList36.isEmpty();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isQualifiedName();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isContinue();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType53 = null;
        node51.setJSType(jSType53);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean59 = node58.isContinue();
        com.google.javascript.rhino.Node node60 = node51.clonePropsFrom(node58);
        node46.addChildrenToBack(node51);
        boolean boolean62 = node46.isLocalResultCall();
        com.google.javascript.rhino.Node node63 = node41.copyInformationFromForTree(node46);
        boolean boolean64 = serializableList36.contains((java.lang.Object) node46);
        boolean boolean65 = serializableList17.containsAll((java.util.Collection<java.io.Serializable>) serializableList36);
        java.util.stream.Stream<java.io.Serializable> serializableStream66 = serializableList17.stream();
        java.lang.Object[] objArray67 = serializableList17.toArray();
        java.util.stream.Stream<java.io.Serializable> serializableStream68 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream69 = serializableList17.parallelStream();
        com.google.javascript.rhino.JSDocInfo jSDocInfo71 = new com.google.javascript.rhino.JSDocInfo();
        int int72 = jSDocInfo71.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility73 = null;
        jSDocInfo71.setVisibility(visibility73);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression75 = jSDocInfo71.getEnumParameterType();
        java.lang.String str76 = jSDocInfo71.getReturnDescription();
        boolean boolean77 = jSDocInfo71.isImplicitCast();
        boolean boolean78 = jSDocInfo71.isImplicitCast();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression79 = jSDocInfo71.getEnumParameterType();
        java.util.Collection<java.lang.String> strCollection80 = jSDocInfo71.getAuthors();
        java.lang.String str81 = jSDocInfo71.getDeprecationReason();
        // The following exception was thrown during execution in test generation
        try {
            serializableList17.add(0, (java.io.Serializable) jSDocInfo71);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 16 + "'", int18 == 16);
        org.junit.Assert.assertNotNull(serializableArray35);
        org.junit.Assert.assertNotNull(serializableList36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(serializableStream66);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertNotNull(serializableStream68);
        org.junit.Assert.assertNotNull(serializableStream69);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNull(jSTypeExpression75);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(jSTypeExpression79);
        org.junit.Assert.assertNull(strCollection80);
        org.junit.Assert.assertNull(str81);
    }

    @Test
    public void test01602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01602");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection2 = jSDocInfo0.getTypeNodes();
        java.lang.String str3 = jSDocInfo0.getDescription();
        boolean boolean4 = jSDocInfo0.hasModifies();
        boolean boolean5 = jSDocInfo0.shouldPreserveTry();
        com.google.common.collect.ImmutableList<java.lang.String> strList6 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean7 = jSDocInfo0.containsDeclaration();
        boolean boolean9 = jSDocInfo0.hasParameter("");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(nodeCollection2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test01603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01603");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getStartLine();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isQualifiedName();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isContinue();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean22 = node21.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType23 = null;
        node21.setJSType(jSType23);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isContinue();
        com.google.javascript.rhino.Node node30 = node21.clonePropsFrom(node28);
        node16.addChildrenToBack(node21);
        boolean boolean32 = node16.isLocalResultCall();
        com.google.javascript.rhino.Node node33 = node11.copyInformationFromForTree(node16);
        node16.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node36 = node7.clonePropsFrom(node16);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean41 = node40.isLabelName();
        boolean boolean42 = node40.isTrue();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isContinue();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType53 = null;
        node51.setJSType(jSType53);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean59 = node58.isContinue();
        com.google.javascript.rhino.Node node60 = node51.clonePropsFrom(node58);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (byte) 0, node16, node40, node46, node60, 10, (int) (byte) -1);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) -1, node63);
        typePosition0.setItem(node63);
        com.google.javascript.rhino.Node node66 = typePosition0.getItem();
        com.google.javascript.rhino.Node node67 = typePosition0.getItem();
        boolean boolean68 = typePosition0.hasBrackets();
        int int69 = typePosition0.getEndLine();
        com.google.javascript.rhino.Node node70 = typePosition0.getItem();
        boolean boolean71 = typePosition0.hasBrackets();
        com.google.javascript.rhino.Node node72 = typePosition0.getItem();
        boolean boolean73 = node72.isOr();
        boolean boolean74 = node72.isVoid();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test01604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01604");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        int int18 = serializableList17.size();
        java.io.Serializable[] serializableArray35 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList36 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray35);
        boolean boolean37 = serializableList36.isEmpty();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isQualifiedName();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isContinue();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType53 = null;
        node51.setJSType(jSType53);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean59 = node58.isContinue();
        com.google.javascript.rhino.Node node60 = node51.clonePropsFrom(node58);
        node46.addChildrenToBack(node51);
        boolean boolean62 = node46.isLocalResultCall();
        com.google.javascript.rhino.Node node63 = node41.copyInformationFromForTree(node46);
        boolean boolean64 = serializableList36.contains((java.lang.Object) node46);
        boolean boolean65 = serializableList17.containsAll((java.util.Collection<java.io.Serializable>) serializableList36);
        java.lang.Object[] objArray66 = serializableList36.toArray();
        com.google.common.collect.ImmutableList<java.util.Collection<java.io.Serializable>> serializableCollectionList67 = com.google.common.collect.ImmutableList.of();
        boolean boolean68 = serializableList36.equals((java.lang.Object) serializableCollectionList67);
        com.google.common.collect.UnmodifiableIterator<java.io.Serializable> serializableItor69 = serializableList36.iterator();
        // The following exception was thrown during execution in test generation
        try {
            serializableList36.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 16 + "'", int18 == 16);
        org.junit.Assert.assertNotNull(serializableArray35);
        org.junit.Assert.assertNotNull(serializableList36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertNotNull(serializableCollectionList67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(serializableItor69);
    }

    @Test
    public void test01605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01605");
        java.lang.String[] strArray3 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        java.lang.Object[] objArray6 = strSet4.toArray();
        java.io.Serializable[] serializableArray23 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList24 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray23);
        boolean boolean25 = serializableList24.isEmpty();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean30 = node29.isQualifiedName();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean35 = node34.isContinue();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType41 = null;
        node39.setJSType(jSType41);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isContinue();
        com.google.javascript.rhino.Node node48 = node39.clonePropsFrom(node46);
        node34.addChildrenToBack(node39);
        boolean boolean50 = node34.isLocalResultCall();
        com.google.javascript.rhino.Node node51 = node29.copyInformationFromForTree(node34);
        boolean boolean52 = serializableList24.contains((java.lang.Object) node34);
        java.util.Iterator<java.io.Serializable> serializableItor53 = serializableList24.iterator();
        boolean boolean54 = strSet4.containsAll((java.util.Collection<java.io.Serializable>) serializableList24);
        java.lang.Object[] objArray55 = serializableList24.toArray();
        boolean boolean56 = serializableList24.isEmpty();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList57 = serializableList24.asList();
        java.util.LinkedHashSet[] linkedHashSetArray59 = new java.util.LinkedHashSet[0];
        @SuppressWarnings("unchecked")
        java.util.LinkedHashSet<java.lang.String>[] strSetArray60 = (java.util.LinkedHashSet<java.lang.String>[]) linkedHashSetArray59;
        com.google.common.collect.ImmutableList<java.util.LinkedHashSet<java.lang.String>> strSetList61 = com.google.common.collect.ImmutableList.copyOf(strSetArray60);
        boolean boolean62 = serializableList24.contains((java.lang.Object) strSetList61);
        com.google.javascript.rhino.JSDocInfo jSDocInfo63 = new com.google.javascript.rhino.JSDocInfo();
        int int64 = jSDocInfo63.getImplementedInterfaceCount();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection65 = jSDocInfo63.getTypeNodes();
        java.lang.String str66 = jSDocInfo63.getDescription();
        boolean boolean67 = jSDocInfo63.hasModifies();
        boolean boolean68 = jSDocInfo63.shouldPreserveTry();
        com.google.common.collect.ImmutableList<java.lang.String> strList69 = jSDocInfo63.getTemplateTypeNames();
        boolean boolean70 = jSDocInfo63.containsDeclaration();
        com.google.javascript.rhino.JSDocInfo jSDocInfo71 = new com.google.javascript.rhino.JSDocInfo();
        int int72 = jSDocInfo71.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility73 = null;
        jSDocInfo71.setVisibility(visibility73);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression75 = jSDocInfo71.getEnumParameterType();
        java.lang.String str76 = jSDocInfo71.getReturnDescription();
        boolean boolean77 = jSDocInfo71.isImplicitCast();
        com.google.common.collect.ImmutableList<java.lang.String> strList78 = jSDocInfo71.getTemplateTypeNames();
        java.lang.String str79 = jSDocInfo71.getMeaning();
        java.lang.String str81 = jSDocInfo71.getDescriptionForParameter("");
        jSDocInfo71.addSuppression("InputId: true");
        com.google.javascript.rhino.JSDocInfo jSDocInfo84 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean85 = jSDocInfo84.isNoAlias();
        java.util.Set<java.lang.String> strSet86 = jSDocInfo84.getModifies();
        boolean boolean87 = jSDocInfo84.hasTypedefType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo88 = new com.google.javascript.rhino.JSDocInfo();
        int int89 = jSDocInfo88.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility90 = null;
        jSDocInfo88.setVisibility(visibility90);
        java.lang.String str92 = jSDocInfo88.getMeaning();
        java.lang.String str93 = jSDocInfo88.getLicense();
        boolean boolean94 = jSDocInfo88.hasType();
        boolean boolean95 = jSDocInfo88.isConstructor();
        int int96 = jSDocInfo88.getExtendedInterfacesCount();
        boolean boolean97 = jSDocInfo88.shouldPreserveTry();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo> jSDocInfoList98 = com.google.common.collect.ImmutableList.of(jSDocInfo63, jSDocInfo71, jSDocInfo84, jSDocInfo88);
        boolean boolean99 = serializableList24.contains((java.lang.Object) jSDocInfo63);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(serializableArray23);
        org.junit.Assert.assertNotNull(serializableList24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(serializableItor53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(serializableList57);
        org.junit.Assert.assertNotNull(linkedHashSetArray59);
        org.junit.Assert.assertNotNull(strSetArray60);
        org.junit.Assert.assertNotNull(strSetList61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(nodeCollection65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(strList69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNull(jSTypeExpression75);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(strList78);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(strSet86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNull(str92);
        org.junit.Assert.assertNull(str93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 0 + "'", int96 == 0);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(jSDocInfoList98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test01606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01606");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        boolean boolean14 = node13.isQuotedString();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        boolean boolean20 = node18.isDec();
        boolean boolean21 = node18.isScript();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(0, node13, node18, node25, 0, (int) (short) 0);
        boolean boolean29 = node18.isDec();
        com.google.javascript.rhino.Node node30 = node18.getParent();
        node30.addSuppression("STRING Unknown class name 40\n");
        com.google.javascript.rhino.Node node33 = null;
        // The following exception was thrown during execution in test generation
        try {
            node30.addChildToFront(node33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
    }

    @Test
    public void test01607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01607");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream21 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream22 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream23 = serializableList17.parallelStream();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = new com.google.javascript.rhino.JSDocInfo();
        int int25 = jSDocInfo24.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet26 = jSDocInfo24.getParameterNames();
        boolean boolean27 = serializableList17.contains((java.lang.Object) strSet26);
        java.util.Spliterator<java.io.Serializable> serializableSpliterator28 = serializableList17.spliterator();
        java.io.Serializable[] serializableArray45 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList46 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray45);
        boolean boolean47 = serializableList46.isEmpty();
        boolean boolean49 = serializableList46.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream50 = serializableList46.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream51 = serializableList46.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream52 = serializableList46.parallelStream();
        com.google.javascript.rhino.JSDocInfo jSDocInfo53 = new com.google.javascript.rhino.JSDocInfo();
        int int54 = jSDocInfo53.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet55 = jSDocInfo53.getParameterNames();
        boolean boolean56 = serializableList46.contains((java.lang.Object) strSet55);
        java.util.Spliterator<java.io.Serializable> serializableSpliterator57 = serializableList46.spliterator();
        java.util.Iterator<java.io.Serializable> serializableItor58 = serializableList46.iterator();
        boolean boolean59 = serializableList17.containsAll((java.util.Collection<java.io.Serializable>) serializableList46);
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList60 = serializableList17.asList();
        boolean boolean61 = serializableList60.isEmpty();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableStream21);
        org.junit.Assert.assertNotNull(serializableStream22);
        org.junit.Assert.assertNotNull(serializableStream23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(serializableSpliterator28);
        org.junit.Assert.assertNotNull(serializableArray45);
        org.junit.Assert.assertNotNull(serializableList46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(serializableStream50);
        org.junit.Assert.assertNotNull(serializableStream51);
        org.junit.Assert.assertNotNull(serializableStream52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(serializableSpliterator57);
        org.junit.Assert.assertNotNull(serializableItor58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(serializableList60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test01608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01608");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasEnumParameterType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getBaseType();
        boolean boolean3 = jSDocInfo0.isExport();
        boolean boolean4 = jSDocInfo0.isNoAlias();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test01609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01609");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isContinue();
        boolean boolean18 = node16.isString();
        boolean boolean19 = node16.isStringKey();
        com.google.javascript.rhino.Node node20 = node3.copyInformationFrom(node16);
        boolean boolean21 = node16.hasOneChild();
        com.google.javascript.rhino.Node node22 = node16.removeFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            int int23 = node22.getSideEffectFlags();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(node22);
    }

    @Test
    public void test01610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01610");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream21 = serializableList17.stream();
        java.io.Serializable[] serializableArray38 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList39 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray38);
        boolean boolean40 = serializableList39.isEmpty();
        boolean boolean42 = serializableList39.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream43 = serializableList39.stream();
        boolean boolean44 = serializableList17.containsAll((java.util.Collection<java.io.Serializable>) serializableList39);
        java.util.Iterator<java.io.Serializable> serializableItor45 = serializableList39.iterator();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList46 = serializableList39.asList();
        java.lang.Object[] objArray47 = serializableList46.toArray();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableStream21);
        org.junit.Assert.assertNotNull(serializableArray38);
        org.junit.Assert.assertNotNull(serializableList39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(serializableStream43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(serializableItor45);
        org.junit.Assert.assertNotNull(serializableList46);
        org.junit.Assert.assertNotNull(objArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray47), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray47), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
    }

    @Test
    public void test01611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01611");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isContinue();
        boolean boolean19 = node17.isString();
        com.google.javascript.rhino.Node node20 = node4.useSourceInfoFromForTree(node17);
        com.google.javascript.rhino.InputId inputId21 = null;
        node20.setInputId(inputId21);
        java.lang.Object obj24 = node20.getProp((int) (short) 10);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        node28.setJSType(jSType30);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isContinue();
        com.google.javascript.rhino.Node node37 = node28.clonePropsFrom(node35);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isContinue();
        boolean boolean43 = node41.isString();
        com.google.javascript.rhino.Node node44 = node28.useSourceInfoFromForTree(node41);
        com.google.javascript.rhino.InputId inputId45 = null;
        node44.setInputId(inputId45);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isQualifiedName();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean61 = node60.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType62 = null;
        node60.setJSType(jSType62);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean68 = node67.isContinue();
        com.google.javascript.rhino.Node node69 = node60.clonePropsFrom(node67);
        node55.addChildrenToBack(node60);
        boolean boolean71 = node55.isLocalResultCall();
        com.google.javascript.rhino.Node node72 = node50.copyInformationFromForTree(node55);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(0, node20, node44, node55, (int) (short) 10, 53);
        boolean boolean76 = node44.isCatch();
        com.google.javascript.rhino.JSDocInfo jSDocInfo77 = node44.getJSDocInfo();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(jSDocInfo77);
    }

    @Test
    public void test01612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01612");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isInstanceOf();
        boolean boolean5 = node3.isComma();
        boolean boolean6 = node3.isOnlyModifiesThisCall();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node3.getStaticSourceFile();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
    }

    @Test
    public void test01613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01613");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection2 = jSDocInfo0.getTypeNodes();
        com.google.common.collect.ImmutableList<java.lang.String> strList3 = jSDocInfo0.getTemplateTypeNames();
        java.lang.String str4 = jSDocInfo0.toString();
        java.lang.String str5 = jSDocInfo0.getReturnDescription();
        boolean boolean6 = jSDocInfo0.isInterface();
        boolean boolean8 = jSDocInfo0.hasParameterType("JSDocInfo");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(nodeCollection2);
        org.junit.Assert.assertNotNull(strList3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JSDocInfo" + "'", str4, "JSDocInfo");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test01614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01614");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isQualifiedName();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isContinue();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        node32.setJSType(jSType34);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isContinue();
        com.google.javascript.rhino.Node node41 = node32.clonePropsFrom(node39);
        node27.addChildrenToBack(node32);
        boolean boolean43 = node27.isLocalResultCall();
        com.google.javascript.rhino.Node node44 = node22.copyInformationFromForTree(node27);
        boolean boolean45 = serializableList17.contains((java.lang.Object) node27);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean50 = node49.isQualifiedName();
        int int51 = serializableList17.indexOf((java.lang.Object) node49);
        java.io.Serializable[] serializableArray68 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList69 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray68);
        boolean boolean70 = serializableList69.isEmpty();
        boolean boolean72 = serializableList69.contains((java.lang.Object) 52);
        int int74 = serializableList69.indexOf((java.lang.Object) (-1L));
        java.util.stream.Stream<java.io.Serializable> serializableStream75 = serializableList69.parallelStream();
        com.google.common.collect.UnmodifiableListIterator<java.io.Serializable> serializableItor76 = serializableList69.listIterator();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean77 = serializableList17.retainAll((java.util.Collection<java.io.Serializable>) serializableList69);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(serializableArray68);
        org.junit.Assert.assertNotNull(serializableList69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(serializableStream75);
        org.junit.Assert.assertNotNull(serializableItor76);
    }

    @Test
    public void test01615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01615");
        java.lang.String[] strArray3 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        java.lang.Object[] objArray6 = strSet4.toArray();
        boolean boolean8 = strSet4.equals((java.lang.Object) 12);
        java.util.Iterator<java.lang.String> strItor9 = strSet4.iterator();
        boolean boolean11 = strSet4.add("Not declared as a constructor");
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test01616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01616");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isQualifiedName();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isContinue();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        node32.setJSType(jSType34);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isContinue();
        com.google.javascript.rhino.Node node41 = node32.clonePropsFrom(node39);
        node27.addChildrenToBack(node32);
        boolean boolean43 = node27.isLocalResultCall();
        com.google.javascript.rhino.Node node44 = node22.copyInformationFromForTree(node27);
        boolean boolean45 = serializableList17.contains((java.lang.Object) node27);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean50 = node49.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType51 = null;
        node49.setJSType(jSType51);
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean57 = node56.isContinue();
        com.google.javascript.rhino.Node node58 = node49.clonePropsFrom(node56);
        node58.setSourceFileForTesting("hi!");
        boolean boolean61 = node58.isIf();
        boolean boolean62 = node27.isEquivalentToTyped(node58);
        boolean boolean63 = node27.isThrow();
        boolean boolean64 = node27.isVarArgs();
        com.google.javascript.rhino.Node node65 = null;
        // The following exception was thrown during execution in test generation
        try {
            node27.addChildToBack(node65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test01617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01617");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(32, (int) (byte) 10, (int) '#');
        com.google.javascript.rhino.JSDocInfo jSDocInfo4 = null;
        node3.setJSDocInfo(jSDocInfo4);
        boolean boolean6 = node3.isString();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags8 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        sideEffectFlags8.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags11 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        boolean boolean12 = sideEffectFlags11.areAllFlagsSet();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags14 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        boolean boolean15 = sideEffectFlags14.areAllFlagsSet();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags17 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        sideEffectFlags17.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags20 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags22 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        sideEffectFlags22.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags25 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node.SideEffectFlags> sideEffectFlagsList26 = com.google.common.collect.ImmutableList.of(sideEffectFlags8, sideEffectFlags11, sideEffectFlags14, sideEffectFlags17, sideEffectFlags20, sideEffectFlags22, sideEffectFlags25);
        boolean boolean27 = sideEffectFlags17.areAllFlagsSet();
        sideEffectFlags17.setThrows();
        sideEffectFlags17.setMutatesThis();
        sideEffectFlags17.setReturnsTainted();
        // The following exception was thrown during execution in test generation
        try {
            node3.setSideEffectFlags(sideEffectFlags17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: setIsNoSideEffectsCall only supports CALL and NEW nodes, got TYPEOF");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(sideEffectFlagsList26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test01618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01618");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        java.lang.String str4 = jSDocInfo0.getMeaning();
        java.lang.String str5 = jSDocInfo0.getLicense();
        boolean boolean6 = jSDocInfo0.isConstructor();
        java.lang.String str7 = jSDocInfo0.getBlockDescription();
        boolean boolean8 = jSDocInfo0.hasFileOverview();
        jSDocInfo0.setLicense("JSDocInfo");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test01619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01619");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        boolean boolean22 = serializableList17.contains((java.lang.Object) (byte) 0);
        boolean boolean23 = serializableList17.isEmpty();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList24 = serializableList17.reverse();
        java.util.Spliterator[] spliteratorArray26 = new java.util.Spliterator[0];
        @SuppressWarnings("unchecked")
        java.util.Spliterator<com.google.javascript.rhino.Node>[] nodeSpliteratorArray27 = (java.util.Spliterator<com.google.javascript.rhino.Node>[]) spliteratorArray26;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Spliterator<com.google.javascript.rhino.Node>[] nodeSpliteratorArray28 = serializableList24.toArray((java.util.Spliterator<com.google.javascript.rhino.Node>[]) spliteratorArray26);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: java.lang.Integer");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(serializableList24);
        org.junit.Assert.assertNotNull(spliteratorArray26);
        org.junit.Assert.assertNotNull(nodeSpliteratorArray27);
    }

    @Test
    public void test01620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01620");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean8 = node7.isQualifiedName();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isContinue();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType19 = null;
        node17.setJSType(jSType19);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean25 = node24.isContinue();
        com.google.javascript.rhino.Node node26 = node17.clonePropsFrom(node24);
        node12.addChildrenToBack(node17);
        boolean boolean28 = node12.isLocalResultCall();
        com.google.javascript.rhino.Node node29 = node7.copyInformationFromForTree(node12);
        node12.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node32 = node3.clonePropsFrom(node12);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean37 = node36.isInstanceOf();
        boolean boolean38 = node36.isComma();
        boolean boolean39 = node3.isEquivalentTo(node36);
        boolean boolean40 = node36.isComma();
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean45 = node44.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType46 = null;
        node44.setJSType(jSType46);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isContinue();
        com.google.javascript.rhino.Node node53 = node44.clonePropsFrom(node51);
        boolean boolean54 = node53.isQuotedString();
        int int55 = node53.getCharno();
        boolean boolean56 = node53.isDec();
        com.google.javascript.rhino.Node node57 = node36.useSourceInfoFrom(node53);
        boolean boolean58 = node36.isFor();
        boolean boolean59 = node36.isReturn();
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test01621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01621");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isInstanceOf();
        boolean boolean5 = node3.isComma();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile6 = null;
        node3.setStaticSourceFile(staticSourceFile6);
        node3.setOptionalArg(false);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = node3.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test01622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01622");
        java.lang.String[] strArray3 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        java.lang.Object[] objArray6 = strSet4.toArray();
        boolean boolean8 = strSet4.equals((java.lang.Object) 12);
        java.util.Iterator<java.lang.String> strItor9 = strSet4.iterator();
        java.io.Serializable[] serializableArray26 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList27 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray26);
        boolean boolean28 = serializableList27.isEmpty();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isQualifiedName();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean38 = node37.isContinue();
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean43 = node42.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType44 = null;
        node42.setJSType(jSType44);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean50 = node49.isContinue();
        com.google.javascript.rhino.Node node51 = node42.clonePropsFrom(node49);
        node37.addChildrenToBack(node42);
        boolean boolean53 = node37.isLocalResultCall();
        com.google.javascript.rhino.Node node54 = node32.copyInformationFromForTree(node37);
        boolean boolean55 = serializableList27.contains((java.lang.Object) node37);
        com.google.common.collect.UnmodifiableIterator<java.io.Serializable> serializableItor56 = serializableList27.iterator();
        boolean boolean57 = strSet4.retainAll((java.util.Collection<java.io.Serializable>) serializableList27);
        com.google.common.collect.UnmodifiableListIterator<java.io.Serializable> serializableItor58 = serializableList27.listIterator();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue60 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        // The following exception was thrown during execution in test generation
        try {
            serializableList27.add((int) (byte) 10, (java.io.Serializable) ternaryValue60);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(serializableArray26);
        org.junit.Assert.assertNotNull(serializableList27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(serializableItor56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(serializableItor58);
        org.junit.Assert.assertNotNull(ternaryValue60);
    }

    @Test
    public void test01623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01623");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream21 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream22 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream23 = serializableList17.parallelStream();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = new com.google.javascript.rhino.JSDocInfo();
        int int25 = jSDocInfo24.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet26 = jSDocInfo24.getParameterNames();
        boolean boolean27 = serializableList17.contains((java.lang.Object) strSet26);
        java.util.Spliterator<java.io.Serializable> serializableSpliterator28 = serializableList17.spliterator();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList29 = serializableList17.asList();
        java.lang.Object[] objArray30 = serializableList17.toArray();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableStream21);
        org.junit.Assert.assertNotNull(serializableStream22);
        org.junit.Assert.assertNotNull(serializableStream23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(serializableSpliterator28);
        org.junit.Assert.assertNotNull(serializableList29);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
    }

    @Test
    public void test01624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01624");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue0 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        boolean boolean2 = ternaryValue0.toBoolean(true);
        java.lang.String str3 = ternaryValue0.toString();
        org.junit.Assert.assertNotNull(ternaryValue0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "unknown" + "'", str3, "unknown");
    }

    @Test
    public void test01625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01625");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        boolean boolean5 = node3.isQuotedString();
        int int6 = node3.getType();
        boolean boolean7 = node3.isSetterDef();
        boolean boolean8 = node3.isDebugger();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType14 = null;
        node12.setJSType(jSType14);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean20 = node19.isContinue();
        com.google.javascript.rhino.Node node21 = node12.clonePropsFrom(node19);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isContinue();
        boolean boolean27 = node25.isString();
        com.google.javascript.rhino.Node node28 = node12.useSourceInfoFromForTree(node25);
        com.google.javascript.rhino.InputId inputId29 = null;
        node28.setInputId(inputId29);
        java.lang.Object obj32 = node28.getProp((int) (short) 10);
        com.google.javascript.rhino.JSDocInfo jSDocInfo33 = node28.getJSDocInfo();
        java.io.Serializable[] serializableArray50 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList51 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray50);
        boolean boolean52 = serializableList51.isEmpty();
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean57 = node56.isQualifiedName();
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean62 = node61.isContinue();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean67 = node66.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType68 = null;
        node66.setJSType(jSType68);
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean74 = node73.isContinue();
        com.google.javascript.rhino.Node node75 = node66.clonePropsFrom(node73);
        node61.addChildrenToBack(node66);
        boolean boolean77 = node61.isLocalResultCall();
        com.google.javascript.rhino.Node node78 = node56.copyInformationFromForTree(node61);
        boolean boolean79 = serializableList51.contains((java.lang.Object) node61);
        int int80 = node61.getSourcePosition();
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean85 = node84.isLabelName();
        boolean boolean86 = node84.isDec();
        boolean boolean87 = node84.isNoSideEffectsCall();
        node61.addChildToBack(node84);
        boolean boolean89 = node84.isVoid();
        boolean boolean90 = node84.isEmpty();
        com.google.javascript.rhino.Node node91 = node84.cloneNode();
        boolean boolean92 = node28.hasChild(node84);
        node28.setCharno(49);
        com.google.javascript.rhino.Node node95 = node3.srcrefTree(node28);
        boolean boolean96 = node28.isCase();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNull(jSDocInfo33);
        org.junit.Assert.assertNotNull(serializableArray50);
        org.junit.Assert.assertNotNull(serializableList51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(node95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test01626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01626");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("Unknown class name");
        com.google.javascript.rhino.Node node2 = node1.getLastSibling();
        int int3 = node1.getSourcePosition();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder4 = node1.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isContinue();
        boolean boolean10 = node8.isDo();
        node8.setSourceEncodedPosition(2);
        int int13 = node8.getSideEffectFlags();
        node1.addChildToFront(node8);
        java.lang.String str15 = node1.toString();
        java.lang.String str16 = node1.toString();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isQualifiedName();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean31 = node30.isContinue();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType37 = null;
        node35.setJSType(jSType37);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean43 = node42.isContinue();
        com.google.javascript.rhino.Node node44 = node35.clonePropsFrom(node42);
        node30.addChildrenToBack(node35);
        boolean boolean46 = node30.isLocalResultCall();
        com.google.javascript.rhino.Node node47 = node25.copyInformationFromForTree(node30);
        node30.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node50 = node21.clonePropsFrom(node30);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean55 = node54.isLabelName();
        boolean boolean56 = node54.isTrue();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean61 = node60.isContinue();
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean66 = node65.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType67 = null;
        node65.setJSType(jSType67);
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean73 = node72.isContinue();
        com.google.javascript.rhino.Node node74 = node65.clonePropsFrom(node72);
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node((int) (byte) 0, node30, node54, node60, node74, 10, (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            node1.removeChild(node54);
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: node is not a child");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder4);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "STRING Unknown class name" + "'", str15, "STRING Unknown class name");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "STRING Unknown class name" + "'", str16, "STRING Unknown class name");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node74);
    }

    @Test
    public void test01627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01627");
        java.io.IOException iOException0 = new java.io.IOException();
        java.io.IOException iOException1 = new java.io.IOException((java.lang.Throwable) iOException0);
        java.io.IOException iOException2 = new java.io.IOException();
        java.io.IOException iOException3 = new java.io.IOException((java.lang.Throwable) iOException2);
        iOException0.addSuppressed((java.lang.Throwable) iOException2);
        java.lang.String str5 = iOException0.toString();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "java.io.IOException" + "'", str5, "java.io.IOException");
    }

    @Test
    public void test01628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01628");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        boolean boolean22 = serializableList17.contains((java.lang.Object) (byte) 0);
        java.lang.Object[] objArray23 = serializableList17.toArray();
        java.util.Iterator<java.io.Serializable> serializableItor24 = serializableList17.iterator();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList25 = serializableList17.asList();
        java.io.Serializable[] serializableArray42 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList43 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray42);
        boolean boolean44 = serializableList43.isEmpty();
        boolean boolean46 = serializableList43.contains((java.lang.Object) 52);
        boolean boolean48 = serializableList43.contains((java.lang.Object) (byte) 0);
        boolean boolean49 = serializableList43.isEmpty();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList50 = serializableList43.reverse();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean51 = serializableList25.removeAll((java.util.Collection<java.io.Serializable>) serializableList43);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertNotNull(serializableItor24);
        org.junit.Assert.assertNotNull(serializableList25);
        org.junit.Assert.assertNotNull(serializableArray42);
        org.junit.Assert.assertNotNull(serializableList43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(serializableList50);
    }

    @Test
    public void test01629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01629");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isContinue();
        boolean boolean19 = node17.isString();
        com.google.javascript.rhino.Node node20 = node4.useSourceInfoFromForTree(node17);
        com.google.javascript.rhino.InputId inputId21 = null;
        node20.setInputId(inputId21);
        java.lang.Object obj24 = node20.getProp((int) (short) 10);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        node28.setJSType(jSType30);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isContinue();
        com.google.javascript.rhino.Node node37 = node28.clonePropsFrom(node35);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isContinue();
        boolean boolean43 = node41.isString();
        com.google.javascript.rhino.Node node44 = node28.useSourceInfoFromForTree(node41);
        com.google.javascript.rhino.InputId inputId45 = null;
        node44.setInputId(inputId45);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isQualifiedName();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean61 = node60.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType62 = null;
        node60.setJSType(jSType62);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean68 = node67.isContinue();
        com.google.javascript.rhino.Node node69 = node60.clonePropsFrom(node67);
        node55.addChildrenToBack(node60);
        boolean boolean71 = node55.isLocalResultCall();
        com.google.javascript.rhino.Node node72 = node50.copyInformationFromForTree(node55);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(0, node20, node44, node55, (int) (short) 10, 53);
        boolean boolean76 = node44.isCatch();
        boolean boolean77 = node44.isNot();
        boolean boolean78 = node44.isName();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test01630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01630");
        java.lang.String[] strArray3 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        java.lang.Object[] objArray6 = strSet4.toArray();
        java.lang.String[] strArray10 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        java.lang.Object[] objArray13 = strSet11.toArray();
        java.lang.String[] strArray17 = new java.lang.String[] { "", "", "hi!" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        java.lang.String[] strArray23 = new java.lang.String[] { "Unknown class name", "", "true" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        java.lang.String[] strArray29 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        java.lang.Object[] objArray32 = strSet30.toArray();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "Unknown class name", "true" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        java.lang.String[] strArray40 = new java.lang.String[] { "true" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        java.lang.String[] strArray46 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet47 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet47, strArray46);
        java.lang.Object[] objArray49 = strSet47.toArray();
        java.lang.String[] strArray53 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet54 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet54, strArray53);
        java.lang.Object[] objArray56 = strSet54.toArray();
        java.lang.String[] strArray60 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet61 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet61, strArray60);
        java.lang.Object[] objArray63 = strSet61.toArray();
        java.lang.String[] strArray68 = new java.lang.String[] { "hi!", "true", "Unknown class name", "Unknown class name" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        java.lang.String[] strArray73 = new java.lang.String[] { "Unknown class name", "true" };
        java.util.ArrayList<java.lang.String> strList74 = new java.util.ArrayList<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList74, strArray73);
        java.util.AbstractCollection[] abstractCollectionArray77 = new java.util.AbstractCollection[0];
        @SuppressWarnings("unchecked")
        java.util.AbstractCollection<java.lang.String>[] strCollectionArray78 = (java.util.AbstractCollection<java.lang.String>[]) abstractCollectionArray77;
        com.google.common.collect.ImmutableList<java.util.AbstractCollection<java.lang.String>> strCollectionList79 = com.google.common.collect.ImmutableList.of((java.util.AbstractCollection<java.lang.String>) strSet4, (java.util.AbstractCollection<java.lang.String>) strSet11, (java.util.AbstractCollection<java.lang.String>) strList18, (java.util.AbstractCollection<java.lang.String>) strList24, (java.util.AbstractCollection<java.lang.String>) strSet30, (java.util.AbstractCollection<java.lang.String>) strList37, (java.util.AbstractCollection<java.lang.String>) strList41, (java.util.AbstractCollection<java.lang.String>) strSet47, (java.util.AbstractCollection<java.lang.String>) strSet54, (java.util.AbstractCollection<java.lang.String>) strSet61, (java.util.AbstractCollection<java.lang.String>) strList69, (java.util.AbstractCollection<java.lang.String>) strList74, (java.util.AbstractCollection<java.lang.String>[]) abstractCollectionArray77);
        boolean boolean81 = strSet11.add("Not declared as a constructor");
        strSet11.clear();
        strSet11.clear();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(abstractCollectionArray77);
        org.junit.Assert.assertNotNull(strCollectionArray78);
        org.junit.Assert.assertNotNull(strCollectionList79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test01631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01631");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isQualifiedName();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isContinue();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        node32.setJSType(jSType34);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isContinue();
        com.google.javascript.rhino.Node node41 = node32.clonePropsFrom(node39);
        node27.addChildrenToBack(node32);
        boolean boolean43 = node27.isLocalResultCall();
        com.google.javascript.rhino.Node node44 = node22.copyInformationFromForTree(node27);
        boolean boolean45 = serializableList17.contains((java.lang.Object) node27);
        java.io.Serializable[] serializableArray62 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList63 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray62);
        boolean boolean64 = serializableList17.containsAll((java.util.Collection<java.io.Serializable>) serializableList63);
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList65 = serializableList63.reverse();
        boolean boolean66 = serializableList65.isEmpty();
        com.google.common.collect.UnmodifiableListIterator<java.io.Serializable> serializableItor68 = serializableList65.listIterator(12);
        boolean boolean69 = serializableList65.isEmpty();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(serializableArray62);
        org.junit.Assert.assertNotNull(serializableList63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(serializableList65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(serializableItor68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test01632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01632");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        java.lang.String str4 = jSDocInfo0.getMeaning();
        boolean boolean6 = jSDocInfo0.hasParameter("Unknown class name");
        boolean boolean7 = jSDocInfo0.hasEnumParameterType();
        boolean boolean8 = jSDocInfo0.isExterns();
        boolean boolean10 = jSDocInfo0.hasDescriptionForParameter("Named type with empty name component");
        boolean boolean11 = jSDocInfo0.isNoAlias();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test01633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01633");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isContinue();
        boolean boolean5 = node3.isDo();
        node3.setSourceEncodedPosition(2);
        int int8 = node3.getType();
        boolean boolean9 = node3.isTry();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType15 = null;
        node13.setJSType(jSType15);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean21 = node20.isContinue();
        com.google.javascript.rhino.Node node22 = node13.clonePropsFrom(node20);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean27 = node26.isContinue();
        boolean boolean28 = node26.isString();
        boolean boolean29 = node26.isStringKey();
        com.google.javascript.rhino.Node node30 = node13.copyInformationFrom(node26);
        boolean boolean31 = node13.isIn();
        node13.setType(42);
        node13.setLength((int) (byte) 0);
        boolean boolean36 = node13.isEmpty();
        node3.addChildToFront(node13);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test01634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01634");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isQualifiedName();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(32, (int) (byte) 10, (int) '#');
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isQualifiedName();
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean24 = node23.isContinue();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        node28.setJSType(jSType30);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isContinue();
        com.google.javascript.rhino.Node node37 = node28.clonePropsFrom(node35);
        node23.addChildrenToBack(node28);
        boolean boolean39 = node23.isLocalResultCall();
        com.google.javascript.rhino.Node node40 = node18.copyInformationFromForTree(node23);
        node23.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node43 = node14.clonePropsFrom(node23);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean48 = node47.isInstanceOf();
        boolean boolean49 = node47.isComma();
        boolean boolean50 = node14.isEquivalentTo(node47);
        boolean boolean51 = node47.isComma();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) '#', node10, node47, 42, (int) ' ');
        boolean boolean55 = node54.isComma();
        com.google.javascript.rhino.Node node56 = node54.cloneTree();
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node(16, node4, node54);
        boolean boolean58 = node57.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node59 = node57.getLastSibling();
        // The following exception was thrown during execution in test generation
        try {
            node57.setDouble((double) 29);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: GT is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
    }

    @Test
    public void test01635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01635");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(51, nodeArray4, 48, 32);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray4);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node(45, nodeArray4);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(40, nodeArray4, 40, (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            node12.setDouble((double) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: STRING is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray4);
    }

    @Test
    public void test01636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01636");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isQualifiedName();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isContinue();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node18.setJSType(jSType20);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isContinue();
        com.google.javascript.rhino.Node node27 = node18.clonePropsFrom(node25);
        node13.addChildrenToBack(node18);
        boolean boolean29 = node13.isLocalResultCall();
        com.google.javascript.rhino.Node node30 = node8.copyInformationFromForTree(node13);
        node13.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node33 = node4.clonePropsFrom(node13);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean38 = node37.isLabelName();
        boolean boolean39 = node37.isTrue();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean44 = node43.isContinue();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean49 = node48.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        node48.setJSType(jSType50);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node57 = node48.clonePropsFrom(node55);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (byte) 0, node13, node37, node43, node57, 10, (int) (byte) -1);
        boolean boolean61 = node13.isIf();
        int int62 = node13.getType();
        boolean boolean63 = node13.isAnd();
        int int64 = node13.getCharno();
        java.lang.String str65 = node13.getSourceFileName();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable66 = node13.children();
        com.google.javascript.rhino.JSDocInfo jSDocInfo68 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean69 = jSDocInfo68.isNoAlias();
        java.util.Set<java.lang.String> strSet70 = jSDocInfo68.getModifies();
        com.google.javascript.rhino.Node node71 = jSDocInfo68.getAssociatedNode();
        node13.putProp((int) '#', (java.lang.Object) node71);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertNotNull(nodeIterable66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertNull(node71);
    }

    @Test
    public void test01637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01637");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream21 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream22 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream23 = serializableList17.parallelStream();
        java.util.Spliterator<java.io.Serializable> serializableSpliterator24 = serializableList17.spliterator();
        java.lang.Object[] objArray25 = serializableList17.toArray();
        java.util.Spliterator<java.io.Serializable> serializableSpliterator26 = serializableList17.spliterator();
        boolean boolean27 = serializableList17.isEmpty();
        java.io.Serializable[] serializableArray44 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList45 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray44);
        boolean boolean46 = serializableList45.isEmpty();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isQualifiedName();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean61 = node60.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType62 = null;
        node60.setJSType(jSType62);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean68 = node67.isContinue();
        com.google.javascript.rhino.Node node69 = node60.clonePropsFrom(node67);
        node55.addChildrenToBack(node60);
        boolean boolean71 = node55.isLocalResultCall();
        com.google.javascript.rhino.Node node72 = node50.copyInformationFromForTree(node55);
        boolean boolean73 = serializableList45.contains((java.lang.Object) node55);
        java.util.Iterator<java.io.Serializable> serializableItor74 = serializableList45.iterator();
        java.lang.Object[] objArray75 = serializableList45.toArray();
        boolean boolean76 = serializableList17.containsAll((java.util.Collection<java.io.Serializable>) serializableList45);
        // The following exception was thrown during execution in test generation
        try {
            serializableList45.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableStream21);
        org.junit.Assert.assertNotNull(serializableStream22);
        org.junit.Assert.assertNotNull(serializableStream23);
        org.junit.Assert.assertNotNull(serializableSpliterator24);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertNotNull(serializableSpliterator26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(serializableArray44);
        org.junit.Assert.assertNotNull(serializableList45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(serializableItor74);
        org.junit.Assert.assertNotNull(objArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray75), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray75), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
    }

    @Test
    public void test01638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01638");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isContinue();
        boolean boolean18 = node16.isString();
        boolean boolean19 = node16.isStringKey();
        com.google.javascript.rhino.Node node20 = node3.copyInformationFrom(node16);
        boolean boolean21 = node3.isIn();
        boolean boolean22 = node3.isEmpty();
        boolean boolean23 = node3.isNew();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isQualifiedName();
        boolean boolean29 = node27.isHook();
        com.google.javascript.rhino.Node node30 = node3.clonePropsFrom(node27);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node31 = node27.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
    }

    @Test
    public void test01639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01639");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        java.lang.String str4 = jSDocInfo0.getMeaning();
        java.lang.String str5 = jSDocInfo0.getLicense();
        boolean boolean6 = jSDocInfo0.isConstructor();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getTypedefType();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection8 = jSDocInfo0.getTypeNodes();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertNotNull(nodeCollection8);
    }

    @Test
    public void test01640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01640");
        java.io.IOException iOException0 = new java.io.IOException();
        java.io.IOException iOException1 = new java.io.IOException((java.lang.Throwable) iOException0);
        java.io.IOException iOException2 = new java.io.IOException((java.lang.Throwable) iOException1);
        java.lang.Throwable[] throwableArray3 = iOException1.getSuppressed();
        java.io.IOException iOException5 = new java.io.IOException("Unknown class name");
        java.io.IOException iOException6 = new java.io.IOException();
        java.io.IOException iOException7 = new java.io.IOException((java.lang.Throwable) iOException6);
        java.io.IOException iOException8 = new java.io.IOException((java.lang.Throwable) iOException7);
        java.lang.Throwable[] throwableArray9 = iOException7.getSuppressed();
        java.io.IOException iOException10 = new java.io.IOException();
        java.io.IOException iOException11 = new java.io.IOException((java.lang.Throwable) iOException10);
        java.io.IOException iOException12 = new java.io.IOException((java.lang.Throwable) iOException11);
        java.io.IOException iOException13 = new java.io.IOException();
        java.io.IOException iOException14 = new java.io.IOException((java.lang.Throwable) iOException13);
        java.io.IOException iOException15 = new java.io.IOException((java.lang.Throwable) iOException14);
        java.lang.Throwable[] throwableArray16 = iOException14.getSuppressed();
        java.io.IOException iOException17 = new java.io.IOException();
        java.io.IOException iOException18 = new java.io.IOException((java.lang.Throwable) iOException17);
        java.io.IOException iOException19 = new java.io.IOException((java.lang.Throwable) iOException18);
        java.io.IOException iOException20 = new java.io.IOException((java.lang.Throwable) iOException18);
        java.io.IOException iOException21 = new java.io.IOException();
        java.io.IOException iOException23 = new java.io.IOException("Unknown class name");
        java.io.IOException iOException25 = new java.io.IOException("Unknown class name");
        java.io.IOException iOException26 = new java.io.IOException();
        java.io.IOException iOException27 = new java.io.IOException((java.lang.Throwable) iOException26);
        java.io.IOException iOException28 = new java.io.IOException((java.lang.Throwable) iOException27);
        java.io.IOException iOException29 = new java.io.IOException((java.lang.Throwable) iOException27);
        java.io.IOException iOException30 = new java.io.IOException();
        com.google.common.collect.ImmutableList<java.io.IOException> iOExceptionList31 = com.google.common.collect.ImmutableList.of(iOException1, iOException5, iOException7, iOException11, iOException14, iOException18, iOException21, iOException23, iOException25, iOException29, iOException30);
        java.io.IOException iOException33 = new java.io.IOException();
        java.io.IOException iOException34 = new java.io.IOException((java.lang.Throwable) iOException33);
        java.io.IOException iOException35 = new java.io.IOException((java.lang.Throwable) iOException34);
        java.lang.Throwable[] throwableArray36 = iOException34.getSuppressed();
        java.io.IOException iOException38 = new java.io.IOException("Unknown class name");
        java.io.IOException iOException39 = new java.io.IOException();
        java.io.IOException iOException40 = new java.io.IOException((java.lang.Throwable) iOException39);
        java.io.IOException iOException41 = new java.io.IOException((java.lang.Throwable) iOException40);
        java.lang.Throwable[] throwableArray42 = iOException40.getSuppressed();
        java.io.IOException iOException43 = new java.io.IOException();
        java.io.IOException iOException44 = new java.io.IOException((java.lang.Throwable) iOException43);
        java.io.IOException iOException45 = new java.io.IOException((java.lang.Throwable) iOException44);
        java.io.IOException iOException46 = new java.io.IOException();
        java.io.IOException iOException47 = new java.io.IOException((java.lang.Throwable) iOException46);
        java.io.IOException iOException48 = new java.io.IOException((java.lang.Throwable) iOException47);
        java.lang.Throwable[] throwableArray49 = iOException47.getSuppressed();
        java.io.IOException iOException50 = new java.io.IOException();
        java.io.IOException iOException51 = new java.io.IOException((java.lang.Throwable) iOException50);
        java.io.IOException iOException52 = new java.io.IOException((java.lang.Throwable) iOException51);
        java.io.IOException iOException53 = new java.io.IOException((java.lang.Throwable) iOException51);
        java.io.IOException iOException54 = new java.io.IOException();
        java.io.IOException iOException56 = new java.io.IOException("Unknown class name");
        java.io.IOException iOException58 = new java.io.IOException("Unknown class name");
        java.io.IOException iOException59 = new java.io.IOException();
        java.io.IOException iOException60 = new java.io.IOException((java.lang.Throwable) iOException59);
        java.io.IOException iOException61 = new java.io.IOException((java.lang.Throwable) iOException60);
        java.io.IOException iOException62 = new java.io.IOException((java.lang.Throwable) iOException60);
        java.io.IOException iOException63 = new java.io.IOException();
        com.google.common.collect.ImmutableList<java.io.IOException> iOExceptionList64 = com.google.common.collect.ImmutableList.of(iOException34, iOException38, iOException40, iOException44, iOException47, iOException51, iOException54, iOException56, iOException58, iOException62, iOException63);
        java.io.IOException iOException65 = new java.io.IOException((java.lang.Throwable) iOException38);
        java.io.IOException iOException66 = new java.io.IOException("NUMBER -1.0 12", (java.lang.Throwable) iOException65);
        iOException14.addSuppressed((java.lang.Throwable) iOException66);
        java.lang.String str68 = iOException14.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(iOExceptionList31);
        org.junit.Assert.assertNotNull(throwableArray36);
        org.junit.Assert.assertNotNull(throwableArray42);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(iOExceptionList64);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "java.io.IOException: java.io.IOException" + "'", str68, "java.io.IOException: java.io.IOException");
    }

    @Test
    public void test01641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01641");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getStartLine();
        int int2 = typePosition0.getPositionOnEndLine();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition3 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int4 = typePosition3.getStartLine();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean15 = node14.isQualifiedName();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean20 = node19.isContinue();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean25 = node24.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType26 = null;
        node24.setJSType(jSType26);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean32 = node31.isContinue();
        com.google.javascript.rhino.Node node33 = node24.clonePropsFrom(node31);
        node19.addChildrenToBack(node24);
        boolean boolean35 = node19.isLocalResultCall();
        com.google.javascript.rhino.Node node36 = node14.copyInformationFromForTree(node19);
        node19.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node39 = node10.clonePropsFrom(node19);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean44 = node43.isLabelName();
        boolean boolean45 = node43.isTrue();
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean50 = node49.isContinue();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean55 = node54.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType56 = null;
        node54.setJSType(jSType56);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean62 = node61.isContinue();
        com.google.javascript.rhino.Node node63 = node54.clonePropsFrom(node61);
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (byte) 0, node19, node43, node49, node63, 10, (int) (byte) -1);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) -1, node66);
        typePosition3.setItem(node66);
        com.google.javascript.rhino.Node node69 = typePosition3.getItem();
        com.google.javascript.rhino.Node node70 = typePosition3.getItem();
        boolean boolean71 = typePosition3.hasBrackets();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>> nodeSourcePositionList72 = com.google.common.collect.ImmutableList.of((com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) typePosition0, (com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node>) typePosition3);
        int int73 = typePosition0.getStartLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(nodeSourcePositionList72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
    }

    @Test
    public void test01642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01642");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream21 = serializableList17.stream();
        java.io.Serializable[] serializableArray38 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList39 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray38);
        boolean boolean40 = serializableList39.isEmpty();
        boolean boolean42 = serializableList39.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream43 = serializableList39.stream();
        boolean boolean44 = serializableList17.containsAll((java.util.Collection<java.io.Serializable>) serializableList39);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean54 = node53.isQualifiedName();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean59 = node58.isContinue();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean64 = node63.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType65 = null;
        node63.setJSType(jSType65);
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean71 = node70.isContinue();
        com.google.javascript.rhino.Node node72 = node63.clonePropsFrom(node70);
        node58.addChildrenToBack(node63);
        boolean boolean74 = node58.isLocalResultCall();
        com.google.javascript.rhino.Node node75 = node53.copyInformationFromForTree(node58);
        node58.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node78 = node49.clonePropsFrom(node58);
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean83 = node82.isInstanceOf();
        boolean boolean84 = node82.isComma();
        boolean boolean85 = node49.isEquivalentTo(node82);
        boolean boolean86 = node82.isComma();
        com.google.javascript.rhino.Node node90 = new com.google.javascript.rhino.Node(0, 10, 0);
        com.google.javascript.rhino.Node node93 = new com.google.javascript.rhino.Node(51, node82, node90, (int) (short) 10, (int) ' ');
        int int94 = serializableList17.lastIndexOf((java.lang.Object) node93);
        com.google.javascript.rhino.Node node95 = node93.getLastSibling();
        com.google.javascript.rhino.Node node97 = com.google.javascript.rhino.Node.newNumber((double) 45);
        com.google.javascript.rhino.Node node98 = node95.useSourceInfoIfMissingFromForTree(node97);
        boolean boolean99 = node95.isCatch();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableStream21);
        org.junit.Assert.assertNotNull(serializableArray38);
        org.junit.Assert.assertNotNull(serializableList39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(serializableStream43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
        org.junit.Assert.assertNotNull(node95);
        org.junit.Assert.assertNotNull(node97);
        org.junit.Assert.assertNotNull(node98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test01643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01643");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isQualifiedName();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean10 = node9.isContinue();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean15 = node14.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType16 = null;
        node14.setJSType(jSType16);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean22 = node21.isContinue();
        com.google.javascript.rhino.Node node23 = node14.clonePropsFrom(node21);
        node9.addChildrenToBack(node14);
        boolean boolean25 = node9.isLocalResultCall();
        com.google.javascript.rhino.Node node26 = node4.copyInformationFromForTree(node9);
        boolean boolean27 = node9.isParamList();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(38, node9, 51, 38);
        boolean boolean31 = node30.isStringKey();
        // The following exception was thrown during execution in test generation
        try {
            double double32 = node30.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: NAME 51 is not a number node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test01644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01644");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream21 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream22 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream23 = serializableList17.parallelStream();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = new com.google.javascript.rhino.JSDocInfo();
        int int25 = jSDocInfo24.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet26 = jSDocInfo24.getParameterNames();
        boolean boolean27 = serializableList17.contains((java.lang.Object) strSet26);
        java.util.Spliterator<java.io.Serializable> serializableSpliterator28 = serializableList17.spliterator();
        java.util.Iterator<java.io.Serializable> serializableItor29 = serializableList17.iterator();
        java.io.Serializable[] serializableArray46 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList47 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray46);
        boolean boolean48 = serializableList47.isEmpty();
        boolean boolean50 = serializableList47.contains((java.lang.Object) 52);
        boolean boolean52 = serializableList47.contains((java.lang.Object) (byte) 0);
        boolean boolean53 = serializableList17.containsAll((java.util.Collection<java.io.Serializable>) serializableList47);
        java.util.Spliterator<java.io.Serializable> serializableSpliterator54 = serializableList17.spliterator();
        java.lang.Object[] objArray55 = serializableList17.toArray();
        java.util.Spliterator<java.io.Serializable> serializableSpliterator56 = serializableList17.spliterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo57 = new com.google.javascript.rhino.JSDocInfo();
        int int58 = jSDocInfo57.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet59 = jSDocInfo57.getParameterNames();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList60 = jSDocInfo57.getExtendedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression61 = jSDocInfo57.getBaseType();
        java.util.Set<java.lang.String> strSet62 = jSDocInfo57.getModifies();
        int int63 = jSDocInfo57.getParameterCount();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean64 = serializableList17.add((java.io.Serializable) jSDocInfo57);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableStream21);
        org.junit.Assert.assertNotNull(serializableStream22);
        org.junit.Assert.assertNotNull(serializableStream23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(serializableSpliterator28);
        org.junit.Assert.assertNotNull(serializableItor29);
        org.junit.Assert.assertNotNull(serializableArray46);
        org.junit.Assert.assertNotNull(serializableList47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(serializableSpliterator54);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertNotNull(serializableSpliterator56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertNotNull(jSTypeExpressionList60);
        org.junit.Assert.assertNull(jSTypeExpression61);
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
    }

    @Test
    public void test01645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01645");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isContinue();
        boolean boolean18 = node16.isString();
        com.google.javascript.rhino.Node node19 = node3.useSourceInfoFromForTree(node16);
        boolean boolean20 = node3.isLocalResultCall();
        boolean boolean21 = node3.isThrow();
        boolean boolean22 = node3.isLocalResultCall();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test01646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01646");
        com.google.javascript.rhino.jstype.ObjectType objectType0 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.ObjectType objectType2 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface(objectType0, "java.io.IOException: JSDocInfo");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01647");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getParameterType("true");
        java.lang.String str6 = jSDocInfo0.getLendsName();
        java.lang.String str7 = jSDocInfo0.getDeprecationReason();
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getModifies();
        java.io.Serializable[] serializableArray25 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList26 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray25);
        boolean boolean27 = serializableList26.isEmpty();
        int int28 = serializableList26.size();
        boolean boolean29 = strSet8.contains((java.lang.Object) serializableList26);
        java.io.Serializable[] serializableArray46 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList47 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray46);
        boolean boolean48 = serializableList47.isEmpty();
        boolean boolean50 = serializableList47.contains((java.lang.Object) 52);
        boolean boolean51 = serializableList26.containsAll((java.util.Collection<java.io.Serializable>) serializableList47);
        // The following exception was thrown during execution in test generation
        try {
            serializableList26.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(serializableArray25);
        org.junit.Assert.assertNotNull(serializableList26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 16 + "'", int28 == 16);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(serializableArray46);
        org.junit.Assert.assertNotNull(serializableList47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test01648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01648");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isContinue();
        boolean boolean5 = node3.isBlock();
        int int6 = node3.getType();
        boolean boolean7 = node3.isDec();
        boolean boolean8 = node3.isAnd();
        boolean boolean9 = node3.isLabelName();
        com.google.javascript.rhino.Node node11 = node3.getAncestor((int) '4');
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isLabelName();
        boolean boolean18 = node16.isDec();
        boolean boolean19 = node16.isAssign();
        boolean boolean20 = node16.isIn();
        boolean boolean21 = node16.isThis();
        boolean boolean22 = node16.isOr();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean27 = node26.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType28 = null;
        node26.setJSType(jSType28);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean34 = node33.isContinue();
        com.google.javascript.rhino.Node node35 = node26.clonePropsFrom(node33);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isContinue();
        boolean boolean41 = node39.isString();
        com.google.javascript.rhino.Node node42 = node26.useSourceInfoFromForTree(node39);
        com.google.javascript.rhino.InputId inputId43 = null;
        node42.setInputId(inputId43);
        java.lang.Object obj46 = node42.getProp((int) (short) 10);
        com.google.javascript.rhino.JSDocInfo jSDocInfo47 = node42.getJSDocInfo();
        node42.setVarArgs(true);
        boolean boolean50 = node42.isFor();
        com.google.javascript.rhino.JSDocInfo jSDocInfo51 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean52 = jSDocInfo51.isNoAlias();
        boolean boolean54 = jSDocInfo51.hasDescriptionForParameter("java.io.IOException: java.io.IOException");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression55 = jSDocInfo51.getEnumParameterType();
        jSDocInfo51.setDeprecated(false);
        boolean boolean58 = jSDocInfo51.isImplicitCast();
        node42.setJSDocInfo(jSDocInfo51);
        node42.setSourceEncodedPositionForTree(8);
        com.google.javascript.rhino.InputId inputId62 = node42.getInputId();
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(31, node16, node42, (int) (short) 0, 3);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node66 = node11.getChildBefore(node16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNull(obj46);
        org.junit.Assert.assertNull(jSDocInfo47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(jSTypeExpression55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(inputId62);
    }

    @Test
    public void test01649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01649");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue0 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue1 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue2 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue3 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList4 = com.google.common.collect.ImmutableList.of(ternaryValue0, ternaryValue1, ternaryValue2, ternaryValue3);
        java.lang.String str5 = ternaryValue2.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue6 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue7 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue8 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue9 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList10 = com.google.common.collect.ImmutableList.of(ternaryValue6, ternaryValue7, ternaryValue8, ternaryValue9);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue11 = ternaryValue2.or(ternaryValue7);
        java.lang.String str12 = ternaryValue7.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue13 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue14 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue15 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue16 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList17 = com.google.common.collect.ImmutableList.of(ternaryValue13, ternaryValue14, ternaryValue15, ternaryValue16);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue18 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue19 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue20 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue21 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList22 = com.google.common.collect.ImmutableList.of(ternaryValue18, ternaryValue19, ternaryValue20, ternaryValue21);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue23 = ternaryValue14.xor(ternaryValue20);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue24 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue26 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue27 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList28 = com.google.common.collect.ImmutableList.of(ternaryValue24, ternaryValue25, ternaryValue26, ternaryValue27);
        java.lang.String str29 = ternaryValue26.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue30 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue31 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue32 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue33 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList34 = com.google.common.collect.ImmutableList.of(ternaryValue30, ternaryValue31, ternaryValue32, ternaryValue33);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue35 = ternaryValue26.or(ternaryValue31);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue36 = ternaryValue35.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue37 = ternaryValue14.and(ternaryValue36);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue38 = ternaryValue7.xor(ternaryValue36);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue39 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue40 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue41 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue42 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList43 = com.google.common.collect.ImmutableList.of(ternaryValue39, ternaryValue40, ternaryValue41, ternaryValue42);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue44 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue45 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue46 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue47 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList48 = com.google.common.collect.ImmutableList.of(ternaryValue44, ternaryValue45, ternaryValue46, ternaryValue47);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue49 = ternaryValue40.xor(ternaryValue46);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue50 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue51 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue52 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue53 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList54 = com.google.common.collect.ImmutableList.of(ternaryValue50, ternaryValue51, ternaryValue52, ternaryValue53);
        java.lang.String str55 = ternaryValue52.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue56 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue57 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue58 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue59 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList60 = com.google.common.collect.ImmutableList.of(ternaryValue56, ternaryValue57, ternaryValue58, ternaryValue59);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue61 = ternaryValue52.or(ternaryValue57);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue62 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue63 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue64 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue65 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList66 = com.google.common.collect.ImmutableList.of(ternaryValue62, ternaryValue63, ternaryValue64, ternaryValue65);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue67 = ternaryValue57.xor(ternaryValue62);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue68 = ternaryValue49.xor(ternaryValue62);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue69 = ternaryValue36.or(ternaryValue62);
        boolean boolean71 = ternaryValue69.toBoolean(true);
        org.junit.Assert.assertNotNull(ternaryValue0);
        org.junit.Assert.assertNotNull(ternaryValue1);
        org.junit.Assert.assertNotNull(ternaryValue2);
        org.junit.Assert.assertNotNull(ternaryValue3);
        org.junit.Assert.assertNotNull(ternaryValueList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "true" + "'", str5, "true");
        org.junit.Assert.assertNotNull(ternaryValue6);
        org.junit.Assert.assertNotNull(ternaryValue7);
        org.junit.Assert.assertNotNull(ternaryValue8);
        org.junit.Assert.assertNotNull(ternaryValue9);
        org.junit.Assert.assertNotNull(ternaryValueList10);
        org.junit.Assert.assertNotNull(ternaryValue11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "true" + "'", str12, "true");
        org.junit.Assert.assertNotNull(ternaryValue13);
        org.junit.Assert.assertNotNull(ternaryValue14);
        org.junit.Assert.assertNotNull(ternaryValue15);
        org.junit.Assert.assertNotNull(ternaryValue16);
        org.junit.Assert.assertNotNull(ternaryValueList17);
        org.junit.Assert.assertNotNull(ternaryValue18);
        org.junit.Assert.assertNotNull(ternaryValue19);
        org.junit.Assert.assertNotNull(ternaryValue20);
        org.junit.Assert.assertNotNull(ternaryValue21);
        org.junit.Assert.assertNotNull(ternaryValueList22);
        org.junit.Assert.assertNotNull(ternaryValue23);
        org.junit.Assert.assertNotNull(ternaryValue24);
        org.junit.Assert.assertNotNull(ternaryValue25);
        org.junit.Assert.assertNotNull(ternaryValue26);
        org.junit.Assert.assertNotNull(ternaryValue27);
        org.junit.Assert.assertNotNull(ternaryValueList28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "true" + "'", str29, "true");
        org.junit.Assert.assertNotNull(ternaryValue30);
        org.junit.Assert.assertNotNull(ternaryValue31);
        org.junit.Assert.assertNotNull(ternaryValue32);
        org.junit.Assert.assertNotNull(ternaryValue33);
        org.junit.Assert.assertNotNull(ternaryValueList34);
        org.junit.Assert.assertNotNull(ternaryValue35);
        org.junit.Assert.assertNotNull(ternaryValue36);
        org.junit.Assert.assertNotNull(ternaryValue37);
        org.junit.Assert.assertNotNull(ternaryValue38);
        org.junit.Assert.assertNotNull(ternaryValue39);
        org.junit.Assert.assertNotNull(ternaryValue40);
        org.junit.Assert.assertNotNull(ternaryValue41);
        org.junit.Assert.assertNotNull(ternaryValue42);
        org.junit.Assert.assertNotNull(ternaryValueList43);
        org.junit.Assert.assertNotNull(ternaryValue44);
        org.junit.Assert.assertNotNull(ternaryValue45);
        org.junit.Assert.assertNotNull(ternaryValue46);
        org.junit.Assert.assertNotNull(ternaryValue47);
        org.junit.Assert.assertNotNull(ternaryValueList48);
        org.junit.Assert.assertNotNull(ternaryValue49);
        org.junit.Assert.assertNotNull(ternaryValue50);
        org.junit.Assert.assertNotNull(ternaryValue51);
        org.junit.Assert.assertNotNull(ternaryValue52);
        org.junit.Assert.assertNotNull(ternaryValue53);
        org.junit.Assert.assertNotNull(ternaryValueList54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "true" + "'", str55, "true");
        org.junit.Assert.assertNotNull(ternaryValue56);
        org.junit.Assert.assertNotNull(ternaryValue57);
        org.junit.Assert.assertNotNull(ternaryValue58);
        org.junit.Assert.assertNotNull(ternaryValue59);
        org.junit.Assert.assertNotNull(ternaryValueList60);
        org.junit.Assert.assertNotNull(ternaryValue61);
        org.junit.Assert.assertNotNull(ternaryValue62);
        org.junit.Assert.assertNotNull(ternaryValue63);
        org.junit.Assert.assertNotNull(ternaryValue64);
        org.junit.Assert.assertNotNull(ternaryValue65);
        org.junit.Assert.assertNotNull(ternaryValueList66);
        org.junit.Assert.assertNotNull(ternaryValue67);
        org.junit.Assert.assertNotNull(ternaryValue68);
        org.junit.Assert.assertNotNull(ternaryValue69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
    }

    @Test
    public void test01650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01650");
        java.lang.String[] strArray3 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        java.lang.Object[] objArray6 = strSet4.toArray();
        java.io.Serializable[] serializableArray23 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList24 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray23);
        boolean boolean25 = serializableList24.isEmpty();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean30 = node29.isQualifiedName();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean35 = node34.isContinue();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType41 = null;
        node39.setJSType(jSType41);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isContinue();
        com.google.javascript.rhino.Node node48 = node39.clonePropsFrom(node46);
        node34.addChildrenToBack(node39);
        boolean boolean50 = node34.isLocalResultCall();
        com.google.javascript.rhino.Node node51 = node29.copyInformationFromForTree(node34);
        boolean boolean52 = serializableList24.contains((java.lang.Object) node34);
        java.util.Iterator<java.io.Serializable> serializableItor53 = serializableList24.iterator();
        boolean boolean54 = strSet4.containsAll((java.util.Collection<java.io.Serializable>) serializableList24);
        java.lang.Object[] objArray55 = serializableList24.toArray();
        boolean boolean56 = serializableList24.isEmpty();
        boolean boolean57 = serializableList24.isEmpty();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList58 = serializableList24.asList();
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean63 = node62.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType64 = null;
        node62.setJSType(jSType64);
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean70 = node69.isContinue();
        com.google.javascript.rhino.Node node71 = node62.clonePropsFrom(node69);
        node71.setSourceFileForTesting("hi!");
        boolean boolean74 = node71.isIf();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile75 = node71.getStaticSourceFile();
        java.lang.String str76 = staticSourceFile75.getName();
        boolean boolean77 = staticSourceFile75.isExtern();
        int int79 = staticSourceFile75.getColumnOfOffset(44);
        java.lang.String str80 = staticSourceFile75.getName();
        int int82 = staticSourceFile75.getLineOfOffset(31);
        int int83 = serializableList24.lastIndexOf((java.lang.Object) staticSourceFile75);
        // The following exception was thrown during execution in test generation
        try {
            serializableList24.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(serializableArray23);
        org.junit.Assert.assertNotNull(serializableList24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(serializableItor53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(serializableList58);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(staticSourceFile75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "hi!" + "'", str76, "hi!");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "hi!" + "'", str80, "hi!");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
    }

    @Test
    public void test01651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01651");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 0.0f);
        node1.putIntProp((int) 'a', 45);
        org.junit.Assert.assertNotNull(node1);
    }

    @Test
    public void test01652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01652");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoAlias();
        boolean boolean3 = jSDocInfo0.hasDescriptionForParameter("java.io.IOException: java.io.IOException");
        boolean boolean4 = jSDocInfo0.hasModifies();
        boolean boolean5 = jSDocInfo0.isIdGenerator();
        java.lang.String str6 = jSDocInfo0.getDescription();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test01653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01653");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isQualifiedName();
        boolean boolean5 = node3.isHook();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = new com.google.javascript.rhino.JSTypeExpression(node3, "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        com.google.javascript.rhino.Node node8 = jSTypeExpression7.getRoot();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = com.google.javascript.rhino.JSTypeExpression.makeOptionalArg(jSTypeExpression7);
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.JSType jSType12 = jSTypeExpression7.evaluate(jSTypeStaticScope10, jSTypeRegistry11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(jSTypeExpression9);
    }

    @Test
    public void test01654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01654");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        int int2 = sideEffectFlags1.valueOf();
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.setReturnsTainted();
        int int5 = sideEffectFlags1.valueOf();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 52 + "'", int2 == 52);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 15 + "'", int5 == 15);
    }

    @Test
    public void test01655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01655");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("true", 15, (int) (byte) -1);
        com.google.javascript.rhino.Node node5 = node3.getAncestor(4);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean6 = node5.isParamList();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(node5);
    }

    @Test
    public void test01656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01656");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(32, (int) (byte) 10, (int) '#');
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isQualifiedName();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isContinue();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType24 = null;
        node22.setJSType(jSType24);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean30 = node29.isContinue();
        com.google.javascript.rhino.Node node31 = node22.clonePropsFrom(node29);
        node17.addChildrenToBack(node22);
        boolean boolean33 = node17.isLocalResultCall();
        com.google.javascript.rhino.Node node34 = node12.copyInformationFromForTree(node17);
        node17.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node37 = node8.clonePropsFrom(node17);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isInstanceOf();
        boolean boolean43 = node41.isComma();
        boolean boolean44 = node8.isEquivalentTo(node41);
        boolean boolean45 = node41.isComma();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) '#', node4, node41, 42, (int) ' ');
        int int49 = node4.getChildCount();
        boolean boolean50 = node4.isContinue();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable51 = node4.siblings();
        com.google.javascript.rhino.Node node52 = node4.cloneNode();
        int int53 = node4.getSourceOffset();
        // The following exception was thrown during execution in test generation
        try {
            int int55 = node4.getExistingIntProp((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 97");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(nodeIterable51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
    }

    @Test
    public void test01657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01657");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        boolean boolean22 = serializableList17.contains((java.lang.Object) (byte) 0);
        java.lang.Object[] objArray23 = serializableList17.toArray();
        java.util.Iterator<java.io.Serializable> serializableItor24 = serializableList17.iterator();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList25 = serializableList17.asList();
        java.io.Serializable[] serializableArray42 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList43 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray42);
        boolean boolean44 = serializableList43.isEmpty();
        boolean boolean46 = serializableList43.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream47 = serializableList43.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream48 = serializableList43.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream49 = serializableList43.parallelStream();
        com.google.javascript.rhino.JSDocInfo jSDocInfo50 = new com.google.javascript.rhino.JSDocInfo();
        int int51 = jSDocInfo50.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet52 = jSDocInfo50.getParameterNames();
        boolean boolean53 = serializableList43.contains((java.lang.Object) strSet52);
        java.util.Spliterator<java.io.Serializable> serializableSpliterator54 = serializableList43.spliterator();
        java.util.Iterator<java.io.Serializable> serializableItor55 = serializableList43.iterator();
        java.io.Serializable[] serializableArray72 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList73 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray72);
        boolean boolean74 = serializableList73.isEmpty();
        boolean boolean76 = serializableList73.contains((java.lang.Object) 52);
        boolean boolean78 = serializableList73.contains((java.lang.Object) (byte) 0);
        boolean boolean79 = serializableList43.containsAll((java.util.Collection<java.io.Serializable>) serializableList73);
        java.util.Spliterator<java.io.Serializable> serializableSpliterator80 = serializableList43.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean81 = serializableList17.addAll((java.util.Collection<java.io.Serializable>) serializableList43);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertNotNull(serializableItor24);
        org.junit.Assert.assertNotNull(serializableList25);
        org.junit.Assert.assertNotNull(serializableArray42);
        org.junit.Assert.assertNotNull(serializableList43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(serializableStream47);
        org.junit.Assert.assertNotNull(serializableStream48);
        org.junit.Assert.assertNotNull(serializableStream49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(serializableSpliterator54);
        org.junit.Assert.assertNotNull(serializableItor55);
        org.junit.Assert.assertNotNull(serializableArray72);
        org.junit.Assert.assertNotNull(serializableList73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(serializableSpliterator80);
    }

    @Test
    public void test01658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01658");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        boolean boolean2 = jSDocInfo0.hasType();
        boolean boolean3 = jSDocInfo0.containsDeclaration();
        java.lang.String str4 = jSDocInfo0.getDeprecationReason();
        int int5 = jSDocInfo0.getImplementedInterfaceCount();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test01659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01659");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isQualifiedName();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isContinue();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node18.setJSType(jSType20);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isContinue();
        com.google.javascript.rhino.Node node27 = node18.clonePropsFrom(node25);
        node13.addChildrenToBack(node18);
        boolean boolean29 = node13.isLocalResultCall();
        com.google.javascript.rhino.Node node30 = node8.copyInformationFromForTree(node13);
        node13.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node33 = node4.clonePropsFrom(node13);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean38 = node37.isLabelName();
        boolean boolean39 = node37.isTrue();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean44 = node43.isContinue();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean49 = node48.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        node48.setJSType(jSType50);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node57 = node48.clonePropsFrom(node55);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (byte) 0, node13, node37, node43, node57, 10, (int) (byte) -1);
        com.google.javascript.rhino.Node node61 = node13.getParent();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable62 = node13.children();
        boolean boolean63 = node13.isAssign();
        boolean boolean64 = node13.isObjectLit();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str65 = node13.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertNotNull(nodeIterable62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test01660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01660");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isQualifiedName();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isContinue();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType15 = null;
        node13.setJSType(jSType15);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean21 = node20.isContinue();
        com.google.javascript.rhino.Node node22 = node13.clonePropsFrom(node20);
        node8.addChildrenToBack(node13);
        boolean boolean24 = node8.isLocalResultCall();
        com.google.javascript.rhino.Node node25 = node3.copyInformationFromForTree(node8);
        boolean boolean26 = node8.hasChildren();
        com.google.javascript.rhino.jstype.JSType jSType27 = node8.getJSType();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean32 = node31.isQualifiedName();
        boolean boolean33 = node31.isHook();
        int int34 = node31.getLength();
        java.io.Serializable[] serializableArray51 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList52 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray51);
        boolean boolean53 = serializableList52.isEmpty();
        boolean boolean55 = serializableList52.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream56 = serializableList52.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream57 = serializableList52.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream58 = serializableList52.parallelStream();
        com.google.javascript.rhino.JSDocInfo jSDocInfo59 = new com.google.javascript.rhino.JSDocInfo();
        int int60 = jSDocInfo59.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet61 = jSDocInfo59.getParameterNames();
        boolean boolean62 = serializableList52.contains((java.lang.Object) strSet61);
        node31.setDirectives(strSet61);
        node31.setIsSyntheticBlock(false);
        com.google.javascript.rhino.Node node66 = node8.useSourceInfoFromForTree(node31);
        com.google.javascript.rhino.Node node67 = node66.removeChildren();
        boolean boolean68 = node67.isOr();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(jSType27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(serializableArray51);
        org.junit.Assert.assertNotNull(serializableList52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(serializableStream56);
        org.junit.Assert.assertNotNull(serializableStream57);
        org.junit.Assert.assertNotNull(serializableStream58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test01661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01661");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int1 = namePosition0.getPositionOnEndLine();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.NamePosition> namePositionList2 = com.google.common.collect.ImmutableList.of(namePosition0);
        com.google.javascript.rhino.Node node3 = namePosition0.getItem();
        namePosition0.setPositionInformation(2, 47, 31, 0);
        int int9 = namePosition0.getPositionOnEndLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(namePositionList2);
        org.junit.Assert.assertNull(node3);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test01662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01662");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(37);
        int int2 = node1.getSideEffectFlags();
        int int3 = node1.getSourceOffset();
        boolean boolean4 = node1.isDec();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test01663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01663");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isContinue();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType10 = null;
        node8.setJSType(jSType10);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean16 = node15.isContinue();
        com.google.javascript.rhino.Node node17 = node8.clonePropsFrom(node15);
        node3.addChildrenToBack(node8);
        boolean boolean19 = node3.isLocalResultCall();
        int int20 = node3.getLength();
        boolean boolean21 = node3.isSwitch();
        boolean boolean22 = node3.isDec();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test01664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01664");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition1 = marker0.getDescription();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition2 = marker0.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition3 = marker0.getName();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition4 = marker0.getType();
        org.junit.Assert.assertNull(stringPosition1);
        org.junit.Assert.assertNull(nodeSourcePosition2);
        org.junit.Assert.assertNull(stringPosition3);
        org.junit.Assert.assertNull(typePosition4);
    }

    @Test
    public void test01665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01665");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isQualifiedName();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isContinue();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node18.setJSType(jSType20);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isContinue();
        com.google.javascript.rhino.Node node27 = node18.clonePropsFrom(node25);
        node13.addChildrenToBack(node18);
        boolean boolean29 = node13.isLocalResultCall();
        com.google.javascript.rhino.Node node30 = node8.copyInformationFromForTree(node13);
        node13.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node33 = node4.clonePropsFrom(node13);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean38 = node37.isLabelName();
        boolean boolean39 = node37.isTrue();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean44 = node43.isContinue();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean49 = node48.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        node48.setJSType(jSType50);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node57 = node48.clonePropsFrom(node55);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (byte) 0, node13, node37, node43, node57, 10, (int) (byte) -1);
        int int61 = node60.getLength();
        boolean boolean62 = node60.isExprResult();
        boolean boolean63 = node60.isAssignAdd();
        boolean boolean64 = node60.isTry();
        boolean boolean65 = node60.isStringKey();
        com.google.javascript.rhino.Node node66 = node60.removeChildren();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node66);
    }

    @Test
    public void test01666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01666");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("true", 42, 8);
        com.google.javascript.rhino.Node node5 = null;
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean10 = node9.isLabelName();
        boolean boolean11 = node9.isDec();
        boolean boolean12 = node9.isNoSideEffectsCall();
        boolean boolean13 = node9.isIf();
        boolean boolean14 = node9.wasEmptyNode();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(38, node4, node5, node9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test01667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01667");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isQualifiedName();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isContinue();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        node32.setJSType(jSType34);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isContinue();
        com.google.javascript.rhino.Node node41 = node32.clonePropsFrom(node39);
        node27.addChildrenToBack(node32);
        boolean boolean43 = node27.isLocalResultCall();
        com.google.javascript.rhino.Node node44 = node22.copyInformationFromForTree(node27);
        boolean boolean45 = serializableList17.contains((java.lang.Object) node27);
        java.io.Serializable[] serializableArray62 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList63 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray62);
        boolean boolean64 = serializableList17.containsAll((java.util.Collection<java.io.Serializable>) serializableList63);
        com.google.javascript.rhino.Node node69 = com.google.javascript.rhino.Node.newString(37, "hi!", (int) (byte) 100, (int) (short) 100);
        node69.setCharno((int) (byte) 1);
        boolean boolean72 = node69.isGetterDef();
        int int73 = serializableList17.lastIndexOf((java.lang.Object) boolean72);
        java.util.function.UnaryOperator<java.io.Serializable> serializableUnaryOperator74 = null;
        // The following exception was thrown during execution in test generation
        try {
            serializableList17.replaceAll(serializableUnaryOperator74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(serializableArray62);
        org.junit.Assert.assertNotNull(serializableList63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
    }

    @Test
    public void test01668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01668");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        boolean boolean5 = node3.isTrue();
        boolean boolean6 = node3.isNoSideEffectsCall();
        boolean boolean7 = node3.isCase();
        boolean boolean8 = node3.isVar();
        int int9 = node3.getSourcePosition();
        boolean boolean10 = node3.isAnd();
        com.google.javascript.rhino.Node node11 = node3.cloneNode();
        boolean boolean12 = node11.isVoid();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test01669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01669");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        boolean boolean22 = serializableList17.contains((java.lang.Object) (byte) 0);
        java.lang.Object[] objArray23 = serializableList17.toArray();
        java.util.Iterator<java.io.Serializable> serializableItor24 = serializableList17.iterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo26 = new com.google.javascript.rhino.JSDocInfo();
        int int27 = jSDocInfo26.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility28 = null;
        jSDocInfo26.setVisibility(visibility28);
        boolean boolean30 = jSDocInfo26.hasFileOverview();
        boolean boolean31 = jSDocInfo26.isJavaDispatch();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList32 = jSDocInfo26.getImplementedInterfaces();
        boolean boolean33 = jSDocInfo26.isConsistentIdGenerator();
        java.util.Set<java.lang.String> strSet34 = jSDocInfo26.getSuppressions();
        java.io.Serializable[] serializableArray51 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList52 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray51);
        boolean boolean53 = serializableList52.isEmpty();
        boolean boolean55 = serializableList52.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream56 = serializableList52.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream57 = serializableList52.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream58 = serializableList52.parallelStream();
        com.google.javascript.rhino.JSDocInfo jSDocInfo59 = new com.google.javascript.rhino.JSDocInfo();
        int int60 = jSDocInfo59.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet61 = jSDocInfo59.getParameterNames();
        boolean boolean62 = serializableList52.contains((java.lang.Object) strSet61);
        java.io.Serializable[] serializableArray79 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList80 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray79);
        boolean boolean81 = serializableList80.isEmpty();
        boolean boolean83 = serializableList80.contains((java.lang.Object) 52);
        int int85 = serializableList80.indexOf((java.lang.Object) (-1L));
        java.util.Iterator<java.io.Serializable> serializableItor86 = serializableList80.iterator();
        java.util.List<java.io.Serializable> serializableList89 = serializableList80.subList((int) (short) 10, 16);
        int int90 = serializableList52.lastIndexOf((java.lang.Object) serializableList89);
        java.util.Iterator<java.io.Serializable> serializableItor91 = serializableList52.iterator();
        boolean boolean92 = strSet34.containsAll((java.util.Collection<java.io.Serializable>) serializableList52);
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList93 = serializableList52.asList();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean94 = serializableList17.addAll(52, (java.util.Collection<java.io.Serializable>) serializableList52);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertNotNull(serializableItor24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNotNull(serializableArray51);
        org.junit.Assert.assertNotNull(serializableList52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(serializableStream56);
        org.junit.Assert.assertNotNull(serializableStream57);
        org.junit.Assert.assertNotNull(serializableStream58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(serializableArray79);
        org.junit.Assert.assertNotNull(serializableList80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertNotNull(serializableItor86);
        org.junit.Assert.assertNotNull(serializableList89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertNotNull(serializableItor91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(serializableList93);
    }

    @Test
    public void test01670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01670");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isContinue();
        boolean boolean19 = node17.isString();
        com.google.javascript.rhino.Node node20 = node4.useSourceInfoFromForTree(node17);
        com.google.javascript.rhino.InputId inputId21 = null;
        node20.setInputId(inputId21);
        java.lang.Object obj24 = node20.getProp((int) (short) 10);
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = node20.getJSDocInfo();
        node20.setVarArgs(true);
        boolean boolean28 = node20.isFor();
        node20.setSourceEncodedPosition(52);
        boolean boolean31 = node20.isCase();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean41 = node40.isQualifiedName();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean46 = node45.isContinue();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType52 = null;
        node50.setJSType(jSType52);
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean58 = node57.isContinue();
        com.google.javascript.rhino.Node node59 = node50.clonePropsFrom(node57);
        node45.addChildrenToBack(node50);
        boolean boolean61 = node45.isLocalResultCall();
        com.google.javascript.rhino.Node node62 = node40.copyInformationFromForTree(node45);
        node45.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node65 = node36.clonePropsFrom(node45);
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(15, node65);
        boolean boolean67 = node66.isGetProp();
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node(43, node20, node66, 47, 4095);
        // The following exception was thrown during execution in test generation
        try {
            node20.setSideEffectFlags(42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertNull(jSDocInfo25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test01671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01671");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream21 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream22 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream23 = serializableList17.parallelStream();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = new com.google.javascript.rhino.JSDocInfo();
        int int25 = jSDocInfo24.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet26 = jSDocInfo24.getParameterNames();
        boolean boolean27 = serializableList17.contains((java.lang.Object) strSet26);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean32 = strSet26.equals((java.lang.Object) (short) 0);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean37 = node36.isLabelName();
        boolean boolean38 = node36.isDec();
        boolean boolean39 = node36.isNoSideEffectsCall();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean40 = strSet26.remove((java.lang.Object) node36);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableStream21);
        org.junit.Assert.assertNotNull(serializableStream22);
        org.junit.Assert.assertNotNull(serializableStream23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test01672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01672");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isQualifiedName();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isContinue();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType15 = null;
        node13.setJSType(jSType15);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean21 = node20.isContinue();
        com.google.javascript.rhino.Node node22 = node13.clonePropsFrom(node20);
        node8.addChildrenToBack(node13);
        boolean boolean24 = node8.isLocalResultCall();
        com.google.javascript.rhino.Node node25 = node3.copyInformationFromForTree(node8);
        node8.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.InputId inputId28 = node8.getInputId();
        node8.setOptionalArg(false);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("hi!", (int) '4', 52);
        boolean boolean35 = node8.isEquivalentTo(node34);
        boolean boolean36 = node8.isRegExp();
        java.lang.String str37 = node8.getQualifiedName();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags39 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        boolean boolean40 = sideEffectFlags39.areAllFlagsSet();
        sideEffectFlags39.setMutatesArguments();
        // The following exception was thrown during execution in test generation
        try {
            node8.setSideEffectFlags(sideEffectFlags39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(inputId28);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test01673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01673");
        java.lang.String[] strArray19 = new java.lang.String[] { "java.io.IOException: TYPEOF 10\n", "(InputId: true)", "STRING true\n", "Named type with empty name component", "InputId: true", "(Not declared as a type name)", "InputId: java.io.IOException: java.io.IOException", "SHNE", "(java.io.IOException: Unknown class name)", "Not declared as a type name", "java.io.IOException: java.io.IOException", "java.io.IOException: NUMBER -1.0 12", "(Unknown class name)", "STRING true\n", "", "NEW", "(java.io.IOException: Unknown class name)", "(Not declared as a type name)", "java.io.IOException: Unknown class name" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        com.google.common.collect.ImmutableList<java.util.AbstractCollection<java.lang.String>> strCollectionList22 = com.google.common.collect.ImmutableList.of((java.util.AbstractCollection<java.lang.String>) strList20);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strCollectionList22);
    }

    @Test
    public void test01674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01674");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("Unknown class name");
        boolean boolean7 = node6.isBreak();
        com.google.javascript.rhino.Node node8 = node3.srcref(node6);
        int int10 = node3.getIntProp(4);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test01675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01675");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream21 = serializableList17.stream();
        java.io.Serializable[] serializableArray38 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList39 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray38);
        boolean boolean40 = serializableList39.isEmpty();
        boolean boolean42 = serializableList39.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream43 = serializableList39.stream();
        boolean boolean44 = serializableList17.containsAll((java.util.Collection<java.io.Serializable>) serializableList39);
        java.util.Iterator<java.io.Serializable> serializableItor45 = serializableList39.iterator();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList46 = serializableList39.asList();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags48 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        sideEffectFlags48.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags51 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        boolean boolean52 = sideEffectFlags51.areAllFlagsSet();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags54 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        boolean boolean55 = sideEffectFlags54.areAllFlagsSet();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags57 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        sideEffectFlags57.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags60 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags62 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        sideEffectFlags62.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags65 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node.SideEffectFlags> sideEffectFlagsList66 = com.google.common.collect.ImmutableList.of(sideEffectFlags48, sideEffectFlags51, sideEffectFlags54, sideEffectFlags57, sideEffectFlags60, sideEffectFlags62, sideEffectFlags65);
        com.google.javascript.rhino.Node.SideEffectFlags[] sideEffectFlagsArray67 = new com.google.javascript.rhino.Node.SideEffectFlags[] { sideEffectFlags65 };
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node.SideEffectFlags> sideEffectFlagsList68 = com.google.common.collect.ImmutableList.of(sideEffectFlagsArray67);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node.SideEffectFlags> sideEffectFlagsList69 = com.google.common.collect.ImmutableList.copyOf(sideEffectFlagsArray67);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node.SideEffectFlags[] sideEffectFlagsArray70 = serializableList46.toArray(sideEffectFlagsArray67);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableStream21);
        org.junit.Assert.assertNotNull(serializableArray38);
        org.junit.Assert.assertNotNull(serializableList39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(serializableStream43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(serializableItor45);
        org.junit.Assert.assertNotNull(serializableList46);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(sideEffectFlagsList66);
        org.junit.Assert.assertNotNull(sideEffectFlagsArray67);
        org.junit.Assert.assertNotNull(sideEffectFlagsList68);
        org.junit.Assert.assertNotNull(sideEffectFlagsList69);
    }

    @Test
    public void test01676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01676");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        boolean boolean22 = serializableList17.contains((java.lang.Object) (byte) 0);
        java.lang.Object[] objArray23 = serializableList17.toArray();
        java.io.Serializable[] serializableArray40 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList41 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray40);
        boolean boolean42 = serializableList41.isEmpty();
        boolean boolean44 = serializableList41.contains((java.lang.Object) 52);
        com.google.common.collect.UnmodifiableListIterator<java.io.Serializable> serializableItor45 = serializableList41.listIterator();
        java.util.Spliterator<java.io.Serializable> serializableSpliterator46 = serializableList41.spliterator();
        java.util.Iterator<java.io.Serializable> serializableItor47 = serializableList41.iterator();
        boolean boolean48 = serializableList17.containsAll((java.util.Collection<java.io.Serializable>) serializableList41);
        java.lang.Throwable[] throwableArray49 = new java.lang.Throwable[] {};
        java.lang.Throwable[] throwableArray50 = new java.lang.Throwable[] {};
        java.lang.Throwable[] throwableArray51 = new java.lang.Throwable[] {};
        java.lang.Throwable[] throwableArray52 = new java.lang.Throwable[] {};
        java.lang.Throwable[] throwableArray53 = new java.lang.Throwable[] {};
        java.lang.Throwable[][] throwableArray54 = new java.lang.Throwable[][] { throwableArray49, throwableArray50, throwableArray51, throwableArray52, throwableArray53 };
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Throwable[][] throwableArray55 = serializableList17.toArray(throwableArray54);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertNotNull(serializableArray40);
        org.junit.Assert.assertNotNull(serializableList41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(serializableItor45);
        org.junit.Assert.assertNotNull(serializableSpliterator46);
        org.junit.Assert.assertNotNull(serializableItor47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(throwableArray49);
        org.junit.Assert.assertNotNull(throwableArray50);
        org.junit.Assert.assertNotNull(throwableArray51);
        org.junit.Assert.assertNotNull(throwableArray52);
        org.junit.Assert.assertNotNull(throwableArray53);
        org.junit.Assert.assertNotNull(throwableArray54);
    }

    @Test
    public void test01677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01677");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.hasFileOverview();
        boolean boolean5 = jSDocInfo0.isJavaDispatch();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getImplementedInterfaces();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        boolean boolean12 = node10.isBlock();
        node10.removeProp(12);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean20 = node19.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType21 = null;
        node19.setJSType(jSType21);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean27 = node26.isContinue();
        com.google.javascript.rhino.Node node28 = node19.clonePropsFrom(node26);
        boolean boolean29 = node28.isQuotedString();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean34 = node33.isLabelName();
        boolean boolean35 = node33.isDec();
        boolean boolean36 = node33.isScript();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(0, node28, node33, node40, 0, (int) (short) 0);
        boolean boolean44 = node28.isTrue();
        com.google.javascript.rhino.Node node45 = node10.useSourceInfoIfMissingFromForTree(node28);
        jSDocInfo0.setAssociatedNode(node45);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType52 = null;
        node50.setJSType(jSType52);
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean58 = node57.isContinue();
        com.google.javascript.rhino.Node node59 = node50.clonePropsFrom(node57);
        node59.setSourceFileForTesting("hi!");
        boolean boolean62 = node59.isIf();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile63 = node59.getStaticSourceFile();
        java.lang.String str64 = staticSourceFile63.getName();
        boolean boolean65 = staticSourceFile63.isExtern();
        node45.setStaticSourceFile(staticSourceFile63);
        boolean boolean67 = node45.isWith();
        boolean boolean68 = node45.isIn();
        node45.setOptionalArg(true);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(staticSourceFile63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "hi!" + "'", str64, "hi!");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test01678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01678");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        boolean boolean6 = node4.isTrue();
        boolean boolean7 = node4.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isQualifiedName();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(32, (int) (byte) 10, (int) '#');
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean27 = node26.isQualifiedName();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean32 = node31.isContinue();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean37 = node36.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType38 = null;
        node36.setJSType(jSType38);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean44 = node43.isContinue();
        com.google.javascript.rhino.Node node45 = node36.clonePropsFrom(node43);
        node31.addChildrenToBack(node36);
        boolean boolean47 = node31.isLocalResultCall();
        com.google.javascript.rhino.Node node48 = node26.copyInformationFromForTree(node31);
        node31.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node51 = node22.clonePropsFrom(node31);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isInstanceOf();
        boolean boolean57 = node55.isComma();
        boolean boolean58 = node22.isEquivalentTo(node55);
        boolean boolean59 = node55.isComma();
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) '#', node18, node55, 42, (int) ' ');
        boolean boolean63 = node62.isComma();
        com.google.javascript.rhino.Node node64 = node62.cloneTree();
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node(16, node12, node62);
        boolean boolean66 = node65.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node67 = node65.getLastSibling();
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean72 = node71.isContinue();
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean77 = node76.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType78 = null;
        node76.setJSType(jSType78);
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean84 = node83.isContinue();
        com.google.javascript.rhino.Node node85 = node76.clonePropsFrom(node83);
        node71.addChildrenToBack(node76);
        boolean boolean87 = node71.isLocalResultCall();
        int int88 = node71.getLength();
        com.google.javascript.rhino.Node node89 = node71.getFirstChild();
        com.google.javascript.rhino.Node node92 = new com.google.javascript.rhino.Node(35, node4, node67, node71, 4, 31);
        boolean boolean93 = node71.isScript();
        com.google.javascript.rhino.Node node94 = node71.getLastSibling();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(node94);
    }

    @Test
    public void test01679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01679");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isContinue();
        boolean boolean18 = node16.isString();
        com.google.javascript.rhino.Node node19 = node3.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.InputId inputId20 = null;
        node19.setInputId(inputId20);
        java.lang.Object obj23 = node19.getProp((int) (short) 10);
        boolean boolean24 = node19.hasMoreThanOneChild();
        boolean boolean25 = node19.isOr();
        boolean boolean26 = node19.isVarArgs();
        com.google.javascript.rhino.jstype.JSType jSType27 = null;
        node19.setJSType(jSType27);
        boolean boolean29 = node19.isWhile();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test01680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01680");
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isQualifiedName();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean16 = node15.isContinue();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean21 = node20.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType22 = null;
        node20.setJSType(jSType22);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isContinue();
        com.google.javascript.rhino.Node node29 = node20.clonePropsFrom(node27);
        node15.addChildrenToBack(node20);
        boolean boolean31 = node15.isLocalResultCall();
        com.google.javascript.rhino.Node node32 = node10.copyInformationFromForTree(node15);
        node15.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node35 = node6.clonePropsFrom(node15);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isLabelName();
        boolean boolean41 = node39.isTrue();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean46 = node45.isContinue();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType52 = null;
        node50.setJSType(jSType52);
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean58 = node57.isContinue();
        com.google.javascript.rhino.Node node59 = node50.clonePropsFrom(node57);
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (byte) 0, node15, node39, node45, node59, 10, (int) (byte) -1);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) -1, node62);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean68 = node67.isContinue();
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean73 = node72.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType74 = null;
        node72.setJSType(jSType74);
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean80 = node79.isContinue();
        com.google.javascript.rhino.Node node81 = node72.clonePropsFrom(node79);
        node67.addChildrenToBack(node72);
        boolean boolean83 = node67.isLocalResultCall();
        int int84 = node67.getLength();
        com.google.javascript.rhino.Node node85 = node67.getFirstChild();
        int int86 = node63.getIndexOfChild(node67);
        com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node(41, node67);
        boolean boolean88 = node87.isWith();
        boolean boolean89 = node87.isInc();
        node87.addSuppression("java.io.IOException: JSDocInfo");
        boolean boolean92 = node87.hasChildren();
        node87.detachChildren();
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
    }

    @Test
    public void test01681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01681");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream21 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream22 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream23 = serializableList17.parallelStream();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = new com.google.javascript.rhino.JSDocInfo();
        int int25 = jSDocInfo24.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet26 = jSDocInfo24.getParameterNames();
        boolean boolean27 = serializableList17.contains((java.lang.Object) strSet26);
        java.util.Spliterator<java.io.Serializable> serializableSpliterator28 = serializableList17.spliterator();
        java.util.Iterator<java.io.Serializable> serializableItor29 = serializableList17.iterator();
        java.io.Serializable[] serializableArray46 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList47 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray46);
        boolean boolean48 = serializableList47.isEmpty();
        boolean boolean50 = serializableList47.contains((java.lang.Object) 52);
        boolean boolean52 = serializableList47.contains((java.lang.Object) (byte) 0);
        boolean boolean53 = serializableList17.containsAll((java.util.Collection<java.io.Serializable>) serializableList47);
        int int54 = serializableList47.size();
        java.util.ListIterator<java.io.Serializable> serializableItor55 = serializableList47.listIterator();
        int int56 = serializableList47.size();
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<java.io.Serializable> serializableItor58 = serializableList47.listIterator((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: index (-1) must not be negative");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableStream21);
        org.junit.Assert.assertNotNull(serializableStream22);
        org.junit.Assert.assertNotNull(serializableStream23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(serializableSpliterator28);
        org.junit.Assert.assertNotNull(serializableItor29);
        org.junit.Assert.assertNotNull(serializableArray46);
        org.junit.Assert.assertNotNull(serializableList47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 16 + "'", int54 == 16);
        org.junit.Assert.assertNotNull(serializableItor55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 16 + "'", int56 == 16);
    }

    @Test
    public void test01682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01682");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker1 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = marker1.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker3 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition4 = marker3.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker5 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = marker5.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker7 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker8 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker9 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker10 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker11 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker12 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList13 = com.google.common.collect.ImmutableList.of(marker0, marker1, marker3, marker5, marker7, marker8, marker9, marker10, marker11, marker12);
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition14 = marker0.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition15 = marker0.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition16 = marker0.getNameNode();
        org.junit.Assert.assertNull(stringPosition2);
        org.junit.Assert.assertNull(stringPosition4);
        org.junit.Assert.assertNull(stringPosition6);
        org.junit.Assert.assertNotNull(markerList13);
        org.junit.Assert.assertNull(nodeSourcePosition14);
        org.junit.Assert.assertNull(nodeSourcePosition15);
        org.junit.Assert.assertNull(nodeSourcePosition16);
    }

    @Test
    public void test01683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01683");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.hasReturnType();
        boolean boolean5 = jSDocInfo0.isDefine();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getReturnType();
        boolean boolean7 = jSDocInfo0.hasEnumParameterType();
        boolean boolean8 = jSDocInfo0.isConsistentIdGenerator();
        boolean boolean9 = jSDocInfo0.hasEnumParameterType();
        boolean boolean10 = jSDocInfo0.isDeprecated();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test01684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01684");
        java.lang.String[] strArray3 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        java.lang.Object[] objArray6 = strSet4.toArray();
        java.io.Serializable[] serializableArray23 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList24 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray23);
        boolean boolean25 = serializableList24.isEmpty();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean30 = node29.isQualifiedName();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean35 = node34.isContinue();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType41 = null;
        node39.setJSType(jSType41);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isContinue();
        com.google.javascript.rhino.Node node48 = node39.clonePropsFrom(node46);
        node34.addChildrenToBack(node39);
        boolean boolean50 = node34.isLocalResultCall();
        com.google.javascript.rhino.Node node51 = node29.copyInformationFromForTree(node34);
        boolean boolean52 = serializableList24.contains((java.lang.Object) node34);
        java.util.Iterator<java.io.Serializable> serializableItor53 = serializableList24.iterator();
        boolean boolean54 = strSet4.containsAll((java.util.Collection<java.io.Serializable>) serializableList24);
        java.lang.Object[] objArray55 = serializableList24.toArray();
        boolean boolean56 = serializableList24.isEmpty();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList57 = serializableList24.reverse();
        java.util.Iterator<java.io.Serializable> serializableItor58 = serializableList24.iterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo59 = new com.google.javascript.rhino.JSDocInfo();
        int int60 = jSDocInfo59.getImplementedInterfaceCount();
        boolean boolean61 = jSDocInfo59.hasType();
        java.lang.String str62 = jSDocInfo59.getSourceName();
        boolean boolean63 = jSDocInfo59.isDefine();
        java.util.Set<java.lang.String> strSet64 = jSDocInfo59.getModifies();
        boolean boolean65 = serializableList24.contains((java.lang.Object) strSet64);
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList66 = serializableList24.reverse();
        boolean boolean67 = serializableList66.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable serializable69 = serializableList66.remove((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(serializableArray23);
        org.junit.Assert.assertNotNull(serializableList24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(serializableItor53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(serializableList57);
        org.junit.Assert.assertNotNull(serializableItor58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(serializableList66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test01685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01685");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue0 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue1 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue2 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue3 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList4 = com.google.common.collect.ImmutableList.of(ternaryValue0, ternaryValue1, ternaryValue2, ternaryValue3);
        java.lang.String str5 = ternaryValue2.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue6 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue7 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue8 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue9 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList10 = com.google.common.collect.ImmutableList.of(ternaryValue6, ternaryValue7, ternaryValue8, ternaryValue9);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue11 = ternaryValue2.or(ternaryValue7);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue12 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue13 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue14 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue15 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList16 = com.google.common.collect.ImmutableList.of(ternaryValue12, ternaryValue13, ternaryValue14, ternaryValue15);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue17 = ternaryValue7.xor(ternaryValue12);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue18 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue19 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue20 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue21 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList22 = com.google.common.collect.ImmutableList.of(ternaryValue18, ternaryValue19, ternaryValue20, ternaryValue21);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue23 = ternaryValue12.xor(ternaryValue19);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue24 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue26 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue27 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList28 = com.google.common.collect.ImmutableList.of(ternaryValue24, ternaryValue25, ternaryValue26, ternaryValue27);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue29 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue30 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue31 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue32 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList33 = com.google.common.collect.ImmutableList.of(ternaryValue29, ternaryValue30, ternaryValue31, ternaryValue32);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue34 = ternaryValue25.xor(ternaryValue31);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue35 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue36 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue37 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue38 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList39 = com.google.common.collect.ImmutableList.of(ternaryValue35, ternaryValue36, ternaryValue37, ternaryValue38);
        java.lang.String str40 = ternaryValue37.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue41 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue42 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue43 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue44 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList45 = com.google.common.collect.ImmutableList.of(ternaryValue41, ternaryValue42, ternaryValue43, ternaryValue44);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue46 = ternaryValue37.or(ternaryValue42);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue47 = ternaryValue46.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue48 = ternaryValue25.and(ternaryValue47);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder49 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>>();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumList50 = ternaryValueEnumBuilder49.build();
        com.google.javascript.rhino.jstype.TernaryValue[] ternaryValueArray51 = new com.google.javascript.rhino.jstype.TernaryValue[] {};
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder52 = ternaryValueEnumBuilder49.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>[]) ternaryValueArray51);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue53 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue54 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue55 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue56 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList57 = com.google.common.collect.ImmutableList.of(ternaryValue53, ternaryValue54, ternaryValue55, ternaryValue56);
        java.lang.String str58 = ternaryValue55.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue59 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue60 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue61 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue62 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList63 = com.google.common.collect.ImmutableList.of(ternaryValue59, ternaryValue60, ternaryValue61, ternaryValue62);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue64 = ternaryValue55.or(ternaryValue60);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue65 = ternaryValue64.not();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder66 = ternaryValueEnumBuilder49.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>) ternaryValue65);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue67 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder68 = ternaryValueEnumBuilder66.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>) ternaryValue67);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue69 = ternaryValue47.xor(ternaryValue67);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue70 = ternaryValue47.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue71 = ternaryValue19.xor(ternaryValue47);
        java.lang.String str72 = ternaryValue47.toString();
        org.junit.Assert.assertNotNull(ternaryValue0);
        org.junit.Assert.assertNotNull(ternaryValue1);
        org.junit.Assert.assertNotNull(ternaryValue2);
        org.junit.Assert.assertNotNull(ternaryValue3);
        org.junit.Assert.assertNotNull(ternaryValueList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "true" + "'", str5, "true");
        org.junit.Assert.assertNotNull(ternaryValue6);
        org.junit.Assert.assertNotNull(ternaryValue7);
        org.junit.Assert.assertNotNull(ternaryValue8);
        org.junit.Assert.assertNotNull(ternaryValue9);
        org.junit.Assert.assertNotNull(ternaryValueList10);
        org.junit.Assert.assertNotNull(ternaryValue11);
        org.junit.Assert.assertNotNull(ternaryValue12);
        org.junit.Assert.assertNotNull(ternaryValue13);
        org.junit.Assert.assertNotNull(ternaryValue14);
        org.junit.Assert.assertNotNull(ternaryValue15);
        org.junit.Assert.assertNotNull(ternaryValueList16);
        org.junit.Assert.assertNotNull(ternaryValue17);
        org.junit.Assert.assertNotNull(ternaryValue18);
        org.junit.Assert.assertNotNull(ternaryValue19);
        org.junit.Assert.assertNotNull(ternaryValue20);
        org.junit.Assert.assertNotNull(ternaryValue21);
        org.junit.Assert.assertNotNull(ternaryValueList22);
        org.junit.Assert.assertNotNull(ternaryValue23);
        org.junit.Assert.assertNotNull(ternaryValue24);
        org.junit.Assert.assertNotNull(ternaryValue25);
        org.junit.Assert.assertNotNull(ternaryValue26);
        org.junit.Assert.assertNotNull(ternaryValue27);
        org.junit.Assert.assertNotNull(ternaryValueList28);
        org.junit.Assert.assertNotNull(ternaryValue29);
        org.junit.Assert.assertNotNull(ternaryValue30);
        org.junit.Assert.assertNotNull(ternaryValue31);
        org.junit.Assert.assertNotNull(ternaryValue32);
        org.junit.Assert.assertNotNull(ternaryValueList33);
        org.junit.Assert.assertNotNull(ternaryValue34);
        org.junit.Assert.assertNotNull(ternaryValue35);
        org.junit.Assert.assertNotNull(ternaryValue36);
        org.junit.Assert.assertNotNull(ternaryValue37);
        org.junit.Assert.assertNotNull(ternaryValue38);
        org.junit.Assert.assertNotNull(ternaryValueList39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "true" + "'", str40, "true");
        org.junit.Assert.assertNotNull(ternaryValue41);
        org.junit.Assert.assertNotNull(ternaryValue42);
        org.junit.Assert.assertNotNull(ternaryValue43);
        org.junit.Assert.assertNotNull(ternaryValue44);
        org.junit.Assert.assertNotNull(ternaryValueList45);
        org.junit.Assert.assertNotNull(ternaryValue46);
        org.junit.Assert.assertNotNull(ternaryValue47);
        org.junit.Assert.assertNotNull(ternaryValue48);
        org.junit.Assert.assertNotNull(ternaryValueEnumList50);
        org.junit.Assert.assertNotNull(ternaryValueArray51);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder52);
        org.junit.Assert.assertNotNull(ternaryValue53);
        org.junit.Assert.assertNotNull(ternaryValue54);
        org.junit.Assert.assertNotNull(ternaryValue55);
        org.junit.Assert.assertNotNull(ternaryValue56);
        org.junit.Assert.assertNotNull(ternaryValueList57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "true" + "'", str58, "true");
        org.junit.Assert.assertNotNull(ternaryValue59);
        org.junit.Assert.assertNotNull(ternaryValue60);
        org.junit.Assert.assertNotNull(ternaryValue61);
        org.junit.Assert.assertNotNull(ternaryValue62);
        org.junit.Assert.assertNotNull(ternaryValueList63);
        org.junit.Assert.assertNotNull(ternaryValue64);
        org.junit.Assert.assertNotNull(ternaryValue65);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder66);
        org.junit.Assert.assertNotNull(ternaryValue67);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder68);
        org.junit.Assert.assertNotNull(ternaryValue69);
        org.junit.Assert.assertNotNull(ternaryValue70);
        org.junit.Assert.assertNotNull(ternaryValue71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "false" + "'", str72, "false");
    }

    @Test
    public void test01686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01686");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isQualifiedName();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isContinue();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node18.setJSType(jSType20);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isContinue();
        com.google.javascript.rhino.Node node27 = node18.clonePropsFrom(node25);
        node13.addChildrenToBack(node18);
        boolean boolean29 = node13.isLocalResultCall();
        com.google.javascript.rhino.Node node30 = node8.copyInformationFromForTree(node13);
        node13.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node33 = node4.clonePropsFrom(node13);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean38 = node37.isLabelName();
        boolean boolean39 = node37.isTrue();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean44 = node43.isContinue();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean49 = node48.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        node48.setJSType(jSType50);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node57 = node48.clonePropsFrom(node55);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (byte) 0, node13, node37, node43, node57, 10, (int) (byte) -1);
        boolean boolean61 = node13.isIf();
        int int62 = node13.getType();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean67 = node66.isQualifiedName();
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean72 = node71.isContinue();
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean77 = node76.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType78 = null;
        node76.setJSType(jSType78);
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean84 = node83.isContinue();
        com.google.javascript.rhino.Node node85 = node76.clonePropsFrom(node83);
        node71.addChildrenToBack(node76);
        boolean boolean87 = node71.isLocalResultCall();
        com.google.javascript.rhino.Node node88 = node66.copyInformationFromForTree(node71);
        boolean boolean89 = node13.hasChild(node88);
        boolean boolean90 = node88.isLabelName();
        boolean boolean91 = node88.isHook();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test01687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01687");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isQualifiedName();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isContinue();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        node32.setJSType(jSType34);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isContinue();
        com.google.javascript.rhino.Node node41 = node32.clonePropsFrom(node39);
        node27.addChildrenToBack(node32);
        boolean boolean43 = node27.isLocalResultCall();
        com.google.javascript.rhino.Node node44 = node22.copyInformationFromForTree(node27);
        boolean boolean45 = serializableList17.contains((java.lang.Object) node27);
        java.io.Serializable[] serializableArray62 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList63 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray62);
        boolean boolean64 = serializableList17.containsAll((java.util.Collection<java.io.Serializable>) serializableList63);
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList65 = serializableList63.reverse();
        com.google.javascript.rhino.JSDocInfo jSDocInfo66 = new com.google.javascript.rhino.JSDocInfo();
        int int67 = jSDocInfo66.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility68 = null;
        jSDocInfo66.setVisibility(visibility68);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression70 = jSDocInfo66.getEnumParameterType();
        java.lang.String str71 = jSDocInfo66.getReturnDescription();
        boolean boolean72 = jSDocInfo66.hasEnumParameterType();
        boolean boolean73 = serializableList65.contains((java.lang.Object) jSDocInfo66);
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList74 = jSDocInfo66.getExtendedInterfaces();
        com.google.javascript.rhino.Node node75 = jSDocInfo66.getAssociatedNode();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(serializableArray62);
        org.junit.Assert.assertNotNull(serializableList63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(serializableList65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNull(jSTypeExpression70);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList74);
        org.junit.Assert.assertNull(node75);
    }

    @Test
    public void test01688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01688");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        boolean boolean13 = node12.isQuotedString();
        int int14 = node12.getCharno();
        boolean boolean15 = node12.isDec();
        int int16 = node12.getSourceOffset();
        boolean boolean17 = node12.isExprResult();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test01689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01689");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        boolean boolean5 = node3.isDec();
        boolean boolean6 = node3.isScript();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isLabelName();
        boolean boolean12 = node10.isDec();
        boolean boolean13 = node10.isNoSideEffectsCall();
        boolean boolean14 = node10.isLocalResultCall();
        node3.addChildrenToBack(node10);
        int int16 = node10.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable17 = node10.children();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator18 = nodeIterable17.spliterator();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(nodeIterable17);
        org.junit.Assert.assertNotNull(nodeSpliterator18);
    }

    @Test
    public void test01690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01690");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        boolean boolean14 = node4.isVar();
        boolean boolean15 = node4.isCase();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("Named type with empty name component");
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(10, node4, node17);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isQualifiedName();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isContinue();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        node32.setJSType(jSType34);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isContinue();
        com.google.javascript.rhino.Node node41 = node32.clonePropsFrom(node39);
        node27.addChildrenToBack(node32);
        boolean boolean43 = node27.isLocalResultCall();
        com.google.javascript.rhino.Node node44 = node22.copyInformationFromForTree(node27);
        node27.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.InputId inputId47 = node27.getInputId();
        node27.setOptionalArg(false);
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newString("hi!", (int) '4', 52);
        boolean boolean54 = node27.isEquivalentTo(node53);
        boolean boolean55 = node27.isRegExp();
        node4.addChildToBack(node27);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable57 = node27.getAncestors();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNull(inputId47);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(ancestorIterable57);
    }

    @Test
    public void test01691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01691");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(44);
    }

    @Test
    public void test01692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01692");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        boolean boolean6 = node4.isDec();
        boolean boolean7 = node4.isScript();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isLabelName();
        boolean boolean13 = node11.isDec();
        boolean boolean14 = node11.isNoSideEffectsCall();
        boolean boolean15 = node11.isLocalResultCall();
        node4.addChildrenToBack(node11);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean21 = node20.isQualifiedName();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isContinue();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean31 = node30.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType32 = null;
        node30.setJSType(jSType32);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean38 = node37.isContinue();
        com.google.javascript.rhino.Node node39 = node30.clonePropsFrom(node37);
        node25.addChildrenToBack(node30);
        boolean boolean41 = node25.isLocalResultCall();
        com.google.javascript.rhino.Node node42 = node20.copyInformationFromForTree(node25);
        node25.setSourceEncodedPosition((int) (short) -1);
        boolean boolean45 = node25.isName();
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean50 = node49.isLabelName();
        boolean boolean51 = node49.isDec();
        boolean boolean52 = node49.isNoSideEffectsCall();
        boolean boolean53 = node49.isIf();
        com.google.javascript.rhino.Node node54 = node49.getLastSibling();
        com.google.javascript.rhino.Node node55 = node25.srcref(node49);
        com.google.javascript.rhino.Node node56 = node4.useSourceInfoIfMissingFromForTree(node49);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean61 = node60.isLabelName();
        boolean boolean62 = node60.isDec();
        boolean boolean63 = node60.isNoSideEffectsCall();
        boolean boolean64 = node60.isIf();
        boolean boolean65 = node60.wasEmptyNode();
        node60.setOptionalArg(true);
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node(2, node49, node60, (int) (byte) 1, 9);
        com.google.javascript.rhino.Node node75 = com.google.javascript.rhino.Node.newString(40, "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]", (int) (short) 0, 2);
        boolean boolean76 = node75.isFunction();
        boolean boolean77 = node75.isLabel();
        node49.addChildToFront(node75);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test01693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01693");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        boolean boolean5 = node3.isDec();
        boolean boolean6 = node3.isScript();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isLabelName();
        boolean boolean12 = node10.isDec();
        boolean boolean13 = node10.isNoSideEffectsCall();
        boolean boolean14 = node10.isLocalResultCall();
        node3.addChildrenToBack(node10);
        int int16 = node10.getChildCount();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable17 = node10.children();
        boolean boolean18 = node10.isNE();
        boolean boolean19 = node10.isSyntheticBlock();
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean24 = node23.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType25 = null;
        node23.setJSType(jSType25);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean31 = node30.isContinue();
        com.google.javascript.rhino.Node node32 = node23.clonePropsFrom(node30);
        node32.setSourceFileForTesting("hi!");
        boolean boolean35 = node32.isIf();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile36 = node32.getStaticSourceFile();
        int int38 = staticSourceFile36.getColumnOfOffset((int) (byte) 100);
        int int40 = staticSourceFile36.getLineOfOffset((int) (short) -1);
        node10.setStaticSourceFile(staticSourceFile36);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(nodeIterable17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(staticSourceFile36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
    }

    @Test
    public void test01694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01694");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isContinue();
        boolean boolean18 = node16.isString();
        com.google.javascript.rhino.Node node19 = node3.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean25 = node24.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType26 = null;
        node24.setJSType(jSType26);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean32 = node31.isContinue();
        com.google.javascript.rhino.Node node33 = node24.clonePropsFrom(node31);
        boolean boolean34 = node33.isQuotedString();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean39 = node38.isLabelName();
        boolean boolean40 = node38.isDec();
        boolean boolean41 = node38.isScript();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(0, node33, node38, node45, 0, (int) (short) 0);
        node33.setType(46);
        boolean boolean51 = node33.isString();
        boolean boolean52 = node33.isAnd();
        com.google.javascript.rhino.Node node53 = node3.srcrefTree(node33);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder54 = node3.new FileLevelJsDocBuilder();
        boolean boolean55 = node3.isExprResult();
        boolean boolean56 = node3.isInstanceOf();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test01695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01695");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getParameterType("true");
        boolean boolean6 = jSDocInfo0.hasThisType();
        boolean boolean7 = jSDocInfo0.isOverride();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList8 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str9 = jSDocInfo0.getDescription();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test01696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01696");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream21 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream22 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream23 = serializableList17.parallelStream();
        java.util.Spliterator<java.io.Serializable> serializableSpliterator24 = serializableList17.spliterator();
        com.google.javascript.rhino.InputId inputId27 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId29 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId31 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId33 = new com.google.javascript.rhino.InputId("true");
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.InputId> inputIdList34 = com.google.common.collect.ImmutableList.of(inputId27, inputId29, inputId31, inputId33);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean39 = node38.isQualifiedName();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean44 = node43.isContinue();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean49 = node48.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        node48.setJSType(jSType50);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node57 = node48.clonePropsFrom(node55);
        node43.addChildrenToBack(node48);
        boolean boolean59 = node43.isLocalResultCall();
        com.google.javascript.rhino.Node node60 = node38.copyInformationFromForTree(node43);
        boolean boolean61 = node38.isObjectLit();
        boolean boolean62 = inputId33.equals((java.lang.Object) node38);
        java.lang.String str63 = inputId33.toString();
        // The following exception was thrown during execution in test generation
        try {
            serializableList17.add(44, (java.io.Serializable) str63);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableStream21);
        org.junit.Assert.assertNotNull(serializableStream22);
        org.junit.Assert.assertNotNull(serializableStream23);
        org.junit.Assert.assertNotNull(serializableSpliterator24);
        org.junit.Assert.assertNotNull(inputIdList34);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "InputId: true" + "'", str63, "InputId: true");
    }

    @Test
    public void test01697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01697");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection2 = jSDocInfo0.getTypeNodes();
        java.lang.String str3 = jSDocInfo0.getDescription();
        boolean boolean4 = jSDocInfo0.hasModifies();
        boolean boolean5 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getEnumParameterType();
        boolean boolean7 = jSDocInfo0.isDeprecated();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(nodeCollection2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test01698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01698");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker1 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = marker1.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker3 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition4 = marker3.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker5 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = marker5.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker7 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker8 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker9 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker10 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker11 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker12 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList13 = com.google.common.collect.ImmutableList.of(marker0, marker1, marker3, marker5, marker7, marker8, marker9, marker10, marker11, marker12);
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition14 = marker9.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition15 = marker9.getName();
        com.google.javascript.rhino.JSDocInfo.Marker marker16 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition17 = marker16.getNameNode();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition18 = marker16.getType();
        com.google.javascript.rhino.JSDocInfo.Marker marker19 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition20 = marker19.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition21 = marker19.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker22 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker23 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition24 = marker23.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker25 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition26 = marker25.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker27 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition28 = marker27.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker29 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker30 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker31 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker32 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker33 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker34 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList35 = com.google.common.collect.ImmutableList.of(marker22, marker23, marker25, marker27, marker29, marker30, marker31, marker32, marker33, marker34);
        com.google.javascript.rhino.JSDocInfo.Marker marker36 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition37 = marker36.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition38 = marker36.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker39 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker40 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition41 = marker40.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker42 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition43 = marker42.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker44 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition45 = marker44.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker46 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker47 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker48 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker49 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker50 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker51 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList52 = com.google.common.collect.ImmutableList.of(marker39, marker40, marker42, marker44, marker46, marker47, marker48, marker49, marker50, marker51);
        com.google.javascript.rhino.JSDocInfo.Marker marker53 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker54 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition55 = marker54.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker56 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition57 = marker56.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker58 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition59 = marker58.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker60 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker61 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker62 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker63 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker64 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker65 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList66 = com.google.common.collect.ImmutableList.of(marker53, marker54, marker56, marker58, marker60, marker61, marker62, marker63, marker64, marker65);
        com.google.javascript.rhino.JSDocInfo.Marker marker67 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker68 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition69 = marker68.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker70 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition71 = marker70.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker72 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition73 = marker72.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker74 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker75 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker76 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker77 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker78 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker79 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList80 = com.google.common.collect.ImmutableList.of(marker67, marker68, marker70, marker72, marker74, marker75, marker76, marker77, marker78, marker79);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition81 = marker78.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.Marker marker82 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker83 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition84 = marker83.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker85 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition86 = marker85.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker87 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition88 = marker87.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker89 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker90 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker91 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker92 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker93 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker94 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList95 = com.google.common.collect.ImmutableList.of(marker82, marker83, marker85, marker87, marker89, marker90, marker91, marker92, marker93, marker94);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList96 = com.google.common.collect.ImmutableList.of(marker9, marker16, marker19, marker25, marker36, marker44, marker56, marker78, marker89);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition97 = marker44.getAnnotation();
        org.junit.Assert.assertNull(stringPosition2);
        org.junit.Assert.assertNull(stringPosition4);
        org.junit.Assert.assertNull(stringPosition6);
        org.junit.Assert.assertNotNull(markerList13);
        org.junit.Assert.assertNull(nodeSourcePosition14);
        org.junit.Assert.assertNull(stringPosition15);
        org.junit.Assert.assertNull(nodeSourcePosition17);
        org.junit.Assert.assertNull(typePosition18);
        org.junit.Assert.assertNull(stringPosition20);
        org.junit.Assert.assertNull(stringPosition21);
        org.junit.Assert.assertNull(stringPosition24);
        org.junit.Assert.assertNull(stringPosition26);
        org.junit.Assert.assertNull(stringPosition28);
        org.junit.Assert.assertNotNull(markerList35);
        org.junit.Assert.assertNull(stringPosition37);
        org.junit.Assert.assertNull(stringPosition38);
        org.junit.Assert.assertNull(stringPosition41);
        org.junit.Assert.assertNull(stringPosition43);
        org.junit.Assert.assertNull(stringPosition45);
        org.junit.Assert.assertNotNull(markerList52);
        org.junit.Assert.assertNull(stringPosition55);
        org.junit.Assert.assertNull(stringPosition57);
        org.junit.Assert.assertNull(stringPosition59);
        org.junit.Assert.assertNotNull(markerList66);
        org.junit.Assert.assertNull(stringPosition69);
        org.junit.Assert.assertNull(stringPosition71);
        org.junit.Assert.assertNull(stringPosition73);
        org.junit.Assert.assertNotNull(markerList80);
        org.junit.Assert.assertNull(stringPosition81);
        org.junit.Assert.assertNull(stringPosition84);
        org.junit.Assert.assertNull(stringPosition86);
        org.junit.Assert.assertNull(stringPosition88);
        org.junit.Assert.assertNotNull(markerList95);
        org.junit.Assert.assertNotNull(markerList96);
        org.junit.Assert.assertNull(stringPosition97);
    }

    @Test
    public void test01699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01699");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((-1));
        sideEffectFlags1.setMutatesGlobalState();
        sideEffectFlags1.setReturnsTainted();
        sideEffectFlags1.setMutatesGlobalState();
    }

    @Test
    public void test01700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01700");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isQualifiedName();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isContinue();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType15 = null;
        node13.setJSType(jSType15);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean21 = node20.isContinue();
        com.google.javascript.rhino.Node node22 = node13.clonePropsFrom(node20);
        node8.addChildrenToBack(node13);
        boolean boolean24 = node8.isLocalResultCall();
        com.google.javascript.rhino.Node node25 = node3.copyInformationFromForTree(node8);
        boolean boolean26 = node8.isParamList();
        boolean boolean27 = node8.isQualifiedName();
        com.google.javascript.rhino.Node node28 = node8.getNext();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str29 = node28.toStringTree();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(node28);
    }

    @Test
    public void test01701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01701");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("[30, 100.0, -1, 0.0, 100, 1.0, 1, 0, a, 0, 0.0, 1.0, hi!, 100, 10.0, 0.0]", 39, (int) (short) 10);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test01702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01702");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        boolean boolean14 = node13.isQuotedString();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        boolean boolean20 = node18.isDec();
        boolean boolean21 = node18.isScript();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(0, node13, node18, node25, 0, (int) (short) 0);
        boolean boolean29 = node25.isLabel();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("Unknown class name");
        boolean boolean32 = node31.isBreak();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean37 = node36.isContinue();
        boolean boolean38 = node36.isBlock();
        node36.removeProp(12);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean46 = node45.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType47 = null;
        node45.setJSType(jSType47);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean53 = node52.isContinue();
        com.google.javascript.rhino.Node node54 = node45.clonePropsFrom(node52);
        boolean boolean55 = node54.isQuotedString();
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean60 = node59.isLabelName();
        boolean boolean61 = node59.isDec();
        boolean boolean62 = node59.isScript();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(0, node54, node59, node66, 0, (int) (short) 0);
        boolean boolean70 = node54.isTrue();
        com.google.javascript.rhino.Node node71 = node36.useSourceInfoIfMissingFromForTree(node54);
        int int72 = node54.getSourcePosition();
        com.google.javascript.rhino.Node node73 = node31.srcref(node54);
        com.google.javascript.rhino.Node node74 = node25.clonePropsFrom(node73);
        boolean boolean75 = node25.isFalse();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test01703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01703");
        com.google.javascript.rhino.Node node1 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node(53, node1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01704");
        com.google.javascript.rhino.Node[] nodeArray5 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node(51, nodeArray5, 48, 32);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(42, nodeArray5, 32, 12);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(36, nodeArray5);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node(41, nodeArray5, 0, 53);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(39, nodeArray5);
        node16.setOptionalArg(true);
        boolean boolean19 = node16.isHook();
        boolean boolean20 = node16.isNE();
        org.junit.Assert.assertNotNull(nodeArray5);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test01705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01705");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isQualifiedName();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isContinue();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        node32.setJSType(jSType34);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isContinue();
        com.google.javascript.rhino.Node node41 = node32.clonePropsFrom(node39);
        node27.addChildrenToBack(node32);
        boolean boolean43 = node27.isLocalResultCall();
        com.google.javascript.rhino.Node node44 = node22.copyInformationFromForTree(node27);
        boolean boolean45 = serializableList17.contains((java.lang.Object) node27);
        boolean boolean46 = serializableList17.isEmpty();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType52 = null;
        node50.setJSType(jSType52);
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean58 = node57.isContinue();
        com.google.javascript.rhino.Node node59 = node50.clonePropsFrom(node57);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean64 = node63.isContinue();
        boolean boolean65 = node63.isString();
        com.google.javascript.rhino.Node node66 = node50.useSourceInfoFromForTree(node63);
        boolean boolean67 = serializableList17.contains((java.lang.Object) node63);
        boolean boolean68 = node63.isGetterDef();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test01706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01706");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isContinue();
        boolean boolean5 = node3.isTry();
        boolean boolean6 = node3.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node7 = null;
        // The following exception was thrown during execution in test generation
        try {
            node3.removeChild(node7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test01707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01707");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        boolean boolean5 = node3.isTrue();
        boolean boolean6 = node3.isNoSideEffectsCall();
        boolean boolean7 = node3.isCase();
        boolean boolean8 = node3.isVar();
        int int9 = node3.getSourcePosition();
        boolean boolean10 = node3.isAnd();
        boolean boolean11 = node3.isOnlyModifiesThisCall();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test01708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01708");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isQualifiedName();
        boolean boolean5 = node3.isHook();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = new com.google.javascript.rhino.JSTypeExpression(node3, "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        boolean boolean8 = jSTypeExpression7.isVarArgs();
        com.google.javascript.rhino.Node node9 = jSTypeExpression7.getRoot();
        java.io.Serializable[] serializableArray26 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList27 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray26);
        boolean boolean28 = serializableList27.isEmpty();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isQualifiedName();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean38 = node37.isContinue();
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean43 = node42.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType44 = null;
        node42.setJSType(jSType44);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean50 = node49.isContinue();
        com.google.javascript.rhino.Node node51 = node42.clonePropsFrom(node49);
        node37.addChildrenToBack(node42);
        boolean boolean53 = node37.isLocalResultCall();
        com.google.javascript.rhino.Node node54 = node32.copyInformationFromForTree(node37);
        boolean boolean55 = serializableList27.contains((java.lang.Object) node37);
        boolean boolean56 = serializableList27.isEmpty();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean61 = node60.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType62 = null;
        node60.setJSType(jSType62);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean68 = node67.isContinue();
        com.google.javascript.rhino.Node node69 = node60.clonePropsFrom(node67);
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean74 = node73.isContinue();
        boolean boolean75 = node73.isString();
        com.google.javascript.rhino.Node node76 = node60.useSourceInfoFromForTree(node73);
        boolean boolean77 = serializableList27.contains((java.lang.Object) node73);
        boolean boolean78 = jSTypeExpression7.equals((java.lang.Object) serializableList27);
        java.util.Collection<java.io.Serializable> serializableCollection79 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean80 = serializableList27.addAll(serializableCollection79);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertNotNull(serializableArray26);
        org.junit.Assert.assertNotNull(serializableList27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test01709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01709");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream21 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream22 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream23 = serializableList17.parallelStream();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = new com.google.javascript.rhino.JSDocInfo();
        int int25 = jSDocInfo24.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet26 = jSDocInfo24.getParameterNames();
        boolean boolean27 = serializableList17.contains((java.lang.Object) strSet26);
        java.util.Spliterator<java.io.Serializable> serializableSpliterator28 = serializableList17.spliterator();
        java.util.Iterator<java.io.Serializable> serializableItor29 = serializableList17.iterator();
        java.io.Serializable[] serializableArray46 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList47 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray46);
        boolean boolean48 = serializableList47.isEmpty();
        boolean boolean50 = serializableList47.contains((java.lang.Object) 52);
        boolean boolean52 = serializableList47.contains((java.lang.Object) (byte) 0);
        boolean boolean53 = serializableList17.containsAll((java.util.Collection<java.io.Serializable>) serializableList47);
        int int54 = serializableList47.size();
        java.io.Serializable[] serializableArray71 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList72 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray71);
        boolean boolean73 = serializableList72.isEmpty();
        boolean boolean75 = serializableList72.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream76 = serializableList72.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream77 = serializableList72.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream78 = serializableList72.parallelStream();
        com.google.javascript.rhino.JSDocInfo jSDocInfo79 = new com.google.javascript.rhino.JSDocInfo();
        int int80 = jSDocInfo79.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet81 = jSDocInfo79.getParameterNames();
        boolean boolean82 = serializableList72.contains((java.lang.Object) strSet81);
        java.util.Spliterator<java.lang.String> strSpliterator83 = strSet81.spliterator();
        boolean boolean84 = serializableList47.contains((java.lang.Object) strSpliterator83);
        boolean boolean86 = serializableList47.equals((java.lang.Object) '#');
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableStream21);
        org.junit.Assert.assertNotNull(serializableStream22);
        org.junit.Assert.assertNotNull(serializableStream23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(serializableSpliterator28);
        org.junit.Assert.assertNotNull(serializableItor29);
        org.junit.Assert.assertNotNull(serializableArray46);
        org.junit.Assert.assertNotNull(serializableList47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 16 + "'", int54 == 16);
        org.junit.Assert.assertNotNull(serializableArray71);
        org.junit.Assert.assertNotNull(serializableList72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(serializableStream76);
        org.junit.Assert.assertNotNull(serializableStream77);
        org.junit.Assert.assertNotNull(serializableStream78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(strSet81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(strSpliterator83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test01710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01710");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getStartLine();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isQualifiedName();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isContinue();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean22 = node21.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType23 = null;
        node21.setJSType(jSType23);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isContinue();
        com.google.javascript.rhino.Node node30 = node21.clonePropsFrom(node28);
        node16.addChildrenToBack(node21);
        boolean boolean32 = node16.isLocalResultCall();
        com.google.javascript.rhino.Node node33 = node11.copyInformationFromForTree(node16);
        node16.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node36 = node7.clonePropsFrom(node16);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean41 = node40.isLabelName();
        boolean boolean42 = node40.isTrue();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isContinue();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType53 = null;
        node51.setJSType(jSType53);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean59 = node58.isContinue();
        com.google.javascript.rhino.Node node60 = node51.clonePropsFrom(node58);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (byte) 0, node16, node40, node46, node60, 10, (int) (byte) -1);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) -1, node63);
        typePosition0.setItem(node63);
        boolean boolean66 = typePosition0.hasBrackets();
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean71 = node70.isQualifiedName();
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean76 = node75.isContinue();
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean81 = node80.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType82 = null;
        node80.setJSType(jSType82);
        com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean88 = node87.isContinue();
        com.google.javascript.rhino.Node node89 = node80.clonePropsFrom(node87);
        node75.addChildrenToBack(node80);
        boolean boolean91 = node75.isLocalResultCall();
        com.google.javascript.rhino.Node node92 = node70.copyInformationFromForTree(node75);
        typePosition0.setItem(node75);
        boolean boolean94 = node75.isDebugger();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test01711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01711");
        com.google.common.collect.ImmutableList<java.lang.CharSequence> charSequenceList10 = com.google.common.collect.ImmutableList.of((java.lang.CharSequence) "(STRING Unknown class name 40\n)", (java.lang.CharSequence) "(java.io.IOException: NUMBER -1.0 12)", (java.lang.CharSequence) "java.io.IOException: java.io.IOException: Unknown class name", (java.lang.CharSequence) "([0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30])", (java.lang.CharSequence) "java.io.IOException: java.io.IOException: Unknown class name", (java.lang.CharSequence) "", (java.lang.CharSequence) "java.io.IOException: java.io.IOException: Unknown class name", (java.lang.CharSequence) "", (java.lang.CharSequence) "true", (java.lang.CharSequence) "CALL hi!");
        org.junit.Assert.assertNotNull(charSequenceList10);
    }

    @Test
    public void test01712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01712");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.hasFileOverview();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection5 = jSDocInfo0.getTypeNodes();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getTypedefType();
        boolean boolean7 = jSDocInfo0.hasTypedefType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList8 = jSDocInfo0.getImplementedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getEnumParameterType();
        boolean boolean10 = jSDocInfo0.isNoCompile();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeCollection5);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList8);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test01713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01713");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream21 = serializableList17.stream();
        java.io.Serializable[] serializableArray38 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList39 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray38);
        boolean boolean40 = serializableList39.isEmpty();
        boolean boolean42 = serializableList39.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream43 = serializableList39.stream();
        boolean boolean44 = serializableList17.containsAll((java.util.Collection<java.io.Serializable>) serializableList39);
        java.util.Iterator<java.io.Serializable> serializableItor45 = serializableList39.iterator();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList46 = serializableList39.asList();
        java.io.Serializable[] serializableArray63 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList64 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray63);
        boolean boolean65 = serializableList64.isEmpty();
        boolean boolean67 = serializableList64.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream68 = serializableList64.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream69 = serializableList64.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream70 = serializableList64.parallelStream();
        java.lang.String str71 = serializableList64.toString();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean72 = serializableList46.retainAll((java.util.Collection<java.io.Serializable>) serializableList64);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableStream21);
        org.junit.Assert.assertNotNull(serializableArray38);
        org.junit.Assert.assertNotNull(serializableList39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(serializableStream43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(serializableItor45);
        org.junit.Assert.assertNotNull(serializableList46);
        org.junit.Assert.assertNotNull(serializableArray63);
        org.junit.Assert.assertNotNull(serializableList64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(serializableStream68);
        org.junit.Assert.assertNotNull(serializableStream69);
        org.junit.Assert.assertNotNull(serializableStream70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]" + "'", str71, "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
    }

    @Test
    public void test01714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01714");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(32, (int) (byte) 10, (int) '#');
        com.google.javascript.rhino.JSDocInfo jSDocInfo4 = null;
        node3.setJSDocInfo(jSDocInfo4);
        boolean boolean6 = node3.isString();
        int int7 = node3.getLineno();
        boolean boolean8 = node3.isFalse();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test01715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01715");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean6 = jSDocInfo5.hasEnumParameterType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo5.getBaseType();
        node3.setJSDocInfo(jSDocInfo5);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isQuotedString();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType19 = null;
        node17.setJSType(jSType19);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean25 = node24.isContinue();
        com.google.javascript.rhino.Node node26 = node17.clonePropsFrom(node24);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean31 = node30.isContinue();
        boolean boolean32 = node30.isString();
        com.google.javascript.rhino.Node node33 = node17.useSourceInfoFromForTree(node30);
        com.google.javascript.rhino.InputId inputId34 = null;
        node33.setInputId(inputId34);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString(37, "hi!", (int) (byte) 100, (int) (short) 100);
        int int42 = node40.getIntProp(30);
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = new com.google.javascript.rhino.JSDocInfo();
        int int44 = jSDocInfo43.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility45 = null;
        jSDocInfo43.setVisibility(visibility45);
        boolean boolean47 = jSDocInfo43.hasFileOverview();
        boolean boolean48 = jSDocInfo43.isJavaDispatch();
        boolean boolean49 = jSDocInfo43.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList50 = jSDocInfo43.getExtendedInterfaces();
        java.lang.String str51 = jSDocInfo43.getLicense();
        boolean boolean52 = jSDocInfo43.hasBaseType();
        boolean boolean53 = jSDocInfo43.isNoTypeCheck();
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = new com.google.javascript.rhino.JSDocInfo();
        int int55 = jSDocInfo54.getImplementedInterfaceCount();
        boolean boolean56 = jSDocInfo54.isExterns();
        com.google.javascript.rhino.JSDocInfo jSDocInfo58 = new com.google.javascript.rhino.JSDocInfo();
        int int59 = jSDocInfo58.getImplementedInterfaceCount();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean64 = node63.isQualifiedName();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean69 = node68.isContinue();
        boolean boolean70 = node68.isDo();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList71 = com.google.common.collect.ImmutableList.of((java.io.Serializable) jSDocInfo5, (java.io.Serializable) boolean13, (java.io.Serializable) node33, (java.io.Serializable) int42, (java.io.Serializable) boolean53, (java.io.Serializable) boolean56, (java.io.Serializable) ' ', (java.io.Serializable) jSDocInfo58, (java.io.Serializable) node63, (java.io.Serializable) boolean70);
        boolean boolean72 = node63.isTrue();
        node63.setCharno((int) (short) 10);
        boolean boolean75 = node63.isCatch();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(serializableList71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test01716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01716");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        boolean boolean5 = node3.isDec();
        boolean boolean6 = node3.isAssign();
        boolean boolean7 = node3.isHook();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test01717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01717");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isLabelName();
        boolean boolean18 = node16.isTrue();
        boolean boolean19 = node16.isNoSideEffectsCall();
        boolean boolean20 = node16.isCase();
        boolean boolean21 = node16.isIn();
        boolean boolean22 = node3.isEquivalentTo(node16);
        com.google.javascript.rhino.Node node23 = node3.removeChildren();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean24 = node23.hasMoreThanOneChild();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(node23);
    }

    @Test
    public void test01718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01718");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isContinue();
        boolean boolean18 = node16.isString();
        com.google.javascript.rhino.Node node19 = node3.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean25 = node24.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType26 = null;
        node24.setJSType(jSType26);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean32 = node31.isContinue();
        com.google.javascript.rhino.Node node33 = node24.clonePropsFrom(node31);
        boolean boolean34 = node33.isQuotedString();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean39 = node38.isLabelName();
        boolean boolean40 = node38.isDec();
        boolean boolean41 = node38.isScript();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(0, node33, node38, node45, 0, (int) (short) 0);
        node33.setType(46);
        boolean boolean51 = node33.isString();
        boolean boolean52 = node33.isAnd();
        com.google.javascript.rhino.Node node53 = node3.srcrefTree(node33);
        boolean boolean54 = node53.isNumber();
        java.util.Set<java.lang.String> strSet55 = node53.getDirectives();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(strSet55);
    }

    @Test
    public void test01719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01719");
        java.io.IOException iOException0 = new java.io.IOException();
        java.io.IOException iOException1 = new java.io.IOException((java.lang.Throwable) iOException0);
        java.io.IOException iOException2 = new java.io.IOException((java.lang.Throwable) iOException1);
        java.lang.Throwable[] throwableArray3 = iOException1.getSuppressed();
        java.lang.Throwable[] throwableArray4 = iOException1.getSuppressed();
        java.lang.String str5 = iOException1.toString();
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "java.io.IOException: java.io.IOException" + "'", str5, "java.io.IOException: java.io.IOException");
    }

    @Test
    public void test01720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01720");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream21 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream22 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream23 = serializableList17.parallelStream();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = new com.google.javascript.rhino.JSDocInfo();
        int int25 = jSDocInfo24.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet26 = jSDocInfo24.getParameterNames();
        boolean boolean27 = serializableList17.contains((java.lang.Object) strSet26);
        java.util.Spliterator<java.io.Serializable> serializableSpliterator28 = serializableList17.spliterator();
        java.io.Serializable[] serializableArray45 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList46 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray45);
        boolean boolean47 = serializableList46.isEmpty();
        boolean boolean49 = serializableList46.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream50 = serializableList46.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream51 = serializableList46.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream52 = serializableList46.parallelStream();
        com.google.javascript.rhino.JSDocInfo jSDocInfo53 = new com.google.javascript.rhino.JSDocInfo();
        int int54 = jSDocInfo53.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet55 = jSDocInfo53.getParameterNames();
        boolean boolean56 = serializableList46.contains((java.lang.Object) strSet55);
        java.util.Spliterator<java.io.Serializable> serializableSpliterator57 = serializableList46.spliterator();
        java.util.Iterator<java.io.Serializable> serializableItor58 = serializableList46.iterator();
        boolean boolean59 = serializableList17.containsAll((java.util.Collection<java.io.Serializable>) serializableList46);
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList60 = serializableList17.asList();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean65 = node64.isContinue();
        boolean boolean66 = node64.isDo();
        node64.setSourceEncodedPosition(2);
        int int69 = node64.getType();
        boolean boolean70 = node64.isTry();
        com.google.javascript.rhino.Node node74 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean75 = node74.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType76 = null;
        node74.setJSType(jSType76);
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean82 = node81.isContinue();
        com.google.javascript.rhino.Node node83 = node74.clonePropsFrom(node81);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile84 = null;
        node83.setStaticSourceFile(staticSourceFile84);
        node64.addChildrenToFront(node83);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean87 = serializableList60.add((java.io.Serializable) node64);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableStream21);
        org.junit.Assert.assertNotNull(serializableStream22);
        org.junit.Assert.assertNotNull(serializableStream23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(serializableSpliterator28);
        org.junit.Assert.assertNotNull(serializableArray45);
        org.junit.Assert.assertNotNull(serializableList46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(serializableStream50);
        org.junit.Assert.assertNotNull(serializableStream51);
        org.junit.Assert.assertNotNull(serializableStream52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(serializableSpliterator57);
        org.junit.Assert.assertNotNull(serializableItor58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(serializableList60);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(node83);
    }

    @Test
    public void test01721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01721");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isQuotedString();
        node4.setIsSyntheticBlock(false);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        boolean boolean13 = node11.isString();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isLabelName();
        boolean boolean19 = node17.isDec();
        boolean boolean20 = node17.isAssign();
        boolean boolean21 = node11.isEquivalentTo(node17);
        boolean boolean22 = node17.isDelProp();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newString("Unknown class name");
        com.google.javascript.rhino.Node node25 = node24.getLastSibling();
        int int26 = node24.getSourcePosition();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(0, 54, (int) ' ');
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(3, node4, node17, node24, node30, 30, 31);
        boolean boolean34 = node30.isGetElem();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test01722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01722");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(0, 10, 0);
        node3.setLineno(31);
        java.lang.Appendable appendable6 = null;
        // The following exception was thrown during execution in test generation
        try {
            node3.appendStringTree(appendable6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01723");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isContinue();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType10 = null;
        node8.setJSType(jSType10);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean16 = node15.isContinue();
        com.google.javascript.rhino.Node node17 = node8.clonePropsFrom(node15);
        node3.addChildrenToBack(node8);
        boolean boolean19 = node3.isLocalResultCall();
        boolean boolean20 = node3.isInstanceOf();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = node3.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test01724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01724");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isContinue();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType10 = null;
        node8.setJSType(jSType10);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean16 = node15.isContinue();
        com.google.javascript.rhino.Node node17 = node8.clonePropsFrom(node15);
        node3.addChildrenToBack(node8);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable19 = node8.siblings();
        boolean boolean20 = node8.isFor();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags22 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        boolean boolean23 = sideEffectFlags22.areAllFlagsSet();
        sideEffectFlags22.clearAllFlags();
        // The following exception was thrown during execution in test generation
        try {
            node8.setSideEffectFlags(sideEffectFlags22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNotNull(nodeIterable19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test01725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01725");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        java.lang.String str4 = jSDocInfo0.getMeaning();
        java.lang.String str5 = jSDocInfo0.getMeaning();
        boolean boolean6 = jSDocInfo0.isConstructor();
        jSDocInfo0.setDeprecated(false);
        boolean boolean9 = jSDocInfo0.hasEnumParameterType();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test01726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01726");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getStartLine();
        int int2 = stringPosition0.getPositionOnEndLine();
        int int3 = stringPosition0.getStartLine();
        java.lang.String str4 = stringPosition0.getItem();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test01727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01727");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream21 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream22 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream23 = serializableList17.parallelStream();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = new com.google.javascript.rhino.JSDocInfo();
        int int25 = jSDocInfo24.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet26 = jSDocInfo24.getParameterNames();
        boolean boolean27 = serializableList17.contains((java.lang.Object) strSet26);
        java.io.Serializable[] serializableArray44 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList45 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray44);
        boolean boolean46 = serializableList45.isEmpty();
        boolean boolean48 = serializableList45.contains((java.lang.Object) 52);
        int int50 = serializableList45.indexOf((java.lang.Object) (-1L));
        java.util.Iterator<java.io.Serializable> serializableItor51 = serializableList45.iterator();
        java.util.List<java.io.Serializable> serializableList54 = serializableList45.subList((int) (short) 10, 16);
        int int55 = serializableList17.lastIndexOf((java.lang.Object) serializableList54);
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.ImmutableList<java.io.Serializable> serializableList58 = serializableList17.subList((int) '4', 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: start index (52) must not be greater than size (16)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableStream21);
        org.junit.Assert.assertNotNull(serializableStream22);
        org.junit.Assert.assertNotNull(serializableStream23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(serializableArray44);
        org.junit.Assert.assertNotNull(serializableList45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(serializableItor51);
        org.junit.Assert.assertNotNull(serializableList54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
    }

    @Test
    public void test01728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01728");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isContinue();
        boolean boolean18 = node16.isString();
        com.google.javascript.rhino.Node node19 = node3.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.InputId inputId20 = null;
        node19.setInputId(inputId20);
        java.lang.Object obj23 = node19.getProp((int) (short) 10);
        boolean boolean24 = node19.isVoid();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean34 = node33.isQualifiedName();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean39 = node38.isContinue();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean44 = node43.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType45 = null;
        node43.setJSType(jSType45);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isContinue();
        com.google.javascript.rhino.Node node52 = node43.clonePropsFrom(node50);
        node38.addChildrenToBack(node43);
        boolean boolean54 = node38.isLocalResultCall();
        com.google.javascript.rhino.Node node55 = node33.copyInformationFromForTree(node38);
        node38.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node58 = node29.clonePropsFrom(node38);
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean63 = node62.isLabelName();
        boolean boolean64 = node62.isTrue();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean69 = node68.isContinue();
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean74 = node73.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType75 = null;
        node73.setJSType(jSType75);
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean81 = node80.isContinue();
        com.google.javascript.rhino.Node node82 = node73.clonePropsFrom(node80);
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node((int) (byte) 0, node38, node62, node68, node82, 10, (int) (byte) -1);
        com.google.javascript.rhino.Node node86 = node19.srcrefTree(node38);
        com.google.javascript.rhino.Node node88 = com.google.javascript.rhino.Node.newString("Unknown class name");
        com.google.javascript.rhino.Node node89 = node19.useSourceInfoFromForTree(node88);
        com.google.javascript.rhino.jstype.JSType jSType90 = node19.getJSType();
        java.lang.Class<?> wildcardClass91 = node19.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertNotNull(node86);
        org.junit.Assert.assertNotNull(node88);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertNull(jSType90);
        org.junit.Assert.assertNotNull(wildcardClass91);
    }

    @Test
    public void test01729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01729");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection4 = jSDocInfo0.getMarkers();
        boolean boolean5 = jSDocInfo0.isNoCompile();
        boolean boolean6 = jSDocInfo0.isImplicitCast();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(markerCollection4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test01730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01730");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("STRING Unknown class name");
        com.google.javascript.rhino.JSDocInfo jSDocInfo2 = new com.google.javascript.rhino.JSDocInfo();
        int int3 = jSDocInfo2.getImplementedInterfaceCount();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection4 = jSDocInfo2.getTypeNodes();
        java.lang.String str5 = jSDocInfo2.getDescription();
        boolean boolean6 = jSDocInfo2.isExterns();
        node1.setJSDocInfo(jSDocInfo2);
        java.lang.String str8 = jSDocInfo2.getSourceName();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeCollection4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(str8);
    }

    @Test
    public void test01731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01731");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getPositionOnEndLine();
        typePosition0.setPositionInformation(2, 29, (int) (byte) 100, 15);
        com.google.javascript.rhino.Node node7 = typePosition0.getItem();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(node7);
    }

    @Test
    public void test01732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01732");
        com.google.javascript.rhino.Node[] nodeArray3 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(51, nodeArray3, 48, 32);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray3);
        com.google.javascript.rhino.Node[] nodeArray11 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(51, nodeArray11, 48, 32);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(42, nodeArray11, 32, 12);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(36, nodeArray11);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList19 = com.google.common.collect.ImmutableList.copyOf(nodeArray11);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(51, nodeArray24, 48, 32);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray24);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(45, nodeArray24);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(40, nodeArray24, 40, (int) (byte) -1);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(51, nodeArray39, 48, 32);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(42, nodeArray39, 32, 12);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(36, nodeArray39);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(41, nodeArray39, 0, 53);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(39, nodeArray39);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(51, nodeArray56, 48, 32);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray56);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(45, nodeArray56);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(40, nodeArray56, 40, (int) (byte) -1);
        com.google.javascript.rhino.Node[] nodeArray66 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(51, nodeArray66, 48, 32);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node[]> nodeArrayList70 = com.google.common.collect.ImmutableList.of(nodeArray3, nodeArray11, nodeArray24, nodeArray39, nodeArray56, nodeArray66);
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) '#', nodeArray24, (-8), 53);
        org.junit.Assert.assertNotNull(nodeArray3);
        org.junit.Assert.assertNotNull(nodeArray11);
        org.junit.Assert.assertNotNull(nodeList19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertNotNull(nodeArray66);
        org.junit.Assert.assertNotNull(nodeArrayList70);
    }

    @Test
    public void test01733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01733");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isQualifiedName();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isContinue();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        node32.setJSType(jSType34);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isContinue();
        com.google.javascript.rhino.Node node41 = node32.clonePropsFrom(node39);
        node27.addChildrenToBack(node32);
        boolean boolean43 = node27.isLocalResultCall();
        com.google.javascript.rhino.Node node44 = node22.copyInformationFromForTree(node27);
        boolean boolean45 = serializableList17.contains((java.lang.Object) node27);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean50 = node49.isQualifiedName();
        int int51 = serializableList17.indexOf((java.lang.Object) node49);
        com.google.javascript.rhino.Node node52 = node49.getNext();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean53 = node52.isCatch();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNull(node52);
    }

    @Test
    public void test01734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01734");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getParameterType("true");
        java.lang.String str6 = jSDocInfo0.getLendsName();
        java.lang.String str7 = jSDocInfo0.getDeprecationReason();
        boolean boolean8 = jSDocInfo0.isExport();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression9 = jSDocInfo0.getBaseType();
        boolean boolean10 = jSDocInfo0.isHidden();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(jSTypeExpression9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test01735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01735");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isLabelName();
        boolean boolean18 = node16.isTrue();
        boolean boolean19 = node16.isNoSideEffectsCall();
        boolean boolean20 = node16.isCase();
        boolean boolean21 = node16.isIn();
        boolean boolean22 = node3.isEquivalentTo(node16);
        boolean boolean23 = node3.isObjectLit();
        com.google.javascript.rhino.Node node24 = node3.removeChildren();
        java.lang.Appendable appendable25 = null;
        // The following exception was thrown during execution in test generation
        try {
            node24.appendStringTree(appendable25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(node24);
    }

    @Test
    public void test01736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01736");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getParameterType("true");
        java.lang.String str6 = jSDocInfo0.getLendsName();
        java.lang.String str7 = jSDocInfo0.getDeprecationReason();
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getModifies();
        java.io.Serializable[] serializableArray25 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList26 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray25);
        boolean boolean27 = serializableList26.isEmpty();
        int int28 = serializableList26.size();
        boolean boolean29 = strSet8.contains((java.lang.Object) serializableList26);
        java.util.Spliterator<java.io.Serializable> serializableSpliterator30 = serializableList26.spliterator();
        int int31 = serializableList26.size();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(serializableArray25);
        org.junit.Assert.assertNotNull(serializableList26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 16 + "'", int28 == 16);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(serializableSpliterator30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 16 + "'", int31 == 16);
    }

    @Test
    public void test01737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01737");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(38);
    }

    @Test
    public void test01738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01738");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream21 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream22 = serializableList17.parallelStream();
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable serializable24 = serializableList17.get(45);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: index (45) must be less than size (16)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableStream21);
        org.junit.Assert.assertNotNull(serializableStream22);
    }

    @Test
    public void test01739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01739");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        java.lang.String str4 = jSDocInfo0.getMeaning();
        java.lang.String str5 = jSDocInfo0.getLicense();
        boolean boolean6 = jSDocInfo0.hasType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getReturnType();
        jSDocInfo0.setLicense("Not declared as a constructor");
        int int10 = jSDocInfo0.getParameterCount();
        boolean boolean11 = jSDocInfo0.isExterns();
        com.google.javascript.rhino.Node node12 = jSDocInfo0.getAssociatedNode();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(node12);
    }

    @Test
    public void test01740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01740");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        boolean boolean5 = node3.isTrue();
        boolean boolean6 = node3.isFromExterns();
        boolean boolean7 = node3.isSwitch();
        boolean boolean8 = node3.isUnscopedQualifiedName();
        boolean boolean9 = node3.isContinue();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test01741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01741");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        boolean boolean13 = node12.isAssign();
        node12.setLength(0);
        boolean boolean16 = node12.isString();
        com.google.javascript.rhino.Node node18 = node12.getAncestor(51);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = node18.toString(true, true, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(node18);
    }

    @Test
    public void test01742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01742");
        java.lang.String[] strArray3 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        java.lang.Object[] objArray6 = strSet4.toArray();
        java.io.Serializable[] serializableArray23 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList24 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray23);
        boolean boolean25 = serializableList24.isEmpty();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean30 = node29.isQualifiedName();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean35 = node34.isContinue();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType41 = null;
        node39.setJSType(jSType41);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isContinue();
        com.google.javascript.rhino.Node node48 = node39.clonePropsFrom(node46);
        node34.addChildrenToBack(node39);
        boolean boolean50 = node34.isLocalResultCall();
        com.google.javascript.rhino.Node node51 = node29.copyInformationFromForTree(node34);
        boolean boolean52 = serializableList24.contains((java.lang.Object) node34);
        java.util.Iterator<java.io.Serializable> serializableItor53 = serializableList24.iterator();
        boolean boolean54 = strSet4.containsAll((java.util.Collection<java.io.Serializable>) serializableList24);
        java.lang.Object[] objArray55 = serializableList24.toArray();
        boolean boolean56 = serializableList24.isEmpty();
        java.lang.Object[] objArray57 = serializableList24.toArray();
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable serializable59 = serializableList24.remove(63);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(serializableArray23);
        org.junit.Assert.assertNotNull(serializableList24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(serializableItor53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
    }

    @Test
    public void test01743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01743");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        int int18 = serializableList17.size();
        com.google.common.collect.UnmodifiableListIterator<java.io.Serializable> serializableItor19 = serializableList17.listIterator();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue20 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue21 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue22 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue23 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue24 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList25 = com.google.common.collect.ImmutableList.of(ternaryValue21, ternaryValue22, ternaryValue23, ternaryValue24);
        java.lang.String str26 = ternaryValue23.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue27 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue28 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue29 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue30 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList31 = com.google.common.collect.ImmutableList.of(ternaryValue27, ternaryValue28, ternaryValue29, ternaryValue30);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue32 = ternaryValue23.or(ternaryValue28);
        java.lang.String str33 = ternaryValue28.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue34 = ternaryValue20.xor(ternaryValue28);
        int int35 = serializableList17.lastIndexOf((java.lang.Object) ternaryValue20);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(0, 10, 0);
        boolean boolean40 = serializableList17.contains((java.lang.Object) node39);
        com.google.javascript.rhino.Node node41 = node39.getLastSibling();
        boolean boolean42 = node39.isInc();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 16 + "'", int18 == 16);
        org.junit.Assert.assertNotNull(serializableItor19);
        org.junit.Assert.assertNotNull(ternaryValue20);
        org.junit.Assert.assertNotNull(ternaryValue21);
        org.junit.Assert.assertNotNull(ternaryValue22);
        org.junit.Assert.assertNotNull(ternaryValue23);
        org.junit.Assert.assertNotNull(ternaryValue24);
        org.junit.Assert.assertNotNull(ternaryValueList25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "true" + "'", str26, "true");
        org.junit.Assert.assertNotNull(ternaryValue27);
        org.junit.Assert.assertNotNull(ternaryValue28);
        org.junit.Assert.assertNotNull(ternaryValue29);
        org.junit.Assert.assertNotNull(ternaryValue30);
        org.junit.Assert.assertNotNull(ternaryValueList31);
        org.junit.Assert.assertNotNull(ternaryValue32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "true" + "'", str33, "true");
        org.junit.Assert.assertNotNull(ternaryValue34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test01744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01744");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isContinue();
        boolean boolean18 = node16.isString();
        com.google.javascript.rhino.Node node19 = node3.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean25 = node24.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType26 = null;
        node24.setJSType(jSType26);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean32 = node31.isContinue();
        com.google.javascript.rhino.Node node33 = node24.clonePropsFrom(node31);
        boolean boolean34 = node33.isQuotedString();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean39 = node38.isLabelName();
        boolean boolean40 = node38.isDec();
        boolean boolean41 = node38.isScript();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node(0, node33, node38, node45, 0, (int) (short) 0);
        node33.setType(46);
        boolean boolean51 = node33.isString();
        boolean boolean52 = node33.isAnd();
        com.google.javascript.rhino.Node node53 = node3.srcrefTree(node33);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder54 = node3.new FileLevelJsDocBuilder();
        fileLevelJsDocBuilder54.append("");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
    }

    @Test
    public void test01745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01745");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition0.setPositionInformation(0, 53, 42, (int) (byte) -1);
        int int6 = stringPosition0.getStartLine();
        int int7 = stringPosition0.getPositionOnStartLine();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
    }

    @Test
    public void test01746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01746");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue0 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue1 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue2 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue3 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue4 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList5 = com.google.common.collect.ImmutableList.of(ternaryValue1, ternaryValue2, ternaryValue3, ternaryValue4);
        java.lang.String str6 = ternaryValue3.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue7 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue8 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue9 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue10 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList11 = com.google.common.collect.ImmutableList.of(ternaryValue7, ternaryValue8, ternaryValue9, ternaryValue10);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue12 = ternaryValue3.or(ternaryValue8);
        java.lang.String str13 = ternaryValue8.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue14 = ternaryValue0.xor(ternaryValue8);
        boolean boolean16 = ternaryValue8.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue17 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue18 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue19 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue20 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList21 = com.google.common.collect.ImmutableList.of(ternaryValue17, ternaryValue18, ternaryValue19, ternaryValue20);
        java.lang.String str22 = ternaryValue19.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue23 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue24 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue26 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList27 = com.google.common.collect.ImmutableList.of(ternaryValue23, ternaryValue24, ternaryValue25, ternaryValue26);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue28 = ternaryValue19.or(ternaryValue24);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue29 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue30 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue31 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue32 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList33 = com.google.common.collect.ImmutableList.of(ternaryValue29, ternaryValue30, ternaryValue31, ternaryValue32);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue34 = ternaryValue24.xor(ternaryValue29);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue35 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue36 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue37 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue38 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList39 = com.google.common.collect.ImmutableList.of(ternaryValue35, ternaryValue36, ternaryValue37, ternaryValue38);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue40 = ternaryValue29.xor(ternaryValue36);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue41 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue42 = ternaryValue29.or(ternaryValue41);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue43 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue44 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue45 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue46 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue47 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList48 = com.google.common.collect.ImmutableList.of(ternaryValue44, ternaryValue45, ternaryValue46, ternaryValue47);
        java.lang.String str49 = ternaryValue46.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue50 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue51 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue52 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue53 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList54 = com.google.common.collect.ImmutableList.of(ternaryValue50, ternaryValue51, ternaryValue52, ternaryValue53);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue55 = ternaryValue46.or(ternaryValue51);
        java.lang.String str56 = ternaryValue51.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue57 = ternaryValue43.xor(ternaryValue51);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue58 = ternaryValue42.or(ternaryValue51);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue59 = ternaryValue42.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue60 = ternaryValue8.xor(ternaryValue42);
        org.junit.Assert.assertNotNull(ternaryValue0);
        org.junit.Assert.assertNotNull(ternaryValue1);
        org.junit.Assert.assertNotNull(ternaryValue2);
        org.junit.Assert.assertNotNull(ternaryValue3);
        org.junit.Assert.assertNotNull(ternaryValue4);
        org.junit.Assert.assertNotNull(ternaryValueList5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "true" + "'", str6, "true");
        org.junit.Assert.assertNotNull(ternaryValue7);
        org.junit.Assert.assertNotNull(ternaryValue8);
        org.junit.Assert.assertNotNull(ternaryValue9);
        org.junit.Assert.assertNotNull(ternaryValue10);
        org.junit.Assert.assertNotNull(ternaryValueList11);
        org.junit.Assert.assertNotNull(ternaryValue12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "true" + "'", str13, "true");
        org.junit.Assert.assertNotNull(ternaryValue14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(ternaryValue17);
        org.junit.Assert.assertNotNull(ternaryValue18);
        org.junit.Assert.assertNotNull(ternaryValue19);
        org.junit.Assert.assertNotNull(ternaryValue20);
        org.junit.Assert.assertNotNull(ternaryValueList21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "true" + "'", str22, "true");
        org.junit.Assert.assertNotNull(ternaryValue23);
        org.junit.Assert.assertNotNull(ternaryValue24);
        org.junit.Assert.assertNotNull(ternaryValue25);
        org.junit.Assert.assertNotNull(ternaryValue26);
        org.junit.Assert.assertNotNull(ternaryValueList27);
        org.junit.Assert.assertNotNull(ternaryValue28);
        org.junit.Assert.assertNotNull(ternaryValue29);
        org.junit.Assert.assertNotNull(ternaryValue30);
        org.junit.Assert.assertNotNull(ternaryValue31);
        org.junit.Assert.assertNotNull(ternaryValue32);
        org.junit.Assert.assertNotNull(ternaryValueList33);
        org.junit.Assert.assertNotNull(ternaryValue34);
        org.junit.Assert.assertNotNull(ternaryValue35);
        org.junit.Assert.assertNotNull(ternaryValue36);
        org.junit.Assert.assertNotNull(ternaryValue37);
        org.junit.Assert.assertNotNull(ternaryValue38);
        org.junit.Assert.assertNotNull(ternaryValueList39);
        org.junit.Assert.assertNotNull(ternaryValue40);
        org.junit.Assert.assertNotNull(ternaryValue41);
        org.junit.Assert.assertNotNull(ternaryValue42);
        org.junit.Assert.assertNotNull(ternaryValue43);
        org.junit.Assert.assertNotNull(ternaryValue44);
        org.junit.Assert.assertNotNull(ternaryValue45);
        org.junit.Assert.assertNotNull(ternaryValue46);
        org.junit.Assert.assertNotNull(ternaryValue47);
        org.junit.Assert.assertNotNull(ternaryValueList48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "true" + "'", str49, "true");
        org.junit.Assert.assertNotNull(ternaryValue50);
        org.junit.Assert.assertNotNull(ternaryValue51);
        org.junit.Assert.assertNotNull(ternaryValue52);
        org.junit.Assert.assertNotNull(ternaryValue53);
        org.junit.Assert.assertNotNull(ternaryValueList54);
        org.junit.Assert.assertNotNull(ternaryValue55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "true" + "'", str56, "true");
        org.junit.Assert.assertNotNull(ternaryValue57);
        org.junit.Assert.assertNotNull(ternaryValue58);
        org.junit.Assert.assertNotNull(ternaryValue59);
        org.junit.Assert.assertNotNull(ternaryValue60);
    }

    @Test
    public void test01747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01747");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        boolean boolean5 = node3.isTrue();
        boolean boolean6 = node3.isNoSideEffectsCall();
        boolean boolean7 = node3.isCase();
        boolean boolean8 = node3.isVar();
        int int9 = node3.getSourcePosition();
        boolean boolean10 = node3.isLabelName();
        int int11 = node3.getSideEffectFlags();
        boolean boolean12 = node3.isOptionalArg();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test01748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01748");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        int int7 = node3.getSourceOffset();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        boolean boolean13 = node11.isString();
        boolean boolean14 = node11.isStringKey();
        int int15 = node11.getChildCount();
        com.google.javascript.rhino.Node node16 = node3.copyInformationFromForTree(node11);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable17 = node3.siblings();
        boolean boolean18 = node3.isNE();
        node3.setSourceFileForTesting("java.io.IOException");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(nodeIterable17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test01749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01749");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        boolean boolean5 = node3.isDec();
        boolean boolean6 = node3.isAssign();
        boolean boolean7 = node3.isFunction();
        node3.setSourceEncodedPosition(29);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = node3.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test01750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01750");
        java.lang.String[] strArray3 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        java.lang.Object[] objArray6 = strSet4.toArray();
        java.io.Serializable[] serializableArray23 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList24 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray23);
        boolean boolean25 = serializableList24.isEmpty();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean30 = node29.isQualifiedName();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean35 = node34.isContinue();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType41 = null;
        node39.setJSType(jSType41);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isContinue();
        com.google.javascript.rhino.Node node48 = node39.clonePropsFrom(node46);
        node34.addChildrenToBack(node39);
        boolean boolean50 = node34.isLocalResultCall();
        com.google.javascript.rhino.Node node51 = node29.copyInformationFromForTree(node34);
        boolean boolean52 = serializableList24.contains((java.lang.Object) node34);
        java.util.Iterator<java.io.Serializable> serializableItor53 = serializableList24.iterator();
        boolean boolean54 = strSet4.containsAll((java.util.Collection<java.io.Serializable>) serializableList24);
        java.lang.Object[] objArray55 = serializableList24.toArray();
        boolean boolean56 = serializableList24.isEmpty();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList57 = serializableList24.reverse();
        java.util.Iterator<java.io.Serializable> serializableItor58 = serializableList24.iterator();
        com.google.javascript.rhino.JSDocInfo jSDocInfo59 = new com.google.javascript.rhino.JSDocInfo();
        int int60 = jSDocInfo59.getImplementedInterfaceCount();
        boolean boolean61 = jSDocInfo59.hasType();
        java.lang.String str62 = jSDocInfo59.getSourceName();
        boolean boolean63 = jSDocInfo59.isDefine();
        java.util.Set<java.lang.String> strSet64 = jSDocInfo59.getModifies();
        boolean boolean65 = serializableList24.contains((java.lang.Object) strSet64);
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList66 = serializableList24.reverse();
        com.google.javascript.rhino.JSDocInfo jSDocInfo67 = new com.google.javascript.rhino.JSDocInfo();
        int int68 = jSDocInfo67.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility69 = null;
        jSDocInfo67.setVisibility(visibility69);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression72 = jSDocInfo67.getParameterType("true");
        java.lang.String str73 = jSDocInfo67.getLendsName();
        java.lang.String str74 = jSDocInfo67.getDeprecationReason();
        java.util.Set<java.lang.String> strSet75 = jSDocInfo67.getModifies();
        java.io.Serializable[] serializableArray92 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList93 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray92);
        boolean boolean94 = serializableList93.isEmpty();
        int int95 = serializableList93.size();
        boolean boolean96 = strSet75.contains((java.lang.Object) serializableList93);
        java.util.stream.Stream<java.io.Serializable> serializableStream97 = serializableList93.stream();
        java.lang.Object[] objArray98 = serializableList93.toArray();
        int int99 = serializableList24.indexOf((java.lang.Object) objArray98);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(serializableArray23);
        org.junit.Assert.assertNotNull(serializableList24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(serializableItor53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(serializableList57);
        org.junit.Assert.assertNotNull(serializableItor58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(serializableList66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNull(jSTypeExpression72);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertNotNull(strSet75);
        org.junit.Assert.assertNotNull(serializableArray92);
        org.junit.Assert.assertNotNull(serializableList93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 16 + "'", int95 == 16);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(serializableStream97);
        org.junit.Assert.assertNotNull(objArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray98), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray98), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + (-1) + "'", int99 == (-1));
    }

    @Test
    public void test01751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01751");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        boolean boolean5 = node3.isTrue();
        boolean boolean6 = node3.isNoSideEffectsCall();
        boolean boolean7 = node3.isCase();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean16 = node15.isQualifiedName();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean21 = node20.isContinue();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType27 = null;
        node25.setJSType(jSType27);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isContinue();
        com.google.javascript.rhino.Node node34 = node25.clonePropsFrom(node32);
        node20.addChildrenToBack(node25);
        boolean boolean36 = node20.isLocalResultCall();
        com.google.javascript.rhino.Node node37 = node15.copyInformationFromForTree(node20);
        node20.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node40 = node11.clonePropsFrom(node20);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean45 = node44.isInstanceOf();
        boolean boolean46 = node44.isComma();
        boolean boolean47 = node11.isEquivalentTo(node44);
        boolean boolean48 = node44.isComma();
        com.google.javascript.rhino.Node node49 = node3.clonePropsFrom(node44);
        boolean boolean50 = node44.isRegExp();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test01752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01752");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        node12.setSourceFileForTesting("hi!");
        boolean boolean15 = node12.isIf();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = node12.getStaticSourceFile();
        int int18 = staticSourceFile16.getLineOffset(31);
        boolean boolean19 = staticSourceFile16.isExtern();
        boolean boolean20 = staticSourceFile16.isExtern();
        java.lang.String str21 = staticSourceFile16.getName();
        int int23 = staticSourceFile16.getLineOffset(27);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(staticSourceFile16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-2147483648) + "'", int18 == (-2147483648));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!" + "'", str21, "hi!");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-2147483648) + "'", int23 == (-2147483648));
    }

    @Test
    public void test01753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01753");
        java.io.IOException iOException2 = new java.io.IOException();
        java.io.IOException iOException3 = new java.io.IOException((java.lang.Throwable) iOException2);
        java.io.IOException iOException4 = new java.io.IOException();
        java.io.IOException iOException5 = new java.io.IOException((java.lang.Throwable) iOException4);
        iOException2.addSuppressed((java.lang.Throwable) iOException4);
        java.io.IOException iOException7 = new java.io.IOException();
        java.io.IOException iOException8 = new java.io.IOException((java.lang.Throwable) iOException7);
        java.io.IOException iOException9 = new java.io.IOException((java.lang.Throwable) iOException8);
        java.lang.Throwable[] throwableArray10 = iOException8.getSuppressed();
        java.io.IOException iOException12 = new java.io.IOException("Unknown class name");
        java.io.IOException iOException13 = new java.io.IOException();
        java.io.IOException iOException14 = new java.io.IOException((java.lang.Throwable) iOException13);
        java.io.IOException iOException15 = new java.io.IOException((java.lang.Throwable) iOException14);
        java.lang.Throwable[] throwableArray16 = iOException14.getSuppressed();
        java.io.IOException iOException17 = new java.io.IOException();
        java.io.IOException iOException18 = new java.io.IOException((java.lang.Throwable) iOException17);
        java.io.IOException iOException19 = new java.io.IOException((java.lang.Throwable) iOException18);
        java.io.IOException iOException20 = new java.io.IOException();
        java.io.IOException iOException21 = new java.io.IOException((java.lang.Throwable) iOException20);
        java.io.IOException iOException22 = new java.io.IOException((java.lang.Throwable) iOException21);
        java.lang.Throwable[] throwableArray23 = iOException21.getSuppressed();
        java.io.IOException iOException24 = new java.io.IOException();
        java.io.IOException iOException25 = new java.io.IOException((java.lang.Throwable) iOException24);
        java.io.IOException iOException26 = new java.io.IOException((java.lang.Throwable) iOException25);
        java.io.IOException iOException27 = new java.io.IOException((java.lang.Throwable) iOException25);
        java.io.IOException iOException28 = new java.io.IOException();
        java.io.IOException iOException30 = new java.io.IOException("Unknown class name");
        java.io.IOException iOException32 = new java.io.IOException("Unknown class name");
        java.io.IOException iOException33 = new java.io.IOException();
        java.io.IOException iOException34 = new java.io.IOException((java.lang.Throwable) iOException33);
        java.io.IOException iOException35 = new java.io.IOException((java.lang.Throwable) iOException34);
        java.io.IOException iOException36 = new java.io.IOException((java.lang.Throwable) iOException34);
        java.io.IOException iOException37 = new java.io.IOException();
        com.google.common.collect.ImmutableList<java.io.IOException> iOExceptionList38 = com.google.common.collect.ImmutableList.of(iOException8, iOException12, iOException14, iOException18, iOException21, iOException25, iOException28, iOException30, iOException32, iOException36, iOException37);
        java.io.IOException iOException39 = new java.io.IOException((java.lang.Throwable) iOException12);
        java.io.IOException iOException40 = new java.io.IOException((java.lang.Throwable) iOException39);
        iOException2.addSuppressed((java.lang.Throwable) iOException40);
        java.io.IOException iOException42 = new java.io.IOException("JSDocInfo", (java.lang.Throwable) iOException40);
        java.io.IOException iOException43 = new java.io.IOException("java.io.IOException: Not declared as a type name", (java.lang.Throwable) iOException42);
        org.junit.Assert.assertNotNull(throwableArray10);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(throwableArray23);
        org.junit.Assert.assertNotNull(iOExceptionList38);
    }

    @Test
    public void test01754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01754");
        com.google.common.collect.ImmutableList.Builder<java.util.ListIterator<java.io.Serializable>> serializableItorBuilder0 = com.google.common.collect.ImmutableList.builder();
        org.junit.Assert.assertNotNull(serializableItorBuilder0);
    }

    @Test
    public void test01755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01755");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isQualifiedName();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isContinue();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        node32.setJSType(jSType34);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isContinue();
        com.google.javascript.rhino.Node node41 = node32.clonePropsFrom(node39);
        node27.addChildrenToBack(node32);
        boolean boolean43 = node27.isLocalResultCall();
        com.google.javascript.rhino.Node node44 = node22.copyInformationFromForTree(node27);
        boolean boolean45 = serializableList17.contains((java.lang.Object) node27);
        java.io.Serializable[] serializableArray62 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList63 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray62);
        boolean boolean64 = serializableList17.containsAll((java.util.Collection<java.io.Serializable>) serializableList63);
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList65 = serializableList63.reverse();
        com.google.javascript.rhino.JSDocInfo jSDocInfo66 = new com.google.javascript.rhino.JSDocInfo();
        int int67 = jSDocInfo66.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility68 = null;
        jSDocInfo66.setVisibility(visibility68);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression70 = jSDocInfo66.getEnumParameterType();
        java.lang.String str71 = jSDocInfo66.getReturnDescription();
        boolean boolean72 = jSDocInfo66.hasEnumParameterType();
        boolean boolean73 = serializableList65.contains((java.lang.Object) jSDocInfo66);
        int int74 = jSDocInfo66.getImplementedInterfaceCount();
        java.lang.String str75 = jSDocInfo66.getLendsName();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(serializableArray62);
        org.junit.Assert.assertNotNull(serializableList63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(serializableList65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNull(jSTypeExpression70);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNull(str75);
    }

    @Test
    public void test01756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01756");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        boolean boolean5 = node3.isDec();
        boolean boolean6 = node3.isAssign();
        node3.addSuppression("Unknown class name");
        boolean boolean9 = node3.isGetterDef();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newString(0, "JSDocInfo");
        boolean boolean14 = node13.isCase();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean20 = node19.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType21 = null;
        node19.setJSType(jSType21);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean27 = node26.isContinue();
        com.google.javascript.rhino.Node node28 = node19.clonePropsFrom(node26);
        node28.setSourceFileForTesting("hi!");
        boolean boolean31 = node28.isIf();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(39, node28);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(54, node13, node32, 48, (int) (byte) 0);
        com.google.javascript.rhino.Node node36 = node3.useSourceInfoIfMissingFrom(node32);
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags38 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        sideEffectFlags38.setMutatesGlobalState();
        sideEffectFlags38.setThrows();
        sideEffectFlags38.setAllFlags();
        sideEffectFlags38.setReturnsTainted();
        boolean boolean43 = sideEffectFlags38.areAllFlagsSet();
        // The following exception was thrown during execution in test generation
        try {
            node3.setSideEffectFlags(sideEffectFlags38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test01757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01757");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isQualifiedName();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isContinue();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node18.setJSType(jSType20);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isContinue();
        com.google.javascript.rhino.Node node27 = node18.clonePropsFrom(node25);
        node13.addChildrenToBack(node18);
        boolean boolean29 = node13.isLocalResultCall();
        com.google.javascript.rhino.Node node30 = node8.copyInformationFromForTree(node13);
        node13.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node33 = node4.clonePropsFrom(node13);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean38 = node37.isLabelName();
        boolean boolean39 = node37.isTrue();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean44 = node43.isContinue();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean49 = node48.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        node48.setJSType(jSType50);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node57 = node48.clonePropsFrom(node55);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (byte) 0, node13, node37, node43, node57, 10, (int) (byte) -1);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean65 = node64.isContinue();
        boolean boolean66 = node64.isDo();
        boolean boolean67 = node57.isEquivalentTo(node64);
        boolean boolean68 = node64.isOptionalArg();
        boolean boolean69 = node64.isWith();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test01758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01758");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker1 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = marker1.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker3 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition4 = marker3.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker5 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = marker5.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker7 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker8 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker9 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker10 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker11 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker12 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList13 = com.google.common.collect.ImmutableList.of(marker0, marker1, marker3, marker5, marker7, marker8, marker9, marker10, marker11, marker12);
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition14 = marker9.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition15 = marker9.getNameNode();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition16 = marker9.getType();
        org.junit.Assert.assertNull(stringPosition2);
        org.junit.Assert.assertNull(stringPosition4);
        org.junit.Assert.assertNull(stringPosition6);
        org.junit.Assert.assertNotNull(markerList13);
        org.junit.Assert.assertNull(nodeSourcePosition14);
        org.junit.Assert.assertNull(nodeSourcePosition15);
        org.junit.Assert.assertNull(typePosition16);
    }

    @Test
    public void test01759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01759");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        boolean boolean6 = node4.isDec();
        boolean boolean7 = node4.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType13 = null;
        node11.setJSType(jSType13);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isContinue();
        com.google.javascript.rhino.Node node20 = node11.clonePropsFrom(node18);
        boolean boolean21 = node20.isQuotedString();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType27 = null;
        node25.setJSType(jSType27);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isContinue();
        com.google.javascript.rhino.Node node34 = node25.clonePropsFrom(node32);
        int int35 = node34.getLineno();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isLabelName();
        boolean boolean41 = node39.isDec();
        boolean boolean42 = node39.isAssign();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isQualifiedName();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean61 = node60.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType62 = null;
        node60.setJSType(jSType62);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean68 = node67.isContinue();
        com.google.javascript.rhino.Node node69 = node60.clonePropsFrom(node67);
        node55.addChildrenToBack(node60);
        boolean boolean71 = node55.isLocalResultCall();
        com.google.javascript.rhino.Node node72 = node50.copyInformationFromForTree(node55);
        node55.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node75 = node46.clonePropsFrom(node55);
        com.google.javascript.rhino.Node[] nodeArray76 = new com.google.javascript.rhino.Node[] { node4, node20, node34, node39, node46 };
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node(0, nodeArray76, (-1), 54);
        boolean boolean80 = node79.isDo();
        boolean boolean81 = node79.isTry();
        boolean boolean82 = node79.isSetterDef();
        boolean boolean83 = node79.isIn();
        boolean boolean84 = node79.isArrayLit();
        // The following exception was thrown during execution in test generation
        try {
            node79.setSideEffectFlags(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(nodeArray76);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test01760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01760");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker1 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = marker1.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker3 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition4 = marker3.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker5 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = marker5.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker7 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker8 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker9 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker10 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker11 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker12 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList13 = com.google.common.collect.ImmutableList.of(marker0, marker1, marker3, marker5, marker7, marker8, marker9, marker10, marker11, marker12);
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition14 = marker9.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition15 = marker9.getName();
        com.google.javascript.rhino.JSDocInfo.Marker marker16 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition17 = marker16.getNameNode();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition18 = marker16.getType();
        com.google.javascript.rhino.JSDocInfo.Marker marker19 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition20 = marker19.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition21 = marker19.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker22 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker23 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition24 = marker23.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker25 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition26 = marker25.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker27 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition28 = marker27.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker29 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker30 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker31 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker32 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker33 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker34 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList35 = com.google.common.collect.ImmutableList.of(marker22, marker23, marker25, marker27, marker29, marker30, marker31, marker32, marker33, marker34);
        com.google.javascript.rhino.JSDocInfo.Marker marker36 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition37 = marker36.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition38 = marker36.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker39 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker40 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition41 = marker40.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker42 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition43 = marker42.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker44 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition45 = marker44.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker46 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker47 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker48 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker49 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker50 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker51 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList52 = com.google.common.collect.ImmutableList.of(marker39, marker40, marker42, marker44, marker46, marker47, marker48, marker49, marker50, marker51);
        com.google.javascript.rhino.JSDocInfo.Marker marker53 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker54 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition55 = marker54.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker56 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition57 = marker56.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker58 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition59 = marker58.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker60 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker61 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker62 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker63 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker64 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker65 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList66 = com.google.common.collect.ImmutableList.of(marker53, marker54, marker56, marker58, marker60, marker61, marker62, marker63, marker64, marker65);
        com.google.javascript.rhino.JSDocInfo.Marker marker67 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker68 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition69 = marker68.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker70 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition71 = marker70.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker72 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition73 = marker72.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker74 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker75 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker76 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker77 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker78 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker79 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList80 = com.google.common.collect.ImmutableList.of(marker67, marker68, marker70, marker72, marker74, marker75, marker76, marker77, marker78, marker79);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition81 = marker78.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.Marker marker82 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker83 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition84 = marker83.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker85 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition86 = marker85.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker87 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition88 = marker87.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker89 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker90 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker91 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker92 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker93 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker94 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList95 = com.google.common.collect.ImmutableList.of(marker82, marker83, marker85, marker87, marker89, marker90, marker91, marker92, marker93, marker94);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList96 = com.google.common.collect.ImmutableList.of(marker9, marker16, marker19, marker25, marker36, marker44, marker56, marker78, marker89);
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition97 = marker78.getDescription();
        org.junit.Assert.assertNull(stringPosition2);
        org.junit.Assert.assertNull(stringPosition4);
        org.junit.Assert.assertNull(stringPosition6);
        org.junit.Assert.assertNotNull(markerList13);
        org.junit.Assert.assertNull(nodeSourcePosition14);
        org.junit.Assert.assertNull(stringPosition15);
        org.junit.Assert.assertNull(nodeSourcePosition17);
        org.junit.Assert.assertNull(typePosition18);
        org.junit.Assert.assertNull(stringPosition20);
        org.junit.Assert.assertNull(stringPosition21);
        org.junit.Assert.assertNull(stringPosition24);
        org.junit.Assert.assertNull(stringPosition26);
        org.junit.Assert.assertNull(stringPosition28);
        org.junit.Assert.assertNotNull(markerList35);
        org.junit.Assert.assertNull(stringPosition37);
        org.junit.Assert.assertNull(stringPosition38);
        org.junit.Assert.assertNull(stringPosition41);
        org.junit.Assert.assertNull(stringPosition43);
        org.junit.Assert.assertNull(stringPosition45);
        org.junit.Assert.assertNotNull(markerList52);
        org.junit.Assert.assertNull(stringPosition55);
        org.junit.Assert.assertNull(stringPosition57);
        org.junit.Assert.assertNull(stringPosition59);
        org.junit.Assert.assertNotNull(markerList66);
        org.junit.Assert.assertNull(stringPosition69);
        org.junit.Assert.assertNull(stringPosition71);
        org.junit.Assert.assertNull(stringPosition73);
        org.junit.Assert.assertNotNull(markerList80);
        org.junit.Assert.assertNull(stringPosition81);
        org.junit.Assert.assertNull(stringPosition84);
        org.junit.Assert.assertNull(stringPosition86);
        org.junit.Assert.assertNull(stringPosition88);
        org.junit.Assert.assertNotNull(markerList95);
        org.junit.Assert.assertNotNull(markerList96);
        org.junit.Assert.assertNull(stringPosition97);
    }

    @Test
    public void test01761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01761");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isContinue();
        boolean boolean19 = node17.isString();
        com.google.javascript.rhino.Node node20 = node4.useSourceInfoFromForTree(node17);
        com.google.javascript.rhino.InputId inputId21 = null;
        node20.setInputId(inputId21);
        java.lang.Object obj24 = node20.getProp((int) (short) 10);
        boolean boolean25 = node20.hasMoreThanOneChild();
        boolean boolean26 = node20.isOr();
        boolean boolean27 = node20.isCatch();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean37 = node36.isQualifiedName();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isContinue();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType48 = null;
        node46.setJSType(jSType48);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean54 = node53.isContinue();
        com.google.javascript.rhino.Node node55 = node46.clonePropsFrom(node53);
        node41.addChildrenToBack(node46);
        boolean boolean57 = node41.isLocalResultCall();
        com.google.javascript.rhino.Node node58 = node36.copyInformationFromForTree(node41);
        node41.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node61 = node32.clonePropsFrom(node41);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean66 = node65.isLabelName();
        boolean boolean67 = node65.isTrue();
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean72 = node71.isContinue();
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean77 = node76.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType78 = null;
        node76.setJSType(jSType78);
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean84 = node83.isContinue();
        com.google.javascript.rhino.Node node85 = node76.clonePropsFrom(node83);
        com.google.javascript.rhino.Node node88 = new com.google.javascript.rhino.Node((int) (byte) 0, node41, node65, node71, node85, 10, (int) (byte) -1);
        node41.putIntProp((int) (short) 0, (int) (byte) -1);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile92 = node41.getStaticSourceFile();
        com.google.javascript.rhino.Node node93 = node20.useSourceInfoFrom(node41);
        com.google.javascript.rhino.Node node94 = node20.removeFirstChild();
        com.google.javascript.rhino.Node node97 = new com.google.javascript.rhino.Node((int) (short) -1, node20, 40, 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertNull(staticSourceFile92);
        org.junit.Assert.assertNotNull(node93);
        org.junit.Assert.assertNull(node94);
    }

    @Test
    public void test01762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01762");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(50);
        node1.putIntProp(2, 32);
        boolean boolean5 = node1.isWith();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test01763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01763");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isQualifiedName();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isContinue();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node18.setJSType(jSType20);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isContinue();
        com.google.javascript.rhino.Node node27 = node18.clonePropsFrom(node25);
        node13.addChildrenToBack(node18);
        boolean boolean29 = node13.isLocalResultCall();
        com.google.javascript.rhino.Node node30 = node8.copyInformationFromForTree(node13);
        node13.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node33 = node4.clonePropsFrom(node13);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean38 = node37.isLabelName();
        boolean boolean39 = node37.isTrue();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean44 = node43.isContinue();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean49 = node48.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        node48.setJSType(jSType50);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node57 = node48.clonePropsFrom(node55);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (byte) 0, node13, node37, node43, node57, 10, (int) (byte) -1);
        node60.addSuppression("");
        com.google.javascript.rhino.Node node63 = node60.getFirstChild();
        com.google.javascript.rhino.Node node64 = node60.removeFirstChild();
        boolean boolean65 = node60.isFromExterns();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test01764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01764");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        boolean boolean2 = jSDocInfo0.hasType();
        java.lang.String str3 = jSDocInfo0.getSourceName();
        boolean boolean4 = jSDocInfo0.isDefine();
        boolean boolean5 = jSDocInfo0.isInterface();
        boolean boolean6 = jSDocInfo0.hasTypedefType();
        boolean boolean7 = jSDocInfo0.isExport();
        boolean boolean8 = jSDocInfo0.isExport();
        java.lang.String str9 = jSDocInfo0.getMeaning();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test01765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01765");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        boolean boolean5 = node3.isDec();
        boolean boolean6 = node3.isNoSideEffectsCall();
        boolean boolean7 = node3.isLocalResultCall();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node8 = node3.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test01766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01766");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(0, 10, 0);
        boolean boolean4 = node3.hasChildren();
        boolean boolean5 = node3.isAssign();
        int int6 = node3.getLineno();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
    }

    @Test
    public void test01767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01767");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        boolean boolean22 = serializableList17.contains((java.lang.Object) (byte) 0);
        boolean boolean23 = serializableList17.isEmpty();
        java.lang.String str24 = serializableList17.toString();
        boolean boolean25 = serializableList17.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.ImmutableList<java.io.Serializable> serializableList28 = serializableList17.subList(4095, 15);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: start index (4095) must not be greater than size (16)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]" + "'", str24, "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test01768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01768");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isContinue();
        boolean boolean5 = node3.isBlock();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean10 = node9.isQualifiedName();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean15 = node14.isContinue();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean20 = node19.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType21 = null;
        node19.setJSType(jSType21);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean27 = node26.isContinue();
        com.google.javascript.rhino.Node node28 = node19.clonePropsFrom(node26);
        node14.addChildrenToBack(node19);
        boolean boolean30 = node14.isLocalResultCall();
        com.google.javascript.rhino.Node node31 = node9.copyInformationFromForTree(node14);
        boolean boolean32 = node9.isStringKey();
        java.lang.String str33 = node3.checkTreeEquals(node9);
        com.google.javascript.rhino.JSDocInfo jSDocInfo34 = null;
        node3.setJSDocInfo(jSDocInfo34);
        boolean boolean36 = node3.isWhile();
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString("hi!", (int) '4', 52);
        com.google.javascript.rhino.Node node41 = node40.getParent();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(32, (int) (byte) 10, (int) '#');
        // The following exception was thrown during execution in test generation
        try {
            node3.addChildrenAfter(node40, node45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNull(node41);
    }

    @Test
    public void test01769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01769");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isInstanceOf();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = new com.google.javascript.rhino.JSTypeExpression(node3, "Not declared as a type name");
        com.google.javascript.rhino.JSDocInfo jSDocInfo7 = new com.google.javascript.rhino.JSDocInfo();
        int int8 = jSDocInfo7.getImplementedInterfaceCount();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection9 = jSDocInfo7.getTypeNodes();
        com.google.common.collect.ImmutableList<java.lang.String> strList10 = jSDocInfo7.getTemplateTypeNames();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression11 = jSDocInfo7.getBaseType();
        boolean boolean12 = jSTypeExpression6.equals((java.lang.Object) jSDocInfo7);
        boolean boolean13 = jSTypeExpression6.isVarArgs();
        com.google.javascript.rhino.JSDocInfo.Marker marker14 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker15 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition16 = marker15.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker17 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition18 = marker17.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker19 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition20 = marker19.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker21 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker22 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker23 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker24 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker25 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker26 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList27 = com.google.common.collect.ImmutableList.of(marker14, marker15, marker17, marker19, marker21, marker22, marker23, marker24, marker25, marker26);
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition28 = marker23.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition29 = marker23.getNameNode();
        boolean boolean30 = jSTypeExpression6.equals((java.lang.Object) nodeSourcePosition29);
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry32 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.JSType jSType33 = jSTypeExpression6.evaluate(jSTypeStaticScope31, jSTypeRegistry32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(nodeCollection9);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNull(jSTypeExpression11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(stringPosition16);
        org.junit.Assert.assertNull(stringPosition18);
        org.junit.Assert.assertNull(stringPosition20);
        org.junit.Assert.assertNotNull(markerList27);
        org.junit.Assert.assertNull(nodeSourcePosition28);
        org.junit.Assert.assertNull(nodeSourcePosition29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test01770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01770");
        com.google.javascript.rhino.Node[] nodeArray4 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node(51, nodeArray4, 48, 32);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(42, nodeArray4, 32, 12);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node(36, nodeArray4);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(12, nodeArray4);
        boolean boolean14 = node12.getBooleanProp(32);
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newString("Unknown class name");
        com.google.javascript.rhino.Node node17 = node16.getLastSibling();
        com.google.javascript.rhino.Node node19 = node17.getAncestor(38);
        // The following exception was thrown during execution in test generation
        try {
            node12.addChildrenToFront(node19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray4);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(node19);
    }

    @Test
    public void test01771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01771");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean6 = jSDocInfo5.hasEnumParameterType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo5.getBaseType();
        node3.setJSDocInfo(jSDocInfo5);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isQuotedString();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType19 = null;
        node17.setJSType(jSType19);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean25 = node24.isContinue();
        com.google.javascript.rhino.Node node26 = node17.clonePropsFrom(node24);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean31 = node30.isContinue();
        boolean boolean32 = node30.isString();
        com.google.javascript.rhino.Node node33 = node17.useSourceInfoFromForTree(node30);
        com.google.javascript.rhino.InputId inputId34 = null;
        node33.setInputId(inputId34);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString(37, "hi!", (int) (byte) 100, (int) (short) 100);
        int int42 = node40.getIntProp(30);
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = new com.google.javascript.rhino.JSDocInfo();
        int int44 = jSDocInfo43.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility45 = null;
        jSDocInfo43.setVisibility(visibility45);
        boolean boolean47 = jSDocInfo43.hasFileOverview();
        boolean boolean48 = jSDocInfo43.isJavaDispatch();
        boolean boolean49 = jSDocInfo43.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList50 = jSDocInfo43.getExtendedInterfaces();
        java.lang.String str51 = jSDocInfo43.getLicense();
        boolean boolean52 = jSDocInfo43.hasBaseType();
        boolean boolean53 = jSDocInfo43.isNoTypeCheck();
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = new com.google.javascript.rhino.JSDocInfo();
        int int55 = jSDocInfo54.getImplementedInterfaceCount();
        boolean boolean56 = jSDocInfo54.isExterns();
        com.google.javascript.rhino.JSDocInfo jSDocInfo58 = new com.google.javascript.rhino.JSDocInfo();
        int int59 = jSDocInfo58.getImplementedInterfaceCount();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean64 = node63.isQualifiedName();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean69 = node68.isContinue();
        boolean boolean70 = node68.isDo();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList71 = com.google.common.collect.ImmutableList.of((java.io.Serializable) jSDocInfo5, (java.io.Serializable) boolean13, (java.io.Serializable) node33, (java.io.Serializable) int42, (java.io.Serializable) boolean53, (java.io.Serializable) boolean56, (java.io.Serializable) ' ', (java.io.Serializable) jSDocInfo58, (java.io.Serializable) node63, (java.io.Serializable) boolean70);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable72 = node63.children();
        com.google.javascript.rhino.Node node73 = node63.removeFirstChild();
        com.google.javascript.rhino.Node node74 = node63.removeFirstChild();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(serializableList71);
        org.junit.Assert.assertNotNull(nodeIterable72);
        org.junit.Assert.assertNull(node73);
        org.junit.Assert.assertNull(node74);
    }

    @Test
    public void test01772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01772");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) 'a', "([0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30])");
        org.junit.Assert.assertNotNull(node2);
    }

    @Test
    public void test01773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01773");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.hasFileOverview();
        boolean boolean5 = jSDocInfo0.isJavaDispatch();
        boolean boolean6 = jSDocInfo0.hasType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getParameterType("");
        boolean boolean9 = jSDocInfo0.hasReturnType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getReturnType();
        java.lang.String str11 = jSDocInfo0.getReturnDescription();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test01774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01774");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newString("[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]", (int) ' ', 8);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean8 = node7.isLabelName();
        boolean boolean9 = node7.isDec();
        boolean boolean10 = node7.isNoSideEffectsCall();
        boolean boolean11 = node7.isIf();
        boolean boolean12 = node7.isFalse();
        boolean boolean13 = node7.isObjectLit();
        node3.addChildToFront(node7);
        node3.removeProp(0);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean21 = node20.isContinue();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType27 = null;
        node25.setJSType(jSType27);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isContinue();
        com.google.javascript.rhino.Node node34 = node25.clonePropsFrom(node32);
        node20.addChildrenToBack(node25);
        boolean boolean36 = node20.isLocalResultCall();
        int int37 = node20.getLength();
        boolean boolean38 = node20.isSwitch();
        node20.putBooleanProp(32, false);
        boolean boolean42 = node20.isNull();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isLabelName();
        boolean boolean48 = node46.isDec();
        boolean boolean49 = node46.isAssign();
        boolean boolean50 = node46.isIn();
        boolean boolean51 = node46.isThis();
        boolean boolean52 = node46.isOr();
        com.google.javascript.rhino.Node node53 = node20.useSourceInfoFrom(node46);
        com.google.javascript.rhino.Node node54 = node46.getLastSibling();
        boolean boolean55 = node46.isWhile();
        com.google.javascript.rhino.Node node56 = node3.clonePropsFrom(node46);
        com.google.javascript.rhino.Node node57 = node56.getLastChild();
        // The following exception was thrown during execution in test generation
        try {
            node57.setString("java.io.IOException: Unknown class name");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node57);
    }

    @Test
    public void test01775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01775");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        int int7 = node3.getSourceOffset();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isQualifiedName();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean22 = node21.isContinue();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean27 = node26.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType28 = null;
        node26.setJSType(jSType28);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean34 = node33.isContinue();
        com.google.javascript.rhino.Node node35 = node26.clonePropsFrom(node33);
        node21.addChildrenToBack(node26);
        boolean boolean37 = node21.isLocalResultCall();
        com.google.javascript.rhino.Node node38 = node16.copyInformationFromForTree(node21);
        node21.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node41 = node12.clonePropsFrom(node21);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean46 = node45.isLabelName();
        boolean boolean47 = node45.isTrue();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isContinue();
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean57 = node56.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType58 = null;
        node56.setJSType(jSType58);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean64 = node63.isContinue();
        com.google.javascript.rhino.Node node65 = node56.clonePropsFrom(node63);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (byte) 0, node21, node45, node51, node65, 10, (int) (byte) -1);
        node21.putIntProp((int) (short) 0, (int) (byte) -1);
        com.google.javascript.rhino.Node node72 = node3.useSourceInfoFrom(node21);
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean77 = node76.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType78 = null;
        node76.setJSType(jSType78);
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean84 = node83.isContinue();
        com.google.javascript.rhino.Node node85 = node76.clonePropsFrom(node83);
        com.google.javascript.rhino.Node node89 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean90 = node89.isContinue();
        boolean boolean91 = node89.isString();
        boolean boolean92 = node89.isStringKey();
        com.google.javascript.rhino.Node node93 = node76.copyInformationFrom(node89);
        com.google.javascript.rhino.Node node94 = node93.getNext();
        com.google.javascript.rhino.Node node95 = node3.useSourceInfoIfMissingFrom(node93);
        boolean boolean96 = node3.isVoid();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(node93);
        org.junit.Assert.assertNull(node94);
        org.junit.Assert.assertNotNull(node95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test01776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01776");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        boolean boolean14 = node13.isQuotedString();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        boolean boolean20 = node18.isDec();
        boolean boolean21 = node18.isScript();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(0, node13, node18, node25, 0, (int) (short) 0);
        boolean boolean29 = node13.isArrayLit();
        node13.setIsSyntheticBlock(true);
        java.lang.Object obj33 = node13.getProp(41);
        boolean boolean34 = node13.isOnlyModifiesThisCall();
        boolean boolean35 = node13.isNot();
        boolean boolean36 = node13.isObjectLit();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags38 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        sideEffectFlags38.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags41 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        boolean boolean42 = sideEffectFlags41.areAllFlagsSet();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags44 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        boolean boolean45 = sideEffectFlags44.areAllFlagsSet();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags47 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        sideEffectFlags47.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags50 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags52 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        sideEffectFlags52.setMutatesGlobalState();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags55 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node.SideEffectFlags> sideEffectFlagsList56 = com.google.common.collect.ImmutableList.of(sideEffectFlags38, sideEffectFlags41, sideEffectFlags44, sideEffectFlags47, sideEffectFlags50, sideEffectFlags52, sideEffectFlags55);
        sideEffectFlags50.setAllFlags();
        sideEffectFlags50.clearSideEffectFlags();
        sideEffectFlags50.clearAllFlags();
        sideEffectFlags50.setAllFlags();
        // The following exception was thrown during execution in test generation
        try {
            node13.setSideEffectFlags(sideEffectFlags50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(obj33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(sideEffectFlagsList56);
    }

    @Test
    public void test01777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01777");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isQualifiedName();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isContinue();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        node32.setJSType(jSType34);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isContinue();
        com.google.javascript.rhino.Node node41 = node32.clonePropsFrom(node39);
        node27.addChildrenToBack(node32);
        boolean boolean43 = node27.isLocalResultCall();
        com.google.javascript.rhino.Node node44 = node22.copyInformationFromForTree(node27);
        boolean boolean45 = serializableList17.contains((java.lang.Object) node27);
        int int46 = node27.getSourcePosition();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isLabelName();
        boolean boolean52 = node50.isDec();
        boolean boolean53 = node50.isNoSideEffectsCall();
        node27.addChildToBack(node50);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable55 = node27.getAncestors();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor56 = ancestorIterable55.iterator();
        java.util.Iterator<com.google.javascript.rhino.Node> nodeItor57 = ancestorIterable55.iterator();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(ancestorIterable55);
        org.junit.Assert.assertNotNull(nodeItor56);
        org.junit.Assert.assertNotNull(nodeItor57);
    }

    @Test
    public void test01778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01778");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isContinue();
        boolean boolean18 = node16.isString();
        com.google.javascript.rhino.Node node19 = node3.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.InputId inputId20 = null;
        node19.setInputId(inputId20);
        java.lang.Object obj23 = node19.getProp((int) (short) 10);
        com.google.javascript.rhino.jstype.JSType jSType24 = node19.getJSType();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isContinue();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean34 = node33.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType35 = null;
        node33.setJSType(jSType35);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean41 = node40.isContinue();
        com.google.javascript.rhino.Node node42 = node33.clonePropsFrom(node40);
        node28.addChildrenToBack(node33);
        boolean boolean44 = node28.isLocalResultCall();
        boolean boolean45 = node28.isInstanceOf();
        com.google.javascript.rhino.Node node46 = node19.clonePropsFrom(node28);
        com.google.javascript.rhino.Node node47 = node28.cloneNode();
        boolean boolean48 = node28.isNE();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test01779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01779");
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder0 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>>();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumList1 = ternaryValueEnumBuilder0.build();
        com.google.javascript.rhino.jstype.TernaryValue[] ternaryValueArray2 = new com.google.javascript.rhino.jstype.TernaryValue[] {};
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder3 = ternaryValueEnumBuilder0.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>[]) ternaryValueArray2);
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumList4 = ternaryValueEnumBuilder3.build();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue5 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue6 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue7 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue8 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList9 = com.google.common.collect.ImmutableList.of(ternaryValue5, ternaryValue6, ternaryValue7, ternaryValue8);
        java.lang.String str10 = ternaryValue7.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue11 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue12 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue13 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue14 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList15 = com.google.common.collect.ImmutableList.of(ternaryValue11, ternaryValue12, ternaryValue13, ternaryValue14);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue16 = ternaryValue7.or(ternaryValue12);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue17 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue18 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue19 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue20 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList21 = com.google.common.collect.ImmutableList.of(ternaryValue17, ternaryValue18, ternaryValue19, ternaryValue20);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue22 = ternaryValue12.xor(ternaryValue17);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder23 = ternaryValueEnumBuilder3.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>) ternaryValue17);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue24 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue26 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue27 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue28 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList29 = com.google.common.collect.ImmutableList.of(ternaryValue25, ternaryValue26, ternaryValue27, ternaryValue28);
        java.lang.String str30 = ternaryValue27.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue31 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue32 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue33 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue34 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList35 = com.google.common.collect.ImmutableList.of(ternaryValue31, ternaryValue32, ternaryValue33, ternaryValue34);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue36 = ternaryValue27.or(ternaryValue32);
        java.lang.String str37 = ternaryValue32.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue38 = ternaryValue24.xor(ternaryValue32);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue39 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue40 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue41 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue42 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList43 = com.google.common.collect.ImmutableList.of(ternaryValue39, ternaryValue40, ternaryValue41, ternaryValue42);
        java.lang.String str44 = ternaryValue41.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue45 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue46 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue47 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue48 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList49 = com.google.common.collect.ImmutableList.of(ternaryValue45, ternaryValue46, ternaryValue47, ternaryValue48);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue50 = ternaryValue41.or(ternaryValue46);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue51 = ternaryValue50.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue52 = ternaryValue50.not();
        boolean boolean54 = ternaryValue52.toBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue55 = ternaryValue38.xor(ternaryValue52);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder56 = ternaryValueEnumBuilder3.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>) ternaryValue55);
        java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>[] ternaryValueEnumArray57 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder58 = ternaryValueEnumBuilder56.add(ternaryValueEnumArray57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(ternaryValueEnumList1);
        org.junit.Assert.assertNotNull(ternaryValueArray2);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder3);
        org.junit.Assert.assertNotNull(ternaryValueEnumList4);
        org.junit.Assert.assertNotNull(ternaryValue5);
        org.junit.Assert.assertNotNull(ternaryValue6);
        org.junit.Assert.assertNotNull(ternaryValue7);
        org.junit.Assert.assertNotNull(ternaryValue8);
        org.junit.Assert.assertNotNull(ternaryValueList9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "true" + "'", str10, "true");
        org.junit.Assert.assertNotNull(ternaryValue11);
        org.junit.Assert.assertNotNull(ternaryValue12);
        org.junit.Assert.assertNotNull(ternaryValue13);
        org.junit.Assert.assertNotNull(ternaryValue14);
        org.junit.Assert.assertNotNull(ternaryValueList15);
        org.junit.Assert.assertNotNull(ternaryValue16);
        org.junit.Assert.assertNotNull(ternaryValue17);
        org.junit.Assert.assertNotNull(ternaryValue18);
        org.junit.Assert.assertNotNull(ternaryValue19);
        org.junit.Assert.assertNotNull(ternaryValue20);
        org.junit.Assert.assertNotNull(ternaryValueList21);
        org.junit.Assert.assertNotNull(ternaryValue22);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder23);
        org.junit.Assert.assertNotNull(ternaryValue24);
        org.junit.Assert.assertNotNull(ternaryValue25);
        org.junit.Assert.assertNotNull(ternaryValue26);
        org.junit.Assert.assertNotNull(ternaryValue27);
        org.junit.Assert.assertNotNull(ternaryValue28);
        org.junit.Assert.assertNotNull(ternaryValueList29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "true" + "'", str30, "true");
        org.junit.Assert.assertNotNull(ternaryValue31);
        org.junit.Assert.assertNotNull(ternaryValue32);
        org.junit.Assert.assertNotNull(ternaryValue33);
        org.junit.Assert.assertNotNull(ternaryValue34);
        org.junit.Assert.assertNotNull(ternaryValueList35);
        org.junit.Assert.assertNotNull(ternaryValue36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "true" + "'", str37, "true");
        org.junit.Assert.assertNotNull(ternaryValue38);
        org.junit.Assert.assertNotNull(ternaryValue39);
        org.junit.Assert.assertNotNull(ternaryValue40);
        org.junit.Assert.assertNotNull(ternaryValue41);
        org.junit.Assert.assertNotNull(ternaryValue42);
        org.junit.Assert.assertNotNull(ternaryValueList43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "true" + "'", str44, "true");
        org.junit.Assert.assertNotNull(ternaryValue45);
        org.junit.Assert.assertNotNull(ternaryValue46);
        org.junit.Assert.assertNotNull(ternaryValue47);
        org.junit.Assert.assertNotNull(ternaryValue48);
        org.junit.Assert.assertNotNull(ternaryValueList49);
        org.junit.Assert.assertNotNull(ternaryValue50);
        org.junit.Assert.assertNotNull(ternaryValue51);
        org.junit.Assert.assertNotNull(ternaryValue52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(ternaryValue55);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder56);
    }

    @Test
    public void test01780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01780");
        java.lang.String[] strArray3 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        java.lang.Object[] objArray6 = strSet4.toArray();
        java.lang.String[] strArray10 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        java.lang.Object[] objArray13 = strSet11.toArray();
        java.lang.String[] strArray17 = new java.lang.String[] { "", "", "hi!" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        java.lang.String[] strArray23 = new java.lang.String[] { "Unknown class name", "", "true" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        java.lang.String[] strArray29 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        java.lang.Object[] objArray32 = strSet30.toArray();
        java.lang.String[] strArray36 = new java.lang.String[] { "", "Unknown class name", "true" };
        java.util.ArrayList<java.lang.String> strList37 = new java.util.ArrayList<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList37, strArray36);
        java.lang.String[] strArray40 = new java.lang.String[] { "true" };
        java.util.ArrayList<java.lang.String> strList41 = new java.util.ArrayList<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList41, strArray40);
        java.lang.String[] strArray46 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet47 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet47, strArray46);
        java.lang.Object[] objArray49 = strSet47.toArray();
        java.lang.String[] strArray53 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet54 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet54, strArray53);
        java.lang.Object[] objArray56 = strSet54.toArray();
        java.lang.String[] strArray60 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet61 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet61, strArray60);
        java.lang.Object[] objArray63 = strSet61.toArray();
        java.lang.String[] strArray68 = new java.lang.String[] { "hi!", "true", "Unknown class name", "Unknown class name" };
        java.util.ArrayList<java.lang.String> strList69 = new java.util.ArrayList<java.lang.String>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList69, strArray68);
        java.lang.String[] strArray73 = new java.lang.String[] { "Unknown class name", "true" };
        java.util.ArrayList<java.lang.String> strList74 = new java.util.ArrayList<java.lang.String>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList74, strArray73);
        java.util.AbstractCollection[] abstractCollectionArray77 = new java.util.AbstractCollection[0];
        @SuppressWarnings("unchecked")
        java.util.AbstractCollection<java.lang.String>[] strCollectionArray78 = (java.util.AbstractCollection<java.lang.String>[]) abstractCollectionArray77;
        com.google.common.collect.ImmutableList<java.util.AbstractCollection<java.lang.String>> strCollectionList79 = com.google.common.collect.ImmutableList.of((java.util.AbstractCollection<java.lang.String>) strSet4, (java.util.AbstractCollection<java.lang.String>) strSet11, (java.util.AbstractCollection<java.lang.String>) strList18, (java.util.AbstractCollection<java.lang.String>) strList24, (java.util.AbstractCollection<java.lang.String>) strSet30, (java.util.AbstractCollection<java.lang.String>) strList37, (java.util.AbstractCollection<java.lang.String>) strList41, (java.util.AbstractCollection<java.lang.String>) strSet47, (java.util.AbstractCollection<java.lang.String>) strSet54, (java.util.AbstractCollection<java.lang.String>) strSet61, (java.util.AbstractCollection<java.lang.String>) strList69, (java.util.AbstractCollection<java.lang.String>) strList74, (java.util.AbstractCollection<java.lang.String>[]) abstractCollectionArray77);
        java.lang.String[] strArray83 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet84 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet84, strArray83);
        java.lang.Object[] objArray86 = strSet84.toArray();
        java.lang.Object[] objArray87 = strSet47.toArray(objArray86);
        int int88 = strSet47.size();
        java.lang.Object[] objArray89 = strSet47.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator90 = strSet47.spliterator();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(strArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(abstractCollectionArray77);
        org.junit.Assert.assertNotNull(strCollectionArray78);
        org.junit.Assert.assertNotNull(strCollectionList79);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(objArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray86), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray86), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[Unknown class name, ]");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 2 + "'", int88 == 2);
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(strSpliterator90);
    }

    @Test
    public void test01781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01781");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isContinue();
        boolean boolean18 = node16.isString();
        com.google.javascript.rhino.Node node19 = node3.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.InputId inputId20 = null;
        node19.setInputId(inputId20);
        java.lang.Object obj23 = node19.getProp((int) (short) 10);
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node19.getJSDocInfo();
        java.io.Serializable[] serializableArray41 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList42 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray41);
        boolean boolean43 = serializableList42.isEmpty();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean48 = node47.isQualifiedName();
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean53 = node52.isContinue();
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean58 = node57.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType59 = null;
        node57.setJSType(jSType59);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean65 = node64.isContinue();
        com.google.javascript.rhino.Node node66 = node57.clonePropsFrom(node64);
        node52.addChildrenToBack(node57);
        boolean boolean68 = node52.isLocalResultCall();
        com.google.javascript.rhino.Node node69 = node47.copyInformationFromForTree(node52);
        boolean boolean70 = serializableList42.contains((java.lang.Object) node52);
        int int71 = node52.getSourcePosition();
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean76 = node75.isLabelName();
        boolean boolean77 = node75.isDec();
        boolean boolean78 = node75.isNoSideEffectsCall();
        node52.addChildToBack(node75);
        boolean boolean80 = node75.isVoid();
        boolean boolean81 = node75.isEmpty();
        com.google.javascript.rhino.Node node82 = node75.cloneNode();
        boolean boolean83 = node19.hasChild(node75);
        com.google.javascript.rhino.Node node84 = node75.removeChildren();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertNotNull(serializableArray41);
        org.junit.Assert.assertNotNull(serializableList42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(node84);
    }

    @Test
    public void test01782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01782");
        java.lang.String[] strArray3 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        java.lang.Object[] objArray6 = strSet4.toArray();
        java.io.Serializable[] serializableArray23 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList24 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray23);
        boolean boolean25 = serializableList24.isEmpty();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean30 = node29.isQualifiedName();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean35 = node34.isContinue();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType41 = null;
        node39.setJSType(jSType41);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isContinue();
        com.google.javascript.rhino.Node node48 = node39.clonePropsFrom(node46);
        node34.addChildrenToBack(node39);
        boolean boolean50 = node34.isLocalResultCall();
        com.google.javascript.rhino.Node node51 = node29.copyInformationFromForTree(node34);
        boolean boolean52 = serializableList24.contains((java.lang.Object) node34);
        java.util.Iterator<java.io.Serializable> serializableItor53 = serializableList24.iterator();
        boolean boolean54 = strSet4.containsAll((java.util.Collection<java.io.Serializable>) serializableList24);
        java.lang.Object[] objArray55 = serializableList24.toArray();
        boolean boolean56 = serializableList24.isEmpty();
        java.lang.Object[] objArray57 = serializableList24.toArray();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList58 = serializableList24.reverse();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList59 = serializableList24.asList();
        com.google.javascript.rhino.JSDocInfo jSDocInfo60 = new com.google.javascript.rhino.JSDocInfo();
        int int61 = jSDocInfo60.getImplementedInterfaceCount();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection62 = jSDocInfo60.getTypeNodes();
        com.google.common.collect.ImmutableList<java.lang.String> strList63 = jSDocInfo60.getTemplateTypeNames();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean64 = serializableList59.add((java.io.Serializable) jSDocInfo60);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(serializableArray23);
        org.junit.Assert.assertNotNull(serializableList24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(serializableItor53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertNotNull(serializableList58);
        org.junit.Assert.assertNotNull(serializableList59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(nodeCollection62);
        org.junit.Assert.assertNotNull(strList63);
    }

    @Test
    public void test01783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01783");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo0.setVisibility(visibility5);
        java.lang.String str7 = jSDocInfo0.getVersion();
        boolean boolean8 = jSDocInfo0.containsDeclaration();
        java.lang.String str9 = jSDocInfo0.getFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getTypedefType();
        boolean boolean11 = jSDocInfo0.isOverride();
        jSDocInfo0.addSuppression("CALL hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression15 = jSDocInfo0.getParameterType("(InputId: true)");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression16 = jSDocInfo0.getReturnType();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSTypeExpression15);
        org.junit.Assert.assertNull(jSTypeExpression16);
    }

    @Test
    public void test01784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01784");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream21 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream22 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream23 = serializableList17.parallelStream();
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = new com.google.javascript.rhino.JSDocInfo();
        int int25 = jSDocInfo24.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet26 = jSDocInfo24.getParameterNames();
        boolean boolean27 = serializableList17.contains((java.lang.Object) strSet26);
        java.util.Spliterator<java.io.Serializable> serializableSpliterator28 = serializableList17.spliterator();
        java.util.Iterator<java.io.Serializable> serializableItor29 = serializableList17.iterator();
        java.io.Serializable[] serializableArray46 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList47 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray46);
        boolean boolean48 = serializableList47.isEmpty();
        boolean boolean50 = serializableList47.contains((java.lang.Object) 52);
        boolean boolean52 = serializableList47.contains((java.lang.Object) (byte) 0);
        boolean boolean53 = serializableList17.containsAll((java.util.Collection<java.io.Serializable>) serializableList47);
        java.io.Serializable[] serializableArray70 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList71 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray70);
        boolean boolean72 = serializableList71.isEmpty();
        boolean boolean74 = serializableList71.contains((java.lang.Object) 52);
        boolean boolean76 = serializableList71.contains((java.lang.Object) (byte) 0);
        boolean boolean77 = serializableList47.containsAll((java.util.Collection<java.io.Serializable>) serializableList71);
        com.google.common.collect.UnmodifiableIterator<java.io.Serializable> serializableItor78 = serializableList47.iterator();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList79 = serializableList47.asList();
        com.google.common.collect.UnmodifiableListIterator<java.io.Serializable> serializableItor81 = serializableList79.listIterator(0);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet84 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean86 = booleanLiteralSet84.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet88 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        boolean boolean90 = booleanLiteralSet88.contains(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet92 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(false);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet93 = booleanLiteralSet88.intersection(booleanLiteralSet92);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet94 = booleanLiteralSet84.intersection(booleanLiteralSet92);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet96 = com.google.javascript.rhino.jstype.BooleanLiteralSet.get(true);
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet97 = booleanLiteralSet94.union(booleanLiteralSet96);
        // The following exception was thrown during execution in test generation
        try {
            serializableList79.add((int) (byte) -1, (java.io.Serializable) booleanLiteralSet97);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableStream21);
        org.junit.Assert.assertNotNull(serializableStream22);
        org.junit.Assert.assertNotNull(serializableStream23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(serializableSpliterator28);
        org.junit.Assert.assertNotNull(serializableItor29);
        org.junit.Assert.assertNotNull(serializableArray46);
        org.junit.Assert.assertNotNull(serializableList47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(serializableArray70);
        org.junit.Assert.assertNotNull(serializableList71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(serializableItor78);
        org.junit.Assert.assertNotNull(serializableList79);
        org.junit.Assert.assertNotNull(serializableItor81);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet84 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet84.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet88 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet88.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet92 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet92.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet93 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet93.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet94 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE + "'", booleanLiteralSet94.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.FALSE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet96 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE + "'", booleanLiteralSet96.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.TRUE));
        org.junit.Assert.assertTrue("'" + booleanLiteralSet97 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet97.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
    }

    @Test
    public void test01785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01785");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable13 = node12.children();
        boolean boolean14 = node12.isNull();
        boolean boolean15 = node12.isThis();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean21 = node20.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType22 = null;
        node20.setJSType(jSType22);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isContinue();
        com.google.javascript.rhino.Node node29 = node20.clonePropsFrom(node27);
        node29.setSourceFileForTesting("hi!");
        boolean boolean32 = node29.isIf();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (byte) 1, (int) (byte) 10, 50);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable37 = node36.siblings();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (byte) -1, node29, node36, 52, (int) (byte) -1);
        boolean boolean41 = node29.isNew();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node42 = node12.getChildBefore(node29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(nodeIterable13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(nodeIterable37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test01786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01786");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream21 = serializableList17.stream();
        java.io.Serializable[] serializableArray38 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList39 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray38);
        boolean boolean40 = serializableList39.isEmpty();
        boolean boolean42 = serializableList39.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream43 = serializableList39.stream();
        boolean boolean44 = serializableList17.containsAll((java.util.Collection<java.io.Serializable>) serializableList39);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean54 = node53.isQualifiedName();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean59 = node58.isContinue();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean64 = node63.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType65 = null;
        node63.setJSType(jSType65);
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean71 = node70.isContinue();
        com.google.javascript.rhino.Node node72 = node63.clonePropsFrom(node70);
        node58.addChildrenToBack(node63);
        boolean boolean74 = node58.isLocalResultCall();
        com.google.javascript.rhino.Node node75 = node53.copyInformationFromForTree(node58);
        node58.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node78 = node49.clonePropsFrom(node58);
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean83 = node82.isInstanceOf();
        boolean boolean84 = node82.isComma();
        boolean boolean85 = node49.isEquivalentTo(node82);
        boolean boolean86 = node82.isComma();
        com.google.javascript.rhino.Node node90 = new com.google.javascript.rhino.Node(0, 10, 0);
        com.google.javascript.rhino.Node node93 = new com.google.javascript.rhino.Node(51, node82, node90, (int) (short) 10, (int) ' ');
        int int94 = serializableList17.lastIndexOf((java.lang.Object) node93);
        com.google.javascript.rhino.Node node95 = node93.getLastSibling();
        boolean boolean96 = node95.isFalse();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableStream21);
        org.junit.Assert.assertNotNull(serializableArray38);
        org.junit.Assert.assertNotNull(serializableList39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(serializableStream43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
        org.junit.Assert.assertNotNull(node95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test01787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01787");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.hasFileOverview();
        boolean boolean5 = jSDocInfo0.isJavaDispatch();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean7 = jSDocInfo0.hasTypedefType();
        java.lang.String str8 = jSDocInfo0.getReturnDescription();
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newString("Unknown class name");
        com.google.javascript.rhino.Node node11 = node10.getLastSibling();
        jSDocInfo0.setAssociatedNode(node11);
        java.util.Collection<java.lang.String> strCollection13 = jSDocInfo0.getAuthors();
        boolean boolean14 = jSDocInfo0.isConsistentIdGenerator();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(strCollection13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test01788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01788");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isContinue();
        boolean boolean19 = node17.isString();
        com.google.javascript.rhino.Node node20 = node4.useSourceInfoFromForTree(node17);
        com.google.javascript.rhino.InputId inputId21 = null;
        node20.setInputId(inputId21);
        java.lang.Object obj24 = node20.getProp((int) (short) 10);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        node28.setJSType(jSType30);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isContinue();
        com.google.javascript.rhino.Node node37 = node28.clonePropsFrom(node35);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isContinue();
        boolean boolean43 = node41.isString();
        com.google.javascript.rhino.Node node44 = node28.useSourceInfoFromForTree(node41);
        com.google.javascript.rhino.InputId inputId45 = null;
        node44.setInputId(inputId45);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isQualifiedName();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean61 = node60.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType62 = null;
        node60.setJSType(jSType62);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean68 = node67.isContinue();
        com.google.javascript.rhino.Node node69 = node60.clonePropsFrom(node67);
        node55.addChildrenToBack(node60);
        boolean boolean71 = node55.isLocalResultCall();
        com.google.javascript.rhino.Node node72 = node50.copyInformationFromForTree(node55);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(0, node20, node44, node55, (int) (short) 10, 53);
        boolean boolean76 = node44.isCatch();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable77 = node44.getAncestors();
        com.google.javascript.rhino.jstype.JSType jSType78 = node44.getJSType();
        node44.setWasEmptyNode(false);
        boolean boolean81 = node44.isDefaultCase();
        node44.setLineno((int) '4');
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(ancestorIterable77);
        org.junit.Assert.assertNull(jSType78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test01789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01789");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getStartLine();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isQualifiedName();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isContinue();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean22 = node21.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType23 = null;
        node21.setJSType(jSType23);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isContinue();
        com.google.javascript.rhino.Node node30 = node21.clonePropsFrom(node28);
        node16.addChildrenToBack(node21);
        boolean boolean32 = node16.isLocalResultCall();
        com.google.javascript.rhino.Node node33 = node11.copyInformationFromForTree(node16);
        node16.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node36 = node7.clonePropsFrom(node16);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean41 = node40.isLabelName();
        boolean boolean42 = node40.isTrue();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isContinue();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType53 = null;
        node51.setJSType(jSType53);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean59 = node58.isContinue();
        com.google.javascript.rhino.Node node60 = node51.clonePropsFrom(node58);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (byte) 0, node16, node40, node46, node60, 10, (int) (byte) -1);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) -1, node63);
        typePosition0.setItem(node63);
        com.google.javascript.rhino.Node node66 = typePosition0.getItem();
        com.google.javascript.rhino.Node node67 = typePosition0.getItem();
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean72 = node71.isContinue();
        boolean boolean73 = node71.isString();
        com.google.javascript.rhino.Node node77 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean78 = node77.isLabelName();
        boolean boolean79 = node77.isDec();
        boolean boolean80 = node77.isAssign();
        boolean boolean81 = node71.isEquivalentTo(node77);
        int int82 = node67.getIndexOfChild(node71);
        int int83 = node71.getCharno();
        node71.setSourceEncodedPositionForTree(43);
        boolean boolean86 = node71.isUnscopedQualifiedName();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test01790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01790");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        java.lang.String str3 = jSDocInfo0.getLendsName();
        boolean boolean4 = jSDocInfo0.isNoShadow();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getParameterType("CALL hi!");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getTypedefType();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertNull(jSTypeExpression7);
    }

    @Test
    public void test01791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01791");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isContinue();
        boolean boolean5 = node3.isDo();
        node3.setSourceEncodedPosition(2);
        int int8 = node3.getSideEffectFlags();
        boolean boolean9 = node3.isNoSideEffectsCall();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test01792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01792");
        java.io.IOException iOException0 = new java.io.IOException();
        java.io.IOException iOException1 = new java.io.IOException((java.lang.Throwable) iOException0);
        java.io.IOException iOException2 = new java.io.IOException();
        java.io.IOException iOException3 = new java.io.IOException((java.lang.Throwable) iOException2);
        iOException0.addSuppressed((java.lang.Throwable) iOException2);
        java.io.IOException iOException5 = new java.io.IOException((java.lang.Throwable) iOException2);
        java.io.IOException iOException6 = new java.io.IOException();
        java.io.IOException iOException7 = new java.io.IOException((java.lang.Throwable) iOException6);
        java.io.IOException iOException8 = new java.io.IOException((java.lang.Throwable) iOException7);
        java.lang.Throwable[] throwableArray9 = iOException7.getSuppressed();
        java.io.IOException iOException11 = new java.io.IOException("Unknown class name");
        java.io.IOException iOException12 = new java.io.IOException();
        java.io.IOException iOException13 = new java.io.IOException((java.lang.Throwable) iOException12);
        java.io.IOException iOException14 = new java.io.IOException((java.lang.Throwable) iOException13);
        java.lang.Throwable[] throwableArray15 = iOException13.getSuppressed();
        java.io.IOException iOException16 = new java.io.IOException();
        java.io.IOException iOException17 = new java.io.IOException((java.lang.Throwable) iOException16);
        java.io.IOException iOException18 = new java.io.IOException((java.lang.Throwable) iOException17);
        java.io.IOException iOException19 = new java.io.IOException();
        java.io.IOException iOException20 = new java.io.IOException((java.lang.Throwable) iOException19);
        java.io.IOException iOException21 = new java.io.IOException((java.lang.Throwable) iOException20);
        java.lang.Throwable[] throwableArray22 = iOException20.getSuppressed();
        java.io.IOException iOException23 = new java.io.IOException();
        java.io.IOException iOException24 = new java.io.IOException((java.lang.Throwable) iOException23);
        java.io.IOException iOException25 = new java.io.IOException((java.lang.Throwable) iOException24);
        java.io.IOException iOException26 = new java.io.IOException((java.lang.Throwable) iOException24);
        java.io.IOException iOException27 = new java.io.IOException();
        java.io.IOException iOException29 = new java.io.IOException("Unknown class name");
        java.io.IOException iOException31 = new java.io.IOException("Unknown class name");
        java.io.IOException iOException32 = new java.io.IOException();
        java.io.IOException iOException33 = new java.io.IOException((java.lang.Throwable) iOException32);
        java.io.IOException iOException34 = new java.io.IOException((java.lang.Throwable) iOException33);
        java.io.IOException iOException35 = new java.io.IOException((java.lang.Throwable) iOException33);
        java.io.IOException iOException36 = new java.io.IOException();
        com.google.common.collect.ImmutableList<java.io.IOException> iOExceptionList37 = com.google.common.collect.ImmutableList.of(iOException7, iOException11, iOException13, iOException17, iOException20, iOException24, iOException27, iOException29, iOException31, iOException35, iOException36);
        java.lang.Throwable[] throwableArray38 = iOException31.getSuppressed();
        java.lang.Throwable[] throwableArray39 = iOException31.getSuppressed();
        java.io.IOException iOException41 = new java.io.IOException();
        java.io.IOException iOException42 = new java.io.IOException((java.lang.Throwable) iOException41);
        java.io.IOException iOException43 = new java.io.IOException((java.lang.Throwable) iOException42);
        java.io.IOException iOException44 = new java.io.IOException((java.lang.Throwable) iOException42);
        java.io.IOException iOException45 = new java.io.IOException();
        java.io.IOException iOException46 = new java.io.IOException((java.lang.Throwable) iOException45);
        java.io.IOException iOException47 = new java.io.IOException((java.lang.Throwable) iOException46);
        java.lang.Throwable[] throwableArray48 = iOException46.getSuppressed();
        java.io.IOException iOException50 = new java.io.IOException("Unknown class name");
        java.io.IOException iOException51 = new java.io.IOException();
        java.io.IOException iOException52 = new java.io.IOException((java.lang.Throwable) iOException51);
        java.io.IOException iOException53 = new java.io.IOException((java.lang.Throwable) iOException52);
        java.lang.Throwable[] throwableArray54 = iOException52.getSuppressed();
        java.io.IOException iOException55 = new java.io.IOException();
        java.io.IOException iOException56 = new java.io.IOException((java.lang.Throwable) iOException55);
        java.io.IOException iOException57 = new java.io.IOException((java.lang.Throwable) iOException56);
        java.io.IOException iOException58 = new java.io.IOException();
        java.io.IOException iOException59 = new java.io.IOException((java.lang.Throwable) iOException58);
        java.io.IOException iOException60 = new java.io.IOException((java.lang.Throwable) iOException59);
        java.lang.Throwable[] throwableArray61 = iOException59.getSuppressed();
        java.io.IOException iOException62 = new java.io.IOException();
        java.io.IOException iOException63 = new java.io.IOException((java.lang.Throwable) iOException62);
        java.io.IOException iOException64 = new java.io.IOException((java.lang.Throwable) iOException63);
        java.io.IOException iOException65 = new java.io.IOException((java.lang.Throwable) iOException63);
        java.io.IOException iOException66 = new java.io.IOException();
        java.io.IOException iOException68 = new java.io.IOException("Unknown class name");
        java.io.IOException iOException70 = new java.io.IOException("Unknown class name");
        java.io.IOException iOException71 = new java.io.IOException();
        java.io.IOException iOException72 = new java.io.IOException((java.lang.Throwable) iOException71);
        java.io.IOException iOException73 = new java.io.IOException((java.lang.Throwable) iOException72);
        java.io.IOException iOException74 = new java.io.IOException((java.lang.Throwable) iOException72);
        java.io.IOException iOException75 = new java.io.IOException();
        com.google.common.collect.ImmutableList<java.io.IOException> iOExceptionList76 = com.google.common.collect.ImmutableList.of(iOException46, iOException50, iOException52, iOException56, iOException59, iOException63, iOException66, iOException68, iOException70, iOException74, iOException75);
        com.google.common.collect.ImmutableList<java.io.IOException> iOExceptionList77 = com.google.common.collect.ImmutableList.of(iOException42, iOException68);
        java.lang.Throwable[] throwableArray78 = iOException42.getSuppressed();
        java.io.IOException iOException79 = new java.io.IOException((java.lang.Throwable) iOException42);
        java.io.IOException iOException80 = new java.io.IOException("Not declared as a type name", (java.lang.Throwable) iOException42);
        iOException31.addSuppressed((java.lang.Throwable) iOException80);
        iOException2.addSuppressed((java.lang.Throwable) iOException80);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(iOExceptionList37);
        org.junit.Assert.assertNotNull(throwableArray38);
        org.junit.Assert.assertNotNull(throwableArray39);
        org.junit.Assert.assertNotNull(throwableArray48);
        org.junit.Assert.assertNotNull(throwableArray54);
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(iOExceptionList76);
        org.junit.Assert.assertNotNull(iOExceptionList77);
        org.junit.Assert.assertNotNull(throwableArray78);
    }

    @Test
    public void test01793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01793");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isQualifiedName();
        boolean boolean5 = node3.isIn();
        boolean boolean6 = node3.hasOneChild();
        com.google.javascript.rhino.Node node7 = node3.getLastSibling();
        node7.setLineno(51);
        boolean boolean10 = node7.isAdd();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test01794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01794");
        java.io.IOException iOException1 = new java.io.IOException();
        java.io.IOException iOException2 = new java.io.IOException((java.lang.Throwable) iOException1);
        java.io.IOException iOException3 = new java.io.IOException();
        java.io.IOException iOException4 = new java.io.IOException((java.lang.Throwable) iOException3);
        iOException1.addSuppressed((java.lang.Throwable) iOException3);
        java.io.IOException iOException6 = new java.io.IOException();
        java.io.IOException iOException7 = new java.io.IOException((java.lang.Throwable) iOException6);
        java.io.IOException iOException8 = new java.io.IOException((java.lang.Throwable) iOException7);
        java.lang.Throwable[] throwableArray9 = iOException7.getSuppressed();
        java.io.IOException iOException11 = new java.io.IOException("Unknown class name");
        java.io.IOException iOException12 = new java.io.IOException();
        java.io.IOException iOException13 = new java.io.IOException((java.lang.Throwable) iOException12);
        java.io.IOException iOException14 = new java.io.IOException((java.lang.Throwable) iOException13);
        java.lang.Throwable[] throwableArray15 = iOException13.getSuppressed();
        java.io.IOException iOException16 = new java.io.IOException();
        java.io.IOException iOException17 = new java.io.IOException((java.lang.Throwable) iOException16);
        java.io.IOException iOException18 = new java.io.IOException((java.lang.Throwable) iOException17);
        java.io.IOException iOException19 = new java.io.IOException();
        java.io.IOException iOException20 = new java.io.IOException((java.lang.Throwable) iOException19);
        java.io.IOException iOException21 = new java.io.IOException((java.lang.Throwable) iOException20);
        java.lang.Throwable[] throwableArray22 = iOException20.getSuppressed();
        java.io.IOException iOException23 = new java.io.IOException();
        java.io.IOException iOException24 = new java.io.IOException((java.lang.Throwable) iOException23);
        java.io.IOException iOException25 = new java.io.IOException((java.lang.Throwable) iOException24);
        java.io.IOException iOException26 = new java.io.IOException((java.lang.Throwable) iOException24);
        java.io.IOException iOException27 = new java.io.IOException();
        java.io.IOException iOException29 = new java.io.IOException("Unknown class name");
        java.io.IOException iOException31 = new java.io.IOException("Unknown class name");
        java.io.IOException iOException32 = new java.io.IOException();
        java.io.IOException iOException33 = new java.io.IOException((java.lang.Throwable) iOException32);
        java.io.IOException iOException34 = new java.io.IOException((java.lang.Throwable) iOException33);
        java.io.IOException iOException35 = new java.io.IOException((java.lang.Throwable) iOException33);
        java.io.IOException iOException36 = new java.io.IOException();
        com.google.common.collect.ImmutableList<java.io.IOException> iOExceptionList37 = com.google.common.collect.ImmutableList.of(iOException7, iOException11, iOException13, iOException17, iOException20, iOException24, iOException27, iOException29, iOException31, iOException35, iOException36);
        java.io.IOException iOException38 = new java.io.IOException((java.lang.Throwable) iOException11);
        java.io.IOException iOException39 = new java.io.IOException((java.lang.Throwable) iOException38);
        iOException1.addSuppressed((java.lang.Throwable) iOException39);
        java.io.IOException iOException41 = new java.io.IOException("java.io.IOException: JSDocInfo", (java.lang.Throwable) iOException39);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray15);
        org.junit.Assert.assertNotNull(throwableArray22);
        org.junit.Assert.assertNotNull(iOExceptionList37);
    }

    @Test
    public void test01795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01795");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isContinue();
        boolean boolean19 = node17.isString();
        com.google.javascript.rhino.Node node20 = node4.useSourceInfoFromForTree(node17);
        com.google.javascript.rhino.InputId inputId21 = null;
        node20.setInputId(inputId21);
        java.lang.Object obj24 = node20.getProp((int) (short) 10);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        node28.setJSType(jSType30);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isContinue();
        com.google.javascript.rhino.Node node37 = node28.clonePropsFrom(node35);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isContinue();
        boolean boolean43 = node41.isString();
        com.google.javascript.rhino.Node node44 = node28.useSourceInfoFromForTree(node41);
        com.google.javascript.rhino.InputId inputId45 = null;
        node44.setInputId(inputId45);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isQualifiedName();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean61 = node60.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType62 = null;
        node60.setJSType(jSType62);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean68 = node67.isContinue();
        com.google.javascript.rhino.Node node69 = node60.clonePropsFrom(node67);
        node55.addChildrenToBack(node60);
        boolean boolean71 = node55.isLocalResultCall();
        com.google.javascript.rhino.Node node72 = node50.copyInformationFromForTree(node55);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(0, node20, node44, node55, (int) (short) 10, 53);
        boolean boolean76 = node20.isTrue();
        boolean boolean77 = node20.isDec();
        boolean boolean78 = node20.isArrayLit();
        int int79 = node20.getCharno();
        boolean boolean80 = node20.isNot();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test01796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01796");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isContinue();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType10 = null;
        node8.setJSType(jSType10);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean16 = node15.isContinue();
        com.google.javascript.rhino.Node node17 = node8.clonePropsFrom(node15);
        node3.addChildrenToBack(node8);
        com.google.javascript.rhino.InputId inputId19 = node3.getInputId();
        boolean boolean20 = node3.isAdd();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable21 = node3.getAncestors();
        node3.setSourceFileForTesting("InputId: java.io.IOException: java.io.IOException");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertNull(inputId19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(ancestorIterable21);
    }

    @Test
    public void test01797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01797");
        java.io.Serializable[] serializableArray18 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList19 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray18);
        boolean boolean20 = serializableList19.isEmpty();
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean25 = node24.isQualifiedName();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean30 = node29.isContinue();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean35 = node34.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType36 = null;
        node34.setJSType(jSType36);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isContinue();
        com.google.javascript.rhino.Node node43 = node34.clonePropsFrom(node41);
        node29.addChildrenToBack(node34);
        boolean boolean45 = node29.isLocalResultCall();
        com.google.javascript.rhino.Node node46 = node24.copyInformationFromForTree(node29);
        boolean boolean47 = serializableList19.contains((java.lang.Object) node29);
        boolean boolean48 = serializableList19.isEmpty();
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean53 = node52.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType54 = null;
        node52.setJSType(jSType54);
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean60 = node59.isContinue();
        com.google.javascript.rhino.Node node61 = node52.clonePropsFrom(node59);
        com.google.javascript.rhino.Node node65 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean66 = node65.isContinue();
        boolean boolean67 = node65.isString();
        com.google.javascript.rhino.Node node68 = node52.useSourceInfoFromForTree(node65);
        boolean boolean69 = serializableList19.contains((java.lang.Object) node65);
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((-1), node65);
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (byte) 1, node70);
        com.google.javascript.rhino.Node node72 = node71.getLastSibling();
        org.junit.Assert.assertNotNull(serializableArray18);
        org.junit.Assert.assertNotNull(serializableList19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node72);
    }

    @Test
    public void test01798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01798");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        boolean boolean5 = node3.isDec();
        boolean boolean6 = node3.isAssign();
        boolean boolean7 = node3.isNE();
        boolean boolean8 = node3.isAnd();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test01799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01799");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean6 = jSDocInfo5.hasEnumParameterType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo5.getBaseType();
        node3.setJSDocInfo(jSDocInfo5);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isQuotedString();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType19 = null;
        node17.setJSType(jSType19);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean25 = node24.isContinue();
        com.google.javascript.rhino.Node node26 = node17.clonePropsFrom(node24);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean31 = node30.isContinue();
        boolean boolean32 = node30.isString();
        com.google.javascript.rhino.Node node33 = node17.useSourceInfoFromForTree(node30);
        com.google.javascript.rhino.InputId inputId34 = null;
        node33.setInputId(inputId34);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString(37, "hi!", (int) (byte) 100, (int) (short) 100);
        int int42 = node40.getIntProp(30);
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = new com.google.javascript.rhino.JSDocInfo();
        int int44 = jSDocInfo43.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility45 = null;
        jSDocInfo43.setVisibility(visibility45);
        boolean boolean47 = jSDocInfo43.hasFileOverview();
        boolean boolean48 = jSDocInfo43.isJavaDispatch();
        boolean boolean49 = jSDocInfo43.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList50 = jSDocInfo43.getExtendedInterfaces();
        java.lang.String str51 = jSDocInfo43.getLicense();
        boolean boolean52 = jSDocInfo43.hasBaseType();
        boolean boolean53 = jSDocInfo43.isNoTypeCheck();
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = new com.google.javascript.rhino.JSDocInfo();
        int int55 = jSDocInfo54.getImplementedInterfaceCount();
        boolean boolean56 = jSDocInfo54.isExterns();
        com.google.javascript.rhino.JSDocInfo jSDocInfo58 = new com.google.javascript.rhino.JSDocInfo();
        int int59 = jSDocInfo58.getImplementedInterfaceCount();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean64 = node63.isQualifiedName();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean69 = node68.isContinue();
        boolean boolean70 = node68.isDo();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList71 = com.google.common.collect.ImmutableList.of((java.io.Serializable) jSDocInfo5, (java.io.Serializable) boolean13, (java.io.Serializable) node33, (java.io.Serializable) int42, (java.io.Serializable) boolean53, (java.io.Serializable) boolean56, (java.io.Serializable) ' ', (java.io.Serializable) jSDocInfo58, (java.io.Serializable) node63, (java.io.Serializable) boolean70);
        boolean boolean72 = jSDocInfo5.containsDeclaration();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression73 = jSDocInfo5.getTypedefType();
        java.util.Collection<java.lang.String> strCollection74 = jSDocInfo5.getReferences();
        jSDocInfo5.addSuppression("(InputId: true)");
        java.lang.String str77 = jSDocInfo5.getReturnDescription();
        java.lang.String str78 = jSDocInfo5.getDescription();
        boolean boolean79 = jSDocInfo5.isOverride();
        boolean boolean80 = jSDocInfo5.isNoTypeCheck();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(serializableList71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(jSTypeExpression73);
        org.junit.Assert.assertNull(strCollection74);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test01800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01800");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        node12.setSourceFileForTesting("hi!");
        boolean boolean15 = node12.isIf();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = node12.getStaticSourceFile();
        int int18 = staticSourceFile16.getLineOffset(31);
        int int20 = staticSourceFile16.getColumnOfOffset(0);
        boolean boolean21 = staticSourceFile16.isExtern();
        int int23 = staticSourceFile16.getColumnOfOffset(0);
        int int25 = staticSourceFile16.getLineOfOffset(53);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(staticSourceFile16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-2147483648) + "'", int18 == (-2147483648));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
    }

    @Test
    public void test01801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01801");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        int int18 = serializableList17.size();
        java.io.Serializable[] serializableArray35 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList36 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray35);
        boolean boolean37 = serializableList36.isEmpty();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isQualifiedName();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isContinue();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType53 = null;
        node51.setJSType(jSType53);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean59 = node58.isContinue();
        com.google.javascript.rhino.Node node60 = node51.clonePropsFrom(node58);
        node46.addChildrenToBack(node51);
        boolean boolean62 = node46.isLocalResultCall();
        com.google.javascript.rhino.Node node63 = node41.copyInformationFromForTree(node46);
        boolean boolean64 = serializableList36.contains((java.lang.Object) node46);
        boolean boolean65 = serializableList17.containsAll((java.util.Collection<java.io.Serializable>) serializableList36);
        java.util.stream.Stream<java.io.Serializable> serializableStream66 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream67 = serializableList17.parallelStream();
        java.util.ListIterator<java.io.Serializable> serializableItor69 = serializableList17.listIterator(4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.io.Serializable> serializableList72 = serializableList17.subList((int) (byte) -1, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: start index (-1) must not be negative");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 16 + "'", int18 == 16);
        org.junit.Assert.assertNotNull(serializableArray35);
        org.junit.Assert.assertNotNull(serializableList36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(serializableStream66);
        org.junit.Assert.assertNotNull(serializableStream67);
        org.junit.Assert.assertNotNull(serializableItor69);
    }

    @Test
    public void test01802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01802");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(0, "JSDocInfo");
        boolean boolean3 = node2.isCase();
        com.google.javascript.rhino.jstype.JSType jSType4 = node2.getJSType();
        boolean boolean5 = node2.hasMoreThanOneChild();
        boolean boolean6 = node2.isAssign();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test01803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01803");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue0 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue1 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue2 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue3 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList4 = com.google.common.collect.ImmutableList.of(ternaryValue0, ternaryValue1, ternaryValue2, ternaryValue3);
        java.lang.String str5 = ternaryValue2.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue6 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue7 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue8 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue9 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList10 = com.google.common.collect.ImmutableList.of(ternaryValue6, ternaryValue7, ternaryValue8, ternaryValue9);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue11 = ternaryValue2.or(ternaryValue7);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue12 = ternaryValue11.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue13 = ternaryValue11.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue14 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue15 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue16 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue17 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList18 = com.google.common.collect.ImmutableList.of(ternaryValue14, ternaryValue15, ternaryValue16, ternaryValue17);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue19 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue20 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue21 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue22 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList23 = com.google.common.collect.ImmutableList.of(ternaryValue19, ternaryValue20, ternaryValue21, ternaryValue22);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue24 = ternaryValue15.xor(ternaryValue21);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue26 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue27 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue28 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList29 = com.google.common.collect.ImmutableList.of(ternaryValue25, ternaryValue26, ternaryValue27, ternaryValue28);
        java.lang.String str30 = ternaryValue27.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue31 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue32 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue33 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue34 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList35 = com.google.common.collect.ImmutableList.of(ternaryValue31, ternaryValue32, ternaryValue33, ternaryValue34);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue36 = ternaryValue27.or(ternaryValue32);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue37 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue38 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue39 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue40 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList41 = com.google.common.collect.ImmutableList.of(ternaryValue37, ternaryValue38, ternaryValue39, ternaryValue40);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue42 = ternaryValue32.xor(ternaryValue37);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue43 = ternaryValue24.xor(ternaryValue37);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue44 = ternaryValue13.or(ternaryValue24);
        boolean boolean46 = ternaryValue13.toBoolean(false);
        org.junit.Assert.assertNotNull(ternaryValue0);
        org.junit.Assert.assertNotNull(ternaryValue1);
        org.junit.Assert.assertNotNull(ternaryValue2);
        org.junit.Assert.assertNotNull(ternaryValue3);
        org.junit.Assert.assertNotNull(ternaryValueList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "true" + "'", str5, "true");
        org.junit.Assert.assertNotNull(ternaryValue6);
        org.junit.Assert.assertNotNull(ternaryValue7);
        org.junit.Assert.assertNotNull(ternaryValue8);
        org.junit.Assert.assertNotNull(ternaryValue9);
        org.junit.Assert.assertNotNull(ternaryValueList10);
        org.junit.Assert.assertNotNull(ternaryValue11);
        org.junit.Assert.assertNotNull(ternaryValue12);
        org.junit.Assert.assertNotNull(ternaryValue13);
        org.junit.Assert.assertNotNull(ternaryValue14);
        org.junit.Assert.assertNotNull(ternaryValue15);
        org.junit.Assert.assertNotNull(ternaryValue16);
        org.junit.Assert.assertNotNull(ternaryValue17);
        org.junit.Assert.assertNotNull(ternaryValueList18);
        org.junit.Assert.assertNotNull(ternaryValue19);
        org.junit.Assert.assertNotNull(ternaryValue20);
        org.junit.Assert.assertNotNull(ternaryValue21);
        org.junit.Assert.assertNotNull(ternaryValue22);
        org.junit.Assert.assertNotNull(ternaryValueList23);
        org.junit.Assert.assertNotNull(ternaryValue24);
        org.junit.Assert.assertNotNull(ternaryValue25);
        org.junit.Assert.assertNotNull(ternaryValue26);
        org.junit.Assert.assertNotNull(ternaryValue27);
        org.junit.Assert.assertNotNull(ternaryValue28);
        org.junit.Assert.assertNotNull(ternaryValueList29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "true" + "'", str30, "true");
        org.junit.Assert.assertNotNull(ternaryValue31);
        org.junit.Assert.assertNotNull(ternaryValue32);
        org.junit.Assert.assertNotNull(ternaryValue33);
        org.junit.Assert.assertNotNull(ternaryValue34);
        org.junit.Assert.assertNotNull(ternaryValueList35);
        org.junit.Assert.assertNotNull(ternaryValue36);
        org.junit.Assert.assertNotNull(ternaryValue37);
        org.junit.Assert.assertNotNull(ternaryValue38);
        org.junit.Assert.assertNotNull(ternaryValue39);
        org.junit.Assert.assertNotNull(ternaryValue40);
        org.junit.Assert.assertNotNull(ternaryValueList41);
        org.junit.Assert.assertNotNull(ternaryValue42);
        org.junit.Assert.assertNotNull(ternaryValue43);
        org.junit.Assert.assertNotNull(ternaryValue44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test01804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01804");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isQualifiedName();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isContinue();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        node32.setJSType(jSType34);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isContinue();
        com.google.javascript.rhino.Node node41 = node32.clonePropsFrom(node39);
        node27.addChildrenToBack(node32);
        boolean boolean43 = node27.isLocalResultCall();
        com.google.javascript.rhino.Node node44 = node22.copyInformationFromForTree(node27);
        boolean boolean45 = serializableList17.contains((java.lang.Object) node27);
        int int46 = node27.getLineno();
        boolean boolean47 = node27.isFalse();
        boolean boolean48 = node27.isIf();
        boolean boolean49 = node27.isObjectLit();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test01805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01805");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoAlias();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getModifies();
        boolean boolean3 = jSDocInfo0.hasTypedefType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getThrownTypes();
        boolean boolean5 = jSDocInfo0.hasReturnType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test01806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01806");
        java.io.IOException iOException0 = new java.io.IOException();
        java.io.IOException iOException1 = new java.io.IOException((java.lang.Throwable) iOException0);
        java.io.IOException iOException2 = new java.io.IOException((java.lang.Throwable) iOException1);
        java.lang.Throwable[] throwableArray3 = iOException1.getSuppressed();
        java.io.IOException iOException5 = new java.io.IOException("Unknown class name");
        java.io.IOException iOException6 = new java.io.IOException();
        java.io.IOException iOException7 = new java.io.IOException((java.lang.Throwable) iOException6);
        java.io.IOException iOException8 = new java.io.IOException((java.lang.Throwable) iOException7);
        java.lang.Throwable[] throwableArray9 = iOException7.getSuppressed();
        java.io.IOException iOException10 = new java.io.IOException();
        java.io.IOException iOException11 = new java.io.IOException((java.lang.Throwable) iOException10);
        java.io.IOException iOException12 = new java.io.IOException((java.lang.Throwable) iOException11);
        java.io.IOException iOException13 = new java.io.IOException();
        java.io.IOException iOException14 = new java.io.IOException((java.lang.Throwable) iOException13);
        java.io.IOException iOException15 = new java.io.IOException((java.lang.Throwable) iOException14);
        java.lang.Throwable[] throwableArray16 = iOException14.getSuppressed();
        java.io.IOException iOException17 = new java.io.IOException();
        java.io.IOException iOException18 = new java.io.IOException((java.lang.Throwable) iOException17);
        java.io.IOException iOException19 = new java.io.IOException((java.lang.Throwable) iOException18);
        java.io.IOException iOException20 = new java.io.IOException((java.lang.Throwable) iOException18);
        java.io.IOException iOException21 = new java.io.IOException();
        java.io.IOException iOException23 = new java.io.IOException("Unknown class name");
        java.io.IOException iOException25 = new java.io.IOException("Unknown class name");
        java.io.IOException iOException26 = new java.io.IOException();
        java.io.IOException iOException27 = new java.io.IOException((java.lang.Throwable) iOException26);
        java.io.IOException iOException28 = new java.io.IOException((java.lang.Throwable) iOException27);
        java.io.IOException iOException29 = new java.io.IOException((java.lang.Throwable) iOException27);
        java.io.IOException iOException30 = new java.io.IOException();
        com.google.common.collect.ImmutableList<java.io.IOException> iOExceptionList31 = com.google.common.collect.ImmutableList.of(iOException1, iOException5, iOException7, iOException11, iOException14, iOException18, iOException21, iOException23, iOException25, iOException29, iOException30);
        java.io.IOException iOException32 = new java.io.IOException((java.lang.Throwable) iOException5);
        java.io.IOException iOException33 = new java.io.IOException((java.lang.Throwable) iOException32);
        java.io.IOException iOException34 = new java.io.IOException();
        java.io.IOException iOException35 = new java.io.IOException((java.lang.Throwable) iOException34);
        iOException32.addSuppressed((java.lang.Throwable) iOException34);
        java.io.IOException iOException37 = new java.io.IOException((java.lang.Throwable) iOException32);
        org.junit.Assert.assertNotNull(throwableArray3);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray16);
        org.junit.Assert.assertNotNull(iOExceptionList31);
    }

    @Test
    public void test01807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01807");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getParameterType("true");
        java.lang.String str6 = jSDocInfo0.getLendsName();
        java.lang.String str7 = jSDocInfo0.getDeprecationReason();
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getModifies();
        java.util.Iterator<java.lang.String> strItor9 = strSet8.iterator();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean11 = strSet8.add("");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(strItor9);
    }

    @Test
    public void test01808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01808");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isContinue();
        boolean boolean5 = node3.isDo();
        node3.setSourceEncodedPosition(2);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isQualifiedName();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean22 = node21.isContinue();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean27 = node26.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType28 = null;
        node26.setJSType(jSType28);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean34 = node33.isContinue();
        com.google.javascript.rhino.Node node35 = node26.clonePropsFrom(node33);
        node21.addChildrenToBack(node26);
        boolean boolean37 = node21.isLocalResultCall();
        com.google.javascript.rhino.Node node38 = node16.copyInformationFromForTree(node21);
        node21.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node41 = node12.clonePropsFrom(node21);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean46 = node45.isLabelName();
        boolean boolean47 = node45.isTrue();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isContinue();
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean57 = node56.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType58 = null;
        node56.setJSType(jSType58);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean64 = node63.isContinue();
        com.google.javascript.rhino.Node node65 = node56.clonePropsFrom(node63);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (byte) 0, node21, node45, node51, node65, 10, (int) (byte) -1);
        com.google.javascript.rhino.Node node69 = node3.useSourceInfoIfMissingFrom(node51);
        boolean boolean70 = node3.isOnlyModifiesThisCall();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test01809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01809");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        boolean boolean14 = node13.isQuotedString();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        boolean boolean20 = node18.isDec();
        boolean boolean21 = node18.isScript();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(0, node13, node18, node25, 0, (int) (short) 0);
        boolean boolean29 = node18.isDec();
        com.google.javascript.rhino.Node node30 = node18.getParent();
        // The following exception was thrown during execution in test generation
        try {
            int int32 = node30.getExistingIntProp(43);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 43");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
    }

    @Test
    public void test01810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01810");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue0 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue1 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue2 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue3 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList4 = com.google.common.collect.ImmutableList.of(ternaryValue0, ternaryValue1, ternaryValue2, ternaryValue3);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue5 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue6 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue7 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue8 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList9 = com.google.common.collect.ImmutableList.of(ternaryValue5, ternaryValue6, ternaryValue7, ternaryValue8);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue10 = ternaryValue1.xor(ternaryValue7);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue11 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue12 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue13 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue14 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList15 = com.google.common.collect.ImmutableList.of(ternaryValue11, ternaryValue12, ternaryValue13, ternaryValue14);
        java.lang.String str16 = ternaryValue13.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue17 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue18 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue19 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue20 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList21 = com.google.common.collect.ImmutableList.of(ternaryValue17, ternaryValue18, ternaryValue19, ternaryValue20);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue22 = ternaryValue13.or(ternaryValue18);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue23 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue24 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue26 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList27 = com.google.common.collect.ImmutableList.of(ternaryValue23, ternaryValue24, ternaryValue25, ternaryValue26);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue28 = ternaryValue18.xor(ternaryValue23);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue29 = ternaryValue10.xor(ternaryValue23);
        java.lang.String str30 = ternaryValue10.toString();
        org.junit.Assert.assertNotNull(ternaryValue0);
        org.junit.Assert.assertNotNull(ternaryValue1);
        org.junit.Assert.assertNotNull(ternaryValue2);
        org.junit.Assert.assertNotNull(ternaryValue3);
        org.junit.Assert.assertNotNull(ternaryValueList4);
        org.junit.Assert.assertNotNull(ternaryValue5);
        org.junit.Assert.assertNotNull(ternaryValue6);
        org.junit.Assert.assertNotNull(ternaryValue7);
        org.junit.Assert.assertNotNull(ternaryValue8);
        org.junit.Assert.assertNotNull(ternaryValueList9);
        org.junit.Assert.assertNotNull(ternaryValue10);
        org.junit.Assert.assertNotNull(ternaryValue11);
        org.junit.Assert.assertNotNull(ternaryValue12);
        org.junit.Assert.assertNotNull(ternaryValue13);
        org.junit.Assert.assertNotNull(ternaryValue14);
        org.junit.Assert.assertNotNull(ternaryValueList15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "true" + "'", str16, "true");
        org.junit.Assert.assertNotNull(ternaryValue17);
        org.junit.Assert.assertNotNull(ternaryValue18);
        org.junit.Assert.assertNotNull(ternaryValue19);
        org.junit.Assert.assertNotNull(ternaryValue20);
        org.junit.Assert.assertNotNull(ternaryValueList21);
        org.junit.Assert.assertNotNull(ternaryValue22);
        org.junit.Assert.assertNotNull(ternaryValue23);
        org.junit.Assert.assertNotNull(ternaryValue24);
        org.junit.Assert.assertNotNull(ternaryValue25);
        org.junit.Assert.assertNotNull(ternaryValue26);
        org.junit.Assert.assertNotNull(ternaryValueList27);
        org.junit.Assert.assertNotNull(ternaryValue28);
        org.junit.Assert.assertNotNull(ternaryValue29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "false" + "'", str30, "false");
    }

    @Test
    public void test01811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01811");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        int int18 = serializableList17.size();
        java.io.Serializable[] serializableArray35 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList36 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray35);
        boolean boolean37 = serializableList36.isEmpty();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isQualifiedName();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isContinue();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType53 = null;
        node51.setJSType(jSType53);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean59 = node58.isContinue();
        com.google.javascript.rhino.Node node60 = node51.clonePropsFrom(node58);
        node46.addChildrenToBack(node51);
        boolean boolean62 = node46.isLocalResultCall();
        com.google.javascript.rhino.Node node63 = node41.copyInformationFromForTree(node46);
        boolean boolean64 = serializableList36.contains((java.lang.Object) node46);
        boolean boolean65 = serializableList17.containsAll((java.util.Collection<java.io.Serializable>) serializableList36);
        java.util.stream.Stream<java.io.Serializable> serializableStream66 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream67 = serializableList17.parallelStream();
        boolean boolean68 = serializableList17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo69 = new com.google.javascript.rhino.JSDocInfo();
        int int70 = jSDocInfo69.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet71 = jSDocInfo69.getModifies();
        java.lang.String str72 = jSDocInfo69.getMeaning();
        boolean boolean73 = jSDocInfo69.shouldPreserveTry();
        boolean boolean74 = serializableList17.equals((java.lang.Object) jSDocInfo69);
        boolean boolean75 = jSDocInfo69.isNoShadow();
        boolean boolean76 = jSDocInfo69.hasFileOverview();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression77 = jSDocInfo69.getType();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 16 + "'", int18 == 16);
        org.junit.Assert.assertNotNull(serializableArray35);
        org.junit.Assert.assertNotNull(serializableList36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(serializableStream66);
        org.junit.Assert.assertNotNull(serializableStream67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(jSTypeExpression77);
    }

    @Test
    public void test01812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01812");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        boolean boolean5 = node3.isDec();
        boolean boolean6 = node3.isNoSideEffectsCall();
        boolean boolean7 = node3.isIf();
        com.google.javascript.rhino.Node node8 = node3.getLastSibling();
        boolean boolean9 = node3.isDefaultCase();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(32, (int) (byte) 10, (int) '#');
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isQualifiedName();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isContinue();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        node32.setJSType(jSType34);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isContinue();
        com.google.javascript.rhino.Node node41 = node32.clonePropsFrom(node39);
        node27.addChildrenToBack(node32);
        boolean boolean43 = node27.isLocalResultCall();
        com.google.javascript.rhino.Node node44 = node22.copyInformationFromForTree(node27);
        node27.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node47 = node18.clonePropsFrom(node27);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isInstanceOf();
        boolean boolean53 = node51.isComma();
        boolean boolean54 = node18.isEquivalentTo(node51);
        boolean boolean55 = node51.isComma();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) '#', node14, node51, 42, (int) ' ');
        boolean boolean59 = node58.isComma();
        com.google.javascript.rhino.Node node60 = node58.cloneTree();
        boolean boolean61 = node58.isWith();
        com.google.javascript.rhino.Node node62 = node3.copyInformationFromForTree(node58);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str66 = node62.toString(true, false, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
    }

    @Test
    public void test01813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01813");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isContinue();
        boolean boolean5 = node3.isBlock();
        node3.removeProp(12);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType14 = null;
        node12.setJSType(jSType14);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean20 = node19.isContinue();
        com.google.javascript.rhino.Node node21 = node12.clonePropsFrom(node19);
        boolean boolean22 = node21.isQuotedString();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean27 = node26.isLabelName();
        boolean boolean28 = node26.isDec();
        boolean boolean29 = node26.isScript();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(0, node21, node26, node33, 0, (int) (short) 0);
        boolean boolean37 = node21.isTrue();
        com.google.javascript.rhino.Node node38 = node3.useSourceInfoIfMissingFromForTree(node21);
        boolean boolean39 = node3.isArrayLit();
        boolean boolean40 = node3.isComma();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str41 = node3.toStringTree();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test01814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01814");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isQualifiedName();
        boolean boolean5 = node3.isIn();
        node3.detachChildren();
        boolean boolean7 = node3.isContinue();
        boolean boolean8 = node3.isInc();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test01815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01815");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isQualifiedName();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isContinue();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node18.setJSType(jSType20);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isContinue();
        com.google.javascript.rhino.Node node27 = node18.clonePropsFrom(node25);
        node13.addChildrenToBack(node18);
        boolean boolean29 = node13.isLocalResultCall();
        com.google.javascript.rhino.Node node30 = node8.copyInformationFromForTree(node13);
        node13.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node33 = node4.clonePropsFrom(node13);
        com.google.javascript.rhino.Node node34 = node33.getLastSibling();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("Unknown class name");
        boolean boolean37 = node36.isBreak();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(0, node33, node36, (-1), 43);
        com.google.javascript.rhino.Node node41 = node33.getLastSibling();
        com.google.javascript.rhino.InputId inputId43 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId45 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId47 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId49 = new com.google.javascript.rhino.InputId("true");
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.InputId> inputIdList50 = com.google.common.collect.ImmutableList.of(inputId43, inputId45, inputId47, inputId49);
        java.lang.String str51 = inputId43.getIdName();
        java.lang.String str52 = inputId43.toString();
        node33.setInputId(inputId43);
        boolean boolean54 = node33.isDo();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertNotNull(inputIdList50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "true" + "'", str51, "true");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "InputId: true" + "'", str52, "InputId: true");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test01816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01816");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition1 = marker0.getNameNode();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition3 = marker0.getDescription();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition4 = marker0.getAnnotation();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition5 = marker0.getName();
        org.junit.Assert.assertNull(nodeSourcePosition1);
        org.junit.Assert.assertNull(typePosition2);
        org.junit.Assert.assertNull(stringPosition3);
        org.junit.Assert.assertNull(stringPosition4);
        org.junit.Assert.assertNull(stringPosition5);
    }

    @Test
    public void test01817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01817");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        java.lang.String str4 = jSDocInfo0.getMeaning();
        boolean boolean6 = jSDocInfo0.hasParameter("Unknown class name");
        boolean boolean7 = jSDocInfo0.hasEnumParameterType();
        boolean boolean8 = jSDocInfo0.hasType();
        jSDocInfo0.addSuppression("STRING true\n");
        boolean boolean11 = jSDocInfo0.hasFileOverview();
        boolean boolean13 = jSDocInfo0.hasParameter("(STRING Unknown class name 40\n)");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test01818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01818");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        node12.setSourceFileForTesting("hi!");
        boolean boolean15 = node12.isIf();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = node12.getStaticSourceFile();
        int int18 = staticSourceFile16.getLineOffset(31);
        int int20 = staticSourceFile16.getColumnOfOffset(0);
        int int22 = staticSourceFile16.getColumnOfOffset((-2147483648));
        java.lang.Class<?> wildcardClass23 = staticSourceFile16.getClass();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(staticSourceFile16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-2147483648) + "'", int18 == (-2147483648));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test01819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01819");
        com.google.javascript.rhino.Node node1 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node2 = new com.google.javascript.rhino.Node((int) (short) -1, node1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01820");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoAlias();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getModifies();
        java.io.Serializable[] serializableArray19 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList20 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray19);
        boolean boolean21 = serializableList20.isEmpty();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isQualifiedName();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean31 = node30.isContinue();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType37 = null;
        node35.setJSType(jSType37);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean43 = node42.isContinue();
        com.google.javascript.rhino.Node node44 = node35.clonePropsFrom(node42);
        node30.addChildrenToBack(node35);
        boolean boolean46 = node30.isLocalResultCall();
        com.google.javascript.rhino.Node node47 = node25.copyInformationFromForTree(node30);
        boolean boolean48 = serializableList20.contains((java.lang.Object) node30);
        java.io.Serializable[] serializableArray65 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList66 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray65);
        boolean boolean67 = serializableList20.containsAll((java.util.Collection<java.io.Serializable>) serializableList66);
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList68 = serializableList66.reverse();
        boolean boolean69 = strSet2.retainAll((java.util.Collection<java.io.Serializable>) serializableList68);
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList70 = serializableList68.reverse();
        java.io.Serializable[] serializableArray87 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList88 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray87);
        boolean boolean89 = serializableList88.isEmpty();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList90 = serializableList88.asList();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean91 = serializableList70.retainAll((java.util.Collection<java.io.Serializable>) serializableList88);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(serializableArray19);
        org.junit.Assert.assertNotNull(serializableList20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(serializableArray65);
        org.junit.Assert.assertNotNull(serializableList66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(serializableList68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(serializableList70);
        org.junit.Assert.assertNotNull(serializableArray87);
        org.junit.Assert.assertNotNull(serializableList88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(serializableList90);
    }

    @Test
    public void test01821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01821");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(32, (int) (byte) 10, (int) '#');
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isQualifiedName();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isContinue();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType24 = null;
        node22.setJSType(jSType24);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean30 = node29.isContinue();
        com.google.javascript.rhino.Node node31 = node22.clonePropsFrom(node29);
        node17.addChildrenToBack(node22);
        boolean boolean33 = node17.isLocalResultCall();
        com.google.javascript.rhino.Node node34 = node12.copyInformationFromForTree(node17);
        node17.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node37 = node8.clonePropsFrom(node17);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isInstanceOf();
        boolean boolean43 = node41.isComma();
        boolean boolean44 = node8.isEquivalentTo(node41);
        boolean boolean45 = node41.isComma();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) '#', node4, node41, 42, (int) ' ');
        com.google.javascript.rhino.Node node49 = null;
        int int50 = node4.getIndexOfChild(node49);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean55 = node54.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType56 = null;
        node54.setJSType(jSType56);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean62 = node61.isContinue();
        com.google.javascript.rhino.Node node63 = node54.clonePropsFrom(node61);
        node63.setSourceFileForTesting("hi!");
        boolean boolean66 = node63.isIf();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile67 = node63.getStaticSourceFile();
        int int69 = staticSourceFile67.getLineOffset(31);
        node4.setStaticSourceFile(staticSourceFile67);
        com.google.javascript.rhino.Node node71 = node4.getLastSibling();
        com.google.javascript.rhino.Node node72 = null;
        // The following exception was thrown during execution in test generation
        try {
            node4.removeChild(node72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(staticSourceFile67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-2147483648) + "'", int69 == (-2147483648));
        org.junit.Assert.assertNotNull(node71);
    }

    @Test
    public void test01822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01822");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isQualifiedName();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isContinue();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        node32.setJSType(jSType34);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isContinue();
        com.google.javascript.rhino.Node node41 = node32.clonePropsFrom(node39);
        node27.addChildrenToBack(node32);
        boolean boolean43 = node27.isLocalResultCall();
        com.google.javascript.rhino.Node node44 = node22.copyInformationFromForTree(node27);
        boolean boolean45 = serializableList17.contains((java.lang.Object) node27);
        java.lang.Object[] objArray46 = serializableList17.toArray();
        com.google.javascript.rhino.Node.SideEffectFlags[] sideEffectFlagsArray47 = new com.google.javascript.rhino.Node.SideEffectFlags[] {};
        com.google.javascript.rhino.Node.SideEffectFlags[] sideEffectFlagsArray48 = new com.google.javascript.rhino.Node.SideEffectFlags[] {};
        com.google.javascript.rhino.Node.SideEffectFlags[] sideEffectFlagsArray49 = new com.google.javascript.rhino.Node.SideEffectFlags[] {};
        com.google.javascript.rhino.Node.SideEffectFlags[] sideEffectFlagsArray50 = new com.google.javascript.rhino.Node.SideEffectFlags[] {};
        com.google.javascript.rhino.Node.SideEffectFlags[] sideEffectFlagsArray51 = new com.google.javascript.rhino.Node.SideEffectFlags[] {};
        com.google.javascript.rhino.Node.SideEffectFlags[][] sideEffectFlagsArray52 = new com.google.javascript.rhino.Node.SideEffectFlags[][] { sideEffectFlagsArray47, sideEffectFlagsArray48, sideEffectFlagsArray49, sideEffectFlagsArray50, sideEffectFlagsArray51 };
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node.SideEffectFlags[][] sideEffectFlagsArray53 = serializableList17.toArray(sideEffectFlagsArray52);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertNotNull(sideEffectFlagsArray47);
        org.junit.Assert.assertNotNull(sideEffectFlagsArray48);
        org.junit.Assert.assertNotNull(sideEffectFlagsArray49);
        org.junit.Assert.assertNotNull(sideEffectFlagsArray50);
        org.junit.Assert.assertNotNull(sideEffectFlagsArray51);
        org.junit.Assert.assertNotNull(sideEffectFlagsArray52);
    }

    @Test
    public void test01823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01823");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasEnumParameterType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getBaseType();
        java.lang.String str3 = jSDocInfo0.getMeaning();
        java.util.Collection<java.lang.String> strCollection4 = jSDocInfo0.getReferences();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNull(strCollection4);
    }

    @Test
    public void test01824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01824");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        boolean boolean5 = node3.isTrue();
        boolean boolean6 = node3.isFromExterns();
        boolean boolean7 = node3.isNoSideEffectsCall();
        boolean boolean8 = node3.isOr();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test01825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01825");
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder0 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>>();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumList1 = ternaryValueEnumBuilder0.build();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue2 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue3 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue4 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue5 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList6 = com.google.common.collect.ImmutableList.of(ternaryValue2, ternaryValue3, ternaryValue4, ternaryValue5);
        java.lang.String str7 = ternaryValue4.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue8 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue9 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue10 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue11 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList12 = com.google.common.collect.ImmutableList.of(ternaryValue8, ternaryValue9, ternaryValue10, ternaryValue11);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue13 = ternaryValue4.or(ternaryValue9);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue14 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue15 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue16 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue17 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList18 = com.google.common.collect.ImmutableList.of(ternaryValue14, ternaryValue15, ternaryValue16, ternaryValue17);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue19 = ternaryValue9.xor(ternaryValue14);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder20 = ternaryValueEnumBuilder0.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>) ternaryValue19);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder21 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>>();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumList22 = ternaryValueEnumBuilder21.build();
        com.google.javascript.rhino.jstype.TernaryValue[] ternaryValueArray23 = new com.google.javascript.rhino.jstype.TernaryValue[] {};
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder24 = ternaryValueEnumBuilder21.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>[]) ternaryValueArray23);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder25 = ternaryValueEnumBuilder0.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>[]) ternaryValueArray23);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue26 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue27 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue28 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue29 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList30 = com.google.common.collect.ImmutableList.of(ternaryValue26, ternaryValue27, ternaryValue28, ternaryValue29);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue31 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue32 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue33 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue34 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList35 = com.google.common.collect.ImmutableList.of(ternaryValue31, ternaryValue32, ternaryValue33, ternaryValue34);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue36 = ternaryValue27.xor(ternaryValue33);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue37 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue38 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue39 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue40 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList41 = com.google.common.collect.ImmutableList.of(ternaryValue37, ternaryValue38, ternaryValue39, ternaryValue40);
        java.lang.String str42 = ternaryValue39.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue43 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue44 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue45 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue46 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList47 = com.google.common.collect.ImmutableList.of(ternaryValue43, ternaryValue44, ternaryValue45, ternaryValue46);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue48 = ternaryValue39.or(ternaryValue44);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue49 = ternaryValue48.not();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue50 = ternaryValue27.and(ternaryValue49);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder51 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>>();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumList52 = ternaryValueEnumBuilder51.build();
        com.google.javascript.rhino.jstype.TernaryValue[] ternaryValueArray53 = new com.google.javascript.rhino.jstype.TernaryValue[] {};
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder54 = ternaryValueEnumBuilder51.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>[]) ternaryValueArray53);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue55 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue56 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue57 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue58 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList59 = com.google.common.collect.ImmutableList.of(ternaryValue55, ternaryValue56, ternaryValue57, ternaryValue58);
        java.lang.String str60 = ternaryValue57.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue61 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue62 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue63 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue64 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList65 = com.google.common.collect.ImmutableList.of(ternaryValue61, ternaryValue62, ternaryValue63, ternaryValue64);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue66 = ternaryValue57.or(ternaryValue62);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue67 = ternaryValue66.not();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder68 = ternaryValueEnumBuilder51.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>) ternaryValue67);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue69 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder70 = ternaryValueEnumBuilder68.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>) ternaryValue69);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue71 = ternaryValue49.xor(ternaryValue69);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder72 = ternaryValueEnumBuilder0.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>) ternaryValue69);
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumList73 = ternaryValueEnumBuilder72.build();
        org.junit.Assert.assertNotNull(ternaryValueEnumList1);
        org.junit.Assert.assertNotNull(ternaryValue2);
        org.junit.Assert.assertNotNull(ternaryValue3);
        org.junit.Assert.assertNotNull(ternaryValue4);
        org.junit.Assert.assertNotNull(ternaryValue5);
        org.junit.Assert.assertNotNull(ternaryValueList6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "true" + "'", str7, "true");
        org.junit.Assert.assertNotNull(ternaryValue8);
        org.junit.Assert.assertNotNull(ternaryValue9);
        org.junit.Assert.assertNotNull(ternaryValue10);
        org.junit.Assert.assertNotNull(ternaryValue11);
        org.junit.Assert.assertNotNull(ternaryValueList12);
        org.junit.Assert.assertNotNull(ternaryValue13);
        org.junit.Assert.assertNotNull(ternaryValue14);
        org.junit.Assert.assertNotNull(ternaryValue15);
        org.junit.Assert.assertNotNull(ternaryValue16);
        org.junit.Assert.assertNotNull(ternaryValue17);
        org.junit.Assert.assertNotNull(ternaryValueList18);
        org.junit.Assert.assertNotNull(ternaryValue19);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder20);
        org.junit.Assert.assertNotNull(ternaryValueEnumList22);
        org.junit.Assert.assertNotNull(ternaryValueArray23);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder24);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder25);
        org.junit.Assert.assertNotNull(ternaryValue26);
        org.junit.Assert.assertNotNull(ternaryValue27);
        org.junit.Assert.assertNotNull(ternaryValue28);
        org.junit.Assert.assertNotNull(ternaryValue29);
        org.junit.Assert.assertNotNull(ternaryValueList30);
        org.junit.Assert.assertNotNull(ternaryValue31);
        org.junit.Assert.assertNotNull(ternaryValue32);
        org.junit.Assert.assertNotNull(ternaryValue33);
        org.junit.Assert.assertNotNull(ternaryValue34);
        org.junit.Assert.assertNotNull(ternaryValueList35);
        org.junit.Assert.assertNotNull(ternaryValue36);
        org.junit.Assert.assertNotNull(ternaryValue37);
        org.junit.Assert.assertNotNull(ternaryValue38);
        org.junit.Assert.assertNotNull(ternaryValue39);
        org.junit.Assert.assertNotNull(ternaryValue40);
        org.junit.Assert.assertNotNull(ternaryValueList41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "true" + "'", str42, "true");
        org.junit.Assert.assertNotNull(ternaryValue43);
        org.junit.Assert.assertNotNull(ternaryValue44);
        org.junit.Assert.assertNotNull(ternaryValue45);
        org.junit.Assert.assertNotNull(ternaryValue46);
        org.junit.Assert.assertNotNull(ternaryValueList47);
        org.junit.Assert.assertNotNull(ternaryValue48);
        org.junit.Assert.assertNotNull(ternaryValue49);
        org.junit.Assert.assertNotNull(ternaryValue50);
        org.junit.Assert.assertNotNull(ternaryValueEnumList52);
        org.junit.Assert.assertNotNull(ternaryValueArray53);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder54);
        org.junit.Assert.assertNotNull(ternaryValue55);
        org.junit.Assert.assertNotNull(ternaryValue56);
        org.junit.Assert.assertNotNull(ternaryValue57);
        org.junit.Assert.assertNotNull(ternaryValue58);
        org.junit.Assert.assertNotNull(ternaryValueList59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "true" + "'", str60, "true");
        org.junit.Assert.assertNotNull(ternaryValue61);
        org.junit.Assert.assertNotNull(ternaryValue62);
        org.junit.Assert.assertNotNull(ternaryValue63);
        org.junit.Assert.assertNotNull(ternaryValue64);
        org.junit.Assert.assertNotNull(ternaryValueList65);
        org.junit.Assert.assertNotNull(ternaryValue66);
        org.junit.Assert.assertNotNull(ternaryValue67);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder68);
        org.junit.Assert.assertNotNull(ternaryValue69);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder70);
        org.junit.Assert.assertNotNull(ternaryValue71);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder72);
        org.junit.Assert.assertNotNull(ternaryValueEnumList73);
    }

    @Test
    public void test01826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01826");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.hasFileOverview();
        boolean boolean5 = jSDocInfo0.isJavaDispatch();
        boolean boolean6 = jSDocInfo0.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean8 = jSDocInfo0.hasBaseType();
        java.util.Set<java.lang.String> strSet9 = jSDocInfo0.getSuppressions();
        boolean boolean10 = jSDocInfo0.isHidden();
        boolean boolean11 = jSDocInfo0.shouldPreserveTry();
        boolean boolean12 = jSDocInfo0.hasModifies();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test01827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01827");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getStartLine();
        int int2 = stringPosition0.getPositionOnEndLine();
        stringPosition0.setPositionInformation(0, 51, 31, 48);
        stringPosition0.setPositionInformation((-8), (int) '4', (int) 'a', (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            stringPosition0.setPositionInformation(40, 1, 8, 41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Recorded bad position information?start-line: 40?end-line: 8");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test01828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01828");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isQualifiedName();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isContinue();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        node32.setJSType(jSType34);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isContinue();
        com.google.javascript.rhino.Node node41 = node32.clonePropsFrom(node39);
        node27.addChildrenToBack(node32);
        boolean boolean43 = node27.isLocalResultCall();
        com.google.javascript.rhino.Node node44 = node22.copyInformationFromForTree(node27);
        boolean boolean45 = serializableList17.contains((java.lang.Object) node27);
        com.google.common.collect.UnmodifiableIterator<java.io.Serializable> serializableItor46 = serializableList17.iterator();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.io.Serializable> serializableList49 = serializableList17.subList(2, (-2147483648));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: end index (-2147483648) must not be negative");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(serializableItor46);
    }

    @Test
    public void test01829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01829");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("Unknown class name");
        com.google.javascript.rhino.Node node2 = node1.getLastSibling();
        boolean boolean3 = node1.isNE();
        boolean boolean4 = node1.isGetterDef();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isLabelName();
        boolean boolean10 = node8.isTrue();
        boolean boolean11 = node8.isNoSideEffectsCall();
        boolean boolean12 = node8.isCase();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isContinue();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean22 = node21.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType23 = null;
        node21.setJSType(jSType23);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isContinue();
        com.google.javascript.rhino.Node node30 = node21.clonePropsFrom(node28);
        node16.addChildrenToBack(node21);
        boolean boolean32 = node16.isLocalResultCall();
        int int33 = node16.getLength();
        boolean boolean34 = node16.isSwitch();
        // The following exception was thrown during execution in test generation
        try {
            node1.addChildAfter(node8, node16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test01830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01830");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasEnumParameterType();
        boolean boolean2 = jSDocInfo0.containsDeclaration();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test01831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01831");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(32, (int) (byte) 10, (int) '#');
        boolean boolean4 = node3.isLocalResultCall();
        boolean boolean5 = node3.isDebugger();
        boolean boolean6 = node3.isNull();
        boolean boolean7 = node3.isFromExterns();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType14 = null;
        node12.setJSType(jSType14);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean20 = node19.isContinue();
        com.google.javascript.rhino.Node node21 = node12.clonePropsFrom(node19);
        boolean boolean22 = node12.isVar();
        boolean boolean23 = node12.isCase();
        com.google.javascript.rhino.Node node25 = com.google.javascript.rhino.Node.newString("Named type with empty name component");
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node(10, node12, node25);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean31 = node30.isQualifiedName();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isContinue();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean41 = node40.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType42 = null;
        node40.setJSType(jSType42);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean48 = node47.isContinue();
        com.google.javascript.rhino.Node node49 = node40.clonePropsFrom(node47);
        node35.addChildrenToBack(node40);
        boolean boolean51 = node35.isLocalResultCall();
        com.google.javascript.rhino.Node node52 = node30.copyInformationFromForTree(node35);
        node35.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.InputId inputId55 = node35.getInputId();
        node35.setOptionalArg(false);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newString("hi!", (int) '4', 52);
        boolean boolean62 = node35.isEquivalentTo(node61);
        boolean boolean63 = node35.isRegExp();
        node12.addChildToBack(node35);
        // The following exception was thrown during execution in test generation
        try {
            node3.addChildToBack(node35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNull(inputId55);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test01832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01832");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList3 = jSDocInfo0.getThrownTypes();
        boolean boolean4 = jSDocInfo0.isExterns();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNotNull(jSTypeExpressionList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test01833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01833");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        java.lang.String str6 = jSDocInfo0.getDescriptionForParameter("hi!");
        boolean boolean7 = jSDocInfo0.hasEnumParameterType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList8 = jSDocInfo0.getImplementedInterfaces();
        boolean boolean10 = jSDocInfo0.hasParameter("STRING true\n");
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList11 = jSDocInfo0.getImplementedInterfaces();
        java.util.Collection<java.lang.String> strCollection12 = jSDocInfo0.getReferences();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList11);
        org.junit.Assert.assertNull(strCollection12);
    }

    @Test
    public void test01834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01834");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isQualifiedName();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isContinue();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        node32.setJSType(jSType34);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isContinue();
        com.google.javascript.rhino.Node node41 = node32.clonePropsFrom(node39);
        node27.addChildrenToBack(node32);
        boolean boolean43 = node27.isLocalResultCall();
        com.google.javascript.rhino.Node node44 = node22.copyInformationFromForTree(node27);
        boolean boolean45 = serializableList17.contains((java.lang.Object) node27);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean50 = node49.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType51 = null;
        node49.setJSType(jSType51);
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean57 = node56.isContinue();
        com.google.javascript.rhino.Node node58 = node49.clonePropsFrom(node56);
        node58.setSourceFileForTesting("hi!");
        boolean boolean61 = node58.isIf();
        boolean boolean62 = node27.isEquivalentToTyped(node58);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder63 = node58.new FileLevelJsDocBuilder();
        fileLevelJsDocBuilder63.append("");
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test01835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01835");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getParameterNames();
        int int3 = strSet2.size();
        java.io.Serializable[] serializableArray20 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList21 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray20);
        boolean boolean22 = serializableList21.isEmpty();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean27 = node26.isQualifiedName();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean32 = node31.isContinue();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean37 = node36.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType38 = null;
        node36.setJSType(jSType38);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean44 = node43.isContinue();
        com.google.javascript.rhino.Node node45 = node36.clonePropsFrom(node43);
        node31.addChildrenToBack(node36);
        boolean boolean47 = node31.isLocalResultCall();
        com.google.javascript.rhino.Node node48 = node26.copyInformationFromForTree(node31);
        boolean boolean49 = serializableList21.contains((java.lang.Object) node31);
        java.io.Serializable[] serializableArray66 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList67 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray66);
        boolean boolean68 = serializableList21.containsAll((java.util.Collection<java.io.Serializable>) serializableList67);
        boolean boolean69 = serializableList21.isEmpty();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean70 = strSet2.removeAll((java.util.Collection<java.io.Serializable>) serializableList21);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(serializableArray20);
        org.junit.Assert.assertNotNull(serializableList21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(serializableArray66);
        org.junit.Assert.assertNotNull(serializableList67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test01836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01836");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker1 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = marker1.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker3 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition4 = marker3.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker5 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = marker5.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker7 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker8 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker9 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker10 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker11 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker12 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList13 = com.google.common.collect.ImmutableList.of(marker0, marker1, marker3, marker5, marker7, marker8, marker9, marker10, marker11, marker12);
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition14 = marker9.getNameNode();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition15 = marker9.getName();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition16 = marker9.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition17 = marker9.getNameNode();
        org.junit.Assert.assertNull(stringPosition2);
        org.junit.Assert.assertNull(stringPosition4);
        org.junit.Assert.assertNull(stringPosition6);
        org.junit.Assert.assertNotNull(markerList13);
        org.junit.Assert.assertNull(nodeSourcePosition14);
        org.junit.Assert.assertNull(stringPosition15);
        org.junit.Assert.assertNull(nodeSourcePosition16);
        org.junit.Assert.assertNull(nodeSourcePosition17);
    }

    @Test
    public void test01837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01837");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        java.lang.String str6 = jSDocInfo0.getDescriptionForParameter("hi!");
        boolean boolean7 = jSDocInfo0.isNoAlias();
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getParameterNames();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility9 = jSDocInfo0.getVisibility();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNull(visibility9);
    }

    @Test
    public void test01838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01838");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        node13.setSourceFileForTesting("hi!");
        boolean boolean16 = node13.isIf();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile17 = node13.getStaticSourceFile();
        boolean boolean18 = node13.isGetterDef();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node(3, node13);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = node19.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 3");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(staticSourceFile17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test01839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01839");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isQualifiedName();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean10 = node9.isContinue();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean15 = node14.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType16 = null;
        node14.setJSType(jSType16);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean22 = node21.isContinue();
        com.google.javascript.rhino.Node node23 = node14.clonePropsFrom(node21);
        node9.addChildrenToBack(node14);
        boolean boolean25 = node9.isLocalResultCall();
        com.google.javascript.rhino.Node node26 = node4.copyInformationFromForTree(node9);
        boolean boolean27 = node9.isParamList();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(38, node9, 51, 38);
        int int31 = node30.getSideEffectFlags();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType37 = null;
        node35.setJSType(jSType37);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean43 = node42.isContinue();
        com.google.javascript.rhino.Node node44 = node35.clonePropsFrom(node42);
        node44.setSourceFileForTesting("hi!");
        boolean boolean47 = node44.isIf();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile48 = node44.getStaticSourceFile();
        int int50 = staticSourceFile48.getLineOffset(31);
        java.lang.String str51 = staticSourceFile48.getName();
        node30.setStaticSourceFile(staticSourceFile48);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str53 = node30.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: NAME 51 [source_file: hi!] is not a string node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(staticSourceFile48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-2147483648) + "'", int50 == (-2147483648));
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hi!" + "'", str51, "hi!");
    }

    @Test
    public void test01840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01840");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isQualifiedName();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isContinue();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        node32.setJSType(jSType34);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isContinue();
        com.google.javascript.rhino.Node node41 = node32.clonePropsFrom(node39);
        node27.addChildrenToBack(node32);
        boolean boolean43 = node27.isLocalResultCall();
        com.google.javascript.rhino.Node node44 = node22.copyInformationFromForTree(node27);
        boolean boolean45 = serializableList17.contains((java.lang.Object) node27);
        boolean boolean46 = node27.isDec();
        com.google.javascript.rhino.Node node47 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node48 = node27.clonePropsFrom(node47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test01841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01841");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node(0, 54, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            node3.setQuotedString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: not a StringNode");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01842");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.hasReturnType();
        boolean boolean5 = jSDocInfo0.isDefine();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getReturnType();
        boolean boolean7 = jSDocInfo0.hasEnumParameterType();
        boolean boolean8 = jSDocInfo0.isConsistentIdGenerator();
        boolean boolean9 = jSDocInfo0.hasEnumParameterType();
        boolean boolean11 = jSDocInfo0.hasParameter("[30, 100.0, -1, 0.0, 100, 1.0, 1, 0, a, 0, 0.0, 1.0, hi!, 100, 10.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test01843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01843");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream21 = serializableList17.stream();
        java.util.ListIterator<java.io.Serializable> serializableItor22 = serializableList17.listIterator();
        com.google.common.collect.UnmodifiableListIterator<java.io.Serializable> serializableItor23 = serializableList17.listIterator();
        com.google.common.collect.ImmutableList<com.google.common.collect.ImmutableCollection<java.io.Serializable>> serializableCollectionList24 = com.google.common.collect.ImmutableList.of((com.google.common.collect.ImmutableCollection<java.io.Serializable>) serializableList17);
        boolean boolean25 = serializableList17.isEmpty();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isQualifiedName();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean41 = node40.isContinue();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean46 = node45.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType47 = null;
        node45.setJSType(jSType47);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean53 = node52.isContinue();
        com.google.javascript.rhino.Node node54 = node45.clonePropsFrom(node52);
        node40.addChildrenToBack(node45);
        boolean boolean56 = node40.isLocalResultCall();
        com.google.javascript.rhino.Node node57 = node35.copyInformationFromForTree(node40);
        node40.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node60 = node31.clonePropsFrom(node40);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean65 = node64.isLabelName();
        boolean boolean66 = node64.isTrue();
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean71 = node70.isContinue();
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean76 = node75.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType77 = null;
        node75.setJSType(jSType77);
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean83 = node82.isContinue();
        com.google.javascript.rhino.Node node84 = node75.clonePropsFrom(node82);
        com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node((int) (byte) 0, node40, node64, node70, node84, 10, (int) (byte) -1);
        node40.putIntProp((int) (short) 0, (int) (byte) -1);
        boolean boolean91 = node40.isExprResult();
        boolean boolean93 = node40.getBooleanProp(16);
        com.google.javascript.rhino.Node node94 = node40.removeChildren();
        node94.setLength(2);
        // The following exception was thrown during execution in test generation
        try {
            serializableList17.add(54, (java.io.Serializable) 2);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableStream21);
        org.junit.Assert.assertNotNull(serializableItor22);
        org.junit.Assert.assertNotNull(serializableItor23);
        org.junit.Assert.assertNotNull(serializableCollectionList24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(node94);
    }

    @Test
    public void test01844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01844");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node(32, (int) (byte) 10, (int) '#');
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isQualifiedName();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isContinue();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType24 = null;
        node22.setJSType(jSType24);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean30 = node29.isContinue();
        com.google.javascript.rhino.Node node31 = node22.clonePropsFrom(node29);
        node17.addChildrenToBack(node22);
        boolean boolean33 = node17.isLocalResultCall();
        com.google.javascript.rhino.Node node34 = node12.copyInformationFromForTree(node17);
        node17.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node37 = node8.clonePropsFrom(node17);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isInstanceOf();
        boolean boolean43 = node41.isComma();
        boolean boolean44 = node8.isEquivalentTo(node41);
        boolean boolean45 = node41.isComma();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) '#', node4, node41, 42, (int) ' ');
        boolean boolean49 = node48.isComma();
        com.google.javascript.rhino.Node node50 = node48.cloneTree();
        boolean boolean51 = node50.isWith();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        boolean boolean57 = node55.isTry();
        com.google.javascript.rhino.Node node58 = node50.clonePropsFrom(node55);
        int int59 = node50.getType();
        com.google.javascript.rhino.Node node60 = node50.removeChildren();
        // The following exception was thrown during execution in test generation
        try {
            node60.setQuotedString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: not a StringNode");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 35 + "'", int59 == 35);
        org.junit.Assert.assertNotNull(node60);
    }

    @Test
    public void test01845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01845");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(49, "(Unknown class name)", (int) 'a', (int) (byte) 10);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable5 = node4.siblings();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(nodeIterable5);
    }

    @Test
    public void test01846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01846");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        boolean boolean13 = node12.isQuotedString();
        boolean boolean14 = node12.isOptionalArg();
        boolean boolean15 = node12.isThis();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean25 = node24.isQualifiedName();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean30 = node29.isContinue();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean35 = node34.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType36 = null;
        node34.setJSType(jSType36);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isContinue();
        com.google.javascript.rhino.Node node43 = node34.clonePropsFrom(node41);
        node29.addChildrenToBack(node34);
        boolean boolean45 = node29.isLocalResultCall();
        com.google.javascript.rhino.Node node46 = node24.copyInformationFromForTree(node29);
        node29.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node49 = node20.clonePropsFrom(node29);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean54 = node53.isLabelName();
        boolean boolean55 = node53.isTrue();
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean60 = node59.isContinue();
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean65 = node64.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType66 = null;
        node64.setJSType(jSType66);
        com.google.javascript.rhino.Node node71 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean72 = node71.isContinue();
        com.google.javascript.rhino.Node node73 = node64.clonePropsFrom(node71);
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node((int) (byte) 0, node29, node53, node59, node73, 10, (int) (byte) -1);
        node29.putIntProp((int) (short) 0, (int) (byte) -1);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile80 = node29.getStaticSourceFile();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable81 = node29.getAncestors();
        java.lang.String str82 = node29.getSourceFileName();
        com.google.javascript.rhino.Node node83 = node12.srcref(node29);
        int int84 = node29.getLength();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNull(staticSourceFile80);
        org.junit.Assert.assertNotNull(ancestorIterable81);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(node83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
    }

    @Test
    public void test01847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01847");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isQualifiedName();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(32, (int) (byte) 10, (int) '#');
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isQualifiedName();
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean24 = node23.isContinue();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        node28.setJSType(jSType30);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isContinue();
        com.google.javascript.rhino.Node node37 = node28.clonePropsFrom(node35);
        node23.addChildrenToBack(node28);
        boolean boolean39 = node23.isLocalResultCall();
        com.google.javascript.rhino.Node node40 = node18.copyInformationFromForTree(node23);
        node23.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node43 = node14.clonePropsFrom(node23);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean48 = node47.isInstanceOf();
        boolean boolean49 = node47.isComma();
        boolean boolean50 = node14.isEquivalentTo(node47);
        boolean boolean51 = node47.isComma();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) '#', node10, node47, 42, (int) ' ');
        boolean boolean55 = node54.isComma();
        com.google.javascript.rhino.Node node56 = node54.cloneTree();
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node(16, node4, node54);
        boolean boolean58 = node57.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node59 = node57.getLastSibling();
        java.lang.String str63 = node57.toString(false, false, false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "GT" + "'", str63, "GT");
    }

    @Test
    public void test01848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01848");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        boolean boolean14 = node13.isQuotedString();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        boolean boolean20 = node18.isDec();
        boolean boolean21 = node18.isScript();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(0, node13, node18, node25, 0, (int) (short) 0);
        java.lang.String str29 = node28.getQualifiedName();
        // The following exception was thrown during execution in test generation
        try {
            int int31 = node28.getExistingIntProp(2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 2");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(str29);
    }

    @Test
    public void test01849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01849");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        int int18 = serializableList17.size();
        java.io.Serializable[] serializableArray35 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList36 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray35);
        boolean boolean37 = serializableList36.isEmpty();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isQualifiedName();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isContinue();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType53 = null;
        node51.setJSType(jSType53);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean59 = node58.isContinue();
        com.google.javascript.rhino.Node node60 = node51.clonePropsFrom(node58);
        node46.addChildrenToBack(node51);
        boolean boolean62 = node46.isLocalResultCall();
        com.google.javascript.rhino.Node node63 = node41.copyInformationFromForTree(node46);
        boolean boolean64 = serializableList36.contains((java.lang.Object) node46);
        boolean boolean65 = serializableList17.containsAll((java.util.Collection<java.io.Serializable>) serializableList36);
        java.util.stream.Stream<java.io.Serializable> serializableStream66 = serializableList17.stream();
        int int67 = serializableList17.size();
        java.io.Serializable[] serializableArray84 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList85 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray84);
        boolean boolean86 = serializableList85.isEmpty();
        boolean boolean88 = serializableList85.contains((java.lang.Object) 52);
        int int90 = serializableList85.indexOf((java.lang.Object) (-1L));
        java.util.Iterator<java.io.Serializable> serializableItor91 = serializableList85.iterator();
        java.util.List<java.io.Serializable> serializableList94 = serializableList85.subList((int) (short) 10, 16);
        boolean boolean95 = serializableList17.containsAll((java.util.Collection<java.io.Serializable>) serializableList85);
        // The following exception was thrown during execution in test generation
        try {
            serializableList17.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 16 + "'", int18 == 16);
        org.junit.Assert.assertNotNull(serializableArray35);
        org.junit.Assert.assertNotNull(serializableList36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(serializableStream66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 16 + "'", int67 == 16);
        org.junit.Assert.assertNotNull(serializableArray84);
        org.junit.Assert.assertNotNull(serializableList85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertNotNull(serializableItor91);
        org.junit.Assert.assertNotNull(serializableList94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
    }

    @Test
    public void test01850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01850");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isQualifiedName();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isContinue();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node18.setJSType(jSType20);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isContinue();
        com.google.javascript.rhino.Node node27 = node18.clonePropsFrom(node25);
        node13.addChildrenToBack(node18);
        boolean boolean29 = node13.isLocalResultCall();
        com.google.javascript.rhino.Node node30 = node8.copyInformationFromForTree(node13);
        node13.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node33 = node4.clonePropsFrom(node13);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean38 = node37.isInstanceOf();
        boolean boolean39 = node37.isComma();
        boolean boolean40 = node4.isEquivalentTo(node37);
        boolean boolean41 = node37.isOr();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean46 = node45.isContinue();
        boolean boolean47 = node45.isBlock();
        node45.removeProp(12);
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean55 = node54.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType56 = null;
        node54.setJSType(jSType56);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean62 = node61.isContinue();
        com.google.javascript.rhino.Node node63 = node54.clonePropsFrom(node61);
        boolean boolean64 = node63.isQuotedString();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean69 = node68.isLabelName();
        boolean boolean70 = node68.isDec();
        boolean boolean71 = node68.isScript();
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node(0, node63, node68, node75, 0, (int) (short) 0);
        boolean boolean79 = node63.isTrue();
        com.google.javascript.rhino.Node node80 = node45.useSourceInfoIfMissingFromForTree(node63);
        com.google.javascript.rhino.Node node81 = node80.removeFirstChild();
        com.google.javascript.rhino.Node node84 = new com.google.javascript.rhino.Node((int) (short) -1, node37, node80, 53, 50);
        boolean boolean85 = node84.isThis();
        boolean boolean86 = node84.isInstanceOf();
        // The following exception was thrown during execution in test generation
        try {
            double double87 = node84.getDouble();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: ERROR 53 is not a number node");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNull(node81);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test01851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01851");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isQualifiedName();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isContinue();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType15 = null;
        node13.setJSType(jSType15);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean21 = node20.isContinue();
        com.google.javascript.rhino.Node node22 = node13.clonePropsFrom(node20);
        node8.addChildrenToBack(node13);
        boolean boolean24 = node8.isLocalResultCall();
        com.google.javascript.rhino.Node node25 = node3.copyInformationFromForTree(node8);
        boolean boolean26 = node8.isParamList();
        boolean boolean27 = node8.hasMoreThanOneChild();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean32 = node31.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType33 = null;
        node31.setJSType(jSType33);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean39 = node38.isContinue();
        com.google.javascript.rhino.Node node40 = node31.clonePropsFrom(node38);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean45 = node44.isContinue();
        boolean boolean46 = node44.isString();
        boolean boolean47 = node44.isStringKey();
        com.google.javascript.rhino.Node node48 = node31.copyInformationFrom(node44);
        boolean boolean49 = node44.hasOneChild();
        com.google.javascript.rhino.Node node50 = node44.removeFirstChild();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean51 = node8.isEquivalentToTyped(node50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(node50);
    }

    @Test
    public void test01852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01852");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean6 = jSDocInfo5.hasEnumParameterType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo5.getBaseType();
        node3.setJSDocInfo(jSDocInfo5);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isQuotedString();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType19 = null;
        node17.setJSType(jSType19);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean25 = node24.isContinue();
        com.google.javascript.rhino.Node node26 = node17.clonePropsFrom(node24);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean31 = node30.isContinue();
        boolean boolean32 = node30.isString();
        com.google.javascript.rhino.Node node33 = node17.useSourceInfoFromForTree(node30);
        com.google.javascript.rhino.InputId inputId34 = null;
        node33.setInputId(inputId34);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString(37, "hi!", (int) (byte) 100, (int) (short) 100);
        int int42 = node40.getIntProp(30);
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = new com.google.javascript.rhino.JSDocInfo();
        int int44 = jSDocInfo43.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility45 = null;
        jSDocInfo43.setVisibility(visibility45);
        boolean boolean47 = jSDocInfo43.hasFileOverview();
        boolean boolean48 = jSDocInfo43.isJavaDispatch();
        boolean boolean49 = jSDocInfo43.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList50 = jSDocInfo43.getExtendedInterfaces();
        java.lang.String str51 = jSDocInfo43.getLicense();
        boolean boolean52 = jSDocInfo43.hasBaseType();
        boolean boolean53 = jSDocInfo43.isNoTypeCheck();
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = new com.google.javascript.rhino.JSDocInfo();
        int int55 = jSDocInfo54.getImplementedInterfaceCount();
        boolean boolean56 = jSDocInfo54.isExterns();
        com.google.javascript.rhino.JSDocInfo jSDocInfo58 = new com.google.javascript.rhino.JSDocInfo();
        int int59 = jSDocInfo58.getImplementedInterfaceCount();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean64 = node63.isQualifiedName();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean69 = node68.isContinue();
        boolean boolean70 = node68.isDo();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList71 = com.google.common.collect.ImmutableList.of((java.io.Serializable) jSDocInfo5, (java.io.Serializable) boolean13, (java.io.Serializable) node33, (java.io.Serializable) int42, (java.io.Serializable) boolean53, (java.io.Serializable) boolean56, (java.io.Serializable) ' ', (java.io.Serializable) jSDocInfo58, (java.io.Serializable) node63, (java.io.Serializable) boolean70);
        com.google.common.collect.UnmodifiableIterator<java.io.Serializable> serializableItor72 = serializableList71.iterator();
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean77 = node76.isLabelName();
        boolean boolean78 = node76.isTrue();
        boolean boolean79 = node76.isNoSideEffectsCall();
        boolean boolean80 = node76.isCase();
        boolean boolean81 = node76.isIn();
        node76.setVarArgs(false);
        boolean boolean84 = node76.isComma();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean85 = serializableList71.remove((java.lang.Object) boolean84);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(serializableList71);
        org.junit.Assert.assertNotNull(serializableItor72);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test01853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01853");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean6 = jSDocInfo5.hasEnumParameterType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo5.getBaseType();
        node3.setJSDocInfo(jSDocInfo5);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isQuotedString();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType19 = null;
        node17.setJSType(jSType19);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean25 = node24.isContinue();
        com.google.javascript.rhino.Node node26 = node17.clonePropsFrom(node24);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean31 = node30.isContinue();
        boolean boolean32 = node30.isString();
        com.google.javascript.rhino.Node node33 = node17.useSourceInfoFromForTree(node30);
        com.google.javascript.rhino.InputId inputId34 = null;
        node33.setInputId(inputId34);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString(37, "hi!", (int) (byte) 100, (int) (short) 100);
        int int42 = node40.getIntProp(30);
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = new com.google.javascript.rhino.JSDocInfo();
        int int44 = jSDocInfo43.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility45 = null;
        jSDocInfo43.setVisibility(visibility45);
        boolean boolean47 = jSDocInfo43.hasFileOverview();
        boolean boolean48 = jSDocInfo43.isJavaDispatch();
        boolean boolean49 = jSDocInfo43.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList50 = jSDocInfo43.getExtendedInterfaces();
        java.lang.String str51 = jSDocInfo43.getLicense();
        boolean boolean52 = jSDocInfo43.hasBaseType();
        boolean boolean53 = jSDocInfo43.isNoTypeCheck();
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = new com.google.javascript.rhino.JSDocInfo();
        int int55 = jSDocInfo54.getImplementedInterfaceCount();
        boolean boolean56 = jSDocInfo54.isExterns();
        com.google.javascript.rhino.JSDocInfo jSDocInfo58 = new com.google.javascript.rhino.JSDocInfo();
        int int59 = jSDocInfo58.getImplementedInterfaceCount();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean64 = node63.isQualifiedName();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean69 = node68.isContinue();
        boolean boolean70 = node68.isDo();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList71 = com.google.common.collect.ImmutableList.of((java.io.Serializable) jSDocInfo5, (java.io.Serializable) boolean13, (java.io.Serializable) node33, (java.io.Serializable) int42, (java.io.Serializable) boolean53, (java.io.Serializable) boolean56, (java.io.Serializable) ' ', (java.io.Serializable) jSDocInfo58, (java.io.Serializable) node63, (java.io.Serializable) boolean70);
        boolean boolean72 = jSDocInfo5.containsDeclaration();
        boolean boolean73 = jSDocInfo5.isOverride();
        java.lang.String str74 = jSDocInfo5.toString();
        java.lang.String str75 = jSDocInfo5.getVersion();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(serializableList71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "JSDocInfo" + "'", str74, "JSDocInfo");
        org.junit.Assert.assertNull(str75);
    }

    @Test
    public void test01854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01854");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasEnumParameterType();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getParameterNames();
        java.util.Iterator<java.lang.String> strItor3 = strSet2.iterator();
        // The following exception was thrown during execution in test generation
        try {
            strSet2.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(strItor3);
    }

    @Test
    public void test01855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01855");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isContinue();
        boolean boolean19 = node17.isString();
        com.google.javascript.rhino.Node node20 = node4.useSourceInfoFromForTree(node17);
        com.google.javascript.rhino.InputId inputId21 = null;
        node20.setInputId(inputId21);
        java.lang.Object obj24 = node20.getProp((int) (short) 10);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        node28.setJSType(jSType30);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isContinue();
        com.google.javascript.rhino.Node node37 = node28.clonePropsFrom(node35);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isContinue();
        boolean boolean43 = node41.isString();
        com.google.javascript.rhino.Node node44 = node28.useSourceInfoFromForTree(node41);
        com.google.javascript.rhino.InputId inputId45 = null;
        node44.setInputId(inputId45);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isQualifiedName();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean61 = node60.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType62 = null;
        node60.setJSType(jSType62);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean68 = node67.isContinue();
        com.google.javascript.rhino.Node node69 = node60.clonePropsFrom(node67);
        node55.addChildrenToBack(node60);
        boolean boolean71 = node55.isLocalResultCall();
        com.google.javascript.rhino.Node node72 = node50.copyInformationFromForTree(node55);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(0, node20, node44, node55, (int) (short) 10, 53);
        com.google.javascript.rhino.InputId inputId76 = node55.getInputId();
        boolean boolean77 = node55.isReturn();
        com.google.javascript.rhino.Node node78 = node55.getFirstChild();
        boolean boolean79 = node55.isNumber();
        boolean boolean80 = node55.isWith();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(inputId76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test01856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01856");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isContinue();
        boolean boolean19 = node17.isString();
        com.google.javascript.rhino.Node node20 = node4.useSourceInfoFromForTree(node17);
        com.google.javascript.rhino.InputId inputId21 = null;
        node20.setInputId(inputId21);
        java.lang.Object obj24 = node20.getProp((int) (short) 10);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        node28.setJSType(jSType30);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isContinue();
        com.google.javascript.rhino.Node node37 = node28.clonePropsFrom(node35);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isContinue();
        boolean boolean43 = node41.isString();
        com.google.javascript.rhino.Node node44 = node28.useSourceInfoFromForTree(node41);
        com.google.javascript.rhino.InputId inputId45 = null;
        node44.setInputId(inputId45);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isQualifiedName();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean61 = node60.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType62 = null;
        node60.setJSType(jSType62);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean68 = node67.isContinue();
        com.google.javascript.rhino.Node node69 = node60.clonePropsFrom(node67);
        node55.addChildrenToBack(node60);
        boolean boolean71 = node55.isLocalResultCall();
        com.google.javascript.rhino.Node node72 = node50.copyInformationFromForTree(node55);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(0, node20, node44, node55, (int) (short) 10, 53);
        com.google.javascript.rhino.InputId inputId76 = node55.getInputId();
        int int77 = node55.getChildCount();
        boolean boolean78 = node55.isOnlyModifiesThisCall();
        boolean boolean79 = node55.isNoSideEffectsCall();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(inputId76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test01857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01857");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoAlias();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getModifies();
        java.io.Serializable[] serializableArray19 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList20 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray19);
        boolean boolean21 = serializableList20.isEmpty();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isQualifiedName();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean31 = node30.isContinue();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType37 = null;
        node35.setJSType(jSType37);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean43 = node42.isContinue();
        com.google.javascript.rhino.Node node44 = node35.clonePropsFrom(node42);
        node30.addChildrenToBack(node35);
        boolean boolean46 = node30.isLocalResultCall();
        com.google.javascript.rhino.Node node47 = node25.copyInformationFromForTree(node30);
        boolean boolean48 = serializableList20.contains((java.lang.Object) node30);
        java.io.Serializable[] serializableArray65 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList66 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray65);
        boolean boolean67 = serializableList20.containsAll((java.util.Collection<java.io.Serializable>) serializableList66);
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList68 = serializableList66.reverse();
        boolean boolean69 = strSet2.retainAll((java.util.Collection<java.io.Serializable>) serializableList68);
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList70 = serializableList68.reverse();
        java.util.Collection<java.io.Serializable> serializableCollection71 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean72 = serializableList70.retainAll(serializableCollection71);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(serializableArray19);
        org.junit.Assert.assertNotNull(serializableList20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(serializableArray65);
        org.junit.Assert.assertNotNull(serializableList66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(serializableList68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(serializableList70);
    }

    @Test
    public void test01858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01858");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean6 = jSDocInfo5.hasEnumParameterType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo5.getBaseType();
        node3.setJSDocInfo(jSDocInfo5);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isQuotedString();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType19 = null;
        node17.setJSType(jSType19);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean25 = node24.isContinue();
        com.google.javascript.rhino.Node node26 = node17.clonePropsFrom(node24);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean31 = node30.isContinue();
        boolean boolean32 = node30.isString();
        com.google.javascript.rhino.Node node33 = node17.useSourceInfoFromForTree(node30);
        com.google.javascript.rhino.InputId inputId34 = null;
        node33.setInputId(inputId34);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString(37, "hi!", (int) (byte) 100, (int) (short) 100);
        int int42 = node40.getIntProp(30);
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = new com.google.javascript.rhino.JSDocInfo();
        int int44 = jSDocInfo43.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility45 = null;
        jSDocInfo43.setVisibility(visibility45);
        boolean boolean47 = jSDocInfo43.hasFileOverview();
        boolean boolean48 = jSDocInfo43.isJavaDispatch();
        boolean boolean49 = jSDocInfo43.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList50 = jSDocInfo43.getExtendedInterfaces();
        java.lang.String str51 = jSDocInfo43.getLicense();
        boolean boolean52 = jSDocInfo43.hasBaseType();
        boolean boolean53 = jSDocInfo43.isNoTypeCheck();
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = new com.google.javascript.rhino.JSDocInfo();
        int int55 = jSDocInfo54.getImplementedInterfaceCount();
        boolean boolean56 = jSDocInfo54.isExterns();
        com.google.javascript.rhino.JSDocInfo jSDocInfo58 = new com.google.javascript.rhino.JSDocInfo();
        int int59 = jSDocInfo58.getImplementedInterfaceCount();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean64 = node63.isQualifiedName();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean69 = node68.isContinue();
        boolean boolean70 = node68.isDo();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList71 = com.google.common.collect.ImmutableList.of((java.io.Serializable) jSDocInfo5, (java.io.Serializable) boolean13, (java.io.Serializable) node33, (java.io.Serializable) int42, (java.io.Serializable) boolean53, (java.io.Serializable) boolean56, (java.io.Serializable) ' ', (java.io.Serializable) jSDocInfo58, (java.io.Serializable) node63, (java.io.Serializable) boolean70);
        boolean boolean72 = jSDocInfo5.containsDeclaration();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression73 = jSDocInfo5.getTypedefType();
        java.util.Collection<java.lang.String> strCollection74 = jSDocInfo5.getReferences();
        boolean boolean75 = jSDocInfo5.isExterns();
        jSDocInfo5.setDeprecated(false);
        jSDocInfo5.setLicense("[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        com.google.javascript.rhino.JSDocInfo.Visibility visibility80 = jSDocInfo5.getVisibility();
        boolean boolean81 = jSDocInfo5.isNoShadow();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(serializableList71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(jSTypeExpression73);
        org.junit.Assert.assertNull(strCollection74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(visibility80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test01859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01859");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isQualifiedName();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isContinue();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        node32.setJSType(jSType34);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isContinue();
        com.google.javascript.rhino.Node node41 = node32.clonePropsFrom(node39);
        node27.addChildrenToBack(node32);
        boolean boolean43 = node27.isLocalResultCall();
        com.google.javascript.rhino.Node node44 = node22.copyInformationFromForTree(node27);
        boolean boolean45 = serializableList17.contains((java.lang.Object) node27);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean50 = node49.isQualifiedName();
        int int51 = serializableList17.indexOf((java.lang.Object) node49);
        boolean boolean52 = node49.wasEmptyNode();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable53 = node49.siblings();
        com.google.javascript.rhino.Node node54 = node49.getLastChild();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node55 = node54.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(nodeIterable53);
        org.junit.Assert.assertNull(node54);
    }

    @Test
    public void test01860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01860");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isQuotedString();
        com.google.javascript.rhino.Node node6 = com.google.javascript.rhino.Node.newString("Unknown class name");
        com.google.javascript.rhino.Node node7 = node6.getLastSibling();
        int int8 = node6.getSourcePosition();
        com.google.javascript.rhino.Node node9 = node3.srcrefTree(node6);
        boolean boolean10 = node3.isWhile();
        boolean boolean11 = node3.isWith();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean16 = node15.isQualifiedName();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean21 = node20.isContinue();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType27 = null;
        node25.setJSType(jSType27);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isContinue();
        com.google.javascript.rhino.Node node34 = node25.clonePropsFrom(node32);
        node20.addChildrenToBack(node25);
        boolean boolean36 = node20.isLocalResultCall();
        com.google.javascript.rhino.Node node37 = node15.copyInformationFromForTree(node20);
        node20.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.InputId inputId40 = node20.getInputId();
        node20.setLineno(54);
        boolean boolean43 = node20.isVoid();
        boolean boolean44 = node20.isFromExterns();
        boolean boolean45 = node20.isSwitch();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isQualifiedName();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean61 = node60.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType62 = null;
        node60.setJSType(jSType62);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean68 = node67.isContinue();
        com.google.javascript.rhino.Node node69 = node60.clonePropsFrom(node67);
        node55.addChildrenToBack(node60);
        boolean boolean71 = node55.isLocalResultCall();
        com.google.javascript.rhino.Node node72 = node50.copyInformationFromForTree(node55);
        boolean boolean73 = node55.isParamList();
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node(38, node55, 51, 38);
        int int77 = node76.getSideEffectFlags();
        java.lang.String str78 = node76.getSourceFileName();
        node20.addChildrenToBack(node76);
        com.google.javascript.rhino.Node node80 = node3.useSourceInfoFromForTree(node20);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str81 = node3.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node6);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNull(inputId40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(node80);
    }

    @Test
    public void test01861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01861");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker1 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = marker1.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker3 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition4 = marker3.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker5 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition6 = marker5.getDescription();
        com.google.javascript.rhino.JSDocInfo.Marker marker7 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker8 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker9 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker10 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker11 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.JSDocInfo.Marker marker12 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo.Marker> markerList13 = com.google.common.collect.ImmutableList.of(marker0, marker1, marker3, marker5, marker7, marker8, marker9, marker10, marker11, marker12);
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition14 = marker11.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition15 = marker11.getName();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition16 = marker11.getNameNode();
        org.junit.Assert.assertNull(stringPosition2);
        org.junit.Assert.assertNull(stringPosition4);
        org.junit.Assert.assertNull(stringPosition6);
        org.junit.Assert.assertNotNull(markerList13);
        org.junit.Assert.assertNull(typePosition14);
        org.junit.Assert.assertNull(stringPosition15);
        org.junit.Assert.assertNull(nodeSourcePosition16);
    }

    @Test
    public void test01862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01862");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        java.lang.String str6 = jSDocInfo0.getDescriptionForParameter("hi!");
        boolean boolean7 = jSDocInfo0.hasEnumParameterType();
        boolean boolean8 = jSDocInfo0.hasEnumParameterType();
        boolean boolean9 = jSDocInfo0.isNoSideEffects();
        java.lang.String str10 = jSDocInfo0.getLicense();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test01863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01863");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        int int13 = node12.getLineno();
        com.google.javascript.rhino.Node node14 = node12.getNext();
        com.google.javascript.rhino.InputId inputId16 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId18 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId20 = new com.google.javascript.rhino.InputId("true");
        com.google.javascript.rhino.InputId inputId22 = new com.google.javascript.rhino.InputId("true");
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.InputId> inputIdList23 = com.google.common.collect.ImmutableList.of(inputId16, inputId18, inputId20, inputId22);
        node12.setInputId(inputId16);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node25 = node12.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNull(node14);
        org.junit.Assert.assertNotNull(inputIdList23);
    }

    @Test
    public void test01864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01864");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        boolean boolean6 = node4.isDec();
        boolean boolean7 = node4.isAssign();
        boolean boolean8 = node4.isIn();
        boolean boolean9 = node4.isThis();
        boolean boolean10 = node4.isOr();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean15 = node14.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType16 = null;
        node14.setJSType(jSType16);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean22 = node21.isContinue();
        com.google.javascript.rhino.Node node23 = node14.clonePropsFrom(node21);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isContinue();
        boolean boolean29 = node27.isString();
        com.google.javascript.rhino.Node node30 = node14.useSourceInfoFromForTree(node27);
        com.google.javascript.rhino.InputId inputId31 = null;
        node30.setInputId(inputId31);
        java.lang.Object obj34 = node30.getProp((int) (short) 10);
        com.google.javascript.rhino.JSDocInfo jSDocInfo35 = node30.getJSDocInfo();
        node30.setVarArgs(true);
        boolean boolean38 = node30.isFor();
        com.google.javascript.rhino.JSDocInfo jSDocInfo39 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean40 = jSDocInfo39.isNoAlias();
        boolean boolean42 = jSDocInfo39.hasDescriptionForParameter("java.io.IOException: java.io.IOException");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression43 = jSDocInfo39.getEnumParameterType();
        jSDocInfo39.setDeprecated(false);
        boolean boolean46 = jSDocInfo39.isImplicitCast();
        node30.setJSDocInfo(jSDocInfo39);
        node30.setSourceEncodedPositionForTree(8);
        com.google.javascript.rhino.InputId inputId50 = node30.getInputId();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node(31, node4, node30, (int) (short) 0, 3);
        boolean boolean54 = node53.isHook();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNull(jSDocInfo35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(jSTypeExpression43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(inputId50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test01865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01865");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getModifies();
        com.google.javascript.rhino.JSDocInfo jSDocInfo3 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean4 = jSDocInfo3.isNoAlias();
        boolean boolean5 = strSet2.equals((java.lang.Object) jSDocInfo3);
        strSet2.clear();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        boolean boolean12 = node10.isBlock();
        node10.removeProp(12);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean20 = node19.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType21 = null;
        node19.setJSType(jSType21);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean27 = node26.isContinue();
        com.google.javascript.rhino.Node node28 = node19.clonePropsFrom(node26);
        boolean boolean29 = node28.isQuotedString();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean34 = node33.isLabelName();
        boolean boolean35 = node33.isDec();
        boolean boolean36 = node33.isScript();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(0, node28, node33, node40, 0, (int) (short) 0);
        boolean boolean44 = node28.isTrue();
        com.google.javascript.rhino.Node node45 = node10.useSourceInfoIfMissingFromForTree(node28);
        boolean boolean46 = node10.isOnlyModifiesThisCall();
        boolean boolean47 = strSet2.contains((java.lang.Object) boolean46);
        java.io.Serializable[] serializableArray64 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList65 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray64);
        boolean boolean66 = serializableList65.isEmpty();
        boolean boolean68 = serializableList65.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream69 = serializableList65.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream70 = serializableList65.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream71 = serializableList65.parallelStream();
        com.google.javascript.rhino.JSDocInfo jSDocInfo72 = new com.google.javascript.rhino.JSDocInfo();
        int int73 = jSDocInfo72.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet74 = jSDocInfo72.getParameterNames();
        boolean boolean75 = serializableList65.contains((java.lang.Object) strSet74);
        com.google.common.collect.UnmodifiableIterator<java.io.Serializable> serializableItor76 = serializableList65.iterator();
        boolean boolean77 = strSet2.remove((java.lang.Object) serializableList65);
        java.util.stream.Stream<java.io.Serializable> serializableStream78 = serializableList65.parallelStream();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.io.Serializable> serializableList81 = serializableList65.subList((-8), 9);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: start index (-8) must not be negative");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(serializableArray64);
        org.junit.Assert.assertNotNull(serializableList65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(serializableStream69);
        org.junit.Assert.assertNotNull(serializableStream70);
        org.junit.Assert.assertNotNull(serializableStream71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(strSet74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(serializableItor76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(serializableStream78);
    }

    @Test
    public void test01866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01866");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isQualifiedName();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isContinue();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node18.setJSType(jSType20);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isContinue();
        com.google.javascript.rhino.Node node27 = node18.clonePropsFrom(node25);
        node13.addChildrenToBack(node18);
        boolean boolean29 = node13.isLocalResultCall();
        com.google.javascript.rhino.Node node30 = node8.copyInformationFromForTree(node13);
        node13.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node33 = node4.clonePropsFrom(node13);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean38 = node37.isLabelName();
        boolean boolean39 = node37.isTrue();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean44 = node43.isContinue();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean49 = node48.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        node48.setJSType(jSType50);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node57 = node48.clonePropsFrom(node55);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (byte) 0, node13, node37, node43, node57, 10, (int) (byte) -1);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean65 = node64.isContinue();
        boolean boolean66 = node64.isDo();
        boolean boolean67 = node57.isEquivalentTo(node64);
        node57.putIntProp(12, 53);
        com.google.javascript.rhino.Node node71 = node57.cloneTree();
        com.google.javascript.rhino.jstype.JSType jSType72 = node71.getJSType();
        boolean boolean73 = node71.isHook();
        int int74 = node71.getSideEffectFlags();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNull(jSType72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
    }

    @Test
    public void test01867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01867");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("Named type with empty name component");
        boolean boolean2 = node1.isComma();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString("Unknown class name");
        com.google.javascript.rhino.Node node5 = node4.getLastSibling();
        boolean boolean6 = node4.isDelProp();
        node1.addChildrenToBack(node4);
        boolean boolean8 = node4.isBreak();
        java.lang.String str9 = node4.getString();
        boolean boolean10 = node4.isVar();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Unknown class name" + "'", str9, "Unknown class name");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test01868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01868");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = null;
        node12.setStaticSourceFile(staticSourceFile13);
        com.google.javascript.rhino.Node node15 = node12.getLastSibling();
        boolean boolean16 = node12.isComma();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test01869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01869");
        java.lang.String[] strArray3 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        java.lang.Object[] objArray6 = strSet4.toArray();
        java.io.Serializable[] serializableArray23 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList24 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray23);
        boolean boolean25 = serializableList24.isEmpty();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean30 = node29.isQualifiedName();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean35 = node34.isContinue();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType41 = null;
        node39.setJSType(jSType41);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isContinue();
        com.google.javascript.rhino.Node node48 = node39.clonePropsFrom(node46);
        node34.addChildrenToBack(node39);
        boolean boolean50 = node34.isLocalResultCall();
        com.google.javascript.rhino.Node node51 = node29.copyInformationFromForTree(node34);
        boolean boolean52 = serializableList24.contains((java.lang.Object) node34);
        java.util.Iterator<java.io.Serializable> serializableItor53 = serializableList24.iterator();
        boolean boolean54 = strSet4.containsAll((java.util.Collection<java.io.Serializable>) serializableList24);
        java.lang.Object[] objArray55 = serializableList24.toArray();
        boolean boolean56 = serializableList24.isEmpty();
        boolean boolean57 = serializableList24.isEmpty();
        java.util.Spliterator<java.io.Serializable> serializableSpliterator58 = serializableList24.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            serializableList24.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(serializableArray23);
        org.junit.Assert.assertNotNull(serializableList24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(serializableItor53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(serializableSpliterator58);
    }

    @Test
    public void test01870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01870");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition0.setPositionInformation(0, 53, 42, (int) (byte) -1);
        java.lang.String str6 = stringPosition0.getItem();
        java.lang.String str7 = stringPosition0.getItem();
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test01871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01871");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isQualifiedName();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isContinue();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType15 = null;
        node13.setJSType(jSType15);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean21 = node20.isContinue();
        com.google.javascript.rhino.Node node22 = node13.clonePropsFrom(node20);
        node8.addChildrenToBack(node13);
        boolean boolean24 = node8.isLocalResultCall();
        com.google.javascript.rhino.Node node25 = node3.copyInformationFromForTree(node8);
        boolean boolean26 = node8.hasChildren();
        com.google.javascript.rhino.jstype.JSType jSType27 = node8.getJSType();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean32 = node31.isQualifiedName();
        boolean boolean33 = node31.isHook();
        int int34 = node31.getLength();
        java.io.Serializable[] serializableArray51 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList52 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray51);
        boolean boolean53 = serializableList52.isEmpty();
        boolean boolean55 = serializableList52.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream56 = serializableList52.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream57 = serializableList52.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream58 = serializableList52.parallelStream();
        com.google.javascript.rhino.JSDocInfo jSDocInfo59 = new com.google.javascript.rhino.JSDocInfo();
        int int60 = jSDocInfo59.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet61 = jSDocInfo59.getParameterNames();
        boolean boolean62 = serializableList52.contains((java.lang.Object) strSet61);
        node31.setDirectives(strSet61);
        node31.setIsSyntheticBlock(false);
        com.google.javascript.rhino.Node node66 = node8.useSourceInfoFromForTree(node31);
        node8.putBooleanProp(47, true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNull(jSType27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(serializableArray51);
        org.junit.Assert.assertNotNull(serializableList52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(serializableStream56);
        org.junit.Assert.assertNotNull(serializableStream57);
        org.junit.Assert.assertNotNull(serializableStream58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node66);
    }

    @Test
    public void test01872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01872");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        int int7 = node3.getSourceOffset();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isQualifiedName();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean22 = node21.isContinue();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean27 = node26.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType28 = null;
        node26.setJSType(jSType28);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean34 = node33.isContinue();
        com.google.javascript.rhino.Node node35 = node26.clonePropsFrom(node33);
        node21.addChildrenToBack(node26);
        boolean boolean37 = node21.isLocalResultCall();
        com.google.javascript.rhino.Node node38 = node16.copyInformationFromForTree(node21);
        node21.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node41 = node12.clonePropsFrom(node21);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean46 = node45.isLabelName();
        boolean boolean47 = node45.isTrue();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isContinue();
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean57 = node56.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType58 = null;
        node56.setJSType(jSType58);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean64 = node63.isContinue();
        com.google.javascript.rhino.Node node65 = node56.clonePropsFrom(node63);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (byte) 0, node21, node45, node51, node65, 10, (int) (byte) -1);
        node21.putIntProp((int) (short) 0, (int) (byte) -1);
        com.google.javascript.rhino.Node node72 = node3.useSourceInfoFrom(node21);
        boolean boolean73 = node21.isGetterDef();
        boolean boolean74 = node21.isTry();
        int int75 = node21.getLength();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
    }

    @Test
    public void test01873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01873");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("Unknown class name");
        boolean boolean2 = node1.isBreak();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean7 = node6.isContinue();
        boolean boolean8 = node6.isBlock();
        node6.removeProp(12);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean16 = node15.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType17 = null;
        node15.setJSType(jSType17);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isContinue();
        com.google.javascript.rhino.Node node24 = node15.clonePropsFrom(node22);
        boolean boolean25 = node24.isQuotedString();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean30 = node29.isLabelName();
        boolean boolean31 = node29.isDec();
        boolean boolean32 = node29.isScript();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node(0, node24, node29, node36, 0, (int) (short) 0);
        boolean boolean40 = node24.isTrue();
        com.google.javascript.rhino.Node node41 = node6.useSourceInfoIfMissingFromForTree(node24);
        int int42 = node24.getSourcePosition();
        com.google.javascript.rhino.Node node43 = node1.srcref(node24);
        boolean boolean44 = node1.isFor();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test01874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01874");
        java.lang.String str1 = com.google.javascript.rhino.jstype.ObjectType.createDelegateSuffix("java.io.IOException: java.io.IOException");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "(java.io.IOException: java.io.IOException)" + "'", str1, "(java.io.IOException: java.io.IOException)");
    }

    @Test
    public void test01875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01875");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getStartLine();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isQualifiedName();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isContinue();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean22 = node21.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType23 = null;
        node21.setJSType(jSType23);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isContinue();
        com.google.javascript.rhino.Node node30 = node21.clonePropsFrom(node28);
        node16.addChildrenToBack(node21);
        boolean boolean32 = node16.isLocalResultCall();
        com.google.javascript.rhino.Node node33 = node11.copyInformationFromForTree(node16);
        node16.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node36 = node7.clonePropsFrom(node16);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean41 = node40.isLabelName();
        boolean boolean42 = node40.isTrue();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isContinue();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType53 = null;
        node51.setJSType(jSType53);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean59 = node58.isContinue();
        com.google.javascript.rhino.Node node60 = node51.clonePropsFrom(node58);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (byte) 0, node16, node40, node46, node60, 10, (int) (byte) -1);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) -1, node63);
        typePosition0.setItem(node63);
        boolean boolean66 = typePosition0.hasBrackets();
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean71 = node70.isQualifiedName();
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean76 = node75.isContinue();
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean81 = node80.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType82 = null;
        node80.setJSType(jSType82);
        com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean88 = node87.isContinue();
        com.google.javascript.rhino.Node node89 = node80.clonePropsFrom(node87);
        node75.addChildrenToBack(node80);
        boolean boolean91 = node75.isLocalResultCall();
        com.google.javascript.rhino.Node node92 = node70.copyInformationFromForTree(node75);
        typePosition0.setItem(node75);
        com.google.javascript.rhino.Node node94 = typePosition0.getItem();
        com.google.javascript.rhino.Node node95 = typePosition0.getItem();
        boolean boolean96 = node95.isWith();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(node92);
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertNotNull(node95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test01876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01876");
        java.io.IOException iOException1 = new java.io.IOException("(Not declared as a type name)");
    }

    @Test
    public void test01877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01877");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        java.lang.String str6 = jSDocInfo0.getDescriptionForParameter("hi!");
        boolean boolean8 = jSDocInfo0.hasParameterType("");
        java.lang.String str9 = jSDocInfo0.getReturnDescription();
        java.lang.String str10 = jSDocInfo0.getMeaning();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test01878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01878");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 32, 38, (int) (short) 10);
        java.lang.Object obj5 = node3.getProp(4095);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(obj5);
    }

    @Test
    public void test01879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01879");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        com.google.common.collect.UnmodifiableListIterator<java.io.Serializable> serializableItor21 = serializableList17.listIterator();
        java.util.Spliterator<java.io.Serializable> serializableSpliterator22 = serializableList17.spliterator();
        java.util.stream.Stream<java.io.Serializable> serializableStream23 = serializableList17.parallelStream();
        java.util.function.UnaryOperator<java.io.Serializable> serializableUnaryOperator24 = null;
        // The following exception was thrown during execution in test generation
        try {
            serializableList17.replaceAll(serializableUnaryOperator24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableItor21);
        org.junit.Assert.assertNotNull(serializableSpliterator22);
        org.junit.Assert.assertNotNull(serializableStream23);
    }

    @Test
    public void test01880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01880");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility5 = com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE;
        jSDocInfo0.setVisibility(visibility5);
        java.lang.String str7 = jSDocInfo0.getVersion();
        boolean boolean8 = jSDocInfo0.hasModifies();
        jSDocInfo0.addSuppression("");
        boolean boolean11 = jSDocInfo0.hasEnumParameterType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression12 = jSDocInfo0.getBaseType();
        java.util.Set<java.lang.String> strSet13 = jSDocInfo0.getParameterNames();
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = new com.google.javascript.rhino.JSDocInfo();
        int int15 = jSDocInfo14.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility16 = null;
        jSDocInfo14.setVisibility(visibility16);
        boolean boolean18 = jSDocInfo14.hasFileOverview();
        boolean boolean19 = jSDocInfo14.isJavaDispatch();
        boolean boolean20 = jSDocInfo14.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList21 = jSDocInfo14.getExtendedInterfaces();
        boolean boolean23 = jSDocInfo14.hasDescriptionForParameter("Not declared as a constructor");
        boolean boolean25 = jSDocInfo14.hasDescriptionForParameter("java.io.IOException: java.io.IOException");
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression26 = jSDocInfo14.getReturnType();
        boolean boolean27 = strSet13.equals((java.lang.Object) jSDocInfo14);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean29 = strSet13.add("java.io.IOException: NUMBER -1.0 12");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + visibility5 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE + "'", visibility5.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PRIVATE));
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(jSTypeExpression12);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(jSTypeExpression26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test01881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01881");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(40);
        sideEffectFlags1.clearAllFlags();
        sideEffectFlags1.setMutatesArguments();
    }

    @Test
    public void test01882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01882");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 36, (int) (byte) -1, 29);
        org.junit.Assert.assertNotNull(node3);
    }

    @Test
    public void test01883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01883");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.hasFileOverview();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection5 = jSDocInfo0.getTypeNodes();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression6 = jSDocInfo0.getTypedefType();
        java.lang.String str7 = jSDocInfo0.getDeprecationReason();
        boolean boolean8 = jSDocInfo0.isIdGenerator();
        int int9 = jSDocInfo0.getImplementedInterfaceCount();
        java.lang.String str10 = jSDocInfo0.getFileOverview();
        boolean boolean11 = jSDocInfo0.hasTypedefType();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(nodeCollection5);
        org.junit.Assert.assertNull(jSTypeExpression6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test01884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01884");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isContinue();
        boolean boolean5 = node3.isDo();
        node3.setSourceEncodedPosition(2);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isQualifiedName();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean22 = node21.isContinue();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean27 = node26.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType28 = null;
        node26.setJSType(jSType28);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean34 = node33.isContinue();
        com.google.javascript.rhino.Node node35 = node26.clonePropsFrom(node33);
        node21.addChildrenToBack(node26);
        boolean boolean37 = node21.isLocalResultCall();
        com.google.javascript.rhino.Node node38 = node16.copyInformationFromForTree(node21);
        node21.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node41 = node12.clonePropsFrom(node21);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean46 = node45.isLabelName();
        boolean boolean47 = node45.isTrue();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isContinue();
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean57 = node56.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType58 = null;
        node56.setJSType(jSType58);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean64 = node63.isContinue();
        com.google.javascript.rhino.Node node65 = node56.clonePropsFrom(node63);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (byte) 0, node21, node45, node51, node65, 10, (int) (byte) -1);
        com.google.javascript.rhino.Node node69 = node3.useSourceInfoIfMissingFrom(node51);
        boolean boolean70 = node3.isGetterDef();
        node3.setWasEmptyNode(false);
        boolean boolean73 = node3.isNE();
        boolean boolean74 = node3.isCase();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test01885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01885");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isQualifiedName();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isContinue();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType15 = null;
        node13.setJSType(jSType15);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean21 = node20.isContinue();
        com.google.javascript.rhino.Node node22 = node13.clonePropsFrom(node20);
        node8.addChildrenToBack(node13);
        boolean boolean24 = node8.isLocalResultCall();
        com.google.javascript.rhino.Node node25 = node3.copyInformationFromForTree(node8);
        node8.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.InputId inputId28 = node8.getInputId();
        node8.setOptionalArg(false);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newString("hi!", (int) '4', 52);
        boolean boolean35 = node8.isEquivalentTo(node34);
        com.google.javascript.rhino.Node node36 = node8.getLastSibling();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str37 = node8.getString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNull(inputId28);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
    }

    @Test
    public void test01886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01886");
        com.google.javascript.rhino.Node[] nodeArray3 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(51, nodeArray3, 48, 32);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray3);
        com.google.javascript.rhino.Node[] nodeArray11 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(51, nodeArray11, 48, 32);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(42, nodeArray11, 32, 12);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(36, nodeArray11);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList19 = com.google.common.collect.ImmutableList.copyOf(nodeArray11);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(51, nodeArray24, 48, 32);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray24);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(45, nodeArray24);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(40, nodeArray24, 40, (int) (byte) -1);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(51, nodeArray39, 48, 32);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(42, nodeArray39, 32, 12);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(36, nodeArray39);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(41, nodeArray39, 0, 53);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(39, nodeArray39);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(51, nodeArray56, 48, 32);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray56);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(45, nodeArray56);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(40, nodeArray56, 40, (int) (byte) -1);
        com.google.javascript.rhino.Node[] nodeArray66 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(51, nodeArray66, 48, 32);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node[]> nodeArrayList70 = com.google.common.collect.ImmutableList.of(nodeArray3, nodeArray11, nodeArray24, nodeArray39, nodeArray56, nodeArray66);
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node(12, nodeArray39, 51, (int) (byte) -1);
        org.junit.Assert.assertNotNull(nodeArray3);
        org.junit.Assert.assertNotNull(nodeArray11);
        org.junit.Assert.assertNotNull(nodeList19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertNotNull(nodeArray66);
        org.junit.Assert.assertNotNull(nodeArrayList70);
    }

    @Test
    public void test01887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01887");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        int int18 = serializableList17.size();
        java.io.Serializable[] serializableArray35 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList36 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray35);
        boolean boolean37 = serializableList36.isEmpty();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isQualifiedName();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isContinue();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType53 = null;
        node51.setJSType(jSType53);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean59 = node58.isContinue();
        com.google.javascript.rhino.Node node60 = node51.clonePropsFrom(node58);
        node46.addChildrenToBack(node51);
        boolean boolean62 = node46.isLocalResultCall();
        com.google.javascript.rhino.Node node63 = node41.copyInformationFromForTree(node46);
        boolean boolean64 = serializableList36.contains((java.lang.Object) node46);
        boolean boolean65 = serializableList17.containsAll((java.util.Collection<java.io.Serializable>) serializableList36);
        java.util.stream.Stream<java.io.Serializable> serializableStream66 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream67 = serializableList17.parallelStream();
        boolean boolean68 = serializableList17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo69 = new com.google.javascript.rhino.JSDocInfo();
        int int70 = jSDocInfo69.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet71 = jSDocInfo69.getModifies();
        java.lang.String str72 = jSDocInfo69.getMeaning();
        boolean boolean73 = jSDocInfo69.shouldPreserveTry();
        boolean boolean74 = serializableList17.equals((java.lang.Object) jSDocInfo69);
        boolean boolean75 = jSDocInfo69.hasType();
        boolean boolean76 = jSDocInfo69.isDeprecated();
        java.lang.String str77 = jSDocInfo69.getLendsName();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 16 + "'", int18 == 16);
        org.junit.Assert.assertNotNull(serializableArray35);
        org.junit.Assert.assertNotNull(serializableList36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(serializableStream66);
        org.junit.Assert.assertNotNull(serializableStream67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(str77);
    }

    @Test
    public void test01888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01888");
        java.io.IOException iOException1 = new java.io.IOException("NEW");
    }

    @Test
    public void test01889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01889");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean8 = node7.isQualifiedName();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isContinue();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType19 = null;
        node17.setJSType(jSType19);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean25 = node24.isContinue();
        com.google.javascript.rhino.Node node26 = node17.clonePropsFrom(node24);
        node12.addChildrenToBack(node17);
        boolean boolean28 = node12.isLocalResultCall();
        com.google.javascript.rhino.Node node29 = node7.copyInformationFromForTree(node12);
        node12.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node32 = node3.clonePropsFrom(node12);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean37 = node36.isInstanceOf();
        boolean boolean38 = node36.isComma();
        boolean boolean39 = node3.isEquivalentTo(node36);
        boolean boolean40 = node36.isComma();
        boolean boolean41 = node36.isContinue();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str42 = node36.toStringTree();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test01890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01890");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        int int18 = serializableList17.size();
        java.io.Serializable[] serializableArray35 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList36 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray35);
        boolean boolean37 = serializableList36.isEmpty();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isQualifiedName();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isContinue();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType53 = null;
        node51.setJSType(jSType53);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean59 = node58.isContinue();
        com.google.javascript.rhino.Node node60 = node51.clonePropsFrom(node58);
        node46.addChildrenToBack(node51);
        boolean boolean62 = node46.isLocalResultCall();
        com.google.javascript.rhino.Node node63 = node41.copyInformationFromForTree(node46);
        boolean boolean64 = serializableList36.contains((java.lang.Object) node46);
        boolean boolean65 = serializableList17.containsAll((java.util.Collection<java.io.Serializable>) serializableList36);
        java.util.stream.Stream<java.io.Serializable> serializableStream66 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream67 = serializableList17.parallelStream();
        boolean boolean68 = serializableList17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo69 = new com.google.javascript.rhino.JSDocInfo();
        int int70 = jSDocInfo69.getImplementedInterfaceCount();
        java.util.Set<java.lang.String> strSet71 = jSDocInfo69.getModifies();
        java.lang.String str72 = jSDocInfo69.getMeaning();
        boolean boolean73 = jSDocInfo69.shouldPreserveTry();
        boolean boolean74 = serializableList17.equals((java.lang.Object) jSDocInfo69);
        boolean boolean75 = jSDocInfo69.hasType();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility76 = jSDocInfo69.getVisibility();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 16 + "'", int18 == 16);
        org.junit.Assert.assertNotNull(serializableArray35);
        org.junit.Assert.assertNotNull(serializableList36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(serializableStream66);
        org.junit.Assert.assertNotNull(serializableStream67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(visibility76);
    }

    @Test
    public void test01891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01891");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream21 = serializableList17.stream();
        java.io.Serializable[] serializableArray38 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList39 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray38);
        boolean boolean40 = serializableList39.isEmpty();
        boolean boolean42 = serializableList39.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream43 = serializableList39.stream();
        boolean boolean44 = serializableList17.containsAll((java.util.Collection<java.io.Serializable>) serializableList39);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean54 = node53.isQualifiedName();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean59 = node58.isContinue();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean64 = node63.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType65 = null;
        node63.setJSType(jSType65);
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean71 = node70.isContinue();
        com.google.javascript.rhino.Node node72 = node63.clonePropsFrom(node70);
        node58.addChildrenToBack(node63);
        boolean boolean74 = node58.isLocalResultCall();
        com.google.javascript.rhino.Node node75 = node53.copyInformationFromForTree(node58);
        node58.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node78 = node49.clonePropsFrom(node58);
        com.google.javascript.rhino.Node node82 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean83 = node82.isInstanceOf();
        boolean boolean84 = node82.isComma();
        boolean boolean85 = node49.isEquivalentTo(node82);
        boolean boolean86 = node82.isComma();
        com.google.javascript.rhino.Node node90 = new com.google.javascript.rhino.Node(0, 10, 0);
        com.google.javascript.rhino.Node node93 = new com.google.javascript.rhino.Node(51, node82, node90, (int) (short) 10, (int) ' ');
        int int94 = serializableList17.lastIndexOf((java.lang.Object) node93);
        com.google.javascript.rhino.Node node95 = node93.getLastSibling();
        com.google.javascript.rhino.Node node97 = com.google.javascript.rhino.Node.newNumber((double) 45);
        com.google.javascript.rhino.Node node98 = node95.useSourceInfoIfMissingFromForTree(node97);
        int int99 = node95.getSourceOffset();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableStream21);
        org.junit.Assert.assertNotNull(serializableArray38);
        org.junit.Assert.assertNotNull(serializableList39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(serializableStream43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
        org.junit.Assert.assertNotNull(node95);
        org.junit.Assert.assertNotNull(node97);
        org.junit.Assert.assertNotNull(node98);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + (-1) + "'", int99 == (-1));
    }

    @Test
    public void test01892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01892");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber(0.0d, 39, 47);
        boolean boolean4 = node3.isDefaultCase();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test01893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01893");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getStartLine();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isQualifiedName();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isContinue();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean22 = node21.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType23 = null;
        node21.setJSType(jSType23);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isContinue();
        com.google.javascript.rhino.Node node30 = node21.clonePropsFrom(node28);
        node16.addChildrenToBack(node21);
        boolean boolean32 = node16.isLocalResultCall();
        com.google.javascript.rhino.Node node33 = node11.copyInformationFromForTree(node16);
        node16.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node36 = node7.clonePropsFrom(node16);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean41 = node40.isLabelName();
        boolean boolean42 = node40.isTrue();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isContinue();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType53 = null;
        node51.setJSType(jSType53);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean59 = node58.isContinue();
        com.google.javascript.rhino.Node node60 = node51.clonePropsFrom(node58);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (byte) 0, node16, node40, node46, node60, 10, (int) (byte) -1);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) -1, node63);
        typePosition0.setItem(node63);
        com.google.javascript.rhino.Node node66 = typePosition0.getItem();
        com.google.javascript.rhino.Node node67 = typePosition0.getItem();
        int int68 = typePosition0.getStartLine();
        com.google.javascript.rhino.Node node69 = typePosition0.getItem();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(node69);
    }

    @Test
    public void test01894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01894");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection2 = jSDocInfo0.getTypeNodes();
        java.lang.String str3 = jSDocInfo0.getDescription();
        boolean boolean4 = jSDocInfo0.hasModifies();
        boolean boolean5 = jSDocInfo0.isConstant();
        java.lang.String str6 = jSDocInfo0.getLicense();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(nodeCollection2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test01895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01895");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isQualifiedName();
        boolean boolean5 = node3.isIn();
        node3.detachChildren();
        boolean boolean7 = node3.isNE();
        node3.detachChildren();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test01896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01896");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isQualifiedName();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean10 = node9.isContinue();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean15 = node14.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType16 = null;
        node14.setJSType(jSType16);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean22 = node21.isContinue();
        com.google.javascript.rhino.Node node23 = node14.clonePropsFrom(node21);
        node9.addChildrenToBack(node14);
        boolean boolean25 = node9.isLocalResultCall();
        com.google.javascript.rhino.Node node26 = node4.copyInformationFromForTree(node9);
        boolean boolean27 = node9.isParamList();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(38, node9, 51, 38);
        int int31 = node30.getSideEffectFlags();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(12, 1, 40);
        com.google.javascript.rhino.Node node36 = node30.copyInformationFrom(node35);
        node36.putBooleanProp((int) (byte) 1, true);
        boolean boolean40 = node36.isVoid();
        boolean boolean41 = node36.isCall();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test01897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01897");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isQualifiedName();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isContinue();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        node32.setJSType(jSType34);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isContinue();
        com.google.javascript.rhino.Node node41 = node32.clonePropsFrom(node39);
        node27.addChildrenToBack(node32);
        boolean boolean43 = node27.isLocalResultCall();
        com.google.javascript.rhino.Node node44 = node22.copyInformationFromForTree(node27);
        boolean boolean45 = serializableList17.contains((java.lang.Object) node27);
        java.io.Serializable[] serializableArray62 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList63 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray62);
        boolean boolean64 = serializableList17.containsAll((java.util.Collection<java.io.Serializable>) serializableList63);
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList65 = serializableList63.reverse();
        com.google.javascript.rhino.JSDocInfo jSDocInfo66 = new com.google.javascript.rhino.JSDocInfo();
        int int67 = jSDocInfo66.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility68 = null;
        jSDocInfo66.setVisibility(visibility68);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression70 = jSDocInfo66.getEnumParameterType();
        java.lang.String str71 = jSDocInfo66.getReturnDescription();
        boolean boolean72 = jSDocInfo66.hasEnumParameterType();
        boolean boolean73 = serializableList65.contains((java.lang.Object) jSDocInfo66);
        java.lang.Object obj74 = null;
        boolean boolean75 = serializableList65.equals(obj74);
        com.google.common.collect.ImmutableList<java.util.RandomAccess> randomAccessList76 = com.google.common.collect.ImmutableList.of((java.util.RandomAccess) serializableList65);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.io.Serializable> serializableList79 = serializableList65.subList(45, 41);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: start index (45) must not be greater than size (16)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(serializableArray62);
        org.junit.Assert.assertNotNull(serializableList63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(serializableList65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNull(jSTypeExpression70);
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(randomAccessList76);
    }

    @Test
    public void test01898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01898");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        node12.setSourceFileForTesting("hi!");
        boolean boolean15 = node12.isIf();
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile16 = node12.getStaticSourceFile();
        java.lang.String str17 = staticSourceFile16.getName();
        int int19 = staticSourceFile16.getLineOfOffset(4);
        java.lang.String str20 = staticSourceFile16.getName();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(staticSourceFile16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hi!" + "'", str20, "hi!");
    }

    @Test
    public void test01899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01899");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getStartLine();
        int int2 = stringPosition0.getPositionOnEndLine();
        stringPosition0.setPositionInformation(1, 12, (int) (short) 1, 100);
        int int8 = stringPosition0.getPositionOnStartLine();
        stringPosition0.setItem("STRING Unknown class name");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 12 + "'", int8 == 12);
    }

    @Test
    public void test01900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01900");
        com.google.javascript.rhino.JSDocInfo.Marker marker0 = new com.google.javascript.rhino.JSDocInfo.Marker();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition1 = marker0.getNameNode();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = marker0.getType();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition3 = marker0.getDescription();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition4 = marker0.getNameNode();
        com.google.javascript.rhino.SourcePosition<com.google.javascript.rhino.Node> nodeSourcePosition5 = marker0.getNameNode();
        org.junit.Assert.assertNull(nodeSourcePosition1);
        org.junit.Assert.assertNull(typePosition2);
        org.junit.Assert.assertNull(stringPosition3);
        org.junit.Assert.assertNull(nodeSourcePosition4);
        org.junit.Assert.assertNull(nodeSourcePosition5);
    }

    @Test
    public void test01901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01901");
        com.google.javascript.rhino.jstype.BooleanLiteralSet booleanLiteralSet0 = com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH;
        boolean boolean2 = booleanLiteralSet0.contains(true);
        boolean boolean4 = booleanLiteralSet0.contains(false);
        org.junit.Assert.assertTrue("'" + booleanLiteralSet0 + "' != '" + com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH + "'", booleanLiteralSet0.equals(com.google.javascript.rhino.jstype.BooleanLiteralSet.BOTH));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test01902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01902");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isQualifiedName();
        boolean boolean5 = node3.isHook();
        int int6 = node3.getLength();
        boolean boolean7 = node3.isAdd();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType13 = null;
        node11.setJSType(jSType13);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isContinue();
        com.google.javascript.rhino.Node node20 = node11.clonePropsFrom(node18);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable21 = node20.children();
        boolean boolean22 = node20.isSetterDef();
        boolean boolean23 = node20.isFromExterns();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isQualifiedName();
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean38 = node37.isContinue();
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean43 = node42.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType44 = null;
        node42.setJSType(jSType44);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean50 = node49.isContinue();
        com.google.javascript.rhino.Node node51 = node42.clonePropsFrom(node49);
        node37.addChildrenToBack(node42);
        boolean boolean53 = node37.isLocalResultCall();
        com.google.javascript.rhino.Node node54 = node32.copyInformationFromForTree(node37);
        node37.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node57 = node28.clonePropsFrom(node37);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean62 = node61.isInstanceOf();
        boolean boolean63 = node61.isComma();
        boolean boolean64 = node28.isEquivalentTo(node61);
        boolean boolean65 = node61.isComma();
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(0, 10, 0);
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node(51, node61, node69, (int) (short) 10, (int) ' ');
        com.google.javascript.rhino.Node node73 = node20.copyInformationFrom(node61);
        node3.addChildToBack(node73);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str78 = node73.toString(false, false, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(nodeIterable21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node73);
    }

    @Test
    public void test01903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01903");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean6 = jSDocInfo5.hasEnumParameterType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo5.getBaseType();
        node3.setJSDocInfo(jSDocInfo5);
        node3.setLength(49);
        boolean boolean11 = node3.isOnlyModifiesThisCall();
        // The following exception was thrown during execution in test generation
        try {
            node3.setSideEffectFlags(63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test01904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01904");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getEnumParameterType();
        java.lang.String str5 = jSDocInfo0.getReturnDescription();
        boolean boolean6 = jSDocInfo0.isConsistentIdGenerator();
        com.google.javascript.rhino.Node node7 = jSDocInfo0.getAssociatedNode();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getType();
        java.lang.String str10 = jSDocInfo0.getDescriptionForParameter("Unknown class name");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(node7);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test01905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01905");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isQualifiedName();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isContinue();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType15 = null;
        node13.setJSType(jSType15);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean21 = node20.isContinue();
        com.google.javascript.rhino.Node node22 = node13.clonePropsFrom(node20);
        node8.addChildrenToBack(node13);
        boolean boolean24 = node8.isLocalResultCall();
        com.google.javascript.rhino.Node node25 = node3.copyInformationFromForTree(node8);
        node8.setSourceEncodedPosition((int) (short) -1);
        boolean boolean28 = node8.isName();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isLabelName();
        boolean boolean34 = node32.isDec();
        boolean boolean35 = node32.isNoSideEffectsCall();
        boolean boolean36 = node32.isIf();
        com.google.javascript.rhino.Node node37 = node32.getLastSibling();
        com.google.javascript.rhino.Node node38 = node8.srcref(node32);
        boolean boolean39 = node8.isParamList();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression41 = new com.google.javascript.rhino.JSTypeExpression(node8, "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        com.google.javascript.rhino.Node node42 = jSTypeExpression41.getRoot();
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope43 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry44 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.JSType jSType45 = jSTypeExpression41.evaluate(jSTypeStaticScope43, jSTypeRegistry44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node42);
    }

    @Test
    public void test01906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01906");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isQualifiedName();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isContinue();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        node32.setJSType(jSType34);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isContinue();
        com.google.javascript.rhino.Node node41 = node32.clonePropsFrom(node39);
        node27.addChildrenToBack(node32);
        boolean boolean43 = node27.isLocalResultCall();
        com.google.javascript.rhino.Node node44 = node22.copyInformationFromForTree(node27);
        boolean boolean45 = serializableList17.contains((java.lang.Object) node27);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean50 = node49.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType51 = null;
        node49.setJSType(jSType51);
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean57 = node56.isContinue();
        com.google.javascript.rhino.Node node58 = node49.clonePropsFrom(node56);
        node58.setSourceFileForTesting("hi!");
        boolean boolean61 = node58.isIf();
        boolean boolean62 = node27.isEquivalentToTyped(node58);
        boolean boolean63 = node27.isContinue();
        com.google.javascript.rhino.JSDocInfo jSDocInfo64 = new com.google.javascript.rhino.JSDocInfo();
        int int65 = jSDocInfo64.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility66 = null;
        jSDocInfo64.setVisibility(visibility66);
        boolean boolean68 = jSDocInfo64.isJavaDispatch();
        java.lang.String str70 = jSDocInfo64.getDescriptionForParameter("hi!");
        boolean boolean71 = jSDocInfo64.hasEnumParameterType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList72 = jSDocInfo64.getImplementedInterfaces();
        boolean boolean74 = jSDocInfo64.hasParameter("STRING true\n");
        node27.setJSDocInfo(jSDocInfo64);
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test01907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01907");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        boolean boolean14 = node4.isVar();
        boolean boolean15 = node4.isCase();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newString("Named type with empty name component");
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(10, node4, node17);
        int int20 = node4.getIntProp(38);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test01908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01908");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoAlias();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getModifies();
        java.io.Serializable[] serializableArray19 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList20 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray19);
        boolean boolean21 = serializableList20.isEmpty();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isQualifiedName();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean31 = node30.isContinue();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType37 = null;
        node35.setJSType(jSType37);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean43 = node42.isContinue();
        com.google.javascript.rhino.Node node44 = node35.clonePropsFrom(node42);
        node30.addChildrenToBack(node35);
        boolean boolean46 = node30.isLocalResultCall();
        com.google.javascript.rhino.Node node47 = node25.copyInformationFromForTree(node30);
        boolean boolean48 = serializableList20.contains((java.lang.Object) node30);
        java.io.Serializable[] serializableArray65 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList66 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray65);
        boolean boolean67 = serializableList20.containsAll((java.util.Collection<java.io.Serializable>) serializableList66);
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList68 = serializableList66.reverse();
        boolean boolean69 = strSet2.retainAll((java.util.Collection<java.io.Serializable>) serializableList68);
        boolean boolean70 = strSet2.isEmpty();
        java.io.Serializable[] serializableArray87 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList88 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray87);
        boolean boolean89 = serializableList88.isEmpty();
        boolean boolean91 = serializableList88.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream92 = serializableList88.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream93 = serializableList88.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream94 = serializableList88.parallelStream();
        java.util.Spliterator<java.io.Serializable> serializableSpliterator95 = serializableList88.spliterator();
        java.lang.Object[] objArray96 = serializableList88.toArray();
        boolean boolean97 = strSet2.removeAll((java.util.Collection<java.io.Serializable>) serializableList88);
        // The following exception was thrown during execution in test generation
        try {
            serializableList88.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(serializableArray19);
        org.junit.Assert.assertNotNull(serializableList20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(serializableArray65);
        org.junit.Assert.assertNotNull(serializableList66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(serializableList68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(serializableArray87);
        org.junit.Assert.assertNotNull(serializableList88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(serializableStream92);
        org.junit.Assert.assertNotNull(serializableStream93);
        org.junit.Assert.assertNotNull(serializableStream94);
        org.junit.Assert.assertNotNull(serializableSpliterator95);
        org.junit.Assert.assertNotNull(objArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray96), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray96), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test01909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01909");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.hasFileOverview();
        jSDocInfo0.addSuppression("");
        boolean boolean7 = jSDocInfo0.isNoAlias();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType13 = null;
        node11.setJSType(jSType13);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isContinue();
        com.google.javascript.rhino.Node node20 = node11.clonePropsFrom(node18);
        int int21 = node20.getLineno();
        jSDocInfo0.setAssociatedNode(node20);
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList23 = jSDocInfo0.getExtendedInterfaces();
        boolean boolean24 = jSDocInfo0.isImplicitCast();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(jSTypeExpressionList23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test01910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01910");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.hasFileOverview();
        boolean boolean5 = jSDocInfo0.isJavaDispatch();
        boolean boolean6 = jSDocInfo0.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo0.getExtendedInterfaces();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression8 = jSDocInfo0.getThisType();
        boolean boolean9 = jSDocInfo0.isJavaDispatch();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression10 = jSDocInfo0.getReturnType();
        java.lang.String str11 = jSDocInfo0.getFileOverview();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertNull(jSTypeExpression8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(jSTypeExpression10);
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test01911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01911");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int1 = typePosition0.getStartLine();
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isQualifiedName();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isContinue();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean22 = node21.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType23 = null;
        node21.setJSType(jSType23);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isContinue();
        com.google.javascript.rhino.Node node30 = node21.clonePropsFrom(node28);
        node16.addChildrenToBack(node21);
        boolean boolean32 = node16.isLocalResultCall();
        com.google.javascript.rhino.Node node33 = node11.copyInformationFromForTree(node16);
        node16.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node36 = node7.clonePropsFrom(node16);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean41 = node40.isLabelName();
        boolean boolean42 = node40.isTrue();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isContinue();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType53 = null;
        node51.setJSType(jSType53);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean59 = node58.isContinue();
        com.google.javascript.rhino.Node node60 = node51.clonePropsFrom(node58);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (byte) 0, node16, node40, node46, node60, 10, (int) (byte) -1);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node((int) (short) -1, node63);
        typePosition0.setItem(node63);
        com.google.javascript.rhino.Node node66 = typePosition0.getItem();
        com.google.javascript.rhino.Node node67 = typePosition0.getItem();
        boolean boolean68 = typePosition0.hasBrackets();
        int int69 = typePosition0.getEndLine();
        com.google.javascript.rhino.Node node70 = typePosition0.getItem();
        com.google.javascript.rhino.Node node71 = typePosition0.getItem();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node71);
    }

    @Test
    public void test01912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01912");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        boolean boolean22 = serializableList17.contains((java.lang.Object) (byte) 0);
        boolean boolean23 = serializableList17.isEmpty();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType29 = null;
        node27.setJSType(jSType29);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean35 = node34.isContinue();
        com.google.javascript.rhino.Node node36 = node27.clonePropsFrom(node34);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean41 = node40.isContinue();
        boolean boolean42 = node40.isString();
        com.google.javascript.rhino.Node node43 = node27.useSourceInfoFromForTree(node40);
        com.google.javascript.rhino.InputId inputId44 = null;
        node43.setInputId(inputId44);
        java.lang.Object obj47 = node43.getProp((int) (short) 10);
        com.google.javascript.rhino.jstype.JSType jSType48 = node43.getJSType();
        boolean boolean49 = serializableList17.equals((java.lang.Object) jSType48);
        // The following exception was thrown during execution in test generation
        try {
            java.util.ListIterator<java.io.Serializable> serializableItor51 = serializableList17.listIterator(47);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: index (47) must not be greater than size (16)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertNull(obj47);
        org.junit.Assert.assertNull(jSType48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test01913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01913");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = null;
        node12.setStaticSourceFile(staticSourceFile13);
        java.lang.Object obj16 = node12.getProp((-2147483648));
        boolean boolean17 = node12.isReturn();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test01914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01914");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        int int18 = serializableList17.size();
        java.io.Serializable[] serializableArray35 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList36 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray35);
        boolean boolean37 = serializableList36.isEmpty();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isQualifiedName();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isContinue();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType53 = null;
        node51.setJSType(jSType53);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean59 = node58.isContinue();
        com.google.javascript.rhino.Node node60 = node51.clonePropsFrom(node58);
        node46.addChildrenToBack(node51);
        boolean boolean62 = node46.isLocalResultCall();
        com.google.javascript.rhino.Node node63 = node41.copyInformationFromForTree(node46);
        boolean boolean64 = serializableList36.contains((java.lang.Object) node46);
        boolean boolean65 = serializableList17.containsAll((java.util.Collection<java.io.Serializable>) serializableList36);
        java.util.stream.Stream<java.io.Serializable> serializableStream66 = serializableList17.stream();
        java.lang.Object[] objArray67 = serializableList17.toArray();
        java.util.stream.Stream<java.io.Serializable> serializableStream68 = serializableList17.stream();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList69 = serializableList17.asList();
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.UnmodifiableListIterator<java.io.Serializable> serializableItor71 = serializableList17.listIterator(39);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: index (39) must not be greater than size (16)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 16 + "'", int18 == 16);
        org.junit.Assert.assertNotNull(serializableArray35);
        org.junit.Assert.assertNotNull(serializableList36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(serializableStream66);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertNotNull(serializableStream68);
        org.junit.Assert.assertNotNull(serializableList69);
    }

    @Test
    public void test01915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01915");
        java.lang.String[] strArray3 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        java.lang.Object[] objArray6 = strSet4.toArray();
        java.io.Serializable[] serializableArray23 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList24 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray23);
        boolean boolean25 = serializableList24.isEmpty();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean30 = node29.isQualifiedName();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean35 = node34.isContinue();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType41 = null;
        node39.setJSType(jSType41);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isContinue();
        com.google.javascript.rhino.Node node48 = node39.clonePropsFrom(node46);
        node34.addChildrenToBack(node39);
        boolean boolean50 = node34.isLocalResultCall();
        com.google.javascript.rhino.Node node51 = node29.copyInformationFromForTree(node34);
        boolean boolean52 = serializableList24.contains((java.lang.Object) node34);
        java.util.Iterator<java.io.Serializable> serializableItor53 = serializableList24.iterator();
        boolean boolean54 = strSet4.containsAll((java.util.Collection<java.io.Serializable>) serializableList24);
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList55 = serializableList24.reverse();
        java.util.function.UnaryOperator<java.io.Serializable> serializableUnaryOperator56 = null;
        // The following exception was thrown during execution in test generation
        try {
            serializableList24.replaceAll(serializableUnaryOperator56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(serializableArray23);
        org.junit.Assert.assertNotNull(serializableList24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(serializableItor53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(serializableList55);
    }

    @Test
    public void test01916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01916");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isContinue();
        boolean boolean5 = node3.isString();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean10 = node9.isLabelName();
        boolean boolean11 = node9.isDec();
        boolean boolean12 = node9.isAssign();
        boolean boolean13 = node3.isEquivalentTo(node9);
        boolean boolean14 = node9.isThis();
        boolean boolean15 = node9.isInc();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test01917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01917");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isQualifiedName();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isContinue();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType15 = null;
        node13.setJSType(jSType15);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean21 = node20.isContinue();
        com.google.javascript.rhino.Node node22 = node13.clonePropsFrom(node20);
        node8.addChildrenToBack(node13);
        boolean boolean24 = node8.isLocalResultCall();
        com.google.javascript.rhino.Node node25 = node3.copyInformationFromForTree(node8);
        node8.setSourceEncodedPosition((int) (short) -1);
        boolean boolean28 = node8.isName();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isLabelName();
        boolean boolean34 = node32.isDec();
        boolean boolean35 = node32.isNoSideEffectsCall();
        boolean boolean36 = node32.isIf();
        com.google.javascript.rhino.Node node37 = node32.getLastSibling();
        com.google.javascript.rhino.Node node38 = node8.srcref(node32);
        node8.setSourceEncodedPositionForTree(10);
        int int42 = node8.getIntProp((int) (byte) 0);
        boolean boolean43 = node8.isFalse();
        node8.setLineno(2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test01918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01918");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable14 = node13.children();
        boolean boolean15 = node13.isNull();
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean20 = node19.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType21 = null;
        node19.setJSType(jSType21);
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean27 = node26.isContinue();
        com.google.javascript.rhino.Node node28 = node19.clonePropsFrom(node26);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isContinue();
        boolean boolean34 = node32.isString();
        com.google.javascript.rhino.Node node35 = node19.useSourceInfoFromForTree(node32);
        com.google.javascript.rhino.InputId inputId36 = null;
        node35.setInputId(inputId36);
        java.lang.Object obj39 = node35.getProp((int) (short) 10);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(54, node13, node35);
        node13.putBooleanProp(38, true);
        boolean boolean44 = node13.isNoSideEffectsCall();
        node13.putBooleanProp(37, false);
        // The following exception was thrown during execution in test generation
        try {
            int int49 = node13.getExistingIntProp(45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 45");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(nodeIterable14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNull(obj39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test01919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01919");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isQualifiedName();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isContinue();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType15 = null;
        node13.setJSType(jSType15);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean21 = node20.isContinue();
        com.google.javascript.rhino.Node node22 = node13.clonePropsFrom(node20);
        node8.addChildrenToBack(node13);
        boolean boolean24 = node8.isLocalResultCall();
        com.google.javascript.rhino.Node node25 = node3.copyInformationFromForTree(node8);
        boolean boolean26 = node3.isStringKey();
        java.lang.String[] strArray34 = new java.lang.String[] { "java.io.IOException: java.io.IOException", "true", "Named type with empty name component", "hi!", "Named type with empty name component", "hi!", "Not declared as a constructor" };
        java.util.LinkedHashSet<java.lang.String> strSet35 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet35, strArray34);
        node3.setDirectives((java.util.Set<java.lang.String>) strSet35);
        boolean boolean39 = strSet35.add("[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        java.io.Serializable[] serializableArray56 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList57 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray56);
        boolean boolean58 = serializableList57.isEmpty();
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean63 = node62.isQualifiedName();
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean68 = node67.isContinue();
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean73 = node72.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType74 = null;
        node72.setJSType(jSType74);
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean80 = node79.isContinue();
        com.google.javascript.rhino.Node node81 = node72.clonePropsFrom(node79);
        node67.addChildrenToBack(node72);
        boolean boolean83 = node67.isLocalResultCall();
        com.google.javascript.rhino.Node node84 = node62.copyInformationFromForTree(node67);
        boolean boolean85 = serializableList57.contains((java.lang.Object) node67);
        int int86 = node67.getSourcePosition();
        com.google.javascript.rhino.Node node90 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean91 = node90.isLabelName();
        boolean boolean92 = node90.isDec();
        boolean boolean93 = node90.isNoSideEffectsCall();
        node67.addChildToBack(node90);
        com.google.javascript.rhino.jstype.JSType jSType95 = null;
        node90.setJSType(jSType95);
        boolean boolean97 = node90.isNE();
        boolean boolean98 = strSet35.contains((java.lang.Object) node90);
        boolean boolean99 = node90.isGetProp();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(serializableArray56);
        org.junit.Assert.assertNotNull(serializableList57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test01920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01920");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isLabelName();
        boolean boolean18 = node16.isTrue();
        boolean boolean19 = node16.isNoSideEffectsCall();
        boolean boolean20 = node16.isCase();
        boolean boolean21 = node16.isIn();
        boolean boolean22 = node3.isEquivalentTo(node16);
        com.google.javascript.rhino.Node node23 = node3.removeChildren();
        com.google.javascript.rhino.Node node24 = node3.getLastSibling();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isLabelName();
        boolean boolean30 = node28.isTrue();
        boolean boolean31 = node28.isNoSideEffectsCall();
        boolean boolean32 = node28.isCase();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean41 = node40.isQualifiedName();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean46 = node45.isContinue();
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType52 = null;
        node50.setJSType(jSType52);
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean58 = node57.isContinue();
        com.google.javascript.rhino.Node node59 = node50.clonePropsFrom(node57);
        node45.addChildrenToBack(node50);
        boolean boolean61 = node45.isLocalResultCall();
        com.google.javascript.rhino.Node node62 = node40.copyInformationFromForTree(node45);
        node45.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node65 = node36.clonePropsFrom(node45);
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean70 = node69.isInstanceOf();
        boolean boolean71 = node69.isComma();
        boolean boolean72 = node36.isEquivalentTo(node69);
        boolean boolean73 = node69.isComma();
        com.google.javascript.rhino.Node node74 = node28.clonePropsFrom(node69);
        boolean boolean75 = node28.isNumber();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node76 = node24.getChildBefore(node28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test01921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01921");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoAlias();
        boolean boolean2 = jSDocInfo0.isDefine();
        java.lang.String str3 = jSDocInfo0.getLendsName();
        boolean boolean4 = jSDocInfo0.isDeprecated();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test01922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01922");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isContinue();
        boolean boolean19 = node17.isString();
        com.google.javascript.rhino.Node node20 = node4.useSourceInfoFromForTree(node17);
        com.google.javascript.rhino.InputId inputId21 = null;
        node20.setInputId(inputId21);
        java.lang.Object obj24 = node20.getProp((int) (short) 10);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        node28.setJSType(jSType30);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isContinue();
        com.google.javascript.rhino.Node node37 = node28.clonePropsFrom(node35);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isContinue();
        boolean boolean43 = node41.isString();
        com.google.javascript.rhino.Node node44 = node28.useSourceInfoFromForTree(node41);
        com.google.javascript.rhino.InputId inputId45 = null;
        node44.setInputId(inputId45);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isQualifiedName();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean61 = node60.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType62 = null;
        node60.setJSType(jSType62);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean68 = node67.isContinue();
        com.google.javascript.rhino.Node node69 = node60.clonePropsFrom(node67);
        node55.addChildrenToBack(node60);
        boolean boolean71 = node55.isLocalResultCall();
        com.google.javascript.rhino.Node node72 = node50.copyInformationFromForTree(node55);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(0, node20, node44, node55, (int) (short) 10, 53);
        boolean boolean76 = node44.isCatch();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable77 = node44.getAncestors();
        com.google.javascript.rhino.jstype.JSType jSType78 = node44.getJSType();
        boolean boolean79 = node44.isThis();
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable80 = node44.getAncestors();
        // The following exception was thrown during execution in test generation
        try {
            int int82 = node44.getExistingIntProp((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: missing prop: 32");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(ancestorIterable77);
        org.junit.Assert.assertNull(jSType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(ancestorIterable80);
    }

    @Test
    public void test01923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01923");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        boolean boolean22 = serializableList17.contains((java.lang.Object) (byte) 0);
        java.lang.Object[] objArray23 = serializableList17.toArray();
        java.io.Serializable[] serializableArray40 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList41 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray40);
        boolean boolean42 = serializableList41.isEmpty();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isQualifiedName();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isContinue();
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean57 = node56.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType58 = null;
        node56.setJSType(jSType58);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean64 = node63.isContinue();
        com.google.javascript.rhino.Node node65 = node56.clonePropsFrom(node63);
        node51.addChildrenToBack(node56);
        boolean boolean67 = node51.isLocalResultCall();
        com.google.javascript.rhino.Node node68 = node46.copyInformationFromForTree(node51);
        boolean boolean69 = serializableList41.contains((java.lang.Object) node51);
        java.util.Iterator<java.io.Serializable> serializableItor70 = serializableList41.iterator();
        boolean boolean71 = serializableList17.containsAll((java.util.Collection<java.io.Serializable>) serializableList41);
        boolean boolean72 = serializableList17.isEmpty();
        com.google.common.collect.UnmodifiableListIterator<java.io.Serializable> serializableItor73 = serializableList17.listIterator();
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition74 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        int int75 = typePosition74.getPositionOnEndLine();
        typePosition74.setPositionInformation(2, 29, (int) (byte) 100, 15);
        int int81 = typePosition74.getPositionOnStartLine();
        boolean boolean82 = serializableList17.equals((java.lang.Object) typePosition74);
        typePosition74.setPositionInformation((-1), 9, 4, (int) (byte) 10);
        boolean boolean88 = typePosition74.hasBrackets();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertNotNull(serializableArray40);
        org.junit.Assert.assertNotNull(serializableList41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(serializableItor70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(serializableItor73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 29 + "'", int81 == 29);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test01924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01924");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoAlias();
        boolean boolean3 = jSDocInfo0.hasDescriptionForParameter("java.io.IOException: java.io.IOException");
        boolean boolean4 = jSDocInfo0.hasModifies();
        boolean boolean5 = jSDocInfo0.isIdGenerator();
        boolean boolean6 = jSDocInfo0.containsDeclaration();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test01925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01925");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean8 = node7.isQualifiedName();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isContinue();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType19 = null;
        node17.setJSType(jSType19);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean25 = node24.isContinue();
        com.google.javascript.rhino.Node node26 = node17.clonePropsFrom(node24);
        node12.addChildrenToBack(node17);
        boolean boolean28 = node12.isLocalResultCall();
        com.google.javascript.rhino.Node node29 = node7.copyInformationFromForTree(node12);
        node12.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node32 = node3.clonePropsFrom(node12);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean37 = node36.isInstanceOf();
        boolean boolean38 = node36.isComma();
        boolean boolean39 = node3.isEquivalentTo(node36);
        boolean boolean40 = node36.isOr();
        boolean boolean41 = node36.isNoSideEffectsCall();
        boolean boolean42 = node36.isAssign();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str46 = node36.toString(true, false, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test01926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01926");
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean6 = node5.isLabelName();
        boolean boolean7 = node5.isDec();
        boolean boolean8 = node5.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType14 = null;
        node12.setJSType(jSType14);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean20 = node19.isContinue();
        com.google.javascript.rhino.Node node21 = node12.clonePropsFrom(node19);
        boolean boolean22 = node21.isQuotedString();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean27 = node26.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType28 = null;
        node26.setJSType(jSType28);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean34 = node33.isContinue();
        com.google.javascript.rhino.Node node35 = node26.clonePropsFrom(node33);
        int int36 = node35.getLineno();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean41 = node40.isLabelName();
        boolean boolean42 = node40.isDec();
        boolean boolean43 = node40.isAssign();
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isQualifiedName();
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean57 = node56.isContinue();
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean62 = node61.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType63 = null;
        node61.setJSType(jSType63);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean69 = node68.isContinue();
        com.google.javascript.rhino.Node node70 = node61.clonePropsFrom(node68);
        node56.addChildrenToBack(node61);
        boolean boolean72 = node56.isLocalResultCall();
        com.google.javascript.rhino.Node node73 = node51.copyInformationFromForTree(node56);
        node56.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node76 = node47.clonePropsFrom(node56);
        com.google.javascript.rhino.Node[] nodeArray77 = new com.google.javascript.rhino.Node[] { node5, node21, node35, node40, node47 };
        com.google.javascript.rhino.Node node80 = new com.google.javascript.rhino.Node(0, nodeArray77, (-1), 54);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node(0, nodeArray77, 16, 27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: duplicate child");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertNotNull(nodeArray77);
    }

    @Test
    public void test01927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01927");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isQualifiedName();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean10 = node9.isContinue();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean15 = node14.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType16 = null;
        node14.setJSType(jSType16);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean22 = node21.isContinue();
        com.google.javascript.rhino.Node node23 = node14.clonePropsFrom(node21);
        node9.addChildrenToBack(node14);
        boolean boolean25 = node9.isLocalResultCall();
        com.google.javascript.rhino.Node node26 = node4.copyInformationFromForTree(node9);
        node9.setSourceEncodedPosition((int) (short) -1);
        boolean boolean29 = node9.isName();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean34 = node33.isLabelName();
        boolean boolean35 = node9.hasChild(node33);
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(46, node33);
        java.lang.Appendable appendable37 = null;
        // The following exception was thrown during execution in test generation
        try {
            node36.appendStringTree(appendable37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test01928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01928");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        int int18 = serializableList17.size();
        com.google.common.collect.UnmodifiableIterator<java.io.Serializable> serializableItor19 = serializableList17.iterator();
        // The following exception was thrown during execution in test generation
        try {
            serializableList17.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 16 + "'", int18 == 16);
        org.junit.Assert.assertNotNull(serializableItor19);
    }

    @Test
    public void test01929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01929");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        java.lang.String str4 = jSDocInfo0.getMeaning();
        boolean boolean6 = jSDocInfo0.hasParameter("Unknown class name");
        int int7 = jSDocInfo0.getParameterCount();
        boolean boolean8 = jSDocInfo0.isOverride();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isLabelName();
        boolean boolean14 = node12.isTrue();
        boolean boolean15 = node12.isNoSideEffectsCall();
        boolean boolean16 = node12.isCase();
        boolean boolean17 = node12.isVar();
        int int18 = node12.getSourcePosition();
        boolean boolean19 = node12.isAnd();
        node12.setType(0);
        jSDocInfo0.setAssociatedNode(node12);
        jSDocInfo0.addSuppression("");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test01930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01930");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isContinue();
        boolean boolean18 = node16.isString();
        com.google.javascript.rhino.Node node19 = node3.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.InputId inputId20 = null;
        node19.setInputId(inputId20);
        java.lang.Object obj23 = node19.getProp((int) (short) 10);
        com.google.javascript.rhino.jstype.JSType jSType24 = node19.getJSType();
        boolean boolean26 = node19.getBooleanProp((int) (short) 0);
        boolean boolean27 = node19.isVar();
        boolean boolean28 = node19.hasChildren();
        int int29 = node19.getType();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test01931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01931");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasEnumParameterType();
        boolean boolean2 = jSDocInfo0.isIdGenerator();
        boolean boolean4 = jSDocInfo0.hasParameter("true");
        boolean boolean5 = jSDocInfo0.hasEnumParameterType();
        boolean boolean6 = jSDocInfo0.hasEnumParameterType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test01932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01932");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        java.io.Serializable[] serializableArray35 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList36 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray35);
        boolean boolean37 = serializableList36.isEmpty();
        boolean boolean39 = serializableList36.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream40 = serializableList36.stream();
        java.util.ListIterator<java.io.Serializable> serializableItor41 = serializableList36.listIterator();
        com.google.common.collect.UnmodifiableListIterator<java.io.Serializable> serializableItor42 = serializableList36.listIterator();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList43 = serializableList36.reverse();
        java.util.ListIterator<java.io.Serializable> serializableItor44 = serializableList36.listIterator();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean45 = serializableList17.retainAll((java.util.Collection<java.io.Serializable>) serializableList36);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(serializableArray35);
        org.junit.Assert.assertNotNull(serializableList36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(serializableStream40);
        org.junit.Assert.assertNotNull(serializableItor41);
        org.junit.Assert.assertNotNull(serializableItor42);
        org.junit.Assert.assertNotNull(serializableList43);
        org.junit.Assert.assertNotNull(serializableItor44);
    }

    @Test
    public void test01933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01933");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        com.google.common.collect.UnmodifiableListIterator<java.io.Serializable> serializableItor21 = serializableList17.listIterator();
        java.util.Iterator<java.io.Serializable> serializableItor22 = serializableList17.iterator();
        com.google.common.collect.UnmodifiableListIterator<java.io.Serializable> serializableItor23 = serializableList17.listIterator();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition24 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int25 = stringPosition24.getPositionOnStartLine();
        int int26 = stringPosition24.getPositionOnEndLine();
        int int27 = stringPosition24.getPositionOnStartLine();
        boolean boolean28 = serializableList17.equals((java.lang.Object) stringPosition24);
        java.io.IOException iOException29 = new java.io.IOException();
        java.io.IOException iOException30 = new java.io.IOException((java.lang.Throwable) iOException29);
        java.io.IOException iOException31 = new java.io.IOException((java.lang.Throwable) iOException30);
        java.lang.Throwable[] throwableArray32 = iOException30.getSuppressed();
        java.lang.Throwable[] throwableArray33 = iOException30.getSuppressed();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Throwable[] throwableArray34 = serializableList17.toArray(throwableArray33);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableItor21);
        org.junit.Assert.assertNotNull(serializableItor22);
        org.junit.Assert.assertNotNull(serializableItor23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(throwableArray32);
        org.junit.Assert.assertNotNull(throwableArray33);
    }

    @Test
    public void test01934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01934");
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.JSDocInfo> jSDocInfoList0 = com.google.common.collect.ImmutableList.of();
        org.junit.Assert.assertNotNull(jSDocInfoList0);
    }

    @Test
    public void test01935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01935");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasEnumParameterType();
        boolean boolean2 = jSDocInfo0.isNoSideEffects();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList3 = jSDocInfo0.getThrownTypes();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList4 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str5 = jSDocInfo0.getReturnDescription();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList6 = jSDocInfo0.getImplementedInterfaces();
        java.lang.String str7 = jSDocInfo0.getDeprecationReason();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList3);
        org.junit.Assert.assertNotNull(jSTypeExpressionList4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(jSTypeExpressionList6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test01936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01936");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString(37, "hi!", (int) (byte) 100, (int) (short) 100);
        node4.setCharno((int) (byte) 1);
        boolean boolean7 = node4.isGetterDef();
        node4.putBooleanProp(4, false);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test01937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01937");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isQualifiedName();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isContinue();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node18.setJSType(jSType20);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isContinue();
        com.google.javascript.rhino.Node node27 = node18.clonePropsFrom(node25);
        node13.addChildrenToBack(node18);
        boolean boolean29 = node13.isLocalResultCall();
        com.google.javascript.rhino.Node node30 = node8.copyInformationFromForTree(node13);
        node13.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node33 = node4.clonePropsFrom(node13);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean38 = node37.isInstanceOf();
        boolean boolean39 = node37.isComma();
        boolean boolean40 = node4.isEquivalentTo(node37);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean45 = node44.isQualifiedName();
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean50 = node49.isContinue();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean55 = node54.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType56 = null;
        node54.setJSType(jSType56);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean62 = node61.isContinue();
        com.google.javascript.rhino.Node node63 = node54.clonePropsFrom(node61);
        node49.addChildrenToBack(node54);
        boolean boolean65 = node49.isLocalResultCall();
        com.google.javascript.rhino.Node node66 = node44.copyInformationFromForTree(node49);
        node49.setSourceEncodedPosition((int) (short) -1);
        boolean boolean69 = node49.isName();
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node(30, node4, node49, 51, 15);
        boolean boolean73 = node72.isNot();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test01938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01938");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString((int) (short) 100, "JSDocInfo");
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean8 = node7.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType9 = null;
        node7.setJSType(jSType9);
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean15 = node14.isContinue();
        com.google.javascript.rhino.Node node16 = node7.clonePropsFrom(node14);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean21 = node20.isContinue();
        boolean boolean22 = node20.isString();
        com.google.javascript.rhino.Node node23 = node7.useSourceInfoFromForTree(node20);
        com.google.javascript.rhino.InputId inputId24 = null;
        node23.setInputId(inputId24);
        java.lang.Object obj27 = node23.getProp((int) (short) 10);
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean32 = node31.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType33 = null;
        node31.setJSType(jSType33);
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean39 = node38.isContinue();
        com.google.javascript.rhino.Node node40 = node31.clonePropsFrom(node38);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean45 = node44.isContinue();
        boolean boolean46 = node44.isString();
        com.google.javascript.rhino.Node node47 = node31.useSourceInfoFromForTree(node44);
        com.google.javascript.rhino.InputId inputId48 = null;
        node47.setInputId(inputId48);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean54 = node53.isQualifiedName();
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean59 = node58.isContinue();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean64 = node63.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType65 = null;
        node63.setJSType(jSType65);
        com.google.javascript.rhino.Node node70 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean71 = node70.isContinue();
        com.google.javascript.rhino.Node node72 = node63.clonePropsFrom(node70);
        node58.addChildrenToBack(node63);
        boolean boolean74 = node58.isLocalResultCall();
        com.google.javascript.rhino.Node node75 = node53.copyInformationFromForTree(node58);
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node(0, node23, node47, node58, (int) (short) 10, 53);
        com.google.javascript.rhino.InputId inputId79 = node58.getInputId();
        boolean boolean80 = node58.isReturn();
        boolean boolean81 = node58.isLabelName();
        com.google.javascript.rhino.Node node82 = node2.clonePropsFrom(node58);
        int int83 = node82.getSourceOffset();
        boolean boolean84 = node82.isSwitch();
        boolean boolean85 = node82.isSetterDef();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertNull(obj27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNull(inputId79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test01939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01939");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.isJavaDispatch();
        java.lang.String str6 = jSDocInfo0.getDescriptionForParameter("hi!");
        boolean boolean8 = jSDocInfo0.hasParameterType("");
        java.util.Set<java.lang.String> strSet9 = jSDocInfo0.getModifies();
        java.util.Collection<java.lang.String> strCollection10 = jSDocInfo0.getAuthors();
        java.lang.String str11 = jSDocInfo0.getReturnDescription();
        boolean boolean12 = jSDocInfo0.hasTypedefType();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNull(strCollection10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test01940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01940");
        java.lang.String[] strArray3 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        java.lang.Object[] objArray6 = strSet4.toArray();
        java.io.Serializable[] serializableArray23 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList24 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray23);
        boolean boolean25 = serializableList24.isEmpty();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean30 = node29.isQualifiedName();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean35 = node34.isContinue();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType41 = null;
        node39.setJSType(jSType41);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isContinue();
        com.google.javascript.rhino.Node node48 = node39.clonePropsFrom(node46);
        node34.addChildrenToBack(node39);
        boolean boolean50 = node34.isLocalResultCall();
        com.google.javascript.rhino.Node node51 = node29.copyInformationFromForTree(node34);
        boolean boolean52 = serializableList24.contains((java.lang.Object) node34);
        java.util.Iterator<java.io.Serializable> serializableItor53 = serializableList24.iterator();
        boolean boolean54 = strSet4.containsAll((java.util.Collection<java.io.Serializable>) serializableList24);
        java.lang.Object[] objArray55 = serializableList24.toArray();
        boolean boolean56 = serializableList24.isEmpty();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList57 = serializableList24.reverse();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList58 = serializableList24.reverse();
        boolean boolean59 = serializableList24.isEmpty();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(serializableArray23);
        org.junit.Assert.assertNotNull(serializableList24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(serializableItor53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(serializableList57);
        org.junit.Assert.assertNotNull(serializableList58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test01941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01941");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        com.google.javascript.rhino.JSDocInfo jSDocInfo19 = new com.google.javascript.rhino.JSDocInfo();
        int int20 = jSDocInfo19.getImplementedInterfaceCount();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection21 = jSDocInfo19.getTypeNodes();
        boolean boolean22 = serializableList17.equals((java.lang.Object) jSDocInfo19);
        com.google.javascript.rhino.Node node23 = jSDocInfo19.getAssociatedNode();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(nodeCollection21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(node23);
    }

    @Test
    public void test01942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01942");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isQualifiedName();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isContinue();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node18.setJSType(jSType20);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isContinue();
        com.google.javascript.rhino.Node node27 = node18.clonePropsFrom(node25);
        node13.addChildrenToBack(node18);
        boolean boolean29 = node13.isLocalResultCall();
        com.google.javascript.rhino.Node node30 = node8.copyInformationFromForTree(node13);
        node13.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node33 = node4.clonePropsFrom(node13);
        com.google.javascript.rhino.Node node34 = node33.getLastSibling();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newString("Unknown class name");
        boolean boolean37 = node36.isBreak();
        com.google.javascript.rhino.Node node40 = new com.google.javascript.rhino.Node(0, node33, node36, (-1), 43);
        boolean boolean41 = node40.isParamList();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isQualifiedName();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isContinue();
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean57 = node56.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType58 = null;
        node56.setJSType(jSType58);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean64 = node63.isContinue();
        com.google.javascript.rhino.Node node65 = node56.clonePropsFrom(node63);
        node51.addChildrenToBack(node56);
        boolean boolean67 = node51.isLocalResultCall();
        com.google.javascript.rhino.Node node68 = node46.copyInformationFromForTree(node51);
        boolean boolean69 = node51.isParamList();
        boolean boolean70 = node51.isCatch();
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((-1), node51, (int) '#', 50);
        com.google.javascript.rhino.Node node74 = node40.clonePropsFrom(node51);
        boolean boolean75 = node51.isFalse();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test01943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01943");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = jSDocInfo0.getParameterType("true");
        java.lang.String str6 = jSDocInfo0.getLendsName();
        java.lang.String str7 = jSDocInfo0.getDeprecationReason();
        java.util.Set<java.lang.String> strSet8 = jSDocInfo0.getModifies();
        java.io.Serializable[] serializableArray25 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList26 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray25);
        boolean boolean27 = serializableList26.isEmpty();
        int int28 = serializableList26.size();
        boolean boolean29 = strSet8.contains((java.lang.Object) serializableList26);
        java.io.Serializable[] serializableArray46 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList47 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray46);
        boolean boolean48 = serializableList47.isEmpty();
        boolean boolean50 = serializableList47.contains((java.lang.Object) 52);
        boolean boolean51 = serializableList26.containsAll((java.util.Collection<java.io.Serializable>) serializableList47);
        // The following exception was thrown during execution in test generation
        try {
            java.io.Serializable serializable53 = serializableList47.get(47);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: index (47) must be less than size (16)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(jSTypeExpression5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(serializableArray25);
        org.junit.Assert.assertNotNull(serializableList26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 16 + "'", int28 == 16);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(serializableArray46);
        org.junit.Assert.assertNotNull(serializableList47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test01944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01944");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isContinue();
        boolean boolean18 = node16.isString();
        com.google.javascript.rhino.Node node19 = node3.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.InputId inputId20 = null;
        node19.setInputId(inputId20);
        java.lang.Object obj23 = node19.getProp((int) (short) 10);
        com.google.javascript.rhino.jstype.JSType jSType24 = node19.getJSType();
        boolean boolean25 = node19.isNE();
        boolean boolean26 = node19.isQualifiedName();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test01945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01945");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newNumber((double) 12);
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable2 = node1.children();
        node1.setLength((int) (byte) 100);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(nodeIterable2);
    }

    @Test
    public void test01946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01946");
        com.google.common.collect.ImmutableList.Builder<java.io.Serializable[]> serializableArrayBuilder0 = com.google.common.collect.ImmutableList.builder();
        org.junit.Assert.assertNotNull(serializableArrayBuilder0);
    }

    @Test
    public void test01947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01947");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.hasFileOverview();
        boolean boolean5 = jSDocInfo0.isJavaDispatch();
        boolean boolean6 = jSDocInfo0.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList7 = jSDocInfo0.getExtendedInterfaces();
        java.lang.String str8 = jSDocInfo0.getLicense();
        boolean boolean9 = jSDocInfo0.isNoSideEffects();
        java.util.Set<java.lang.String> strSet10 = jSDocInfo0.getParameterNames();
        int int11 = strSet10.size();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition12 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int13 = stringPosition12.getStartLine();
        int int14 = stringPosition12.getPositionOnEndLine();
        stringPosition12.setPositionInformation(1, 12, (int) (short) 1, 100);
        int int20 = stringPosition12.getEndLine();
        boolean boolean21 = strSet10.contains((java.lang.Object) stringPosition12);
        // The following exception was thrown during execution in test generation
        try {
            strSet10.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test01948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01948");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        java.lang.String str4 = jSDocInfo0.getMeaning();
        java.lang.String str5 = jSDocInfo0.getLicense();
        boolean boolean6 = jSDocInfo0.hasType();
        boolean boolean7 = jSDocInfo0.isConstructor();
        int int8 = jSDocInfo0.getExtendedInterfacesCount();
        boolean boolean9 = jSDocInfo0.shouldPreserveTry();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList10 = jSDocInfo0.getExtendedInterfaces();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList10);
    }

    @Test
    public void test01949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01949");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        boolean boolean5 = node3.isTrue();
        node3.setWasEmptyNode(true);
        boolean boolean8 = node3.isAdd();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType14 = null;
        node12.setJSType(jSType14);
        com.google.javascript.rhino.Node node19 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean20 = node19.isContinue();
        com.google.javascript.rhino.Node node21 = node12.clonePropsFrom(node19);
        boolean boolean22 = node21.isQuotedString();
        int int23 = node21.getCharno();
        com.google.javascript.rhino.Node node24 = node3.useSourceInfoFrom(node21);
        com.google.javascript.rhino.Node node25 = null;
        boolean boolean26 = node21.hasChild(node25);
        node21.setType((-1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test01950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01950");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isQualifiedName();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node(32, (int) (byte) 10, (int) '#');
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isQualifiedName();
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean24 = node23.isContinue();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        node28.setJSType(jSType30);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isContinue();
        com.google.javascript.rhino.Node node37 = node28.clonePropsFrom(node35);
        node23.addChildrenToBack(node28);
        boolean boolean39 = node23.isLocalResultCall();
        com.google.javascript.rhino.Node node40 = node18.copyInformationFromForTree(node23);
        node23.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node43 = node14.clonePropsFrom(node23);
        com.google.javascript.rhino.Node node47 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean48 = node47.isInstanceOf();
        boolean boolean49 = node47.isComma();
        boolean boolean50 = node14.isEquivalentTo(node47);
        boolean boolean51 = node47.isComma();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) '#', node10, node47, 42, (int) ' ');
        boolean boolean55 = node54.isComma();
        com.google.javascript.rhino.Node node56 = node54.cloneTree();
        com.google.javascript.rhino.Node node57 = new com.google.javascript.rhino.Node(16, node4, node54);
        boolean boolean58 = node4.isSetterDef();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test01951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01951");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.setMutatesArguments();
        sideEffectFlags1.clearSideEffectFlags();
        boolean boolean6 = sideEffectFlags1.areAllFlagsSet();
        int int7 = sideEffectFlags1.valueOf();
        sideEffectFlags1.clearAllFlags();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 63 + "'", int7 == 63);
    }

    @Test
    public void test01952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01952");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isContinue();
        boolean boolean5 = node3.isString();
        boolean boolean6 = node3.isIn();
        com.google.javascript.rhino.jstype.JSType jSType7 = node3.getJSType();
        node3.removeProp(3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSType7);
    }

    @Test
    public void test01953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01953");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        java.lang.String str4 = jSDocInfo0.getMeaning();
        java.lang.String str5 = jSDocInfo0.getLicense();
        boolean boolean6 = jSDocInfo0.hasType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getReturnType();
        jSDocInfo0.setLicense("Not declared as a constructor");
        boolean boolean10 = jSDocInfo0.isConstant();
        boolean boolean11 = jSDocInfo0.isJavaDispatch();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test01954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01954");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        node12.setSourceFileForTesting("hi!");
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        com.google.javascript.rhino.Node node20 = node12.copyInformationFrom(node18);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node(32, (int) (byte) 10, (int) '#');
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean34 = node33.isQualifiedName();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean39 = node38.isContinue();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean44 = node43.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType45 = null;
        node43.setJSType(jSType45);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isContinue();
        com.google.javascript.rhino.Node node52 = node43.clonePropsFrom(node50);
        node38.addChildrenToBack(node43);
        boolean boolean54 = node38.isLocalResultCall();
        com.google.javascript.rhino.Node node55 = node33.copyInformationFromForTree(node38);
        node38.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node58 = node29.clonePropsFrom(node38);
        com.google.javascript.rhino.Node node62 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean63 = node62.isInstanceOf();
        boolean boolean64 = node62.isComma();
        boolean boolean65 = node29.isEquivalentTo(node62);
        boolean boolean66 = node62.isComma();
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node((int) '#', node25, node62, 42, (int) ' ');
        boolean boolean70 = node69.isComma();
        com.google.javascript.rhino.Node node71 = node69.cloneTree();
        boolean boolean72 = node71.isWith();
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean77 = node76.isContinue();
        boolean boolean78 = node76.isTry();
        com.google.javascript.rhino.Node node79 = node71.clonePropsFrom(node76);
        boolean boolean80 = node76.isBreak();
        boolean boolean81 = node20.isEquivalentTo(node76);
        boolean boolean82 = node20.hasMoreThanOneChild();
        boolean boolean83 = node20.isAssign();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags85 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        sideEffectFlags85.setMutatesGlobalState();
        boolean boolean87 = sideEffectFlags85.areAllFlagsSet();
        sideEffectFlags85.setMutatesGlobalState();
        sideEffectFlags85.setAllFlags();
        // The following exception was thrown during execution in test generation
        try {
            node20.setSideEffectFlags(sideEffectFlags85);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test01955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01955");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isContinue();
        boolean boolean19 = node17.isString();
        com.google.javascript.rhino.Node node20 = node4.useSourceInfoFromForTree(node17);
        com.google.javascript.rhino.InputId inputId21 = null;
        node20.setInputId(inputId21);
        java.lang.Object obj24 = node20.getProp((int) (short) 10);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        node28.setJSType(jSType30);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isContinue();
        com.google.javascript.rhino.Node node37 = node28.clonePropsFrom(node35);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isContinue();
        boolean boolean43 = node41.isString();
        com.google.javascript.rhino.Node node44 = node28.useSourceInfoFromForTree(node41);
        com.google.javascript.rhino.InputId inputId45 = null;
        node44.setInputId(inputId45);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isQualifiedName();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean61 = node60.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType62 = null;
        node60.setJSType(jSType62);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean68 = node67.isContinue();
        com.google.javascript.rhino.Node node69 = node60.clonePropsFrom(node67);
        node55.addChildrenToBack(node60);
        boolean boolean71 = node55.isLocalResultCall();
        com.google.javascript.rhino.Node node72 = node50.copyInformationFromForTree(node55);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(0, node20, node44, node55, (int) (short) 10, 53);
        com.google.javascript.rhino.InputId inputId76 = node55.getInputId();
        boolean boolean77 = node55.isReturn();
        com.google.javascript.rhino.Node node78 = node55.getFirstChild();
        com.google.javascript.rhino.Node node79 = node55.cloneNode();
        com.google.javascript.rhino.Node node80 = node55.getLastSibling();
        int int81 = node80.getCharno();
        boolean boolean82 = node80.isEmpty();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(inputId76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node78);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test01956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01956");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.isNoAlias();
        java.util.Set<java.lang.String> strSet2 = jSDocInfo0.getModifies();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getSuppressions();
        java.util.Spliterator<java.lang.String> strSpliterator4 = strSet3.spliterator();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isContinue();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType15 = null;
        node13.setJSType(jSType15);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean21 = node20.isContinue();
        com.google.javascript.rhino.Node node22 = node13.clonePropsFrom(node20);
        node8.addChildrenToBack(node13);
        boolean boolean24 = node8.isLocalResultCall();
        boolean boolean25 = node8.isNull();
        boolean boolean26 = node8.isCatch();
        node8.addSuppression("TYPEOF 10\n");
        boolean boolean29 = strSet3.equals((java.lang.Object) node8);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node30 = node8.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strSpliterator4);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test01957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01957");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isContinue();
        boolean boolean18 = node16.isString();
        com.google.javascript.rhino.Node node19 = node3.useSourceInfoFromForTree(node16);
        boolean boolean20 = node16.isOnlyModifiesThisCall();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable21 = node16.siblings();
        node16.setLineno(4);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(nodeIterable21);
    }

    @Test
    public void test01958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01958");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("Unknown class name");
        com.google.javascript.rhino.Node node2 = node1.getLastSibling();
        boolean boolean3 = node1.isDelProp();
        java.lang.String str4 = node1.getString();
        com.google.javascript.rhino.Node node5 = null;
        int int6 = node1.getIndexOfChild(node5);
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Unknown class name" + "'", str4, "Unknown class name");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
    }

    @Test
    public void test01959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01959");
        com.google.javascript.rhino.Node[] nodeArray3 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(51, nodeArray3, 48, 32);
        com.google.javascript.rhino.Node node7 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray3);
        com.google.javascript.rhino.Node[] nodeArray11 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node(51, nodeArray11, 48, 32);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node(42, nodeArray11, 32, 12);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node(36, nodeArray11);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node> nodeList19 = com.google.common.collect.ImmutableList.copyOf(nodeArray11);
        com.google.javascript.rhino.Node[] nodeArray24 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node(51, nodeArray24, 48, 32);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray24);
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(45, nodeArray24);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node(40, nodeArray24, 40, (int) (byte) -1);
        com.google.javascript.rhino.Node[] nodeArray39 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node(51, nodeArray39, 48, 32);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node(42, nodeArray39, 32, 12);
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node(36, nodeArray39);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node(41, nodeArray39, 0, 53);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node(39, nodeArray39);
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) -1, nodeArray39);
        com.google.javascript.rhino.Node[] nodeArray56 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(51, nodeArray56, 48, 32);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (byte) 1, nodeArray56);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node(45, nodeArray56);
        com.google.javascript.rhino.Node node64 = new com.google.javascript.rhino.Node(40, nodeArray56, 40, (int) (byte) -1);
        com.google.javascript.rhino.Node[] nodeArray66 = new com.google.javascript.rhino.Node[] {};
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(51, nodeArray66, 48, 32);
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.Node[]> nodeArrayList70 = com.google.common.collect.ImmutableList.of(nodeArray3, nodeArray11, nodeArray24, nodeArray39, nodeArray56, nodeArray66);
        com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node(45, nodeArray3, 16, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            node73.setQuotedString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: not a StringNode");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nodeArray3);
        org.junit.Assert.assertNotNull(nodeArray11);
        org.junit.Assert.assertNotNull(nodeList19);
        org.junit.Assert.assertNotNull(nodeArray24);
        org.junit.Assert.assertNotNull(nodeArray39);
        org.junit.Assert.assertNotNull(nodeArray56);
        org.junit.Assert.assertNotNull(nodeArray66);
        org.junit.Assert.assertNotNull(nodeArrayList70);
    }

    @Test
    public void test01960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01960");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        int int18 = serializableList17.size();
        java.io.Serializable[] serializableArray35 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList36 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray35);
        boolean boolean37 = serializableList36.isEmpty();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isQualifiedName();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isContinue();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType53 = null;
        node51.setJSType(jSType53);
        com.google.javascript.rhino.Node node58 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean59 = node58.isContinue();
        com.google.javascript.rhino.Node node60 = node51.clonePropsFrom(node58);
        node46.addChildrenToBack(node51);
        boolean boolean62 = node46.isLocalResultCall();
        com.google.javascript.rhino.Node node63 = node41.copyInformationFromForTree(node46);
        boolean boolean64 = serializableList36.contains((java.lang.Object) node46);
        boolean boolean65 = serializableList17.containsAll((java.util.Collection<java.io.Serializable>) serializableList36);
        java.util.stream.Stream<java.io.Serializable> serializableStream66 = serializableList17.stream();
        java.lang.Object[] objArray67 = serializableList17.toArray();
        java.util.AbstractSet<java.lang.String>[] strSetArray68 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.AbstractSet<java.lang.String>[] strSetArray69 = serializableList17.toArray(strSetArray68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 16 + "'", int18 == 16);
        org.junit.Assert.assertNotNull(serializableArray35);
        org.junit.Assert.assertNotNull(serializableList36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(serializableStream66);
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
    }

    @Test
    public void test01961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01961");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isContinue();
        boolean boolean18 = node16.isString();
        com.google.javascript.rhino.Node node19 = node3.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.InputId inputId20 = null;
        node19.setInputId(inputId20);
        node19.setWasEmptyNode(false);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType29 = null;
        node27.setJSType(jSType29);
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean35 = node34.isContinue();
        com.google.javascript.rhino.Node node36 = node27.clonePropsFrom(node34);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile37 = null;
        node36.setStaticSourceFile(staticSourceFile37);
        com.google.javascript.rhino.Node node39 = node36.getLastSibling();
        com.google.javascript.rhino.Node node40 = node19.srcrefTree(node36);
        boolean boolean41 = node36.isOnlyModifiesThisCall();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder42 = node36.new FileLevelJsDocBuilder();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isContinue();
        boolean boolean48 = node46.isTry();
        boolean boolean49 = node46.isUnscopedQualifiedName();
        int int50 = node46.getSourceOffset();
        boolean boolean51 = node46.isNumber();
        com.google.javascript.rhino.Node node52 = node36.srcref(node46);
        boolean boolean53 = node52.isParamList();
        boolean boolean54 = node52.isBreak();
        boolean boolean55 = node52.isArrayLit();
        boolean boolean56 = node52.isAdd();
        node52.setLineno(100);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test01962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01962");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isQualifiedName();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isContinue();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        node32.setJSType(jSType34);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isContinue();
        com.google.javascript.rhino.Node node41 = node32.clonePropsFrom(node39);
        node27.addChildrenToBack(node32);
        boolean boolean43 = node27.isLocalResultCall();
        com.google.javascript.rhino.Node node44 = node22.copyInformationFromForTree(node27);
        boolean boolean45 = serializableList17.contains((java.lang.Object) node27);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean50 = node49.isQualifiedName();
        int int51 = serializableList17.indexOf((java.lang.Object) node49);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str52 = node49.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: 0");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
    }

    @Test
    public void test01963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01963");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        java.util.stream.Stream<java.io.Serializable> serializableStream21 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream22 = serializableList17.stream();
        java.util.stream.Stream<java.io.Serializable> serializableStream23 = serializableList17.parallelStream();
        java.util.Spliterator<java.io.Serializable> serializableSpliterator24 = serializableList17.spliterator();
        java.lang.Object[] objArray25 = serializableList17.toArray();
        java.io.Serializable[] serializableArray42 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList43 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray42);
        boolean boolean44 = serializableList43.isEmpty();
        boolean boolean46 = serializableList43.contains((java.lang.Object) 52);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean47 = serializableList17.removeAll((java.util.Collection<java.io.Serializable>) serializableList43);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(serializableStream21);
        org.junit.Assert.assertNotNull(serializableStream22);
        org.junit.Assert.assertNotNull(serializableStream23);
        org.junit.Assert.assertNotNull(serializableSpliterator24);
        org.junit.Assert.assertNotNull(objArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray25), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray25), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertNotNull(serializableArray42);
        org.junit.Assert.assertNotNull(serializableList43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test01964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01964");
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean7 = node6.isQualifiedName();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(32, (int) (byte) 10, (int) '#');
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean21 = node20.isQualifiedName();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isContinue();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean31 = node30.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType32 = null;
        node30.setJSType(jSType32);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean38 = node37.isContinue();
        com.google.javascript.rhino.Node node39 = node30.clonePropsFrom(node37);
        node25.addChildrenToBack(node30);
        boolean boolean41 = node25.isLocalResultCall();
        com.google.javascript.rhino.Node node42 = node20.copyInformationFromForTree(node25);
        node25.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node45 = node16.clonePropsFrom(node25);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean50 = node49.isInstanceOf();
        boolean boolean51 = node49.isComma();
        boolean boolean52 = node16.isEquivalentTo(node49);
        boolean boolean53 = node49.isComma();
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) '#', node12, node49, 42, (int) ' ');
        boolean boolean57 = node56.isComma();
        com.google.javascript.rhino.Node node58 = node56.cloneTree();
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node(16, node6, node56);
        node59.detachChildren();
        boolean boolean61 = node59.isNew();
        boolean boolean62 = node59.isGetElem();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) ' ', node59);
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newString("Unknown class name");
        node65.setLineno((int) (short) 1);
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString("true", 15, (int) (byte) -1);
        com.google.javascript.rhino.Node node72 = node65.copyInformationFromForTree(node71);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node73 = new com.google.javascript.rhino.Node((int) (byte) 100, node59, node71);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: first new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
    }

    @Test
    public void test01965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01965");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isQualifiedName();
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isContinue();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType20 = null;
        node18.setJSType(jSType20);
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isContinue();
        com.google.javascript.rhino.Node node27 = node18.clonePropsFrom(node25);
        node13.addChildrenToBack(node18);
        boolean boolean29 = node13.isLocalResultCall();
        com.google.javascript.rhino.Node node30 = node8.copyInformationFromForTree(node13);
        node13.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node33 = node4.clonePropsFrom(node13);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean38 = node37.isInstanceOf();
        boolean boolean39 = node37.isComma();
        boolean boolean40 = node4.isEquivalentTo(node37);
        com.google.javascript.rhino.Node node44 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean45 = node44.isQualifiedName();
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean50 = node49.isContinue();
        com.google.javascript.rhino.Node node54 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean55 = node54.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType56 = null;
        node54.setJSType(jSType56);
        com.google.javascript.rhino.Node node61 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean62 = node61.isContinue();
        com.google.javascript.rhino.Node node63 = node54.clonePropsFrom(node61);
        node49.addChildrenToBack(node54);
        boolean boolean65 = node49.isLocalResultCall();
        com.google.javascript.rhino.Node node66 = node44.copyInformationFromForTree(node49);
        node49.setSourceEncodedPosition((int) (short) -1);
        boolean boolean69 = node49.isName();
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node(30, node4, node49, 51, 15);
        boolean boolean73 = node49.isVoid();
        boolean boolean74 = node49.isInc();
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test01966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01966");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isQualifiedName();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isContinue();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        node32.setJSType(jSType34);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isContinue();
        com.google.javascript.rhino.Node node41 = node32.clonePropsFrom(node39);
        node27.addChildrenToBack(node32);
        boolean boolean43 = node27.isLocalResultCall();
        com.google.javascript.rhino.Node node44 = node22.copyInformationFromForTree(node27);
        boolean boolean45 = serializableList17.contains((java.lang.Object) node27);
        java.io.Serializable[] serializableArray62 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList63 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray62);
        boolean boolean64 = serializableList17.containsAll((java.util.Collection<java.io.Serializable>) serializableList63);
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList65 = serializableList63.reverse();
        boolean boolean66 = serializableList65.isEmpty();
        java.lang.String str67 = serializableList65.toString();
        java.util.Iterator<java.io.Serializable> serializableItor68 = serializableList65.iterator();
        com.google.common.collect.UnmodifiableListIterator<java.io.Serializable> serializableItor70 = serializableList65.listIterator(0);
        // The following exception was thrown during execution in test generation
        try {
            serializableList65.clear();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(serializableArray62);
        org.junit.Assert.assertNotNull(serializableList63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(serializableList65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "[30, 100.0, -1, 0.0, 100, 1.0, 1, 0, a, 0, 0.0, 1.0, hi!, 100, 10.0, 0.0]" + "'", str67, "[30, 100.0, -1, 0.0, 100, 1.0, 1, 0, a, 0, 0.0, 1.0, hi!, 100, 10.0, 0.0]");
        org.junit.Assert.assertNotNull(serializableItor68);
        org.junit.Assert.assertNotNull(serializableItor70);
    }

    @Test
    public void test01967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01967");
        java.lang.String str1 = com.google.javascript.rhino.jstype.ObjectType.createDelegateSuffix("(Not declared as a type name)");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "((Not declared as a type name))" + "'", str1, "((Not declared as a type name))");
    }

    @Test
    public void test01968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01968");
        com.google.common.collect.ImmutableList<java.util.AbstractCollection[]> abstractCollectionArrayList0 = com.google.common.collect.ImmutableList.of();
        org.junit.Assert.assertNotNull(abstractCollectionArrayList0);
    }

    @Test
    public void test01969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01969");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isQualifiedName();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isContinue();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        node32.setJSType(jSType34);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isContinue();
        com.google.javascript.rhino.Node node41 = node32.clonePropsFrom(node39);
        node27.addChildrenToBack(node32);
        boolean boolean43 = node27.isLocalResultCall();
        com.google.javascript.rhino.Node node44 = node22.copyInformationFromForTree(node27);
        boolean boolean45 = serializableList17.contains((java.lang.Object) node27);
        java.lang.Object[] objArray46 = serializableList17.toArray();
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags48 = new com.google.javascript.rhino.Node.SideEffectFlags((int) '4');
        int int49 = sideEffectFlags48.valueOf();
        sideEffectFlags48.clearAllFlags();
        sideEffectFlags48.setThrows();
        sideEffectFlags48.setThrows();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean53 = serializableList17.remove((java.lang.Object) sideEffectFlags48);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 52 + "'", int49 == 52);
    }

    @Test
    public void test01970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01970");
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder0 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>>();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumList1 = ternaryValueEnumBuilder0.build();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue2 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue3 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue4 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue5 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList6 = com.google.common.collect.ImmutableList.of(ternaryValue2, ternaryValue3, ternaryValue4, ternaryValue5);
        java.lang.String str7 = ternaryValue4.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue8 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue9 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue10 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue11 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList12 = com.google.common.collect.ImmutableList.of(ternaryValue8, ternaryValue9, ternaryValue10, ternaryValue11);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue13 = ternaryValue4.or(ternaryValue9);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue14 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue15 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue16 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue17 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList18 = com.google.common.collect.ImmutableList.of(ternaryValue14, ternaryValue15, ternaryValue16, ternaryValue17);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue19 = ternaryValue9.xor(ternaryValue14);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder20 = ternaryValueEnumBuilder0.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>) ternaryValue19);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder21 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>>();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumList22 = ternaryValueEnumBuilder21.build();
        com.google.javascript.rhino.jstype.TernaryValue[] ternaryValueArray23 = new com.google.javascript.rhino.jstype.TernaryValue[] {};
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder24 = ternaryValueEnumBuilder21.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>[]) ternaryValueArray23);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue25 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue26 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue27 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue28 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList29 = com.google.common.collect.ImmutableList.of(ternaryValue25, ternaryValue26, ternaryValue27, ternaryValue28);
        java.lang.String str30 = ternaryValue27.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue31 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue32 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue33 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue34 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList35 = com.google.common.collect.ImmutableList.of(ternaryValue31, ternaryValue32, ternaryValue33, ternaryValue34);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue36 = ternaryValue27.or(ternaryValue32);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue37 = ternaryValue36.not();
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder38 = ternaryValueEnumBuilder21.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>) ternaryValue37);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue39 = com.google.javascript.rhino.jstype.TernaryValue.FALSE;
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder40 = ternaryValueEnumBuilder38.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>) ternaryValue39);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder41 = new com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>>();
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumList42 = ternaryValueEnumBuilder41.build();
        com.google.javascript.rhino.jstype.TernaryValue[] ternaryValueArray43 = new com.google.javascript.rhino.jstype.TernaryValue[] {};
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder44 = ternaryValueEnumBuilder41.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>[]) ternaryValueArray43);
        com.google.common.collect.ImmutableList<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumList45 = ternaryValueEnumBuilder44.build();
        com.google.common.collect.ImmutableList<com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>>> ternaryValueEnumBuilderList46 = com.google.common.collect.ImmutableList.of(ternaryValueEnumBuilder0, ternaryValueEnumBuilder38, ternaryValueEnumBuilder44);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue48 = com.google.javascript.rhino.jstype.TernaryValue.forBoolean(false);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue49 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue50 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue51 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue52 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList53 = com.google.common.collect.ImmutableList.of(ternaryValue49, ternaryValue50, ternaryValue51, ternaryValue52);
        java.lang.String str54 = ternaryValue51.toString();
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue55 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue56 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue57 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue58 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList59 = com.google.common.collect.ImmutableList.of(ternaryValue55, ternaryValue56, ternaryValue57, ternaryValue58);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue60 = ternaryValue51.or(ternaryValue56);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue61 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue62 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue63 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue64 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList65 = com.google.common.collect.ImmutableList.of(ternaryValue61, ternaryValue62, ternaryValue63, ternaryValue64);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue66 = ternaryValue56.xor(ternaryValue61);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue67 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue68 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue69 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue70 = com.google.javascript.rhino.jstype.TernaryValue.TRUE;
        com.google.common.collect.ImmutableList<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueList71 = com.google.common.collect.ImmutableList.of(ternaryValue67, ternaryValue68, ternaryValue69, ternaryValue70);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue72 = ternaryValue61.xor(ternaryValue68);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue73 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue74 = ternaryValue61.or(ternaryValue73);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue75 = ternaryValue48.xor(ternaryValue61);
        com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder76 = ternaryValueEnumBuilder44.add((java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>) ternaryValue75);
        java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue> ternaryValueEnum77 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.ImmutableList.Builder<java.lang.Enum<com.google.javascript.rhino.jstype.TernaryValue>> ternaryValueEnumBuilder78 = ternaryValueEnumBuilder76.add(ternaryValueEnum77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(ternaryValueEnumList1);
        org.junit.Assert.assertNotNull(ternaryValue2);
        org.junit.Assert.assertNotNull(ternaryValue3);
        org.junit.Assert.assertNotNull(ternaryValue4);
        org.junit.Assert.assertNotNull(ternaryValue5);
        org.junit.Assert.assertNotNull(ternaryValueList6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "true" + "'", str7, "true");
        org.junit.Assert.assertNotNull(ternaryValue8);
        org.junit.Assert.assertNotNull(ternaryValue9);
        org.junit.Assert.assertNotNull(ternaryValue10);
        org.junit.Assert.assertNotNull(ternaryValue11);
        org.junit.Assert.assertNotNull(ternaryValueList12);
        org.junit.Assert.assertNotNull(ternaryValue13);
        org.junit.Assert.assertNotNull(ternaryValue14);
        org.junit.Assert.assertNotNull(ternaryValue15);
        org.junit.Assert.assertNotNull(ternaryValue16);
        org.junit.Assert.assertNotNull(ternaryValue17);
        org.junit.Assert.assertNotNull(ternaryValueList18);
        org.junit.Assert.assertNotNull(ternaryValue19);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder20);
        org.junit.Assert.assertNotNull(ternaryValueEnumList22);
        org.junit.Assert.assertNotNull(ternaryValueArray23);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder24);
        org.junit.Assert.assertNotNull(ternaryValue25);
        org.junit.Assert.assertNotNull(ternaryValue26);
        org.junit.Assert.assertNotNull(ternaryValue27);
        org.junit.Assert.assertNotNull(ternaryValue28);
        org.junit.Assert.assertNotNull(ternaryValueList29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "true" + "'", str30, "true");
        org.junit.Assert.assertNotNull(ternaryValue31);
        org.junit.Assert.assertNotNull(ternaryValue32);
        org.junit.Assert.assertNotNull(ternaryValue33);
        org.junit.Assert.assertNotNull(ternaryValue34);
        org.junit.Assert.assertNotNull(ternaryValueList35);
        org.junit.Assert.assertNotNull(ternaryValue36);
        org.junit.Assert.assertNotNull(ternaryValue37);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder38);
        org.junit.Assert.assertNotNull(ternaryValue39);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder40);
        org.junit.Assert.assertNotNull(ternaryValueEnumList42);
        org.junit.Assert.assertNotNull(ternaryValueArray43);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder44);
        org.junit.Assert.assertNotNull(ternaryValueEnumList45);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilderList46);
        org.junit.Assert.assertNotNull(ternaryValue48);
        org.junit.Assert.assertNotNull(ternaryValue49);
        org.junit.Assert.assertNotNull(ternaryValue50);
        org.junit.Assert.assertNotNull(ternaryValue51);
        org.junit.Assert.assertNotNull(ternaryValue52);
        org.junit.Assert.assertNotNull(ternaryValueList53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "true" + "'", str54, "true");
        org.junit.Assert.assertNotNull(ternaryValue55);
        org.junit.Assert.assertNotNull(ternaryValue56);
        org.junit.Assert.assertNotNull(ternaryValue57);
        org.junit.Assert.assertNotNull(ternaryValue58);
        org.junit.Assert.assertNotNull(ternaryValueList59);
        org.junit.Assert.assertNotNull(ternaryValue60);
        org.junit.Assert.assertNotNull(ternaryValue61);
        org.junit.Assert.assertNotNull(ternaryValue62);
        org.junit.Assert.assertNotNull(ternaryValue63);
        org.junit.Assert.assertNotNull(ternaryValue64);
        org.junit.Assert.assertNotNull(ternaryValueList65);
        org.junit.Assert.assertNotNull(ternaryValue66);
        org.junit.Assert.assertNotNull(ternaryValue67);
        org.junit.Assert.assertNotNull(ternaryValue68);
        org.junit.Assert.assertNotNull(ternaryValue69);
        org.junit.Assert.assertNotNull(ternaryValue70);
        org.junit.Assert.assertNotNull(ternaryValueList71);
        org.junit.Assert.assertNotNull(ternaryValue72);
        org.junit.Assert.assertNotNull(ternaryValue73);
        org.junit.Assert.assertNotNull(ternaryValue74);
        org.junit.Assert.assertNotNull(ternaryValue75);
        org.junit.Assert.assertNotNull(ternaryValueEnumBuilder76);
    }

    @Test
    public void test01971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01971");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        boolean boolean4 = jSDocInfo0.hasFileOverview();
        boolean boolean5 = jSDocInfo0.isJavaDispatch();
        boolean boolean6 = jSDocInfo0.hasType();
        boolean boolean7 = jSDocInfo0.isExport();
        java.lang.String str8 = jSDocInfo0.getVersion();
        java.lang.String str9 = jSDocInfo0.getLicense();
        java.lang.String str10 = jSDocInfo0.getBlockDescription();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test01972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01972");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newString((int) (short) 100, "InputId: true", 45, 39);
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean10 = node9.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType11 = null;
        node9.setJSType(jSType11);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isContinue();
        com.google.javascript.rhino.Node node18 = node9.clonePropsFrom(node16);
        boolean boolean19 = node18.isQuotedString();
        com.google.javascript.rhino.Node node23 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean24 = node23.isLabelName();
        boolean boolean25 = node23.isDec();
        boolean boolean26 = node23.isScript();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node(0, node18, node23, node30, 0, (int) (short) 0);
        boolean boolean34 = node23.isDec();
        com.google.javascript.rhino.Node node38 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean39 = node38.isQualifiedName();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean44 = node43.isContinue();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean49 = node48.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        node48.setJSType(jSType50);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node57 = node48.clonePropsFrom(node55);
        node43.addChildrenToBack(node48);
        boolean boolean59 = node43.isLocalResultCall();
        com.google.javascript.rhino.Node node60 = node38.copyInformationFromForTree(node43);
        node43.setSourceEncodedPosition((int) (short) -1);
        boolean boolean63 = node43.isName();
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean68 = node67.isLabelName();
        boolean boolean69 = node43.hasChild(node67);
        com.google.javascript.rhino.Node node70 = node23.useSourceInfoIfMissingFromForTree(node67);
        com.google.javascript.rhino.Node node71 = node4.useSourceInfoFromForTree(node67);
        boolean boolean72 = node71.isVar();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(node70);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test01973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01973");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isContinue();
        boolean boolean6 = node4.isBlock();
        node4.removeProp(12);
        com.google.javascript.rhino.Node node13 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean14 = node13.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType15 = null;
        node13.setJSType(jSType15);
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean21 = node20.isContinue();
        com.google.javascript.rhino.Node node22 = node13.clonePropsFrom(node20);
        boolean boolean23 = node22.isQuotedString();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isLabelName();
        boolean boolean29 = node27.isDec();
        boolean boolean30 = node27.isScript();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node37 = new com.google.javascript.rhino.Node(0, node22, node27, node34, 0, (int) (short) 0);
        boolean boolean38 = node22.isTrue();
        com.google.javascript.rhino.Node node39 = node4.useSourceInfoIfMissingFromForTree(node22);
        boolean boolean40 = node4.isInc();
        boolean boolean41 = node4.isLabel();
        boolean boolean42 = node4.isCall();
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node(50, node4);
        boolean boolean45 = node4.getBooleanProp(63);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test01974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01974");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility2 = null;
        jSDocInfo0.setVisibility(visibility2);
        java.lang.String str4 = jSDocInfo0.getMeaning();
        java.lang.String str5 = jSDocInfo0.getLicense();
        boolean boolean6 = jSDocInfo0.hasType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo0.getReturnType();
        boolean boolean8 = jSDocInfo0.isDefine();
        java.util.Set<java.lang.String> strSet9 = jSDocInfo0.getModifies();
        int int10 = jSDocInfo0.getExtendedInterfacesCount();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test01975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01975");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        boolean boolean5 = node3.isTrue();
        boolean boolean6 = node3.isNoSideEffectsCall();
        boolean boolean7 = node3.isAdd();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node3.siblings();
        java.util.Spliterator<com.google.javascript.rhino.Node> nodeSpliterator9 = nodeIterable8.spliterator();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(nodeIterable8);
        org.junit.Assert.assertNotNull(nodeSpliterator9);
    }

    @Test
    public void test01976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01976");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(50);
        int int3 = node1.getIntProp(54);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test01977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01977");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isQualifiedName();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isContinue();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        node32.setJSType(jSType34);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isContinue();
        com.google.javascript.rhino.Node node41 = node32.clonePropsFrom(node39);
        node27.addChildrenToBack(node32);
        boolean boolean43 = node27.isLocalResultCall();
        com.google.javascript.rhino.Node node44 = node22.copyInformationFromForTree(node27);
        boolean boolean45 = serializableList17.contains((java.lang.Object) node27);
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean50 = node49.isQualifiedName();
        int int51 = serializableList17.indexOf((java.lang.Object) node49);
        boolean boolean52 = node49.wasEmptyNode();
        com.google.javascript.rhino.Node node53 = node49.cloneTree();
        boolean boolean54 = node49.isFromExterns();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test01978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01978");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        int int7 = node3.getSourceOffset();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isQualifiedName();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean22 = node21.isContinue();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean27 = node26.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType28 = null;
        node26.setJSType(jSType28);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean34 = node33.isContinue();
        com.google.javascript.rhino.Node node35 = node26.clonePropsFrom(node33);
        node21.addChildrenToBack(node26);
        boolean boolean37 = node21.isLocalResultCall();
        com.google.javascript.rhino.Node node38 = node16.copyInformationFromForTree(node21);
        node21.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node41 = node12.clonePropsFrom(node21);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean46 = node45.isLabelName();
        boolean boolean47 = node45.isTrue();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isContinue();
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean57 = node56.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType58 = null;
        node56.setJSType(jSType58);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean64 = node63.isContinue();
        com.google.javascript.rhino.Node node65 = node56.clonePropsFrom(node63);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (byte) 0, node21, node45, node51, node65, 10, (int) (byte) -1);
        node21.putIntProp((int) (short) 0, (int) (byte) -1);
        com.google.javascript.rhino.Node node72 = node3.useSourceInfoFrom(node21);
        boolean boolean73 = node72.isTry();
        com.google.javascript.rhino.Node node74 = node72.getLastSibling();
        com.google.javascript.rhino.InputId inputId76 = new com.google.javascript.rhino.InputId("java.io.IOException: java.io.IOException");
        java.lang.String str77 = inputId76.toString();
        node72.setInputId(inputId76);
        java.lang.String str79 = inputId76.getIdName();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "InputId: java.io.IOException: java.io.IOException" + "'", str77, "InputId: java.io.IOException: java.io.IOException");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "java.io.IOException: java.io.IOException" + "'", str79, "java.io.IOException: java.io.IOException");
    }

    @Test
    public void test01979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01979");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isContinue();
        boolean boolean18 = node16.isString();
        com.google.javascript.rhino.Node node19 = node3.useSourceInfoFromForTree(node16);
        com.google.javascript.rhino.InputId inputId20 = null;
        node19.setInputId(inputId20);
        java.lang.Object obj23 = node19.getProp((int) (short) 10);
        com.google.javascript.rhino.JSDocInfo jSDocInfo24 = node19.getJSDocInfo();
        node19.setVarArgs(true);
        boolean boolean27 = node19.isFor();
        node19.setSourceEncodedPosition(52);
        boolean boolean30 = node19.isCase();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean35 = node34.isQuotedString();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newString("Unknown class name");
        com.google.javascript.rhino.Node node38 = node37.getLastSibling();
        int int39 = node37.getSourcePosition();
        com.google.javascript.rhino.Node node40 = node34.srcrefTree(node37);
        boolean boolean41 = node34.isWhile();
        boolean boolean42 = node34.isWith();
        boolean boolean43 = node34.isAnd();
        com.google.javascript.rhino.Node node44 = node19.copyInformationFrom(node34);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean49 = node48.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType50 = null;
        node48.setJSType(jSType50);
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node57 = node48.clonePropsFrom(node55);
        com.google.javascript.rhino.Node node58 = node48.getNext();
        java.lang.String[] strArray62 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet63 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet63, strArray62);
        java.lang.Object[] objArray65 = strSet63.toArray();
        boolean boolean67 = strSet63.equals((java.lang.Object) 12);
        java.lang.Object[] objArray68 = strSet63.toArray();
        com.google.javascript.rhino.Node node72 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean73 = node72.isLabelName();
        boolean boolean74 = node72.isDec();
        boolean boolean75 = node72.isNoSideEffectsCall();
        boolean boolean76 = node72.isIf();
        com.google.javascript.rhino.Node node77 = node72.getLastSibling();
        node77.setLineno(45);
        boolean boolean80 = node77.isNoSideEffectsCall();
        int int82 = node77.getIntProp(42);
        boolean boolean83 = strSet63.equals((java.lang.Object) node77);
        // The following exception was thrown during execution in test generation
        try {
            node34.replaceChild(node58, node77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNull(obj23);
        org.junit.Assert.assertNull(jSDocInfo24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertNull(node58);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[Unknown class name, ]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[Unknown class name, ]");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test01980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01980");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("STRING Unknown class name");
        com.google.javascript.rhino.JSDocInfo jSDocInfo2 = new com.google.javascript.rhino.JSDocInfo();
        int int3 = jSDocInfo2.getImplementedInterfaceCount();
        java.util.Collection<com.google.javascript.rhino.Node> nodeCollection4 = jSDocInfo2.getTypeNodes();
        java.lang.String str5 = jSDocInfo2.getDescription();
        boolean boolean6 = jSDocInfo2.isExterns();
        node1.setJSDocInfo(jSDocInfo2);
        boolean boolean9 = jSDocInfo2.hasDescriptionForParameter("(InputId: true)");
        boolean boolean10 = jSDocInfo2.hasBaseType();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(nodeCollection4);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test01981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01981");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean6 = jSDocInfo5.hasEnumParameterType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo5.getBaseType();
        node3.setJSDocInfo(jSDocInfo5);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isQuotedString();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType19 = null;
        node17.setJSType(jSType19);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean25 = node24.isContinue();
        com.google.javascript.rhino.Node node26 = node17.clonePropsFrom(node24);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean31 = node30.isContinue();
        boolean boolean32 = node30.isString();
        com.google.javascript.rhino.Node node33 = node17.useSourceInfoFromForTree(node30);
        com.google.javascript.rhino.InputId inputId34 = null;
        node33.setInputId(inputId34);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString(37, "hi!", (int) (byte) 100, (int) (short) 100);
        int int42 = node40.getIntProp(30);
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = new com.google.javascript.rhino.JSDocInfo();
        int int44 = jSDocInfo43.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility45 = null;
        jSDocInfo43.setVisibility(visibility45);
        boolean boolean47 = jSDocInfo43.hasFileOverview();
        boolean boolean48 = jSDocInfo43.isJavaDispatch();
        boolean boolean49 = jSDocInfo43.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList50 = jSDocInfo43.getExtendedInterfaces();
        java.lang.String str51 = jSDocInfo43.getLicense();
        boolean boolean52 = jSDocInfo43.hasBaseType();
        boolean boolean53 = jSDocInfo43.isNoTypeCheck();
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = new com.google.javascript.rhino.JSDocInfo();
        int int55 = jSDocInfo54.getImplementedInterfaceCount();
        boolean boolean56 = jSDocInfo54.isExterns();
        com.google.javascript.rhino.JSDocInfo jSDocInfo58 = new com.google.javascript.rhino.JSDocInfo();
        int int59 = jSDocInfo58.getImplementedInterfaceCount();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean64 = node63.isQualifiedName();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean69 = node68.isContinue();
        boolean boolean70 = node68.isDo();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList71 = com.google.common.collect.ImmutableList.of((java.io.Serializable) jSDocInfo5, (java.io.Serializable) boolean13, (java.io.Serializable) node33, (java.io.Serializable) int42, (java.io.Serializable) boolean53, (java.io.Serializable) boolean56, (java.io.Serializable) ' ', (java.io.Serializable) jSDocInfo58, (java.io.Serializable) node63, (java.io.Serializable) boolean70);
        com.google.javascript.rhino.Node node72 = node33.removeChildren();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(serializableList71);
        org.junit.Assert.assertNull(node72);
    }

    @Test
    public void test01982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01982");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isQualifiedName();
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isContinue();
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType34 = null;
        node32.setJSType(jSType34);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isContinue();
        com.google.javascript.rhino.Node node41 = node32.clonePropsFrom(node39);
        node27.addChildrenToBack(node32);
        boolean boolean43 = node27.isLocalResultCall();
        com.google.javascript.rhino.Node node44 = node22.copyInformationFromForTree(node27);
        boolean boolean45 = serializableList17.contains((java.lang.Object) node27);
        com.google.common.collect.UnmodifiableIterator<java.io.Serializable> serializableItor46 = serializableList17.iterator();
        boolean boolean47 = serializableList17.isEmpty();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(serializableItor46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test01983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01983");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isQualifiedName();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean10 = node9.isContinue();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean15 = node14.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType16 = null;
        node14.setJSType(jSType16);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean22 = node21.isContinue();
        com.google.javascript.rhino.Node node23 = node14.clonePropsFrom(node21);
        node9.addChildrenToBack(node14);
        boolean boolean25 = node9.isLocalResultCall();
        com.google.javascript.rhino.Node node26 = node4.copyInformationFromForTree(node9);
        boolean boolean27 = node9.isParamList();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(38, node9, 51, 38);
        int int31 = node30.getSideEffectFlags();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node(12, 1, 40);
        com.google.javascript.rhino.Node node36 = node30.copyInformationFrom(node35);
        node35.detachChildren();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(node36);
    }

    @Test
    public void test01984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01984");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isContinue();
        boolean boolean19 = node17.isString();
        com.google.javascript.rhino.Node node20 = node4.useSourceInfoFromForTree(node17);
        com.google.javascript.rhino.InputId inputId21 = null;
        node20.setInputId(inputId21);
        java.lang.Object obj24 = node20.getProp((int) (short) 10);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        node28.setJSType(jSType30);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isContinue();
        com.google.javascript.rhino.Node node37 = node28.clonePropsFrom(node35);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isContinue();
        boolean boolean43 = node41.isString();
        com.google.javascript.rhino.Node node44 = node28.useSourceInfoFromForTree(node41);
        com.google.javascript.rhino.InputId inputId45 = null;
        node44.setInputId(inputId45);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isQualifiedName();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean61 = node60.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType62 = null;
        node60.setJSType(jSType62);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean68 = node67.isContinue();
        com.google.javascript.rhino.Node node69 = node60.clonePropsFrom(node67);
        node55.addChildrenToBack(node60);
        boolean boolean71 = node55.isLocalResultCall();
        com.google.javascript.rhino.Node node72 = node50.copyInformationFromForTree(node55);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(0, node20, node44, node55, (int) (short) 10, 53);
        com.google.javascript.rhino.InputId inputId76 = node55.getInputId();
        boolean boolean77 = node55.isReturn();
        boolean boolean78 = node55.isLabelName();
        java.lang.Object obj80 = node55.getProp(10);
        com.google.javascript.rhino.Node node81 = node55.cloneNode();
        java.util.Set<java.lang.String> strSet82 = node81.getDirectives();
        boolean boolean83 = node81.isNull();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(inputId76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNull(obj80);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertNull(strSet82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test01985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01985");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node(37);
        int int2 = node1.getSideEffectFlags();
        boolean boolean3 = node1.isRegExp();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression5 = new com.google.javascript.rhino.JSTypeExpression(node1, "InputId: java.io.IOException: java.io.IOException");
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.JSType jSType8 = jSTypeExpression5.evaluate(jSTypeStaticScope6, jSTypeRegistry7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test01986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01986");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        boolean boolean6 = node4.isDec();
        boolean boolean7 = node4.isNoSideEffectsCall();
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType13 = null;
        node11.setJSType(jSType13);
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isContinue();
        com.google.javascript.rhino.Node node20 = node11.clonePropsFrom(node18);
        boolean boolean21 = node20.isQuotedString();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean26 = node25.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType27 = null;
        node25.setJSType(jSType27);
        com.google.javascript.rhino.Node node32 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean33 = node32.isContinue();
        com.google.javascript.rhino.Node node34 = node25.clonePropsFrom(node32);
        int int35 = node34.getLineno();
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean40 = node39.isLabelName();
        boolean boolean41 = node39.isDec();
        boolean boolean42 = node39.isAssign();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isQualifiedName();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean61 = node60.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType62 = null;
        node60.setJSType(jSType62);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean68 = node67.isContinue();
        com.google.javascript.rhino.Node node69 = node60.clonePropsFrom(node67);
        node55.addChildrenToBack(node60);
        boolean boolean71 = node55.isLocalResultCall();
        com.google.javascript.rhino.Node node72 = node50.copyInformationFromForTree(node55);
        node55.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node75 = node46.clonePropsFrom(node55);
        com.google.javascript.rhino.Node[] nodeArray76 = new com.google.javascript.rhino.Node[] { node4, node20, node34, node39, node46 };
        com.google.javascript.rhino.Node node79 = new com.google.javascript.rhino.Node(0, nodeArray76, (-1), 54);
        boolean boolean80 = node79.isDo();
        boolean boolean81 = node79.isTry();
        boolean boolean82 = node79.isSetterDef();
        boolean boolean83 = node79.isIn();
        com.google.javascript.rhino.Node node84 = node79.getParent();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean85 = node84.isNull();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node75);
        org.junit.Assert.assertNotNull(nodeArray76);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNull(node84);
    }

    @Test
    public void test01987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01987");
        com.google.javascript.rhino.Node node5 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean6 = node5.isQualifiedName();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean16 = node15.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType17 = null;
        node15.setJSType(jSType17);
        com.google.javascript.rhino.Node node22 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean23 = node22.isContinue();
        com.google.javascript.rhino.Node node24 = node15.clonePropsFrom(node22);
        node10.addChildrenToBack(node15);
        boolean boolean26 = node10.isLocalResultCall();
        com.google.javascript.rhino.Node node27 = node5.copyInformationFromForTree(node10);
        boolean boolean28 = node10.isParamList();
        com.google.javascript.rhino.Node node31 = new com.google.javascript.rhino.Node(38, node10, 51, 38);
        node10.putIntProp(12, 54);
        com.google.javascript.rhino.Node node39 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node43 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean44 = node43.isQualifiedName();
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean49 = node48.isContinue();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean54 = node53.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType55 = null;
        node53.setJSType(jSType55);
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean61 = node60.isContinue();
        com.google.javascript.rhino.Node node62 = node53.clonePropsFrom(node60);
        node48.addChildrenToBack(node53);
        boolean boolean64 = node48.isLocalResultCall();
        com.google.javascript.rhino.Node node65 = node43.copyInformationFromForTree(node48);
        node48.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node68 = node39.clonePropsFrom(node48);
        com.google.javascript.rhino.Node node69 = node68.getLastSibling();
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newString("Unknown class name");
        boolean boolean72 = node71.isBreak();
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(0, node68, node71, (-1), 43);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node((int) ' ', node10, node75, 10, 38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: first new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test01988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01988");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isContinue();
        com.google.javascript.rhino.Node node8 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean9 = node8.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType10 = null;
        node8.setJSType(jSType10);
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean16 = node15.isContinue();
        com.google.javascript.rhino.Node node17 = node8.clonePropsFrom(node15);
        node3.addChildrenToBack(node8);
        boolean boolean19 = node3.isLocalResultCall();
        int int20 = node3.getLength();
        boolean boolean21 = node3.isSwitch();
        node3.putBooleanProp(32, false);
        boolean boolean25 = node3.isNull();
        boolean boolean26 = node3.hasChildren();
        boolean boolean27 = node3.isInc();
        com.google.javascript.rhino.Node node28 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node29 = node3.useSourceInfoIfMissingFrom(node28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test01989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01989");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isQualifiedName();
        com.google.javascript.rhino.Node node9 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean10 = node9.isContinue();
        com.google.javascript.rhino.Node node14 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean15 = node14.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType16 = null;
        node14.setJSType(jSType16);
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean22 = node21.isContinue();
        com.google.javascript.rhino.Node node23 = node14.clonePropsFrom(node21);
        node9.addChildrenToBack(node14);
        boolean boolean25 = node9.isLocalResultCall();
        com.google.javascript.rhino.Node node26 = node4.copyInformationFromForTree(node9);
        boolean boolean27 = node9.isParamList();
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node(38, node9, 51, 38);
        int int31 = node30.getSideEffectFlags();
        boolean boolean32 = node30.isCase();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test01990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01990");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isInstanceOf();
        boolean boolean5 = node3.isComma();
        boolean boolean6 = node3.isUnscopedQualifiedName();
        com.google.javascript.rhino.Node node7 = node3.removeChildren();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean8 = node7.isCall();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(node7);
    }

    @Test
    public void test01991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01991");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean6 = jSDocInfo5.hasEnumParameterType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression7 = jSDocInfo5.getBaseType();
        node3.setJSDocInfo(jSDocInfo5);
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean13 = node12.isQuotedString();
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType19 = null;
        node17.setJSType(jSType19);
        com.google.javascript.rhino.Node node24 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean25 = node24.isContinue();
        com.google.javascript.rhino.Node node26 = node17.clonePropsFrom(node24);
        com.google.javascript.rhino.Node node30 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean31 = node30.isContinue();
        boolean boolean32 = node30.isString();
        com.google.javascript.rhino.Node node33 = node17.useSourceInfoFromForTree(node30);
        com.google.javascript.rhino.InputId inputId34 = null;
        node33.setInputId(inputId34);
        com.google.javascript.rhino.Node node40 = com.google.javascript.rhino.Node.newString(37, "hi!", (int) (byte) 100, (int) (short) 100);
        int int42 = node40.getIntProp(30);
        com.google.javascript.rhino.JSDocInfo jSDocInfo43 = new com.google.javascript.rhino.JSDocInfo();
        int int44 = jSDocInfo43.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility45 = null;
        jSDocInfo43.setVisibility(visibility45);
        boolean boolean47 = jSDocInfo43.hasFileOverview();
        boolean boolean48 = jSDocInfo43.isJavaDispatch();
        boolean boolean49 = jSDocInfo43.hasType();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList50 = jSDocInfo43.getExtendedInterfaces();
        java.lang.String str51 = jSDocInfo43.getLicense();
        boolean boolean52 = jSDocInfo43.hasBaseType();
        boolean boolean53 = jSDocInfo43.isNoTypeCheck();
        com.google.javascript.rhino.JSDocInfo jSDocInfo54 = new com.google.javascript.rhino.JSDocInfo();
        int int55 = jSDocInfo54.getImplementedInterfaceCount();
        boolean boolean56 = jSDocInfo54.isExterns();
        com.google.javascript.rhino.JSDocInfo jSDocInfo58 = new com.google.javascript.rhino.JSDocInfo();
        int int59 = jSDocInfo58.getImplementedInterfaceCount();
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean64 = node63.isQualifiedName();
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean69 = node68.isContinue();
        boolean boolean70 = node68.isDo();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList71 = com.google.common.collect.ImmutableList.of((java.io.Serializable) jSDocInfo5, (java.io.Serializable) boolean13, (java.io.Serializable) node33, (java.io.Serializable) int42, (java.io.Serializable) boolean53, (java.io.Serializable) boolean56, (java.io.Serializable) ' ', (java.io.Serializable) jSDocInfo58, (java.io.Serializable) node63, (java.io.Serializable) boolean70);
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList72 = serializableList71.asList();
        boolean boolean73 = serializableList71.isEmpty();
        com.google.javascript.rhino.jstype.StaticSourceFile[] staticSourceFileArray74 = new com.google.javascript.rhino.jstype.StaticSourceFile[] {};
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.StaticSourceFile[] staticSourceFileArray75 = serializableList71.toArray(staticSourceFileArray74);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayStoreException; message: null");
        } catch (java.lang.ArrayStoreException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(jSTypeExpression7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(jSTypeExpressionList50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(serializableList71);
        org.junit.Assert.assertNotNull(serializableList72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(staticSourceFileArray74);
    }

    @Test
    public void test01992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01992");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isContinue();
        com.google.javascript.rhino.Node node12 = node3.clonePropsFrom(node10);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = null;
        node12.setStaticSourceFile(staticSourceFile13);
        com.google.javascript.rhino.Node node15 = node12.getLastSibling();
        boolean boolean16 = node15.hasMoreThanOneChild();
        boolean boolean17 = node15.isOr();
        boolean boolean18 = node15.isAdd();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test01993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01993");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        com.google.javascript.rhino.Node node17 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean18 = node17.isContinue();
        boolean boolean19 = node17.isString();
        com.google.javascript.rhino.Node node20 = node4.useSourceInfoFromForTree(node17);
        com.google.javascript.rhino.InputId inputId21 = null;
        node20.setInputId(inputId21);
        java.lang.Object obj24 = node20.getProp((int) (short) 10);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean29 = node28.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType30 = null;
        node28.setJSType(jSType30);
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isContinue();
        com.google.javascript.rhino.Node node37 = node28.clonePropsFrom(node35);
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isContinue();
        boolean boolean43 = node41.isString();
        com.google.javascript.rhino.Node node44 = node28.useSourceInfoFromForTree(node41);
        com.google.javascript.rhino.InputId inputId45 = null;
        node44.setInputId(inputId45);
        com.google.javascript.rhino.Node node50 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean51 = node50.isQualifiedName();
        com.google.javascript.rhino.Node node55 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean56 = node55.isContinue();
        com.google.javascript.rhino.Node node60 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean61 = node60.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType62 = null;
        node60.setJSType(jSType62);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean68 = node67.isContinue();
        com.google.javascript.rhino.Node node69 = node60.clonePropsFrom(node67);
        node55.addChildrenToBack(node60);
        boolean boolean71 = node55.isLocalResultCall();
        com.google.javascript.rhino.Node node72 = node50.copyInformationFromForTree(node55);
        com.google.javascript.rhino.Node node75 = new com.google.javascript.rhino.Node(0, node20, node44, node55, (int) (short) 10, 53);
        com.google.javascript.rhino.InputId inputId76 = node55.getInputId();
        int int77 = node55.getChildCount();
        boolean boolean78 = node55.isOr();
        com.google.javascript.rhino.JSDocInfo jSDocInfo79 = new com.google.javascript.rhino.JSDocInfo();
        int int80 = jSDocInfo79.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility81 = null;
        jSDocInfo79.setVisibility(visibility81);
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression83 = jSDocInfo79.getEnumParameterType();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression84 = jSDocInfo79.getEnumParameterType();
        java.lang.String str85 = jSDocInfo79.getReturnDescription();
        node55.setJSDocInfo(jSDocInfo79);
        boolean boolean88 = node55.getBooleanProp(35);
        boolean boolean89 = node55.isTry();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(obj24);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNull(inputId76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNull(jSTypeExpression83);
        org.junit.Assert.assertNull(jSTypeExpression84);
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test01994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01994");
        com.google.common.collect.ImmutableList.Builder<java.util.AbstractCollection[]> abstractCollectionArrayBuilder0 = com.google.common.collect.ImmutableList.builder();
        org.junit.Assert.assertNotNull(abstractCollectionArrayBuilder0);
    }

    @Test
    public void test01995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01995");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        int int1 = jSDocInfo0.getImplementedInterfaceCount();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression2 = jSDocInfo0.getType();
        java.lang.String str3 = jSDocInfo0.getDeprecationReason();
        java.lang.String str4 = jSDocInfo0.toString();
        boolean boolean5 = jSDocInfo0.shouldPreserveTry();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList6 = com.google.common.collect.ImmutableList.of((java.io.Serializable) jSDocInfo0);
        java.lang.String[] strArray10 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        java.lang.Object[] objArray13 = strSet11.toArray();
        java.io.Serializable[] serializableArray30 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList31 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray30);
        boolean boolean32 = serializableList31.isEmpty();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean37 = node36.isQualifiedName();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean42 = node41.isContinue();
        com.google.javascript.rhino.Node node46 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean47 = node46.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType48 = null;
        node46.setJSType(jSType48);
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean54 = node53.isContinue();
        com.google.javascript.rhino.Node node55 = node46.clonePropsFrom(node53);
        node41.addChildrenToBack(node46);
        boolean boolean57 = node41.isLocalResultCall();
        com.google.javascript.rhino.Node node58 = node36.copyInformationFromForTree(node41);
        boolean boolean59 = serializableList31.contains((java.lang.Object) node41);
        java.util.Iterator<java.io.Serializable> serializableItor60 = serializableList31.iterator();
        boolean boolean61 = strSet11.containsAll((java.util.Collection<java.io.Serializable>) serializableList31);
        java.lang.Object[] objArray62 = serializableList31.toArray();
        boolean boolean63 = serializableList31.isEmpty();
        java.lang.Object[] objArray64 = serializableList31.toArray();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList65 = serializableList31.reverse();
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList66 = serializableList31.asList();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean67 = serializableList6.addAll((java.util.Collection<java.io.Serializable>) serializableList31);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNull(jSTypeExpression2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JSDocInfo" + "'", str4, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(serializableList6);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[Unknown class name, ]");
        org.junit.Assert.assertNotNull(serializableArray30);
        org.junit.Assert.assertNotNull(serializableList31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(serializableItor60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[0.0, 10.0, 100, hi!, 1.0, 0.0, 0, a, 0, 1, 1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertNotNull(serializableList65);
        org.junit.Assert.assertNotNull(serializableList66);
    }

    @Test
    public void test01996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01996");
        com.google.javascript.rhino.InputId inputId1 = new com.google.javascript.rhino.InputId("true");
        java.lang.String[] strArray5 = new java.lang.String[] { "Unknown class name", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        java.lang.Object[] objArray8 = strSet6.toArray();
        boolean boolean9 = inputId1.equals((java.lang.Object) strSet6);
        boolean boolean10 = strSet6.isEmpty();
        boolean boolean12 = strSet6.add("InputId: true");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition13 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int14 = stringPosition13.getStartLine();
        int int15 = stringPosition13.getPositionOnEndLine();
        int int16 = stringPosition13.getPositionOnEndLine();
        int int17 = stringPosition13.getPositionOnEndLine();
        int int18 = stringPosition13.getPositionOnStartLine();
        stringPosition13.setItem("Not declared as a type name");
        int int21 = stringPosition13.getPositionOnEndLine();
        java.lang.String str22 = stringPosition13.getItem();
        boolean boolean23 = strSet6.equals((java.lang.Object) stringPosition13);
        boolean boolean25 = strSet6.add("Not declared as a constructor");
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[Unknown class name, ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[Unknown class name, ]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Not declared as a type name" + "'", str22, "Not declared as a type name");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test01997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01997");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isContinue();
        boolean boolean5 = node3.isNull();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean11 = node10.isQualifiedName();
        com.google.javascript.rhino.Node node15 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean16 = node15.isContinue();
        com.google.javascript.rhino.Node node20 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean21 = node20.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType22 = null;
        node20.setJSType(jSType22);
        com.google.javascript.rhino.Node node27 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean28 = node27.isContinue();
        com.google.javascript.rhino.Node node29 = node20.clonePropsFrom(node27);
        node15.addChildrenToBack(node20);
        boolean boolean31 = node15.isLocalResultCall();
        com.google.javascript.rhino.Node node32 = node10.copyInformationFromForTree(node15);
        boolean boolean33 = node15.isParamList();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node(38, node15, 51, 38);
        int int37 = node36.getSideEffectFlags();
        com.google.javascript.rhino.Node node41 = new com.google.javascript.rhino.Node(12, 1, 40);
        com.google.javascript.rhino.Node node42 = node36.copyInformationFrom(node41);
        boolean boolean43 = node36.isNoSideEffectsCall();
        node3.addChildToBack(node36);
        node36.setType((int) ' ');
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test01998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01998");
        com.google.javascript.rhino.Node node3 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean4 = node3.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType5 = null;
        node3.setJSType(jSType5);
        int int7 = node3.getSourceOffset();
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean17 = node16.isQualifiedName();
        com.google.javascript.rhino.Node node21 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean22 = node21.isContinue();
        com.google.javascript.rhino.Node node26 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean27 = node26.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType28 = null;
        node26.setJSType(jSType28);
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean34 = node33.isContinue();
        com.google.javascript.rhino.Node node35 = node26.clonePropsFrom(node33);
        node21.addChildrenToBack(node26);
        boolean boolean37 = node21.isLocalResultCall();
        com.google.javascript.rhino.Node node38 = node16.copyInformationFromForTree(node21);
        node21.setSourceEncodedPosition((int) (short) -1);
        com.google.javascript.rhino.Node node41 = node12.clonePropsFrom(node21);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean46 = node45.isLabelName();
        boolean boolean47 = node45.isTrue();
        com.google.javascript.rhino.Node node51 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean52 = node51.isContinue();
        com.google.javascript.rhino.Node node56 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean57 = node56.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType58 = null;
        node56.setJSType(jSType58);
        com.google.javascript.rhino.Node node63 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean64 = node63.isContinue();
        com.google.javascript.rhino.Node node65 = node56.clonePropsFrom(node63);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node((int) (byte) 0, node21, node45, node51, node65, 10, (int) (byte) -1);
        node21.putIntProp((int) (short) 0, (int) (byte) -1);
        com.google.javascript.rhino.Node node72 = node3.useSourceInfoFrom(node21);
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean77 = node76.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType78 = null;
        node76.setJSType(jSType78);
        com.google.javascript.rhino.Node node83 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean84 = node83.isContinue();
        com.google.javascript.rhino.Node node85 = node76.clonePropsFrom(node83);
        com.google.javascript.rhino.Node node89 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean90 = node89.isContinue();
        boolean boolean91 = node89.isString();
        boolean boolean92 = node89.isStringKey();
        com.google.javascript.rhino.Node node93 = node76.copyInformationFrom(node89);
        com.google.javascript.rhino.Node node94 = node93.getNext();
        com.google.javascript.rhino.Node node95 = node3.useSourceInfoIfMissingFrom(node93);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder96 = node3.getJsDocBuilderForNode();
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder97 = node3.getJsDocBuilderForNode();
        boolean boolean98 = node3.isBlock();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(node93);
        org.junit.Assert.assertNull(node94);
        org.junit.Assert.assertNotNull(node95);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder96);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test01999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01999");
        com.google.javascript.rhino.Node node4 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean5 = node4.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType6 = null;
        node4.setJSType(jSType6);
        com.google.javascript.rhino.Node node11 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean12 = node11.isContinue();
        com.google.javascript.rhino.Node node13 = node4.clonePropsFrom(node11);
        boolean boolean14 = node13.isQuotedString();
        com.google.javascript.rhino.Node node18 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean19 = node18.isLabelName();
        boolean boolean20 = node18.isDec();
        boolean boolean21 = node18.isScript();
        com.google.javascript.rhino.Node node25 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(0, node13, node18, node25, 0, (int) (short) 0);
        boolean boolean29 = node25.isLabel();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newString("Unknown class name");
        boolean boolean32 = node31.isBreak();
        com.google.javascript.rhino.Node node36 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean37 = node36.isContinue();
        boolean boolean38 = node36.isBlock();
        node36.removeProp(12);
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean46 = node45.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType47 = null;
        node45.setJSType(jSType47);
        com.google.javascript.rhino.Node node52 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean53 = node52.isContinue();
        com.google.javascript.rhino.Node node54 = node45.clonePropsFrom(node52);
        boolean boolean55 = node54.isQuotedString();
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean60 = node59.isLabelName();
        boolean boolean61 = node59.isDec();
        boolean boolean62 = node59.isScript();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        com.google.javascript.rhino.Node node69 = new com.google.javascript.rhino.Node(0, node54, node59, node66, 0, (int) (short) 0);
        boolean boolean70 = node54.isTrue();
        com.google.javascript.rhino.Node node71 = node36.useSourceInfoIfMissingFromForTree(node54);
        int int72 = node54.getSourcePosition();
        com.google.javascript.rhino.Node node73 = node31.srcref(node54);
        com.google.javascript.rhino.Node node74 = node25.clonePropsFrom(node73);
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean79 = node78.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType80 = null;
        node78.setJSType(jSType80);
        com.google.javascript.rhino.Node node85 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean86 = node85.isContinue();
        com.google.javascript.rhino.Node node87 = node78.clonePropsFrom(node85);
        com.google.javascript.rhino.Node node91 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean92 = node91.isContinue();
        boolean boolean93 = node91.isString();
        boolean boolean94 = node91.isStringKey();
        com.google.javascript.rhino.Node node95 = node78.copyInformationFrom(node91);
        boolean boolean96 = node78.isIn();
        int int97 = node25.getIndexOfChild(node78);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder98 = node25.getJsDocBuilderForNode();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable99 = node25.siblings();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(node73);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(node87);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(node95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + (-1) + "'", int97 == (-1));
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder98);
        org.junit.Assert.assertNotNull(nodeIterable99);
    }

    @Test
    public void test02000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test02000");
        java.io.Serializable[] serializableArray16 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList17 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray16);
        boolean boolean18 = serializableList17.isEmpty();
        boolean boolean20 = serializableList17.contains((java.lang.Object) 52);
        int int22 = serializableList17.indexOf((java.lang.Object) (-1L));
        java.util.Iterator<java.io.Serializable> serializableItor23 = serializableList17.iterator();
        java.util.List<java.io.Serializable> serializableList26 = serializableList17.subList((int) (short) 10, 16);
        boolean boolean28 = serializableList26.equals((java.lang.Object) 10.0d);
        java.io.Serializable serializable30 = serializableList26.get(0);
        java.lang.Object[] objArray31 = serializableList26.toArray();
        com.google.javascript.rhino.Node node35 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean36 = node35.isLabelName();
        com.google.javascript.rhino.jstype.JSType jSType37 = null;
        node35.setJSType(jSType37);
        com.google.javascript.rhino.Node node42 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean43 = node42.isContinue();
        com.google.javascript.rhino.Node node44 = node35.clonePropsFrom(node42);
        com.google.javascript.rhino.Node node48 = new com.google.javascript.rhino.Node((int) (short) 0, (int) (short) 1, (int) (short) -1);
        boolean boolean49 = node48.isContinue();
        boolean boolean50 = node48.isString();
        com.google.javascript.rhino.Node node51 = node35.useSourceInfoFromForTree(node48);
        boolean boolean52 = serializableList26.contains((java.lang.Object) node51);
        java.io.Serializable[] serializableArray69 = new java.io.Serializable[] { 0.0d, (short) -1, 100.0d, 30 };
        com.google.common.collect.ImmutableList<java.io.Serializable> serializableList70 = com.google.common.collect.ImmutableList.of((java.io.Serializable) 0.0d, (java.io.Serializable) 10.0f, (java.io.Serializable) (short) 100, (java.io.Serializable) "hi!", (java.io.Serializable) 1.0d, (java.io.Serializable) 0.0d, (java.io.Serializable) 0, (java.io.Serializable) 'a', (java.io.Serializable) (byte) 0, (java.io.Serializable) 1L, (java.io.Serializable) 1.0d, (java.io.Serializable) (byte) 100, serializableArray69);
        boolean boolean71 = serializableList70.isEmpty();
        boolean boolean73 = serializableList70.contains((java.lang.Object) 52);
        com.google.common.collect.UnmodifiableListIterator<java.io.Serializable> serializableItor74 = serializableList70.listIterator();
        java.util.Spliterator<java.io.Serializable> serializableSpliterator75 = serializableList70.spliterator();
        com.google.common.collect.UnmodifiableListIterator<java.io.Serializable> serializableItor77 = serializableList70.listIterator((int) (short) 10);
        com.google.javascript.rhino.InputId inputId79 = new com.google.javascript.rhino.InputId("JSDocInfo");
        int int80 = serializableList70.lastIndexOf((java.lang.Object) inputId79);
        boolean boolean81 = serializableList26.containsAll((java.util.Collection<java.io.Serializable>) serializableList70);
        java.util.ListIterator<java.io.Serializable> serializableItor82 = serializableList26.listIterator();
        org.junit.Assert.assertNotNull(serializableArray16);
        org.junit.Assert.assertNotNull(serializableList17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(serializableItor23);
        org.junit.Assert.assertNotNull(serializableList26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + serializable30 + "' != '" + 1.0d + "'", serializable30, 1.0d);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[1.0, 100, 0.0, -1, 100.0, 30]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(serializableArray69);
        org.junit.Assert.assertNotNull(serializableList70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(serializableItor74);
        org.junit.Assert.assertNotNull(serializableSpliterator75);
        org.junit.Assert.assertNotNull(serializableItor77);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(serializableItor82);
    }
}


import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest28 {

    public static boolean debug = false;

    @Test
    public void test14001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14001");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        java.lang.String str3 = localDate2.toString();
        org.joda.time.LocalDate localDate5 = localDate2.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology6 = localDate5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now(chronology6);
        org.joda.time.DateTimeField dateTimeField10 = chronology6.secondOfMinute();
        java.lang.String str11 = chronology6.toString();
        org.joda.time.DateTimeField dateTimeField12 = chronology6.year();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (short) 1, chronology14);
        java.lang.String str16 = localDate15.toString();
        org.joda.time.LocalDate localDate18 = localDate15.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology19 = localDate18.getChronology();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) (short) 1, chronology21);
        int int23 = localDate22.getDayOfYear();
        org.joda.time.LocalDate.Property property24 = localDate22.weekOfWeekyear();
        org.joda.time.LocalDate localDate25 = property24.roundHalfEvenCopy();
        boolean boolean26 = localDate18.isAfter((org.joda.time.ReadablePartial) localDate25);
        org.joda.time.DateTime dateTime27 = localDate18.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate29 = localDate18.plusDays(649);
        java.util.Locale locale34 = new java.util.Locale("java.util.GregorianCalendar[time=1645455397233,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=53658462,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=56,SECOND=37,MILLISECOND=233,ZONE_OFFSET=0,DST_OFFSET=0]", "2022-02-21T14:56:45.433Z", "Mon Feb 21 14:54:54 UTC 2022");
        java.lang.String str35 = dateTimeField12.getAsText((org.joda.time.ReadablePartial) localDate29, 170, locale34);
        java.lang.String str36 = locale34.toLanguageTag();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01" + "'", str3, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ISOChronology[UTC]" + "'", str11, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01" + "'", str16, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertEquals(locale34.toString(), "java.util.gregoriancalendar[time=1645455397233,arefieldsset=true,areallfieldsset=true,lenient=true,zone=java.util.simpletimezone[id=etc/utc,offset=0,dstsavings=3600000,usedaylight=false,startyear=0,startmode=0,startmonth=0,startday=0,startdayofweek=0,starttime=0,starttimemode=0,endmode=0,endmonth=0,endday=0,enddayofweek=0,endtime=0,endtimemode=0],firstdayofweek=53658462,minimaldaysinfirstweek=1,era=1,year=2022,month=1,week_of_year=8,week_of_month=4,day_of_month=21,day_of_year=52,day_of_week=2,day_of_week_in_month=3,am_pm=1,hour=2,hour_of_day=14,minute=56,second=37,millisecond=233,zone_offset=0,dst_offset=0]_2022-02-21T14:56:45.433Z_Mon Feb 21 14:54:54 UTC 2022");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "170" + "'", str35, "170");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "und" + "'", str36, "und");
    }

    @Test
    public void test14002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14002");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = localDate2.toDateMidnight(dateTimeZone7);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.yearOfEra();
        int int10 = dateMidnight8.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property11 = dateMidnight8.year();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight8.withMillis((long) ' ');
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plusDays(854);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight13.plusWeeks(122);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateMidnight17);
    }

    @Test
    public void test14003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14003");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = localDate2.toDateMidnight(dateTimeZone7);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.yearOfEra();
        int int10 = dateMidnight8.getMinuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        boolean boolean12 = dateMidnight8.isSupported(dateTimeFieldType11);
        org.joda.time.DateMidnight.Property property13 = dateMidnight8.weekOfWeekyear();
        java.util.Locale locale14 = java.util.Locale.CANADA;
        int int15 = property13.getMaximumShortTextLength(locale14);
        java.util.Locale locale16 = java.util.Locale.UK;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(chronology17);
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime18.copy();
        mutableDateTime18.addMinutes(0);
        java.lang.String str22 = mutableDateTime18.toString();
        int int23 = mutableDateTime18.getYearOfEra();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime18.minuteOfDay();
        java.util.Locale locale27 = new java.util.Locale("", "hi!");
        java.util.Locale locale28 = java.util.Locale.ITALY;
        java.lang.String str29 = locale28.getDisplayLanguage();
        java.lang.String str30 = locale27.getDisplayCountry(locale28);
        java.lang.String str31 = property24.getAsText(locale27);
        java.lang.String str32 = locale16.getDisplayCountry(locale27);
        int int33 = property13.getMaximumTextLength(locale27);
        org.joda.time.DateMidnight dateMidnight35 = property13.addWrapFieldToCopy(53846836);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = null;
        java.lang.String str37 = dateMidnight35.toString(dateTimeFormatter36);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_GB");
        org.junit.Assert.assertNotNull(mutableDateTime19);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-22T05:56:20.909+14:53:39.988" + "'", str22, "2022-02-22T05:56:20.909+14:53:39.988");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertEquals(locale27.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\u30a4\u30bf\u30ea\u30a2\u8a9e" + "'", str29, "\u30a4\u30bf\u30ea\u30a2\u8a9e");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "HI!" + "'", str30, "HI!");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "356" + "'", str31, "356");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "United Kingdom" + "'", str32, "United Kingdom");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(dateMidnight35);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1970-01-15T00:00:00.000+14:53:39.988" + "'", str37, "1970-01-15T00:00:00.000+14:53:39.988");
    }

    @Test
    public void test14004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14004");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime9.copy();
        mutableDateTime9.addMinutes(0);
        java.lang.String str13 = mutableDateTime9.toString();
        int int14 = mutableDateTime9.getYearOfEra();
        org.joda.time.Chronology chronology15 = mutableDateTime9.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.eras();
        org.joda.time.LocalTime localTime17 = org.joda.time.LocalTime.now(chronology15);
        org.joda.time.DateTimeField dateTimeField18 = chronology15.yearOfEra();
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime(1264L, chronology15);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((long) (byte) 100, chronology21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(chronology23);
        org.joda.time.MutableDateTime mutableDateTime25 = mutableDateTime24.copy();
        org.joda.time.Duration duration26 = period22.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime25);
        org.joda.time.Period period28 = period22.plusDays((int) (byte) 10);
        int int29 = period28.getHours();
        org.joda.time.Period period31 = period28.plusMonths(2);
        org.joda.time.Period period33 = period31.withSeconds(53);
        org.joda.time.Period period34 = period31.normalizedStandard();
        int[] intArray37 = chronology15.get((org.joda.time.ReadablePeriod) period31, 1000L, (-27422464L));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime(0, 54028993, 53967965, 54064698, 54092630, 21377705, 295, chronology15);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54064698 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime10);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022-02-22T05:56:20.937+14:53:39.988" + "'", str13, "2022-02-22T05:56:20.937+14:53:39.988");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0, 0, 0, 0, -7, -37, -3, -464]");
    }

    @Test
    public void test14005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14005");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setFirstDayOfWeek(53620623);
        org.joda.time.TimeOfDay timeOfDay3 = org.joda.time.TimeOfDay.fromCalendarFields(calendar0);
        java.util.Calendar.Builder builder4 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder6 = builder4.setLenient(false);
        java.util.Locale locale7 = java.util.Locale.KOREA;
        java.util.Calendar.Builder builder8 = builder4.setLocale(locale7);
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property10 = localTime9.minuteOfHour();
        org.joda.time.LocalTime localTime12 = localTime9.withMillisOfSecond(904);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = localTime9.toDateTimeToday(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.plusMonths(10);
        org.joda.time.DateTime.Property property17 = dateTime14.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField18 = property17.getField();
        java.util.Locale locale19 = null;
        int int20 = dateTimeField18.getMaximumShortTextLength(locale19);
        java.util.Locale locale21 = java.util.Locale.ITALIAN;
        int int22 = dateTimeField18.getMaximumShortTextLength(locale21);
        long long24 = dateTimeField18.remainder((long) 53636547);
        java.util.Locale locale26 = java.util.Locale.US;
        java.lang.String str27 = dateTimeField18.getAsText(53637942, locale26);
        java.util.Calendar.Builder builder28 = builder8.setLocale(locale26);
        java.util.Calendar calendar29 = builder28.build();
        int int30 = calendar0.compareTo(calendar29);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645455760960,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=53620623,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=40,MILLISECOND=960,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 36535L + "'", long24 == 36535L);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "53637942" + "'", str27, "53637942");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(calendar29);
// flaky:         org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
    }

    @Test
    public void test14006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14006");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean2 = localTime0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime4 = localTime0.withFields((org.joda.time.ReadablePartial) localTime3);
        java.lang.String str5 = localTime0.toString();
        org.joda.time.LocalTime localTime7 = localTime0.minusHours(773);
        org.joda.time.LocalTime localTime9 = localTime0.withSecondOfMinute(56);
        org.joda.time.LocalTime localTime11 = localTime9.minusHours(53645);
        java.lang.String str12 = localTime11.toString();
        org.joda.time.Period period14 = org.joda.time.Period.days(53666646);
        org.joda.time.Period period16 = period14.plusMonths(37);
        org.joda.time.LocalTime localTime17 = localTime11.plus((org.joda.time.ReadablePeriod) period16);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localTime4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "05:56:20.966" + "'", str5, "05:56:20.966");
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "00:56:56.966" + "'", str12, "00:56:56.966");
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(localTime17);
    }

    @Test
    public void test14007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14007");
        java.util.Locale locale2 = new java.util.Locale("", "hi!");
        java.lang.String str3 = locale2.getCountry();
        java.util.Locale locale4 = java.util.Locale.FRENCH;
        boolean boolean5 = locale4.hasExtensions();
        java.lang.String str6 = locale2.getDisplayVariant(locale4);
        java.util.Calendar.Builder builder7 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder9 = builder7.setLenient(false);
        java.util.Calendar.Builder builder14 = builder7.setTimeOfDay((int) ' ', 53617440, 3, 53617649);
        java.util.Calendar.Builder builder19 = builder14.setTimeOfDay(53626727, 0, 53628444, (int) ' ');
        java.util.Calendar.Builder builder21 = builder14.setLenient(false);
        java.util.Calendar.Builder builder22 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder24 = builder22.setLenient(false);
        java.util.TimeZone timeZone26 = java.util.TimeZone.getTimeZone("2022-02-21T14:54:05.059Z");
        java.util.Calendar.Builder builder27 = builder24.setTimeZone(timeZone26);
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        java.util.Calendar.Builder builder29 = builder27.setTimeZone(timeZone28);
        java.util.Calendar.Builder builder30 = builder21.setTimeZone(timeZone28);
        java.util.Locale locale34 = new java.util.Locale("hi!", "Years", "1970-01-01");
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(timeZone28, locale34);
        java.lang.String str36 = locale2.getDisplayLanguage(locale34);
        java.util.Set<java.lang.String> strSet37 = locale2.getUnicodeLocaleKeys();
        java.lang.Object obj38 = locale2.clone();
        org.junit.Assert.assertEquals(locale2.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "HI!" + "'", str3, "HI!");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertEquals(locale34.toString(), "hi!_YEARS_1970-01-01");
        org.junit.Assert.assertNotNull(calendar35);
// flaky:         org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=1645455760991,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=40,MILLISECOND=991,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "_HI!");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "_HI!");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "_HI!");
    }

    @Test
    public void test14008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14008");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property2 = localTime1.minuteOfHour();
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone4 = dateMidnight3.getZone();
        long long5 = property2.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight3);
        org.joda.time.DateMidnight.Property property6 = dateMidnight3.dayOfWeek();
        org.joda.time.DateMidnight.Property property7 = dateMidnight3.monthOfYear();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime9.copy();
        mutableDateTime9.addMinutes(0);
        java.lang.String str13 = mutableDateTime9.toString();
        int int14 = mutableDateTime9.getYearOfEra();
        org.joda.time.Chronology chronology15 = mutableDateTime9.getChronology();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight3.withChronology(chronology15);
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) 799, chronology15);
        org.joda.time.DateTimeField dateTimeField18 = chronology15.year();
        // The following exception was thrown during execution in test generation
        try {
            long long21 = dateTimeField18.set(32441870357699327L, "java.util.GregorianCalendar[time=1692015019368965000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=53620623,minimalDaysInFirstWeek=1,ERA=1,YEAR=53619791,MONTH=6,WEEK_OF_YEAR=26,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=182,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=56,SECOND=5,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"java.util.GregorianCalendar[time=1692015019368965000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=53620623,minimalDaysInFirstWeek=1,ERA=1,YEAR=53619791,MONTH=6,WEEK_OF_YEAR=26,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=182,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=56,SECOND=5,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]\" for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-27423549L) + "'", long5 == (-27423549L));
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime10);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022-02-22T05:56:20.991+14:53:39.988" + "'", str13, "2022-02-22T05:56:20.991+14:53:39.988");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test14009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14009");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableDuration0, readableInstant1, periodType2);
        mutablePeriod3.addYears((int) (byte) 0);
        int int6 = mutablePeriod3.getMonths();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(readableDuration7, readableInstant8, periodType9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        mutablePeriod10.add(readableDuration11);
        mutablePeriod10.addMonths((int) '#');
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) (short) 1, chronology16);
        int int18 = localDate17.getDayOfYear();
        org.joda.time.LocalTime localTime19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = localDate17.toDateTime(localTime19, dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = localDate17.toDateMidnight(dateTimeZone22);
        org.joda.time.DateMidnight.Property property24 = dateMidnight23.yearOfEra();
        int int25 = dateMidnight23.getMinuteOfHour();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period((long) (byte) 100, chronology27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(chronology29);
        org.joda.time.MutableDateTime mutableDateTime31 = mutableDateTime30.copy();
        org.joda.time.Duration duration32 = period28.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime31);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight23.plus((org.joda.time.ReadableDuration) duration32);
        mutablePeriod10.add((org.joda.time.ReadableDuration) duration32);
        mutablePeriod3.setPeriod((org.joda.time.ReadableDuration) duration32);
        org.joda.time.MutablePeriod mutablePeriod36 = mutablePeriod3.copy();
        org.joda.time.PeriodType periodType37 = mutablePeriod36.getPeriodType();
        mutablePeriod36.addSeconds(773);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((long) (short) 1, chronology43);
        java.lang.String str45 = localDate44.toString();
        org.joda.time.LocalDate localDate47 = localDate44.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology48 = localDate47.getChronology();
        mutablePeriod36.setPeriod((long) 15, 1L, chronology48);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate((long) (short) 1, chronology54);
        java.lang.String str56 = localDate55.toString();
        org.joda.time.LocalDate localDate58 = localDate55.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology59 = localDate58.getChronology();
        org.joda.time.YearMonthDay yearMonthDay60 = new org.joda.time.YearMonthDay((long) (short) 1, chronology59);
        mutablePeriod36.setPeriod((long) 53626705, (long) 339, chronology59);
        java.lang.String str62 = chronology59.toString();
        org.joda.time.DateTimeField dateTimeField63 = chronology59.clockhourOfHalfday();
        long long66 = dateTimeField63.add(1699891135747200409L, 192);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(mutablePeriod36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1970-01-01" + "'", str45, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "1970-01-01" + "'", str56, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "ISOChronology[UTC]" + "'", str62, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1699891136438400409L + "'", long66 == 1699891136438400409L);
    }

    @Test
    public void test14010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14010");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime1 = timeOfDay0.toDateTimeToday();
        org.joda.time.DateTime.Property property2 = dateTime1.dayOfWeek();
        org.joda.time.DurationField durationField3 = property2.getDurationField();
        boolean boolean4 = durationField3.isPrecise();
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test14011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14011");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod1 = org.joda.time.MutablePeriod.parse("2022-02-21T14:56:42.932Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-21T14:56:42.932Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14012");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setFirstDayOfWeek(53620623);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        java.util.Date date4 = calendar0.getTime();
        date4.setYear(736);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.fromDateFields(date4);
        int int8 = localDateTime7.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withWeekyear((-4477679));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime12 = localDateTime7.withCenturyOfEra(53778323);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53778323 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645455761060,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=53620623,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=41,MILLISECOND=60,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Sun Feb 21 15:02:41 GMT 2636");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 26 + "'", int8 == 26);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test14013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14013");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) 2);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.millisOfSecond();
        int int3 = localTime1.get(dateTimeFieldType2);
        org.joda.time.LocalTime.Property property4 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime5 = property4.roundHalfFloorCopy();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 100, chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(chronology9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime10.copy();
        org.joda.time.Duration duration12 = period8.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime11);
        int int13 = period8.size();
        org.joda.time.Period period15 = period8.plusMinutes(53619248);
        org.joda.time.Hours hours16 = period15.toStandardHours();
        org.joda.time.LocalTime localTime17 = localTime5.minus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.LocalTime localTime19 = localTime17.minusHours(683);
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.days();
        org.joda.time.PeriodType periodType23 = periodType22.withMonthsRemoved();
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.time();
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime((long) 53619708);
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.hours();
        mutableDateTime26.add(durationFieldType27, (int) (byte) 0);
        int int30 = periodType24.indexOf(durationFieldType27);
        boolean boolean31 = periodType22.isSupported(durationFieldType27);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(chronology32);
        org.joda.time.MutableDateTime mutableDateTime34 = mutableDateTime33.copy();
        mutableDateTime33.addMinutes(0);
        java.lang.String str37 = mutableDateTime33.toString();
        int int38 = mutableDateTime33.getYearOfEra();
        org.joda.time.Chronology chronology39 = mutableDateTime33.getChronology();
        org.joda.time.DurationField durationField40 = chronology39.eras();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((long) 53644667, (long) (byte) 100, periodType22, chronology39);
        org.joda.time.LocalTime localTime42 = localTime19.plus((org.joda.time.ReadablePeriod) mutablePeriod41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) (short) 1, chronology44);
        java.lang.String str46 = localDate45.toString();
        org.joda.time.LocalDate localDate48 = localDate45.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology49 = localDate48.getChronology();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate((long) (short) 1, chronology51);
        int int53 = localDate52.getDayOfYear();
        org.joda.time.LocalDate.Property property54 = localDate52.weekOfWeekyear();
        org.joda.time.LocalDate localDate55 = property54.roundHalfEvenCopy();
        boolean boolean56 = localDate48.isAfter((org.joda.time.ReadablePartial) localDate55);
        org.joda.time.LocalDate.Property property57 = localDate48.yearOfEra();
        org.joda.time.LocalDate localDate59 = localDate48.plusMonths(342);
        org.joda.time.LocalDate localDate61 = localDate59.minusWeeks(53696579);
        org.joda.time.LocalDate.Property property62 = localDate59.dayOfYear();
        org.joda.time.LocalDate localDate63 = property62.withMaximumValue();
        org.joda.time.LocalDate localDate65 = property62.addToCopy(53857978);
        org.joda.time.PeriodType periodType66 = org.joda.time.PeriodType.days();
        org.joda.time.PeriodType periodType67 = periodType66.withMonthsRemoved();
        org.joda.time.PeriodType periodType68 = periodType67.withMonthsRemoved();
        org.joda.time.PeriodType periodType69 = periodType67.withMonthsRemoved();
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod(periodType69);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period71 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime19, (org.joda.time.ReadablePartial) localDate65, periodType69);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(hours16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(mutableDateTime34);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2022-02-22T05:56:21.061+14:53:39.988" + "'", str37, "2022-02-22T05:56:21.061+14:53:39.988");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2022 + "'", int38 == 2022);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1970-01-01" + "'", str46, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertNotNull(periodType68);
        org.junit.Assert.assertNotNull(periodType69);
    }

    @Test
    public void test14014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14014");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period((long) (byte) 100, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(chronology3);
        org.joda.time.MutableDateTime mutableDateTime5 = mutableDateTime4.copy();
        org.joda.time.Duration duration6 = period2.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime5);
        org.joda.time.Period period8 = period2.plusDays((int) (byte) 10);
        int int9 = period8.getHours();
        org.joda.time.Period period11 = period8.plusMonths(2);
        org.joda.time.Period period13 = period8.minusMonths(12);
        org.joda.time.Period period15 = period8.withYears(2057);
        org.joda.time.Period period17 = period15.withWeeks(185);
        org.joda.time.Period period19 = period15.plusHours(6);
        org.joda.time.Period period21 = period19.plusDays(133);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
    }

    @Test
    public void test14015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14015");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = mutableDateTime5.copy();
        mutableDateTime5.addMinutes(0);
        mutableDateTime5.setSecondOfDay(21);
        org.joda.time.Chronology chronology11 = null;
        mutableDateTime5.setChronology(chronology11);
        mutableDateTime5.setMinuteOfHour((int) (short) 0);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property16 = localTime15.minuteOfHour();
        org.joda.time.LocalTime localTime18 = localTime15.withMillisOfSecond(904);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = localTime15.toDateTimeToday(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.plusMonths(10);
        org.joda.time.DateTime.Property property23 = dateTime20.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField24 = property23.getField();
        java.util.Locale locale25 = null;
        int int26 = dateTimeField24.getMaximumShortTextLength(locale25);
        java.util.Locale locale27 = java.util.Locale.ITALIAN;
        int int28 = dateTimeField24.getMaximumShortTextLength(locale27);
        mutableDateTime5.setRounding(dateTimeField24);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(readableDuration30, readableInstant31, periodType32);
        mutablePeriod33.addYears((int) (byte) 0);
        int int36 = mutablePeriod33.getMonths();
        mutablePeriod33.addMinutes((int) (byte) 0);
        mutablePeriod33.addMonths((int) 'x');
        mutableDateTime5.add((org.joda.time.ReadablePeriod) mutablePeriod33);
        org.joda.time.Chronology chronology42 = mutableDateTime5.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime43 = new org.joda.time.LocalTime(505, 53780925, 585, 53986542, chronology42);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 505 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "it");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(chronology42);
    }

    @Test
    public void test14016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14016");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone1 = dateMidnight0.getZone();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) (short) 1, chronology3);
        java.lang.String str5 = localDate4.toString();
        org.joda.time.LocalDate localDate7 = localDate4.withYearOfEra((int) (byte) 100);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight0.withFields((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.dayOfYear();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(readableDuration10, readableInstant11, periodType12);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutablePeriod13.add(readableDuration14);
        mutablePeriod13.addMonths((int) '#');
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) (short) 1, chronology19);
        int int21 = localDate20.getDayOfYear();
        org.joda.time.LocalTime localTime22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = localDate20.toDateTime(localTime22, dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = localDate20.toDateMidnight(dateTimeZone25);
        org.joda.time.DateMidnight.Property property27 = dateMidnight26.yearOfEra();
        int int28 = dateMidnight26.getMinuteOfHour();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) (byte) 100, chronology30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(chronology32);
        org.joda.time.MutableDateTime mutableDateTime34 = mutableDateTime33.copy();
        org.joda.time.Duration duration35 = period31.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime34);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight26.plus((org.joda.time.ReadableDuration) duration35);
        mutablePeriod13.add((org.joda.time.ReadableDuration) duration35);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight8.plus((org.joda.time.ReadableDuration) duration35);
        org.joda.time.DateMidnight.Property property39 = dateMidnight38.era();
        org.joda.time.DateMidnight dateMidnight40 = property39.withMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateMidnight40);
    }

    @Test
    public void test14017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14017");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((-1325408661792L), dateTimeZone1);
    }

    @Test
    public void test14018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14018");
        org.joda.time.Period period1 = org.joda.time.Period.seconds(54080402);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test14019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14019");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period((long) (byte) 100, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(chronology3);
        org.joda.time.MutableDateTime mutableDateTime5 = mutableDateTime4.copy();
        org.joda.time.Duration duration6 = period2.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime5);
        org.joda.time.Seconds seconds7 = period2.toStandardSeconds();
        org.joda.time.Period period9 = period2.plusYears(0);
        org.joda.time.Period period11 = period2.withHours(53617440);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(readableDuration12, readableInstant13, periodType14);
        org.joda.time.ReadableDuration readableDuration16 = null;
        mutablePeriod15.add(readableDuration16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(chronology18);
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime19.copy();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        mutableDateTime20.setZone(dateTimeZone21);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime20.minuteOfDay();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTime dateTime27 = dateTime24.withFieldAdded(durationFieldType25, (int) (byte) 0);
        mutableDateTime20.add(durationFieldType25, 8);
        boolean boolean30 = mutablePeriod15.isSupported(durationFieldType25);
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.weeks();
        int int32 = mutablePeriod15.get(durationFieldType31);
        org.joda.time.Period period34 = period2.withField(durationFieldType31, 517);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((long) (byte) 100, chronology36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(chronology38);
        org.joda.time.MutableDateTime mutableDateTime40 = mutableDateTime39.copy();
        org.joda.time.Duration duration41 = period37.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime(chronology42);
        org.joda.time.MutableDateTime mutableDateTime44 = mutableDateTime43.copy();
        org.joda.time.PeriodType periodType45 = org.joda.time.PeriodType.years();
        java.lang.String str46 = periodType45.getName();
        org.joda.time.PeriodType periodType47 = periodType45.withMonthsRemoved();
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime40, (org.joda.time.ReadableInstant) mutableDateTime44, periodType45);
        org.joda.time.MutableDateTime mutableDateTime49 = mutableDateTime40.toMutableDateTime();
        mutableDateTime49.setMillisOfDay(8);
        mutableDateTime49.add((long) 277);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate((long) (short) 1, chronology55);
        int int57 = localDate56.getDayOfYear();
        org.joda.time.LocalTime localTime58 = null;
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateTime dateTime60 = localDate56.toDateTime(localTime58, dateTimeZone59);
        org.joda.time.DateTime dateTime62 = dateTime60.plusYears((int) (short) 10);
        org.joda.time.DateTime dateTime64 = dateTime60.withYear(53639477);
        org.joda.time.DateTime dateTime66 = dateTime64.minusWeeks(53636547);
        org.joda.time.DateTime dateTime67 = dateTime64.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime68 = dateTime64.toMutableDateTimeISO();
        mutableDateTime49.setMillis((org.joda.time.ReadableInstant) mutableDateTime68);
        boolean boolean71 = mutableDateTime68.isBefore((long) 53813156);
        org.joda.time.Duration duration72 = period34.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime68);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Years" + "'", str46, "Years");
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(mutableDateTime68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(duration72);
    }

    @Test
    public void test14020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14020");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-21T14:54:05.059Z");
        timeZone1.setID("1970-01-01");
        boolean boolean4 = timeZone1.observesDaylightTime();
        boolean boolean5 = timeZone1.observesDaylightTime();
        java.util.TimeZone.setDefault(timeZone1);
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone1);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.fromCalendarFields(calendar7);
        java.util.Date date9 = calendar7.getTime();
        java.time.Instant instant10 = date9.toInstant();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=1645455761236,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"1970-01-01\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=41,MILLISECOND=236,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Mon Feb 21 15:02:41 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(instant10);
    }

    @Test
    public void test14021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14021");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        java.lang.String str3 = localDate2.toString();
        org.joda.time.LocalDate localDate5 = localDate2.withYearOfEra((int) (byte) 100);
        int int6 = localDate2.getDayOfYear();
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) 53619708);
        org.joda.time.DateTime dateTime9 = localDate2.toDateTime((org.joda.time.ReadableInstant) mutableDateTime8);
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone11 = dateMidnight10.getZone();
        boolean boolean13 = dateTimeZone11.isStandardOffset((long) 'a');
        org.joda.time.LocalDate localDate14 = org.joda.time.LocalDate.now(dateTimeZone11);
        java.lang.String str16 = dateTimeZone11.getNameKey((long) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime17 = mutableDateTime8.toMutableDateTime(dateTimeZone11);
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay(dateTimeZone11);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01" + "'", str3, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(localDate14);
// flaky:         org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
    }

    @Test
    public void test14022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14022");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = localDate2.toDateMidnight(dateTimeZone7);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.yearOfEra();
        int int10 = dateMidnight8.getMinuteOfHour();
        org.joda.time.Interval interval11 = dateMidnight8.toInterval();
        org.joda.time.MutableDateTime mutableDateTime12 = dateMidnight8.toMutableDateTime();
        mutableDateTime12.addWeeks(53669883);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.era();
        java.lang.String str16 = dateTimeFieldType15.toString();
        int int17 = mutableDateTime12.get(dateTimeFieldType15);
        org.joda.time.DateTime dateTime18 = mutableDateTime12.toDateTime();
        mutableDateTime12.setTime(0L);
        org.joda.time.MutableDateTime mutableDateTime21 = mutableDateTime12.copy();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "era" + "'", str16, "era");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(mutableDateTime21);
    }

    @Test
    public void test14023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14023");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) (short) 1, chronology2);
        java.lang.String str4 = localDate3.toString();
        org.joda.time.LocalDate localDate6 = localDate3.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology7 = localDate6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.yearOfEra();
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType0.getField(chronology7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) (byte) 100, chronology11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.MutableDateTime mutableDateTime15 = mutableDateTime14.copy();
        org.joda.time.Duration duration16 = period12.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime15);
        org.joda.time.Period period18 = period12.plusDays((int) (byte) 10);
        int int19 = period18.getHours();
        org.joda.time.Period period21 = period18.plusMonths(2);
        org.joda.time.Period period23 = period18.minusMonths(12);
        org.joda.time.Period period25 = period18.withYears(2057);
        int[] intArray27 = chronology7.get((org.joda.time.ReadablePeriod) period25, 259200000L);
        org.joda.time.DurationField durationField28 = chronology7.weeks();
        org.joda.time.DateTimeField dateTimeField29 = chronology7.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField30 = chronology7.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            long long36 = chronology7.getDateTimeMillis(32441870358126100L, 53896604, 742, 332, 43);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53896604 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
    }

    @Test
    public void test14024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14024");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        int int1 = localTime0.getHourOfDay();
        org.joda.time.LocalTime localTime3 = localTime0.plusHours((int) (short) 1);
        org.joda.time.DateTime dateTime4 = localTime0.toDateTimeToday();
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime4);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight5.withDurationAdded((long) 53643546, 348);
        int int9 = dateMidnight8.getEra();
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test14025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14025");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = localDate2.toDateMidnight(dateTimeZone7);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.yearOfEra();
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone11 = dateMidnight10.getZone();
        org.joda.time.MutableDateTime mutableDateTime12 = dateMidnight8.toMutableDateTime(dateTimeZone11);
        mutableDateTime12.addMillis(54);
        mutableDateTime12.setYear(22);
        mutableDateTime12.setMillis(53644152870L);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime12.weekyear();
        org.joda.time.MutableDateTime mutableDateTime21 = property19.add(886);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime21);
    }

    @Test
    public void test14026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14026");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) (short) 1, chronology3);
        java.lang.String str5 = localDate4.toString();
        org.joda.time.LocalDate localDate7 = localDate4.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology8 = localDate7.getChronology();
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((long) (short) 1, chronology8);
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.plusDays(457);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (short) 1, chronology14);
        java.lang.String str16 = localDate15.toString();
        org.joda.time.LocalDate localDate18 = localDate15.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology19 = localDate18.getChronology();
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay((long) (short) 1, chronology19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((long) (byte) 100, chronology22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(chronology24);
        org.joda.time.MutableDateTime mutableDateTime26 = mutableDateTime25.copy();
        org.joda.time.Duration duration27 = period23.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime26);
        org.joda.time.Seconds seconds28 = period23.toStandardSeconds();
        org.joda.time.Period period30 = period23.plusYears(0);
        org.joda.time.Period period32 = period23.withHours(53617440);
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay20.withPeriodAdded((org.joda.time.ReadablePeriod) period32, (-53617748));
        org.joda.time.Period period36 = org.joda.time.Period.minutes(598);
        org.joda.time.YearMonthDay yearMonthDay37 = yearMonthDay20.minus((org.joda.time.ReadablePeriod) period36);
        org.joda.time.YearMonthDay yearMonthDay39 = yearMonthDay20.plusYears(23);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray40 = yearMonthDay39.getFieldTypes();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Period period43 = new org.joda.time.Period((long) (byte) 100, chronology42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime(chronology44);
        org.joda.time.MutableDateTime mutableDateTime46 = mutableDateTime45.copy();
        org.joda.time.Duration duration47 = period43.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime46);
        org.joda.time.Period period49 = period43.plusDays((int) (byte) 10);
        int int50 = period49.getWeeks();
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay39.plus((org.joda.time.ReadablePeriod) period49);
        org.joda.time.Chronology chronology52 = yearMonthDay51.getChronology();
        org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay11.withChronologyRetainFields(chronology52);
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((long) 223, chronology52);
        mutablePeriod54.addSeconds(53841680);
        int int57 = mutablePeriod54.getMillis();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01" + "'", str16, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(seconds28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray40);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 223 + "'", int57 == 223);
    }

    @Test
    public void test14027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14027");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.withHourOfDay((int) (short) 10);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.hours();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay0.withFieldAdded(durationFieldType3, 53625645);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay0.plusHours((int) '4');
        org.joda.time.TimeOfDay.Property property8 = timeOfDay0.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay10 = property8.addToCopy((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay12 = timeOfDay10.withSecondOfMinute(536197);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 536197 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(timeOfDay10);
    }

    @Test
    public void test14028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14028");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        int int1 = localDate0.getDayOfWeek();
        org.joda.time.LocalDate localDate3 = localDate0.withWeekyear(52);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate5 = localDate3.withDayOfMonth(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2 + "'", int1 == 2);
        org.junit.Assert.assertNotNull(localDate3);
    }

    @Test
    public void test14029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14029");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = localDate2.toDateMidnight(dateTimeZone7);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.yearOfEra();
        int int10 = dateMidnight8.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property11 = dateMidnight8.year();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight8.withMillis((long) ' ');
        int int14 = dateMidnight13.getYear();
        org.joda.time.YearMonthDay yearMonthDay15 = dateMidnight13.toYearMonthDay();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(yearMonthDay15);
    }

    @Test
    public void test14030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14030");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone1 = dateMidnight0.getZone();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusMillis(2);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.minusMinutes(99);
        java.util.Date date7 = localDateTime6.toDate();
        org.joda.time.LocalDateTime.Property property8 = localDateTime6.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundCeilingCopy();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Feb 22 04:17:21 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test14031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14031");
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(periodType1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) periodType1, dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusYears((int) '#');
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusDays(465);
        java.lang.Object obj9 = null;
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology10);
        int int12 = mutableDateTime11.getMillisOfSecond();
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone14 = dateMidnight13.getZone();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        mutableDateTime11.setZoneRetainFields(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(obj9, dateTimeZone14);
        org.joda.time.DateTime dateTime18 = localDateTime6.toDateTime(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(141094517856021000L, dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusMinutes(2022);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withHourOfDay(12);
        org.joda.time.DateTime dateTime24 = localDateTime23.toDateTime();
        org.joda.time.Period period26 = new org.joda.time.Period((long) 5);
        org.joda.time.Period period28 = period26.minusHours(53795616);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime23.withPeriodAdded((org.joda.time.ReadablePeriod) period26, 834);
        org.joda.time.LocalDateTime.Property property31 = localDateTime23.minuteOfHour();
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 404 + "'", int12 == 404);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
    }

    @Test
    public void test14032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14032");
        java.util.Locale locale2 = new java.util.Locale("", "hi!");
        java.lang.String str3 = locale2.getCountry();
        java.util.Locale locale4 = java.util.Locale.FRENCH;
        boolean boolean5 = locale4.hasExtensions();
        java.lang.String str6 = locale2.getDisplayVariant(locale4);
        java.util.Calendar.Builder builder7 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder9 = builder7.setLenient(false);
        java.util.Calendar.Builder builder14 = builder7.setTimeOfDay((int) ' ', 53617440, 3, 53617649);
        java.util.Calendar.Builder builder19 = builder14.setTimeOfDay(53626727, 0, 53628444, (int) ' ');
        java.util.Calendar.Builder builder21 = builder14.setLenient(false);
        java.util.Calendar.Builder builder22 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder24 = builder22.setLenient(false);
        java.util.TimeZone timeZone26 = java.util.TimeZone.getTimeZone("2022-02-21T14:54:05.059Z");
        java.util.Calendar.Builder builder27 = builder24.setTimeZone(timeZone26);
        java.util.TimeZone timeZone28 = java.util.TimeZone.getDefault();
        java.util.Calendar.Builder builder29 = builder27.setTimeZone(timeZone28);
        java.util.Calendar.Builder builder30 = builder21.setTimeZone(timeZone28);
        java.util.Locale locale34 = new java.util.Locale("hi!", "Years", "1970-01-01");
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(timeZone28, locale34);
        java.lang.String str36 = locale2.getDisplayLanguage(locale34);
        java.lang.Object obj37 = locale2.clone();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((long) (short) 1, chronology43);
        java.lang.String str45 = localDate44.toString();
        org.joda.time.LocalDate localDate47 = localDate44.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology48 = localDate47.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.clockhourOfDay();
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime(chronology48);
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate((long) 14, chronology48);
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((-1L), chronology48);
        org.joda.time.DateTimeField dateTimeField53 = chronology48.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField54 = chronology48.dayOfMonth();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((long) 53698857, (long) 91, chronology48);
        org.joda.time.DateMidnight dateMidnight56 = org.joda.time.DateMidnight.now(chronology48);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((java.lang.Object) locale2, chronology48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.util.Locale");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale2.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "HI!" + "'", str3, "HI!");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertEquals(locale34.toString(), "hi!_YEARS_1970-01-01");
        org.junit.Assert.assertNotNull(calendar35);
// flaky:         org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=1645455761433,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"1970-01-01\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=41,MILLISECOND=433,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "_HI!");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "_HI!");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "_HI!");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1970-01-01" + "'", str45, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateMidnight56);
    }

    @Test
    public void test14033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14033");
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (short) 1, chronology13);
        java.lang.String str15 = localDate14.toString();
        org.joda.time.LocalDate localDate17 = localDate14.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology18 = localDate17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfEra();
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType11.getField(chronology18);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology18);
        org.joda.time.Period period22 = new org.joda.time.Period((long) (-1), periodType10, chronology18);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) (short) 1, chronology24);
        java.lang.String str26 = localDate25.toString();
        org.joda.time.LocalDate localDate28 = localDate25.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology29 = localDate28.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 53643546, periodType10, chronology29);
        org.joda.time.PeriodType periodType32 = periodType10.withSecondsRemoved();
        java.lang.String str33 = periodType32.toString();
        org.joda.time.PeriodType periodType34 = periodType32.withMillisRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period35 = new org.joda.time.Period(0, 54004231, 53842405, 54084580, 53790463, 292278994, 51, 277, periodType34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'months'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1970-01-01" + "'", str15, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1970-01-01" + "'", str26, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "PeriodType[YearWeekDayTimeNoSeconds]" + "'", str33, "PeriodType[YearWeekDayTimeNoSeconds]");
        org.junit.Assert.assertNotNull(periodType34);
    }

    @Test
    public void test14034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14034");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalDate.Property property4 = localDate2.weekOfWeekyear();
        org.joda.time.LocalDate localDate5 = property4.withMaximumValue();
        org.joda.time.LocalDate localDate6 = property4.withMaximumValue();
        java.lang.String str7 = localDate6.toString();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-12-31" + "'", str7, "1970-12-31");
    }

    @Test
    public void test14035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14035");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((java.lang.Object) periodType0, dateTimeZone2);
        int int4 = localDateTime3.getDayOfMonth();
        org.joda.time.LocalDateTime.Property property5 = localDateTime3.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = property5.getFieldType();
        org.joda.time.LocalDateTime localDateTime7 = property5.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime8 = property5.getLocalDateTime();
        int int9 = localDateTime8.getDayOfMonth();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.yearOfEra();
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 22 + "'", int9 == 22);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test14036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14036");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((java.lang.Object) periodType0, dateTimeZone2);
        int int4 = localDateTime3.getMonthOfYear();
        org.joda.time.Chronology chronology5 = localDateTime3.getChronology();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) (byte) 100, chronology7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(chronology9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime10.copy();
        org.joda.time.Duration duration12 = period8.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime11);
        int int13 = period8.size();
        org.joda.time.format.PeriodFormatter periodFormatter14 = null;
        java.lang.String str15 = period8.toString(periodFormatter14);
        int int16 = period8.getSeconds();
        org.joda.time.Period period18 = period8.plusHours(3);
        int[] intArray20 = chronology5.get((org.joda.time.ReadablePeriod) period8, (long) 53658563);
        org.joda.time.DurationField durationField21 = chronology5.months();
        long long23 = durationField21.getMillis(673);
        int int26 = durationField21.getDifference((long) 53794229, (long) 148);
        int int29 = durationField21.getDifference((long) 148, (long) 53912570);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "PT0.100S" + "'", str15, "PT0.100S");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 0, 0, 0, 14, 54, 18, 563]");
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1769819058000L + "'", long23 == 1769819058000L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test14037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14037");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setFirstDayOfWeek(53620623);
        org.joda.time.TimeOfDay timeOfDay3 = org.joda.time.TimeOfDay.fromCalendarFields(calendar0);
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property5 = localTime4.minuteOfHour();
        org.joda.time.LocalTime localTime7 = localTime4.withMillisOfSecond(904);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = localTime4.toDateTimeToday(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusMonths(10);
        org.joda.time.DateTime.Property property12 = dateTime9.minuteOfDay();
        org.joda.time.DateTime.Property property13 = dateTime9.year();
        boolean boolean14 = calendar0.before((java.lang.Object) dateTime9);
        org.joda.time.LocalTime localTime15 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        // The following exception was thrown during execution in test generation
        try {
            calendar0.setWeekDate(53750037, 18, 749);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid dayOfWeek: 749");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645455761502,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"1970-01-01\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=53620623,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=41,MILLISECOND=502,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localTime15);
    }

    @Test
    public void test14038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14038");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((java.lang.Object) periodType0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusYears((int) '#');
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusDays(465);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.dayOfYear();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) (byte) 100, chronology10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(chronology12);
        org.joda.time.MutableDateTime mutableDateTime14 = mutableDateTime13.copy();
        org.joda.time.Duration duration15 = period11.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime14);
        org.joda.time.Seconds seconds16 = period11.toStandardSeconds();
        org.joda.time.Period period18 = period11.plusYears(0);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.months();
        boolean boolean20 = period11.isSupported(durationFieldType19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime5.withFieldAdded(durationFieldType19, 53745212);
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) 53619248, (long) 1);
        mutablePeriod25.add((int) (byte) 10, 904, 53619708, 47, 10, (-292275054), 0, 342);
        int int35 = mutablePeriod25.getDays();
        mutablePeriod25.clear();
        int int37 = mutablePeriod25.getYears();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime22.minus((org.joda.time.ReadablePeriod) mutablePeriod25);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(seconds16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 47 + "'", int35 == 47);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(localDateTime38);
    }

    @Test
    public void test14039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14039");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('a', "IT");
        java.util.Locale.Builder builder5 = builder0.addUnicodeLocaleAttribute("1970");
        java.util.Locale.Builder builder6 = builder5.clearExtensions();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property8 = localTime7.minuteOfHour();
        org.joda.time.LocalTime localTime10 = localTime7.withMillisOfSecond(904);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = localTime7.toDateTimeToday(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.plusMonths(10);
        org.joda.time.DateTime.Property property15 = dateTime12.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField16 = property15.getField();
        java.util.Locale locale17 = null;
        int int18 = dateTimeField16.getMaximumShortTextLength(locale17);
        long long20 = dateTimeField16.roundCeiling(10L);
        int int22 = dateTimeField16.getMinimumValue(141007485139200000L);
        java.util.Locale locale24 = java.util.Locale.JAPANESE;
        java.lang.String str25 = locale24.getCountry();
        java.lang.String str26 = locale24.getDisplayVariant();
        java.util.Locale locale27 = java.util.Locale.ITALY;
        java.util.Locale locale28 = java.util.Locale.JAPANESE;
        java.lang.String str29 = locale28.getDisplayCountry();
        java.lang.String str30 = locale27.getDisplayLanguage(locale28);
        java.lang.String str31 = locale24.getDisplayLanguage(locale27);
        java.lang.String str32 = dateTimeField16.getAsText(53634467, locale24);
        java.util.Locale.Builder builder33 = builder5.setLocale(locale24);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder35 = builder33.setScript("2022-02-21T14:58:13.415Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 2022-02-21T14:58:13.415Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 20012L + "'", long20 == 20012L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\u30a4\u30bf\u30ea\u30a2\u8a9e" + "'", str30, "\u30a4\u30bf\u30ea\u30a2\u8a9e");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "giapponese" + "'", str31, "giapponese");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "53634467" + "'", str32, "53634467");
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test14040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14040");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((java.lang.Object) periodType0, dateTimeZone2);
        int int4 = localDateTime3.getDayOfMonth();
        int int5 = localDateTime3.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.millisOfSecond();
        int int7 = localDateTime3.getEra();
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.era();
        org.joda.time.LocalDateTime.Property property9 = localDateTime3.dayOfMonth();
        int int10 = localDateTime3.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property11 = localDateTime3.monthOfYear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime3.plusWeeks(1439);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.millisOfDay();
        int int15 = localDateTime13.getEra();
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 21381551 + "'", int5 == 21381551);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test14041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14041");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property1 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime3 = localTime0.withMillisOfSecond(904);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localTime0.toDateTimeToday(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths(10);
        org.joda.time.DateTime.Property property8 = dateTime5.minuteOfDay();
        org.joda.time.DateTime dateTime9 = property8.getDateTime();
        org.joda.time.DateTime.Property property10 = dateTime9.dayOfWeek();
        org.joda.time.DateTime dateTime12 = dateTime9.minusMonths(21);
        int int13 = dateTime9.getMonthOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) (byte) 100, chronology15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(chronology17);
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime18.copy();
        org.joda.time.Duration duration20 = period16.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime19);
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((-1), 53620134, (int) (byte) -1, 53617719, (int) (byte) 100, 53619079, 1, 53);
        org.joda.time.Period period30 = period16.minus((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.DateTime dateTime32 = dateTime9.withPeriodAdded((org.joda.time.ReadablePeriod) period16, 53621101);
        org.joda.time.Period period34 = period16.withWeeks(4468419);
        org.joda.time.Period period36 = period16.withDays(10);
        org.joda.time.Days days37 = period36.toStandardDays();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(days37);
    }

    @Test
    public void test14042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14042");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(56180577);
        java.lang.String str3 = dateTimeZone2.toString();
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) 54033711, dateTimeZone2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 1, chronology6);
        java.lang.String str8 = localDate7.toString();
        org.joda.time.LocalDate localDate10 = localDate7.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) (short) 1, chronology12);
        java.lang.String str14 = localDate13.toString();
        org.joda.time.LocalDate localDate16 = localDate13.withYearOfEra((int) (byte) 100);
        org.joda.time.LocalDate.Property property17 = localDate13.weekOfWeekyear();
        org.joda.time.DateTime dateTime18 = localDate13.toDateTimeAtCurrentTime();
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone20 = dateMidnight19.getZone();
        boolean boolean22 = dateTimeZone20.isStandardOffset((long) 'a');
        org.joda.time.DateTime dateTime23 = dateTime18.withZoneRetainFields(dateTimeZone20);
        org.joda.time.DateTime dateTime24 = localDate10.toDateTimeAtStartOfDay(dateTimeZone20);
        org.joda.time.DateMidnight dateMidnight25 = org.joda.time.DateMidnight.now(dateTimeZone20);
        long long27 = dateTimeZone20.convertUTCToLocal((long) 53628335);
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay(dateTimeZone20);
        mutableDateTime4.setZoneRetainFields(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+15:36:20.577" + "'", str3, "+15:36:20.577");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01" + "'", str8, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-01" + "'", str14, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateMidnight25);
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + 107248323L + "'", long27 == 107248323L);
    }

    @Test
    public void test14043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14043");
        org.joda.time.Period period1 = org.joda.time.Period.seconds(391);
        int int2 = period1.getYears();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test14044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14044");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = mutableDateTime1.copy();
        mutableDateTime1.addMinutes(0);
        int int5 = mutableDateTime1.getCenturyOfEra();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) (short) 1, chronology10);
        java.lang.String str12 = localDate11.toString();
        org.joda.time.LocalDate localDate14 = localDate11.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology15 = localDate14.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.eras();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate(100, 12, (int) (short) 1, chronology15);
        mutableDateTime1.setChronology(chronology15);
        org.joda.time.DateTimeField dateTimeField19 = mutableDateTime1.getRoundingField();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) (short) 1, chronology24);
        java.lang.String str26 = localDate25.toString();
        org.joda.time.LocalDate localDate28 = localDate25.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology29 = localDate28.getChronology();
        org.joda.time.DurationField durationField30 = chronology29.eras();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate(100, 12, (int) (short) 1, chronology29);
        org.joda.time.DateTimeField dateTimeField32 = chronology29.year();
        java.util.Locale locale34 = java.util.Locale.CANADA;
        java.lang.String str36 = locale34.getExtension('a');
        java.lang.String str37 = dateTimeField32.getAsText((long) 53617440, locale34);
        java.util.Locale locale40 = new java.util.Locale("2022-02-21T14:53:45.094Z");
        java.lang.String str41 = dateTimeField32.getAsShortText(5, locale40);
        mutableDateTime1.setRounding(dateTimeField32);
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone44 = dateMidnight43.getZone();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) (short) 1, chronology46);
        java.lang.String str48 = localDate47.toString();
        org.joda.time.LocalDate localDate50 = localDate47.withYearOfEra((int) (byte) 100);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight43.withFields((org.joda.time.ReadablePartial) localDate50);
        org.joda.time.DateMidnight.Property property52 = dateMidnight51.dayOfYear();
        org.joda.time.DateMidnight.Property property53 = dateMidnight51.era();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean55 = dateMidnight51.isSupported(dateTimeFieldType54);
        mutableDateTime1.setTime((org.joda.time.ReadableInstant) dateMidnight51);
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime1.yearOfCentury();
        org.joda.time.MutableDateTime.Property property58 = mutableDateTime1.yearOfCentury();
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20 + "'", int5 == 20);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-01" + "'", str12, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNull(dateTimeField19);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1970-01-01" + "'", str26, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_CA");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1970" + "'", str37, "1970");
        org.junit.Assert.assertEquals(locale40.toString(), "2022-02-21t14:53:45.094z");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "5" + "'", str41, "5");
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1970-01-01" + "'", str48, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(property58);
    }

    @Test
    public void test14045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14045");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((java.lang.Object) periodType0, dateTimeZone2);
        int int4 = localDateTime3.getDayOfMonth();
        int int5 = localDateTime3.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.millisOfSecond();
        int int7 = localDateTime3.getEra();
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.era();
        org.joda.time.LocalDateTime.Property property9 = localDateTime3.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime11 = property9.addToCopy((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime12 = property9.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime13 = property9.roundHalfCeilingCopy();
        long long14 = property9.remainder();
        org.joda.time.LocalDateTime localDateTime15 = property9.withMinimumValue();
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.dayOfMonth();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTime dateTime20 = dateTime17.withFieldAdded(durationFieldType18, (int) (byte) 0);
        org.joda.time.DateTime dateTime22 = dateTime17.minusYears(10);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(periodType23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((java.lang.Object) periodType23, dateTimeZone25);
        int int27 = localDateTime26.getDayOfMonth();
        int int28 = localDateTime26.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property29 = localDateTime26.weekyear();
        java.lang.String str30 = localDateTime26.toString();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime26.plusMinutes(53619708);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime26.plusDays(53626705);
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((long) 342, 47541L, periodType37);
        org.joda.time.Period period40 = period38.minusWeeks(11);
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime((long) 53619708);
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.hours();
        mutableDateTime42.add(durationFieldType43, (int) (byte) 0);
        int int46 = period38.get(durationFieldType43);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime34.plus((org.joda.time.ReadablePeriod) period38);
        org.joda.time.Period period49 = period38.plusSeconds(185);
        org.joda.time.Period period51 = period38.withYears(53712167);
        org.joda.time.DateTime dateTime53 = dateTime22.withPeriodAdded((org.joda.time.ReadablePeriod) period38, 53748972);
        org.joda.time.DateTime dateTime55 = dateTime22.withMillis((long) 8);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Period period58 = new org.joda.time.Period((long) (byte) 100, chronology57);
        org.joda.time.Seconds seconds59 = period58.toStandardSeconds();
        int int60 = period58.getMonths();
        int int61 = period58.getHours();
        org.joda.time.Period period63 = period58.plusSeconds(53619770);
        org.joda.time.DateTime dateTime64 = dateTime22.minus((org.joda.time.ReadablePeriod) period58);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime15.plus((org.joda.time.ReadablePeriod) period58);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.Period period68 = new org.joda.time.Period((long) (byte) 100, chronology67);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MutableDateTime mutableDateTime70 = new org.joda.time.MutableDateTime(chronology69);
        org.joda.time.MutableDateTime mutableDateTime71 = mutableDateTime70.copy();
        org.joda.time.Duration duration72 = period68.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime71);
        int int73 = period68.size();
        org.joda.time.format.PeriodFormatter periodFormatter74 = null;
        java.lang.String str75 = period68.toString(periodFormatter74);
        int int76 = period68.getSeconds();
        org.joda.time.DurationFieldType durationFieldType77 = org.joda.time.DurationFieldType.weeks();
        boolean boolean78 = period68.isSupported(durationFieldType77);
        org.joda.time.LocalDateTime localDateTime80 = localDateTime65.withFieldAdded(durationFieldType77, 0);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 21381625 + "'", int5 == 21381625);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 21381625L + "'", long14 == 21381625L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 22 + "'", int27 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 21381625 + "'", int28 == 21381625);
        org.junit.Assert.assertNotNull(property29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022-02-22T05:56:21.625" + "'", str30, "2022-02-22T05:56:21.625");
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(seconds59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(mutableDateTime71);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 8 + "'", int73 == 8);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "PT0.100S" + "'", str75, "PT0.100S");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(durationFieldType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(localDateTime80);
    }

    @Test
    public void test14046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14046");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setLenient(false);
        java.util.Locale locale3 = java.util.Locale.KOREA;
        java.util.Calendar.Builder builder4 = builder0.setLocale(locale3);
        java.util.Calendar calendar5 = builder0.build();
        long long6 = calendar5.getTimeInMillis();
        java.util.Date date7 = calendar5.getTime();
        java.lang.String str8 = date7.toLocaleString();
        long long9 = date7.getTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"1970-01-01\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1-Jan-1970 12:00:00 AM" + "'", str8, "1-Jan-1970 12:00:00 AM");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test14047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14047");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((java.lang.Object) periodType0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusYears((int) '#');
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusDays(465);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.dayOfYear();
        java.lang.Object obj9 = null;
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology10);
        int int12 = mutableDateTime11.getMillisOfSecond();
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone14 = dateMidnight13.getZone();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        mutableDateTime11.setZoneRetainFields(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(obj9, dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime5, dateTimeZone14);
        long long20 = dateTimeZone14.nextTransition((long) 53670039);
        long long23 = dateTimeZone14.adjustOffset((long) 53695701, false);
        long long26 = dateTimeZone14.adjustOffset((long) 689, false);
        int int28 = dateTimeZone14.getStandardOffset((long) 488);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 683 + "'", int12 == 683);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 53670039L + "'", long20 == 53670039L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 53695701L + "'", long23 == 53695701L);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 689L + "'", long26 == 689L);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 53619988 + "'", int28 == 53619988);
    }

    @Test
    public void test14048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14048");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = localDate2.toDateMidnight(dateTimeZone7);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.yearOfEra();
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone11 = dateMidnight10.getZone();
        org.joda.time.MutableDateTime mutableDateTime12 = dateMidnight8.toMutableDateTime(dateTimeZone11);
        mutableDateTime12.addMillis(54);
        mutableDateTime12.setYear(22);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime12.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime19 = property17.addWrapField(858);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((long) (byte) 100, chronology21);
        org.joda.time.Seconds seconds23 = period22.toStandardSeconds();
        int int24 = period22.getMonths();
        int int25 = period22.getHours();
        org.joda.time.Period period27 = period22.plusSeconds(53619770);
        org.joda.time.Period period28 = period22.toPeriod();
        mutableDateTime19.add((org.joda.time.ReadablePeriod) period28, 53988263);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(seconds23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period28);
    }

    @Test
    public void test14049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14049");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withWeekyear((int) (short) 100);
        java.util.Locale locale4 = null;
        java.util.Calendar calendar5 = dateTime1.toCalendar(locale4);
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.fromCalendarFields(calendar5);
        org.joda.time.Chronology chronology7 = localTime6.getChronology();
        org.joda.time.TimeOfDay timeOfDay8 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 53619988, chronology7);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.plusHours(54035258);
        org.joda.time.LocalTime localTime11 = timeOfDay10.toLocalTime();
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay10.plusMillis(53937530);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1645455761732,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+14:53:39.988,offset=53619988,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=5,HOUR_OF_DAY=5,MINUTE=56,SECOND=21,MILLISECOND=720,ZONE_OFFSET=53619988,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(timeOfDay13);
    }

    @Test
    public void test14050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14050");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight((long) 53646596);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.plusMonths(53618333);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.withCenturyOfEra(553);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight7 = dateMidnight3.withYearOfCentury(53904);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53904 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateMidnight5);
    }

    @Test
    public void test14051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14051");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property1 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime3 = localTime0.withMillisOfSecond(904);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localTime0.toDateTimeToday(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths(10);
        org.joda.time.DateTime.Property property8 = dateTime5.minuteOfDay();
        org.joda.time.DateTime.Property property9 = dateTime5.year();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) (byte) 100, chronology11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.MutableDateTime mutableDateTime15 = mutableDateTime14.copy();
        org.joda.time.Duration duration16 = period12.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime15);
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableDuration) duration16);
        org.joda.time.DateTime dateTime19 = dateTime5.minusDays(8);
        int int20 = dateTime19.getMinuteOfHour();
        org.joda.time.DateTime dateTime22 = dateTime19.plusMinutes(0);
        int int23 = dateTime19.getYear();
        int int24 = dateTime19.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(dateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 56 + "'", int20 == 56);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 7 + "'", int24 == 7);
    }

    @Test
    public void test14052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14052");
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(periodType1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) periodType1, dateTimeZone3);
        int int5 = localDateTime4.getDayOfMonth();
        int int6 = localDateTime4.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.millisOfSecond();
        int int8 = localDateTime4.getEra();
        org.joda.time.LocalDateTime.Property property9 = localDateTime4.era();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime4.plusYears(0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusDays((int) (byte) 1);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.halfdayOfDay();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 53664738, chronology14);
        int int17 = dateTime16.getEra();
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 21381758 + "'", int6 == 21381758);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test14053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14053");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property1 = localTime0.minuteOfHour();
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone3 = dateMidnight2.getZone();
        long long4 = property1.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight2);
        org.joda.time.DateMidnight.Property property5 = dateMidnight2.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight2.withCenturyOfEra(2022);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight2.plus((long) 5);
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean13 = localTime11.isSupported(dateTimeFieldType12);
        org.joda.time.DurationFieldType durationFieldType14 = dateTimeFieldType12.getDurationType();
        boolean boolean15 = localTime10.isSupported(dateTimeFieldType12);
        org.joda.time.LocalTime localTime17 = localTime10.plusHours(53620972);
        org.joda.time.LocalTime localTime19 = localTime10.plusMinutes((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean21 = localTime19.isSupported(dateTimeFieldType20);
        int int22 = dateMidnight2.get(dateTimeFieldType20);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight2.minusWeeks(53732692);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.plus((long) 53709062);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight24.plusWeeks(54084120);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-27423549L) + "'", long4 == (-27423549L));
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20 + "'", int22 == 20);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateMidnight28);
    }

    @Test
    public void test14054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14054");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setLenient(false);
        java.util.Locale locale3 = java.util.Locale.KOREA;
        java.util.Calendar.Builder builder4 = builder0.setLocale(locale3);
        java.util.Calendar calendar5 = builder0.build();
        calendar5.setMinimalDaysInFirstWeek(53632562);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.fromCalendarFields(calendar5);
        // The following exception was thrown during execution in test generation
        try {
            int int10 = calendar5.getMaximum(54001583);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 54001583");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"1970-01-01\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=53632562,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=52,WEEK_OF_MONTH=0,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test14055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14055");
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(readableDuration1, readableInstant2, periodType3);
        org.joda.time.ReadableDuration readableDuration5 = null;
        mutablePeriod4.add(readableDuration5);
        org.joda.time.Instant instant8 = org.joda.time.Instant.parse("2022-02-21T14:53:37.096Z");
        org.joda.time.Chronology chronology9 = instant8.getChronology();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology10);
        org.joda.time.MutableDateTime mutableDateTime12 = mutableDateTime11.copy();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        mutableDateTime12.setZone(dateTimeZone13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) (short) 1, chronology16);
        int int18 = localDate17.getDayOfYear();
        org.joda.time.LocalTime localTime19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = localDate17.toDateTime(localTime19, dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = localDate17.toDateMidnight(dateTimeZone22);
        org.joda.time.DateMidnight.Property property24 = dateMidnight23.yearOfEra();
        int int25 = dateMidnight23.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property26 = dateMidnight23.year();
        boolean boolean27 = mutableDateTime12.isBefore((org.joda.time.ReadableInstant) dateMidnight23);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime12.dayOfMonth();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(readableDuration29, readableInstant30, periodType31);
        mutablePeriod32.addYears((int) (byte) 0);
        int int35 = mutablePeriod32.getMonths();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(readableDuration36, readableInstant37, periodType38);
        org.joda.time.ReadableDuration readableDuration40 = null;
        mutablePeriod39.add(readableDuration40);
        mutablePeriod39.addMonths((int) '#');
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) (short) 1, chronology45);
        int int47 = localDate46.getDayOfYear();
        org.joda.time.LocalTime localTime48 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateTime dateTime50 = localDate46.toDateTime(localTime48, dateTimeZone49);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateMidnight dateMidnight52 = localDate46.toDateMidnight(dateTimeZone51);
        org.joda.time.DateMidnight.Property property53 = dateMidnight52.yearOfEra();
        int int54 = dateMidnight52.getMinuteOfHour();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.Period period57 = new org.joda.time.Period((long) (byte) 100, chronology56);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutableDateTime mutableDateTime59 = new org.joda.time.MutableDateTime(chronology58);
        org.joda.time.MutableDateTime mutableDateTime60 = mutableDateTime59.copy();
        org.joda.time.Duration duration61 = period57.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime60);
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight52.plus((org.joda.time.ReadableDuration) duration61);
        mutablePeriod39.add((org.joda.time.ReadableDuration) duration61);
        mutablePeriod32.setPeriod((org.joda.time.ReadableDuration) duration61);
        mutableDateTime12.add((org.joda.time.ReadableDuration) duration61);
        org.joda.time.Instant instant67 = instant8.withDurationAdded((org.joda.time.ReadableDuration) duration61, 53);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.Period period70 = new org.joda.time.Period((long) (byte) 100, chronology69);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MutableDateTime mutableDateTime72 = new org.joda.time.MutableDateTime(chronology71);
        org.joda.time.MutableDateTime mutableDateTime73 = mutableDateTime72.copy();
        org.joda.time.Duration duration74 = period70.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime73);
        org.joda.time.Period period76 = period70.plusDays((int) (byte) 10);
        org.joda.time.Duration duration77 = period76.toStandardDuration();
        boolean boolean78 = duration61.isShorterThan((org.joda.time.ReadableDuration) duration77);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.LocalDate localDate81 = new org.joda.time.LocalDate((long) (short) 1, chronology80);
        java.lang.String str82 = localDate81.toString();
        org.joda.time.LocalDate localDate84 = localDate81.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology85 = localDate84.getChronology();
        org.joda.time.DateTimeField dateTimeField86 = chronology85.yearOfEra();
        org.joda.time.DurationField durationField87 = chronology85.seconds();
        mutablePeriod4.setPeriod((org.joda.time.ReadableDuration) duration77, chronology85);
        org.joda.time.DateTimeField dateTimeField89 = chronology85.secondOfMinute();
        org.joda.time.Period period90 = new org.joda.time.Period(32441870357757159L, chronology85);
        org.joda.time.DateTimeField dateTimeField91 = chronology85.monthOfYear();
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(instant67);
        org.junit.Assert.assertNotNull(mutableDateTime73);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "1970-01-01" + "'", str82, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate84);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(durationField87);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(dateTimeField91);
    }

    @Test
    public void test14056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14056");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        int int2 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone4 = dateMidnight3.getZone();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone4);
        mutableDateTime1.setZoneRetainFields(dateTimeZone4);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime8 = property7.roundHalfFloor();
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 834 + "'", int2 == 834);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
    }

    @Test
    public void test14057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14057");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 1);
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone7 = dateMidnight6.getZone();
        boolean boolean9 = dateTimeZone7.isStandardOffset((long) 'a');
        org.joda.time.LocalDate localDate10 = org.joda.time.LocalDate.now(dateTimeZone7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter5.withZone(dateTimeZone7);
        org.joda.time.Chronology chronology12 = dateTimeFormatter5.getChronolgy();
        org.joda.time.Chronology chronology13 = dateTimeFormatter5.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter5.withPivotYear(54118903);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNull(chronology12);
        org.junit.Assert.assertNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
    }

    @Test
    public void test14058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14058");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.withHourOfDay((int) (short) 10);
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.minusMinutes((int) (short) 100);
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay2.plusMillis(0);
        int[] intArray7 = timeOfDay2.getValues();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType9 = timeOfDay2.getFieldType(194);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 194");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(intArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[10, 56, 21, 857]");
    }

    @Test
    public void test14059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14059");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone1 = dateMidnight0.getZone();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) (short) 1, chronology3);
        java.lang.String str5 = localDate4.toString();
        org.joda.time.LocalDate localDate7 = localDate4.withYearOfEra((int) (byte) 100);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight0.withFields((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.LocalDate.Property property10 = localDate7.property(dateTimeFieldType9);
        org.joda.time.LocalDate localDate11 = property10.getLocalDate();
        org.joda.time.LocalDate localDate12 = property10.roundHalfCeilingCopy();
        int int13 = localDate12.getDayOfWeek();
        org.joda.time.LocalDate localDate15 = localDate12.withYear(533);
        org.joda.time.LocalDate localDate17 = localDate12.plusDays(54055232);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
    }

    @Test
    public void test14060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14060");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.MutableDateTime mutableDateTime9 = mutableDateTime8.copy();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        mutableDateTime9.setZone(dateTimeZone10);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime9.minuteOfDay();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTime dateTime16 = dateTime13.withFieldAdded(durationFieldType14, (int) (byte) 0);
        mutableDateTime9.add(durationFieldType14, 8);
        org.joda.time.LocalDate localDate20 = localDate2.withFieldAdded(durationFieldType14, 3);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) (short) 1, chronology22);
        int int24 = localDate23.getDayOfYear();
        org.joda.time.LocalTime localTime25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = localDate23.toDateTime(localTime25, dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = localDate23.toDateMidnight(dateTimeZone28);
        org.joda.time.LocalDate localDate31 = localDate23.withYear(53619770);
        int int32 = localDate2.compareTo((org.joda.time.ReadablePartial) localDate23);
        org.joda.time.LocalDate localDate34 = localDate23.minusYears(656);
        org.joda.time.LocalDate localDate36 = localDate34.minusYears(904);
        org.joda.time.LocalDate localDate38 = localDate36.plusYears(53888671);
        org.joda.time.Chronology chronology39 = localDate36.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            long long44 = chronology39.getDateTimeMillis(0, 53969062, 53807294, 53871352);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53969062 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(chronology39);
    }

    @Test
    public void test14061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14061");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone1 = dateMidnight0.getZone();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) (short) 1, chronology3);
        java.lang.String str5 = localDate4.toString();
        org.joda.time.LocalDate localDate7 = localDate4.withYearOfEra((int) (byte) 100);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight0.withFields((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight11 = property9.addWrapFieldToCopy(873);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minus(32441870357699327L);
        org.joda.time.DateMidnight.Property property15 = dateMidnight11.monthOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test14062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14062");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((java.lang.Object) periodType0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusYears((int) '#');
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.minusMonths(1);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime9.copy();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        mutableDateTime10.setZone(dateTimeZone11);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime10.minuteOfDay();
        long long14 = property13.remainder();
        org.joda.time.MutableDateTime mutableDateTime15 = property13.roundHalfCeiling();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime18 = property16.addWrapField(23);
        org.joda.time.DateTime dateTime19 = localDateTime7.toDateTime((org.joda.time.ReadableInstant) mutableDateTime18);
        int int20 = dateTime19.getYear();
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 21920L + "'", long14 == 21920L);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
    }

    @Test
    public void test14063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14063");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) (short) 1, chronology2);
        java.lang.String str4 = localDate3.toString();
        org.joda.time.LocalDate localDate6 = localDate3.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology7 = localDate6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay((long) (short) 1, chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.plusMonths(53617719);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone12 = dateMidnight11.getZone();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (short) 1, chronology14);
        java.lang.String str16 = localDate15.toString();
        org.joda.time.LocalDate localDate18 = localDate15.withYearOfEra((int) (byte) 100);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight11.withFields((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight11.withField(dateTimeFieldType20, 842);
        org.joda.time.YearMonthDay.Property property23 = yearMonthDay8.property(dateTimeFieldType20);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(readableDuration24, readableInstant25, periodType26);
        org.joda.time.ReadableDuration readableDuration28 = null;
        mutablePeriod27.add(readableDuration28);
        mutablePeriod27.addMonths((int) '#');
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(readableDuration32, readableInstant33, periodType34);
        org.joda.time.ReadableDuration readableDuration36 = null;
        mutablePeriod35.add(readableDuration36);
        mutablePeriod35.addMonths((int) '#');
        mutablePeriod27.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod35);
        mutablePeriod35.add((-1L));
        org.joda.time.YearMonthDay yearMonthDay44 = yearMonthDay8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod35, 457);
        org.joda.time.YearMonthDay.Property property45 = yearMonthDay8.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay47 = property45.addToCopy(736);
        // The following exception was thrown during execution in test generation
        try {
            int int49 = yearMonthDay47.getValue(152);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 152");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01" + "'", str16, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(yearMonthDay47);
    }

    @Test
    public void test14064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14064");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.withHourOfDay((int) (short) 10);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.hours();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay0.withFieldAdded(durationFieldType3, 53625645);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay0.plusHours((int) '4');
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay0.withMillisOfSecond(8);
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay0.withSecondOfMinute((int) '4');
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (short) 1, chronology13);
        int int15 = localDate14.getDayOfYear();
        org.joda.time.LocalTime localTime16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = localDate14.toDateTime(localTime16, dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.plusYears((int) (short) 10);
        org.joda.time.DateTime dateTime22 = dateTime18.plus((long) 100);
        org.joda.time.DateTime dateTime24 = dateTime22.plusSeconds(53618165);
        java.lang.String str26 = dateTime22.toString("14:53:45.116");
        org.joda.time.DateTime dateTime27 = dateTime22.toDateTime();
        org.joda.time.DateTime dateTime29 = dateTime22.minusMillis((-292275054));
        org.joda.time.DateTime dateTime30 = dateTime22.toDateTimeISO();
        org.joda.time.DateTime dateTime32 = dateTime30.minusYears(32769);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) (short) 1, chronology34);
        int int36 = localDate35.getDayOfYear();
        org.joda.time.LocalTime localTime37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = localDate35.toDateTime(localTime37, dateTimeZone38);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime(chronology40);
        org.joda.time.MutableDateTime mutableDateTime42 = mutableDateTime41.copy();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        mutableDateTime42.setZone(dateTimeZone43);
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime42.minuteOfDay();
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime();
        org.joda.time.DurationFieldType durationFieldType47 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTime dateTime49 = dateTime46.withFieldAdded(durationFieldType47, (int) (byte) 0);
        mutableDateTime42.add(durationFieldType47, 8);
        org.joda.time.LocalDate localDate53 = localDate35.withFieldAdded(durationFieldType47, 3);
        org.joda.time.DateTime dateTime54 = localDate35.toDateTimeAtMidnight();
        org.joda.time.DateTime.Property property55 = dateTime54.minuteOfHour();
        org.joda.time.DateTime dateTime56 = property55.withMaximumValue();
        org.joda.time.DateTime dateTime57 = property55.roundHalfCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DurationFieldType durationFieldType59 = dateTimeFieldType58.getDurationType();
        boolean boolean60 = dateTime57.isSupported(dateTimeFieldType58);
        int int61 = dateTime30.get(dateTimeFieldType58);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay.Property property62 = timeOfDay0.property(dateTimeFieldType58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'era' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "14:53:45.116" + "'", str26, "14:53:45.116");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
    }

    @Test
    public void test14065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14065");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 53619708);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(readableDuration2, readableInstant3, periodType4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        mutablePeriod5.add(readableDuration6);
        mutablePeriod5.addMonths((int) '#');
        boolean boolean11 = mutablePeriod5.equals((java.lang.Object) (byte) 1);
        mutablePeriod5.setMillis(0);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) mutablePeriod5);
        java.lang.String str15 = mutableDateTime1.toString();
        org.joda.time.format.DateTimePrinter dateTimePrinter17 = null;
        org.joda.time.format.DateTimeParser dateTimeParser18 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter17, dateTimeParser18);
        boolean boolean20 = dateTimeFormatter19.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter19.withPivotYear((java.lang.Integer) 1);
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone24 = dateMidnight23.getZone();
        boolean boolean26 = dateTimeZone24.isStandardOffset((long) 'a');
        org.joda.time.LocalDate localDate27 = org.joda.time.LocalDate.now(dateTimeZone24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter22.withZone(dateTimeZone24);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 53628506, dateTimeZone24);
        org.joda.time.MutableDateTime mutableDateTime30 = mutableDateTime1.toMutableDateTime(dateTimeZone24);
        int int31 = mutableDateTime30.getMonthOfYear();
        mutableDateTime30.add((long) 53871251);
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone35 = dateMidnight34.getZone();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) (short) 1, chronology37);
        java.lang.String str39 = localDate38.toString();
        org.joda.time.LocalDate localDate41 = localDate38.withYearOfEra((int) (byte) 100);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight34.withFields((org.joda.time.ReadablePartial) localDate41);
        org.joda.time.DateMidnight.Property property43 = dateMidnight42.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight45 = property43.addWrapFieldToCopy(873);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((long) (short) 1, chronology48);
        int int50 = localDate49.getDayOfYear();
        org.joda.time.LocalTime localTime51 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = localDate49.toDateTime(localTime51, dateTimeZone52);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateMidnight dateMidnight55 = localDate49.toDateMidnight(dateTimeZone54);
        org.joda.time.DateMidnight.Property property56 = dateMidnight55.yearOfEra();
        int int57 = dateMidnight55.getMinuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = null;
        boolean boolean59 = dateMidnight55.isSupported(dateTimeFieldType58);
        org.joda.time.DateMidnight.Property property60 = dateMidnight55.weekOfWeekyear();
        java.util.Locale locale61 = java.util.Locale.CANADA;
        int int62 = property60.getMaximumShortTextLength(locale61);
        java.lang.String str63 = dateMidnight45.toString("14:54:03.619", locale61);
        org.joda.time.DateMidnight.Property property64 = dateMidnight45.centuryOfEra();
        org.joda.time.DateMidnight.Property property65 = dateMidnight45.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime30, (org.joda.time.ReadableInstant) dateMidnight45);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1972-12-02T05:47:19.696+14:53:39.988" + "'", str15, "1972-12-02T05:47:19.696+14:53:39.988");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 12 + "'", int31 == 12);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1970-01-01" + "'", str39, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "14:54:03.619" + "'", str63, "14:54:03.619");
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(property65);
    }

    @Test
    public void test14066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14066");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone1 = dateMidnight0.getZone();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) (short) 1, chronology3);
        java.lang.String str5 = localDate4.toString();
        org.joda.time.LocalDate localDate7 = localDate4.withYearOfEra((int) (byte) 100);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight0.withFields((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(readableDuration9, readableInstant10, periodType11);
        mutablePeriod12.setMillis(0);
        org.joda.time.LocalDate localDate15 = localDate7.plus((org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.LocalDate localDate17 = localDate15.withWeekyear((int) ' ');
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone19 = dateMidnight18.getZone();
        boolean boolean21 = dateTimeZone19.isStandardOffset((long) 'a');
        org.joda.time.LocalDate localDate22 = org.joda.time.LocalDate.now(dateTimeZone19);
        org.joda.time.DateTime dateTime23 = localDate15.toDateTimeAtStartOfDay(dateTimeZone19);
        java.lang.String str24 = localDate15.toString();
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone26 = dateMidnight25.getZone();
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = localDate15.toDateTimeAtCurrentTime(dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = org.joda.time.DateMidnight.now(dateTimeZone26);
        org.joda.time.DateMidnight.Property property30 = dateMidnight29.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight32 = property30.addToCopy((long) 53617891);
        org.joda.time.DateMidnight dateMidnight33 = property30.roundHalfEvenCopy();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) (short) 1, chronology35);
        java.lang.String str37 = localDate36.toString();
        org.joda.time.LocalDate localDate39 = localDate36.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology40 = localDate39.getChronology();
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(readableDuration41, readableInstant42, periodType43);
        org.joda.time.ReadableDuration readableDuration45 = null;
        mutablePeriod44.add(readableDuration45);
        mutablePeriod44.addYears((int) (short) 100);
        java.lang.Object obj49 = mutablePeriod44.clone();
        mutablePeriod44.setSeconds(904);
        org.joda.time.LocalDate localDate52 = localDate39.minus((org.joda.time.ReadablePeriod) mutablePeriod44);
        org.joda.time.format.PeriodFormatter periodFormatter53 = null;
        java.lang.String str54 = mutablePeriod44.toString(periodFormatter53);
        mutablePeriod44.setPeriod((long) 'x', (long) '4');
        mutablePeriod44.setHours(53636);
        org.joda.time.Period period61 = new org.joda.time.Period(86367264756L);
        mutablePeriod44.setPeriod((org.joda.time.ReadablePeriod) period61);
        org.joda.time.PeriodType periodType63 = period61.getPeriodType();
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight33.minus((org.joda.time.ReadablePeriod) period61);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0100-01-01" + "'", str24, "0100-01-01");
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1970-01-01" + "'", str37, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "PT23990H54M24.756S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "PT23990H54M24.756S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "PT23990H54M24.756S");
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "P100YT904S" + "'", str54, "P100YT904S");
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(dateMidnight64);
    }

    @Test
    public void test14067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14067");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setFirstDayOfWeek(53620623);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        java.util.Date date4 = calendar0.getTime();
        date4.setSeconds(792);
        date4.setHours(53635576);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.fromDateFields(date4);
        date4.setHours(53687);
        date4.setMinutes(53756408);
        int int14 = date4.getSeconds();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645455762118,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"1970-01-01\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=53620623,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=42,MILLISECOND=118,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Sat Mar 10 19:08:12 GMT+00:00 8249");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 12 + "'", int14 == 12);
    }

    @Test
    public void test14068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14068");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setLenient(false);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getTimeZone("2022-02-21T14:54:05.059Z");
        java.util.Calendar.Builder builder5 = builder2.setTimeZone(timeZone4);
        java.util.Calendar.Builder builder6 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder8 = builder6.setLenient(false);
        java.util.Calendar.Builder builder13 = builder6.setTimeOfDay((int) ' ', 53617440, 3, 53617649);
        java.util.Calendar.Builder builder17 = builder6.setWeekDate(47, 53627214, 10);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 100, chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(chronology21);
        org.joda.time.MutableDateTime mutableDateTime23 = mutableDateTime22.copy();
        org.joda.time.Duration duration24 = period20.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime23);
        org.joda.time.Period period26 = period20.plusDays((int) (byte) 10);
        int int27 = period26.getHours();
        org.joda.time.Period period29 = period26.plusMonths(2);
        org.joda.time.Period period31 = period26.minusMonths(12);
        int int32 = period26.getYears();
        int[] intArray33 = period26.getValues();
        java.util.Calendar.Builder builder34 = builder6.setFields(intArray33);
        java.util.Calendar.Builder builder35 = builder5.setFields(intArray33);
        java.util.Calendar calendar36 = java.util.Calendar.getInstance();
        int int37 = calendar36.getWeekYear();
        calendar36.setTimeInMillis((long) 199);
        org.joda.time.LocalTime localTime40 = org.joda.time.LocalTime.fromCalendarFields(calendar36);
        java.util.TimeZone timeZone41 = calendar36.getTimeZone();
        timeZone41.setRawOffset(53850511);
        java.util.Calendar.Builder builder44 = builder35.setTimeZone(timeZone41);
        timeZone41.setRawOffset(53723582);
        java.lang.String str47 = timeZone41.getID();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 10, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(calendar36);
        org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=199,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"1970-01-01\",offset=53723582,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=199,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2022 + "'", int37 == 2022);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(timeZone41);
        org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "GMT+14:55");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1970-01-01" + "'", str47, "1970-01-01");
    }

    @Test
    public void test14069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14069");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 53632);
        org.joda.time.LocalDate localDate3 = localDate1.plusDays(53774506);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate5 = localDate3.withMonthOfYear(53642637);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53642637 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
    }

    @Test
    public void test14070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14070");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) (short) 1, chronology2);
        java.lang.String str4 = localDate3.toString();
        org.joda.time.LocalDate localDate6 = localDate3.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology7 = localDate6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay((long) (short) 1, chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.plusMonths(53617719);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone12 = dateMidnight11.getZone();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (short) 1, chronology14);
        java.lang.String str16 = localDate15.toString();
        org.joda.time.LocalDate localDate18 = localDate15.withYearOfEra((int) (byte) 100);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight11.withFields((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight11.withField(dateTimeFieldType20, 842);
        org.joda.time.YearMonthDay.Property property23 = yearMonthDay8.property(dateTimeFieldType20);
        org.joda.time.YearMonthDay.Property property24 = yearMonthDay8.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay26 = property24.addWrapFieldToCopy(15);
        org.joda.time.DurationField durationField27 = property24.getRangeDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = property24.getFieldType();
        int int29 = property24.getMaximumValue();
        java.lang.String str30 = property24.toString();
        java.lang.String str31 = property24.getAsText();
        org.joda.time.YearMonthDay yearMonthDay32 = property24.getYearMonthDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = property24.getFieldType();
        org.joda.time.DurationField durationField34 = property24.getDurationField();
        org.joda.time.YearMonthDay yearMonthDay35 = property24.withMaximumValue();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) (short) 1, chronology39);
        java.lang.String str41 = localDate40.toString();
        org.joda.time.LocalDate localDate43 = localDate40.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology44 = localDate43.getChronology();
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime(533L, chronology44);
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) 342, chronology44);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((long) (short) 1, chronology49);
        java.lang.String str51 = localDate50.toString();
        org.joda.time.LocalDate localDate53 = localDate50.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology54 = localDate53.getChronology();
        org.joda.time.DateTimeField dateTimeField55 = chronology54.yearOfEra();
        boolean boolean56 = dateTimeField55.isSupported();
        java.util.Locale locale58 = java.util.Locale.FRENCH;
        java.lang.String str59 = locale58.getDisplayScript();
        java.lang.String str60 = dateTimeField55.getAsShortText(47, locale58);
        java.lang.String str61 = locale58.getLanguage();
        java.lang.String str62 = locale58.getVariant();
        java.lang.String str63 = localDate46.toString("0", locale58);
        java.lang.String str64 = locale58.getDisplayVariant();
        java.util.Locale locale65 = locale58.stripExtensions();
        java.lang.String str66 = property24.getAsText(locale65);
        org.joda.time.LocalTime localTime68 = new org.joda.time.LocalTime((long) 53919621);
        // The following exception was thrown during execution in test generation
        try {
            int int69 = property24.compareTo((org.joda.time.ReadablePartial) localTime68);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'monthOfYear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01" + "'", str16, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 12 + "'", int29 == 12);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Property[monthOfYear]" + "'", str30, "Property[monthOfYear]");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\u6708" + "'", str31, "\u6708");
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1970-01-01" + "'", str41, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "1970-01-01" + "'", str51, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "47" + "'", str60, "47");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "fr" + "'", str61, "fr");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "0" + "'", str63, "0");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "janvier" + "'", str66, "janvier");
    }

    @Test
    public void test14071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14071");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.withCenturyOfEra(1);
        org.joda.time.DateTime dateTime3 = dateMidnight2.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime4 = dateMidnight2.toMutableDateTimeISO();
        mutableDateTime4.setMillisOfDay(52);
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.withHourOfDay((int) (short) 10);
        org.joda.time.DateTime dateTime10 = timeOfDay7.toDateTimeToday();
        boolean boolean11 = mutableDateTime4.isBefore((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime.Property property12 = dateTime10.dayOfMonth();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test14072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14072");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setFirstDayOfWeek(53620623);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        java.util.Date date4 = calendar0.getTime();
        date4.setSeconds(792);
        date4.setHours(53635576);
        int int9 = date4.getSeconds();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645455762251,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"1970-01-01\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=53620623,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=42,MILLISECOND=251,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Wed Nov 09 16:15:12 GMT+00:00 8140");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12 + "'", int9 == 12);
    }

    @Test
    public void test14073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14073");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 391, (long) 861);
        int int3 = period2.getMillis();
        org.joda.time.Period period5 = period2.withMinutes(53853881);
        org.joda.time.Period period7 = period5.minusHours(53794);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 470 + "'", int3 == 470);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
    }

    @Test
    public void test14074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14074");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property1 = localTime0.minuteOfHour();
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone3 = dateMidnight2.getZone();
        long long4 = property1.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight2);
        org.joda.time.DateMidnight.Property property5 = dateMidnight2.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight2.withDayOfYear(20);
        org.joda.time.MutableDateTime mutableDateTime8 = dateMidnight7.toMutableDateTime();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-27423549L) + "'", long4 == (-27423549L));
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
    }

    @Test
    public void test14075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14075");
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 1, chronology4);
        java.lang.String str6 = localDate5.toString();
        org.joda.time.LocalDate localDate8 = localDate5.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology9 = localDate8.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.yearOfEra();
        org.joda.time.DateTimeField dateTimeField11 = dateTimeFieldType2.getField(chronology9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((long) (byte) 100, chronology13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = mutableDateTime16.copy();
        org.joda.time.Duration duration18 = period14.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime17);
        org.joda.time.Period period20 = period14.plusDays((int) (byte) 10);
        int int21 = period20.getHours();
        org.joda.time.Period period23 = period20.plusMonths(2);
        org.joda.time.Period period25 = period20.minusMonths(12);
        org.joda.time.Period period27 = period20.withYears(2057);
        int[] intArray29 = chronology9.get((org.joda.time.ReadablePeriod) period27, 259200000L);
        org.joda.time.DurationField durationField30 = chronology9.weeks();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) 50, chronology9);
        org.joda.time.DateTimeField dateTimeField32 = chronology9.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime((long) 54026508, chronology9);
        mutableDateTime33.addYears(53722980);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01" + "'", str6, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField32);
    }

    @Test
    public void test14076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14076");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        int int1 = dateMidnight0.getYearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight3 = dateMidnight0.withDayOfYear(511);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 511 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
    }

    @Test
    public void test14077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14077");
        org.joda.time.Chronology chronology1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((java.lang.Object) 53705766L, chronology1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Long");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14078");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay.Property property1 = timeOfDay0.hourOfDay();
        int int2 = property1.getMaximumValueOverall();
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean5 = localTime3.isSupported(dateTimeFieldType4);
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime7 = localTime3.withFields((org.joda.time.ReadablePartial) localTime6);
        int int8 = property1.compareTo((org.joda.time.ReadablePartial) localTime6);
        int int9 = localTime6.getSecondOfMinute();
        org.joda.time.LocalTime localTime11 = localTime6.plusHours(1970);
        int int12 = localTime6.getMinuteOfHour();
        org.joda.time.LocalTime localTime14 = localTime6.withMillisOfSecond(0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 23 + "'", int2 == 23);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 22 + "'", int9 == 22);
        org.junit.Assert.assertNotNull(localTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 56 + "'", int12 == 56);
        org.junit.Assert.assertNotNull(localTime14);
    }

    @Test
    public void test14079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14079");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = localDate2.toDateMidnight(dateTimeZone7);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.yearOfEra();
        int int10 = dateMidnight8.getMinuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = null;
        boolean boolean12 = dateMidnight8.isSupported(dateTimeFieldType11);
        org.joda.time.Period period17 = new org.joda.time.Period((int) (byte) 10, (-1), 21, 100);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight8.minus((org.joda.time.ReadablePeriod) period17);
        org.joda.time.Instant instant19 = new org.joda.time.Instant();
        org.joda.time.Instant instant21 = instant19.withMillis((-27422466L));
        org.joda.time.Chronology chronology22 = instant19.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.clockhourOfHalfday();
        int int24 = dateMidnight8.get(dateTimeField23);
        int int25 = dateTimeField23.getMinimumValue();
        int int27 = dateTimeField23.get(194001670803957L);
        java.lang.String str28 = dateTimeField23.toString();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 5 + "'", int27 == 5);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "DateTimeField[clockhourOfHalfday]" + "'", str28, "DateTimeField[clockhourOfHalfday]");
    }

    @Test
    public void test14080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14080");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((java.lang.Object) periodType0, dateTimeZone2);
        int int4 = localDateTime3.getDayOfMonth();
        int int5 = localDateTime3.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusMonths(339);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusSeconds(0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusWeeks(53725058);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType14 = localDateTime10.getFieldType(54139608);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 54139608");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 21382327 + "'", int5 == 21382327);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test14081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14081");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setLenient(false);
        java.util.Locale locale3 = java.util.Locale.KOREA;
        java.util.Calendar.Builder builder4 = builder0.setLocale(locale3);
        java.util.Calendar calendar5 = builder0.build();
        long long6 = calendar5.getTimeInMillis();
        long long7 = calendar5.getTimeInMillis();
        int int8 = calendar5.getWeeksInWeekYear();
        java.util.Locale locale11 = java.util.Locale.UK;
        org.joda.time.tz.NameProvider nameProvider12 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale13 = java.util.Locale.KOREA;
        java.lang.String str16 = nameProvider12.getName(locale13, "DateTimeField[dayOfMonth]", "CA");
        java.lang.String str17 = locale11.getDisplayScript(locale13);
        java.util.Calendar calendar18 = java.util.Calendar.getInstance(locale13);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Integer> strMap19 = calendar5.getDisplayNames(54031627, 53747855, locale13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"1970-01-01\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_GB");
        org.junit.Assert.assertNotNull(nameProvider12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko_KR");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(calendar18);
// flaky:         org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=1645455762348,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"1970-01-01\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=42,MILLISECOND=348,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test14082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14082");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        java.lang.String str1 = locale0.getDisplayCountry();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(strSet2);
    }

    @Test
    public void test14083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14083");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusYears((int) (short) 10);
        org.joda.time.DateTime dateTime10 = dateTime6.plus((long) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.plusSeconds(53618165);
        java.lang.String str14 = dateTime10.toString("14:53:45.116");
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.days();
        org.joda.time.PeriodType periodType16 = periodType15.withMonthsRemoved();
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.time();
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((long) 53619708);
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.hours();
        mutableDateTime19.add(durationFieldType20, (int) (byte) 0);
        int int23 = periodType17.indexOf(durationFieldType20);
        boolean boolean24 = periodType15.isSupported(durationFieldType20);
        org.joda.time.DateTime dateTime26 = dateTime10.withFieldAdded(durationFieldType20, 53656199);
        int int27 = dateTime26.getYearOfCentury();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) (short) 1, chronology29);
        int int31 = localDate30.getDayOfYear();
        org.joda.time.LocalTime localTime32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateTime dateTime34 = localDate30.toDateTime(localTime32, dateTimeZone33);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = localDate30.toDateMidnight(dateTimeZone35);
        org.joda.time.LocalDate localDate38 = localDate30.withYear(53619770);
        java.lang.String str39 = localDate30.toString();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime(chronology40);
        org.joda.time.MutableDateTime mutableDateTime42 = mutableDateTime41.copy();
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone44 = dateMidnight43.getZone();
        mutableDateTime41.setZoneRetainFields(dateTimeZone44);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime(chronology46);
        org.joda.time.MutableDateTime mutableDateTime48 = mutableDateTime47.copy();
        mutableDateTime47.addMinutes(0);
        mutableDateTime47.setSecondOfDay(21);
        org.joda.time.Chronology chronology53 = null;
        mutableDateTime47.setChronology(chronology53);
        mutableDateTime47.setMinuteOfHour((int) (short) 0);
        mutableDateTime47.addMinutes((int) (byte) 1);
        int int59 = dateTimeZone44.getOffset((org.joda.time.ReadableInstant) mutableDateTime47);
        org.joda.time.DateMidnight dateMidnight60 = localDate30.toDateMidnight(dateTimeZone44);
        org.joda.time.LocalDateTime localDateTime61 = null;
        boolean boolean62 = dateTimeZone44.isLocalDateTimeGap(localDateTime61);
        org.joda.time.DateTime dateTime63 = dateTime26.toDateTime(dateTimeZone44);
        int int64 = dateTime63.getDayOfYear();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "14:53:45.116" + "'", str14, "14:53:45.116");
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 91 + "'", int27 == 91);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1970-01-01" + "'", str39, "1970-01-01");
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(mutableDateTime48);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 53619988 + "'", int59 == 53619988);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 26 + "'", int64 == 26);
    }

    @Test
    public void test14084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14084");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableDuration0, readableInstant1, periodType2);
        mutablePeriod3.addYears((int) (byte) 0);
        int int6 = mutablePeriod3.getMonths();
        mutablePeriod3.addMinutes((int) (byte) 0);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(periodType10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) periodType10, dateTimeZone12);
        int int14 = localDateTime13.getMonthOfYear();
        org.joda.time.Chronology chronology15 = localDateTime13.getChronology();
        mutablePeriod3.add((long) (short) 0, chronology15);
        org.joda.time.DateMidnight dateMidnight17 = org.joda.time.DateMidnight.now(chronology15);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.withYear(53619248);
        org.joda.time.Period period21 = org.joda.time.Period.weeks((int) '4');
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight17.minus((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Period period24 = period21.minusSeconds(0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(period24);
    }

    @Test
    public void test14085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14085");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setFirstDayOfWeek(53620623);
        org.joda.time.TimeOfDay timeOfDay3 = org.joda.time.TimeOfDay.fromCalendarFields(calendar0);
        calendar0.clear();
        java.lang.String str5 = calendar0.toString();
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"1970-01-01\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=53620623,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"1970-01-01\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=53620623,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]" + "'", str5, "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"1970-01-01\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=53620623,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
    }

    @Test
    public void test14086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14086");
        java.lang.Object obj0 = null;
        org.joda.time.Instant instant2 = org.joda.time.Instant.parse("2022-02-21T14:53:37.096Z");
        org.joda.time.Chronology chronology3 = instant2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(obj0, chronology3);
        java.util.Locale locale5 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleKeys();
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(10L, (-1L), periodType9, chronology10);
        org.joda.time.Period period12 = period11.normalizedStandard();
        boolean boolean13 = strSet6.contains((java.lang.Object) period12);
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay4.withPeriodAdded((org.joda.time.ReadablePeriod) period12, 328);
        int[] intArray16 = timeOfDay4.getValues();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) (short) 1, chronology18);
        java.lang.String str20 = localDate19.toString();
        org.joda.time.LocalDate localDate22 = localDate19.withYearOfEra((int) (byte) 100);
        org.joda.time.LocalDate.Property property23 = localDate19.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField24 = property23.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = dateTimeField24.getType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay27 = timeOfDay4.withField(dateTimeFieldType25, 53969024);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'dayOfWeek' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(intArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[15, 2, 42, 418]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1970-01-01" + "'", str20, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
    }

    @Test
    public void test14087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14087");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay(0, 54040824, 42);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54040824 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14088");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime9.copy();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        mutableDateTime10.setZone(dateTimeZone11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (short) 1, chronology14);
        int int16 = localDate15.getDayOfYear();
        org.joda.time.LocalTime localTime17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = localDate15.toDateTime(localTime17, dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = localDate15.toDateMidnight(dateTimeZone20);
        org.joda.time.DateMidnight.Property property22 = dateMidnight21.yearOfEra();
        int int23 = dateMidnight21.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property24 = dateMidnight21.year();
        boolean boolean25 = mutableDateTime10.isBefore((org.joda.time.ReadableInstant) dateMidnight21);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.time();
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime((long) 53619708);
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.hours();
        mutableDateTime28.add(durationFieldType29, (int) (byte) 0);
        int int32 = periodType26.indexOf(durationFieldType29);
        mutableDateTime10.add(durationFieldType29, 0);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime10.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime36 = property35.roundCeiling();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) (short) 1, chronology38);
        java.lang.String str40 = localDate39.toString();
        org.joda.time.LocalDate localDate42 = localDate39.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) (short) 1, chronology44);
        java.lang.String str46 = localDate45.toString();
        org.joda.time.LocalDate localDate48 = localDate45.withYearOfEra((int) (byte) 100);
        org.joda.time.LocalDate.Property property49 = localDate45.weekOfWeekyear();
        org.joda.time.DateTime dateTime50 = localDate45.toDateTimeAtCurrentTime();
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone52 = dateMidnight51.getZone();
        boolean boolean54 = dateTimeZone52.isStandardOffset((long) 'a');
        org.joda.time.DateTime dateTime55 = dateTime50.withZoneRetainFields(dateTimeZone52);
        org.joda.time.DateTime dateTime56 = localDate42.toDateTimeAtStartOfDay(dateTimeZone52);
        mutableDateTime36.setZoneRetainFields(dateTimeZone52);
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight((long) 865, dateTimeZone52);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime(53891, 53618165, 54021836, 404, 54064085, 156, 53677363, dateTimeZone52);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 404 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1970-01-01" + "'", str40, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1970-01-01" + "'", str46, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
    }

    @Test
    public void test14089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14089");
        org.joda.time.Period period1 = org.joda.time.Period.weeks((int) '4');
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.years();
        java.lang.String str3 = periodType2.getName();
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(periodType2);
        org.joda.time.Period period5 = period1.plus((org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Minutes minutes6 = period1.toStandardMinutes();
        int int7 = period1.getMinutes();
        org.joda.time.Period period9 = period1.plusHours(53742499);
        org.joda.time.Period period11 = period9.minusDays(53697620);
        org.joda.time.MutablePeriod mutablePeriod12 = period11.toMutablePeriod();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Years" + "'", str3, "Years");
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(mutablePeriod12);
    }

    @Test
    public void test14090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14090");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone1 = dateMidnight0.getZone();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) (short) 1, chronology3);
        java.lang.String str5 = localDate4.toString();
        org.joda.time.LocalDate localDate7 = localDate4.withYearOfEra((int) (byte) 100);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight0.withFields((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight0.withField(dateTimeFieldType9, 842);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((long) (byte) 100, chronology13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = mutableDateTime16.copy();
        org.joda.time.Duration duration18 = period14.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime17);
        org.joda.time.Period period20 = period14.plusDays((int) (byte) 10);
        org.joda.time.Duration duration21 = period20.toStandardDuration();
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight0.minus((org.joda.time.ReadableDuration) duration21);
        java.lang.String str23 = duration21.toString();
        org.joda.time.Duration duration24 = duration21.toDuration();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) (short) 1, chronology26);
        int int28 = localDate27.getDayOfYear();
        org.joda.time.LocalTime localTime29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = localDate27.toDateTime(localTime29, dateTimeZone30);
        org.joda.time.DateTime.Property property32 = dateTime31.weekyear();
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.days();
        org.joda.time.PeriodType periodType34 = periodType33.withMonthsRemoved();
        org.joda.time.PeriodType periodType35 = periodType34.withMonthsRemoved();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration21, (org.joda.time.ReadableInstant) dateTime31, periodType35);
        org.joda.time.DateTime dateTime38 = dateTime31.plusMillis(53778822);
        org.joda.time.DateTime.Property property39 = dateTime31.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "PT864000.100S" + "'", str23, "PT864000.100S");
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
    }

    @Test
    public void test14091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14091");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = localDate2.toDateMidnight(dateTimeZone7);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.yearOfEra();
        int int10 = dateMidnight8.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property11 = dateMidnight8.year();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        org.joda.time.DateMidnight dateMidnight13 = property11.roundFloorCopy();
        int int14 = dateMidnight13.getYearOfEra();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(chronology15);
        mutableDateTime16.addMinutes(904);
        int int19 = mutableDateTime16.getYearOfCentury();
        mutableDateTime16.addWeeks(53626727);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime16.millisOfSecond();
        int int23 = mutableDateTime16.getCenturyOfEra();
        boolean boolean24 = dateMidnight13.isEqual((org.joda.time.ReadableInstant) mutableDateTime16);
        org.joda.time.DateMidnight.Property property25 = dateMidnight13.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight13.withCenturyOfEra(710);
        org.joda.time.Interval interval28 = dateMidnight13.toInterval();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int30 = dateMidnight13.get(dateTimeFieldType29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 22 + "'", int19 == 22);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10297 + "'", int23 == 10297);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(interval28);
    }

    @Test
    public void test14092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14092");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-21T14:54:05.059Z");
        timeZone1.setID("1970-01-01");
        boolean boolean4 = timeZone1.observesDaylightTime();
        boolean boolean5 = timeZone1.observesDaylightTime();
        java.util.TimeZone.setDefault(timeZone1);
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone1);
        calendar7.setFirstDayOfWeek(0);
        int int10 = calendar7.getWeeksInWeekYear();
        java.lang.String str11 = calendar7.toString();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=1645455762514,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"1970-01-01\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=0,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=42,MILLISECOND=514,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "java.util.GregorianCalendar[time=1645455762514,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"1970-01-01\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=0,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=42,MILLISECOND=514,ZONE_OFFSET=0,DST_OFFSET=0]" + "'", str11, "java.util.GregorianCalendar[time=1645455762514,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"1970-01-01\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=0,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=42,MILLISECOND=514,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test14093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14093");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay.Property property1 = timeOfDay0.hourOfDay();
        int int2 = property1.getMaximumValueOverall();
        int int3 = property1.getMaximumValue();
        java.lang.String str4 = property1.getName();
        int int5 = property1.get();
        org.joda.time.TimeOfDay timeOfDay6 = property1.getTimeOfDay();
        int int7 = property1.getMinimumValueOverall();
        int int8 = property1.get();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 23 + "'", int2 == 23);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 23 + "'", int3 == 23);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hourOfDay" + "'", str4, "hourOfDay");
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5 + "'", int5 == 5);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 5 + "'", int8 == 5);
    }

    @Test
    public void test14094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14094");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property1 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime3 = property1.addCopy((long) (short) -1);
        org.joda.time.LocalTime.Property property4 = localTime3.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField5 = property4.getField();
        org.joda.time.LocalTime localTime6 = property4.roundHalfFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime8 = property4.setCopy(2018);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2018 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localTime6);
    }

    @Test
    public void test14095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14095");
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearMonthDay();
        boolean boolean7 = periodType5.equals((java.lang.Object) '#');
        java.util.Locale locale9 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleKeys();
        java.util.stream.Stream<java.lang.String> strStream11 = strSet10.parallelStream();
        boolean boolean12 = strSet10.isEmpty();
        org.joda.time.Instant instant13 = new org.joda.time.Instant();
        org.joda.time.Instant instant15 = instant13.withMillis((-27422466L));
        boolean boolean16 = strSet10.remove((java.lang.Object) instant13);
        org.joda.time.Chronology chronology17 = instant13.getChronology();
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(periodType18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((java.lang.Object) periodType18, dateTimeZone20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusYears((int) '#');
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.plusYears((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withYearOfEra(47);
        int int28 = localDateTime27.size();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.plusSeconds(53621101);
        long long32 = chronology17.set((org.joda.time.ReadablePartial) localDateTime30, (long) 958);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) 53832957, chronology17);
        org.joda.time.DurationField durationField34 = chronology17.weekyears();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(0L, (long) 53964020, periodType5, chronology17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate(54062920, 53750037, 314, chronology17);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53750037 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(strStream11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
        org.junit.Assert.assertNotNull(localDateTime30);
// flaky:         org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-60625855116455L) + "'", long32 == (-60625855116455L));
        org.junit.Assert.assertNotNull(durationField34);
    }

    @Test
    public void test14096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14096");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.years();
        java.lang.String str1 = periodType0.getName();
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.PeriodType periodType3 = periodType0.withMinutesRemoved();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) (byte) 100, chronology5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.MutableDateTime mutableDateTime9 = mutableDateTime8.copy();
        org.joda.time.Duration duration10 = period6.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime9);
        org.joda.time.Seconds seconds11 = period6.toStandardSeconds();
        org.joda.time.Period period13 = period6.plusYears(0);
        org.joda.time.Period period15 = period6.withHours(53617440);
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.years();
        java.lang.String str17 = periodType16.getName();
        org.joda.time.PeriodType periodType18 = periodType16.withMonthsRemoved();
        org.joda.time.Period period19 = period6.normalizedStandard(periodType18);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period(10L, (-1L), periodType22, chronology23);
        org.joda.time.Period period25 = period24.normalizedStandard();
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.hours();
        boolean boolean27 = period25.isSupported(durationFieldType26);
        org.joda.time.Period period29 = period6.withField(durationFieldType26, 24);
        boolean boolean30 = periodType0.isSupported(durationFieldType26);
        org.joda.time.PeriodType periodType31 = periodType0.withHoursRemoved();
        org.joda.time.PeriodType periodType32 = periodType31.withMillisRemoved();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) (short) 1, chronology34);
        int int36 = localDate35.getDayOfYear();
        org.joda.time.LocalTime localTime37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = localDate35.toDateTime(localTime37, dateTimeZone38);
        org.joda.time.DateTime dateTime41 = dateTime39.plusYears((int) (short) 10);
        org.joda.time.DateTime dateTime43 = dateTime39.plus((long) 100);
        org.joda.time.DateTime dateTime45 = dateTime43.plusSeconds(53618165);
        java.lang.String str47 = dateTime43.toString("14:53:45.116");
        org.joda.time.DateTime dateTime48 = dateTime43.toDateTime();
        org.joda.time.DateTime dateTime50 = dateTime43.minusMillis((-292275054));
        org.joda.time.DateTime dateTime52 = dateTime43.minus((long) 23);
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone54 = dateMidnight53.getZone();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate((long) (short) 1, chronology56);
        java.lang.String str58 = localDate57.toString();
        org.joda.time.LocalDate localDate60 = localDate57.withYearOfEra((int) (byte) 100);
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight53.withFields((org.joda.time.ReadablePartial) localDate60);
        org.joda.time.DateMidnight.Property property62 = dateMidnight61.dayOfYear();
        org.joda.time.DateMidnight.Property property63 = dateMidnight61.era();
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean65 = dateMidnight61.isSupported(dateTimeFieldType64);
        org.joda.time.DurationFieldType durationFieldType66 = dateTimeFieldType64.getDurationType();
        org.joda.time.DateTime dateTime68 = dateTime52.withFieldAdded(durationFieldType66, 341);
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.LocalDate localDate71 = new org.joda.time.LocalDate((long) (short) 1, chronology70);
        int int72 = localDate71.getDayOfYear();
        org.joda.time.LocalTime localTime73 = null;
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.DateTime dateTime75 = localDate71.toDateTime(localTime73, dateTimeZone74);
        org.joda.time.DateTimeZone dateTimeZone76 = null;
        org.joda.time.DateMidnight dateMidnight77 = localDate71.toDateMidnight(dateTimeZone76);
        org.joda.time.DateMidnight.Property property78 = dateMidnight77.yearOfEra();
        int int79 = dateMidnight77.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property80 = dateMidnight77.year();
        org.joda.time.DateMidnight dateMidnight82 = dateMidnight77.plusYears((int) ' ');
        org.joda.time.LocalDate localDate83 = new org.joda.time.LocalDate((java.lang.Object) dateMidnight77);
        org.joda.time.LocalDate.Property property84 = localDate83.dayOfYear();
        org.joda.time.Chronology chronology85 = localDate83.getChronology();
        org.joda.time.DurationField durationField86 = chronology85.weeks();
        org.joda.time.DurationField durationField87 = chronology85.weekyears();
        boolean boolean88 = durationFieldType66.isSupported(chronology85);
        int int89 = periodType32.indexOf(durationFieldType66);
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Years" + "'", str1, "Years");
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(seconds11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Years" + "'", str17, "Years");
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "14:53:45.116" + "'", str47, "14:53:45.116");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "1970-01-01" + "'", str58, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(durationFieldType66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateMidnight77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(dateMidnight82);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(durationField86);
        org.junit.Assert.assertNotNull(durationField87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
    }

    @Test
    public void test14097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14097");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = mutableDateTime1.copy();
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone4 = dateMidnight3.getZone();
        mutableDateTime1.setZoneRetainFields(dateTimeZone4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(chronology6);
        org.joda.time.MutableDateTime mutableDateTime8 = mutableDateTime7.copy();
        mutableDateTime7.addMinutes(0);
        mutableDateTime7.setSecondOfDay(21);
        org.joda.time.Chronology chronology13 = null;
        mutableDateTime7.setChronology(chronology13);
        mutableDateTime7.setMinuteOfHour((int) (short) 0);
        mutableDateTime7.addMinutes((int) (byte) 1);
        int int19 = dateTimeZone4.getOffset((org.joda.time.ReadableInstant) mutableDateTime7);
        long long23 = dateTimeZone4.convertLocalToUTC(86400000L, true, (long) 489);
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(dateTimeZone4);
        long long27 = dateTimeZone4.convertLocalToUTC((long) 53742259, true);
        org.joda.time.MutableDateTime mutableDateTime28 = org.joda.time.MutableDateTime.now(dateTimeZone4);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(mutableDateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 53619988 + "'", int19 == 53619988);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 32780012L + "'", long23 == 32780012L);
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + 122271L + "'", long27 == 122271L);
        org.junit.Assert.assertNotNull(mutableDateTime28);
    }

    @Test
    public void test14098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14098");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 53677);
        org.joda.time.DateTime dateTime2 = instant1.toDateTimeISO();
        org.joda.time.DateTime.Property property3 = dateTime2.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime8 = dateTime2.withTime(53955, 0, 53633322, 54034923);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53955 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
    }

    @Test
    public void test14099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14099");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) (short) 1, chronology2);
        java.lang.String str4 = localDate3.toString();
        org.joda.time.LocalDate localDate6 = localDate3.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology7 = localDate6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay((long) (short) 1, chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.plusMonths(53617719);
        int int11 = yearMonthDay8.getDayOfMonth();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (short) 1, chronology13);
        java.lang.String str15 = localDate14.toString();
        org.joda.time.LocalDate localDate17 = localDate14.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology18 = localDate17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfEra();
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay8.withChronologyRetainFields(chronology18);
        org.joda.time.DurationField durationField21 = chronology18.millis();
        java.lang.String str22 = durationField21.getName();
        long long24 = durationField21.getValueAsLong((long) 54091558);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1970-01-01" + "'", str15, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "millis" + "'", str22, "millis");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 54091558L + "'", long24 == 54091558L);
    }

    @Test
    public void test14100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14100");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(53619988);
        java.lang.String str3 = dateTimeZone2.toString();
        long long5 = dateTimeZone2.nextTransition((long) 100);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(obj0, dateTimeZone2);
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+14:53:39.988" + "'", str3, "+14:53:39.988");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 100L + "'", long5 == 100L);
    }

    @Test
    public void test14101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14101");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 1);
        boolean boolean6 = dateTimeFormatter2.isParser();
        int int7 = dateTimeFormatter2.getDefaultYear();
        org.joda.time.DateTimeZone dateTimeZone8 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withZoneUTC();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2000 + "'", int7 == 2000);
        org.junit.Assert.assertNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
    }

    @Test
    public void test14102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14102");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(0L);
        int int2 = dateTime1.getMinuteOfDay();
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 893 + "'", int2 == 893);
    }

    @Test
    public void test14103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14103");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleKeys();
        java.util.stream.Stream<java.lang.String> strStream2 = strSet1.parallelStream();
        java.util.Spliterator<java.lang.String> strSpliterator3 = strSet1.spliterator();
        java.util.stream.Stream<java.lang.String> strStream4 = strSet1.stream();
        strSet1.clear();
        int int6 = strSet1.size();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(strStream2);
        org.junit.Assert.assertNotNull(strSpliterator3);
        org.junit.Assert.assertNotNull(strStream4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test14104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14104");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period((long) (byte) 100, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(chronology3);
        org.joda.time.MutableDateTime mutableDateTime5 = mutableDateTime4.copy();
        org.joda.time.Duration duration6 = period2.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime5);
        int int7 = period2.size();
        org.joda.time.Period period9 = period2.plusHours(53619079);
        org.joda.time.Period period11 = period2.plusWeeks(773);
        org.joda.time.Period period13 = period11.withMinutes(53657187);
        org.joda.time.Period period14 = period11.normalizedStandard();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.Period period17 = new org.joda.time.Period((long) (byte) 100, chronology16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(chronology18);
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime19.copy();
        org.joda.time.Duration duration21 = period17.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime20);
        org.joda.time.Period period23 = period17.plusDays((int) (byte) 10);
        int int24 = period23.getHours();
        org.joda.time.Period period26 = period23.plusMonths(2);
        org.joda.time.Period period28 = period23.minusMonths(12);
        org.joda.time.Period period30 = period23.withYears(2057);
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone32 = dateMidnight31.getZone();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) (short) 1, chronology34);
        java.lang.String str36 = localDate35.toString();
        org.joda.time.LocalDate localDate38 = localDate35.withYearOfEra((int) (byte) 100);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight31.withFields((org.joda.time.ReadablePartial) localDate38);
        org.joda.time.DateMidnight.Property property40 = dateMidnight39.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight42 = property40.addWrapFieldToCopy(873);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight42.plusDays((-1));
        org.joda.time.MutableDateTime mutableDateTime45 = dateMidnight42.toMutableDateTimeISO();
        org.joda.time.DateMidnight.Property property46 = dateMidnight42.era();
        org.joda.time.DateMidnight dateMidnight47 = property46.roundCeilingCopy();
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight47.plusMonths(53747701);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Period period52 = new org.joda.time.Period((long) (byte) 100, chronology51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime(chronology53);
        org.joda.time.MutableDateTime mutableDateTime55 = mutableDateTime54.copy();
        org.joda.time.Duration duration56 = period52.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime55);
        org.joda.time.Seconds seconds57 = period52.toStandardSeconds();
        org.joda.time.Period period59 = period52.plusYears(0);
        org.joda.time.Period period61 = period52.withHours(53617440);
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.PeriodType periodType64 = null;
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod(readableDuration62, readableInstant63, periodType64);
        org.joda.time.ReadableDuration readableDuration66 = null;
        mutablePeriod65.add(readableDuration66);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutableDateTime mutableDateTime69 = new org.joda.time.MutableDateTime(chronology68);
        org.joda.time.MutableDateTime mutableDateTime70 = mutableDateTime69.copy();
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        mutableDateTime70.setZone(dateTimeZone71);
        org.joda.time.MutableDateTime.Property property73 = mutableDateTime70.minuteOfDay();
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime();
        org.joda.time.DurationFieldType durationFieldType75 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTime dateTime77 = dateTime74.withFieldAdded(durationFieldType75, (int) (byte) 0);
        mutableDateTime70.add(durationFieldType75, 8);
        boolean boolean80 = mutablePeriod65.isSupported(durationFieldType75);
        org.joda.time.DurationFieldType durationFieldType81 = org.joda.time.DurationFieldType.weeks();
        int int82 = mutablePeriod65.get(durationFieldType81);
        org.joda.time.Period period84 = period52.withField(durationFieldType81, 517);
        org.joda.time.DateMidnight dateMidnight86 = dateMidnight49.withFieldAdded(durationFieldType81, 53765216);
        org.joda.time.Period period88 = period30.withFieldAdded(durationFieldType81, (int) '4');
        java.lang.String str89 = durationFieldType81.toString();
        java.lang.String str90 = durationFieldType81.toString();
        int int91 = period11.get(durationFieldType81);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1970-01-01" + "'", str36, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(seconds57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(mutableDateTime70);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(durationFieldType75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(durationFieldType81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 0 + "'", int82 == 0);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(dateMidnight86);
        org.junit.Assert.assertNotNull(period88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "weeks" + "'", str89, "weeks");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "weeks" + "'", str90, "weeks");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 773 + "'", int91 == 773);
    }

    @Test
    public void test14105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14105");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property1 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime3 = localTime0.withMillisOfSecond(904);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localTime0.toDateTimeToday(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths(10);
        org.joda.time.DateTime.Property property8 = dateTime5.minuteOfDay();
        org.joda.time.DateTime.Property property9 = dateTime5.year();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) (byte) 100, chronology11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.MutableDateTime mutableDateTime15 = mutableDateTime14.copy();
        org.joda.time.Duration duration16 = period12.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime15);
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableDuration) duration16);
        org.joda.time.DateTime.Property property18 = dateTime5.monthOfYear();
        org.joda.time.DateTimeField dateTimeField19 = property18.getField();
        org.joda.time.DateTime dateTime20 = property18.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime22 = dateTime20.minus((long) 182);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
    }

    @Test
    public void test14106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14106");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 23);
        org.joda.time.Instant instant4 = instant1.withDurationAdded(13328L, 53738208);
        org.joda.time.Chronology chronology5 = instant4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.year();
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test14107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14107");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.withHourOfDay((int) (short) 10);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.hours();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay0.withFieldAdded(durationFieldType3, 53625645);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay0.plusHours((int) '4');
        org.joda.time.TimeOfDay.Property property8 = timeOfDay0.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay9 = property8.withMaximumValue();
        int int10 = property8.get();
        org.joda.time.DateTimeField dateTimeField11 = property8.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = property8.getFieldType();
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property14 = localTime13.minuteOfHour();
        org.joda.time.LocalTime localTime15 = property14.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime17 = localTime15.plusSeconds(53628444);
        org.joda.time.Chronology chronology18 = localTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType12.getField(chronology18);
        org.joda.time.DurationField durationField20 = dateTimeField19.getRangeDurationField();
        org.joda.time.DurationFieldType durationFieldType21 = durationField20.getType();
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(timeOfDay9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 56 + "'", int10 == 56);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationFieldType21);
    }

    @Test
    public void test14108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14108");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay.Property property1 = timeOfDay0.hourOfDay();
        int int2 = property1.get();
        org.joda.time.DateTimeField dateTimeField3 = property1.getField();
        org.junit.Assert.assertNotNull(property1);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 5 + "'", int2 == 5);
        org.junit.Assert.assertNotNull(dateTimeField3);
    }

    @Test
    public void test14109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14109");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 1);
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone7 = dateMidnight6.getZone();
        boolean boolean9 = dateTimeZone7.isStandardOffset((long) 'a');
        org.joda.time.LocalDate localDate10 = org.joda.time.LocalDate.now(dateTimeZone7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter5.withZone(dateTimeZone7);
        boolean boolean12 = dateTimeFormatter5.isPrinter();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) (short) 1, chronology18);
        java.lang.String str20 = localDate19.toString();
        org.joda.time.LocalDate localDate22 = localDate19.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology23 = localDate22.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.eras();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(100, 12, (int) (short) 1, chronology23);
        boolean boolean26 = dateTimeFieldType13.isSupported(chronology23);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter5.withChronology(chronology23);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(readableDuration28, readableInstant29, periodType30);
        mutablePeriod31.setMillis(0);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period((long) (byte) 100, chronology35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime(chronology37);
        org.joda.time.MutableDateTime mutableDateTime39 = mutableDateTime38.copy();
        org.joda.time.Duration duration40 = period36.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime39);
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((-1), 53620134, (int) (byte) -1, 53617719, (int) (byte) 100, 53619079, 1, 53);
        org.joda.time.Period period50 = period36.minus((org.joda.time.ReadablePeriod) mutablePeriod49);
        org.joda.time.Period period51 = period50.normalizedStandard();
        mutablePeriod31.setPeriod((org.joda.time.ReadablePeriod) period51);
        int[] intArray55 = chronology23.get((org.joda.time.ReadablePeriod) period51, (long) 53673313, 1645455255594L);
        org.joda.time.DurationField durationField56 = chronology23.eras();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1970-01-01" + "'", str20, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[52, 1, 2, 5, 23, 59, 42, 281]");
        org.junit.Assert.assertNotNull(durationField56);
    }

    @Test
    public void test14110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14110");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter2.withPivotYear(53626705);
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = dateTimeFormatter7.getPrinter();
        boolean boolean9 = dateTimeFormatter7.isParser();
        java.io.Writer writer10 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter7.printTo(writer10, (long) 53639426);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNull(dateTimePrinter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test14111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14111");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusYears((int) (short) 10);
        org.joda.time.DateTime dateTime10 = dateTime6.plus((long) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays(185);
        int int13 = dateTime10.getYearOfEra();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(readableDuration14, readableInstant15, periodType16);
        org.joda.time.ReadableDuration readableDuration18 = null;
        mutablePeriod17.add(readableDuration18);
        mutablePeriod17.addMonths((int) '#');
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) (short) 1, chronology23);
        int int25 = localDate24.getDayOfYear();
        org.joda.time.LocalTime localTime26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = localDate24.toDateTime(localTime26, dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = localDate24.toDateMidnight(dateTimeZone29);
        org.joda.time.DateMidnight.Property property31 = dateMidnight30.yearOfEra();
        int int32 = dateMidnight30.getMinuteOfHour();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Period period35 = new org.joda.time.Period((long) (byte) 100, chronology34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime(chronology36);
        org.joda.time.MutableDateTime mutableDateTime38 = mutableDateTime37.copy();
        org.joda.time.Duration duration39 = period35.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime38);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight30.plus((org.joda.time.ReadableDuration) duration39);
        mutablePeriod17.add((org.joda.time.ReadableDuration) duration39);
        org.joda.time.DateTime dateTime42 = dateTime10.minus((org.joda.time.ReadablePeriod) mutablePeriod17);
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone44 = dateMidnight43.getZone();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) (short) 1, chronology46);
        java.lang.String str48 = localDate47.toString();
        org.joda.time.LocalDate localDate50 = localDate47.withYearOfEra((int) (byte) 100);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight43.withFields((org.joda.time.ReadablePartial) localDate50);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight43.withField(dateTimeFieldType52, 842);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight43.plus((long) (byte) -1);
        org.joda.time.DateMidnight.Property property57 = dateMidnight56.weekOfWeekyear();
        org.joda.time.PeriodType periodType58 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateMidnight56, periodType58);
        org.joda.time.DateMidnight.Property property60 = dateMidnight56.dayOfMonth();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1970-01-01" + "'", str48, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(property60);
    }

    @Test
    public void test14112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14112");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableDuration0, readableInstant1, periodType2);
        mutablePeriod3.addYears((int) (byte) 0);
        int int6 = mutablePeriod3.getSeconds();
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) 53619708);
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.hours();
        mutableDateTime8.add(durationFieldType9, (int) (byte) 0);
        java.lang.String str12 = durationFieldType9.toString();
        boolean boolean13 = mutablePeriod3.isSupported(durationFieldType9);
        int int14 = mutablePeriod3.getMinutes();
        mutablePeriod3.setPeriod((long) 14255);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "hours" + "'", str12, "hours");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test14113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14113");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((java.lang.Object) periodType0, dateTimeZone2);
        int int4 = localDateTime3.getDayOfMonth();
        int int5 = localDateTime3.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.millisOfSecond();
        int int7 = localDateTime3.getEra();
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.era();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundHalfEvenCopy();
        boolean boolean10 = property8.isLeap();
        org.joda.time.LocalDateTime localDateTime11 = property8.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks(53884154);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.minuteOfHour();
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 21382897 + "'", int5 == 21382897);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test14114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14114");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        int int2 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone4 = dateMidnight3.getZone();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone4);
        mutableDateTime1.setZoneRetainFields(dateTimeZone4);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime8 = property7.roundFloor();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.add(53968279);
        org.joda.time.Period period13 = org.joda.time.Period.days(0);
        mutableDateTime11.add((org.joda.time.ReadablePeriod) period13);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime11.yearOfCentury();
        int int16 = mutableDateTime11.getEra();
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 907 + "'", int2 == 907);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test14115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14115");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = localDate2.toDateMidnight(dateTimeZone7);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.yearOfEra();
        int int10 = dateMidnight8.getMinuteOfHour();
        org.joda.time.Interval interval11 = dateMidnight8.toInterval();
        org.joda.time.MutableDateTime mutableDateTime12 = dateMidnight8.toMutableDateTime();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight8.minusDays(1870);
        int int15 = dateMidnight8.getHourOfDay();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology16);
        org.joda.time.MutableDateTime mutableDateTime18 = mutableDateTime17.copy();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        mutableDateTime18.setZone(dateTimeZone19);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime18.minuteOfDay();
        int int22 = mutableDateTime18.getSecondOfMinute();
        mutableDateTime18.setTime(47541L);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(chronology25);
        int int27 = mutableDateTime26.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime26.yearOfCentury();
        int int29 = mutableDateTime26.getMonthOfYear();
        mutableDateTime18.setMillis((org.joda.time.ReadableInstant) mutableDateTime26);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(readableDuration31, readableInstant32, periodType33);
        mutablePeriod34.addYears((int) (byte) 0);
        int int37 = mutablePeriod34.getMonths();
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod(readableDuration38, readableInstant39, periodType40);
        org.joda.time.ReadableDuration readableDuration42 = null;
        mutablePeriod41.add(readableDuration42);
        mutablePeriod41.addMonths((int) '#');
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate((long) (short) 1, chronology47);
        int int49 = localDate48.getDayOfYear();
        org.joda.time.LocalTime localTime50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = localDate48.toDateTime(localTime50, dateTimeZone51);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateMidnight dateMidnight54 = localDate48.toDateMidnight(dateTimeZone53);
        org.joda.time.DateMidnight.Property property55 = dateMidnight54.yearOfEra();
        int int56 = dateMidnight54.getMinuteOfHour();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.Period period59 = new org.joda.time.Period((long) (byte) 100, chronology58);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutableDateTime mutableDateTime61 = new org.joda.time.MutableDateTime(chronology60);
        org.joda.time.MutableDateTime mutableDateTime62 = mutableDateTime61.copy();
        org.joda.time.Duration duration63 = period59.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime62);
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight54.plus((org.joda.time.ReadableDuration) duration63);
        mutablePeriod41.add((org.joda.time.ReadableDuration) duration63);
        mutablePeriod34.setPeriod((org.joda.time.ReadableDuration) duration63);
        org.joda.time.MutablePeriod mutablePeriod67 = mutablePeriod34.copy();
        org.joda.time.PeriodType periodType68 = mutablePeriod67.getPeriodType();
        mutablePeriod67.addSeconds(773);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.LocalDate localDate75 = new org.joda.time.LocalDate((long) (short) 1, chronology74);
        java.lang.String str76 = localDate75.toString();
        org.joda.time.LocalDate localDate78 = localDate75.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology79 = localDate78.getChronology();
        mutablePeriod67.setPeriod((long) 15, 1L, chronology79);
        org.joda.time.Chronology chronology85 = null;
        org.joda.time.LocalDate localDate86 = new org.joda.time.LocalDate((long) (short) 1, chronology85);
        java.lang.String str87 = localDate86.toString();
        org.joda.time.LocalDate localDate89 = localDate86.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology90 = localDate89.getChronology();
        org.joda.time.YearMonthDay yearMonthDay91 = new org.joda.time.YearMonthDay((long) (short) 1, chronology90);
        mutablePeriod67.setPeriod((long) 53626705, (long) 339, chronology90);
        java.lang.String str93 = chronology90.toString();
        org.joda.time.DateTimeField dateTimeField94 = chronology90.hourOfDay();
        long long96 = dateTimeField94.roundHalfCeiling((long) 57);
        org.joda.time.DateTimeFieldType dateTimeFieldType97 = dateTimeField94.getType();
        int int98 = mutableDateTime26.get(dateTimeFieldType97);
        boolean boolean99 = dateMidnight8.isSupported(dateTimeFieldType97);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 22 + "'", int22 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 920 + "'", int27 == 920);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime62);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(mutablePeriod67);
        org.junit.Assert.assertNotNull(periodType68);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "1970-01-01" + "'", str76, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "1970-01-01" + "'", str87, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate89);
        org.junit.Assert.assertNotNull(chronology90);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "ISOChronology[UTC]" + "'", str93, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField94);
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 0L + "'", long96 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType97);
// flaky:         org.junit.Assert.assertTrue("'" + int98 + "' != '" + 5 + "'", int98 == 5);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + true + "'", boolean99 == true);
    }

    @Test
    public void test14116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14116");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = mutableDateTime1.copy();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime2.minuteOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) (short) 1, chronology7);
        java.lang.String str9 = localDate8.toString();
        org.joda.time.LocalDate localDate11 = localDate8.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology12 = localDate11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.eras();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.year();
        mutableDateTime2.setChronology(chronology12);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime2.hourOfDay();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime2.year();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        mutableDateTime2.setZone(dateTimeZone18);
        java.lang.String str20 = mutableDateTime2.toString();
        mutableDateTime2.setYear(53866948);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime2.millisOfDay();
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-01" + "'", str9, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-22T05:56:22.957+14:53:39.988" + "'", str20, "2022-02-22T05:56:22.957+14:53:39.988");
        org.junit.Assert.assertNotNull(property23);
    }

    @Test
    public void test14117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14117");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((java.lang.Object) periodType0, dateTimeZone2);
        int int4 = localDateTime3.getDayOfMonth();
        org.joda.time.LocalDateTime.Property property5 = localDateTime3.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.withWeekyear(35);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.withWeekyear(10);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime12 = property10.addWrapFieldToCopy(898);
        org.joda.time.LocalDateTime localDateTime13 = property10.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime14 = property10.roundHalfEvenCopy();
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test14118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14118");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = localDate2.toDateMidnight(dateTimeZone7);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.yearOfEra();
        int int10 = dateMidnight8.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property11 = dateMidnight8.year();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        long long14 = dateTimeField12.remainder((long) (short) -1);
        int int15 = dateTimeField12.getMinimumValue();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) (short) 1, chronology20);
        java.lang.String str22 = localDate21.toString();
        org.joda.time.LocalDate localDate24 = localDate21.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology25 = localDate24.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.eras();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(100, 12, (int) (short) 1, chronology25);
        java.util.Locale locale28 = java.util.Locale.CANADA;
        java.lang.String str29 = dateTimeField12.getAsShortText((org.joda.time.ReadablePartial) localDate27, locale28);
        java.util.Locale locale32 = java.util.Locale.CANADA_FRENCH;
        java.util.Set<java.lang.Character> charSet33 = locale32.getExtensionKeys();
        java.util.Calendar.Builder builder34 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder36 = builder34.setLenient(false);
        java.util.Locale locale37 = java.util.Locale.KOREA;
        java.util.Calendar.Builder builder38 = builder34.setLocale(locale37);
        java.util.Locale locale39 = java.util.Locale.ITALY;
        java.lang.String str40 = locale39.getCountry();
        java.util.Calendar.Builder builder41 = builder38.setLocale(locale39);
        java.util.Set<java.lang.String> strSet42 = locale39.getUnicodeLocaleAttributes();
        java.lang.String str43 = locale32.getDisplayCountry(locale39);
        // The following exception was thrown during execution in test generation
        try {
            long long44 = dateTimeField12.set(32575398912000000L, "2022-02-21T14:56:28.930Z", locale32);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-21T14:56:28.930Z\" for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 53619987L + "'", long14 == 53619987L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-292275054) + "'", int15 == (-292275054));
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1970-01-01" + "'", str22, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "100" + "'", str29, "100");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(charSet33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "IT" + "'", str40, "IT");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Canada" + "'", str43, "Canada");
    }

    @Test
    public void test14119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14119");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period((long) (byte) 100, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(chronology3);
        org.joda.time.MutableDateTime mutableDateTime5 = mutableDateTime4.copy();
        org.joda.time.Duration duration6 = period2.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime5);
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((-1), 53620134, (int) (byte) -1, 53617719, (int) (byte) 100, 53619079, 1, 53);
        org.joda.time.Period period16 = period2.minus((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.Period period17 = period16.normalizedStandard();
        int int18 = period17.getMonths();
        org.joda.time.Period period20 = period17.plusHours(845);
        org.joda.time.Period period22 = period20.withHours(53831173);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-6) + "'", int18 == (-6));
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
    }

    @Test
    public void test14120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14120");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) (short) 1, chronology2);
        java.lang.String str4 = localDate3.toString();
        org.joda.time.LocalDate localDate6 = localDate3.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology7 = localDate6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay((long) (short) 1, chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.plusMonths(53617719);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone12 = dateMidnight11.getZone();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (short) 1, chronology14);
        java.lang.String str16 = localDate15.toString();
        org.joda.time.LocalDate localDate18 = localDate15.withYearOfEra((int) (byte) 100);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight11.withFields((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight11.withField(dateTimeFieldType20, 842);
        org.joda.time.YearMonthDay.Property property23 = yearMonthDay8.property(dateTimeFieldType20);
        org.joda.time.YearMonthDay.Property property24 = yearMonthDay8.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay26 = property24.addWrapFieldToCopy(15);
        org.joda.time.YearMonthDay yearMonthDay28 = property24.addWrapFieldToCopy(53626980);
        org.joda.time.YearMonthDay yearMonthDay30 = yearMonthDay28.withYear(53633398);
        org.joda.time.YearMonthDay.Property property31 = yearMonthDay30.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay33 = property31.addWrapFieldToCopy(333);
        org.joda.time.YearMonthDay yearMonthDay34 = property31.withMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay36 = property31.setCopy("14:58:00.000");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"14:58:00.000\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01" + "'", str16, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(yearMonthDay34);
    }

    @Test
    public void test14121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14121");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period((long) (byte) 100, chronology3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(chronology5);
        org.joda.time.MutableDateTime mutableDateTime7 = mutableDateTime6.copy();
        org.joda.time.Duration duration8 = period4.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime7);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime7.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime10 = property9.getMutableDateTime();
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 1, (long) 0, periodType13, chronology14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) (byte) 100, chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.MutableDateTime mutableDateTime21 = mutableDateTime20.copy();
        org.joda.time.Duration duration22 = period18.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime21);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(readableDuration23, readableInstant24, periodType25);
        org.joda.time.ReadableDuration readableDuration27 = null;
        mutablePeriod26.add(readableDuration27);
        mutablePeriod26.addMonths((int) '#');
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(readableDuration31, readableInstant32, periodType33);
        org.joda.time.ReadableDuration readableDuration35 = null;
        mutablePeriod34.add(readableDuration35);
        mutablePeriod34.addMonths((int) '#');
        mutablePeriod26.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod34);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(readableDuration40, readableInstant41, periodType42);
        org.joda.time.ReadableDuration readableDuration44 = null;
        mutablePeriod43.add(readableDuration44);
        mutablePeriod43.addMonths((int) '#');
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((long) (short) 1, chronology49);
        int int51 = localDate50.getDayOfYear();
        org.joda.time.LocalTime localTime52 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateTime dateTime54 = localDate50.toDateTime(localTime52, dateTimeZone53);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateMidnight dateMidnight56 = localDate50.toDateMidnight(dateTimeZone55);
        org.joda.time.DateMidnight.Property property57 = dateMidnight56.yearOfEra();
        int int58 = dateMidnight56.getMinuteOfHour();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.Period period61 = new org.joda.time.Period((long) (byte) 100, chronology60);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutableDateTime mutableDateTime63 = new org.joda.time.MutableDateTime(chronology62);
        org.joda.time.MutableDateTime mutableDateTime64 = mutableDateTime63.copy();
        org.joda.time.Duration duration65 = period61.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime64);
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight56.plus((org.joda.time.ReadableDuration) duration65);
        mutablePeriod43.add((org.joda.time.ReadableDuration) duration65);
        mutablePeriod26.add((org.joda.time.ReadableDuration) duration65);
        mutableDateTime21.add((org.joda.time.ReadableDuration) duration65);
        mutablePeriod15.add((org.joda.time.ReadableDuration) duration65);
        mutableDateTime10.add((org.joda.time.ReadableDuration) duration65);
        org.joda.time.Instant instant72 = instant0.minus((org.joda.time.ReadableDuration) duration65);
        org.joda.time.DateTimeZone dateTimeZone73 = instant0.getZone();
        org.joda.time.Instant instant76 = instant0.withDurationAdded((long) 352, 15);
        org.joda.time.MutableDateTime mutableDateTime77 = instant0.toMutableDateTime();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime64);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertNotNull(instant72);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(instant76);
        org.junit.Assert.assertNotNull(mutableDateTime77);
    }

    @Test
    public void test14122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14122");
        org.joda.time.Period period1 = org.joda.time.Period.months((int) (byte) 1);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test14123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14123");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(56437L);
    }

    @Test
    public void test14124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14124");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = localDate2.toDateMidnight(dateTimeZone7);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.yearOfEra();
        int int10 = dateMidnight8.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property11 = dateMidnight8.year();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight8.withMillis((long) ' ');
        int int14 = dateMidnight13.getYear();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight13.minus((long) 32769);
        org.joda.time.DateMidnight.Property property17 = dateMidnight16.dayOfYear();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) (byte) 100, chronology19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(chronology21);
        org.joda.time.MutableDateTime mutableDateTime23 = mutableDateTime22.copy();
        org.joda.time.Duration duration24 = period20.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime23);
        org.joda.time.Period period26 = period20.plusDays((int) (byte) 10);
        int int27 = period26.getHours();
        org.joda.time.Period period29 = period26.plusMonths(2);
        org.joda.time.Period period31 = period26.minusMonths(12);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight16.minus((org.joda.time.ReadablePeriod) period26);
        org.joda.time.Period period34 = period26.minusDays(53715458);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) (short) 1, chronology36);
        int int38 = localDate37.getDayOfYear();
        org.joda.time.LocalTime localTime39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = localDate37.toDateTime(localTime39, dateTimeZone40);
        org.joda.time.DateTime dateTime43 = dateTime41.plusYears((int) (short) 10);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime(chronology44);
        org.joda.time.MutableDateTime mutableDateTime46 = mutableDateTime45.copy();
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone48 = dateMidnight47.getZone();
        mutableDateTime45.setZoneRetainFields(dateTimeZone48);
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((java.lang.Object) dateTime43, dateTimeZone48);
        org.joda.time.YearMonthDay yearMonthDay51 = dateTime43.toYearMonthDay();
        java.lang.String str52 = yearMonthDay51.toString();
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.YearMonthDay yearMonthDay55 = yearMonthDay51.withPeriodAdded(readablePeriod53, 53677506);
        org.joda.time.YearMonthDay yearMonthDay57 = yearMonthDay55.minusMonths(53656402);
        org.joda.time.TimeOfDay timeOfDay58 = null;
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableDateTime mutableDateTime60 = new org.joda.time.MutableDateTime(chronology59);
        org.joda.time.MutableDateTime mutableDateTime61 = mutableDateTime60.copy();
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone63 = dateMidnight62.getZone();
        mutableDateTime60.setZoneRetainFields(dateTimeZone63);
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime(dateTimeZone63);
        int int67 = dateTimeZone63.getStandardOffset((long) 465);
        long long69 = dateTimeZone63.nextTransition((long) (byte) 1);
        org.joda.time.DateTime dateTime70 = yearMonthDay57.toDateTime(timeOfDay58, dateTimeZone63);
        org.joda.time.MutableDateTime mutableDateTime71 = new org.joda.time.MutableDateTime(dateTimeZone63);
        java.lang.String str72 = dateTimeZone63.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime73 = new org.joda.time.LocalTime((java.lang.Object) period26, dateTimeZone63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.Period");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "1980-01-01" + "'", str52, "1980-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay55);
        org.junit.Assert.assertNotNull(yearMonthDay57);
        org.junit.Assert.assertNotNull(mutableDateTime61);
        org.junit.Assert.assertNotNull(dateTimeZone63);
// flaky:         org.junit.Assert.assertTrue("'" + int67 + "' != '" + 53619988 + "'", int67 == 53619988);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 1L + "'", long69 == 1L);
        org.junit.Assert.assertNotNull(dateTime70);
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "+14:53:39.988" + "'", str72, "+14:53:39.988");
    }

    @Test
    public void test14125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14125");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.withWeekyear((int) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusWeeks((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusMillis(53618333);
        org.joda.time.DateTime dateTime7 = dateTime6.withEarlierOffsetAtOverlap();
        java.lang.String str8 = dateTime7.toString();
        java.util.GregorianCalendar gregorianCalendar9 = dateTime7.toGregorianCalendar();
        java.util.Date date10 = gregorianCalendar9.getTime();
        date10.setMonth(166);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.fromDateFields(date10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -229 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0099-02-23T15:02:44.759+14:53:39.988" + "'", str8, "0099-02-23T15:02:44.759+14:53:39.988");
        org.junit.Assert.assertNotNull(gregorianCalendar9);
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Thu Nov 25 00:09:04 GMT+00:00 112");
    }

    @Test
    public void test14126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14126");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        boolean boolean4 = dateTimeFormatter3.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 1);
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone8 = dateMidnight7.getZone();
        boolean boolean10 = dateTimeZone8.isStandardOffset((long) 'a');
        org.joda.time.LocalDate localDate11 = org.joda.time.LocalDate.now(dateTimeZone8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter6.withZone(dateTimeZone8);
        long long14 = dateTimeZone8.nextTransition((long) 53619708);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone8);
        long long17 = dateTimeZone8.convertUTCToLocal(0L);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(2678400000L, dateTimeZone8);
        long long22 = dateTimeZone8.convertLocalToUTC(50271L, false, (long) 53824840);
        long long24 = dateTimeZone8.previousTransition((long) 54143584);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 53619708L + "'", long14 == 53619708L);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 53619988L + "'", long17 == 53619988L);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-53569717L) + "'", long22 == (-53569717L));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 54143584L + "'", long24 == 54143584L);
    }

    @Test
    public void test14127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14127");
        java.util.Locale locale0 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str1 = locale0.toLanguageTag();
        java.util.Locale locale5 = new java.util.Locale("hi!", "Years", "1970-01-01");
        java.lang.String str6 = locale5.toLanguageTag();
        java.lang.String str7 = locale5.getCountry();
        java.util.Locale locale8 = java.util.Locale.JAPANESE;
        java.lang.String str9 = locale5.getDisplayLanguage(locale8);
        java.lang.String str10 = locale0.getDisplayLanguage(locale5);
        java.util.Locale locale11 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str12 = locale11.toLanguageTag();
        java.lang.String str13 = locale5.getDisplayLanguage(locale11);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = locale5.getUnicodeLocaleType("2022-02-22T05:56:04.486+14:53:39.988");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 2022-02-22T05:56:04.486+14:53:39.988");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "fr-CA" + "'", str1, "fr-CA");
        org.junit.Assert.assertEquals(locale5.toString(), "hi!_YEARS_1970-01-01");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "und" + "'", str6, "und");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "YEARS" + "'", str7, "YEARS");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "French" + "'", str10, "French");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "fr-CA" + "'", str12, "fr-CA");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
    }

    @Test
    public void test14128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14128");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setLenient(false);
        java.util.Calendar.Builder builder7 = builder0.setTimeOfDay((int) ' ', 53617440, 3, 53617649);
        java.util.Calendar.Builder builder11 = builder0.setWeekDate(47, 53627214, 10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((long) (byte) 100, chronology13);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = mutableDateTime16.copy();
        org.joda.time.Duration duration18 = period14.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime17);
        org.joda.time.Period period20 = period14.plusDays((int) (byte) 10);
        int int21 = period20.getHours();
        org.joda.time.Period period23 = period20.plusMonths(2);
        org.joda.time.Period period25 = period20.minusMonths(12);
        int int26 = period20.getYears();
        int[] intArray27 = period20.getValues();
        java.util.Calendar.Builder builder28 = builder0.setFields(intArray27);
        java.util.TimeZone timeZone30 = java.util.TimeZone.getTimeZone("2022-02-21T14:54:05.059Z");
        timeZone30.setID("1970-01-01");
        int int34 = timeZone30.getOffset((long) 53667278);
        java.util.TimeZone timeZone36 = java.util.TimeZone.getTimeZone("2022-02-21T14:54:05.059Z");
        boolean boolean37 = timeZone30.hasSameRules(timeZone36);
        java.util.TimeZone.setDefault(timeZone30);
        java.util.Calendar.Builder builder39 = builder0.setTimeZone(timeZone30);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0, 0, 10, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(timeZone30);
        org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(timeZone36);
// flaky:         org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test14129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14129");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 1);
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone7 = dateMidnight6.getZone();
        boolean boolean9 = dateTimeZone7.isStandardOffset((long) 'a');
        org.joda.time.LocalDate localDate10 = org.joda.time.LocalDate.now(dateTimeZone7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter5.withZone(dateTimeZone7);
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone7);
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay12.plusDays(53747412);
        org.joda.time.DateMidnight dateMidnight15 = yearMonthDay14.toDateMidnight();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(dateMidnight15);
    }

    @Test
    public void test14130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14130");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 352, (long) 544);
    }

    @Test
    public void test14131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14131");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period((long) (byte) 100, chronology3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(chronology5);
        org.joda.time.MutableDateTime mutableDateTime7 = mutableDateTime6.copy();
        org.joda.time.Duration duration8 = period4.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime7);
        int int9 = period4.size();
        org.joda.time.Period period11 = period4.withWeeks(842);
        org.joda.time.DurationFieldType[] durationFieldTypeArray12 = period4.getFieldTypes();
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.forFields(durationFieldTypeArray12);
        org.joda.time.PeriodType periodType14 = periodType13.withHoursRemoved();
        org.joda.time.PeriodType periodType15 = periodType14.withYearsRemoved();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) (short) 1, chronology19);
        java.lang.String str21 = localDate20.toString();
        org.joda.time.LocalDate localDate23 = localDate20.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology24 = localDate23.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.yearOfEra();
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType17.getField(chronology24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period((long) (byte) 100, chronology28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(chronology30);
        org.joda.time.MutableDateTime mutableDateTime32 = mutableDateTime31.copy();
        org.joda.time.Duration duration33 = period29.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime32);
        org.joda.time.Period period35 = period29.plusDays((int) (byte) 10);
        int int36 = period35.getHours();
        org.joda.time.Period period38 = period35.plusMonths(2);
        org.joda.time.Period period40 = period35.minusMonths(12);
        org.joda.time.Period period42 = period35.withYears(2057);
        int[] intArray44 = chronology24.get((org.joda.time.ReadablePeriod) period42, 259200000L);
        boolean boolean45 = dateTimeFieldType16.isSupported(chronology24);
        org.joda.time.Period period46 = new org.joda.time.Period((long) 53706457, (long) 53655716, periodType14, chronology24);
        org.joda.time.DurationField durationField47 = chronology24.days();
        long long51 = chronology24.add((long) 646, (long) 646, 53982867);
        org.joda.time.DateTimeField dateTimeField52 = chronology24.yearOfEra();
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(durationFieldTypeArray12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1970-01-01" + "'", str21, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0, 0, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 34872932728L + "'", long51 == 34872932728L);
        org.junit.Assert.assertNotNull(dateTimeField52);
    }

    @Test
    public void test14132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14132");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) (short) 1, chronology2);
        java.lang.String str4 = localDate3.toString();
        org.joda.time.LocalDate localDate6 = localDate3.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology7 = localDate6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay((long) (short) 1, chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.plusMonths(53617719);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(readableDuration11, readableInstant12, periodType13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        mutablePeriod14.add(readableDuration15);
        mutablePeriod14.addMonths((int) '#');
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(readableDuration19, readableInstant20, periodType21);
        org.joda.time.ReadableDuration readableDuration23 = null;
        mutablePeriod22.add(readableDuration23);
        mutablePeriod22.addMonths((int) '#');
        mutablePeriod14.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod22);
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay10.plus((org.joda.time.ReadablePeriod) mutablePeriod22);
        org.joda.time.TimeOfDay timeOfDay29 = null;
        org.joda.time.DateTime dateTime30 = yearMonthDay28.toDateTime(timeOfDay29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) (short) 1, chronology32);
        int int34 = localDate33.getDayOfYear();
        org.joda.time.LocalTime localTime35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = localDate33.toDateTime(localTime35, dateTimeZone36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = localDate33.toDateMidnight(dateTimeZone38);
        org.joda.time.DateMidnight.Property property40 = dateMidnight39.yearOfEra();
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone42 = dateMidnight41.getZone();
        org.joda.time.MutableDateTime mutableDateTime43 = dateMidnight39.toMutableDateTime(dateTimeZone42);
        org.joda.time.DateMidnight dateMidnight44 = yearMonthDay28.toDateMidnight(dateTimeZone42);
        int int46 = dateTimeZone42.getStandardOffset((long) 53712167);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate(dateTimeZone42);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(dateMidnight44);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 53619988 + "'", int46 == 53619988);
    }

    @Test
    public void test14133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14133");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime1 = timeOfDay0.toDateTimeToday();
        org.joda.time.DateTime dateTime3 = dateTime1.withMillisOfSecond(409);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(12);
        org.joda.time.DateTime.Property property6 = dateTime3.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.DateTime dateTime8 = property6.roundHalfCeilingCopy();
        org.joda.time.tz.NameProvider nameProvider9 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider9);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider9);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider9);
        java.util.Locale.Builder builder13 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder16 = builder13.setExtension('a', "IT");
        java.util.Locale.Builder builder18 = builder13.addUnicodeLocaleAttribute("1970");
        java.util.Locale.Builder builder19 = builder18.clearExtensions();
        java.util.Locale.Builder builder20 = builder19.clear();
        java.util.Locale locale21 = java.util.Locale.UK;
        java.lang.String str22 = locale21.getDisplayScript();
        java.util.Locale.Builder builder23 = builder20.setLocale(locale21);
        java.lang.String str24 = locale21.getScript();
        java.util.Set<java.lang.String> strSet25 = locale21.getUnicodeLocaleKeys();
        java.lang.String str28 = nameProvider9.getShortName(locale21, "2022-02-21T14:55:41.757Z", "2022-02-21T14:55:56.459Z");
        java.lang.String str29 = property6.getAsShortText(locale21);
        java.lang.String str30 = locale21.toLanguageTag();
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(nameProvider9);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "8" + "'", str29, "8");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "en-GB" + "'", str30, "en-GB");
    }

    @Test
    public void test14134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14134");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property1 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime3 = localTime0.withMillisOfSecond(904);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localTime0.toDateTimeToday(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths(10);
        org.joda.time.DateTime.Property property8 = dateTime5.minuteOfDay();
        org.joda.time.DateTime dateTime9 = property8.getDateTime();
        org.joda.time.DateTime.Property property10 = dateTime9.dayOfWeek();
        org.joda.time.DateTime dateTime12 = dateTime9.minusWeeks((int) 'a');
        org.joda.time.DateTime.Property property13 = dateTime9.weekyear();
        org.joda.time.DateTime dateTime14 = property13.roundHalfEvenCopy();
        int int15 = dateTime14.getSecondOfMinute();
        boolean boolean16 = dateTime14.isEqualNow();
        java.lang.String str17 = dateTime14.toString();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-01-03T00:00:00.000+14:53:39.988" + "'", str17, "2022-01-03T00:00:00.000+14:53:39.988");
    }

    @Test
    public void test14135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14135");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.withWeekyear((int) (short) 100);
        java.util.Locale locale3 = null;
        java.util.Calendar calendar4 = dateTime0.toCalendar(locale3);
        org.joda.time.YearMonthDay yearMonthDay5 = org.joda.time.YearMonthDay.fromCalendarFields(calendar4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = yearMonthDay5.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay5.plusDays(53626727);
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay5.plusYears(53642637);
        org.joda.time.YearMonthDay.Property property12 = yearMonthDay11.monthOfYear();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (short) 1, chronology14);
        java.lang.String str16 = localDate15.toString();
        org.joda.time.LocalDate localDate18 = localDate15.withYearOfEra((int) (byte) 100);
        int int19 = localDate15.getDayOfYear();
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) 53619708);
        org.joda.time.DateTime dateTime22 = localDate15.toDateTime((org.joda.time.ReadableInstant) mutableDateTime21);
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone24 = dateMidnight23.getZone();
        boolean boolean26 = dateTimeZone24.isStandardOffset((long) 'a');
        org.joda.time.LocalDate localDate27 = org.joda.time.LocalDate.now(dateTimeZone24);
        java.lang.String str29 = dateTimeZone24.getNameKey((long) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime30 = mutableDateTime21.toMutableDateTime(dateTimeZone24);
        long long32 = dateTimeZone24.previousTransition((long) 53632);
        long long34 = dateTimeZone24.convertUTCToLocal((long) 53643405);
        long long36 = dateTimeZone24.previousTransition((long) (byte) 1);
        org.joda.time.DateTime dateTime37 = yearMonthDay11.toDateTimeAtCurrentTime(dateTimeZone24);
        int int38 = yearMonthDay11.getMonthOfYear();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((long) (short) 1, chronology40);
        int int42 = localDate41.getDayOfYear();
        org.joda.time.LocalTime localTime43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = localDate41.toDateTime(localTime43, dateTimeZone44);
        org.joda.time.DateTime dateTime47 = dateTime45.plusYears((int) (short) 10);
        org.joda.time.DateTime dateTime49 = dateTime45.plus((long) 100);
        org.joda.time.DateTime.Property property50 = dateTime45.weekOfWeekyear();
        java.lang.String str51 = property50.getAsShortText();
        boolean boolean52 = property50.isLeap();
        org.joda.time.DateTime dateTime54 = property50.addWrapFieldToCopy(26);
        org.joda.time.DateTime dateTime55 = yearMonthDay11.toDateTime((org.joda.time.ReadableInstant) dateTime54);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645455763619,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+14:53:39.988,offset=53619988,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=5,HOUR_OF_DAY=5,MINUTE=56,SECOND=23,MILLISECOND=607,ZONE_OFFSET=53619988,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01" + "'", str16, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(localDate27);
// flaky:         org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 53632L + "'", long32 == 53632L);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + 107263393L + "'", long34 == 107263393L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "1" + "'", str51, "1");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
    }

    @Test
    public void test14136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14136");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setLenient(false);
        java.util.Calendar.Builder builder7 = builder0.setTimeOfDay((int) ' ', 53617440, 3, 53617649);
        java.util.Calendar.Builder builder11 = builder0.setWeekDate(47, 53627214, 10);
        java.util.TimeZone timeZone13 = java.util.TimeZone.getTimeZone("P10Y904M53619708W47DT714H-292275107M-38.905S");
        java.util.TimeZone.setDefault(timeZone13);
        java.util.Calendar.Builder builder15 = builder0.setTimeZone(timeZone13);
        java.time.ZoneId zoneId16 = timeZone13.toZoneId();
        java.util.TimeZone timeZone17 = java.util.TimeZone.getTimeZone(zoneId16);
        java.util.TimeZone timeZone18 = java.util.TimeZone.getTimeZone(zoneId16);
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay21 = timeOfDay19.withHourOfDay((int) (short) 10);
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.hours();
        org.joda.time.TimeOfDay timeOfDay24 = timeOfDay19.withFieldAdded(durationFieldType22, 53625645);
        org.joda.time.TimeOfDay timeOfDay26 = timeOfDay19.plusHours((int) '4');
        org.joda.time.TimeOfDay.Property property27 = timeOfDay19.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField28 = property27.getField();
        java.util.Locale locale30 = java.util.Locale.forLanguageTag("14:54:56.059");
        java.lang.String str31 = property27.getAsText(locale30);
        java.util.Locale locale32 = java.util.Locale.PRC;
        java.lang.String str33 = locale30.getDisplayCountry(locale32);
        java.lang.String str34 = locale32.getVariant();
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(timeZone18, locale32);
        calendar35.setFirstDayOfWeek(591);
        java.lang.String str38 = calendar35.toString();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(zoneId16);
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "56" + "'", str31, "56");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(calendar35);
// flaky:         org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=1645455764067,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=591,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=3,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=44,MILLISECOND=67,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "java.util.GregorianCalendar[time=1645455764067,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=591,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=3,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=44,MILLISECOND=67,ZONE_OFFSET=0,DST_OFFSET=0]" + "'", str38, "java.util.GregorianCalendar[time=1645455764067,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=591,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=3,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=44,MILLISECOND=67,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test14137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14137");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property1 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime3 = localTime0.withMillisOfSecond(904);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localTime0.toDateTimeToday(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths(10);
        org.joda.time.DateTime.Property property8 = dateTime5.minuteOfDay();
        org.joda.time.DateTime.Property property9 = dateTime5.year();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) (byte) 100, chronology11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.MutableDateTime mutableDateTime15 = mutableDateTime14.copy();
        org.joda.time.Duration duration16 = period12.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime15);
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableDuration) duration16);
        org.joda.time.DateTime.Property property18 = dateTime5.monthOfYear();
        java.util.Locale locale19 = java.util.Locale.ITALY;
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        java.lang.String str21 = locale20.getDisplayCountry();
        java.lang.String str22 = locale19.getDisplayLanguage(locale20);
        java.lang.String str23 = property18.getAsText(locale20);
        org.joda.time.DateTimeField dateTimeField24 = property18.getField();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime26 = property18.setCopy("2022-02-21T14:56:16.829Z");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-21T14:56:16.829Z\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u30a4\u30bf\u30ea\u30a2\u8a9e" + "'", str22, "\u30a4\u30bf\u30ea\u30a2\u8a9e");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u6708" + "'", str23, "\u6708");
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test14138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14138");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone2 = provider0.getZone("Years");
        org.joda.time.DateTimeZone dateTimeZone4 = provider0.getZone("P10Y904M53619708W47DT714H-292275107M-38.905S");
        org.joda.time.DateTimeZone dateTimeZone6 = provider0.getZone("2022-02-21T14:59:50.517Z");
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNull(dateTimeZone2);
        org.junit.Assert.assertNull(dateTimeZone4);
        org.junit.Assert.assertNull(dateTimeZone6);
    }

    @Test
    public void test14139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14139");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.days();
        org.joda.time.PeriodType periodType1 = periodType0.withMonthsRemoved();
        int int2 = periodType1.size();
        org.joda.time.PeriodType periodType3 = periodType1.withMonthsRemoved();
        org.joda.time.PeriodType periodType4 = periodType3.withMillisRemoved();
        org.joda.time.PeriodType periodType5 = periodType4.withSecondsRemoved();
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
    }

    @Test
    public void test14140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14140");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property1 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime3 = property1.addCopy((long) (short) -1);
        org.joda.time.LocalTime.Property property4 = localTime3.secondOfMinute();
        org.joda.time.LocalTime localTime6 = property4.addWrapFieldToCopy(53703240);
        org.joda.time.LocalTime localTime8 = localTime6.minusHours(199);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
    }

    @Test
    public void test14141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14141");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.MutableDateTime mutableDateTime9 = mutableDateTime8.copy();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        mutableDateTime9.setZone(dateTimeZone10);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime9.minuteOfDay();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTime dateTime16 = dateTime13.withFieldAdded(durationFieldType14, (int) (byte) 0);
        mutableDateTime9.add(durationFieldType14, 8);
        org.joda.time.LocalDate localDate20 = localDate2.withFieldAdded(durationFieldType14, 3);
        org.joda.time.DateTime dateTime21 = localDate2.toDateTimeAtMidnight();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) (short) 1, chronology23);
        int int25 = localDate24.getDayOfYear();
        org.joda.time.LocalTime localTime26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = localDate24.toDateTime(localTime26, dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = localDate24.toDateMidnight(dateTimeZone29);
        org.joda.time.DateMidnight.Property property31 = dateMidnight30.yearOfEra();
        int int32 = dateMidnight30.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property33 = dateMidnight30.year();
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight30.plusYears((int) ' ');
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((java.lang.Object) dateMidnight30);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(readableDuration37, readableInstant38, periodType39);
        org.joda.time.ReadableDuration readableDuration41 = null;
        mutablePeriod40.add(readableDuration41);
        mutablePeriod40.addMonths((int) '#');
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) (short) 1, chronology46);
        int int48 = localDate47.getDayOfYear();
        org.joda.time.LocalTime localTime49 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateTime dateTime51 = localDate47.toDateTime(localTime49, dateTimeZone50);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateMidnight dateMidnight53 = localDate47.toDateMidnight(dateTimeZone52);
        org.joda.time.DateMidnight.Property property54 = dateMidnight53.yearOfEra();
        int int55 = dateMidnight53.getMinuteOfHour();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.Period period58 = new org.joda.time.Period((long) (byte) 100, chronology57);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutableDateTime mutableDateTime60 = new org.joda.time.MutableDateTime(chronology59);
        org.joda.time.MutableDateTime mutableDateTime61 = mutableDateTime60.copy();
        org.joda.time.Duration duration62 = period58.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime61);
        org.joda.time.DateMidnight dateMidnight63 = dateMidnight53.plus((org.joda.time.ReadableDuration) duration62);
        mutablePeriod40.add((org.joda.time.ReadableDuration) duration62);
        org.joda.time.PeriodType periodType65 = org.joda.time.PeriodType.years();
        java.lang.String str66 = periodType65.getName();
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod(periodType65);
        org.joda.time.PeriodType periodType68 = periodType65.withYearsRemoved();
        org.joda.time.Period period69 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight30, (org.joda.time.ReadableDuration) duration62, periodType68);
        org.joda.time.DateMidnight dateMidnight71 = dateMidnight30.plusWeeks(53639477);
        int int72 = dateTime21.compareTo((org.joda.time.ReadableInstant) dateMidnight71);
        org.joda.time.DateMidnight dateMidnight74 = dateMidnight71.plusDays(185);
        int int75 = dateMidnight74.getDayOfYear();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime61);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Years" + "'", str66, "Years");
        org.junit.Assert.assertNotNull(periodType68);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 295 + "'", int75 == 295);
    }

    @Test
    public void test14142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14142");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property1 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime2 = property1.roundFloorCopy();
        org.joda.time.LocalTime localTime3 = property1.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime4 = property1.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime6 = localTime4.plusHours(792);
        int int7 = localTime4.size();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) (byte) 100, chronology9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.MutableDateTime mutableDateTime13 = mutableDateTime12.copy();
        org.joda.time.Duration duration14 = period10.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime13);
        org.joda.time.Period period16 = period10.plusDays((int) (byte) 10);
        int int17 = period16.getHours();
        org.joda.time.Period period19 = period16.plusMonths(2);
        org.joda.time.Period period21 = period16.minusMonths(12);
        org.joda.time.LocalTime localTime23 = localTime4.withPeriodAdded((org.joda.time.ReadablePeriod) period16, 185);
        org.joda.time.LocalTime localTime25 = localTime4.plusMillis(378);
        boolean boolean27 = localTime4.equals((java.lang.Object) 53708524);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test14143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14143");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) (short) 1, chronology3);
        java.lang.String str5 = localDate4.toString();
        org.joda.time.LocalDate localDate7 = localDate4.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology8 = localDate7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.clockhourOfDay();
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 14, chronology8);
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((-1L), chronology8);
        org.joda.time.DateTimeField dateTimeField13 = chronology8.minuteOfDay();
        org.joda.time.DateMidnight dateMidnight14 = org.joda.time.DateMidnight.now(chronology8);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology8);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateMidnight14);
    }

    @Test
    public void test14144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14144");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 53619248, (long) 1);
        mutablePeriod2.add((int) (byte) 10, 904, 53619708, 47, 10, (-292275054), 0, 342);
        mutablePeriod2.addHours(718);
        org.joda.time.Period period14 = mutablePeriod2.toPeriod();
        java.lang.Object obj17 = null;
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) (short) 1, chronology20);
        java.lang.String str22 = localDate21.toString();
        org.joda.time.LocalDate localDate24 = localDate21.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology25 = localDate24.getChronology();
        org.joda.time.YearMonthDay yearMonthDay26 = new org.joda.time.YearMonthDay((long) (short) 1, chronology25);
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay26.plusMonths(53617719);
        int int29 = yearMonthDay26.getDayOfMonth();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) (short) 1, chronology31);
        java.lang.String str33 = localDate32.toString();
        org.joda.time.LocalDate localDate35 = localDate32.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology36 = localDate35.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.yearOfEra();
        org.joda.time.YearMonthDay yearMonthDay38 = yearMonthDay26.withChronologyRetainFields(chronology36);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(obj17, chronology36);
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime(0L, chronology36);
        mutablePeriod2.add(1645455250847L, chronology36);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1970-01-01" + "'", str22, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1970-01-01" + "'", str33, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(yearMonthDay38);
    }

    @Test
    public void test14145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14145");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((java.lang.Object) periodType0, dateTimeZone2);
        int int4 = localDateTime3.getDayOfMonth();
        int int5 = localDateTime3.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.millisOfSecond();
        int int7 = localDateTime3.getEra();
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.era();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime3.minusSeconds((int) 'x');
        org.joda.time.LocalDateTime.Property property11 = localDateTime3.weekyear();
        org.joda.time.LocalDateTime localDateTime13 = property11.addToCopy((long) 53728);
        org.joda.time.LocalDateTime localDateTime14 = property11.roundFloorCopy();
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        int int16 = localDateTime14.getSecondOfMinute();
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 21384227 + "'", int5 == 21384227);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test14146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14146");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((long) 342, 47541L, periodType2);
        org.joda.time.Period period5 = period3.minusWeeks(11);
        org.joda.time.Period period7 = period3.withMillis(53939972);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
    }

    @Test
    public void test14147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14147");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = localDate2.toDateMidnight(dateTimeZone7);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.yearOfEra();
        int int10 = dateMidnight8.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property11 = dateMidnight8.era();
        java.lang.String str12 = property11.getAsText();
        org.joda.time.DateMidnight dateMidnight13 = property11.roundFloorCopy();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.withCenturyOfEra(655);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(property11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u897f\u66a6" + "'", str12, "\u897f\u66a6");
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight15);
    }

    @Test
    public void test14148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14148");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone1 = dateMidnight0.getZone();
        boolean boolean3 = dateTimeZone1.isStandardOffset((long) 'a');
        org.joda.time.LocalDate localDate4 = org.joda.time.LocalDate.now(dateTimeZone1);
        java.lang.String str6 = dateTimeZone1.getNameKey((long) (byte) 10);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight8 = org.joda.time.DateMidnight.now(dateTimeZone1);
        int int9 = dateMidnight8.getYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(localDate4);
// flaky:         org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
    }

    @Test
    public void test14149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14149");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        java.lang.String str3 = localDate2.toString();
        org.joda.time.LocalDate localDate5 = localDate2.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology6 = localDate5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.year();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(chronology6);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone12 = dateMidnight11.getZone();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.plusYears(53619079);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(chronology15);
        int int17 = mutableDateTime16.getMillisOfSecond();
        boolean boolean18 = dateMidnight11.isEqual((org.joda.time.ReadableInstant) mutableDateTime16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) (short) 1, chronology20);
        int int22 = localDate21.getDayOfYear();
        org.joda.time.LocalTime localTime23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = localDate21.toDateTime(localTime23, dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = localDate21.toDateMidnight(dateTimeZone26);
        org.joda.time.DateMidnight.Property property28 = dateMidnight27.yearOfEra();
        int int29 = dateMidnight27.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property30 = dateMidnight27.year();
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight27.plusYears((int) ' ');
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((java.lang.Object) dateMidnight27);
        boolean boolean34 = mutableDateTime16.isEqual((org.joda.time.ReadableInstant) dateMidnight27);
        mutableDateTime16.addWeeks(53636825);
        org.joda.time.DateTimeZone dateTimeZone37 = mutableDateTime16.getZone();
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone37);
        int int40 = dateTimeZone37.getStandardOffset((long) 53825214);
        long long43 = dateTimeZone37.convertLocalToUTC((long) 1980, true);
        mutableDateTime10.setZoneRetainFields(dateTimeZone37);
        boolean boolean45 = mutableDateTime10.isBeforeNow();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01" + "'", str3, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateMidnight14);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 276 + "'", int17 == 276);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 53619988 + "'", int40 == 53619988);
// flaky:         org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-53618008L) + "'", long43 == (-53618008L));
// flaky:         org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test14150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14150");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((java.lang.Object) periodType0, dateTimeZone2);
        int int4 = localDateTime3.getDayOfMonth();
        int int5 = localDateTime3.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.millisOfSecond();
        int int7 = localDateTime3.getEra();
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.era();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        org.joda.time.DurationField durationField10 = dateTimeField9.getLeapDurationField();
        org.joda.time.format.DateTimePrinter dateTimePrinter12 = null;
        org.joda.time.format.DateTimeParser dateTimeParser13 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter12, dateTimeParser13);
        boolean boolean15 = dateTimeFormatter14.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter14.withPivotYear((java.lang.Integer) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter17.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter18.withPivotYear(202233);
        boolean boolean21 = dateTimeFormatter20.isParser();
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.dayTime();
        org.joda.time.PeriodType periodType25 = periodType24.withWeeksRemoved();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) (short) 1, chronology28);
        java.lang.String str30 = localDate29.toString();
        org.joda.time.LocalDate localDate32 = localDate29.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology33 = localDate32.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.yearOfEra();
        org.joda.time.DateTimeField dateTimeField35 = dateTimeFieldType26.getField(chronology33);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((long) (byte) 100, chronology37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime(chronology39);
        org.joda.time.MutableDateTime mutableDateTime41 = mutableDateTime40.copy();
        org.joda.time.Duration duration42 = period38.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime41);
        org.joda.time.Period period44 = period38.plusDays((int) (byte) 10);
        int int45 = period44.getHours();
        org.joda.time.Period period47 = period44.plusMonths(2);
        org.joda.time.Period period49 = period44.minusMonths(12);
        org.joda.time.Period period51 = period44.withYears(2057);
        int[] intArray53 = chronology33.get((org.joda.time.ReadablePeriod) period51, 259200000L);
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((long) '#', (long) 53695081, periodType24, chronology33);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = dateTimeFormatter20.withChronology(chronology33);
        java.util.Locale locale56 = dateTimeFormatter20.getLocale();
        java.util.Locale locale57 = java.util.Locale.getDefault();
        java.lang.String str58 = locale57.getLanguage();
        java.util.Set<java.lang.String> strSet59 = locale57.getUnicodeLocaleKeys();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = dateTimeFormatter20.withLocale(locale57);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str61 = dateTimeField9.getAsShortText(54039341, locale57);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 54039341");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 21384299 + "'", int5 == 21384299);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1970-01-01" + "'", str30, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[0, 0, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(dateTimeFormatter55);
        org.junit.Assert.assertNull(locale56);
        org.junit.Assert.assertNotNull(locale57);
// flaky:         org.junit.Assert.assertEquals(locale57.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "ja" + "'", str58, "ja");
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertNotNull(dateTimeFormatter60);
    }

    @Test
    public void test14151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14151");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = dateMidnight0.withCenturyOfEra(1);
        org.joda.time.DateTime dateTime3 = dateMidnight2.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime4 = dateMidnight2.toMutableDateTimeISO();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((long) (byte) 100, chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime9.copy();
        org.joda.time.Duration duration11 = period7.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime10);
        org.joda.time.Seconds seconds12 = period7.toStandardSeconds();
        org.joda.time.Period period14 = period7.plusYears(0);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight2.withPeriodAdded((org.joda.time.ReadablePeriod) period7, 10);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) (short) 1, chronology18);
        java.lang.String str20 = localDate19.toString();
        org.joda.time.LocalDate localDate22 = localDate19.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology23 = localDate22.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.clockhourOfDay();
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(chronology23);
        long long29 = chronology23.add((long) 891, (long) 6, 53678034);
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay((java.lang.Object) dateMidnight2, chronology23);
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay30.minusDays(359);
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property35 = localTime34.minuteOfHour();
        org.joda.time.LocalTime localTime37 = property35.addCopy((long) (short) -1);
        org.joda.time.LocalTime.Property property38 = localTime37.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField39 = property38.getField();
        boolean boolean41 = dateTimeField39.isLeap(32441870357840728L);
        org.joda.time.LocalTime localTime43 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property44 = localTime43.minuteOfHour();
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone46 = dateMidnight45.getZone();
        long long47 = property44.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight45);
        org.joda.time.DateMidnight.Property property48 = dateMidnight45.dayOfWeek();
        org.joda.time.DateMidnight.Property property49 = dateMidnight45.monthOfYear();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime(chronology50);
        org.joda.time.MutableDateTime mutableDateTime52 = mutableDateTime51.copy();
        mutableDateTime51.addMinutes(0);
        java.lang.String str55 = mutableDateTime51.toString();
        int int56 = mutableDateTime51.getYearOfEra();
        org.joda.time.Chronology chronology57 = mutableDateTime51.getChronology();
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight45.withChronology(chronology57);
        org.joda.time.DateMidnight.Property property59 = dateMidnight45.centuryOfEra();
        java.util.Locale locale60 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str61 = property59.getAsShortText(locale60);
        java.lang.String str62 = locale60.getVariant();
        java.lang.String str63 = dateTimeField39.getAsText(53923926L, locale60);
        java.util.Locale locale64 = java.util.Locale.JAPANESE;
        java.lang.String str65 = locale64.getCountry();
        java.lang.String str66 = locale64.getDisplayVariant();
        java.lang.String str67 = locale60.getDisplayScript(locale64);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str68 = yearMonthDay30.toString("2022-02-21T14:59:26.673Z", locale64);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1970-01-01" + "'", str20, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 322069095L + "'", long29 == 322069095L);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTimeZone46);
// flaky:         org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-27423549L) + "'", long47 == (-27423549L));
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(mutableDateTime52);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "2022-02-22T05:56:24.328+14:53:39.988" + "'", str55, "2022-02-22T05:56:24.328+14:53:39.988");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2022 + "'", int56 == 2022);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "20" + "'", str61, "20");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "43" + "'", str63, "43");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
    }

    @Test
    public void test14152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14152");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.dayTime();
        org.joda.time.PeriodType periodType1 = periodType0.withWeeksRemoved();
        org.joda.time.PeriodType periodType2 = periodType1.withYearsRemoved();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(periodType2);
        java.lang.Object obj4 = mutablePeriod3.clone();
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "PT0S");
    }

    @Test
    public void test14153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14153");
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(readableDuration2, readableInstant3, periodType4);
        mutablePeriod5.addYears((int) (byte) 0);
        int int8 = mutablePeriod5.getMonths();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(readableDuration9, readableInstant10, periodType11);
        org.joda.time.ReadableDuration readableDuration13 = null;
        mutablePeriod12.add(readableDuration13);
        mutablePeriod12.addMonths((int) '#');
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) (short) 1, chronology18);
        int int20 = localDate19.getDayOfYear();
        org.joda.time.LocalTime localTime21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = localDate19.toDateTime(localTime21, dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = localDate19.toDateMidnight(dateTimeZone24);
        org.joda.time.DateMidnight.Property property26 = dateMidnight25.yearOfEra();
        int int27 = dateMidnight25.getMinuteOfHour();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((long) (byte) 100, chronology29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime(chronology31);
        org.joda.time.MutableDateTime mutableDateTime33 = mutableDateTime32.copy();
        org.joda.time.Duration duration34 = period30.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime33);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight25.plus((org.joda.time.ReadableDuration) duration34);
        mutablePeriod12.add((org.joda.time.ReadableDuration) duration34);
        mutablePeriod5.setPeriod((org.joda.time.ReadableDuration) duration34);
        org.joda.time.MutablePeriod mutablePeriod38 = mutablePeriod5.copy();
        org.joda.time.PeriodType periodType39 = mutablePeriod38.getPeriodType();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) (short) 1, chronology42);
        java.lang.String str44 = localDate43.toString();
        org.joda.time.LocalDate localDate46 = localDate43.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology47 = localDate46.getChronology();
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime(533L, chronology47);
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(0L, (long) 53619770, periodType39, chronology47);
        org.joda.time.PeriodType periodType50 = periodType39.withDaysRemoved();
        org.joda.time.PeriodType periodType51 = periodType39.withHoursRemoved();
        java.lang.Object obj53 = null;
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate((long) (short) 1, chronology56);
        java.lang.String str58 = localDate57.toString();
        org.joda.time.LocalDate localDate60 = localDate57.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology61 = localDate60.getChronology();
        org.joda.time.YearMonthDay yearMonthDay62 = new org.joda.time.YearMonthDay((long) (short) 1, chronology61);
        org.joda.time.YearMonthDay yearMonthDay64 = yearMonthDay62.plusMonths(53617719);
        int int65 = yearMonthDay62.getDayOfMonth();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate((long) (short) 1, chronology67);
        java.lang.String str69 = localDate68.toString();
        org.joda.time.LocalDate localDate71 = localDate68.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology72 = localDate71.getChronology();
        org.joda.time.DateTimeField dateTimeField73 = chronology72.yearOfEra();
        org.joda.time.YearMonthDay yearMonthDay74 = yearMonthDay62.withChronologyRetainFields(chronology72);
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime(obj53, chronology72);
        org.joda.time.MutableDateTime mutableDateTime76 = new org.joda.time.MutableDateTime(0L, chronology72);
        org.joda.time.DurationField durationField77 = chronology72.seconds();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime((java.lang.Object) periodType51, chronology72);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.PeriodType");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(mutablePeriod38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1970-01-01" + "'", str44, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "1970-01-01" + "'", str58, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(yearMonthDay64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "1970-01-01" + "'", str69, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(yearMonthDay74);
        org.junit.Assert.assertNotNull(durationField77);
    }

    @Test
    public void test14154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14154");
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(readableDuration3, readableInstant4, periodType5);
        mutablePeriod6.addYears((int) (byte) 0);
        int int9 = mutablePeriod6.getMonths();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(readableDuration10, readableInstant11, periodType12);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutablePeriod13.add(readableDuration14);
        mutablePeriod13.addMonths((int) '#');
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) (short) 1, chronology19);
        int int21 = localDate20.getDayOfYear();
        org.joda.time.LocalTime localTime22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = localDate20.toDateTime(localTime22, dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = localDate20.toDateMidnight(dateTimeZone25);
        org.joda.time.DateMidnight.Property property27 = dateMidnight26.yearOfEra();
        int int28 = dateMidnight26.getMinuteOfHour();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) (byte) 100, chronology30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(chronology32);
        org.joda.time.MutableDateTime mutableDateTime34 = mutableDateTime33.copy();
        org.joda.time.Duration duration35 = period31.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime34);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight26.plus((org.joda.time.ReadableDuration) duration35);
        mutablePeriod13.add((org.joda.time.ReadableDuration) duration35);
        mutablePeriod6.setPeriod((org.joda.time.ReadableDuration) duration35);
        org.joda.time.MutablePeriod mutablePeriod39 = mutablePeriod6.copy();
        org.joda.time.PeriodType periodType40 = mutablePeriod39.getPeriodType();
        org.joda.time.PeriodType periodType41 = periodType40.withYearsRemoved();
        org.joda.time.PeriodType periodType42 = periodType41.withDaysRemoved();
        org.joda.time.PeriodType periodType43 = periodType42.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(32441870357727473L, periodType42);
        org.joda.time.PeriodType periodType45 = periodType42.withMinutesRemoved();
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(1693416964734412000L, (long) 516, periodType42);
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((long) 53720570, 19682L, periodType49);
        int int51 = mutablePeriod50.getSeconds();
        mutablePeriod46.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod50);
        int int53 = mutablePeriod50.getMinutes();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(mutablePeriod39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
    }

    @Test
    public void test14155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14155");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronolgy();
        boolean boolean4 = dateTimeFormatter2.isOffsetParsed();
        java.util.Locale locale5 = java.util.Locale.FRANCE;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withLocale(locale5);
        java.util.Locale locale7 = dateTimeFormatter6.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter6.withPivotYear(53694591);
        java.util.Locale locale10 = dateTimeFormatter9.getLocale();
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr_FR");
    }

    @Test
    public void test14156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14156");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = localDate2.toDateMidnight(dateTimeZone7);
        org.joda.time.LocalDate localDate10 = localDate2.withYear(53619770);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(readableDuration11, readableInstant12, periodType13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        mutablePeriod14.add(readableDuration15);
        mutablePeriod14.addMonths((int) '#');
        java.lang.Object obj19 = mutablePeriod14.clone();
        mutablePeriod14.setMinutes(982);
        org.joda.time.LocalDate localDate22 = localDate10.plus((org.joda.time.ReadablePeriod) mutablePeriod14);
        mutablePeriod14.addYears(53865478);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "P53865478Y35MT982M");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "P53865478Y35MT982M");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "P53865478Y35MT982M");
        org.junit.Assert.assertNotNull(localDate22);
    }

    @Test
    public void test14157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14157");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.setMillisOfDay(53650847);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.year();
        org.joda.time.MutableDateTime mutableDateTime4 = property3.roundFloor();
        mutableDateTime4.setMillisOfDay(710);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
    }

    @Test
    public void test14158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14158");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) (short) 1, chronology2);
        java.lang.String str4 = localDate3.toString();
        org.joda.time.LocalDate localDate6 = localDate3.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology7 = localDate6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay((long) (short) 1, chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.plusMonths(53617719);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone12 = dateMidnight11.getZone();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (short) 1, chronology14);
        java.lang.String str16 = localDate15.toString();
        org.joda.time.LocalDate localDate18 = localDate15.withYearOfEra((int) (byte) 100);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight11.withFields((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight11.withField(dateTimeFieldType20, 842);
        org.joda.time.YearMonthDay.Property property23 = yearMonthDay8.property(dateTimeFieldType20);
        org.joda.time.YearMonthDay.Property property24 = yearMonthDay8.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay26 = property24.addWrapFieldToCopy(15);
        org.joda.time.DurationField durationField27 = property24.getRangeDurationField();
        org.joda.time.DateTimeField dateTimeField28 = property24.getField();
        org.joda.time.YearMonthDay yearMonthDay29 = property24.withMinimumValue();
        int int30 = property24.getMaximumValue();
        org.joda.time.DurationField durationField31 = property24.getDurationField();
        int int33 = durationField31.getValue(24181L);
        long long36 = durationField31.getValueAsLong(45912L, (long) 172);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01" + "'", str16, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 12 + "'", int30 == 12);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
    }

    @Test
    public void test14159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14159");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((java.lang.Object) periodType0, dateTimeZone2);
        int int4 = localDateTime3.getDayOfMonth();
        int int5 = localDateTime3.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.millisOfSecond();
        int int7 = localDateTime3.getEra();
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.era();
        org.joda.time.LocalDateTime.Property property9 = localDateTime3.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime11 = property9.addToCopy((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime13 = property9.addToCopy(60000L);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusMonths(53905907);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) (short) 1, chronology21);
        java.lang.String str23 = localDate22.toString();
        org.joda.time.LocalDate localDate25 = localDate22.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology26 = localDate25.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.yearOfEra();
        org.joda.time.DateTimeField dateTimeField28 = dateTimeFieldType19.getField(chronology26);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(chronology26);
        org.joda.time.Period period30 = new org.joda.time.Period((long) (-1), periodType18, chronology26);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) (short) 1, chronology32);
        java.lang.String str34 = localDate33.toString();
        org.joda.time.LocalDate localDate36 = localDate33.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology37 = localDate36.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) 53643546, periodType18, chronology37);
        org.joda.time.PeriodType periodType40 = periodType18.withSecondsRemoved();
        java.lang.String str41 = periodType40.toString();
        org.joda.time.PeriodType periodType42 = periodType40.withMillisRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period43 = new org.joda.time.Period((java.lang.Object) localDateTime13, periodType42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.LocalDateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 21384446 + "'", int5 == 21384446);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1970-01-01" + "'", str23, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1970-01-01" + "'", str34, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "PeriodType[YearWeekDayTimeNoSeconds]" + "'", str41, "PeriodType[YearWeekDayTimeNoSeconds]");
        org.junit.Assert.assertNotNull(periodType42);
    }

    @Test
    public void test14160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14160");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        java.lang.String str3 = localDate2.toString();
        org.joda.time.LocalDate localDate5 = localDate2.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology6 = localDate5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.clockhourOfDay();
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology6);
        org.joda.time.DateTimeField dateTimeField9 = chronology6.era();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.millisOfSecond();
        org.joda.time.DurationField durationField11 = chronology6.years();
        org.joda.time.LocalDate localDate12 = org.joda.time.LocalDate.now(chronology6);
        org.joda.time.DateTimeField dateTimeField13 = chronology6.hourOfHalfday();
        int int16 = dateTimeField13.getDifference((-59006912524684L), 50271L);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01" + "'", str3, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-16390809) + "'", int16 == (-16390809));
    }

    @Test
    public void test14161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14161");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalDate.Property property4 = localDate2.weekOfWeekyear();
        org.joda.time.LocalDate localDate5 = property4.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate6 = property4.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.MutableDateTime mutableDateTime9 = mutableDateTime8.copy();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        mutableDateTime9.setZone(dateTimeZone10);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime9.minuteOfDay();
        long long13 = property12.remainder();
        org.joda.time.MutableDateTime mutableDateTime14 = property12.roundHalfCeiling();
        int int15 = property4.compareTo((org.joda.time.ReadableInstant) mutableDateTime14);
        mutableDateTime14.setDate((long) 53666419);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime14.setDayOfWeek(65);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 65 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property12);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 24471L + "'", long13 == 24471L);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test14162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14162");
        java.lang.Throwable throwable0 = null;
        java.io.IOException iOException1 = new java.io.IOException(throwable0);
        java.io.IOException iOException3 = new java.io.IOException("PT107262107S");
        iOException1.addSuppressed((java.lang.Throwable) iOException3);
        java.io.IOException iOException5 = new java.io.IOException((java.lang.Throwable) iOException1);
        java.io.IOException iOException6 = new java.io.IOException((java.lang.Throwable) iOException1);
    }

    @Test
    public void test14163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14163");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleKeys();
        java.util.stream.Stream<java.lang.String> strStream2 = strSet1.parallelStream();
        boolean boolean3 = strSet1.isEmpty();
        org.joda.time.Instant instant4 = new org.joda.time.Instant();
        org.joda.time.Instant instant6 = instant4.withMillis((-27422466L));
        boolean boolean7 = strSet1.remove((java.lang.Object) instant4);
        org.joda.time.MutableDateTime mutableDateTime8 = instant4.toMutableDateTime();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) (byte) 100, chronology10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(chronology12);
        org.joda.time.MutableDateTime mutableDateTime14 = mutableDateTime13.copy();
        org.joda.time.Duration duration15 = period11.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime14);
        org.joda.time.Instant instant16 = instant4.minus((org.joda.time.ReadableDuration) duration15);
        org.joda.time.DateTime dateTime17 = instant4.toDateTimeISO();
        org.joda.time.Instant instant20 = instant4.withDurationAdded(15587L, 53858590);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(strStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(instant20);
    }

    @Test
    public void test14164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14164");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property1 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime2 = property1.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime4 = localTime2.plusSeconds(53628444);
        org.joda.time.Chronology chronology5 = localTime4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.months();
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay(chronology5);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.withMillisOfSecond(137);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(timeOfDay9);
    }

    @Test
    public void test14165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14165");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((java.lang.Object) periodType0, dateTimeZone2);
        int int4 = localDateTime3.getDayOfMonth();
        int int5 = localDateTime3.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.weekyear();
        org.joda.time.LocalDateTime localDateTime7 = property6.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime9 = property6.addToCopy(53634467);
        int int10 = localDateTime9.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.minusYears(53695827);
        org.joda.time.LocalDateTime.Property property13 = localDateTime9.minuteOfHour();
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 21384517 + "'", int5 == 21384517);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 5 + "'", int10 == 5);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test14166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14166");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusYears((int) (short) 10);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(chronology9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime10.copy();
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone13 = dateMidnight12.getZone();
        mutableDateTime10.setZoneRetainFields(dateTimeZone13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((java.lang.Object) dateTime8, dateTimeZone13);
        org.joda.time.YearMonthDay yearMonthDay16 = dateTime8.toYearMonthDay();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray17 = yearMonthDay16.getFieldTypes();
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay16.minusYears((int) 'u');
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay16.plusYears(590);
        int int22 = yearMonthDay21.getYear();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray17);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2570 + "'", int22 == 2570);
    }

    @Test
    public void test14167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14167");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone1 = dateMidnight0.getZone();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.plusMillis(342);
        int int6 = localDateTime2.getSecondOfMinute();
        org.joda.time.DateTime dateTime7 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.withWeekyear(53625266);
        int int10 = localDateTime9.getWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withEra(53979071);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53979071 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 24 + "'", int6 == 24);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53625266 + "'", int10 == 53625266);
    }

    @Test
    public void test14168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14168");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 53619708);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period((long) (byte) 100, chronology3);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(chronology5);
        org.joda.time.MutableDateTime mutableDateTime7 = mutableDateTime6.copy();
        org.joda.time.Duration duration8 = period4.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime7);
        int int9 = period4.size();
        org.joda.time.format.PeriodFormatter periodFormatter10 = null;
        java.lang.String str11 = period4.toString(periodFormatter10);
        int int12 = period4.getSeconds();
        org.joda.time.format.DateTimePrinter dateTimePrinter14 = null;
        org.joda.time.format.DateTimeParser dateTimeParser15 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter14, dateTimeParser15);
        boolean boolean17 = dateTimeFormatter16.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter16.withPivotYear((java.lang.Integer) 1);
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone21 = dateMidnight20.getZone();
        boolean boolean23 = dateTimeZone21.isStandardOffset((long) 'a');
        org.joda.time.LocalDate localDate24 = org.joda.time.LocalDate.now(dateTimeZone21);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter19.withZone(dateTimeZone21);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 53628506, dateTimeZone21);
        boolean boolean27 = period4.equals((java.lang.Object) dateTimeZone21);
        long long29 = dateTimeZone21.previousTransition(1645455217096L);
        java.util.TimeZone timeZone30 = dateTimeZone21.toTimeZone();
        int int32 = dateTimeZone21.getOffsetFromLocal((long) 536174);
        mutableDateTime1.setZone(dateTimeZone21);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT0.100S" + "'", str11, "PT0.100S");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1645455217096L + "'", long29 == 1645455217096L);
        org.junit.Assert.assertNotNull(timeZone30);
// flaky:         org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "GMT+14:53");
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 53619988 + "'", int32 == 53619988);
    }

    @Test
    public void test14169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14169");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((java.lang.Object) periodType0, dateTimeZone2);
        int int4 = localDateTime3.getDayOfMonth();
        int int5 = localDateTime3.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.millisOfSecond();
        int int7 = localDateTime3.getEra();
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.era();
        org.joda.time.LocalDateTime.Property property9 = localDateTime3.dayOfMonth();
        int int10 = localDateTime3.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property11 = localDateTime3.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime3.withWeekyear(736);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime3.minusMinutes(185);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime3.withWeekyear(53642637);
        java.lang.Object obj18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(obj18);
        org.joda.time.DateTime dateTime20 = localDateTime3.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime.Property property21 = dateTime20.year();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((long) (byte) 100, chronology23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(chronology25);
        org.joda.time.MutableDateTime mutableDateTime27 = mutableDateTime26.copy();
        org.joda.time.Duration duration28 = period24.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime27);
        int int29 = period24.size();
        org.joda.time.Period period31 = period24.withWeeks(842);
        org.joda.time.DateTime dateTime32 = dateTime20.minus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.DateTime.Property property33 = dateTime20.dayOfYear();
        org.joda.time.DateTime dateTime34 = dateTime20.toDateTimeISO();
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 21384576 + "'", int5 == 21384576);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 8 + "'", int29 == 8);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime34);
    }

    @Test
    public void test14170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14170");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period(10L, (-1L), periodType2, chronology3);
        org.joda.time.Period period5 = period4.normalizedStandard();
        org.joda.time.Period period7 = period4.plusWeeks(53627306);
        org.joda.time.Period period9 = period7.withMillis(208);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
    }

    @Test
    public void test14171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14171");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-21T14:54:05.059Z");
        timeZone1.setID("1970-01-01");
        int int5 = timeZone1.getOffset((long) 53667278);
        boolean boolean6 = timeZone1.observesDaylightTime();
        java.lang.String str7 = timeZone1.getID();
        java.util.TimeZone timeZone9 = java.util.TimeZone.getTimeZone("4470113-04-01");
        java.util.Locale locale12 = new java.util.Locale("UTC", "2022-02-21T14:53:49.549Z");
        java.lang.String str13 = locale12.getDisplayName();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance(timeZone9, locale12);
        boolean boolean15 = timeZone1.hasSameRules(timeZone9);
        java.util.TimeZone timeZone16 = null;
        boolean boolean17 = timeZone1.hasSameRules(timeZone16);
        int int19 = timeZone1.getOffset(0L);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = timeZone1.getDisplayName(true, 904);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 904");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01" + "'", str7, "1970-01-01");
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertEquals(locale12.toString(), "utc_2022-02-21T14:53:49.549Z");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "utc (2022-02-21T14:53:49.549Z)" + "'", str13, "utc (2022-02-21T14:53:49.549Z)");
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=1645455764641,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=44,MILLISECOND=641,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test14172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14172");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(readableDuration1, readableInstant2, periodType3);
        org.joda.time.ReadableDuration readableDuration5 = null;
        mutablePeriod4.add(readableDuration5);
        mutablePeriod4.addMonths((int) '#');
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) (short) 1, chronology10);
        int int12 = localDate11.getDayOfYear();
        org.joda.time.LocalTime localTime13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = localDate11.toDateTime(localTime13, dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = localDate11.toDateMidnight(dateTimeZone16);
        org.joda.time.DateMidnight.Property property18 = dateMidnight17.yearOfEra();
        int int19 = dateMidnight17.getMinuteOfHour();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((long) (byte) 100, chronology21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(chronology23);
        org.joda.time.MutableDateTime mutableDateTime25 = mutableDateTime24.copy();
        org.joda.time.Duration duration26 = period22.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime25);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight17.plus((org.joda.time.ReadableDuration) duration26);
        mutablePeriod4.add((org.joda.time.ReadableDuration) duration26);
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.years();
        java.lang.String str30 = periodType29.getName();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(periodType29);
        org.joda.time.PeriodType periodType32 = periodType29.withYearsRemoved();
        org.joda.time.Period period33 = new org.joda.time.Period(readableInstant0, (org.joda.time.ReadableDuration) duration26, periodType32);
        org.joda.time.PeriodType periodType34 = periodType32.withMillisRemoved();
        org.joda.time.PeriodType periodType35 = periodType32.withMinutesRemoved();
        org.joda.time.PeriodType periodType36 = periodType35.withMillisRemoved();
        org.joda.time.PeriodType periodType37 = periodType35.withHoursRemoved();
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Years" + "'", str30, "Years");
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(periodType37);
    }

    @Test
    public void test14173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14173");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = localDate2.toDateMidnight(dateTimeZone7);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.yearOfEra();
        int int10 = dateMidnight8.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property11 = dateMidnight8.year();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight8.plusYears((int) ' ');
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((java.lang.Object) dateMidnight8);
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(periodType15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod16, (int) (short) 10);
        org.joda.time.DateMidnight.Property property19 = dateMidnight8.dayOfYear();
        org.joda.time.DateMidnight dateMidnight20 = property19.withMinimumValue();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateMidnight20);
    }

    @Test
    public void test14174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14174");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) (short) 1, chronology2);
        java.lang.String str4 = localDate3.toString();
        org.joda.time.LocalDate localDate6 = localDate3.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology7 = localDate6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay((long) (short) 1, chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.plusMonths(53617719);
        int int11 = yearMonthDay8.getDayOfMonth();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (short) 1, chronology13);
        java.lang.String str15 = localDate14.toString();
        org.joda.time.LocalDate localDate17 = localDate14.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology18 = localDate17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfEra();
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay8.withChronologyRetainFields(chronology18);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(readableDuration22, readableInstant23, periodType24);
        org.joda.time.ReadableDuration readableDuration26 = null;
        mutablePeriod25.add(readableDuration26);
        mutablePeriod25.addMonths((int) '#');
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) (short) 1, chronology31);
        int int33 = localDate32.getDayOfYear();
        org.joda.time.LocalTime localTime34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = localDate32.toDateTime(localTime34, dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = localDate32.toDateMidnight(dateTimeZone37);
        org.joda.time.DateMidnight.Property property39 = dateMidnight38.yearOfEra();
        int int40 = dateMidnight38.getMinuteOfHour();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Period period43 = new org.joda.time.Period((long) (byte) 100, chronology42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime(chronology44);
        org.joda.time.MutableDateTime mutableDateTime46 = mutableDateTime45.copy();
        org.joda.time.Duration duration47 = period43.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime46);
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight38.plus((org.joda.time.ReadableDuration) duration47);
        mutablePeriod25.add((org.joda.time.ReadableDuration) duration47);
        org.joda.time.PeriodType periodType50 = org.joda.time.PeriodType.years();
        java.lang.String str51 = periodType50.getName();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod(periodType50);
        org.joda.time.PeriodType periodType53 = periodType50.withYearsRemoved();
        org.joda.time.Period period54 = new org.joda.time.Period(readableInstant21, (org.joda.time.ReadableDuration) duration47, periodType53);
        org.joda.time.YearMonthDay yearMonthDay56 = yearMonthDay8.withPeriodAdded((org.joda.time.ReadablePeriod) period54, (int) (byte) 0);
        org.joda.time.Duration duration57 = period54.toStandardDuration();
        org.joda.time.Duration duration58 = duration57.toDuration();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1970-01-01" + "'", str15, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Years" + "'", str51, "Years");
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration58);
    }

    @Test
    public void test14175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14175");
        org.joda.time.Period period1 = org.joda.time.Period.weeks(53628506);
        org.joda.time.Period period3 = period1.minusSeconds(0);
        org.joda.time.Period period5 = period3.minusMonths(618);
        org.joda.time.Period period7 = period5.withDays(366);
        int int8 = period7.size();
        org.joda.time.Period period9 = period7.toPeriod();
        // The following exception was thrown during execution in test generation
        try {
            int int11 = period9.getValue(391);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 391");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 8 + "'", int8 == 8);
        org.junit.Assert.assertNotNull(period9);
    }

    @Test
    public void test14176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14176");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) 773);
        int int2 = yearMonthDay1.getYear();
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay1.plusMonths(999);
        int int5 = yearMonthDay1.getMonthOfYear();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1970 + "'", int2 == 1970);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
    }

    @Test
    public void test14177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14177");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property1 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime3 = localTime0.withMillisOfSecond(904);
        org.joda.time.LocalTime.Property property4 = localTime3.hourOfDay();
        org.joda.time.DateTimeField dateTimeField5 = property4.getField();
        int int6 = dateTimeField5.getMaximumValue();
        boolean boolean8 = dateTimeField5.isLeap(4640894352000000L);
        long long10 = dateTimeField5.roundCeiling((long) 53779749);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 23 + "'", int6 == 23);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 54000000L + "'", long10 == 54000000L);
    }

    @Test
    public void test14178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14178");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.minusHours(53667278);
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property4 = localTime3.minuteOfHour();
        org.joda.time.LocalTime localTime6 = localTime3.withMillisOfSecond(904);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localTime3.toDateTimeToday(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.plusMonths(10);
        org.joda.time.DateTime.Property property11 = dateTime8.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        java.util.Locale locale13 = null;
        int int14 = dateTimeField12.getMaximumShortTextLength(locale13);
        long long16 = dateTimeField12.roundFloor((long) (-144832));
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = dateTimeField12.getType();
        java.lang.String str18 = dateTimeFieldType17.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay.Property property19 = timeOfDay0.property(dateTimeFieldType17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'minuteOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-159988L) + "'", long16 == (-159988L));
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "minuteOfDay" + "'", str18, "minuteOfDay");
    }

    @Test
    public void test14179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14179");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = localDate2.toDateMidnight(dateTimeZone7);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.yearOfEra();
        int int10 = dateMidnight8.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property11 = dateMidnight8.year();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight8.plusYears((int) ' ');
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((java.lang.Object) dateMidnight8);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfYear();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology16);
        org.joda.time.MutableDateTime mutableDateTime18 = mutableDateTime17.copy();
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone20 = dateMidnight19.getZone();
        mutableDateTime17.setZoneRetainFields(dateTimeZone20);
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = localDate14.toDateTimeAtStartOfDay(dateTimeZone20);
        org.joda.time.LocalDate.Property property24 = localDate14.year();
        org.joda.time.LocalDate localDate26 = property24.addToCopy(53640641);
        org.joda.time.LocalDate localDate27 = property24.roundHalfFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate29 = localDate27.withEra(54008919);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54008919 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate27);
    }

    @Test
    public void test14180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14180");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((java.lang.Object) periodType0, dateTimeZone2);
        int int4 = localDateTime3.getDayOfMonth();
        int int5 = localDateTime3.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.millisOfSecond();
        int int7 = localDateTime3.getEra();
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.era();
        org.joda.time.LocalDateTime.Property property9 = localDateTime3.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime11 = property9.addToCopy((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime12 = property9.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime14 = property13.roundFloorCopy();
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 21384751 + "'", int5 == 21384751);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test14181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14181");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = mutableDateTime1.copy();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 1, chronology6);
        int int8 = localDate7.getDayOfYear();
        org.joda.time.LocalTime localTime9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = localDate7.toDateTime(localTime9, dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = localDate7.toDateMidnight(dateTimeZone12);
        org.joda.time.DateMidnight.Property property14 = dateMidnight13.yearOfEra();
        int int15 = dateMidnight13.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property16 = dateMidnight13.year();
        boolean boolean17 = mutableDateTime2.isBefore((org.joda.time.ReadableInstant) dateMidnight13);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime2.dayOfMonth();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(readableDuration19, readableInstant20, periodType21);
        mutablePeriod22.addYears((int) (byte) 0);
        int int25 = mutablePeriod22.getMonths();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(readableDuration26, readableInstant27, periodType28);
        org.joda.time.ReadableDuration readableDuration30 = null;
        mutablePeriod29.add(readableDuration30);
        mutablePeriod29.addMonths((int) '#');
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) (short) 1, chronology35);
        int int37 = localDate36.getDayOfYear();
        org.joda.time.LocalTime localTime38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = localDate36.toDateTime(localTime38, dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateMidnight dateMidnight42 = localDate36.toDateMidnight(dateTimeZone41);
        org.joda.time.DateMidnight.Property property43 = dateMidnight42.yearOfEra();
        int int44 = dateMidnight42.getMinuteOfHour();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Period period47 = new org.joda.time.Period((long) (byte) 100, chronology46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime(chronology48);
        org.joda.time.MutableDateTime mutableDateTime50 = mutableDateTime49.copy();
        org.joda.time.Duration duration51 = period47.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime50);
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight42.plus((org.joda.time.ReadableDuration) duration51);
        mutablePeriod29.add((org.joda.time.ReadableDuration) duration51);
        mutablePeriod22.setPeriod((org.joda.time.ReadableDuration) duration51);
        mutableDateTime2.add((org.joda.time.ReadableDuration) duration51);
        mutableDateTime2.setSecondOfMinute(0);
        org.joda.time.MutableDateTime.Property property58 = mutableDateTime2.dayOfWeek();
        java.util.Locale locale59 = java.util.Locale.PRC;
        int int60 = property58.getMaximumShortTextLength(locale59);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 3 + "'", int60 == 3);
    }

    @Test
    public void test14182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14182");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setFirstDayOfWeek(53620623);
        org.joda.time.TimeOfDay timeOfDay3 = org.joda.time.TimeOfDay.fromCalendarFields(calendar0);
        java.util.Date date7 = new java.util.Date(5, 53620972, 0);
        calendar0.setTime(date7);
        int int9 = date7.getYear();
        long long10 = date7.getTime();
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=141007485139200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=53620623,minimalDaysInFirstWeek=1,ERA=1,YEAR=4470319,MONTH=3,WEEK_OF_YEAR=18,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=120,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertEquals(date7.toString(), "Wed Apr 30 00:00:00 GMT 4470319");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4468419 + "'", int9 == 4468419);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 141007485139200000L + "'", long10 == 141007485139200000L);
    }

    @Test
    public void test14183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14183");
        java.util.Date date3 = new java.util.Date(902, (int) (byte) -1, 15);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.fromDateFields(date3);
        int int5 = date3.getMinutes();
        int int6 = date3.getDate();
        date3.setYear(679);
        org.junit.Assert.assertEquals(date3.toString(), "Wed Dec 15 00:00:00 GMT 2579");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 15 + "'", int6 == 15);
    }

    @Test
    public void test14184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14184");
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = null;
        org.joda.time.format.DateTimeParser dateTimeParser4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter3, dateTimeParser4);
        boolean boolean6 = dateTimeFormatter5.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter5.withPivotYear((java.lang.Integer) 1);
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone10 = dateMidnight9.getZone();
        boolean boolean12 = dateTimeZone10.isStandardOffset((long) 'a');
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.now(dateTimeZone10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter8.withZone(dateTimeZone10);
        boolean boolean15 = dateTimeFormatter8.isPrinter();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) (short) 1, chronology21);
        java.lang.String str23 = localDate22.toString();
        org.joda.time.LocalDate localDate25 = localDate22.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology26 = localDate25.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.eras();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(100, 12, (int) (short) 1, chronology26);
        boolean boolean29 = dateTimeFieldType16.isSupported(chronology26);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter8.withChronology(chronology26);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter8.withPivotYear((java.lang.Integer) 53629402);
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone34 = dateMidnight33.getZone();
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight33.plusYears(53619079);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime(chronology37);
        int int39 = mutableDateTime38.getMillisOfSecond();
        boolean boolean40 = dateMidnight33.isEqual((org.joda.time.ReadableInstant) mutableDateTime38);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) (short) 1, chronology42);
        int int44 = localDate43.getDayOfYear();
        org.joda.time.LocalTime localTime45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = localDate43.toDateTime(localTime45, dateTimeZone46);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateMidnight dateMidnight49 = localDate43.toDateMidnight(dateTimeZone48);
        org.joda.time.DateMidnight.Property property50 = dateMidnight49.yearOfEra();
        int int51 = dateMidnight49.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property52 = dateMidnight49.year();
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight49.plusYears((int) ' ');
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate((java.lang.Object) dateMidnight49);
        boolean boolean56 = mutableDateTime38.isEqual((org.joda.time.ReadableInstant) dateMidnight49);
        java.lang.Object obj57 = null;
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate((long) (short) 1, chronology60);
        java.lang.String str62 = localDate61.toString();
        org.joda.time.LocalDate localDate64 = localDate61.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology65 = localDate64.getChronology();
        org.joda.time.YearMonthDay yearMonthDay66 = new org.joda.time.YearMonthDay((long) (short) 1, chronology65);
        org.joda.time.YearMonthDay yearMonthDay68 = yearMonthDay66.plusMonths(53617719);
        int int69 = yearMonthDay66.getDayOfMonth();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.LocalDate localDate72 = new org.joda.time.LocalDate((long) (short) 1, chronology71);
        java.lang.String str73 = localDate72.toString();
        org.joda.time.LocalDate localDate75 = localDate72.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology76 = localDate75.getChronology();
        org.joda.time.DateTimeField dateTimeField77 = chronology76.yearOfEra();
        org.joda.time.YearMonthDay yearMonthDay78 = yearMonthDay66.withChronologyRetainFields(chronology76);
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime(obj57, chronology76);
        org.joda.time.ReadableDuration readableDuration80 = null;
        org.joda.time.ReadableInstant readableInstant81 = null;
        org.joda.time.PeriodType periodType82 = null;
        org.joda.time.MutablePeriod mutablePeriod83 = new org.joda.time.MutablePeriod(readableDuration80, readableInstant81, periodType82);
        int int84 = mutablePeriod83.getMinutes();
        org.joda.time.Chronology chronology87 = null;
        org.joda.time.LocalDate localDate88 = new org.joda.time.LocalDate((long) (short) 1, chronology87);
        java.lang.String str89 = localDate88.toString();
        org.joda.time.LocalDate localDate91 = localDate88.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology92 = localDate91.getChronology();
        org.joda.time.DateTimeField dateTimeField93 = chronology92.clockhourOfDay();
        org.joda.time.MutableDateTime mutableDateTime94 = new org.joda.time.MutableDateTime(chronology92);
        mutablePeriod83.setPeriod((long) 53617649, chronology92);
        org.joda.time.MutableDateTime mutableDateTime96 = dateTime79.toMutableDateTime(chronology92);
        mutableDateTime38.setChronology(chronology92);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter98 = dateTimeFormatter32.withChronology(chronology92);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate99 = new org.joda.time.LocalDate(53849639, (-16390809), 127, chronology92);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -16390809 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1970-01-01" + "'", str23, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateMidnight36);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 807 + "'", int39 == 807);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "1970-01-01" + "'", str62, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(yearMonthDay68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "1970-01-01" + "'", str73, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(yearMonthDay78);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "1970-01-01" + "'", str89, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate91);
        org.junit.Assert.assertNotNull(chronology92);
        org.junit.Assert.assertNotNull(dateTimeField93);
        org.junit.Assert.assertNotNull(mutableDateTime96);
        org.junit.Assert.assertNotNull(dateTimeFormatter98);
    }

    @Test
    public void test14185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14185");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusYears((int) (short) 10);
        org.joda.time.DateTime dateTime10 = dateTime6.plus((long) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.plusSeconds(53618165);
        org.joda.time.Period period17 = new org.joda.time.Period((int) (byte) 10, (-1), 21, 100);
        org.joda.time.DateTime dateTime19 = dateTime10.withPeriodAdded((org.joda.time.ReadablePeriod) period17, 53620134);
        org.joda.time.DateTime dateTime21 = dateTime10.plusYears(53642637);
        org.joda.time.DateTime dateTime22 = dateTime21.toDateTimeISO();
        org.joda.time.DateTime dateTime24 = dateTime22.withWeekyear(53695081);
        org.joda.time.DateTime.Property property25 = dateTime22.weekOfWeekyear();
        org.joda.time.DateTime dateTime26 = property25.withMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime30 = dateTime26.withDate(53981717, 53952841, 53645766);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53952841 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test14186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14186");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) (short) 1, chronology2);
        java.lang.String str4 = localDate3.toString();
        org.joda.time.LocalDate localDate6 = localDate3.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology7 = localDate6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.yearOfEra();
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType0.getField(chronology7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) (byte) 100, chronology11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.MutableDateTime mutableDateTime15 = mutableDateTime14.copy();
        org.joda.time.Duration duration16 = period12.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime15);
        org.joda.time.Period period18 = period12.plusDays((int) (byte) 10);
        int int19 = period18.getHours();
        org.joda.time.Period period21 = period18.plusMonths(2);
        org.joda.time.Period period23 = period18.minusMonths(12);
        org.joda.time.Period period25 = period18.withYears(2057);
        int[] intArray27 = chronology7.get((org.joda.time.ReadablePeriod) period25, 259200000L);
        org.joda.time.DurationField durationField28 = chronology7.weeks();
        org.joda.time.DateTimeField dateTimeField29 = chronology7.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField30 = chronology7.weekyearOfCentury();
        java.lang.String str31 = dateTimeField30.getName();
        long long33 = dateTimeField30.roundFloor(32441870357740547L);
        long long36 = dateTimeField30.getDifferenceAsLong((long) 2050, 15861L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 0, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "weekyearOfCentury" + "'", str31, "weekyearOfCentury");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 32441840496000000L + "'", long33 == 32441840496000000L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
    }

    @Test
    public void test14187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14187");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone1 = dateMidnight0.getZone();
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight0.plusYears(53619079);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(chronology4);
        int int6 = mutableDateTime5.getMillisOfSecond();
        boolean boolean7 = dateMidnight0.isEqual((org.joda.time.ReadableInstant) mutableDateTime5);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) (short) 1, chronology9);
        int int11 = localDate10.getDayOfYear();
        org.joda.time.LocalTime localTime12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = localDate10.toDateTime(localTime12, dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = localDate10.toDateMidnight(dateTimeZone15);
        org.joda.time.DateMidnight.Property property17 = dateMidnight16.yearOfEra();
        int int18 = dateMidnight16.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property19 = dateMidnight16.year();
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight16.plusYears((int) ' ');
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((java.lang.Object) dateMidnight16);
        boolean boolean23 = mutableDateTime5.isEqual((org.joda.time.ReadableInstant) dateMidnight16);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(readableDuration24, readableInstant25, periodType26);
        mutablePeriod27.addYears((int) (byte) 0);
        int int30 = mutablePeriod27.getMonths();
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(readableDuration31, readableInstant32, periodType33);
        org.joda.time.ReadableDuration readableDuration35 = null;
        mutablePeriod34.add(readableDuration35);
        mutablePeriod34.addMonths((int) '#');
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((long) (short) 1, chronology40);
        int int42 = localDate41.getDayOfYear();
        org.joda.time.LocalTime localTime43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = localDate41.toDateTime(localTime43, dateTimeZone44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateMidnight dateMidnight47 = localDate41.toDateMidnight(dateTimeZone46);
        org.joda.time.DateMidnight.Property property48 = dateMidnight47.yearOfEra();
        int int49 = dateMidnight47.getMinuteOfHour();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Period period52 = new org.joda.time.Period((long) (byte) 100, chronology51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime(chronology53);
        org.joda.time.MutableDateTime mutableDateTime55 = mutableDateTime54.copy();
        org.joda.time.Duration duration56 = period52.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime55);
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight47.plus((org.joda.time.ReadableDuration) duration56);
        mutablePeriod34.add((org.joda.time.ReadableDuration) duration56);
        mutablePeriod27.setPeriod((org.joda.time.ReadableDuration) duration56);
        mutablePeriod27.setMinutes(999);
        mutableDateTime5.add((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.MutableDateTime.Property property63 = mutableDateTime5.era();
        mutableDateTime5.addWeekyears(10319);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime5.setDayOfYear(53666419);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53666419 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateMidnight3);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 859 + "'", int6 == 859);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(property63);
    }

    @Test
    public void test14188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14188");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        java.lang.String str3 = localDate2.toString();
        org.joda.time.LocalDate.Property property4 = localDate2.year();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 1, chronology6);
        java.lang.String str8 = localDate7.toString();
        org.joda.time.LocalDate.Property property9 = localDate7.year();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) (short) 1, chronology11);
        java.lang.String str13 = localDate12.toString();
        org.joda.time.LocalDate.Property property14 = localDate12.year();
        org.joda.time.Period period15 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localDate7, (org.joda.time.ReadablePartial) localDate12);
        org.joda.time.Days days16 = period15.toStandardDays();
        org.joda.time.LocalDate localDate17 = localDate2.minus((org.joda.time.ReadablePeriod) days16);
        org.joda.time.LocalDate localDate19 = localDate2.withYearOfEra(21);
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property21 = localTime20.minuteOfHour();
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone23 = dateMidnight22.getZone();
        long long24 = property21.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.LocalTime localTime26 = property21.addWrapFieldToCopy(53618195);
        org.joda.time.LocalTime localTime27 = property21.withMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            int int28 = localDate2.compareTo((org.joda.time.ReadablePartial) localTime27);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01" + "'", str3, "1970-01-01");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01" + "'", str8, "1970-01-01");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-01-01" + "'", str13, "1970-01-01");
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-27423549L) + "'", long24 == (-27423549L));
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(localTime27);
    }

    @Test
    public void test14189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14189");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) (short) 1, chronology2);
        java.lang.String str4 = localDate3.toString();
        org.joda.time.LocalDate localDate6 = localDate3.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology7 = localDate6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay((long) (short) 1, chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.plusMonths(53617719);
        int int11 = yearMonthDay8.getDayOfMonth();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (short) 1, chronology13);
        java.lang.String str15 = localDate14.toString();
        org.joda.time.LocalDate localDate17 = localDate14.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology18 = localDate17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfEra();
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay8.withChronologyRetainFields(chronology18);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(readableDuration22, readableInstant23, periodType24);
        org.joda.time.ReadableDuration readableDuration26 = null;
        mutablePeriod25.add(readableDuration26);
        mutablePeriod25.addMonths((int) '#');
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) (short) 1, chronology31);
        int int33 = localDate32.getDayOfYear();
        org.joda.time.LocalTime localTime34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = localDate32.toDateTime(localTime34, dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = localDate32.toDateMidnight(dateTimeZone37);
        org.joda.time.DateMidnight.Property property39 = dateMidnight38.yearOfEra();
        int int40 = dateMidnight38.getMinuteOfHour();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.Period period43 = new org.joda.time.Period((long) (byte) 100, chronology42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime(chronology44);
        org.joda.time.MutableDateTime mutableDateTime46 = mutableDateTime45.copy();
        org.joda.time.Duration duration47 = period43.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime46);
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight38.plus((org.joda.time.ReadableDuration) duration47);
        mutablePeriod25.add((org.joda.time.ReadableDuration) duration47);
        org.joda.time.PeriodType periodType50 = org.joda.time.PeriodType.years();
        java.lang.String str51 = periodType50.getName();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod(periodType50);
        org.joda.time.PeriodType periodType53 = periodType50.withYearsRemoved();
        org.joda.time.Period period54 = new org.joda.time.Period(readableInstant21, (org.joda.time.ReadableDuration) duration47, periodType53);
        org.joda.time.YearMonthDay yearMonthDay56 = yearMonthDay8.withPeriodAdded((org.joda.time.ReadablePeriod) period54, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            int int58 = period54.getValue(53709627);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 53709627");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1970-01-01" + "'", str15, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Years" + "'", str51, "Years");
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(yearMonthDay56);
    }

    @Test
    public void test14190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14190");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) (short) 1, chronology2);
        java.lang.String str4 = localDate3.toString();
        org.joda.time.LocalDate localDate6 = localDate3.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology7 = localDate6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.yearOfEra();
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType0.getField(chronology7);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology7);
        org.joda.time.DateTimeField dateTimeField11 = chronology7.dayOfMonth();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) 53619248, (long) 1);
        int[] intArray17 = chronology7.get((org.joda.time.ReadablePeriod) mutablePeriod14, (long) (-292275054), (long) 53637942);
        org.joda.time.DateTimeField dateTimeField18 = chronology7.hourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(chronology7);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime19.setSecondOfDay(53836259);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53836259 for secondOfDay must be in the range [0,86399]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 0, 0, 4, 0, 5, 12, 996]");
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test14191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14191");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay.Property property1 = timeOfDay0.hourOfDay();
        int int2 = property1.getMaximumValueOverall();
        java.lang.String str3 = property1.toString();
        org.joda.time.DateTimeField dateTimeField4 = property1.getField();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(chronology5);
        org.joda.time.MutableDateTime mutableDateTime7 = mutableDateTime6.copy();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        mutableDateTime7.setZone(dateTimeZone8);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime7.minuteOfDay();
        int int11 = mutableDateTime7.getSecondOfMinute();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime7.hourOfDay();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime7.millisOfSecond();
        mutableDateTime7.setMillis((long) 53659661);
        int int16 = property1.compareTo((org.joda.time.ReadableInstant) mutableDateTime7);
        org.joda.time.DateTime dateTime17 = mutableDateTime7.toDateTime();
        org.joda.time.DateTime dateTime19 = dateTime17.withCenturyOfEra(223);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 23 + "'", int2 == 23);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Property[hourOfDay]" + "'", str3, "Property[hourOfDay]");
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(property10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 24 + "'", int11 == 24);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test14192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14192");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("4470113-04-01");
        java.util.Locale locale4 = new java.util.Locale("UTC", "2022-02-21T14:53:49.549Z");
        java.lang.String str5 = locale4.getDisplayName();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone1, locale4);
        calendar6.setTimeInMillis(4857530083200000L);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertEquals(locale4.toString(), "utc_2022-02-21T14:53:49.549Z");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "utc (2022-02-21T14:53:49.549Z)" + "'", str5, "utc (2022-02-21T14:53:49.549Z)");
        org.junit.Assert.assertNotNull(calendar6);
        org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=4857530083200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=155899,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test14193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14193");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone1 = dateMidnight0.getZone();
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight0.withEra(0);
        int int4 = dateMidnight0.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate5 = dateMidnight0.toLocalDate();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 8 + "'", int4 == 8);
        org.junit.Assert.assertNotNull(localDate5);
    }

    @Test
    public void test14194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14194");
        java.util.Locale locale1 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.stream.Stream<java.lang.String> strStream3 = strSet2.parallelStream();
        boolean boolean4 = strSet2.isEmpty();
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Instant instant7 = instant5.withMillis((-27422466L));
        boolean boolean8 = strSet2.remove((java.lang.Object) instant5);
        org.joda.time.Chronology chronology9 = instant5.getChronology();
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(periodType10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) periodType10, dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusYears((int) '#');
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.plusYears((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withYearOfEra(47);
        int int20 = localDateTime19.size();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.plusSeconds(53621101);
        long long24 = chronology9.set((org.joda.time.ReadablePartial) localDateTime22, (long) 958);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 53832957, chronology9);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(chronology9);
        org.joda.time.DurationField durationField27 = chronology9.halfdays();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(strStream3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(localDateTime22);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-60625855114036L) + "'", long24 == (-60625855114036L));
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(durationField27);
    }

    @Test
    public void test14195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14195");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusYears((int) (short) 10);
        org.joda.time.DateTime dateTime10 = dateTime6.plus((long) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.plusSeconds(53618165);
        org.joda.time.Period period17 = new org.joda.time.Period((int) (byte) 10, (-1), 21, 100);
        org.joda.time.DateTime dateTime19 = dateTime10.withPeriodAdded((org.joda.time.ReadablePeriod) period17, 53620134);
        org.joda.time.Period period21 = period17.withWeeks(54020590);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(period21);
    }

    @Test
    public void test14196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14196");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property1 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime3 = localTime0.withMillisOfSecond(904);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localTime0.toDateTimeToday(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths(10);
        org.joda.time.DateTime.Property property8 = dateTime5.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        org.joda.time.DateTime dateTime10 = property8.roundHalfCeilingCopy();
        org.joda.time.DateTime.Property property11 = dateTime10.yearOfEra();
        org.joda.time.DateTime dateTime13 = dateTime10.plusWeeks(53649947);
        int int14 = dateTime10.getMinuteOfHour();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 56 + "'", int14 == 56);
    }

    @Test
    public void test14197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14197");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTime dateTime3 = dateTime0.withFieldAdded(durationFieldType1, (int) (byte) 0);
        org.joda.time.DateTime.Property property4 = dateTime0.yearOfEra();
        org.joda.time.DateTime dateTime6 = property4.addToCopy(12);
        boolean boolean7 = dateTime6.isEqualNow();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime9.copy();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        mutableDateTime10.setZone(dateTimeZone11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (short) 1, chronology14);
        int int16 = localDate15.getDayOfYear();
        org.joda.time.LocalTime localTime17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = localDate15.toDateTime(localTime17, dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = localDate15.toDateMidnight(dateTimeZone20);
        org.joda.time.DateMidnight.Property property22 = dateMidnight21.yearOfEra();
        int int23 = dateMidnight21.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property24 = dateMidnight21.year();
        boolean boolean25 = mutableDateTime10.isBefore((org.joda.time.ReadableInstant) dateMidnight21);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime10.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(53619988);
        mutableDateTime10.setZoneRetainFields(dateTimeZone28);
        mutableDateTime10.addMonths(736);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(readableDuration32, readableInstant33, periodType34);
        mutablePeriod35.addYears((int) (byte) 0);
        int int38 = mutablePeriod35.getMonths();
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(readableDuration39, readableInstant40, periodType41);
        org.joda.time.ReadableDuration readableDuration43 = null;
        mutablePeriod42.add(readableDuration43);
        mutablePeriod42.addMonths((int) '#');
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((long) (short) 1, chronology48);
        int int50 = localDate49.getDayOfYear();
        org.joda.time.LocalTime localTime51 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateTime dateTime53 = localDate49.toDateTime(localTime51, dateTimeZone52);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateMidnight dateMidnight55 = localDate49.toDateMidnight(dateTimeZone54);
        org.joda.time.DateMidnight.Property property56 = dateMidnight55.yearOfEra();
        int int57 = dateMidnight55.getMinuteOfHour();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.Period period60 = new org.joda.time.Period((long) (byte) 100, chronology59);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime(chronology61);
        org.joda.time.MutableDateTime mutableDateTime63 = mutableDateTime62.copy();
        org.joda.time.Duration duration64 = period60.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime63);
        org.joda.time.DateMidnight dateMidnight65 = dateMidnight55.plus((org.joda.time.ReadableDuration) duration64);
        mutablePeriod42.add((org.joda.time.ReadableDuration) duration64);
        mutablePeriod35.setPeriod((org.joda.time.ReadableDuration) duration64);
        org.joda.time.DateMidnight dateMidnight68 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone69 = dateMidnight68.getZone();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.LocalDate localDate72 = new org.joda.time.LocalDate((long) (short) 1, chronology71);
        java.lang.String str73 = localDate72.toString();
        org.joda.time.LocalDate localDate75 = localDate72.withYearOfEra((int) (byte) 100);
        org.joda.time.DateMidnight dateMidnight76 = dateMidnight68.withFields((org.joda.time.ReadablePartial) localDate75);
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateMidnight dateMidnight79 = dateMidnight68.withField(dateTimeFieldType77, 842);
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.Period period82 = new org.joda.time.Period((long) (byte) 100, chronology81);
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.MutableDateTime mutableDateTime84 = new org.joda.time.MutableDateTime(chronology83);
        org.joda.time.MutableDateTime mutableDateTime85 = mutableDateTime84.copy();
        org.joda.time.Duration duration86 = period82.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime85);
        org.joda.time.Period period88 = period82.plusDays((int) (byte) 10);
        org.joda.time.Duration duration89 = period88.toStandardDuration();
        org.joda.time.DateMidnight dateMidnight90 = dateMidnight68.minus((org.joda.time.ReadableDuration) duration89);
        boolean boolean91 = duration64.isEqual((org.joda.time.ReadableDuration) duration89);
        mutableDateTime10.add((org.joda.time.ReadableDuration) duration89);
        org.joda.time.DateTime dateTime94 = dateTime6.withDurationAdded((org.joda.time.ReadableDuration) duration89, 53691414);
        org.joda.time.DateTime dateTime96 = dateTime6.plusDays(4470113);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime63);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "1970-01-01" + "'", str73, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertNotNull(dateMidnight76);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertNotNull(dateMidnight79);
        org.junit.Assert.assertNotNull(mutableDateTime85);
        org.junit.Assert.assertNotNull(duration86);
        org.junit.Assert.assertNotNull(period88);
        org.junit.Assert.assertNotNull(duration89);
        org.junit.Assert.assertNotNull(dateMidnight90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertNotNull(dateTime96);
    }

    @Test
    public void test14198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14198");
        java.util.Date date9 = new java.util.Date(53617719, 2022, 842, 1, 0, 53618165);
        org.joda.time.YearMonthDay yearMonthDay10 = org.joda.time.YearMonthDay.fromDateFields(date9);
        java.lang.String str11 = yearMonthDay10.toString();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        long long14 = dateTimeZone12.convertUTCToLocal(1645455235556L);
        org.joda.time.DateMidnight dateMidnight15 = yearMonthDay10.toDateMidnight(dateTimeZone12);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) (byte) 100, chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.MutableDateTime mutableDateTime21 = mutableDateTime20.copy();
        org.joda.time.Duration duration22 = period18.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime21);
        int int23 = period18.size();
        org.joda.time.format.PeriodFormatter periodFormatter24 = null;
        java.lang.String str25 = period18.toString(periodFormatter24);
        int int26 = period18.getSeconds();
        org.joda.time.format.DateTimePrinter dateTimePrinter28 = null;
        org.joda.time.format.DateTimeParser dateTimeParser29 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter28, dateTimeParser29);
        boolean boolean31 = dateTimeFormatter30.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter30.withPivotYear((java.lang.Integer) 1);
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone35 = dateMidnight34.getZone();
        boolean boolean37 = dateTimeZone35.isStandardOffset((long) 'a');
        org.joda.time.LocalDate localDate38 = org.joda.time.LocalDate.now(dateTimeZone35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter33.withZone(dateTimeZone35);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) 53628506, dateTimeZone35);
        boolean boolean41 = period18.equals((java.lang.Object) dateTimeZone35);
        long long43 = dateTimeZone35.previousTransition(1645455217096L);
        long long45 = dateTimeZone35.previousTransition((long) 53722857);
        long long47 = dateTimeZone12.getMillisKeepLocal(dateTimeZone35, 3246596L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight(54079544, 54022913, 656, dateTimeZone12);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54022913 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date9.toString(), "Fri Jul 01 14:56:05 GMT 53619791");
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "53619791-07-01" + "'", str11, "53619791-07-01");
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1645508855544L + "'", long14 == 1645508855544L);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8 + "'", int23 == 8);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "PT0.100S" + "'", str25, "PT0.100S");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1645455217096L + "'", long43 == 1645455217096L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 53722857L + "'", long45 == 53722857L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 3246596L + "'", long47 == 3246596L);
    }

    @Test
    public void test14199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14199");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period((long) (byte) 100, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(chronology3);
        org.joda.time.MutableDateTime mutableDateTime5 = mutableDateTime4.copy();
        org.joda.time.Duration duration6 = period2.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime5);
        org.joda.time.Period period8 = period2.plusDays((int) (byte) 10);
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property10 = localTime9.minuteOfHour();
        org.joda.time.LocalTime localTime12 = localTime9.withMillisOfSecond(904);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = localTime9.toDateTimeToday(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.plusMonths(10);
        org.joda.time.DateTime.Property property17 = dateTime14.minuteOfDay();
        org.joda.time.DateTime.Property property18 = dateTime14.year();
        boolean boolean19 = period8.equals((java.lang.Object) property18);
        org.joda.time.Period period21 = period8.minusWeeks((int) ' ');
        org.joda.time.Period period23 = period21.minusSeconds(53677939);
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property25 = localTime24.minuteOfHour();
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone27 = dateMidnight26.getZone();
        long long28 = property25.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight26);
        org.joda.time.DateMidnight.Property property29 = dateMidnight26.dayOfWeek();
        int int30 = property29.getMinimumValue();
        org.joda.time.DateMidnight dateMidnight31 = property29.withMinimumValue();
        org.joda.time.DateMidnight.Property property32 = dateMidnight31.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight34 = property32.addToCopy(53701466);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.minusWeeks(53655084);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight36.withYearOfEra(53768909);
        org.joda.time.Duration duration39 = period23.toDurationTo((org.joda.time.ReadableInstant) dateMidnight36);
        org.joda.time.DateMidnight.Property property40 = dateMidnight36.weekyear();
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-27423549L) + "'", long28 == (-27423549L));
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(property40);
    }

    @Test
    public void test14200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14200");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.withWeekyear((int) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusWeeks((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusMillis(53618333);
        org.joda.time.Instant instant7 = new org.joda.time.Instant((java.lang.Object) dateTime4);
        org.joda.time.DateTime.Property property8 = dateTime4.minuteOfDay();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test14201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14201");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.withHourOfDay((int) (short) 10);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.hours();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay0.withFieldAdded(durationFieldType3, 53625645);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay0.plusHours((int) '4');
        org.joda.time.TimeOfDay.Property property8 = timeOfDay0.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay9 = property8.withMaximumValue();
        int int10 = property8.get();
        org.joda.time.DateTimeField dateTimeField11 = property8.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = property8.getFieldType();
        org.joda.time.TimeOfDay timeOfDay13 = property8.withMaximumValue();
        org.joda.time.LocalTime localTime14 = timeOfDay13.toLocalTime();
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(timeOfDay9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 56 + "'", int10 == 56);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(localTime14);
    }

    @Test
    public void test14202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14202");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = localDate2.toDateMidnight(dateTimeZone7);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.yearOfEra();
        int int10 = dateMidnight8.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property11 = dateMidnight8.year();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        org.joda.time.DateMidnight dateMidnight13 = property11.roundFloorCopy();
        int int14 = dateMidnight13.getYearOfEra();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight13.plusWeeks(274);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight16);
    }

    @Test
    public void test14203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14203");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 1, chronology6);
        java.lang.String str8 = localDate7.toString();
        org.joda.time.LocalDate localDate10 = localDate7.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology11 = localDate10.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.yearOfEra();
        org.joda.time.DateTimeField dateTimeField13 = dateTimeFieldType4.getField(chronology11);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) (byte) 100, chronology15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(chronology17);
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime18.copy();
        org.joda.time.Duration duration20 = period16.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime19);
        org.joda.time.Period period22 = period16.plusDays((int) (byte) 10);
        int int23 = period22.getHours();
        org.joda.time.Period period25 = period22.plusMonths(2);
        org.joda.time.Period period27 = period22.minusMonths(12);
        org.joda.time.Period period29 = period22.withYears(2057);
        int[] intArray31 = chronology11.get((org.joda.time.ReadablePeriod) period29, 259200000L);
        org.joda.time.DateTimeField dateTimeField32 = chronology11.dayOfWeek();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((java.lang.Object) (-1325408661792L), chronology11);
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(32441870358057455L, (long) 53777121, periodType2, chronology11);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01" + "'", str8, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[0, 0, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(dateTimeField32);
    }

    @Test
    public void test14204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14204");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property1 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime3 = localTime0.withMillisOfSecond(904);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localTime0.toDateTimeToday(dateTimeZone4);
        org.joda.time.LocalTime localTime7 = localTime0.plusHours(2034);
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.MIDNIGHT;
        int int9 = localTime8.getHourOfDay();
        org.joda.time.LocalTime localTime11 = localTime8.plusHours((int) (short) 1);
        org.joda.time.LocalTime localTime13 = localTime8.withHourOfDay(3);
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay14.withHourOfDay((int) (short) 10);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) (byte) 100, chronology18);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(chronology20);
        org.joda.time.MutableDateTime mutableDateTime22 = mutableDateTime21.copy();
        org.joda.time.Duration duration23 = period19.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime22);
        int int24 = period19.size();
        org.joda.time.format.PeriodFormatter periodFormatter25 = null;
        java.lang.String str26 = period19.toString(periodFormatter25);
        int int27 = period19.getSeconds();
        org.joda.time.Period period29 = period19.plusHours(3);
        org.joda.time.TimeOfDay timeOfDay30 = timeOfDay14.minus((org.joda.time.ReadablePeriod) period29);
        org.joda.time.TimeOfDay timeOfDay32 = timeOfDay30.plusHours(342);
        org.joda.time.TimeOfDay timeOfDay34 = timeOfDay30.minusHours(53746248);
        org.joda.time.TimeOfDay.Property property35 = timeOfDay30.minuteOfHour();
        org.joda.time.LocalTime localTime37 = org.joda.time.LocalTime.fromMillisOfDay((long) 2);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.millisOfSecond();
        int int39 = localTime37.get(dateTimeFieldType38);
        org.joda.time.TimeOfDay.Property property40 = timeOfDay30.property(dateTimeFieldType38);
        org.joda.time.DurationFieldType durationFieldType41 = dateTimeFieldType38.getDurationType();
        int int42 = localTime8.get(dateTimeFieldType38);
        int int43 = localTime7.get(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 8 + "'", int24 == 8);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT0.100S" + "'", str26, "PT0.100S");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertNotNull(timeOfDay32);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 203 + "'", int43 == 203);
    }

    @Test
    public void test14205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14205");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 1);
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone7 = dateMidnight6.getZone();
        boolean boolean9 = dateTimeZone7.isStandardOffset((long) 'a');
        org.joda.time.LocalDate localDate10 = org.joda.time.LocalDate.now(dateTimeZone7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter5.withZone(dateTimeZone7);
        long long13 = dateTimeZone7.nextTransition((long) 53619708);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone7);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) (short) 1, chronology17);
        int int19 = localDate18.getDayOfYear();
        org.joda.time.LocalTime localTime20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = localDate18.toDateTime(localTime20, dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.plusYears((int) (short) 10);
        org.joda.time.DateTime dateTime26 = dateTime22.withYear((int) (byte) 1);
        java.util.Locale locale30 = new java.util.Locale("2022-02-21T14:53:49.549Z", "UTC");
        java.lang.String str31 = dateTime26.toString("14:54:28.496", locale30);
        java.lang.String str32 = dateTimeZone7.getShortName((long) 907, locale30);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 53619708L + "'", long13 == 53619708L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertEquals(locale30.toString(), "2022-02-21t14:53:49.549z_UTC");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "14:54:28.496" + "'", str31, "14:54:28.496");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+14:53:39.988" + "'", str32, "+14:53:39.988");
    }

    @Test
    public void test14206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14206");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-21T14:54:05.059Z");
        java.time.ZoneId zoneId2 = timeZone1.toZoneId();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone(zoneId2);
        java.lang.String str4 = timeZone3.getID();
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone3);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GMT" + "'", str4, "GMT");
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1645455765297,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=45,MILLISECOND=297,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test14207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14207");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property1 = localTime0.minuteOfHour();
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone3 = dateMidnight2.getZone();
        long long4 = property1.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight2);
        org.joda.time.DateMidnight.Property property5 = dateMidnight2.dayOfWeek();
        org.joda.time.DateMidnight.Property property6 = dateMidnight2.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.MutableDateTime mutableDateTime9 = mutableDateTime8.copy();
        mutableDateTime8.addMinutes(0);
        java.lang.String str12 = mutableDateTime8.toString();
        int int13 = mutableDateTime8.getYearOfEra();
        org.joda.time.Chronology chronology14 = mutableDateTime8.getChronology();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight2.withChronology(chronology14);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime18 = dateTime16.withWeekyear((int) (short) 100);
        org.joda.time.DateTime dateTime20 = dateTime18.minusWeeks((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime20.minusMillis(53618333);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(readableDuration23, readableInstant24, periodType25);
        org.joda.time.ReadableDuration readableDuration27 = null;
        mutablePeriod26.add(readableDuration27);
        mutablePeriod26.addSeconds(53617440);
        org.joda.time.DateTime dateTime31 = dateTime20.plus((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.Chronology chronology32 = dateTime20.getChronology();
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight2.withChronology(chronology32);
        org.joda.time.DurationField durationField34 = chronology32.seconds();
        org.joda.time.DateTimeZone dateTimeZone35 = chronology32.getZone();
        org.joda.time.LocalTime localTime36 = org.joda.time.LocalTime.MIDNIGHT;
        int int37 = localTime36.getHourOfDay();
        org.joda.time.LocalTime localTime39 = localTime36.plusHours((int) (short) 1);
        org.joda.time.LocalTime.Property property40 = localTime36.hourOfDay();
        org.joda.time.LocalTime localTime42 = localTime36.plusMinutes(53981717);
        long long44 = chronology32.set((org.joda.time.ReadablePartial) localTime42, (long) 53866329);
        org.joda.time.LocalTime.Property property45 = localTime42.millisOfDay();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-27423549L) + "'", long4 == (-27423549L));
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime9);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-22T05:56:25.293+14:53:39.988" + "'", str12, "2022-02-22T05:56:25.293+14:53:39.988");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localTime42);
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + 59000012L + "'", long44 == 59000012L);
        org.junit.Assert.assertNotNull(property45);
    }

    @Test
    public void test14208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14208");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.withWeekyear((int) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusWeeks((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusMillis(53618333);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(readableDuration7, readableInstant8, periodType9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        mutablePeriod10.add(readableDuration11);
        mutablePeriod10.addSeconds(53617440);
        org.joda.time.DateTime dateTime15 = dateTime4.plus((org.joda.time.ReadablePeriod) mutablePeriod10);
        mutablePeriod10.addMinutes(871);
        int int18 = mutablePeriod10.getYears();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test14209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14209");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period((long) (byte) 100, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(chronology3);
        org.joda.time.MutableDateTime mutableDateTime5 = mutableDateTime4.copy();
        org.joda.time.Duration duration6 = period2.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime5);
        int int7 = period2.size();
        org.joda.time.format.PeriodFormatter periodFormatter8 = null;
        java.lang.String str9 = period2.toString(periodFormatter8);
        int int10 = period2.getSeconds();
        org.joda.time.format.DateTimePrinter dateTimePrinter12 = null;
        org.joda.time.format.DateTimeParser dateTimeParser13 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter12, dateTimeParser13);
        boolean boolean15 = dateTimeFormatter14.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter14.withPivotYear((java.lang.Integer) 1);
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone19 = dateMidnight18.getZone();
        boolean boolean21 = dateTimeZone19.isStandardOffset((long) 'a');
        org.joda.time.LocalDate localDate22 = org.joda.time.LocalDate.now(dateTimeZone19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter17.withZone(dateTimeZone19);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) 53628506, dateTimeZone19);
        boolean boolean25 = period2.equals((java.lang.Object) dateTimeZone19);
        org.joda.time.Period period27 = period2.withDays(53620972);
        org.joda.time.Period period28 = period2.negated();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) (byte) 100, chronology30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(chronology32);
        org.joda.time.MutableDateTime mutableDateTime34 = mutableDateTime33.copy();
        org.joda.time.Duration duration35 = period31.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime34);
        int int36 = period31.size();
        org.joda.time.Period period38 = period31.plusMinutes(53619248);
        org.joda.time.Hours hours39 = period38.toStandardHours();
        org.joda.time.Period period40 = period28.minus((org.joda.time.ReadablePeriod) period38);
        org.joda.time.Period period42 = period28.plusWeeks(53641106);
        org.joda.time.Period period43 = period28.toPeriod();
        java.lang.String str44 = period28.toString();
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PT0.100S" + "'", str9, "PT0.100S");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 8 + "'", int36 == 8);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(hours39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "PT0.100S" + "'", str44, "PT0.100S");
    }

    @Test
    public void test14210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14210");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        int int2 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone4 = dateMidnight3.getZone();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone4);
        mutableDateTime1.setZoneRetainFields(dateTimeZone4);
        long long10 = dateTimeZone4.convertLocalToUTC((long) 2, false, (long) 10);
        java.util.TimeZone timeZone11 = dateTimeZone4.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now(dateTimeZone4);
        mutableDateTime12.setDayOfMonth(20);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 385 + "'", int2 == 385);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-53619986L) + "'", long10 == (-53619986L));
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+14:53");
        org.junit.Assert.assertNotNull(mutableDateTime12);
    }

    @Test
    public void test14211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14211");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((-4639822905599966L));
    }

    @Test
    public void test14212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14212");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusYears((int) (short) 10);
        org.joda.time.DateTime dateTime10 = dateTime6.plus((long) 100);
        org.joda.time.DateTime.Property property11 = dateTime6.weekOfWeekyear();
        org.joda.time.DateTime dateTime13 = dateTime6.withCenturyOfEra(779);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test14213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14213");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) (short) 1, chronology2);
        java.lang.String str4 = localDate3.toString();
        org.joda.time.LocalDate localDate6 = localDate3.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology7 = localDate6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay((long) (short) 1, chronology7);
        int int9 = yearMonthDay8.getDayOfMonth();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(readableDuration10, readableInstant11, periodType12);
        mutablePeriod13.addYears((int) (byte) 0);
        int int16 = mutablePeriod13.getMonths();
        int int17 = mutablePeriod13.getSeconds();
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay8.plus((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) (short) 1, chronology20);
        java.lang.String str22 = localDate21.toString();
        org.joda.time.LocalDate localDate24 = localDate21.withYearOfEra((int) (byte) 100);
        org.joda.time.LocalDate.Property property25 = localDate21.weekOfWeekyear();
        org.joda.time.DateTime dateTime26 = localDate21.toDateTimeAtCurrentTime();
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone28 = dateMidnight27.getZone();
        boolean boolean30 = dateTimeZone28.isStandardOffset((long) 'a');
        org.joda.time.DateTime dateTime31 = dateTime26.withZoneRetainFields(dateTimeZone28);
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay(dateTimeZone28);
        org.joda.time.DateMidnight dateMidnight33 = yearMonthDay18.toDateMidnight(dateTimeZone28);
        org.joda.time.DateMidnight.Property property34 = dateMidnight33.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight36 = property34.setCopy("2022-02-21T15:00:48.475");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-21T15:00:48.475\" for yearOfCentury is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1970-01-01" + "'", str22, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(property34);
    }

    @Test
    public void test14214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14214");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableDuration0, readableInstant1, periodType2);
        mutablePeriod3.addYears((int) (byte) 0);
        int int6 = mutablePeriod3.getMonths();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(readableDuration7, readableInstant8, periodType9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        mutablePeriod10.add(readableDuration11);
        mutablePeriod10.addMonths((int) '#');
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) (short) 1, chronology16);
        int int18 = localDate17.getDayOfYear();
        org.joda.time.LocalTime localTime19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = localDate17.toDateTime(localTime19, dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = localDate17.toDateMidnight(dateTimeZone22);
        org.joda.time.DateMidnight.Property property24 = dateMidnight23.yearOfEra();
        int int25 = dateMidnight23.getMinuteOfHour();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period((long) (byte) 100, chronology27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(chronology29);
        org.joda.time.MutableDateTime mutableDateTime31 = mutableDateTime30.copy();
        org.joda.time.Duration duration32 = period28.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime31);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight23.plus((org.joda.time.ReadableDuration) duration32);
        mutablePeriod10.add((org.joda.time.ReadableDuration) duration32);
        mutablePeriod3.setPeriod((org.joda.time.ReadableDuration) duration32);
        mutablePeriod3.add(53644667, 11, 1970, 96, 53644667, 53648497, 53646242, 53626518);
        org.joda.time.PeriodType periodType45 = org.joda.time.PeriodType.days();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate((long) (short) 1, chronology47);
        int int49 = localDate48.getDayOfYear();
        org.joda.time.LocalTime localTime50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = localDate48.toDateTime(localTime50, dateTimeZone51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime(chronology53);
        org.joda.time.MutableDateTime mutableDateTime55 = mutableDateTime54.copy();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        mutableDateTime55.setZone(dateTimeZone56);
        org.joda.time.MutableDateTime.Property property58 = mutableDateTime55.minuteOfDay();
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime();
        org.joda.time.DurationFieldType durationFieldType60 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTime dateTime62 = dateTime59.withFieldAdded(durationFieldType60, (int) (byte) 0);
        mutableDateTime55.add(durationFieldType60, 8);
        org.joda.time.LocalDate localDate66 = localDate48.withFieldAdded(durationFieldType60, 3);
        int int67 = periodType45.indexOf(durationFieldType60);
        int int68 = mutablePeriod3.get(durationFieldType60);
        org.joda.time.DateMidnight dateMidnight69 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone70 = dateMidnight69.getZone();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.LocalDate localDate73 = new org.joda.time.LocalDate((long) (short) 1, chronology72);
        java.lang.String str74 = localDate73.toString();
        org.joda.time.LocalDate localDate76 = localDate73.withYearOfEra((int) (byte) 100);
        org.joda.time.DateMidnight dateMidnight77 = dateMidnight69.withFields((org.joda.time.ReadablePartial) localDate76);
        org.joda.time.DateMidnight.Property property78 = dateMidnight77.dayOfYear();
        org.joda.time.DateMidnight.Property property79 = dateMidnight77.era();
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = org.joda.time.DateTimeFieldType.millisOfSecond();
        boolean boolean81 = dateMidnight77.isSupported(dateTimeFieldType80);
        org.joda.time.DurationFieldType durationFieldType82 = dateTimeFieldType80.getDurationType();
        boolean boolean83 = mutablePeriod3.isSupported(durationFieldType82);
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.MutableDateTime mutableDateTime85 = new org.joda.time.MutableDateTime(chronology84);
        org.joda.time.MutableDateTime mutableDateTime86 = mutableDateTime85.copy();
        mutableDateTime85.addMinutes(0);
        java.lang.String str89 = mutableDateTime85.toString();
        int int90 = mutableDateTime85.getYearOfEra();
        org.joda.time.Chronology chronology91 = mutableDateTime85.getChronology();
        org.joda.time.Chronology chronology92 = mutableDateTime85.getChronology();
        org.joda.time.DurationField durationField93 = durationFieldType82.getField(chronology92);
        long long96 = durationField93.getMillis(54007601, (long) 51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(durationFieldType60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "1970-01-01" + "'", str74, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertNotNull(dateMidnight77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(dateTimeFieldType80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(durationFieldType82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(mutableDateTime86);
// flaky:         org.junit.Assert.assertEquals("'" + str89 + "' != '" + "2022-02-22T05:56:25.443+14:53:39.988" + "'", str89, "2022-02-22T05:56:25.443+14:53:39.988");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2022 + "'", int90 == 2022);
        org.junit.Assert.assertNotNull(chronology91);
        org.junit.Assert.assertNotNull(chronology92);
        org.junit.Assert.assertNotNull(durationField93);
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 54007601L + "'", long96 == 54007601L);
    }

    @Test
    public void test14215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14215");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property1 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime3 = localTime0.withMillisOfSecond(904);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localTime0.toDateTimeToday(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths(10);
        org.joda.time.DateTime dateTime8 = dateTime7.toDateTime();
        int int9 = dateTime7.getMonthOfYear();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property11 = localTime10.minuteOfHour();
        org.joda.time.LocalTime localTime13 = localTime10.withMillisOfSecond(904);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateTime dateTime15 = localTime10.toDateTimeToday(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusMonths(10);
        org.joda.time.DateTime.Property property18 = dateTime15.minuteOfDay();
        org.joda.time.DateTime.Property property19 = dateTime15.year();
        org.joda.time.DateTime dateTime21 = property19.addWrapFieldToCopy(598);
        org.joda.time.DateTime dateTime22 = property19.roundHalfEvenCopy();
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.days();
        org.joda.time.PeriodType periodType24 = periodType23.withMonthsRemoved();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime22, periodType24);
        mutablePeriod25.setPeriod((long) 568);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12 + "'", int9 == 12);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
    }

    @Test
    public void test14216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14216");
        org.joda.time.Period period1 = org.joda.time.Period.weeks((int) '4');
        org.joda.time.Period period3 = period1.minusYears(895);
        int int4 = period3.getHours();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test14217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14217");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(chronology2);
        org.joda.time.MutableDateTime mutableDateTime4 = mutableDateTime3.copy();
        mutableDateTime3.addMinutes(0);
        java.lang.String str7 = mutableDateTime3.toString();
        int int8 = mutableDateTime3.getYearOfEra();
        org.joda.time.Chronology chronology9 = mutableDateTime3.getChronology();
        org.joda.time.Chronology chronology10 = mutableDateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.centuryOfEra();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(0L, chronology10);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(obj0, chronology10);
        org.joda.time.LocalDate.Property property14 = localDate13.dayOfWeek();
        org.junit.Assert.assertNotNull(mutableDateTime4);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022-02-22T05:56:25.511+14:53:39.988" + "'", str7, "2022-02-22T05:56:25.511+14:53:39.988");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test14218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14218");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        int int2 = mutableDateTime1.getMillisOfSecond();
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone4 = dateMidnight3.getZone();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(dateTimeZone4);
        mutableDateTime1.setZoneRetainFields(dateTimeZone4);
        long long10 = dateTimeZone4.convertLocalToUTC((long) 2, false, (long) 10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(53619988);
        long long14 = dateTimeZone4.getMillisKeepLocal(dateTimeZone12, (long) 53702524);
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone4);
        long long17 = dateTimeZone4.convertUTCToLocal((long) 53619079);
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(dateTimeZone4);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 522 + "'", int2 == 522);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-53619986L) + "'", long10 == (-53619986L));
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 53702524L + "'", long14 == 53702524L);
        org.junit.Assert.assertNotNull(dateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 107239067L + "'", long17 == 107239067L);
    }

    @Test
    public void test14219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14219");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.withWeekyear((int) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minusWeeks((int) '4');
        org.joda.time.DateTime dateTime6 = dateTime4.minusMillis(53618333);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(readableDuration7, readableInstant8, periodType9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        mutablePeriod10.add(readableDuration11);
        mutablePeriod10.addSeconds(53617440);
        org.joda.time.DateTime dateTime15 = dateTime4.plus((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.Period period16 = mutablePeriod10.toPeriod();
        org.joda.time.Period period18 = period16.minusYears(53636825);
        org.joda.time.Period period20 = period18.minusMonths(53939972);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
    }

    @Test
    public void test14220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14220");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.withHourOfDay((int) (short) 10);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) (byte) 100, chronology4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(chronology6);
        org.joda.time.MutableDateTime mutableDateTime8 = mutableDateTime7.copy();
        org.joda.time.Duration duration9 = period5.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime8);
        int int10 = period5.size();
        org.joda.time.format.PeriodFormatter periodFormatter11 = null;
        java.lang.String str12 = period5.toString(periodFormatter11);
        int int13 = period5.getSeconds();
        org.joda.time.Period period15 = period5.plusHours(3);
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay0.minus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.TimeOfDay timeOfDay18 = timeOfDay16.minusMinutes(11);
        int int19 = timeOfDay16.getHourOfDay();
        org.joda.time.DateTimeField[] dateTimeFieldArray20 = timeOfDay16.getFields();
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property22 = localTime21.minuteOfHour();
        org.joda.time.LocalTime localTime23 = property22.roundFloorCopy();
        org.joda.time.LocalTime localTime25 = localTime23.minusHours(1);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(readableDuration26, readableInstant27, periodType28);
        org.joda.time.ReadableDuration readableDuration30 = null;
        mutablePeriod29.add(readableDuration30);
        mutablePeriod29.addMonths((int) '#');
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(readableDuration34, readableInstant35, periodType36);
        org.joda.time.ReadableDuration readableDuration38 = null;
        mutablePeriod37.add(readableDuration38);
        mutablePeriod37.addMonths((int) '#');
        mutablePeriod29.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod37);
        mutablePeriod37.add((-1L));
        org.joda.time.LocalTime localTime45 = localTime23.minus((org.joda.time.ReadablePeriod) mutablePeriod37);
        org.joda.time.LocalTime.Property property46 = localTime23.secondOfMinute();
        org.joda.time.LocalTime localTime47 = property46.getLocalTime();
        org.joda.time.LocalTime localTime49 = property46.addWrapFieldToCopy(53805748);
        org.joda.time.Period period50 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) timeOfDay16, (org.joda.time.ReadablePartial) localTime49);
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "PT0.100S" + "'", str12, "PT0.100S");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(timeOfDay18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldArray20);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(period50);
    }

    @Test
    public void test14221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14221");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period((long) (byte) 100, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(chronology3);
        org.joda.time.MutableDateTime mutableDateTime5 = mutableDateTime4.copy();
        org.joda.time.Duration duration6 = period2.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime5);
        org.joda.time.Period period8 = period2.plusDays((int) (byte) 10);
        int int9 = period8.getHours();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) (short) 1, chronology12);
        java.lang.String str14 = localDate13.toString();
        org.joda.time.LocalDate localDate16 = localDate13.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology17 = localDate16.getChronology();
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay((long) (short) 1, chronology17);
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay18.plusMonths(53617719);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(readableDuration21, readableInstant22, periodType23);
        org.joda.time.ReadableDuration readableDuration25 = null;
        mutablePeriod24.add(readableDuration25);
        mutablePeriod24.addMonths((int) '#');
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(readableDuration29, readableInstant30, periodType31);
        org.joda.time.ReadableDuration readableDuration33 = null;
        mutablePeriod32.add(readableDuration33);
        mutablePeriod32.addMonths((int) '#');
        mutablePeriod24.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod32);
        org.joda.time.YearMonthDay yearMonthDay38 = yearMonthDay20.plus((org.joda.time.ReadablePeriod) mutablePeriod32);
        org.joda.time.MutablePeriod mutablePeriod39 = mutablePeriod32.copy();
        org.joda.time.format.PeriodFormatter periodFormatter40 = null;
        java.lang.String str41 = mutablePeriod39.toString(periodFormatter40);
        org.joda.time.Period period42 = period8.withFields((org.joda.time.ReadablePeriod) mutablePeriod39);
        mutablePeriod39.addMillis(53883795);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-01" + "'", str14, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(yearMonthDay38);
        org.junit.Assert.assertNotNull(mutablePeriod39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "P35M" + "'", str41, "P35M");
        org.junit.Assert.assertNotNull(period42);
    }

    @Test
    public void test14222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14222");
        java.util.Locale locale2 = new java.util.Locale("UTC", "2022-02-21T14:53:49.549Z");
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleAttributes();
        boolean boolean4 = strSet3.isEmpty();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(readableDuration7, readableInstant8, periodType9);
        mutablePeriod10.addYears((int) (byte) 0);
        int int13 = mutablePeriod10.getMonths();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(readableDuration14, readableInstant15, periodType16);
        org.joda.time.ReadableDuration readableDuration18 = null;
        mutablePeriod17.add(readableDuration18);
        mutablePeriod17.addMonths((int) '#');
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) (short) 1, chronology23);
        int int25 = localDate24.getDayOfYear();
        org.joda.time.LocalTime localTime26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = localDate24.toDateTime(localTime26, dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = localDate24.toDateMidnight(dateTimeZone29);
        org.joda.time.DateMidnight.Property property31 = dateMidnight30.yearOfEra();
        int int32 = dateMidnight30.getMinuteOfHour();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Period period35 = new org.joda.time.Period((long) (byte) 100, chronology34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime(chronology36);
        org.joda.time.MutableDateTime mutableDateTime38 = mutableDateTime37.copy();
        org.joda.time.Duration duration39 = period35.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime38);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight30.plus((org.joda.time.ReadableDuration) duration39);
        mutablePeriod17.add((org.joda.time.ReadableDuration) duration39);
        mutablePeriod10.setPeriod((org.joda.time.ReadableDuration) duration39);
        org.joda.time.MutablePeriod mutablePeriod43 = mutablePeriod10.copy();
        org.joda.time.PeriodType periodType44 = mutablePeriod43.getPeriodType();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate((long) (short) 1, chronology47);
        java.lang.String str49 = localDate48.toString();
        org.joda.time.LocalDate localDate51 = localDate48.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology52 = localDate51.getChronology();
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime(533L, chronology52);
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod(0L, (long) 53619770, periodType44, chronology52);
        org.joda.time.DurationFieldType[] durationFieldTypeArray55 = mutablePeriod54.getFieldTypes();
        boolean boolean56 = strSet3.equals((java.lang.Object) mutablePeriod54);
        boolean boolean57 = strSet3.isEmpty();
        org.junit.Assert.assertEquals(locale2.toString(), "utc_2022-02-21T14:53:49.549Z");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(mutablePeriod43);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1970-01-01" + "'", str49, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(durationFieldTypeArray55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test14223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14223");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean3 = localTime1.isSupported(dateTimeFieldType2);
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType2.getDurationType();
        boolean boolean5 = localTime0.isSupported(dateTimeFieldType2);
        org.joda.time.LocalTime localTime7 = localTime0.plusHours(53620972);
        org.joda.time.LocalTime localTime9 = localTime0.plusMinutes((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean11 = localTime9.isSupported(dateTimeFieldType10);
        org.joda.time.LocalTime localTime13 = localTime9.plusSeconds(0);
        org.joda.time.LocalTime.Property property14 = localTime13.millisOfSecond();
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test14224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14224");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone1 = dateMidnight0.getZone();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) (short) 1, chronology3);
        java.lang.String str5 = localDate4.toString();
        org.joda.time.LocalDate localDate7 = localDate4.withYearOfEra((int) (byte) 100);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight0.withFields((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(readableDuration9, readableInstant10, periodType11);
        mutablePeriod12.setMillis(0);
        org.joda.time.LocalDate localDate15 = localDate7.plus((org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.LocalDate localDate17 = localDate15.withWeekyear((int) ' ');
        org.joda.time.LocalDate localDate19 = localDate17.plusDays(783);
        org.joda.time.LocalDate localDate21 = localDate19.withCenturyOfEra(53645);
        org.joda.time.LocalDate.Property property22 = localDate21.yearOfCentury();
        org.joda.time.LocalDate.Property property23 = localDate21.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime25 = localDate21.toDateTimeAtStartOfDay(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
    }

    @Test
    public void test14225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14225");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone1 = dateMidnight0.getZone();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) (short) 1, chronology3);
        java.lang.String str5 = localDate4.toString();
        org.joda.time.LocalDate localDate7 = localDate4.withYearOfEra((int) (byte) 100);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight0.withFields((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(readableDuration9, readableInstant10, periodType11);
        mutablePeriod12.setMillis(0);
        org.joda.time.LocalDate localDate15 = localDate7.plus((org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.LocalDate localDate17 = localDate15.withWeekyear((int) ' ');
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone19 = dateMidnight18.getZone();
        boolean boolean21 = dateTimeZone19.isStandardOffset((long) 'a');
        org.joda.time.LocalDate localDate22 = org.joda.time.LocalDate.now(dateTimeZone19);
        org.joda.time.DateTime dateTime23 = localDate15.toDateTimeAtStartOfDay(dateTimeZone19);
        org.joda.time.DateTimeField[] dateTimeFieldArray24 = localDate15.getFields();
        org.joda.time.LocalDate localDate26 = localDate15.withWeekyear(53728);
        org.joda.time.DateTimeField[] dateTimeFieldArray27 = localDate26.getFields();
        int int28 = localDate26.getWeekyear();
        org.joda.time.LocalTime localTime29 = null;
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) (short) 1, chronology31);
        int int33 = localDate32.getDayOfYear();
        org.joda.time.LocalTime localTime34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = localDate32.toDateTime(localTime34, dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.plusYears((int) (short) 10);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime(chronology39);
        org.joda.time.MutableDateTime mutableDateTime41 = mutableDateTime40.copy();
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone43 = dateMidnight42.getZone();
        mutableDateTime40.setZoneRetainFields(dateTimeZone43);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((java.lang.Object) dateTime38, dateTimeZone43);
        org.joda.time.DateTime dateTime46 = localDate26.toDateTime(localTime29, dateTimeZone43);
        long long49 = dateTimeZone43.adjustOffset((long) 53697620, true);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldArray24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeFieldArray27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 53728 + "'", int28 == 53728);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 53697620L + "'", long49 == 53697620L);
    }

    @Test
    public void test14226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14226");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.withHourOfDay((int) (short) 10);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) (byte) 100, chronology4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(chronology6);
        org.joda.time.MutableDateTime mutableDateTime8 = mutableDateTime7.copy();
        org.joda.time.Duration duration9 = period5.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime8);
        int int10 = period5.size();
        org.joda.time.format.PeriodFormatter periodFormatter11 = null;
        java.lang.String str12 = period5.toString(periodFormatter11);
        int int13 = period5.getSeconds();
        org.joda.time.Period period15 = period5.plusHours(3);
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay0.minus((org.joda.time.ReadablePeriod) period15);
        int int17 = timeOfDay0.size();
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay0.plusHours(53670039);
        org.joda.time.TimeOfDay timeOfDay21 = timeOfDay0.plusHours(53703240);
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay21.minusMillis(53746246);
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "PT0.100S" + "'", str12, "PT0.100S");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(timeOfDay23);
    }

    @Test
    public void test14227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14227");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) (short) 1, chronology2);
        java.lang.String str4 = localDate3.toString();
        org.joda.time.LocalDate localDate6 = localDate3.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology7 = localDate6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay((long) (short) 1, chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.plusMonths(53617719);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone12 = dateMidnight11.getZone();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (short) 1, chronology14);
        java.lang.String str16 = localDate15.toString();
        org.joda.time.LocalDate localDate18 = localDate15.withYearOfEra((int) (byte) 100);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight11.withFields((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight11.withField(dateTimeFieldType20, 842);
        org.joda.time.YearMonthDay.Property property23 = yearMonthDay8.property(dateTimeFieldType20);
        org.joda.time.YearMonthDay.Property property24 = yearMonthDay8.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay26 = property24.addWrapFieldToCopy(15);
        org.joda.time.DurationField durationField27 = property24.getRangeDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = property24.getFieldType();
        org.joda.time.DateTimeField dateTimeField29 = property24.getField();
        org.joda.time.YearMonthDay yearMonthDay31 = property24.addToCopy(54138932);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01" + "'", str16, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(yearMonthDay31);
    }

    @Test
    public void test14228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14228");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setLenient(false);
        java.util.Locale locale3 = java.util.Locale.KOREA;
        java.util.Calendar.Builder builder4 = builder0.setLocale(locale3);
        java.util.Locale locale5 = java.util.Locale.ITALY;
        java.lang.String str6 = locale5.getCountry();
        java.util.Calendar.Builder builder7 = builder4.setLocale(locale5);
        java.util.Set<java.lang.String> strSet8 = locale5.getUnicodeLocaleAttributes();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        java.util.Date date10 = dateTime9.toDate();
        java.time.Instant instant11 = date10.toInstant();
        java.util.Date date12 = java.util.Date.from(instant11);
        java.util.Date date13 = java.util.Date.from(instant11);
        java.util.Date date14 = java.util.Date.from(instant11);
        java.util.Date date15 = java.util.Date.from(instant11);
        boolean boolean16 = strSet8.equals((java.lang.Object) instant11);
        java.util.Date date17 = java.util.Date.from(instant11);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "IT" + "'", str6, "IT");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Mon Feb 21 15:02:45 GMT 2022");
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Mon Feb 21 15:02:45 GMT 2022");
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Mon Feb 21 15:02:45 GMT 2022");
        org.junit.Assert.assertNotNull(date14);
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Mon Feb 21 15:02:45 GMT 2022");
        org.junit.Assert.assertNotNull(date15);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Mon Feb 21 15:02:45 GMT 2022");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(date17);
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Mon Feb 21 15:02:45 GMT 2022");
    }

    @Test
    public void test14229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14229");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = localDate2.toDateMidnight(dateTimeZone7);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.yearOfEra();
        int int10 = dateMidnight8.getMinuteOfHour();
        org.joda.time.Interval interval11 = dateMidnight8.toInterval();
        org.joda.time.MutableDateTime mutableDateTime12 = dateMidnight8.toMutableDateTime();
        mutableDateTime12.addWeeks(53669883);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.era();
        java.lang.String str16 = dateTimeFieldType15.toString();
        int int17 = mutableDateTime12.get(dateTimeFieldType15);
        org.joda.time.DateTime dateTime18 = mutableDateTime12.toDateTime();
        mutableDateTime12.setTime(0L);
        org.joda.time.TimeOfDay timeOfDay21 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime22 = timeOfDay21.toDateTimeToday();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = timeOfDay21.getFieldType(0);
        java.lang.String str25 = dateTimeFieldType24.toString();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime12.set(dateTimeFieldType24, 54080059);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54080059 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "era" + "'", str16, "era");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hourOfDay" + "'", str25, "hourOfDay");
    }

    @Test
    public void test14230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14230");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        int int1 = localDate0.getDayOfWeek();
        org.joda.time.LocalDate.Property property2 = localDate0.centuryOfEra();
        org.joda.time.LocalDate localDate3 = property2.withMaximumValue();
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2 + "'", int1 == 2);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate3);
    }

    @Test
    public void test14231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14231");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusYears((int) (short) 10);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(chronology9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime10.copy();
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone13 = dateMidnight12.getZone();
        mutableDateTime10.setZoneRetainFields(dateTimeZone13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((java.lang.Object) dateTime8, dateTimeZone13);
        org.joda.time.LocalDate localDate17 = localDate15.plusDays(53634384);
        org.joda.time.Chronology chronology18 = localDate17.getChronology();
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay((long) 773);
        int int21 = yearMonthDay20.getYear();
        org.joda.time.LocalDate localDate22 = localDate17.withFields((org.joda.time.ReadablePartial) yearMonthDay20);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1970 + "'", int21 == 1970);
        org.junit.Assert.assertNotNull(localDate22);
    }

    @Test
    public void test14232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14232");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.withWeekyear((int) (short) 100);
        org.joda.time.LocalDate localDate3 = dateTime0.toLocalDate();
        org.joda.time.DateTimeField[] dateTimeFieldArray4 = localDate3.getFields();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTimeFieldArray4);
    }

    @Test
    public void test14233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14233");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property1 = localTime0.minuteOfHour();
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone3 = dateMidnight2.getZone();
        long long4 = property1.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight2);
        org.joda.time.DateMidnight.Property property5 = dateMidnight2.dayOfWeek();
        org.joda.time.DateMidnight.Property property6 = dateMidnight2.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.MutableDateTime mutableDateTime9 = mutableDateTime8.copy();
        mutableDateTime8.addMinutes(0);
        java.lang.String str12 = mutableDateTime8.toString();
        int int13 = mutableDateTime8.getYearOfEra();
        org.joda.time.Chronology chronology14 = mutableDateTime8.getChronology();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight2.withChronology(chronology14);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime18 = dateTime16.withWeekyear((int) (short) 100);
        org.joda.time.DateTime dateTime20 = dateTime18.minusWeeks((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime20.minusMillis(53618333);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(readableDuration23, readableInstant24, periodType25);
        org.joda.time.ReadableDuration readableDuration27 = null;
        mutablePeriod26.add(readableDuration27);
        mutablePeriod26.addSeconds(53617440);
        org.joda.time.DateTime dateTime31 = dateTime20.plus((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.Chronology chronology32 = dateTime20.getChronology();
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight2.withChronology(chronology32);
        org.joda.time.DurationField durationField34 = chronology32.seconds();
        org.joda.time.DateTimeZone dateTimeZone35 = chronology32.getZone();
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(chronology32);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-27423549L) + "'", long4 == (-27423549L));
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime9);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-22T05:56:25.776+14:53:39.988" + "'", str12, "2022-02-22T05:56:25.776+14:53:39.988");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
    }

    @Test
    public void test14234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14234");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period((long) (byte) 100, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(chronology3);
        org.joda.time.MutableDateTime mutableDateTime5 = mutableDateTime4.copy();
        org.joda.time.Duration duration6 = period2.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime5);
        org.joda.time.Period period8 = period2.plusDays((int) (byte) 10);
        org.joda.time.Period period10 = period2.minusMillis(0);
        org.joda.time.Period period12 = period2.plusMillis(53644151);
        org.joda.time.Period period14 = period12.withMillis(32769);
        org.joda.time.Period period16 = period12.multipliedBy((int) (short) 0);
        org.joda.time.Period period17 = period12.negated();
        org.joda.time.Period period19 = period12.withMillis(53842784);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
    }

    @Test
    public void test14235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14235");
        org.joda.time.Period period1 = org.joda.time.Period.seconds(53739548);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test14236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14236");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        java.lang.String str3 = localDate2.toString();
        org.joda.time.LocalDate localDate5 = localDate2.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology6 = localDate5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfCentury();
        long long10 = dateTimeField8.roundHalfFloor((-27422466L));
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((java.lang.Object) long10);
        mutableDateTime11.add(47541L);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime11.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(53809122);
        mutableDateTime11.setZone(dateTimeZone16);
        java.lang.String str19 = dateTimeZone16.getName(0L);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01" + "'", str3, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+14:56:49.122" + "'", str19, "+14:56:49.122");
    }

    @Test
    public void test14237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14237");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((java.lang.Object) periodType0, dateTimeZone2);
        int int4 = localDateTime3.getDayOfMonth();
        int int5 = localDateTime3.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusMonths(339);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusSeconds(0);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.monthOfYear();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 21385831 + "'", int5 == 21385831);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test14238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14238");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableDuration0, readableInstant1, periodType2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutablePeriod3.add(readableDuration4);
        mutablePeriod3.addMonths((int) '#');
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) (short) 1, chronology9);
        int int11 = localDate10.getDayOfYear();
        org.joda.time.LocalTime localTime12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = localDate10.toDateTime(localTime12, dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = localDate10.toDateMidnight(dateTimeZone15);
        org.joda.time.DateMidnight.Property property17 = dateMidnight16.yearOfEra();
        int int18 = dateMidnight16.getMinuteOfHour();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((long) (byte) 100, chronology20);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.MutableDateTime mutableDateTime24 = mutableDateTime23.copy();
        org.joda.time.Duration duration25 = period21.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime24);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight16.plus((org.joda.time.ReadableDuration) duration25);
        mutablePeriod3.add((org.joda.time.ReadableDuration) duration25);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTime dateTime31 = dateTime28.withFieldAdded(durationFieldType29, (int) (byte) 0);
        org.joda.time.DateTime dateTime33 = dateTime28.minusYears(10);
        org.joda.time.DateTime dateTime35 = dateTime28.plusDays(53652419);
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration25, (org.joda.time.ReadableInstant) dateTime28);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime((java.lang.Object) duration25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.Duration");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
    }

    @Test
    public void test14239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14239");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.withWeekyear((int) (short) 100);
        java.util.Locale locale3 = null;
        java.util.Calendar calendar4 = dateTime0.toCalendar(locale3);
        org.joda.time.YearMonthDay yearMonthDay5 = org.joda.time.YearMonthDay.fromCalendarFields(calendar4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = yearMonthDay5.toDateTimeAtCurrentTime(dateTimeZone6);
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay5.plusDays(53626727);
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay5.plusYears(53642637);
        org.joda.time.YearMonthDay.Property property12 = yearMonthDay5.monthOfYear();
        int int14 = yearMonthDay5.getValue(0);
        org.joda.time.DateTime dateTime15 = yearMonthDay5.toDateTimeAtMidnight();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645455765882,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+14:53:39.988,offset=53619988,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=5,HOUR_OF_DAY=5,MINUTE=56,SECOND=25,MILLISECOND=870,ZONE_OFFSET=53619988,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test14240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14240");
        java.lang.Object obj0 = null;
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(obj0);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.withMillisOfSecond(20);
        org.joda.time.TimeOfDay.Property property4 = timeOfDay3.secondOfMinute();
        java.util.Locale locale5 = java.util.Locale.JAPANESE;
        java.lang.String str6 = property4.getAsShortText(locale5);
        org.joda.time.DurationField durationField7 = property4.getRangeDurationField();
        org.joda.time.TimeOfDay timeOfDay9 = property4.addToCopy(53646596);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.TimeOfDay.Property property11 = timeOfDay9.property(dateTimeFieldType10);
        org.joda.time.DurationFieldType durationFieldType12 = dateTimeFieldType10.getRangeDurationType();
        java.lang.String str13 = dateTimeFieldType10.getName();
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "26" + "'", str6, "26");
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hourOfDay" + "'", str13, "hourOfDay");
    }

    @Test
    public void test14241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14241");
        java.util.Locale locale2 = new java.util.Locale("UTC", "2022-02-21T14:53:49.549Z");
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleAttributes();
        java.util.Locale.LanguageRange[] languageRangeArray4 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList5 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList5, languageRangeArray4);
        java.util.Locale locale7 = java.util.Locale.FRENCH;
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.util.Locale locale11 = java.util.Locale.FRENCH;
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.util.Locale locale13 = java.util.Locale.CANADA;
        java.lang.String str15 = locale13.getExtension('a');
        java.util.Locale locale16 = java.util.Locale.ITALY;
        java.util.Locale[] localeArray17 = new java.util.Locale[] { locale7, locale8, locale9, locale10, locale11, locale12, locale13, locale16 };
        java.util.ArrayList<java.util.Locale> localeList18 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList18, localeArray17);
        java.util.List<java.util.Locale> localeList20 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, (java.util.Collection<java.util.Locale>) localeList18);
        java.util.Locale locale21 = java.util.Locale.CANADA;
        java.util.Locale locale22 = java.util.Locale.ITALY;
        java.util.Locale locale23 = java.util.Locale.JAPANESE;
        java.util.Locale locale24 = java.util.Locale.ITALY;
        java.util.Locale locale25 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale26 = java.util.Locale.CANADA;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) (short) 1, chronology28);
        int int30 = localDate29.getDayOfYear();
        org.joda.time.LocalTime localTime31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = localDate29.toDateTime(localTime31, dateTimeZone32);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = localDate29.toDateMidnight(dateTimeZone34);
        org.joda.time.DateMidnight.Property property36 = dateMidnight35.yearOfEra();
        int int37 = dateMidnight35.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property38 = dateMidnight35.year();
        java.util.Locale locale39 = java.util.Locale.FRENCH;
        java.lang.String str40 = property38.getAsText(locale39);
        java.util.Locale locale41 = java.util.Locale.JAPANESE;
        java.util.Locale locale42 = java.util.Locale.JAPANESE;
        java.util.Locale[] localeArray43 = new java.util.Locale[] { locale21, locale22, locale23, locale24, locale25, locale26, locale39, locale41, locale42 };
        java.util.ArrayList<java.util.Locale> localeList44 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList44, localeArray43);
        java.util.Locale.FilteringMode filteringMode46 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.util.Locale> localeList47 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, (java.util.Collection<java.util.Locale>) localeList44, filteringMode46);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap48 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList49 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, strMap48);
        java.util.Locale locale50 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet51 = locale50.getUnicodeLocaleKeys();
        java.util.stream.Stream<java.lang.String> strStream52 = strSet51.parallelStream();
        java.util.Spliterator<java.lang.String> strSpliterator53 = strSet51.spliterator();
        java.lang.String str54 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, (java.util.Collection<java.lang.String>) strSet51);
        boolean boolean55 = strSet3.containsAll((java.util.Collection<java.lang.String>) strSet51);
        java.util.Locale locale56 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet57 = locale56.getUnicodeLocaleKeys();
        java.util.stream.Stream<java.lang.String> strStream58 = strSet57.parallelStream();
        boolean boolean59 = strSet3.removeAll((java.util.Collection<java.lang.String>) strSet57);
        boolean boolean60 = strSet57.isEmpty();
        boolean boolean61 = strSet57.isEmpty();
        int int62 = strSet57.size();
        java.lang.Object[] objArray63 = strSet57.toArray();
        boolean boolean64 = strSet57.isEmpty();
        org.joda.time.format.DateTimePrinter dateTimePrinter65 = null;
        org.joda.time.format.DateTimeParser dateTimeParser66 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter67 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter65, dateTimeParser66);
        boolean boolean68 = dateTimeFormatter67.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter70 = dateTimeFormatter67.withPivotYear((java.lang.Integer) 1);
        org.joda.time.DateMidnight dateMidnight71 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone72 = dateMidnight71.getZone();
        boolean boolean74 = dateTimeZone72.isStandardOffset((long) 'a');
        org.joda.time.LocalDate localDate75 = org.joda.time.LocalDate.now(dateTimeZone72);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter76 = dateTimeFormatter70.withZone(dateTimeZone72);
        org.joda.time.YearMonthDay yearMonthDay77 = new org.joda.time.YearMonthDay(dateTimeZone72);
        org.joda.time.YearMonthDay yearMonthDay79 = yearMonthDay77.plusDays(53747412);
        org.joda.time.YearMonthDay yearMonthDay81 = yearMonthDay79.withYear(460);
        org.joda.time.LocalDate localDate82 = yearMonthDay81.toLocalDate();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray83 = yearMonthDay81.getFieldTypes();
        boolean boolean84 = strSet57.remove((java.lang.Object) yearMonthDay81);
        org.junit.Assert.assertEquals(locale2.toString(), "utc_2022-02-21T14:53:49.549Z");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(languageRangeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
        org.junit.Assert.assertNotNull(localeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(localeList20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ja");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1970" + "'", str40, "1970");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ja");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ja");
        org.junit.Assert.assertNotNull(localeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + filteringMode46 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode46.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(localeList47);
        org.junit.Assert.assertNotNull(languageRangeList49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertNotNull(strStream52);
        org.junit.Assert.assertNotNull(strSpliterator53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertNotNull(strStream58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter70);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertNotNull(dateTimeFormatter76);
        org.junit.Assert.assertNotNull(yearMonthDay79);
        org.junit.Assert.assertNotNull(yearMonthDay81);
        org.junit.Assert.assertNotNull(localDate82);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test14242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14242");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 2034);
        org.joda.time.LocalTime.Property property2 = localTime1.hourOfDay();
        org.junit.Assert.assertNotNull(property2);
    }

    @Test
    public void test14243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14243");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight(10280, 54116637, 312);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54116637 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14244");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        java.lang.String str3 = localDate2.toString();
        org.joda.time.LocalDate localDate5 = localDate2.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology6 = localDate5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfCentury();
        long long10 = dateTimeField8.roundHalfFloor((-27422466L));
        org.joda.time.DurationField durationField11 = dateTimeField8.getLeapDurationField();
        long long14 = dateTimeField8.add((long) 935, 54057678);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01" + "'", str3, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNull(durationField11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1705895549884800935L + "'", long14 == 1705895549884800935L);
    }

    @Test
    public void test14245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14245");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        long long2 = dateTimeZone0.convertUTCToLocal(1645455235556L);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(dateTimeZone0);
        org.joda.time.LocalDate.Property property4 = localDate3.yearOfEra();
        org.joda.time.LocalDate localDate5 = property4.getLocalDate();
        org.joda.time.LocalDate localDate7 = localDate5.plusDays(536);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime9.copy();
        mutableDateTime9.addMinutes(0);
        java.lang.String str13 = mutableDateTime9.toString();
        org.joda.time.format.DateTimePrinter dateTimePrinter15 = null;
        org.joda.time.format.DateTimeParser dateTimeParser16 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter15, dateTimeParser16);
        boolean boolean18 = dateTimeFormatter17.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter17.withPivotYear((java.lang.Integer) 1);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone22 = dateMidnight21.getZone();
        boolean boolean24 = dateTimeZone22.isStandardOffset((long) 'a');
        org.joda.time.LocalDate localDate25 = org.joda.time.LocalDate.now(dateTimeZone22);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter20.withZone(dateTimeZone22);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 53628506, dateTimeZone22);
        mutableDateTime9.setZoneRetainFields(dateTimeZone22);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) (byte) 100, chronology30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(chronology32);
        org.joda.time.MutableDateTime mutableDateTime34 = mutableDateTime33.copy();
        org.joda.time.Duration duration35 = period31.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime34);
        mutableDateTime9.add((org.joda.time.ReadableDuration) duration35, 53625309);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(chronology38);
        org.joda.time.MutableDateTime mutableDateTime40 = mutableDateTime39.copy();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        mutableDateTime40.setZone(dateTimeZone41);
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime40.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(53619988);
        java.lang.String str46 = dateTimeZone45.toString();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate(dateTimeZone45);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.LocalDate.Property property49 = localDate47.property(dateTimeFieldType48);
        boolean boolean50 = mutableDateTime40.isSupported(dateTimeFieldType48);
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime9.property(dateTimeFieldType48);
        java.lang.String str52 = dateTimeFieldType48.toString();
        int int53 = localDate5.get(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645508855544L + "'", long2 == 1645508855544L);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(mutableDateTime10);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022-02-22T05:56:26.747+14:53:39.988" + "'", str13, "2022-02-22T05:56:26.747+14:53:39.988");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+14:53:39.988" + "'", str46, "+14:53:39.988");
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "dayOfMonth" + "'", str52, "dayOfMonth");
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 22 + "'", int53 == 22);
    }

    @Test
    public void test14246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14246");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property1 = localTime0.minuteOfHour();
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone3 = dateMidnight2.getZone();
        long long4 = property1.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight2);
        org.joda.time.DateMidnight.Property property5 = dateMidnight2.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight2.withCenturyOfEra(2022);
        org.joda.time.Period period9 = org.joda.time.Period.weeks(598);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight7.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property12 = localTime11.minuteOfHour();
        org.joda.time.LocalTime localTime14 = localTime11.withMillisOfSecond(904);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = localTime11.toDateTimeToday(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.plusMonths(10);
        org.joda.time.DateTime.Property property19 = dateTime16.minuteOfDay();
        org.joda.time.DateTime dateTime20 = property19.getDateTime();
        org.joda.time.DateTime.Property property21 = dateTime20.dayOfWeek();
        org.joda.time.DateTime dateTime23 = dateTime20.minusMonths(21);
        org.joda.time.DateTime dateTime25 = dateTime23.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime27 = dateTime23.plusSeconds((int) (byte) 1);
        org.joda.time.Duration duration28 = period9.toDurationFrom((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Duration duration29 = duration28.toDuration();
        org.joda.time.Period period30 = duration29.toPeriod();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-27423549L) + "'", long4 == (-27423549L));
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(period30);
    }

    @Test
    public void test14247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14247");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalDate.Property property4 = localDate2.yearOfEra();
        org.joda.time.LocalDate localDate6 = property4.addWrapFieldToCopy(773);
        org.joda.time.LocalDate localDate8 = localDate6.plusWeeks(613);
        org.joda.time.DateTime dateTime9 = localDate6.toDateTimeAtCurrentTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) (short) 1, chronology12);
        java.lang.String str14 = localDate13.toString();
        org.joda.time.LocalDate localDate16 = localDate13.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology17 = localDate16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.yearOfEra();
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType10.getField(chronology17);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(chronology17);
        org.joda.time.DateTimeField dateTimeField21 = chronology17.dayOfMonth();
        java.lang.String str22 = dateTimeField21.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = dateTimeField21.getType();
        org.joda.time.LocalDate.Property property24 = localDate6.property(dateTimeFieldType23);
        java.util.Locale locale27 = new java.util.Locale("UTC", "2022-02-21T14:53:49.549Z");
        java.lang.String str28 = locale27.getCountry();
        java.lang.String str30 = locale27.getExtension('x');
        java.lang.String str31 = locale27.getScript();
        int int32 = property24.getMaximumShortTextLength(locale27);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-01" + "'", str14, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "DateTimeField[dayOfMonth]" + "'", str22, "DateTimeField[dayOfMonth]");
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertEquals(locale27.toString(), "utc_2022-02-21T14:53:49.549Z");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022-02-21T14:53:49.549Z" + "'", str28, "2022-02-21T14:53:49.549Z");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
    }

    @Test
    public void test14248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14248");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) (short) 1, chronology2);
        java.lang.String str4 = localDate3.toString();
        org.joda.time.LocalDate localDate6 = localDate3.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology7 = localDate6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay((long) (short) 1, chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.plusMonths(53617719);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone12 = dateMidnight11.getZone();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (short) 1, chronology14);
        java.lang.String str16 = localDate15.toString();
        org.joda.time.LocalDate localDate18 = localDate15.withYearOfEra((int) (byte) 100);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight11.withFields((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight11.withField(dateTimeFieldType20, 842);
        org.joda.time.YearMonthDay.Property property23 = yearMonthDay8.property(dateTimeFieldType20);
        org.joda.time.YearMonthDay.Property property24 = yearMonthDay8.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay26 = property24.addToCopy(53629078);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) (short) 1, chronology28);
        java.lang.String str30 = localDate29.toString();
        org.joda.time.LocalDate localDate32 = localDate29.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology33 = localDate32.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.yearOfEra();
        org.joda.time.DateTimeField dateTimeField35 = chronology33.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime36 = org.joda.time.MutableDateTime.now(chronology33);
        org.joda.time.DateTimeField dateTimeField37 = chronology33.secondOfMinute();
        java.lang.String str38 = chronology33.toString();
        org.joda.time.YearMonthDay yearMonthDay39 = yearMonthDay26.withChronologyRetainFields(chronology33);
        org.joda.time.Chronology chronology40 = chronology33.withUTC();
        org.joda.time.DateTimeZone dateTimeZone41 = chronology33.getZone();
        org.joda.time.DateTimeField dateTimeField42 = chronology33.secondOfDay();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01" + "'", str16, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1970-01-01" + "'", str30, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[UTC]" + "'", str38, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTimeField42);
    }

    @Test
    public void test14249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14249");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTime dateTime3 = dateTime0.withFieldAdded(durationFieldType1, (int) (byte) 0);
        org.joda.time.DateTime dateTime5 = dateTime0.minusYears(10);
        org.joda.time.DateTime dateTime7 = dateTime0.minus(12336503L);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.weekyears();
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
    }

    @Test
    public void test14250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14250");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.withHourOfDay((int) (short) 10);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.hours();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay0.withFieldAdded(durationFieldType3, 53625645);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay0.plusHours((int) '4');
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.days();
        org.joda.time.PeriodType periodType9 = periodType8.withMonthsRemoved();
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.time();
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) 53619708);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.hours();
        mutableDateTime12.add(durationFieldType13, (int) (byte) 0);
        int int16 = periodType10.indexOf(durationFieldType13);
        boolean boolean17 = periodType8.isSupported(durationFieldType13);
        java.lang.String str18 = durationFieldType13.getName();
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay0.withFieldAdded(durationFieldType13, 53689021);
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(53728, 410, 1439, 53639477);
        org.joda.time.TimeOfDay timeOfDay26 = timeOfDay20.minus((org.joda.time.ReadablePeriod) mutablePeriod25);
        int int27 = timeOfDay20.size();
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hours" + "'", str18, "hours");
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
    }

    @Test
    public void test14251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14251");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone1 = dateMidnight0.getZone();
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight0.plusYears(53619079);
        org.joda.time.DateMidnight.Property property4 = dateMidnight0.monthOfYear();
        org.joda.time.DateMidnight dateMidnight5 = property4.withMinimumValue();
        java.lang.String str6 = dateMidnight5.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.Instant instant8 = org.joda.time.Instant.now();
        org.joda.time.MutableDateTime mutableDateTime9 = instant8.toMutableDateTimeISO();
        org.joda.time.Instant instant11 = org.joda.time.Instant.parse("2022-02-21T14:53:37.096Z");
        org.joda.time.Chronology chronology12 = instant11.getChronology();
        mutableDateTime9.setChronology(chronology12);
        boolean boolean14 = dateTimeFieldType7.isSupported(chronology12);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight5.withField(dateTimeFieldType7, 53617719);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.hours();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((java.lang.Object) 53617719, periodType17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-01-22T00:00:00.000+14:53:39.988" + "'", str6, "2022-01-22T00:00:00.000+14:53:39.988");
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(periodType17);
    }

    @Test
    public void test14252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14252");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (byte) 100);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(readableDuration2, readableInstant3, periodType4);
        mutablePeriod5.addYears((int) (byte) 0);
        int int8 = mutablePeriod5.getMonths();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(readableDuration9, readableInstant10, periodType11);
        org.joda.time.ReadableDuration readableDuration13 = null;
        mutablePeriod12.add(readableDuration13);
        mutablePeriod12.addMonths((int) '#');
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) (short) 1, chronology18);
        int int20 = localDate19.getDayOfYear();
        org.joda.time.LocalTime localTime21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = localDate19.toDateTime(localTime21, dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = localDate19.toDateMidnight(dateTimeZone24);
        org.joda.time.DateMidnight.Property property26 = dateMidnight25.yearOfEra();
        int int27 = dateMidnight25.getMinuteOfHour();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((long) (byte) 100, chronology29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime(chronology31);
        org.joda.time.MutableDateTime mutableDateTime33 = mutableDateTime32.copy();
        org.joda.time.Duration duration34 = period30.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime33);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight25.plus((org.joda.time.ReadableDuration) duration34);
        mutablePeriod12.add((org.joda.time.ReadableDuration) duration34);
        mutablePeriod5.setPeriod((org.joda.time.ReadableDuration) duration34);
        org.joda.time.MutablePeriod mutablePeriod38 = mutablePeriod5.copy();
        org.joda.time.PeriodType periodType39 = mutablePeriod38.getPeriodType();
        mutablePeriod38.addSeconds(773);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) (short) 1, chronology45);
        java.lang.String str47 = localDate46.toString();
        org.joda.time.LocalDate localDate49 = localDate46.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology50 = localDate49.getChronology();
        mutablePeriod38.setPeriod((long) 15, 1L, chronology50);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate((long) (short) 1, chronology56);
        java.lang.String str58 = localDate57.toString();
        org.joda.time.LocalDate localDate60 = localDate57.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology61 = localDate60.getChronology();
        org.joda.time.YearMonthDay yearMonthDay62 = new org.joda.time.YearMonthDay((long) (short) 1, chronology61);
        mutablePeriod38.setPeriod((long) 53626705, (long) 339, chronology61);
        java.lang.String str64 = chronology61.toString();
        org.joda.time.DateTimeField dateTimeField65 = chronology61.clockhourOfHalfday();
        mutableDateTime1.setChronology(chronology61);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(mutablePeriod38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1970-01-01" + "'", str47, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "1970-01-01" + "'", str58, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "ISOChronology[UTC]" + "'", str64, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField65);
    }

    @Test
    public void test14253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14253");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = localDate2.toDateMidnight(dateTimeZone7);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.yearOfEra();
        int int10 = dateMidnight8.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property11 = dateMidnight8.year();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight8.plusYears((int) ' ');
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((java.lang.Object) dateMidnight8);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfYear();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology16);
        org.joda.time.MutableDateTime mutableDateTime18 = mutableDateTime17.copy();
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone20 = dateMidnight19.getZone();
        mutableDateTime17.setZoneRetainFields(dateTimeZone20);
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = localDate14.toDateTimeAtStartOfDay(dateTimeZone20);
        org.joda.time.LocalDate.Property property24 = localDate14.year();
        org.joda.time.LocalDate localDate25 = property24.roundFloorCopy();
        org.joda.time.LocalDate localDate26 = property24.roundCeilingCopy();
        org.joda.time.LocalDate localDate28 = property24.setCopy(348);
        org.joda.time.LocalDate localDate29 = property24.roundCeilingCopy();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate29);
    }

    @Test
    public void test14254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14254");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property1 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime3 = localTime0.withMillisOfSecond(904);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localTime0.toDateTimeToday(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths(10);
        org.joda.time.DateTime.Property property8 = dateTime5.minuteOfDay();
        org.joda.time.DateTime.Property property9 = dateTime5.year();
        org.joda.time.DateTime dateTime10 = property9.roundFloorCopy();
        org.joda.time.DateTime dateTime12 = dateTime10.plusMinutes(10);
        org.joda.time.DateTime.Property property13 = dateTime10.yearOfEra();
        org.joda.time.DateTime dateTime15 = property13.addToCopy(409);
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.withCenturyOfEra(1);
        org.joda.time.DateTime dateTime19 = dateMidnight18.toDateTime();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) 53619248, (long) 1);
        mutablePeriod22.add((int) (byte) 10, 904, 53619708, 47, 10, (-292275054), 0, 342);
        int int32 = mutablePeriod22.size();
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight18.minus((org.joda.time.ReadablePeriod) mutablePeriod22);
        org.joda.time.DateTime dateTime34 = dateTime15.minus((org.joda.time.ReadablePeriod) mutablePeriod22);
        org.joda.time.MutableDateTime mutableDateTime35 = dateTime34.toMutableDateTimeISO();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 8 + "'", int32 == 8);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
    }

    @Test
    public void test14255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14255");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) 53662339);
    }

    @Test
    public void test14256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14256");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2022-02-21T14:53:37.096Z");
        org.joda.time.Chronology chronology2 = instant1.getChronology();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(chronology3);
        org.joda.time.MutableDateTime mutableDateTime5 = mutableDateTime4.copy();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        mutableDateTime5.setZone(dateTimeZone6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) (short) 1, chronology9);
        int int11 = localDate10.getDayOfYear();
        org.joda.time.LocalTime localTime12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = localDate10.toDateTime(localTime12, dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = localDate10.toDateMidnight(dateTimeZone15);
        org.joda.time.DateMidnight.Property property17 = dateMidnight16.yearOfEra();
        int int18 = dateMidnight16.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property19 = dateMidnight16.year();
        boolean boolean20 = mutableDateTime5.isBefore((org.joda.time.ReadableInstant) dateMidnight16);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime5.dayOfMonth();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(readableDuration22, readableInstant23, periodType24);
        mutablePeriod25.addYears((int) (byte) 0);
        int int28 = mutablePeriod25.getMonths();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(readableDuration29, readableInstant30, periodType31);
        org.joda.time.ReadableDuration readableDuration33 = null;
        mutablePeriod32.add(readableDuration33);
        mutablePeriod32.addMonths((int) '#');
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) (short) 1, chronology38);
        int int40 = localDate39.getDayOfYear();
        org.joda.time.LocalTime localTime41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateTime dateTime43 = localDate39.toDateTime(localTime41, dateTimeZone42);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateMidnight dateMidnight45 = localDate39.toDateMidnight(dateTimeZone44);
        org.joda.time.DateMidnight.Property property46 = dateMidnight45.yearOfEra();
        int int47 = dateMidnight45.getMinuteOfHour();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Period period50 = new org.joda.time.Period((long) (byte) 100, chronology49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime(chronology51);
        org.joda.time.MutableDateTime mutableDateTime53 = mutableDateTime52.copy();
        org.joda.time.Duration duration54 = period50.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime53);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight45.plus((org.joda.time.ReadableDuration) duration54);
        mutablePeriod32.add((org.joda.time.ReadableDuration) duration54);
        mutablePeriod25.setPeriod((org.joda.time.ReadableDuration) duration54);
        mutableDateTime5.add((org.joda.time.ReadableDuration) duration54);
        org.joda.time.Instant instant60 = instant1.withDurationAdded((org.joda.time.ReadableDuration) duration54, 53);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime();
        org.joda.time.DurationFieldType durationFieldType62 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTime dateTime64 = dateTime61.withFieldAdded(durationFieldType62, (int) (byte) 0);
        org.joda.time.DateTime dateTime66 = dateTime61.minusYears(10);
        boolean boolean68 = dateTime66.isBefore((long) 'x');
        org.joda.time.DurationFieldType durationFieldType69 = org.joda.time.DurationFieldType.months();
        org.joda.time.DateTime dateTime71 = dateTime66.withFieldAdded(durationFieldType69, 465);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.LocalDate localDate76 = new org.joda.time.LocalDate((long) (short) 1, chronology75);
        java.lang.String str77 = localDate76.toString();
        org.joda.time.LocalDate localDate79 = localDate76.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology80 = localDate79.getChronology();
        org.joda.time.YearMonthDay yearMonthDay81 = new org.joda.time.YearMonthDay((long) (short) 1, chronology80);
        org.joda.time.DateTimeField dateTimeField82 = dateTimeFieldType72.getField(chronology80);
        int int83 = dateTime71.get(dateTimeFieldType72);
        boolean boolean84 = instant1.isSupported(dateTimeFieldType72);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertNotNull(durationFieldType62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(durationFieldType69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "1970-01-01" + "'", str77, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate79);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2050 + "'", int83 == 2050);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }

    @Test
    public void test14257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14257");
        org.joda.time.Period period1 = org.joda.time.Period.days(571);
        org.joda.time.Weeks weeks2 = period1.toStandardWeeks();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(weeks2);
    }

    @Test
    public void test14258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14258");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = localDate2.toDateMidnight(dateTimeZone7);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.yearOfEra();
        int int10 = dateMidnight8.getMinuteOfHour();
        org.joda.time.Interval interval11 = dateMidnight8.toInterval();
        org.joda.time.MutableDateTime mutableDateTime12 = dateMidnight8.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime12.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime15 = property13.add(9537L);
        org.joda.time.ReadableInstant readableInstant16 = null;
        mutableDateTime15.setDate(readableInstant16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) (short) 1, chronology19);
        int int21 = localDate20.getDayOfYear();
        org.joda.time.LocalTime localTime22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = localDate20.toDateTime(localTime22, dateTimeZone23);
        org.joda.time.DateTime dateTime26 = dateTime24.plusYears((int) (short) 10);
        org.joda.time.DateTime dateTime28 = dateTime24.plus((long) 100);
        org.joda.time.DateTime dateTime30 = dateTime28.minusDays(185);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int32 = dateTime28.get(dateTimeFieldType31);
        org.joda.time.DateTime dateTime33 = dateTime28.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property34 = dateTime28.secondOfMinute();
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone36 = dateMidnight35.getZone();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) (short) 1, chronology38);
        java.lang.String str40 = localDate39.toString();
        org.joda.time.LocalDate localDate42 = localDate39.withYearOfEra((int) (byte) 100);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight35.withFields((org.joda.time.ReadablePartial) localDate42);
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod(readableDuration44, readableInstant45, periodType46);
        mutablePeriod47.setMillis(0);
        org.joda.time.LocalDate localDate50 = localDate42.plus((org.joda.time.ReadablePeriod) mutablePeriod47);
        org.joda.time.LocalDate localDate52 = localDate50.withWeekyear((int) ' ');
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone54 = dateMidnight53.getZone();
        boolean boolean56 = dateTimeZone54.isStandardOffset((long) 'a');
        org.joda.time.LocalDate localDate57 = org.joda.time.LocalDate.now(dateTimeZone54);
        org.joda.time.DateTime dateTime58 = localDate50.toDateTimeAtStartOfDay(dateTimeZone54);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.era();
        java.lang.String str60 = dateTimeFieldType59.getName();
        int int61 = localDate50.indexOf(dateTimeFieldType59);
        boolean boolean62 = dateTime28.isSupported(dateTimeFieldType59);
        org.joda.time.MutableDateTime.Property property63 = mutableDateTime15.property(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1970-01-01" + "'", str40, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "era" + "'", str60, "era");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(property63);
    }

    @Test
    public void test14259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14259");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = localDate2.toDateMidnight(dateTimeZone7);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.yearOfEra();
        int int10 = dateMidnight8.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property11 = dateMidnight8.year();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight8.plusYears((int) ' ');
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((java.lang.Object) dateMidnight8);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfYear();
        org.joda.time.Chronology chronology16 = localDate14.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.weeks();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            long long26 = chronology16.getDateTimeMillis(53907560, 54123643, 53866948, 0, 292278993, 21369480, 2057);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292278993 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test14260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14260");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = localDate2.toDateMidnight(dateTimeZone7);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.yearOfEra();
        int int10 = dateMidnight8.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property11 = dateMidnight8.year();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight8.withMillis((long) ' ');
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.MutableDateTime mutableDateTime16 = mutableDateTime15.copy();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        mutableDateTime16.setZone(dateTimeZone17);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime16.minuteOfDay();
        long long20 = property19.remainder();
        org.joda.time.MutableDateTime mutableDateTime21 = property19.roundHalfCeiling();
        boolean boolean22 = dateMidnight8.isAfter((org.joda.time.ReadableInstant) mutableDateTime21);
        mutableDateTime21.setSecondOfDay(312);
        int int25 = mutableDateTime21.getMillisOfDay();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(property19);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 27076L + "'", long20 == 27076L);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 312000 + "'", int25 == 312000);
    }

    @Test
    public void test14261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14261");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 53635576);
        boolean boolean2 = instant1.isEqualNow();
        org.joda.time.Chronology chronology3 = instant1.getChronology();
        long long4 = instant1.getMillis();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 53635576L + "'", long4 == 53635576L);
    }

    @Test
    public void test14262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14262");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean2 = localTime0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime4 = localTime0.withFields((org.joda.time.ReadablePartial) localTime3);
        java.lang.String str5 = localTime0.toString();
        org.joda.time.LocalTime localTime7 = localTime0.minusHours(773);
        org.joda.time.LocalTime localTime9 = localTime0.withSecondOfMinute(56);
        org.joda.time.LocalTime localTime11 = localTime9.minusHours(53645);
        org.joda.time.LocalTime.Property property12 = localTime9.millisOfDay();
        org.joda.time.LocalTime localTime13 = property12.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime14 = property12.withMaximumValue();
        org.joda.time.LocalTime localTime15 = property12.withMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            int int17 = localTime15.getValue(680);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 680");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localTime4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "05:56:27.105" + "'", str5, "05:56:27.105");
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
    }

    @Test
    public void test14263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14263");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay.Property property1 = timeOfDay0.hourOfDay();
        int int2 = property1.getMaximumValueOverall();
        java.lang.String str3 = property1.toString();
        org.joda.time.DateTimeField dateTimeField4 = property1.getField();
        int int5 = property1.getMinimumValue();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 23 + "'", int2 == 23);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Property[hourOfDay]" + "'", str3, "Property[hourOfDay]");
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test14264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14264");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) (short) 1, chronology2);
        java.lang.String str4 = localDate3.toString();
        org.joda.time.LocalDate localDate6 = localDate3.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology7 = localDate6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay((long) (short) 1, chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.plusMonths(53617719);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone12 = dateMidnight11.getZone();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (short) 1, chronology14);
        java.lang.String str16 = localDate15.toString();
        org.joda.time.LocalDate localDate18 = localDate15.withYearOfEra((int) (byte) 100);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight11.withFields((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight11.withField(dateTimeFieldType20, 842);
        org.joda.time.YearMonthDay.Property property23 = yearMonthDay8.property(dateTimeFieldType20);
        org.joda.time.YearMonthDay.Property property24 = yearMonthDay8.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay26 = property24.addWrapFieldToCopy(15);
        org.joda.time.YearMonthDay yearMonthDay28 = property24.addToCopy(53646133);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) (short) 1, chronology30);
        java.lang.String str32 = localDate31.toString();
        org.joda.time.LocalDate localDate34 = localDate31.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology35 = localDate34.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.yearOfEra();
        org.joda.time.YearMonthDay yearMonthDay37 = yearMonthDay28.withChronologyRetainFields(chronology35);
        org.joda.time.DateMidnight dateMidnight38 = yearMonthDay37.toDateMidnight();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01" + "'", str16, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1970-01-01" + "'", str32, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertNotNull(dateMidnight38);
    }

    @Test
    public void test14265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14265");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(59, 0);
        java.util.TimeZone timeZone3 = dateTimeZone2.toTimeZone();
        timeZone3.setID("");
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) (short) 1, chronology9);
        java.lang.String str11 = localDate10.toString();
        org.joda.time.LocalDate.Property property12 = localDate10.year();
        org.joda.time.LocalDate.Property property13 = localDate10.weekOfWeekyear();
        org.joda.time.LocalDate localDate15 = localDate10.plusWeeks((int) 'u');
        org.joda.time.LocalDate.Property property16 = localDate10.yearOfCentury();
        org.joda.time.tz.NameProvider nameProvider17 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale18 = java.util.Locale.KOREA;
        java.lang.String str21 = nameProvider17.getName(locale18, "DateTimeField[dayOfMonth]", "CA");
        java.lang.String str22 = property16.getAsShortText(locale18);
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(locale18);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str24 = timeZone3.getDisplayName(true, 53904362, locale18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 53904362");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-01" + "'", str11, "1970-01-01");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(nameProvider17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko_KR");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "70" + "'", str22, "70");
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=1645455767175,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=47,MILLISECOND=175,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test14266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14266");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.days();
        org.joda.time.PeriodType periodType2 = periodType1.withMonthsRemoved();
        int int3 = periodType2.size();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 1, chronology6);
        java.lang.String str8 = localDate7.toString();
        org.joda.time.LocalDate localDate10 = localDate7.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology11 = localDate10.getChronology();
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((long) (short) 1, chronology11);
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay12.plusMonths(53617719);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(readableDuration15, readableInstant16, periodType17);
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutablePeriod18.add(readableDuration19);
        mutablePeriod18.addMonths((int) '#');
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(readableDuration23, readableInstant24, periodType25);
        org.joda.time.ReadableDuration readableDuration27 = null;
        mutablePeriod26.add(readableDuration27);
        mutablePeriod26.addMonths((int) '#');
        mutablePeriod18.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay14.plus((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.MutablePeriod mutablePeriod33 = mutablePeriod26.copy();
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.minutes();
        boolean boolean35 = mutablePeriod26.isSupported(durationFieldType34);
        boolean boolean36 = periodType2.isSupported(durationFieldType34);
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(0L, periodType2);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01" + "'", str8, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(mutablePeriod33);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test14267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14267");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone1 = dateMidnight0.getZone();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone1);
        int int4 = localDateTime3.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.plusYears(327);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusHours(53842957);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(chronology9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime10.copy();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        mutableDateTime11.setZone(dateTimeZone12);
        int int14 = mutableDateTime11.getYearOfCentury();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime11.dayOfWeek();
        boolean boolean16 = localDateTime8.equals((java.lang.Object) property15);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 8 + "'", int4 == 8);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 22 + "'", int14 == 22);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test14268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14268");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        java.util.Date date1 = calendar0.getTime();
        int int2 = calendar0.getFirstDayOfWeek();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 1, chronology4);
        int int6 = localDate5.getDayOfYear();
        org.joda.time.LocalTime localTime7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = localDate5.toDateTime(localTime7, dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusYears((int) (short) 10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (short) 1, chronology13);
        int int15 = localDate14.getDayOfYear();
        org.joda.time.LocalTime localTime16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = localDate14.toDateTime(localTime16, dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = localDate14.toDateMidnight(dateTimeZone19);
        org.joda.time.DateMidnight.Property property21 = dateMidnight20.yearOfEra();
        int int22 = dateMidnight20.getMinuteOfHour();
        org.joda.time.Interval interval23 = dateMidnight20.toInterval();
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateMidnight20);
        boolean boolean25 = calendar0.before((java.lang.Object) dateTime11);
        org.joda.time.DateTime dateTime27 = dateTime11.plusMonths(384);
        long long28 = dateTime11.getMillis();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645455767212,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=47,MILLISECOND=212,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date1);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Mon Feb 21 15:02:47 GMT 2022");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 315500567212L + "'", long28 == 315500567212L);
    }

    @Test
    public void test14269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14269");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = mutableDateTime1.copy();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime2.minuteOfDay();
        long long6 = property5.remainder();
        org.joda.time.MutableDateTime mutableDateTime8 = property5.set(842);
        org.joda.time.MutableDateTime mutableDateTime10 = property5.add(53681645);
        java.lang.String str11 = mutableDateTime10.toString();
        mutableDateTime10.add((long) 432);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime10.era();
        int int15 = mutableDateTime10.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(property5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 27215L + "'", long6 == 27215L);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2124-03-18T12:07:27.215+14:53:39.988" + "'", str11, "2124-03-18T12:07:27.215+14:53:39.988");
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 11 + "'", int15 == 11);
    }

    @Test
    public void test14270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14270");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) (short) 1, chronology2);
        java.lang.String str4 = localDate3.toString();
        org.joda.time.LocalDate localDate6 = localDate3.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology7 = localDate6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay((long) (short) 1, chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.plusMonths(53617719);
        int int11 = yearMonthDay8.getDayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay8.plusDays(22);
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay8.withYear(53644151);
        org.joda.time.DateMidnight dateMidnight16 = yearMonthDay8.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.minus((-53617648264L));
        org.joda.time.DateTime dateTime19 = dateMidnight18.toDateTime();
        org.joda.time.LocalDate localDate20 = dateMidnight18.toLocalDate();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localDate20);
    }

    @Test
    public void test14271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14271");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableDuration0, readableInstant1, periodType2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutablePeriod3.add(readableDuration4);
        mutablePeriod3.addMonths((int) '#');
        int int8 = mutablePeriod3.getMillis();
        org.joda.time.MutablePeriod mutablePeriod9 = mutablePeriod3.copy();
        mutablePeriod3.addHours(58103655);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod9);
    }

    @Test
    public void test14272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14272");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.years();
        java.lang.String str1 = periodType0.getName();
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.PeriodType periodType3 = periodType0.withYearsRemoved();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property5 = localTime4.minuteOfHour();
        org.joda.time.LocalTime localTime6 = property5.roundFloorCopy();
        org.joda.time.LocalTime localTime7 = property5.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime9 = property5.addNoWrapToCopy((int) 'a');
        boolean boolean10 = periodType0.equals((java.lang.Object) property5);
        org.joda.time.LocalTime localTime11 = property5.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime12 = property5.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean15 = localTime13.isSupported(dateTimeFieldType14);
        org.joda.time.LocalTime localTime17 = localTime13.withMillisOfDay(53627306);
        org.joda.time.LocalTime localTime18 = localTime12.withFields((org.joda.time.ReadablePartial) localTime17);
        org.joda.time.LocalTime localTime20 = localTime17.minusMillis(54094380);
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Years" + "'", str1, "Years");
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
    }

    @Test
    public void test14273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14273");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period((long) (byte) 100, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(chronology3);
        org.joda.time.MutableDateTime mutableDateTime5 = mutableDateTime4.copy();
        org.joda.time.Duration duration6 = period2.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime5);
        int int7 = period2.size();
        org.joda.time.Period period9 = period2.withWeeks(842);
        org.joda.time.DurationFieldType[] durationFieldTypeArray10 = period2.getFieldTypes();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.MutableDateTime mutableDateTime13 = mutableDateTime12.copy();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        mutableDateTime13.setZone(dateTimeZone14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) (short) 1, chronology17);
        int int19 = localDate18.getDayOfYear();
        org.joda.time.LocalTime localTime20 = null;
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = localDate18.toDateTime(localTime20, dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = localDate18.toDateMidnight(dateTimeZone23);
        org.joda.time.DateMidnight.Property property25 = dateMidnight24.yearOfEra();
        int int26 = dateMidnight24.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property27 = dateMidnight24.year();
        boolean boolean28 = mutableDateTime13.isBefore((org.joda.time.ReadableInstant) dateMidnight24);
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.time();
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) 53619708);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.hours();
        mutableDateTime31.add(durationFieldType32, (int) (byte) 0);
        int int35 = periodType29.indexOf(durationFieldType32);
        mutableDateTime13.add(durationFieldType32, 0);
        boolean boolean38 = period2.isSupported(durationFieldType32);
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.years();
        java.lang.String str40 = periodType39.getName();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod(periodType39);
        org.joda.time.PeriodType periodType42 = periodType39.withMinutesRemoved();
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.days();
        org.joda.time.PeriodType periodType44 = periodType43.withMonthsRemoved();
        org.joda.time.PeriodType periodType45 = periodType43.withYearsRemoved();
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Period period50 = new org.joda.time.Period(10L, (-1L), periodType48, chronology49);
        org.joda.time.Period period51 = period50.normalizedStandard();
        org.joda.time.DurationFieldType durationFieldType52 = org.joda.time.DurationFieldType.hours();
        boolean boolean53 = period51.isSupported(durationFieldType52);
        boolean boolean54 = periodType45.isSupported(durationFieldType52);
        int int55 = periodType39.indexOf(durationFieldType52);
        org.joda.time.Period period56 = period2.normalizedStandard(periodType39);
        org.joda.time.PeriodType periodType57 = periodType39.withDaysRemoved();
        org.joda.time.PeriodType periodType58 = periodType57.withDaysRemoved();
        org.joda.time.DurationFieldType durationFieldType60 = periodType58.getFieldType(0);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(durationFieldTypeArray10);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Years" + "'", str40, "Years");
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(durationFieldType60);
    }

    @Test
    public void test14274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14274");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getWeekYear();
        calendar0.setTimeInMillis((long) 199);
        org.joda.time.LocalTime localTime4 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        java.util.TimeZone timeZone5 = calendar0.getTimeZone();
        timeZone5.setID("0100-01-01T00:00:00.000Z");
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone5);
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone5);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = timeZone5.getDisplayName(false, 53885495);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 53885495");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=199,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"0100-01-01T00:00:00.000Z\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=199,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2022 + "'", int1 == 2022);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645455767305,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"0100-01-01T00:00:00.000Z\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=47,MILLISECOND=305,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1645455767305,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"0100-01-01T00:00:00.000Z\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=47,MILLISECOND=305,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test14275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14275");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = mutableDateTime1.copy();
        mutableDateTime1.addMinutes(0);
        mutableDateTime1.setSecondOfDay(21);
        int int7 = mutableDateTime1.getDayOfMonth();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime9.copy();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        mutableDateTime10.setZone(dateTimeZone11);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime10.minuteOfDay();
        int int14 = mutableDateTime10.getSecondOfMinute();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = mutableDateTime16.copy();
        mutableDateTime16.addMinutes(0);
        java.lang.String str20 = mutableDateTime16.toString();
        int int21 = mutableDateTime16.getYearOfEra();
        org.joda.time.Chronology chronology22 = mutableDateTime16.getChronology();
        org.joda.time.YearMonthDay yearMonthDay23 = new org.joda.time.YearMonthDay(chronology22);
        mutableDateTime10.setChronology(chronology22);
        org.joda.time.DateTime dateTime25 = mutableDateTime1.toDateTime(chronology22);
        org.joda.time.DateTimeField dateTimeField26 = chronology22.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay29 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay31 = timeOfDay29.withHourOfDay((int) (short) 10);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.hours();
        org.joda.time.TimeOfDay timeOfDay34 = timeOfDay29.withFieldAdded(durationFieldType32, 53625645);
        org.joda.time.TimeOfDay timeOfDay36 = timeOfDay29.plusHours((int) '4');
        org.joda.time.TimeOfDay.Property property37 = timeOfDay29.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay38 = property37.withMaximumValue();
        org.joda.time.DurationField durationField39 = property37.getDurationField();
        int int40 = property37.getMinimumValue();
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        int int42 = property37.getMaximumTextLength(locale41);
        java.lang.String str43 = locale41.getDisplayScript();
        // The following exception was thrown during execution in test generation
        try {
            long long44 = dateTimeField26.set(1645455217096L, "", locale41);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for secondOfMinute is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime2);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 22 + "'", int7 == 22);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 27 + "'", int14 == 27);
        org.junit.Assert.assertNotNull(mutableDateTime17);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-22T05:56:27.307+14:53:39.988" + "'", str20, "2022-02-22T05:56:27.307+14:53:39.988");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
    }

    @Test
    public void test14276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14276");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((java.lang.Object) periodType0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusYears((int) '#');
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.plusYears((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra(47);
        int int10 = localDateTime9.size();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.year();
        int int12 = property11.get();
        boolean boolean13 = property11.isLeap();
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 47 + "'", int12 == 47);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test14277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14277");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = localDate2.toDateMidnight(dateTimeZone7);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.yearOfEra();
        int int10 = dateMidnight8.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property11 = dateMidnight8.year();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight8.plusYears((int) ' ');
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((java.lang.Object) dateMidnight8);
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfYear();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology16);
        org.joda.time.MutableDateTime mutableDateTime18 = mutableDateTime17.copy();
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone20 = dateMidnight19.getZone();
        mutableDateTime17.setZoneRetainFields(dateTimeZone20);
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = localDate14.toDateTimeAtStartOfDay(dateTimeZone20);
        org.joda.time.DateTime dateTime24 = dateTime23.toDateTime();
        org.joda.time.DateTime dateTime26 = dateTime23.minusMonths(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime28 = dateTime23.withSecondOfMinute(626);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 626 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test14278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14278");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property1 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime3 = localTime0.withMillisOfSecond(904);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localTime0.toDateTimeToday(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths(10);
        org.joda.time.DateTime.Property property8 = dateTime5.minuteOfDay();
        org.joda.time.DateTime.Property property9 = dateTime5.year();
        org.joda.time.DateTime.Property property10 = dateTime5.millisOfSecond();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(chronology12);
        org.joda.time.MutableDateTime mutableDateTime14 = mutableDateTime13.copy();
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone16 = dateMidnight15.getZone();
        mutableDateTime13.setZoneRetainFields(dateTimeZone16);
        org.joda.time.LocalTime localTime18 = org.joda.time.LocalTime.now(dateTimeZone16);
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) 842, dateTimeZone16);
        org.joda.time.DateMidnight.Property property20 = dateMidnight19.yearOfCentury();
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) dateMidnight19);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight19.minusMonths(54054724);
        org.joda.time.DateMidnight.Property property24 = dateMidnight19.monthOfYear();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test14279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14279");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) (short) 1, chronology3);
        java.lang.String str5 = localDate4.toString();
        org.joda.time.LocalDate localDate7 = localDate4.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology8 = localDate7.getChronology();
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((long) (short) 1, chronology8);
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.plusMonths(53617719);
        int int12 = yearMonthDay9.getDayOfMonth();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (short) 1, chronology14);
        java.lang.String str16 = localDate15.toString();
        org.joda.time.LocalDate localDate18 = localDate15.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology19 = localDate18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfEra();
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay9.withChronologyRetainFields(chronology19);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(obj0, chronology19);
        org.joda.time.DateTime.Property property23 = dateTime22.yearOfCentury();
        int int24 = dateTime22.getWeekyear();
        java.util.Date date25 = dateTime22.toDate();
        org.joda.time.LocalDate localDate26 = org.joda.time.LocalDate.fromDateFields(date25);
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.days();
        org.joda.time.PeriodType periodType28 = periodType27.withMonthsRemoved();
        org.joda.time.PeriodType periodType29 = periodType27.withYearsRemoved();
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period(10L, (-1L), periodType32, chronology33);
        org.joda.time.Period period35 = period34.normalizedStandard();
        org.joda.time.DurationFieldType durationFieldType36 = org.joda.time.DurationFieldType.hours();
        boolean boolean37 = period35.isSupported(durationFieldType36);
        boolean boolean38 = periodType29.isSupported(durationFieldType36);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate40 = localDate26.withFieldAdded(durationFieldType36, 889);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'hours' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01" + "'", str16, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
        org.junit.Assert.assertNotNull(date25);
// flaky:         org.junit.Assert.assertEquals(date25.toString(), "Mon Feb 21 15:02:47 GMT 2022");
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test14280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14280");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((java.lang.Object) periodType0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusYears((int) '#');
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusDays(465);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundHalfFloorCopy();
        org.joda.time.DateTimeField dateTimeField10 = property8.getField();
        org.joda.time.DurationField durationField11 = property8.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime12 = property8.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime13 = property8.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusDays(552);
        int int16 = localDateTime13.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property17 = localDateTime13.era();
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 57 + "'", int16 == 57);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test14281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14281");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property1 = localTime0.minuteOfHour();
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone3 = dateMidnight2.getZone();
        long long4 = property1.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight2);
        org.joda.time.LocalTime localTime5 = property1.withMaximumValue();
        org.joda.time.LocalTime localTime6 = property1.roundFloorCopy();
        org.joda.time.LocalTime localTime8 = property1.addCopy(52040L);
        org.joda.time.LocalTime localTime10 = property1.addWrapFieldToCopy(53633398);
        int int11 = localTime10.getMinuteOfHour();
        org.joda.time.LocalTime localTime13 = localTime10.minusSeconds(53640196);
        org.joda.time.LocalTime localTime15 = localTime13.withMillisOfDay(35);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-27423549L) + "'", long4 == (-27423549L));
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 54 + "'", int11 == 54);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
    }

    @Test
    public void test14282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14282");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime1 = timeOfDay0.toDateTimeToday();
        org.joda.time.DateTime dateTime3 = dateTime1.withMillisOfSecond(409);
        org.joda.time.DateTime.Property property4 = dateTime1.centuryOfEra();
        boolean boolean5 = property4.isLeap();
        org.joda.time.DurationField durationField6 = property4.getLeapDurationField();
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(durationField6);
    }

    @Test
    public void test14283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14283");
        org.joda.time.Period period1 = org.joda.time.Period.minutes(53738410);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test14284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14284");
        org.joda.time.LocalTime localTime4 = org.joda.time.LocalTime.MIDNIGHT;
        int int5 = localTime4.getHourOfDay();
        org.joda.time.Chronology chronology6 = localTime4.getChronology();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(20826L, chronology6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(53828296, 823, 53832, chronology6);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 823 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(chronology6);
    }

    @Test
    public void test14285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14285");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property2 = localTime1.minuteOfHour();
        org.joda.time.LocalTime localTime4 = localTime1.withMillisOfSecond(904);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localTime1.toDateTimeToday(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusMonths(10);
        org.joda.time.DateTime.Property property9 = dateTime6.minuteOfDay();
        org.joda.time.DateTime dateTime10 = property9.getDateTime();
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfWeek();
        org.joda.time.DateTime dateTime13 = dateTime10.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime15 = dateTime13.minusWeeks(53649515);
        org.joda.time.Duration duration16 = period0.toDurationFrom((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(chronology17);
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime18.copy();
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone21 = dateMidnight20.getZone();
        mutableDateTime18.setZoneRetainFields(dateTimeZone21);
        org.joda.time.LocalTime localTime23 = org.joda.time.LocalTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone21);
        java.util.Locale.Builder builder25 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder27 = builder25.setLanguage("");
        java.util.Locale locale28 = builder25.build();
        java.util.Calendar calendar29 = dateTime24.toCalendar(locale28);
        java.util.Calendar calendar30 = dateTime13.toCalendar(locale28);
        org.joda.time.TimeOfDay timeOfDay31 = org.joda.time.TimeOfDay.fromCalendarFields(calendar30);
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(calendar29);
// flaky:         org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=1645455767482,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+14:53:39.988,offset=53619988,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=5,HOUR_OF_DAY=5,MINUTE=56,SECOND=27,MILLISECOND=470,ZONE_OFFSET=53619988,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar30);
// flaky:         org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=1586790167482,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+14:53:39.988,offset=53619988,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2020,MONTH=3,WEEK_OF_YEAR=16,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=105,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=5,HOUR_OF_DAY=5,MINUTE=56,SECOND=27,MILLISECOND=470,ZONE_OFFSET=53619988,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeOfDay31);
    }

    @Test
    public void test14286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14286");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        int int4 = localDate2.getCenturyOfEra();
        org.joda.time.Chronology chronology5 = localDate2.getChronology();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) (short) 1, chronology8);
        java.lang.String str10 = localDate9.toString();
        org.joda.time.LocalDate localDate12 = localDate9.withYearOfEra((int) (byte) 100);
        int int13 = localDate9.getDayOfYear();
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) 53619708);
        org.joda.time.DateTime dateTime16 = localDate9.toDateTime((org.joda.time.ReadableInstant) mutableDateTime15);
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone18 = dateMidnight17.getZone();
        boolean boolean20 = dateTimeZone18.isStandardOffset((long) 'a');
        org.joda.time.LocalDate localDate21 = org.joda.time.LocalDate.now(dateTimeZone18);
        java.lang.String str23 = dateTimeZone18.getNameKey((long) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime24 = mutableDateTime15.toMutableDateTime(dateTimeZone18);
        long long26 = dateTimeZone18.previousTransition((long) 53632);
        long long28 = dateTimeZone18.convertUTCToLocal((long) 53643405);
        long long30 = dateTimeZone18.previousTransition((long) (byte) 1);
        long long32 = dateTimeZone18.nextTransition((long) 53696579);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) (short) 1, chronology35);
        int int37 = localDate36.getDayOfYear();
        org.joda.time.LocalDate.Property property38 = localDate36.yearOfEra();
        org.joda.time.LocalDate localDate40 = property38.addWrapFieldToCopy(773);
        org.joda.time.LocalDate localDate41 = property38.roundCeilingCopy();
        org.joda.time.DateTimeField dateTimeField42 = property38.getField();
        java.util.Locale locale46 = new java.util.Locale("", "hi!");
        java.lang.String str47 = dateTimeField42.getAsShortText(53634384, locale46);
        java.lang.String str48 = dateTimeZone18.getShortName((long) 35, locale46);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str49 = localDate2.toString("2022-02-21T14:57:08.542Z", locale46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 19 + "'", int4 == 19);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-01" + "'", str10, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(localDate21);
// flaky:         org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 53632L + "'", long26 == 53632L);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 107263393L + "'", long28 == 107263393L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 53696579L + "'", long32 == 53696579L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertEquals(locale46.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "53634384" + "'", str47, "53634384");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+14:53:39.988" + "'", str48, "+14:53:39.988");
    }

    @Test
    public void test14287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14287");
        org.joda.time.Period period1 = org.joda.time.Period.weeks((int) '4');
        org.joda.time.Period period3 = period1.minusYears(895);
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.withCenturyOfEra(1);
        org.joda.time.DateTime dateTime7 = dateMidnight6.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime8 = dateMidnight6.toMutableDateTimeISO();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) (byte) 100, chronology10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(chronology12);
        org.joda.time.MutableDateTime mutableDateTime14 = mutableDateTime13.copy();
        org.joda.time.Duration duration15 = period11.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime14);
        org.joda.time.Seconds seconds16 = period11.toStandardSeconds();
        org.joda.time.Period period18 = period11.plusYears(0);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight6.withPeriodAdded((org.joda.time.ReadablePeriod) period11, 10);
        org.joda.time.Period period22 = org.joda.time.Period.weeks(598);
        org.joda.time.TimeOfDay timeOfDay23 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay25 = timeOfDay23.withHourOfDay((int) (short) 10);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.hours();
        org.joda.time.TimeOfDay timeOfDay28 = timeOfDay23.withFieldAdded(durationFieldType26, 53625645);
        int int29 = period22.get(durationFieldType26);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight6.withFieldAdded(durationFieldType26, 53778277);
        java.lang.String str32 = durationFieldType26.toString();
        int int33 = period1.get(durationFieldType26);
        int int34 = period1.getHours();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(seconds16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertNotNull(timeOfDay28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hours" + "'", str32, "hours");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test14288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14288");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = localDate2.toDateMidnight(dateTimeZone7);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.yearOfEra();
        int int10 = dateMidnight8.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property11 = dateMidnight8.year();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight8.withMillis((long) ' ');
        int int14 = dateMidnight13.getYear();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight13.minus((long) 32769);
        org.joda.time.DateMidnight.Property property17 = dateMidnight16.dayOfYear();
        int int18 = dateMidnight16.getYear();
        org.joda.time.Interval interval19 = dateMidnight16.toInterval();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1969 + "'", int18 == 1969);
        org.junit.Assert.assertNotNull(interval19);
    }

    @Test
    public void test14289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14289");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = mutableDateTime1.copy();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime2.minuteOfDay();
        long long6 = property5.remainder();
        org.joda.time.MutableDateTime mutableDateTime8 = property5.add((long) 53620623);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime10 = property9.roundCeiling();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.centuryOfEra();
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(periodType12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((java.lang.Object) periodType12, dateTimeZone14);
        int int16 = localDateTime15.getDayOfMonth();
        int int17 = localDateTime15.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.plusMonths(339);
        int int21 = property11.compareTo((org.joda.time.ReadablePartial) localDateTime20);
        int int22 = localDateTime20.size();
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.centuryOfEra();
        int int24 = property23.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(property5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 27550L + "'", long6 == 27550L);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property11);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 22 + "'", int16 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 21387550 + "'", int17 == 21387550);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test14290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14290");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property1 = localTime0.minuteOfHour();
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone3 = dateMidnight2.getZone();
        long long4 = property1.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight2);
        org.joda.time.DateMidnight.Property property5 = dateMidnight2.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight2.withCenturyOfEra(2022);
        org.joda.time.Period period9 = org.joda.time.Period.weeks(598);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight7.plus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property12 = localTime11.minuteOfHour();
        org.joda.time.LocalTime localTime14 = localTime11.withMillisOfSecond(904);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = localTime11.toDateTimeToday(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = dateTime16.plusMonths(10);
        org.joda.time.DateTime.Property property19 = dateTime16.minuteOfDay();
        org.joda.time.DateTime dateTime20 = property19.getDateTime();
        org.joda.time.DateTime.Property property21 = dateTime20.dayOfWeek();
        org.joda.time.DateTime dateTime23 = dateTime20.minusMonths(21);
        org.joda.time.DateTime dateTime25 = dateTime23.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime27 = dateTime23.plusSeconds((int) (byte) 1);
        org.joda.time.Duration duration28 = period9.toDurationFrom((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Duration duration29 = duration28.toDuration();
        java.lang.String str30 = duration29.toString();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-27423549L) + "'", long4 == (-27423549L));
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "PT361670400S" + "'", str30, "PT361670400S");
    }

    @Test
    public void test14291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14291");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone1 = dateMidnight0.getZone();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) (short) 1, chronology3);
        java.lang.String str5 = localDate4.toString();
        org.joda.time.LocalDate localDate7 = localDate4.withYearOfEra((int) (byte) 100);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight0.withFields((org.joda.time.ReadablePartial) localDate7);
        java.util.GregorianCalendar gregorianCalendar9 = dateMidnight0.toGregorianCalendar();
        gregorianCalendar9.setTimeInMillis((long) 528);
        gregorianCalendar9.set(53711206, 317, 0, 58263525, 53803545);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(gregorianCalendar9);
    }

    @Test
    public void test14292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14292");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("4470113-04-01");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("2022-02-21T14:54:05.059Z");
        timeZone3.setID("1970-01-01");
        int int7 = timeZone3.getOffset((long) 1870);
        timeZone3.setID("2022-02-21T14:55:43.532Z");
        boolean boolean10 = timeZone1.hasSameRules(timeZone3);
        java.lang.String str11 = timeZone1.getID();
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "GMT" + "'", str11, "GMT");
    }

    @Test
    public void test14293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14293");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((java.lang.Object) periodType0, dateTimeZone2);
        int int4 = localDateTime3.getMonthOfYear();
        org.joda.time.Chronology chronology5 = localDateTime3.getChronology();
        int int6 = localDateTime3.getMillisOfDay();
        int int7 = localDateTime3.getMillisOfDay();
        int int8 = localDateTime3.getMillisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int10 = localDateTime3.get(dateTimeFieldType9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(chronology5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 21387629 + "'", int6 == 21387629);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 21387629 + "'", int7 == 21387629);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 21387629 + "'", int8 == 21387629);
    }

    @Test
    public void test14294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14294");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalDate.Property property4 = localDate2.yearOfEra();
        org.joda.time.LocalDate.Property property5 = localDate2.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField6 = property5.getField();
        org.joda.time.LocalDate localDate7 = property5.roundHalfFloorCopy();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate7);
    }

    @Test
    public void test14295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14295");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableDuration0, readableInstant1, periodType2);
        mutablePeriod3.addYears((int) (byte) 0);
        int int6 = mutablePeriod3.getMonths();
        mutablePeriod3.addMinutes((int) (byte) 0);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(periodType10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) periodType10, dateTimeZone12);
        int int14 = localDateTime13.getMonthOfYear();
        org.joda.time.Chronology chronology15 = localDateTime13.getChronology();
        mutablePeriod3.add((long) (short) 0, chronology15);
        org.joda.time.DateMidnight dateMidnight17 = org.joda.time.DateMidnight.now(chronology15);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.withYear(53619248);
        org.joda.time.Period period21 = org.joda.time.Period.weeks((int) '4');
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight17.minus((org.joda.time.ReadablePeriod) period21);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.withDayOfMonth(13);
        org.joda.time.Interval interval25 = dateMidnight22.toInterval();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(interval25);
    }

    @Test
    public void test14296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14296");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleKeys();
        java.util.stream.Stream<java.lang.String> strStream2 = strSet1.parallelStream();
        java.util.Spliterator<java.lang.String> strSpliterator3 = strSet1.spliterator();
        int int4 = strSet1.size();
        int int5 = strSet1.size();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(strStream2);
        org.junit.Assert.assertNotNull(strSpliterator3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test14297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14297");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("14:58:50.017");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"14:58:50.017\" is malformed at \":58:50.017\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14298");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone1 = dateMidnight0.getZone();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) (short) 1, chronology3);
        java.lang.String str5 = localDate4.toString();
        org.joda.time.LocalDate localDate7 = localDate4.withYearOfEra((int) (byte) 100);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight0.withFields((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate localDate10 = localDate7.withYearOfEra(317);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 53743426, chronology12);
        int int14 = localDateTime13.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.plusDays(170);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusMillis(53862341);
        // The following exception was thrown during execution in test generation
        try {
            int int19 = localDate7.compareTo((org.joda.time.ReadablePartial) localDateTime16);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test14299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14299");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = mutableDateTime1.copy();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime2.minuteOfDay();
        int int6 = mutableDateTime2.getSecondOfMinute();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime2.hourOfDay();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime2.dayOfWeek();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime2.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.add(53734950);
        org.joda.time.MutableDateTime mutableDateTime13 = property9.addWrapField(53792059);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime13.setDayOfYear(580);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 580 for dayOfYear must be in the range [1,366]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(property5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 27 + "'", int6 == 27);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
    }

    @Test
    public void test14300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14300");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 53635576);
        org.joda.time.Instant instant3 = instant1.withMillis((long) 971);
        org.joda.time.Instant instant5 = instant3.plus((long) 56358268);
        org.joda.time.DateTime dateTime6 = instant3.toDateTime();
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(dateTime6);
    }

    @Test
    public void test14301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14301");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-21T14:54:05.059Z");
        timeZone1.setID("1970-01-01");
        boolean boolean4 = timeZone1.observesDaylightTime();
        boolean boolean5 = timeZone1.observesDaylightTime();
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = null;
        org.joda.time.format.DateTimeParser dateTimeParser7 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter6, dateTimeParser7);
        org.joda.time.Chronology chronology9 = dateTimeFormatter8.getChronolgy();
        boolean boolean10 = dateTimeFormatter8.isOffsetParsed();
        java.util.Locale locale11 = java.util.Locale.TAIWAN;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter8.withLocale(locale11);
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone1, locale11);
        calendar13.setFirstDayOfWeek(202233);
        calendar13.set(153, 53674160, 91, 656, 53619248, 7);
        calendar13.clear();
        boolean boolean24 = calendar13.isWeekDateSupported();
        java.lang.String str25 = calendar13.toString();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(chronology9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(calendar13);
        org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"1970-01-01\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=202233,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"1970-01-01\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=202233,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]" + "'", str25, "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"1970-01-01\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=202233,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
    }

    @Test
    public void test14302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14302");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-21T14:54:05.059Z");
        timeZone1.setID("1970-01-01");
        boolean boolean4 = timeZone1.observesDaylightTime();
        boolean boolean5 = timeZone1.observesDaylightTime();
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = null;
        org.joda.time.format.DateTimeParser dateTimeParser7 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter6, dateTimeParser7);
        org.joda.time.Chronology chronology9 = dateTimeFormatter8.getChronolgy();
        boolean boolean10 = dateTimeFormatter8.isOffsetParsed();
        java.util.Locale locale11 = java.util.Locale.TAIWAN;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter8.withLocale(locale11);
        java.util.Calendar calendar13 = java.util.Calendar.getInstance(timeZone1, locale11);
        calendar13.setFirstDayOfWeek(202233);
        org.joda.time.LocalTime localTime16 = org.joda.time.LocalTime.MIDNIGHT;
        int int17 = localTime16.getHourOfDay();
        org.joda.time.LocalTime localTime19 = localTime16.plusHours((int) (short) 1);
        org.joda.time.LocalTime.Property property20 = localTime16.millisOfDay();
        org.joda.time.LocalTime localTime22 = localTime16.withMillisOfDay(0);
        boolean boolean23 = calendar13.before((java.lang.Object) localTime22);
        java.util.TimeZone timeZone24 = calendar13.getTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            int int31 = timeZone24.getOffset(53734303, 53767594, 53869367, 0, 53967142, 53715371);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(chronology9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=1645455767739,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"1970-01-01\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=202233,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=3,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=47,MILLISECOND=739,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test14303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14303");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setFirstDayOfWeek(53620623);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        java.util.Date date4 = calendar0.getTime();
        date4.setYear(736);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.fromDateFields(date4);
        int int8 = localDateTime7.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.minusWeeks(53915556);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645455767754,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=53620623,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=47,MILLISECOND=754,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Sun Feb 21 15:02:47 GMT 2636");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 26 + "'", int8 == 26);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test14304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14304");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) (short) 1, chronology2);
        java.lang.String str4 = localDate3.toString();
        org.joda.time.LocalDate localDate6 = localDate3.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology7 = localDate6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay((long) (short) 1, chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.plusMonths(53617719);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(readableDuration11, readableInstant12, periodType13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        mutablePeriod14.add(readableDuration15);
        mutablePeriod14.addMonths((int) '#');
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(readableDuration19, readableInstant20, periodType21);
        org.joda.time.ReadableDuration readableDuration23 = null;
        mutablePeriod22.add(readableDuration23);
        mutablePeriod22.addMonths((int) '#');
        mutablePeriod14.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod22);
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay10.plus((org.joda.time.ReadablePeriod) mutablePeriod22);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) (byte) 100, chronology30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(chronology32);
        org.joda.time.MutableDateTime mutableDateTime34 = mutableDateTime33.copy();
        org.joda.time.Duration duration35 = period31.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime34);
        org.joda.time.Seconds seconds36 = period31.toStandardSeconds();
        org.joda.time.YearMonthDay yearMonthDay37 = yearMonthDay28.minus((org.joda.time.ReadablePeriod) seconds36);
        org.joda.time.LocalDate localDate38 = yearMonthDay37.toLocalDate();
        org.joda.time.LocalDate localDate40 = localDate38.minusWeeks(53689021);
        int int41 = localDate38.getYearOfCentury();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(seconds36);
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 16 + "'", int41 == 16);
    }

    @Test
    public void test14305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14305");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 391, (long) 861);
        int int3 = period2.getMillis();
        org.joda.time.Period period5 = period2.withMinutes(53853881);
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.withCenturyOfEra(1);
        org.joda.time.DateTime dateTime9 = dateMidnight8.toDateTime();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) 53619248, (long) 1);
        mutablePeriod12.add((int) (byte) 10, 904, 53619708, 47, 10, (-292275054), 0, 342);
        int int22 = mutablePeriod12.size();
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight8.minus((org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.minus((long) 53619079);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight25.minusWeeks(53639426);
        org.joda.time.Period period29 = org.joda.time.Period.minutes(53619988);
        org.joda.time.Period period31 = period29.minusHours(53636);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight25.minus((org.joda.time.ReadablePeriod) period29);
        org.joda.time.Duration duration33 = period2.toDurationTo((org.joda.time.ReadableInstant) dateMidnight25);
        org.joda.time.DateMidnight.Property property34 = dateMidnight25.dayOfYear();
        org.joda.time.DateTime dateTime35 = dateMidnight25.toDateTimeISO();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 470 + "'", int3 == 470);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8 + "'", int22 == 8);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime35);
    }

    @Test
    public void test14306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14306");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.minusHours(53667278);
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay0.plusMinutes(53686878);
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minusMillis(91);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay4.plusHours(53638166);
        int int9 = timeOfDay8.getSecondOfMinute();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property11 = localTime10.minuteOfHour();
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone13 = dateMidnight12.getZone();
        long long14 = property11.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight12);
        org.joda.time.LocalTime localTime15 = property11.withMaximumValue();
        org.joda.time.LocalTime localTime16 = property11.roundFloorCopy();
        org.joda.time.LocalTime localTime18 = property11.addCopy(52040L);
        org.joda.time.LocalTime localTime20 = property11.addWrapFieldToCopy(53633398);
        org.joda.time.LocalTime localTime21 = property11.roundCeilingCopy();
        boolean boolean22 = timeOfDay8.isBefore((org.joda.time.ReadablePartial) localTime21);
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 27 + "'", int9 == 27);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-27423549L) + "'", long14 == (-27423549L));
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test14307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14307");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = mutableDateTime1.copy();
        mutableDateTime1.addMinutes(0);
        mutableDateTime1.setSecondOfDay(21);
        int int7 = mutableDateTime1.getDayOfMonth();
        mutableDateTime1.addSeconds(8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) (short) 1, chronology11);
        int int13 = localDate12.getDayOfYear();
        org.joda.time.LocalTime localTime14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = localDate12.toDateTime(localTime14, dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = localDate12.toDateMidnight(dateTimeZone17);
        org.joda.time.DateMidnight.Property property19 = dateMidnight18.yearOfEra();
        int int20 = dateMidnight18.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property21 = dateMidnight18.year();
        org.joda.time.DateTimeField dateTimeField22 = property21.getField();
        long long25 = dateTimeField22.set(0L, 53629078);
        long long28 = dateTimeField22.set(0L, 53662339);
        int int30 = dateTimeField22.getMaximumValue((long) 53741688);
        mutableDateTime1.setRounding(dateTimeField22);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) (short) 1, chronology33);
        int int35 = localDate34.getDayOfYear();
        org.joda.time.LocalTime localTime36 = null;
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = localDate34.toDateTime(localTime36, dateTimeZone37);
        org.joda.time.DateTime dateTime40 = dateTime38.plusYears((int) (short) 10);
        org.joda.time.DateTime dateTime42 = dateTime38.withYear(53639477);
        org.joda.time.DateTime dateTime44 = dateTime42.minusWeeks(53636547);
        org.joda.time.DateTime dateTime46 = dateTime44.withHourOfDay(0);
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate((long) (short) 1, chronology50);
        java.lang.String str52 = localDate51.toString();
        org.joda.time.LocalDate localDate54 = localDate51.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology55 = localDate54.getChronology();
        org.joda.time.YearMonthDay yearMonthDay56 = new org.joda.time.YearMonthDay((long) (short) 1, chronology55);
        org.joda.time.YearMonthDay yearMonthDay58 = yearMonthDay56.plusMonths(53617719);
        int int59 = yearMonthDay56.getDayOfMonth();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate((long) (short) 1, chronology61);
        java.lang.String str63 = localDate62.toString();
        org.joda.time.LocalDate localDate65 = localDate62.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology66 = localDate65.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = chronology66.yearOfEra();
        org.joda.time.YearMonthDay yearMonthDay68 = yearMonthDay56.withChronologyRetainFields(chronology66);
        int int69 = yearMonthDay56.getDayOfMonth();
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutableDateTime mutableDateTime71 = new org.joda.time.MutableDateTime(chronology70);
        org.joda.time.MutableDateTime mutableDateTime72 = mutableDateTime71.copy();
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        mutableDateTime72.setZone(dateTimeZone73);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.LocalDate localDate77 = new org.joda.time.LocalDate((long) (short) 1, chronology76);
        int int78 = localDate77.getDayOfYear();
        org.joda.time.LocalTime localTime79 = null;
        org.joda.time.DateTimeZone dateTimeZone80 = null;
        org.joda.time.DateTime dateTime81 = localDate77.toDateTime(localTime79, dateTimeZone80);
        org.joda.time.DateTimeZone dateTimeZone82 = null;
        org.joda.time.DateMidnight dateMidnight83 = localDate77.toDateMidnight(dateTimeZone82);
        org.joda.time.DateMidnight.Property property84 = dateMidnight83.yearOfEra();
        int int85 = dateMidnight83.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property86 = dateMidnight83.year();
        boolean boolean87 = mutableDateTime72.isBefore((org.joda.time.ReadableInstant) dateMidnight83);
        org.joda.time.MutableDateTime.Property property88 = mutableDateTime72.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone90 = org.joda.time.DateTimeZone.forOffsetMillis(53619988);
        mutableDateTime72.setZoneRetainFields(dateTimeZone90);
        org.joda.time.DateMidnight dateMidnight92 = yearMonthDay56.toDateMidnight(dateTimeZone90);
        mutableDateTime1.setZoneRetainFields(dateTimeZone90);
        long long96 = dateTimeZone90.convertLocalToUTC((long) 53660764, true);
        org.junit.Assert.assertNotNull(mutableDateTime2);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 22 + "'", int7 == 22);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1692308073081600000L + "'", long25 == 1692308073081600000L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1693357688793600000L + "'", long28 == 1693357688793600000L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 292278993 + "'", int30 == 292278993);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "1970-01-01" + "'", str52, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(yearMonthDay58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "1970-01-01" + "'", str63, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(yearMonthDay68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime72);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateMidnight83);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertNotNull(dateTimeZone90);
        org.junit.Assert.assertNotNull(dateMidnight92);
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 40776L + "'", long96 == 40776L);
    }

    @Test
    public void test14308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14308");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = localDate2.toDateMidnight(dateTimeZone7);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.yearOfEra();
        int int10 = dateMidnight8.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property11 = dateMidnight8.year();
        org.joda.time.DateMidnight.Property property12 = dateMidnight8.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight14 = property12.addToCopy(650);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = dateTime15.withWeekyear((int) (short) 100);
        int int18 = dateTime17.getYearOfCentury();
        long long19 = property12.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateMidnight dateMidnight21 = property12.setCopy(53853);
        java.lang.String str22 = dateMidnight21.toString();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 18L + "'", long19 == 18L);
        org.junit.Assert.assertNotNull(dateMidnight21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "5385370-01-01T00:00:00.000+14:53:39.988" + "'", str22, "5385370-01-01T00:00:00.000+14:53:39.988");
    }

    @Test
    public void test14309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14309");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = mutableDateTime1.copy();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime2.minuteOfDay();
        long long6 = property5.remainder();
        org.joda.time.MutableDateTime mutableDateTime7 = property5.roundHalfCeiling();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime9 = mutableDateTime7.toMutableDateTime();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) (byte) 100, chronology11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.MutableDateTime mutableDateTime15 = mutableDateTime14.copy();
        org.joda.time.Duration duration16 = period12.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime15);
        org.joda.time.Weeks weeks17 = period12.toStandardWeeks();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(readableDuration18, readableInstant19, periodType20);
        org.joda.time.ReadableDuration readableDuration22 = null;
        mutablePeriod21.add(readableDuration22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(chronology24);
        org.joda.time.MutableDateTime mutableDateTime26 = mutableDateTime25.copy();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        mutableDateTime26.setZone(dateTimeZone27);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime26.minuteOfDay();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime();
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTime dateTime33 = dateTime30.withFieldAdded(durationFieldType31, (int) (byte) 0);
        mutableDateTime26.add(durationFieldType31, 8);
        boolean boolean36 = mutablePeriod21.isSupported(durationFieldType31);
        int int37 = period12.indexOf(durationFieldType31);
        mutableDateTime9.add(durationFieldType31, 387);
        mutableDateTime9.addSeconds(365);
        int int42 = mutableDateTime9.getMillisOfDay();
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(property5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 27880L + "'", long6 == 27880L);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(weeks17);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 21725000 + "'", int42 == 21725000);
    }

    @Test
    public void test14310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14310");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = mutableDateTime1.copy();
        mutableDateTime1.addMinutes(0);
        mutableDateTime1.setSecondOfDay(21);
        int int7 = mutableDateTime1.getDayOfMonth();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime9.copy();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        mutableDateTime10.setZone(dateTimeZone11);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime10.minuteOfDay();
        int int14 = mutableDateTime10.getSecondOfMinute();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = mutableDateTime16.copy();
        mutableDateTime16.addMinutes(0);
        java.lang.String str20 = mutableDateTime16.toString();
        int int21 = mutableDateTime16.getYearOfEra();
        org.joda.time.Chronology chronology22 = mutableDateTime16.getChronology();
        org.joda.time.YearMonthDay yearMonthDay23 = new org.joda.time.YearMonthDay(chronology22);
        mutableDateTime10.setChronology(chronology22);
        org.joda.time.DateTime dateTime25 = mutableDateTime1.toDateTime(chronology22);
        int int26 = mutableDateTime1.getWeekyear();
        mutableDateTime1.setMillisOfDay(55);
        mutableDateTime1.add((long) 385);
        org.junit.Assert.assertNotNull(mutableDateTime2);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 22 + "'", int7 == 22);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 27 + "'", int14 == 27);
        org.junit.Assert.assertNotNull(mutableDateTime17);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-22T05:56:27.898+14:53:39.988" + "'", str20, "2022-02-22T05:56:27.898+14:53:39.988");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2022 + "'", int26 == 2022);
    }

    @Test
    public void test14311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14311");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setLenient(false);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getTimeZone("2022-02-21T14:54:05.059Z");
        java.util.Calendar.Builder builder5 = builder2.setTimeZone(timeZone4);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.lang.String str10 = locale8.getExtension('a');
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.util.Locale locale12 = java.util.Locale.JAPANESE;
        java.lang.String str13 = locale12.getDisplayCountry();
        java.lang.String str14 = locale11.getDisplayLanguage(locale12);
        java.lang.String str15 = locale8.getDisplayLanguage(locale12);
        java.lang.String str16 = locale12.getCountry();
        java.util.Set<java.lang.String> strSet17 = locale12.getUnicodeLocaleKeys();
        java.lang.String str18 = dateTimeZone6.getName(3217237380000L, locale12);
        java.lang.String str20 = dateTimeZone6.getShortName(32452698902400000L);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\u30a4\u30bf\u30ea\u30a2\u8a9e" + "'", str14, "\u30a4\u30bf\u30ea\u30a2\u8a9e");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u82f1\u8a9e" + "'", str15, "\u82f1\u8a9e");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
    }

    @Test
    public void test14312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14312");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((java.lang.Object) periodType0, dateTimeZone2);
        int int4 = localDateTime3.getDayOfMonth();
        int int5 = localDateTime3.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusMonths(339);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime3.plusSeconds(53633398);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.monthOfYear();
        org.joda.time.LocalDateTime localDateTime12 = property11.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = property11.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime15 = property14.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType17 = dateTimeFieldType16.getRangeDurationType();
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.property(dateTimeFieldType16);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime20 = localDateTime15.withMonthOfYear(345);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 345 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 21387932 + "'", int5 == 21387932);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test14313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14313");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone1 = dateMidnight0.getZone();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime4 = property3.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime5 = property3.roundCeilingCopy();
        java.util.Date date6 = localDateTime5.toDate();
        date6.setSeconds(53634467);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Tue Sep 13 18:27:47 GMT 2101");
    }

    @Test
    public void test14314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14314");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((java.lang.Object) periodType0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusYears((int) '#');
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.plusYears((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.minusHours(1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) (short) 1, chronology11);
        java.lang.String str13 = localDate12.toString();
        org.joda.time.LocalDate localDate15 = localDate12.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology16 = localDate15.getChronology();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(readableDuration17, readableInstant18, periodType19);
        org.joda.time.ReadableDuration readableDuration21 = null;
        mutablePeriod20.add(readableDuration21);
        mutablePeriod20.addYears((int) (short) 100);
        java.lang.Object obj25 = mutablePeriod20.clone();
        mutablePeriod20.setSeconds(904);
        org.joda.time.LocalDate localDate28 = localDate15.minus((org.joda.time.ReadablePeriod) mutablePeriod20);
        int int29 = localDate15.getYearOfEra();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(chronology30);
        org.joda.time.MutableDateTime mutableDateTime32 = mutableDateTime31.copy();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        mutableDateTime32.setZone(dateTimeZone33);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime32.minuteOfDay();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime();
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTime dateTime39 = dateTime36.withFieldAdded(durationFieldType37, (int) (byte) 0);
        mutableDateTime32.add(durationFieldType37, 8);
        boolean boolean42 = localDate15.isSupported(durationFieldType37);
        org.joda.time.LocalDate.Property property43 = localDate15.yearOfEra();
        org.joda.time.Interval interval44 = localDate15.toInterval();
        // The following exception was thrown during execution in test generation
        try {
            int int45 = localDateTime9.compareTo((org.joda.time.ReadablePartial) localDate15);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-01-01" + "'", str13, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "P100YT904S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "P100YT904S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "P100YT904S");
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(interval44);
    }

    @Test
    public void test14315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14315");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 1);
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone7 = dateMidnight6.getZone();
        boolean boolean9 = dateTimeZone7.isStandardOffset((long) 'a');
        org.joda.time.LocalDate localDate10 = org.joda.time.LocalDate.now(dateTimeZone7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter5.withZone(dateTimeZone7);
        java.util.Locale locale12 = dateTimeFormatter11.getLocale();
        org.joda.time.Chronology chronology13 = dateTimeFormatter11.getChronolgy();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(readableDuration14, readableInstant15, periodType16);
        int int18 = mutablePeriod17.getMinutes();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) (short) 1, chronology21);
        java.lang.String str23 = localDate22.toString();
        org.joda.time.LocalDate localDate25 = localDate22.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology26 = localDate25.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.clockhourOfDay();
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(chronology26);
        mutablePeriod17.setPeriod((long) 53617649, chronology26);
        org.joda.time.DateTimeField dateTimeField30 = chronology26.era();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter11.withChronology(chronology26);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter31.withPivotYear((java.lang.Integer) 53648497);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime35 = dateTimeFormatter33.parseLocalDateTime("2022-02-21T14:56:16.829Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNull(locale12);
        org.junit.Assert.assertNull(chronology13);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1970-01-01" + "'", str23, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
    }

    @Test
    public void test14316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14316");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) 53769657);
        org.junit.Assert.assertNotNull(localTime1);
    }

    @Test
    public void test14317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14317");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) (short) 1, chronology2);
        java.lang.String str4 = localDate3.toString();
        org.joda.time.LocalDate localDate6 = localDate3.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology7 = localDate6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.yearOfEra();
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType0.getField(chronology7);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology7);
        org.joda.time.DateTimeField dateTimeField11 = chronology7.dayOfMonth();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) 53619248, (long) 1);
        int[] intArray17 = chronology7.get((org.joda.time.ReadablePeriod) mutablePeriod14, (long) (-292275054), (long) 53637942);
        org.joda.time.DateTimeField dateTimeField18 = chronology7.centuryOfEra();
        java.util.Locale locale21 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str22 = locale21.toLanguageTag();
        java.util.Locale locale26 = new java.util.Locale("hi!", "Years", "1970-01-01");
        java.lang.String str27 = locale26.toLanguageTag();
        java.lang.String str28 = locale26.getCountry();
        java.util.Locale locale29 = java.util.Locale.JAPANESE;
        java.lang.String str30 = locale26.getDisplayLanguage(locale29);
        java.lang.String str31 = locale21.getDisplayLanguage(locale26);
        java.util.Locale locale32 = locale21.stripExtensions();
        java.lang.String str33 = locale32.getDisplayLanguage();
        java.lang.String str34 = locale32.getScript();
        long long35 = dateTimeField18.set((long) 54020590, "1970", locale32);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 0, 0, 4, 0, 5, 12, 996]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "fr-CA" + "'", str22, "fr-CA");
        org.junit.Assert.assertEquals(locale26.toString(), "hi!_YEARS_1970-01-01");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "und" + "'", str27, "und");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "YEARS" + "'", str28, "YEARS");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hi!" + "'", str30, "hi!");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "French" + "'", str31, "French");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\u30d5\u30e9\u30f3\u30b9\u8a9e" + "'", str33, "\u30d5\u30e9\u30f3\u30b9\u8a9e");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 6156761410820590L + "'", long35 == 6156761410820590L);
    }

    @Test
    public void test14318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14318");
        java.util.Set<java.lang.String> strSet0 = java.util.Calendar.getAvailableCalendarTypes();
        java.util.Spliterator<java.lang.String> strSpliterator1 = strSet0.spliterator();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) (short) 1, chronology3);
        int int5 = localDate4.getDayOfYear();
        org.joda.time.LocalTime localTime6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate4.toDateTime(localTime6, dateTimeZone7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = localDate4.toDateMidnight(dateTimeZone9);
        org.joda.time.LocalDate localDate12 = localDate4.withYear(53619770);
        org.joda.time.Interval interval13 = localDate12.toInterval();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime15 = localDate12.toDateTimeAtMidnight(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime15.withDayOfYear(11);
        int int18 = dateTime17.getWeekOfWeekyear();
        boolean boolean19 = strSet0.contains((java.lang.Object) dateTime17);
        java.util.Spliterator<java.lang.String> strSpliterator20 = strSet0.spliterator();
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(strSpliterator1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strSpliterator20);
    }

    @Test
    public void test14319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14319");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.withHourOfDay((int) (short) 10);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.hours();
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay1.withFieldAdded(durationFieldType4, 53625645);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay1.plusHours((int) '4');
        org.joda.time.TimeOfDay.Property property9 = timeOfDay1.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay10 = property9.withMinimumValue();
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay10.plusSeconds(53671631);
        org.joda.time.Chronology chronology13 = timeOfDay12.getChronology();
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay(1645455391393L, chronology13);
        int int15 = timeOfDay14.getHourOfDay();
        int int16 = timeOfDay14.getHourOfDay();
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 14 + "'", int15 == 14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 14 + "'", int16 == 14);
    }

    @Test
    public void test14320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14320");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(53619988);
        java.lang.String str3 = dateTimeZone2.toString();
        long long5 = dateTimeZone2.nextTransition((long) 100);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(obj0, dateTimeZone2);
        org.joda.time.LocalDate.Property property7 = localDate6.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+14:53:39.988" + "'", str3, "+14:53:39.988");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 100L + "'", long5 == 100L);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test14321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14321");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((java.lang.Object) periodType0, dateTimeZone2);
        int int4 = localDateTime3.getDayOfMonth();
        int int5 = localDateTime3.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.weekyear();
        java.lang.String str7 = localDateTime3.toString();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.plusMinutes(53619708);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.secondOfMinute();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.dayOfWeek();
        java.util.Locale.Category category13 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale14 = java.util.Locale.getDefault(category13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) (short) 1, chronology16);
        int int18 = localDate17.getDayOfYear();
        org.joda.time.LocalTime localTime19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = localDate17.toDateTime(localTime19, dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = localDate17.toDateMidnight(dateTimeZone22);
        org.joda.time.DateMidnight.Property property24 = dateMidnight23.yearOfEra();
        int int25 = dateMidnight23.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property26 = dateMidnight23.year();
        org.joda.time.DateTimeField dateTimeField27 = property26.getField();
        long long29 = dateTimeField27.remainder((long) (short) -1);
        int int30 = dateTimeField27.getMinimumValue();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) (short) 1, chronology35);
        java.lang.String str37 = localDate36.toString();
        org.joda.time.LocalDate localDate39 = localDate36.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology40 = localDate39.getChronology();
        org.joda.time.DurationField durationField41 = chronology40.eras();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate(100, 12, (int) (short) 1, chronology40);
        java.util.Locale locale43 = java.util.Locale.CANADA;
        java.lang.String str44 = dateTimeField27.getAsShortText((org.joda.time.ReadablePartial) localDate42, locale43);
        java.util.Locale locale45 = locale43.stripExtensions();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((long) (short) 1, chronology48);
        java.lang.String str50 = localDate49.toString();
        org.joda.time.LocalDate localDate52 = localDate49.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology53 = localDate52.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.yearOfEra();
        org.joda.time.DateTimeField dateTimeField55 = dateTimeFieldType46.getField(chronology53);
        int int57 = dateTimeField55.getMinimumValue((long) 53634384);
        java.util.Locale locale60 = new java.util.Locale("", "hi!");
        java.lang.String str61 = locale60.getCountry();
        java.util.Locale locale62 = java.util.Locale.FRENCH;
        boolean boolean63 = locale62.hasExtensions();
        java.lang.String str64 = locale60.getDisplayVariant(locale62);
        int int65 = dateTimeField55.getMaximumShortTextLength(locale60);
        java.lang.String str66 = locale43.getDisplayName(locale60);
        java.util.Locale.setDefault(locale60);
        java.util.Locale locale68 = locale60.stripExtensions();
        java.util.Locale.setDefault(category13, locale68);
        java.util.Locale locale70 = java.util.Locale.getDefault(category13);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime71 = property11.setCopy("", locale70);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for dayOfWeek is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 21388084 + "'", int5 == 21388084);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022-02-22T05:56:28.084" + "'", str7, "2022-02-22T05:56:28.084");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + category13 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category13.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale14);
// flaky:         org.junit.Assert.assertEquals(locale14.toString(), "ja");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeField27);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 53619987L + "'", long29 == 53619987L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-292275054) + "'", int30 == (-292275054));
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1970-01-01" + "'", str37, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "100" + "'", str44, "100");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en_CA");
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "1970-01-01" + "'", str50, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertEquals(locale60.toString(), "_HI!");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "HI!" + "'", str61, "HI!");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "fr");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "English (Canada)" + "'", str66, "English (Canada)");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "_HI!");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "_HI!");
    }

    @Test
    public void test14322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14322");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) (short) 1, chronology2);
        java.lang.String str4 = localDate3.toString();
        org.joda.time.LocalDate localDate6 = localDate3.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology7 = localDate6.getChronology();
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(533L, chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.halfdayOfDay();
        java.lang.String str11 = dateTimeField9.getAsShortText(31559L);
        long long13 = dateTimeField9.roundHalfFloor((long) 53890464);
        long long15 = dateTimeField9.roundHalfFloor((-1697377097836799492L));
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "AM" + "'", str11, "AM");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 43200000L + "'", long13 == 43200000L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1697377097836800000L) + "'", long15 == (-1697377097836800000L));
    }

    @Test
    public void test14323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14323");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setFirstDayOfWeek(53620623);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        java.util.Date date4 = calendar0.getTime();
        date4.setSeconds(792);
        date4.setHours(53635576);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.fromDateFields(date4);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusDays(982);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.minusMonths(53922126);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime9.minusSeconds(54178);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645455768134,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=53620623,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=48,MILLISECOND=134,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Wed Nov 09 16:15:12 GMT 8140");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test14324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14324");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((java.lang.Object) periodType0, dateTimeZone2);
        int int4 = localDateTime3.getDayOfMonth();
        int int5 = localDateTime3.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.millisOfSecond();
        int int7 = localDateTime3.getEra();
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.era();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime3.plusYears(0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 1);
        int int13 = localDateTime10.size();
        org.joda.time.LocalDateTime.Property property14 = localDateTime10.era();
        org.joda.time.TimeOfDay timeOfDay15 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay15.minusHours(53667278);
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay15.plusMinutes(53686878);
        int[] intArray20 = timeOfDay15.getValues();
        java.lang.String str21 = timeOfDay15.toString();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean22 = localDateTime10.isAfter((org.joda.time.ReadablePartial) timeOfDay15);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 21388153 + "'", int5 == 21388153);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(intArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[5, 56, 28, 153]");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "T05:56:28.153" + "'", str21, "T05:56:28.153");
    }

    @Test
    public void test14325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14325");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property1 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime2 = property1.roundFloorCopy();
        org.joda.time.LocalTime localTime4 = localTime2.minusHours(1);
        org.joda.time.LocalTime localTime6 = localTime4.withMillisOfSecond(37);
        org.joda.time.LocalTime localTime8 = localTime6.withMillisOfDay(53679468);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 1970);
        boolean boolean11 = localTime8.equals((java.lang.Object) dateTime10);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test14326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14326");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-21T14:54:05.059Z");
        timeZone1.setID("1970-01-01");
        int int5 = timeZone1.getOffset((long) 53667278);
        java.util.TimeZone timeZone7 = java.util.TimeZone.getTimeZone("2022-02-21T14:54:05.059Z");
        boolean boolean8 = timeZone1.hasSameRules(timeZone7);
        int int10 = timeZone1.getOffset((long) 53754165);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((java.lang.Object) int10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test14327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14327");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("2022-02-21T14:59:14.890Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-21t14:59:14.890z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14328");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2022-02-21T14:53:37.096Z");
        org.joda.time.Chronology chronology2 = instant1.getChronology();
        org.joda.time.MutableDateTime mutableDateTime3 = instant1.toMutableDateTimeISO();
        long long4 = instant1.getMillis();
        org.joda.time.MutableDateTime mutableDateTime5 = instant1.toMutableDateTimeISO();
        org.joda.time.Instant instant8 = instant1.withDurationAdded((long) 318, 32949314);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) (byte) 100, chronology10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(chronology12);
        org.joda.time.MutableDateTime mutableDateTime14 = mutableDateTime13.copy();
        org.joda.time.Duration duration15 = period11.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime14);
        int int16 = period11.size();
        org.joda.time.Period period18 = period11.plusHours(53619079);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(readableDuration19, readableInstant20, periodType21);
        mutablePeriod22.addYears((int) (byte) 0);
        int int25 = mutablePeriod22.getMonths();
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(readableDuration26, readableInstant27, periodType28);
        org.joda.time.ReadableDuration readableDuration30 = null;
        mutablePeriod29.add(readableDuration30);
        mutablePeriod29.addMonths((int) '#');
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) (short) 1, chronology35);
        int int37 = localDate36.getDayOfYear();
        org.joda.time.LocalTime localTime38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = localDate36.toDateTime(localTime38, dateTimeZone39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateMidnight dateMidnight42 = localDate36.toDateMidnight(dateTimeZone41);
        org.joda.time.DateMidnight.Property property43 = dateMidnight42.yearOfEra();
        int int44 = dateMidnight42.getMinuteOfHour();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Period period47 = new org.joda.time.Period((long) (byte) 100, chronology46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime(chronology48);
        org.joda.time.MutableDateTime mutableDateTime50 = mutableDateTime49.copy();
        org.joda.time.Duration duration51 = period47.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime50);
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight42.plus((org.joda.time.ReadableDuration) duration51);
        mutablePeriod29.add((org.joda.time.ReadableDuration) duration51);
        mutablePeriod22.setPeriod((org.joda.time.ReadableDuration) duration51);
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone56 = dateMidnight55.getZone();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate((long) (short) 1, chronology58);
        java.lang.String str60 = localDate59.toString();
        org.joda.time.LocalDate localDate62 = localDate59.withYearOfEra((int) (byte) 100);
        org.joda.time.DateMidnight dateMidnight63 = dateMidnight55.withFields((org.joda.time.ReadablePartial) localDate62);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight55.withField(dateTimeFieldType64, 842);
        org.joda.time.Period period67 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration51, (org.joda.time.ReadableInstant) dateMidnight55);
        org.joda.time.Duration duration68 = period11.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight55);
        org.joda.time.Instant instant70 = instant1.withDurationAdded((org.joda.time.ReadableDuration) duration68, 120);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1645455217096L + "'", long4 == 1645455217096L);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 8 + "'", int16 == 8);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "1970-01-01" + "'", str60, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(instant70);
    }

    @Test
    public void test14329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14329");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 53667278);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(readableDuration2, readableInstant3, periodType4);
        mutablePeriod5.addYears((int) (byte) 0);
        int int8 = mutablePeriod5.getMonths();
        mutablePeriod5.setWeeks(6);
        org.joda.time.LocalDate localDate11 = localDate1.plus((org.joda.time.ReadablePeriod) mutablePeriod5);
        org.joda.time.LocalDate.Property property12 = localDate1.yearOfEra();
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test14330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14330");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone1 = dateMidnight0.getZone();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) (short) 1, chronology3);
        java.lang.String str5 = localDate4.toString();
        org.joda.time.LocalDate localDate7 = localDate4.withYearOfEra((int) (byte) 100);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight0.withFields((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight0.withField(dateTimeFieldType9, 842);
        int int12 = dateMidnight11.getSecondOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test14331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14331");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) (short) 1, chronology2);
        java.lang.String str4 = localDate3.toString();
        org.joda.time.LocalDate localDate6 = localDate3.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology7 = localDate6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.yearOfCentury();
        org.joda.time.DurationField durationField10 = chronology7.centuries();
        org.joda.time.DurationField durationField11 = chronology7.halfdays();
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 53673356, chronology7);
        org.joda.time.DurationField durationField14 = chronology7.weekyears();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test14332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14332");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = mutableDateTime1.copy();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime2.minuteOfDay();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTime dateTime9 = dateTime6.withFieldAdded(durationFieldType7, (int) (byte) 0);
        mutableDateTime2.add(durationFieldType7, 8);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime2.weekyear();
        org.joda.time.MutableDateTime mutableDateTime13 = property12.roundHalfFloor();
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(readableDuration15, readableInstant16, periodType17);
        org.joda.time.ReadableDuration readableDuration19 = null;
        mutablePeriod18.add(readableDuration19);
        mutablePeriod18.addMonths((int) '#');
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) (short) 1, chronology24);
        int int26 = localDate25.getDayOfYear();
        org.joda.time.LocalTime localTime27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = localDate25.toDateTime(localTime27, dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = localDate25.toDateMidnight(dateTimeZone30);
        org.joda.time.DateMidnight.Property property32 = dateMidnight31.yearOfEra();
        int int33 = dateMidnight31.getMinuteOfHour();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period((long) (byte) 100, chronology35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime(chronology37);
        org.joda.time.MutableDateTime mutableDateTime39 = mutableDateTime38.copy();
        org.joda.time.Duration duration40 = period36.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime39);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight31.plus((org.joda.time.ReadableDuration) duration40);
        mutablePeriod18.add((org.joda.time.ReadableDuration) duration40);
        org.joda.time.Period period43 = duration40.toPeriod();
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight14.minus((org.joda.time.ReadableDuration) duration40);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight14.withYearOfEra(53722857);
        mutableDateTime13.setTime((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.format.DateTimePrinter dateTimePrinter48 = null;
        org.joda.time.format.DateTimeParser dateTimeParser49 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter48, dateTimeParser49);
        org.joda.time.Chronology chronology51 = dateTimeFormatter50.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = dateTimeFormatter50.withDefaultYear(8);
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone55 = dateMidnight54.getZone();
        org.joda.time.LocalDateTime localDateTime56 = org.joda.time.LocalDateTime.now(dateTimeZone55);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = dateTimeFormatter50.withZone(dateTimeZone55);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = dateTimeFormatter57.withPivotYear(53632583);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str60 = dateMidnight14.toString(dateTimeFormatter59);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeFormatter53);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(dateTimeFormatter57);
        org.junit.Assert.assertNotNull(dateTimeFormatter59);
    }

    @Test
    public void test14333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14333");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        java.lang.String str3 = localDate2.toString();
        org.joda.time.LocalDate localDate5 = localDate2.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology6 = localDate5.getChronology();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) (short) 1, chronology8);
        int int10 = localDate9.getDayOfYear();
        org.joda.time.LocalDate.Property property11 = localDate9.weekOfWeekyear();
        org.joda.time.LocalDate localDate12 = property11.roundHalfEvenCopy();
        boolean boolean13 = localDate5.isAfter((org.joda.time.ReadablePartial) localDate12);
        java.lang.Object obj14 = null;
        boolean boolean15 = localDate12.equals(obj14);
        org.joda.time.LocalDate localDate17 = localDate12.minusMonths(796);
        org.joda.time.LocalDate.Property property18 = localDate17.centuryOfEra();
        org.joda.time.LocalDate localDate19 = property18.roundHalfFloorCopy();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01" + "'", str3, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate19);
    }

    @Test
    public void test14334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14334");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) (short) 1, chronology2);
        java.lang.String str4 = localDate3.toString();
        org.joda.time.LocalDate localDate6 = localDate3.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology7 = localDate6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.yearOfEra();
        org.joda.time.DateTimeField dateTimeField9 = dateTimeFieldType0.getField(chronology7);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology7);
        org.joda.time.DateTimeField dateTimeField11 = chronology7.dayOfMonth();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) 53619248, (long) 1);
        int[] intArray17 = chronology7.get((org.joda.time.ReadablePeriod) mutablePeriod14, (long) (-292275054), (long) 53637942);
        org.joda.time.DateTimeField dateTimeField18 = chronology7.clockhourOfHalfday();
        long long20 = dateTimeField18.roundHalfEven(42470L);
        org.joda.time.TimeOfDay timeOfDay21 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay21.minusHours(53667278);
        org.joda.time.TimeOfDay timeOfDay25 = timeOfDay21.plusMinutes(53686878);
        int[] intArray26 = timeOfDay21.getValues();
        java.lang.String str27 = timeOfDay21.toString();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) 698, periodType29);
        org.joda.time.TimeOfDay timeOfDay31 = timeOfDay21.plus((org.joda.time.ReadablePeriod) mutablePeriod30);
        java.util.Calendar.Builder builder33 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder35 = builder33.setLenient(false);
        java.util.Calendar.Builder builder40 = builder33.setTimeOfDay((int) ' ', 53617440, 3, 53617649);
        java.util.Calendar.Builder builder43 = builder33.set(6, (int) (short) 0);
        java.util.Calendar.Builder builder47 = builder33.setWeekDate(328, 53657187, 13);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.Period period50 = new org.joda.time.Period((long) (byte) 100, chronology49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime(chronology51);
        org.joda.time.MutableDateTime mutableDateTime53 = mutableDateTime52.copy();
        org.joda.time.Duration duration54 = period50.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime53);
        int int55 = period50.size();
        org.joda.time.Period period57 = period50.plusHours(53619079);
        org.joda.time.Period period59 = period50.plusWeeks(773);
        int[] intArray60 = period50.getValues();
        java.util.Calendar.Builder builder61 = builder47.setFields(intArray60);
        org.joda.time.LocalTime localTime63 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property64 = localTime63.minuteOfHour();
        org.joda.time.LocalTime localTime66 = localTime63.withMillisOfSecond(904);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.DateTime dateTime68 = localTime63.toDateTimeToday(dateTimeZone67);
        org.joda.time.DateTime dateTime70 = dateTime68.plusMonths(10);
        org.joda.time.DateTime.Property property71 = dateTime68.minuteOfDay();
        org.joda.time.DateTime.Property property72 = dateTime68.yearOfCentury();
        java.util.Locale locale73 = java.util.Locale.ITALY;
        java.util.Locale locale74 = java.util.Locale.JAPANESE;
        java.lang.String str75 = locale74.getDisplayCountry();
        java.lang.String str76 = locale73.getDisplayLanguage(locale74);
        java.lang.String str77 = property72.getAsShortText(locale74);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray78 = dateTimeField18.set((org.joda.time.ReadablePartial) timeOfDay31, 571, intArray60, "1-gen-1970 14.53.37", locale74);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"1-gen-1970 14.53.37\" for clockhourOfHalfday is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[0, 0, 0, 4, 0, 5, 12, 996]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertNotNull(intArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[5, 56, 28, 339]");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "T05:56:28.339" + "'", str27, "T05:56:28.339");
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 8 + "'", int55 == 8);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[0, 0, 0, 0, 0, 0, 0, 100]");
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(localTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "\u30a4\u30bf\u30ea\u30a2\u8a9e" + "'", str76, "\u30a4\u30bf\u30ea\u30a2\u8a9e");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "22" + "'", str77, "22");
    }

    @Test
    public void test14335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14335");
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(periodType1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) periodType1, dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusYears((int) '#');
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusDays(465);
        java.lang.Object obj9 = null;
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology10);
        int int12 = mutableDateTime11.getMillisOfSecond();
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone14 = dateMidnight13.getZone();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        mutableDateTime11.setZoneRetainFields(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(obj9, dateTimeZone14);
        org.joda.time.DateTime dateTime18 = localDateTime6.toDateTime(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(141094517856021000L, dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusMinutes(2022);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withHourOfDay(12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime25 = localDateTime19.withMonthOfYear(53911471);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53911471 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 382 + "'", int12 == 382);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
    }

    @Test
    public void test14336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14336");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay.Property property1 = timeOfDay0.hourOfDay();
        int int2 = property1.getMaximumValueOverall();
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean5 = localTime3.isSupported(dateTimeFieldType4);
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime7 = localTime3.withFields((org.joda.time.ReadablePartial) localTime6);
        int int8 = property1.compareTo((org.joda.time.ReadablePartial) localTime6);
        org.joda.time.TimeOfDay timeOfDay9 = property1.withMaximumValue();
        org.joda.time.TimeOfDay timeOfDay10 = property1.withMinimumValue();
        org.joda.time.DurationField durationField11 = property1.getRangeDurationField();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property13 = localTime12.minuteOfHour();
        org.joda.time.LocalTime localTime14 = property13.roundFloorCopy();
        org.joda.time.LocalTime localTime15 = property13.roundHalfFloorCopy();
        int int16 = property13.getMinimumValueOverall();
        java.util.Locale locale17 = java.util.Locale.ROOT;
        java.lang.String str18 = locale17.getLanguage();
        java.util.Set<java.lang.String> strSet19 = locale17.getUnicodeLocaleKeys();
        int int20 = property13.getMaximumShortTextLength(locale17);
        int int21 = property1.getMaximumTextLength(locale17);
        int int22 = property1.get();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 23 + "'", int2 == 23);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 5 + "'", int22 == 5);
    }

    @Test
    public void test14337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14337");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((java.lang.Object) periodType0, dateTimeZone2);
        int int4 = localDateTime3.getDayOfMonth();
        int int5 = localDateTime3.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.millisOfSecond();
        int int7 = localDateTime3.getEra();
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.era();
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(periodType9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((java.lang.Object) periodType9, dateTimeZone11);
        int int13 = localDateTime12.getDayOfMonth();
        int int14 = localDateTime12.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.millisOfSecond();
        int int16 = localDateTime12.getEra();
        org.joda.time.LocalDateTime.Property property17 = localDateTime12.era();
        org.joda.time.LocalDateTime.Property property18 = localDateTime12.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.weekyear();
        int int20 = localDateTime12.get(dateTimeFieldType19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime3.property(dateTimeFieldType19);
        java.lang.String str22 = property21.getName();
        org.joda.time.DurationField durationField23 = property21.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime24 = property21.withMinimumValue();
        java.util.Locale locale25 = null;
        java.lang.String str26 = property21.getAsShortText(locale25);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 21388407 + "'", int5 == 21388407);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 22 + "'", int13 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 21388407 + "'", int14 == 21388407);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "weekyear" + "'", str22, "weekyear");
        org.junit.Assert.assertNull(durationField23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022" + "'", str26, "2022");
    }

    @Test
    public void test14338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14338");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableDuration0, readableInstant1, periodType2);
        mutablePeriod3.addYears((int) (byte) 0);
        int int6 = mutablePeriod3.getMonths();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(readableDuration7, readableInstant8, periodType9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        mutablePeriod10.add(readableDuration11);
        mutablePeriod10.addMonths((int) '#');
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) (short) 1, chronology16);
        int int18 = localDate17.getDayOfYear();
        org.joda.time.LocalTime localTime19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = localDate17.toDateTime(localTime19, dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = localDate17.toDateMidnight(dateTimeZone22);
        org.joda.time.DateMidnight.Property property24 = dateMidnight23.yearOfEra();
        int int25 = dateMidnight23.getMinuteOfHour();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period((long) (byte) 100, chronology27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(chronology29);
        org.joda.time.MutableDateTime mutableDateTime31 = mutableDateTime30.copy();
        org.joda.time.Duration duration32 = period28.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime31);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight23.plus((org.joda.time.ReadableDuration) duration32);
        mutablePeriod10.add((org.joda.time.ReadableDuration) duration32);
        mutablePeriod3.setPeriod((org.joda.time.ReadableDuration) duration32);
        mutablePeriod3.add(53644667, 11, 1970, 96, 53644667, 53648497, 53646242, 53626518);
        org.joda.time.PeriodType periodType45 = org.joda.time.PeriodType.days();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate((long) (short) 1, chronology47);
        int int49 = localDate48.getDayOfYear();
        org.joda.time.LocalTime localTime50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = localDate48.toDateTime(localTime50, dateTimeZone51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime(chronology53);
        org.joda.time.MutableDateTime mutableDateTime55 = mutableDateTime54.copy();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        mutableDateTime55.setZone(dateTimeZone56);
        org.joda.time.MutableDateTime.Property property58 = mutableDateTime55.minuteOfDay();
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime();
        org.joda.time.DurationFieldType durationFieldType60 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTime dateTime62 = dateTime59.withFieldAdded(durationFieldType60, (int) (byte) 0);
        mutableDateTime55.add(durationFieldType60, 8);
        org.joda.time.LocalDate localDate66 = localDate48.withFieldAdded(durationFieldType60, 3);
        int int67 = periodType45.indexOf(durationFieldType60);
        int int68 = mutablePeriod3.get(durationFieldType60);
        org.joda.time.MutablePeriod mutablePeriod69 = mutablePeriod3.copy();
        mutablePeriod69.addMinutes(53705766);
        mutablePeriod69.addSeconds(160);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(durationFieldType60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod69);
    }

    @Test
    public void test14339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14339");
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = null;
        org.joda.time.format.DateTimeParser dateTimeParser8 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter7, dateTimeParser8);
        org.joda.time.Chronology chronology10 = dateTimeFormatter9.getChronolgy();
        boolean boolean11 = dateTimeFormatter9.isOffsetParsed();
        java.util.Locale locale12 = java.util.Locale.TAIWAN;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter9.withLocale(locale12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter13.withPivotYear(305);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology16);
        mutableDateTime17.addMinutes(904);
        mutableDateTime17.addWeekyears((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        mutableDateTime17.setZoneRetainFields(dateTimeZone22);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter15.withZone(dateTimeZone22);
        java.lang.String str25 = dateTimeZone22.getID();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(53695724, 525, 0, 889, 53998134, 53656631, 54047106, dateTimeZone22);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 889 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+14:53:39.988" + "'", str25, "+14:53:39.988");
    }

    @Test
    public void test14340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14340");
        org.joda.time.Instant instant4 = org.joda.time.Instant.parse("2022-02-21T14:53:37.096Z");
        org.joda.time.Chronology chronology5 = instant4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.hours();
        java.lang.String str7 = chronology5.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight(2100, (int) (byte) 100, 70, chronology5);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ISOChronology[UTC]" + "'", str7, "ISOChronology[UTC]");
    }

    @Test
    public void test14341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14341");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((java.lang.Object) periodType0, dateTimeZone2);
        int int4 = localDateTime3.getDayOfMonth();
        int int5 = localDateTime3.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.millisOfSecond();
        int int7 = localDateTime3.getEra();
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.era();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime3.minusSeconds((int) 'x');
        int int11 = localDateTime10.size();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.minusYears(13);
        org.joda.time.LocalDateTime.Property property14 = localDateTime10.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime15 = property14.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = property14.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withMillisOfSecond(363);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withSecondOfMinute(771);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 771 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 21388462 + "'", int5 == 21388462);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test14342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14342");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.withHourOfDay((int) (short) 10);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) (byte) 100, chronology4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(chronology6);
        org.joda.time.MutableDateTime mutableDateTime8 = mutableDateTime7.copy();
        org.joda.time.Duration duration9 = period5.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime8);
        int int10 = period5.size();
        org.joda.time.format.PeriodFormatter periodFormatter11 = null;
        java.lang.String str12 = period5.toString(periodFormatter11);
        int int13 = period5.getSeconds();
        org.joda.time.Period period15 = period5.plusHours(3);
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay0.minus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.Period period18 = period15.plusMinutes(54057678);
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "PT0.100S" + "'", str12, "PT0.100S");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(period18);
    }

    @Test
    public void test14343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14343");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) (short) 1, chronology2);
        int int4 = localDate3.getDayOfYear();
        org.joda.time.LocalTime localTime5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = localDate3.toDateTime(localTime5, dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = localDate3.toDateMidnight(dateTimeZone8);
        org.joda.time.DateMidnight.Property property10 = dateMidnight9.yearOfEra();
        int int11 = dateMidnight9.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property12 = dateMidnight9.year();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight9.plusYears((int) ' ');
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((java.lang.Object) dateMidnight9);
        org.joda.time.LocalDate.Property property16 = localDate15.dayOfYear();
        org.joda.time.Chronology chronology17 = localDate15.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.seconds();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.centuryOfEra();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(705L, chronology17);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) (short) 1, chronology22);
        int int24 = localDate23.getDayOfYear();
        org.joda.time.LocalTime localTime25 = null;
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateTime dateTime27 = localDate23.toDateTime(localTime25, dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.plusYears((int) (short) 10);
        org.joda.time.DateTime dateTime31 = dateTime27.plus((long) 100);
        org.joda.time.DateTime dateTime33 = dateTime31.plusSeconds(53618165);
        org.joda.time.DateTime.Property property34 = dateTime31.year();
        org.joda.time.DateTime dateTime35 = property34.roundCeilingCopy();
        boolean boolean36 = mutablePeriod20.equals((java.lang.Object) property34);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test14344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14344");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setLenient(false);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getTimeZone("2022-02-21T14:54:05.059Z");
        java.util.Calendar.Builder builder5 = builder2.setTimeZone(timeZone4);
        org.joda.time.tz.NameProvider nameProvider6 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider6);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider6);
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property10 = localTime9.minuteOfHour();
        org.joda.time.LocalTime localTime12 = localTime9.withMillisOfSecond(904);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = localTime9.toDateTimeToday(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.plusMonths(10);
        org.joda.time.DateTime.Property property17 = dateTime14.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField18 = property17.getField();
        java.util.Locale locale19 = null;
        int int20 = dateTimeField18.getMaximumShortTextLength(locale19);
        long long22 = dateTimeField18.roundCeiling(10L);
        java.util.Locale locale23 = java.util.Locale.getDefault();
        int int24 = dateTimeField18.getMaximumTextLength(locale23);
        java.util.Locale locale25 = locale23.stripExtensions();
        java.lang.String str28 = nameProvider6.getShortName(locale25, "53637942", "T14:54:17.208");
        java.util.Locale locale29 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str32 = nameProvider6.getName(locale29, "14:54:24.849", "1970");
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone4, locale29);
        org.joda.time.LocalTime localTime34 = org.joda.time.LocalTime.fromCalendarFields(calendar33);
        calendar33.setFirstDayOfWeek(53824907);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(nameProvider6);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 20012L + "'", long22 == 20012L);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "_HI!");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "_HI!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=1645455768523,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=53824907,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=3,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=48,MILLISECOND=523,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime34);
    }

    @Test
    public void test14345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14345");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 53627306);
        org.joda.time.LocalDate.Property property2 = localDate1.year();
        int int3 = localDate1.getWeekyear();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
    }

    @Test
    public void test14346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14346");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((java.lang.Object) periodType0, dateTimeZone2);
        int int4 = localDateTime3.getDayOfMonth();
        int int5 = localDateTime3.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.millisOfSecond();
        int int7 = localDateTime3.getEra();
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.era();
        org.joda.time.LocalDateTime.Property property9 = localDateTime3.dayOfMonth();
        int int10 = localDateTime3.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime3.minusDays(53725998);
        org.joda.time.DateTime dateTime13 = localDateTime12.toDateTime();
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 21388537 + "'", int5 == 21388537);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test14347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14347");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = mutableDateTime1.copy();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime2.minuteOfDay();
        int int6 = mutableDateTime2.getSecondOfMinute();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime2.hourOfDay();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime2.dayOfWeek();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime2.minuteOfHour();
        int int10 = property9.getMinimumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.roundHalfEven();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.year();
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(property5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 28 + "'", int6 == 28);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test14348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14348");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = localDate2.toDateMidnight(dateTimeZone7);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.yearOfEra();
        int int10 = dateMidnight8.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property11 = dateMidnight8.year();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight8.withMillis((long) ' ');
        org.joda.time.DateMidnight.Property property14 = dateMidnight13.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight16 = property14.setCopy(0);
        org.joda.time.DateTimeField dateTimeField17 = property14.getField();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test14349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14349");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period((long) (byte) 100, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(chronology3);
        org.joda.time.MutableDateTime mutableDateTime5 = mutableDateTime4.copy();
        org.joda.time.Duration duration6 = period2.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime5);
        org.joda.time.Period period8 = period2.plusDays((int) (byte) 10);
        org.joda.time.Period period10 = period2.withMinutes(409);
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.years();
        java.lang.String str12 = periodType11.getName();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(periodType11);
        org.joda.time.PeriodType periodType14 = periodType11.withYearsRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period15 = period10.withPeriodType(periodType14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'minutes'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Years" + "'", str12, "Years");
        org.junit.Assert.assertNotNull(periodType14);
    }

    @Test
    public void test14350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14350");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((java.lang.Object) periodType0, dateTimeZone2);
        int int4 = localDateTime3.getDayOfMonth();
        int int5 = localDateTime3.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.millisOfSecond();
        int int7 = localDateTime3.getEra();
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.era();
        org.joda.time.LocalDateTime.Property property9 = localDateTime3.dayOfMonth();
        int int10 = localDateTime3.getDayOfWeek();
        int int11 = localDateTime3.getMinuteOfHour();
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone13 = dateMidnight12.getZone();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone13);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.plusMillis(342);
        boolean boolean18 = localDateTime3.isBefore((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        int int20 = localDateTime17.get(dateTimeFieldType19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.plusWeeks(59);
        int int23 = localDateTime17.getEra();
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 21388591 + "'", int5 == 21388591);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 56 + "'", int11 == 56);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
    }

    @Test
    public void test14351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14351");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property1 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime3 = localTime0.withMillisOfSecond(904);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localTime0.toDateTimeToday(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths(10);
        org.joda.time.DateTime.Property property8 = dateTime5.minuteOfDay();
        org.joda.time.DateTime dateTime9 = property8.getDateTime();
        org.joda.time.DateTime.Property property10 = dateTime9.dayOfWeek();
        org.joda.time.DateTime dateTime12 = dateTime9.minusMonths(21);
        int int13 = dateTime9.getMonthOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) (byte) 100, chronology15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(chronology17);
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime18.copy();
        org.joda.time.Duration duration20 = period16.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime19);
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((-1), 53620134, (int) (byte) -1, 53617719, (int) (byte) 100, 53619079, 1, 53);
        org.joda.time.Period period30 = period16.minus((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.DateTime dateTime32 = dateTime9.withPeriodAdded((org.joda.time.ReadablePeriod) period16, 53621101);
        org.joda.time.DateTime dateTime34 = dateTime9.plusSeconds(70);
        org.joda.time.DateTime dateTime35 = dateTime34.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.millisOfSecond();
        int int37 = dateTime34.get(dateTimeFieldType36);
        org.joda.time.DateTime dateTime39 = dateTime34.plus((long) 96);
        org.joda.time.DateTime dateTime41 = dateTime39.minusHours(53739548);
        int int42 = dateTime41.getWeekyear();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 623 + "'", int37 == 623);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-4109) + "'", int42 == (-4109));
    }

    @Test
    public void test14352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14352");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) (short) 1, chronology2);
        java.lang.String str4 = localDate3.toString();
        org.joda.time.LocalDate localDate6 = localDate3.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology7 = localDate6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay((long) (short) 1, chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.plusMonths(53617719);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone12 = dateMidnight11.getZone();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (short) 1, chronology14);
        java.lang.String str16 = localDate15.toString();
        org.joda.time.LocalDate localDate18 = localDate15.withYearOfEra((int) (byte) 100);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight11.withFields((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight11.withField(dateTimeFieldType20, 842);
        org.joda.time.YearMonthDay.Property property23 = yearMonthDay8.property(dateTimeFieldType20);
        org.joda.time.YearMonthDay.Property property24 = yearMonthDay8.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay26 = property24.addToCopy(53629078);
        java.util.Locale locale29 = new java.util.Locale("2022-02-21T14:54:12.589", "PT0.100S");
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) (short) 1, chronology31);
        java.lang.String str33 = localDate32.toString();
        org.joda.time.LocalDate localDate35 = localDate32.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology36 = localDate35.getChronology();
        org.joda.time.DurationField durationField37 = chronology36.eras();
        org.joda.time.DateTimeZone dateTimeZone38 = chronology36.getZone();
        java.util.Locale locale42 = new java.util.Locale("UTC", "2022-02-21T14:53:49.549Z");
        java.lang.String str43 = locale42.getCountry();
        java.lang.String str45 = locale42.getExtension('x');
        java.lang.String str46 = dateTimeZone38.getShortName((long) 52, locale42);
        java.lang.String str47 = locale29.getDisplayScript(locale42);
        java.lang.String str48 = property24.getAsText(locale29);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = property24.getFieldType();
        java.lang.String str50 = property24.getName();
        org.joda.time.YearMonthDay yearMonthDay51 = property24.withMinimumValue();
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime54 = dateTime52.withWeekyear((int) (short) 100);
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod(readableDuration55, readableInstant56, periodType57);
        mutablePeriod58.addYears((int) (byte) 0);
        int int61 = mutablePeriod58.getMonths();
        mutablePeriod58.addMinutes((int) (byte) 0);
        int int64 = mutablePeriod58.getMinutes();
        org.joda.time.ReadableInterval readableInterval65 = null;
        mutablePeriod58.setPeriod(readableInterval65);
        org.joda.time.DateTime dateTime68 = dateTime54.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod58, (int) ' ');
        org.joda.time.DateTime dateTime70 = dateTime54.plusMillis(53626518);
        org.joda.time.DateTime dateTime73 = dateTime54.withDurationAdded((long) 46, 53649515);
        int int74 = property24.compareTo((org.joda.time.ReadableInstant) dateTime54);
        int int75 = property24.getMinimumValue();
        int int76 = property24.getMaximumValue();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01" + "'", str16, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertEquals(locale29.toString(), "2022-02-21t14:54:12.589_PT0.100S");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1970-01-01" + "'", str33, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertEquals(locale42.toString(), "utc_2022-02-21T14:53:49.549Z");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "2022-02-21T14:53:49.549Z" + "'", str43, "2022-02-21T14:53:49.549Z");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00" + "'", str46, "+00:00");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "January" + "'", str48, "January");
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "monthOfYear" + "'", str50, "monthOfYear");
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 12 + "'", int76 == 12);
    }

    @Test
    public void test14353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14353");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period((long) (byte) 100, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(chronology3);
        org.joda.time.MutableDateTime mutableDateTime5 = mutableDateTime4.copy();
        org.joda.time.Duration duration6 = period2.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime5);
        org.joda.time.Period period8 = period2.plusDays((int) (byte) 10);
        org.joda.time.Duration duration9 = period8.toStandardDuration();
        org.joda.time.Period period11 = period8.withMinutes(53661484);
        org.joda.time.Period period13 = period8.plusDays(390);
        int int14 = period8.size();
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
    }

    @Test
    public void test14354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14354");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.minuteOfDay();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.year();
        org.joda.time.MutableDateTime mutableDateTime4 = property3.roundHalfEven();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.dayOfWeek();
        java.util.Locale locale7 = new java.util.Locale("1970");
        int int8 = property5.getMaximumShortTextLength(locale7);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals(locale7.toString(), "1970");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
    }

    @Test
    public void test14355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14355");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property1 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime2 = property1.roundHalfCeilingCopy();
        org.joda.time.LocalTime.Property property3 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime4 = property3.roundCeilingCopy();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((long) (byte) 100, chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime9.copy();
        org.joda.time.Duration duration11 = period7.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime10);
        org.joda.time.Weeks weeks12 = period7.toStandardWeeks();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(readableDuration13, readableInstant14, periodType15);
        org.joda.time.ReadableDuration readableDuration17 = null;
        mutablePeriod16.add(readableDuration17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.MutableDateTime mutableDateTime21 = mutableDateTime20.copy();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        mutableDateTime21.setZone(dateTimeZone22);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime21.minuteOfDay();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTime dateTime28 = dateTime25.withFieldAdded(durationFieldType26, (int) (byte) 0);
        mutableDateTime21.add(durationFieldType26, 8);
        boolean boolean31 = mutablePeriod16.isSupported(durationFieldType26);
        int int32 = period7.indexOf(durationFieldType26);
        java.lang.String str33 = durationFieldType26.getName();
        boolean boolean34 = localTime4.isSupported(durationFieldType26);
        org.joda.time.LocalTime.Property property35 = localTime4.millisOfSecond();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(weeks12);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "centuries" + "'", str33, "centuries");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(property35);
    }

    @Test
    public void test14356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14356");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property1 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime3 = localTime0.withMillisOfSecond(904);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localTime0.toDateTimeToday(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths(10);
        org.joda.time.DateTime.Property property8 = dateTime5.minuteOfDay();
        org.joda.time.DateTime dateTime9 = property8.getDateTime();
        org.joda.time.DateTime.Property property10 = dateTime9.dayOfWeek();
        org.joda.time.DateTime dateTime12 = dateTime9.minusMonths(21);
        org.joda.time.DateTime dateTime14 = dateTime12.withYearOfEra((int) '4');
        org.joda.time.DateTime dateTime16 = dateTime12.plusSeconds((int) (byte) 1);
        int int17 = dateTime12.getWeekyear();
        java.lang.String str18 = dateTime12.toString();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2020 + "'", int17 == 2020);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2020-05-22T05:56:28.705+14:53:39.988" + "'", str18, "2020-05-22T05:56:28.705+14:53:39.988");
    }

    @Test
    public void test14357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14357");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableDuration0, readableInstant1, periodType2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutablePeriod3.add(readableDuration4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(chronology6);
        org.joda.time.MutableDateTime mutableDateTime8 = mutableDateTime7.copy();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        mutableDateTime8.setZone(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime8.minuteOfDay();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTime dateTime15 = dateTime12.withFieldAdded(durationFieldType13, (int) (byte) 0);
        mutableDateTime8.add(durationFieldType13, 8);
        boolean boolean18 = mutablePeriod3.isSupported(durationFieldType13);
        mutablePeriod3.setPeriod((long) 185, (long) 342);
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.now();
        org.joda.time.Instant instant23 = mutableDateTime22.toInstant();
        org.joda.time.MutableDateTime mutableDateTime24 = instant23.toMutableDateTimeISO();
        org.joda.time.Duration duration25 = mutablePeriod3.toDurationFrom((org.joda.time.ReadableInstant) instant23);
        org.joda.time.DateTime dateTime26 = instant23.toDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((java.lang.Object) instant23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.Instant");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test14358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14358");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = localDate2.toDateMidnight(dateTimeZone7);
        org.joda.time.LocalDate localDate10 = localDate2.withYear(53619770);
        java.lang.String str11 = localDate2.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(chronology12);
        org.joda.time.MutableDateTime mutableDateTime14 = mutableDateTime13.copy();
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone16 = dateMidnight15.getZone();
        mutableDateTime13.setZoneRetainFields(dateTimeZone16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(chronology18);
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime19.copy();
        mutableDateTime19.addMinutes(0);
        mutableDateTime19.setSecondOfDay(21);
        org.joda.time.Chronology chronology25 = null;
        mutableDateTime19.setChronology(chronology25);
        mutableDateTime19.setMinuteOfHour((int) (short) 0);
        mutableDateTime19.addMinutes((int) (byte) 1);
        int int31 = dateTimeZone16.getOffset((org.joda.time.ReadableInstant) mutableDateTime19);
        org.joda.time.DateMidnight dateMidnight32 = localDate2.toDateMidnight(dateTimeZone16);
        org.joda.time.LocalDate localDate34 = localDate2.withYearOfEra(53705766);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate36 = localDate34.withEra(54049496);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54049496 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-01" + "'", str11, "1970-01-01");
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(mutableDateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 53619988 + "'", int31 == 53619988);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(localDate34);
    }

    @Test
    public void test14359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14359");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleKeys();
        java.util.stream.Stream<java.lang.String> strStream2 = strSet1.parallelStream();
        boolean boolean3 = strSet1.isEmpty();
        org.joda.time.Instant instant4 = new org.joda.time.Instant();
        org.joda.time.Instant instant6 = instant4.withMillis((-27422466L));
        boolean boolean7 = strSet1.remove((java.lang.Object) instant4);
        org.joda.time.MutableDateTime mutableDateTime8 = instant4.toMutableDateTime();
        org.joda.time.DateTime dateTime9 = instant4.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime10 = instant4.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime11 = instant4.toDateTimeISO();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(readableDuration14, readableInstant15, periodType16);
        org.joda.time.ReadableDuration readableDuration18 = null;
        mutablePeriod17.add(readableDuration18);
        mutablePeriod17.addMonths((int) '#');
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) (short) 1, chronology23);
        int int25 = localDate24.getDayOfYear();
        org.joda.time.LocalTime localTime26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = localDate24.toDateTime(localTime26, dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = localDate24.toDateMidnight(dateTimeZone29);
        org.joda.time.DateMidnight.Property property31 = dateMidnight30.yearOfEra();
        int int32 = dateMidnight30.getMinuteOfHour();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Period period35 = new org.joda.time.Period((long) (byte) 100, chronology34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime(chronology36);
        org.joda.time.MutableDateTime mutableDateTime38 = mutableDateTime37.copy();
        org.joda.time.Duration duration39 = period35.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime38);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight30.plus((org.joda.time.ReadableDuration) duration39);
        mutablePeriod17.add((org.joda.time.ReadableDuration) duration39);
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.years();
        java.lang.String str43 = periodType42.getName();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(periodType42);
        org.joda.time.PeriodType periodType45 = periodType42.withYearsRemoved();
        org.joda.time.Period period46 = new org.joda.time.Period(readableInstant13, (org.joda.time.ReadableDuration) duration39, periodType45);
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant4, readableInstant12, periodType45);
        org.joda.time.DateTime dateTime48 = instant4.toDateTime();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(strStream2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Years" + "'", str43, "Years");
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(dateTime48);
    }

    @Test
    public void test14360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14360");
        org.joda.time.Period period1 = org.joda.time.Period.weeks((int) '4');
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.years();
        java.lang.String str3 = periodType2.getName();
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(periodType2);
        org.joda.time.Period period5 = period1.plus((org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Period period6 = period1.negated();
        org.joda.time.Period period8 = period1.minusHours(0);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Years" + "'", str3, "Years");
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
    }

    @Test
    public void test14361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14361");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period((long) (byte) 100, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(chronology3);
        org.joda.time.MutableDateTime mutableDateTime5 = mutableDateTime4.copy();
        org.joda.time.Duration duration6 = period2.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime5);
        org.joda.time.Period period8 = period2.plusDays((int) (byte) 10);
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property10 = localTime9.minuteOfHour();
        org.joda.time.LocalTime localTime12 = localTime9.withMillisOfSecond(904);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = localTime9.toDateTimeToday(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime14.plusMonths(10);
        org.joda.time.DateTime.Property property17 = dateTime14.minuteOfDay();
        org.joda.time.DateTime.Property property18 = dateTime14.year();
        boolean boolean19 = period8.equals((java.lang.Object) property18);
        org.joda.time.DateTime dateTime20 = property18.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime22 = dateTime20.plusWeeks(53649947);
        org.joda.time.DateTime dateTime24 = dateTime20.minusDays(54132836);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test14362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14362");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((int) (byte) 1, 581, 689, 53747412, 53807294, 53888824);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53747412 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14363");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone2 = provider0.getZone("Years");
        org.joda.time.DateTimeZone dateTimeZone4 = provider0.getZone("P10Y904M53619708W47DT714H-292275107M-38.905S");
        java.util.Set<java.lang.String> strSet5 = provider0.getAvailableIDs();
        java.util.Locale locale8 = new java.util.Locale("UTC", "2022-02-21T14:53:49.549Z");
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleAttributes();
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.util.Locale locale13 = java.util.Locale.FRENCH;
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.util.Locale locale19 = java.util.Locale.CANADA;
        java.lang.String str21 = locale19.getExtension('a');
        java.util.Locale locale22 = java.util.Locale.ITALY;
        java.util.Locale[] localeArray23 = new java.util.Locale[] { locale13, locale14, locale15, locale16, locale17, locale18, locale19, locale22 };
        java.util.ArrayList<java.util.Locale> localeList24 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList24, localeArray23);
        java.util.List<java.util.Locale> localeList26 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.util.Locale>) localeList24);
        java.util.Locale locale27 = java.util.Locale.CANADA;
        java.util.Locale locale28 = java.util.Locale.ITALY;
        java.util.Locale locale29 = java.util.Locale.JAPANESE;
        java.util.Locale locale30 = java.util.Locale.ITALY;
        java.util.Locale locale31 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale32 = java.util.Locale.CANADA;
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) (short) 1, chronology34);
        int int36 = localDate35.getDayOfYear();
        org.joda.time.LocalTime localTime37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = localDate35.toDateTime(localTime37, dateTimeZone38);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = localDate35.toDateMidnight(dateTimeZone40);
        org.joda.time.DateMidnight.Property property42 = dateMidnight41.yearOfEra();
        int int43 = dateMidnight41.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property44 = dateMidnight41.year();
        java.util.Locale locale45 = java.util.Locale.FRENCH;
        java.lang.String str46 = property44.getAsText(locale45);
        java.util.Locale locale47 = java.util.Locale.JAPANESE;
        java.util.Locale locale48 = java.util.Locale.JAPANESE;
        java.util.Locale[] localeArray49 = new java.util.Locale[] { locale27, locale28, locale29, locale30, locale31, locale32, locale45, locale47, locale48 };
        java.util.ArrayList<java.util.Locale> localeList50 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList50, localeArray49);
        java.util.Locale.FilteringMode filteringMode52 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.util.Locale> localeList53 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.util.Locale>) localeList50, filteringMode52);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap54 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList55 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, strMap54);
        java.util.Locale locale56 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet57 = locale56.getUnicodeLocaleKeys();
        java.util.stream.Stream<java.lang.String> strStream58 = strSet57.parallelStream();
        java.util.Spliterator<java.lang.String> strSpliterator59 = strSet57.spliterator();
        java.lang.String str60 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.lang.String>) strSet57);
        boolean boolean61 = strSet9.containsAll((java.util.Collection<java.lang.String>) strSet57);
        java.util.Locale locale62 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet63 = locale62.getUnicodeLocaleKeys();
        java.util.stream.Stream<java.lang.String> strStream64 = strSet63.parallelStream();
        boolean boolean65 = strSet9.removeAll((java.util.Collection<java.lang.String>) strSet63);
        org.joda.time.tz.Provider provider66 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone68 = provider66.getZone("Years");
        org.joda.time.DateTimeZone.setProvider(provider66);
        org.joda.time.DateTimeZone dateTimeZone71 = provider66.getZone("ko");
        org.joda.time.DateTimeZone dateTimeZone73 = provider66.getZone("2022-02-21T14:59:27.623Z");
        java.util.Set<java.lang.String> strSet74 = provider66.getAvailableIDs();
        boolean boolean75 = strSet9.retainAll((java.util.Collection<java.lang.String>) strSet74);
        boolean boolean76 = strSet5.addAll((java.util.Collection<java.lang.String>) strSet9);
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNull(dateTimeZone2);
        org.junit.Assert.assertNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertEquals(locale8.toString(), "utc_2022-02-21T14:53:49.549Z");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_CA");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it_IT");
        org.junit.Assert.assertNotNull(localeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(localeList26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ja");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1970" + "'", str46, "1970");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ja");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ja");
        org.junit.Assert.assertNotNull(localeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + filteringMode52 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode52.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(localeList53);
        org.junit.Assert.assertNotNull(languageRangeList55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertNotNull(strStream58);
        org.junit.Assert.assertNotNull(strSpliterator59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet63);
        org.junit.Assert.assertNotNull(strStream64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(provider66);
        org.junit.Assert.assertNull(dateTimeZone68);
        org.junit.Assert.assertNull(dateTimeZone71);
        org.junit.Assert.assertNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(strSet74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test14364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14364");
        org.joda.time.Period period1 = org.joda.time.Period.millis(53957132);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test14365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14365");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test14366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14366");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone1 = dateMidnight0.getZone();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) (short) 1, chronology3);
        java.lang.String str5 = localDate4.toString();
        org.joda.time.LocalDate localDate7 = localDate4.withYearOfEra((int) (byte) 100);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight0.withFields((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(readableDuration9, readableInstant10, periodType11);
        mutablePeriod12.setMillis(0);
        org.joda.time.LocalDate localDate15 = localDate7.plus((org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.LocalDate localDate17 = localDate15.withWeekyear((int) ' ');
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone19 = dateMidnight18.getZone();
        boolean boolean21 = dateTimeZone19.isStandardOffset((long) 'a');
        org.joda.time.LocalDate localDate22 = org.joda.time.LocalDate.now(dateTimeZone19);
        org.joda.time.DateTime dateTime23 = localDate15.toDateTimeAtStartOfDay(dateTimeZone19);
        java.lang.String str24 = dateTime23.toString();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(chronology25);
        org.joda.time.MutableDateTime mutableDateTime27 = mutableDateTime26.copy();
        mutableDateTime26.addMinutes(0);
        java.lang.String str30 = mutableDateTime26.toString();
        org.joda.time.format.DateTimePrinter dateTimePrinter32 = null;
        org.joda.time.format.DateTimeParser dateTimeParser33 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter32, dateTimeParser33);
        boolean boolean35 = dateTimeFormatter34.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter34.withPivotYear((java.lang.Integer) 1);
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone39 = dateMidnight38.getZone();
        boolean boolean41 = dateTimeZone39.isStandardOffset((long) 'a');
        org.joda.time.LocalDate localDate42 = org.joda.time.LocalDate.now(dateTimeZone39);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter37.withZone(dateTimeZone39);
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((long) 53628506, dateTimeZone39);
        mutableDateTime26.setZoneRetainFields(dateTimeZone39);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period((long) (byte) 100, chronology47);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime(chronology49);
        org.joda.time.MutableDateTime mutableDateTime51 = mutableDateTime50.copy();
        org.joda.time.Duration duration52 = period48.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime51);
        mutableDateTime26.add((org.joda.time.ReadableDuration) duration52, 53625309);
        org.joda.time.Period period55 = duration52.toPeriod();
        org.joda.time.DateTime dateTime56 = dateTime23.minus((org.joda.time.ReadableDuration) duration52);
        org.joda.time.DateTime dateTime58 = dateTime23.plusYears(345);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0100-01-01T00:00:00.000+14:53:39.988" + "'", str24, "0100-01-01T00:00:00.000+14:53:39.988");
        org.junit.Assert.assertNotNull(mutableDateTime27);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022-02-22T05:56:28.885+14:53:39.988" + "'", str30, "2022-02-22T05:56:28.885+14:53:39.988");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
    }

    @Test
    public void test14367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14367");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        java.util.Date date1 = dateTime0.toDate();
        java.time.Instant instant2 = date1.toInstant();
        org.joda.time.TimeOfDay timeOfDay3 = org.joda.time.TimeOfDay.fromDateFields(date1);
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay3.withMillisOfSecond(572);
        int int6 = timeOfDay3.getMillisOfSecond();
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.withHourOfDay((int) (short) 10);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) (byte) 100, chronology11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.MutableDateTime mutableDateTime15 = mutableDateTime14.copy();
        org.joda.time.Duration duration16 = period12.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime15);
        int int17 = period12.size();
        org.joda.time.format.PeriodFormatter periodFormatter18 = null;
        java.lang.String str19 = period12.toString(periodFormatter18);
        int int20 = period12.getSeconds();
        org.joda.time.Period period22 = period12.plusHours(3);
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay7.minus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.TimeOfDay timeOfDay25 = timeOfDay23.plusHours(342);
        org.joda.time.TimeOfDay timeOfDay27 = timeOfDay25.withMillisOfSecond(0);
        org.joda.time.TimeOfDay.Property property28 = timeOfDay25.minuteOfHour();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = timeOfDay25.getFieldTypes();
        org.joda.time.TimeOfDay.Property property30 = timeOfDay25.hourOfDay();
        boolean boolean31 = timeOfDay3.isAfter((org.joda.time.ReadablePartial) timeOfDay25);
        org.junit.Assert.assertNotNull(date1);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Mon Feb 21 15:02:48 GMT 2022");
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(timeOfDay5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 931 + "'", int6 == 931);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PT0.100S" + "'", str19, "PT0.100S");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertNotNull(property30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test14368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14368");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) (byte) 100, chronology4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(chronology6);
        org.joda.time.MutableDateTime mutableDateTime8 = mutableDateTime7.copy();
        org.joda.time.Duration duration9 = period5.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime8);
        int int10 = period5.size();
        org.joda.time.Period period12 = period5.withWeeks(842);
        org.joda.time.DurationFieldType[] durationFieldTypeArray13 = period5.getFieldTypes();
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.forFields(durationFieldTypeArray13);
        org.joda.time.PeriodType periodType15 = periodType14.withHoursRemoved();
        org.joda.time.PeriodType periodType16 = periodType15.withYearsRemoved();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) (short) 1, chronology20);
        java.lang.String str22 = localDate21.toString();
        org.joda.time.LocalDate localDate24 = localDate21.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology25 = localDate24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.yearOfEra();
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType18.getField(chronology25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((long) (byte) 100, chronology29);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime(chronology31);
        org.joda.time.MutableDateTime mutableDateTime33 = mutableDateTime32.copy();
        org.joda.time.Duration duration34 = period30.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime33);
        org.joda.time.Period period36 = period30.plusDays((int) (byte) 10);
        int int37 = period36.getHours();
        org.joda.time.Period period39 = period36.plusMonths(2);
        org.joda.time.Period period41 = period36.minusMonths(12);
        org.joda.time.Period period43 = period36.withYears(2057);
        int[] intArray45 = chronology25.get((org.joda.time.ReadablePeriod) period43, 259200000L);
        boolean boolean46 = dateTimeFieldType17.isSupported(chronology25);
        org.joda.time.Period period47 = new org.joda.time.Period((long) 53706457, (long) 53655716, periodType15, chronology25);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.Period period51 = new org.joda.time.Period((long) (byte) 100, chronology50);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime(chronology52);
        org.joda.time.MutableDateTime mutableDateTime54 = mutableDateTime53.copy();
        org.joda.time.Duration duration55 = period51.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime54);
        int int56 = period51.size();
        org.joda.time.Period period58 = period51.withWeeks(842);
        org.joda.time.DurationFieldType[] durationFieldTypeArray59 = period51.getFieldTypes();
        org.joda.time.PeriodType periodType60 = org.joda.time.PeriodType.forFields(durationFieldTypeArray59);
        org.joda.time.PeriodType periodType61 = periodType60.withHoursRemoved();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate((long) (short) 1, chronology64);
        java.lang.String str66 = localDate65.toString();
        org.joda.time.LocalDate localDate68 = localDate65.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology69 = localDate68.getChronology();
        org.joda.time.DateTimeField dateTimeField70 = chronology69.yearOfEra();
        org.joda.time.DateTimeField dateTimeField71 = dateTimeFieldType62.getField(chronology69);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Period period74 = new org.joda.time.Period((long) (byte) 100, chronology73);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.MutableDateTime mutableDateTime76 = new org.joda.time.MutableDateTime(chronology75);
        org.joda.time.MutableDateTime mutableDateTime77 = mutableDateTime76.copy();
        org.joda.time.Duration duration78 = period74.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime77);
        org.joda.time.Period period80 = period74.plusDays((int) (byte) 10);
        int int81 = period80.getHours();
        org.joda.time.Period period83 = period80.plusMonths(2);
        org.joda.time.Period period85 = period80.minusMonths(12);
        org.joda.time.Period period87 = period80.withYears(2057);
        int[] intArray89 = chronology69.get((org.joda.time.ReadablePeriod) period87, 259200000L);
        org.joda.time.DurationField durationField90 = chronology69.weeks();
        org.joda.time.MutablePeriod mutablePeriod91 = new org.joda.time.MutablePeriod(871L, periodType60, chronology69);
        org.joda.time.DateTimeField dateTimeField92 = chronology69.millisOfDay();
        org.joda.time.DurationField durationField93 = chronology69.millis();
        org.joda.time.MutablePeriod mutablePeriod94 = new org.joda.time.MutablePeriod((long) 639, periodType15, chronology69);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(durationFieldTypeArray13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1970-01-01" + "'", str22, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[0, 0, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 8 + "'", int56 == 8);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(durationFieldTypeArray59);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "1970-01-01" + "'", str66, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(mutableDateTime77);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertNotNull(period87);
        org.junit.Assert.assertNotNull(intArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray89), "[0, 0, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(durationField90);
        org.junit.Assert.assertNotNull(dateTimeField92);
        org.junit.Assert.assertNotNull(durationField93);
    }

    @Test
    public void test14369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14369");
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("1970-01-01");
        org.joda.time.LocalDate localDate3 = localDate1.withWeekyear((int) (byte) 10);
        org.joda.time.LocalDate.Property property4 = localDate3.year();
        org.joda.time.LocalDate localDate6 = localDate3.minusMonths(882);
        org.joda.time.DateMidnight dateMidnight7 = localDate3.toDateMidnight();
        org.joda.time.LocalDate.Property property8 = localDate3.yearOfEra();
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test14370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14370");
        java.util.Date date3 = new java.util.Date(902, (int) (byte) -1, 15);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.fromDateFields(date3);
        int int5 = date3.getMinutes();
        long long6 = date3.getTime();
        date3.setDate(2012);
        org.junit.Assert.assertEquals(date3.toString(), "Mon Jun 04 00:00:00 GMT 2807");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 26253936000000L + "'", long6 == 26253936000000L);
    }

    @Test
    public void test14371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14371");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        java.lang.String str3 = localDate2.toString();
        org.joda.time.LocalDate localDate5 = localDate2.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology6 = localDate5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DurationField durationField8 = chronology6.seconds();
        long long11 = durationField8.getValueAsLong((long) 53634384, (long) 53626727);
        long long13 = durationField8.getValueAsLong((long) 53651369);
        long long16 = durationField8.subtract(32441870358104406L, 53905922L);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01" + "'", str3, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 53634L + "'", long11 == 53634L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 53651L + "'", long13 == 53651L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 32441816452182406L + "'", long16 == 32441816452182406L);
    }

    @Test
    public void test14372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14372");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((java.lang.Object) periodType0, dateTimeZone2);
        int int4 = localDateTime3.getDayOfMonth();
        int int5 = localDateTime3.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.millisOfSecond();
        int int7 = localDateTime3.getEra();
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.era();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime3.minusSeconds((int) 'x');
        org.joda.time.LocalDateTime.Property property11 = localDateTime3.weekyear();
        org.joda.time.LocalDateTime localDateTime12 = property11.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withYear(833);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 21389025 + "'", int5 == 21389025);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test14373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14373");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(53659001, 528, 53907416);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53659001 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14374");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = mutableDateTime1.copy();
        mutableDateTime1.addMinutes(0);
        mutableDateTime1.setSecondOfDay(21);
        int int7 = mutableDateTime1.getDayOfMonth();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime9.copy();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        mutableDateTime10.setZone(dateTimeZone11);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime10.minuteOfDay();
        int int14 = mutableDateTime10.getSecondOfMinute();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = mutableDateTime16.copy();
        mutableDateTime16.addMinutes(0);
        java.lang.String str20 = mutableDateTime16.toString();
        int int21 = mutableDateTime16.getYearOfEra();
        org.joda.time.Chronology chronology22 = mutableDateTime16.getChronology();
        org.joda.time.YearMonthDay yearMonthDay23 = new org.joda.time.YearMonthDay(chronology22);
        mutableDateTime10.setChronology(chronology22);
        org.joda.time.DateTime dateTime25 = mutableDateTime1.toDateTime(chronology22);
        org.joda.time.DateTimeField dateTimeField26 = chronology22.secondOfDay();
        long long28 = dateTimeField26.roundHalfEven((long) 799);
        org.junit.Assert.assertNotNull(mutableDateTime2);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 22 + "'", int7 == 22);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 29 + "'", int14 == 29);
        org.junit.Assert.assertNotNull(mutableDateTime17);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-22T05:56:29.042+14:53:39.988" + "'", str20, "2022-02-22T05:56:29.042+14:53:39.988");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeField26);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1012L + "'", long28 == 1012L);
    }

    @Test
    public void test14375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14375");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("4470113-04-01");
        java.util.Locale locale4 = new java.util.Locale("UTC", "2022-02-21T14:53:49.549Z");
        java.lang.String str5 = locale4.getDisplayName();
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone1, locale4);
        boolean boolean7 = calendar6.isLenient();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertEquals(locale4.toString(), "utc_2022-02-21T14:53:49.549Z");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "utc (2022-02-21T14:53:49.549Z)" + "'", str5, "utc (2022-02-21T14:53:49.549Z)");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1645455769068,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=49,MILLISECOND=68,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test14376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14376");
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(readableDuration9, readableInstant10, periodType11);
        mutablePeriod12.addYears((int) (byte) 0);
        int int15 = mutablePeriod12.getMonths();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(readableDuration16, readableInstant17, periodType18);
        org.joda.time.ReadableDuration readableDuration20 = null;
        mutablePeriod19.add(readableDuration20);
        mutablePeriod19.addMonths((int) '#');
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) (short) 1, chronology25);
        int int27 = localDate26.getDayOfYear();
        org.joda.time.LocalTime localTime28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = localDate26.toDateTime(localTime28, dateTimeZone29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = localDate26.toDateMidnight(dateTimeZone31);
        org.joda.time.DateMidnight.Property property33 = dateMidnight32.yearOfEra();
        int int34 = dateMidnight32.getMinuteOfHour();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((long) (byte) 100, chronology36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(chronology38);
        org.joda.time.MutableDateTime mutableDateTime40 = mutableDateTime39.copy();
        org.joda.time.Duration duration41 = period37.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime40);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight32.plus((org.joda.time.ReadableDuration) duration41);
        mutablePeriod19.add((org.joda.time.ReadableDuration) duration41);
        mutablePeriod12.setPeriod((org.joda.time.ReadableDuration) duration41);
        org.joda.time.MutablePeriod mutablePeriod45 = mutablePeriod12.copy();
        org.joda.time.PeriodType periodType46 = mutablePeriod45.getPeriodType();
        org.joda.time.PeriodType periodType47 = periodType46.withYearsRemoved();
        org.joda.time.PeriodType periodType48 = periodType47.withDaysRemoved();
        org.joda.time.PeriodType periodType49 = periodType48.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod(32441870357727473L, periodType48);
        org.joda.time.PeriodType periodType51 = periodType48.withMinutesRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod(54005368, 53931086, 53986376, 639, 21372291, 53986542, 53625309, 54078948, periodType48);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(mutablePeriod45);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(periodType51);
    }

    @Test
    public void test14377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14377");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale3 = java.util.Locale.PRC;
        java.lang.String str4 = dateTimeZone1.getName((long) 53634467, locale3);
        java.lang.String str6 = dateTimeZone1.getShortName((long) 44730);
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((java.lang.Object) "2022-02-21T14:57:15.495", dateTimeZone1);
        java.lang.String str8 = dateTimeZone1.getID();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+14:53:39.988" + "'", str4, "+14:53:39.988");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+14:53:39.988" + "'", str6, "+14:53:39.988");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+14:53:39.988" + "'", str8, "+14:53:39.988");
    }

    @Test
    public void test14378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14378");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.days();
        org.joda.time.PeriodType periodType3 = periodType2.withMonthsRemoved();
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.time();
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) 53619708);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.hours();
        mutableDateTime6.add(durationFieldType7, (int) (byte) 0);
        int int10 = periodType4.indexOf(durationFieldType7);
        boolean boolean11 = periodType2.isSupported(durationFieldType7);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(chronology12);
        org.joda.time.MutableDateTime mutableDateTime14 = mutableDateTime13.copy();
        mutableDateTime13.addMinutes(0);
        java.lang.String str17 = mutableDateTime13.toString();
        int int18 = mutableDateTime13.getYearOfEra();
        org.joda.time.Chronology chronology19 = mutableDateTime13.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.eras();
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) 53644667, (long) (byte) 100, periodType2, chronology19);
        org.joda.time.DateTimeField dateTimeField22 = chronology19.year();
        org.joda.time.TimeOfDay timeOfDay24 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 53680252);
        org.joda.time.TimeOfDay timeOfDay26 = timeOfDay24.minusMinutes(53792059);
        int int27 = dateTimeField22.getMaximumValue((org.joda.time.ReadablePartial) timeOfDay26);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) (short) 1, chronology31);
        java.lang.String str33 = localDate32.toString();
        org.joda.time.LocalDate localDate35 = localDate32.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology36 = localDate35.getChronology();
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(readableDuration37, readableInstant38, periodType39);
        org.joda.time.ReadableDuration readableDuration41 = null;
        mutablePeriod40.add(readableDuration41);
        mutablePeriod40.addYears((int) (short) 100);
        java.lang.Object obj45 = mutablePeriod40.clone();
        mutablePeriod40.setSeconds(904);
        org.joda.time.LocalDate localDate48 = localDate35.minus((org.joda.time.ReadablePeriod) mutablePeriod40);
        org.joda.time.LocalDate.Property property49 = localDate48.yearOfEra();
        java.util.Locale locale50 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str51 = property49.getAsShortText(locale50);
        // The following exception was thrown during execution in test generation
        try {
            long long52 = dateTimeField22.set(28829L, "18:18:01.124", locale50);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"18:18:01.124\" for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(mutableDateTime14);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-22T05:56:29.105+14:53:39.988" + "'", str17, "2022-02-22T05:56:29.105+14:53:39.988");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 292278993 + "'", int27 == 292278993);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1970-01-01" + "'", str33, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "P100YT904S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "P100YT904S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "P100YT904S");
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "1" + "'", str51, "1");
    }

    @Test
    public void test14379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14379");
        // The following exception was thrown during execution in test generation
        try {
            long long1 = java.util.Date.parse("2022-02-21T14:58:33.622Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14380");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period((long) (byte) 100, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(chronology3);
        org.joda.time.MutableDateTime mutableDateTime5 = mutableDateTime4.copy();
        org.joda.time.Duration duration6 = period2.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime5);
        org.joda.time.Seconds seconds7 = period2.toStandardSeconds();
        org.joda.time.Period period9 = period2.plusYears(0);
        org.joda.time.Period period11 = period2.withHours(53617440);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(readableDuration12, readableInstant13, periodType14);
        org.joda.time.ReadableDuration readableDuration16 = null;
        mutablePeriod15.add(readableDuration16);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(chronology18);
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime19.copy();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        mutableDateTime20.setZone(dateTimeZone21);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime20.minuteOfDay();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTime dateTime27 = dateTime24.withFieldAdded(durationFieldType25, (int) (byte) 0);
        mutableDateTime20.add(durationFieldType25, 8);
        boolean boolean30 = mutablePeriod15.isSupported(durationFieldType25);
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.weeks();
        int int32 = mutablePeriod15.get(durationFieldType31);
        org.joda.time.Period period34 = period2.withField(durationFieldType31, 517);
        int int35 = period34.getMinutes();
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test14381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14381");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        boolean boolean4 = dateTimeFormatter3.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 1);
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone8 = dateMidnight7.getZone();
        boolean boolean10 = dateTimeZone8.isStandardOffset((long) 'a');
        org.joda.time.LocalDate localDate11 = org.joda.time.LocalDate.now(dateTimeZone8);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter6.withZone(dateTimeZone8);
        java.util.Locale locale13 = dateTimeFormatter12.getLocale();
        org.joda.time.Chronology chronology14 = dateTimeFormatter12.getChronolgy();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(readableDuration15, readableInstant16, periodType17);
        int int19 = mutablePeriod18.getMinutes();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) (short) 1, chronology22);
        java.lang.String str24 = localDate23.toString();
        org.joda.time.LocalDate localDate26 = localDate23.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology27 = localDate26.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.clockhourOfDay();
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(chronology27);
        mutablePeriod18.setPeriod((long) 53617649, chronology27);
        org.joda.time.DateTimeField dateTimeField31 = chronology27.era();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter12.withChronology(chronology27);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter32.withPivotYear((java.lang.Integer) 53648497);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) (short) 1, chronology37);
        java.lang.String str39 = localDate38.toString();
        org.joda.time.LocalDate localDate41 = localDate38.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology42 = localDate41.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.yearOfEra();
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType35.getField(chronology42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter34.withChronology(chronology42);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.parse("T15:00:22.121", dateTimeFormatter45);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNull(locale13);
        org.junit.Assert.assertNull(chronology14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1970-01-01" + "'", str24, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1970-01-01" + "'", str39, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
    }

    @Test
    public void test14382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14382");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        java.lang.String str3 = localDate2.toString();
        org.joda.time.LocalDate localDate5 = localDate2.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology6 = localDate5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.clockhourOfDay();
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology6);
        org.joda.time.DateTimeField dateTimeField9 = chronology6.era();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.millisOfSecond();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (short) 1, chronology13);
        java.lang.String str15 = localDate14.toString();
        org.joda.time.LocalDate localDate17 = localDate14.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology18 = localDate17.getChronology();
        org.joda.time.YearMonthDay yearMonthDay19 = new org.joda.time.YearMonthDay((long) (short) 1, chronology18);
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay19.plusMonths(53617719);
        int int22 = yearMonthDay19.getDayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay19.plusDays(22);
        org.joda.time.LocalDate localDate25 = yearMonthDay19.toLocalDate();
        int int26 = dateTimeField10.getMaximumValue((org.joda.time.ReadablePartial) yearMonthDay19);
        java.util.Locale locale29 = new java.util.Locale("UTC", "2022-02-21T14:53:49.549Z");
        java.util.Locale locale32 = new java.util.Locale("UTC", "2022-02-21T14:53:49.549Z");
        java.lang.String str33 = locale32.getCountry();
        java.lang.String str35 = locale32.getExtension('x');
        java.lang.String str36 = locale29.getDisplayScript(locale32);
        java.lang.String str37 = locale32.getDisplayLanguage();
        int int38 = dateTimeField10.getMaximumTextLength(locale32);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01" + "'", str3, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1970-01-01" + "'", str15, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 999 + "'", int26 == 999);
        org.junit.Assert.assertEquals(locale29.toString(), "utc_2022-02-21T14:53:49.549Z");
        org.junit.Assert.assertEquals(locale32.toString(), "utc_2022-02-21T14:53:49.549Z");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022-02-21T14:53:49.549Z" + "'", str33, "2022-02-21T14:53:49.549Z");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "utc" + "'", str37, "utc");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 3 + "'", int38 == 3);
    }

    @Test
    public void test14383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14383");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.withHourOfDay((int) (short) 10);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.hours();
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay1.withFieldAdded(durationFieldType4, 53625645);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay1.plusHours((int) '4');
        org.joda.time.TimeOfDay.Property property9 = timeOfDay1.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay10 = property9.withMaximumValue();
        int int11 = property9.get();
        org.joda.time.DateTimeField dateTimeField12 = property9.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = property9.getFieldType();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property15 = localTime14.minuteOfHour();
        org.joda.time.LocalTime localTime16 = property15.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime18 = localTime16.plusSeconds(53628444);
        org.joda.time.Chronology chronology19 = localTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType13.getField(chronology19);
        org.joda.time.TimeOfDay timeOfDay21 = new org.joda.time.TimeOfDay((long) 20, chronology19);
        org.joda.time.DurationField durationField22 = chronology19.minutes();
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.now(chronology19);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime23.dayOfYear();
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(timeOfDay10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 56 + "'", int11 == 56);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test14384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14384");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone2 = provider0.getZone("Years");
        org.joda.time.DateTimeZone dateTimeZone4 = provider0.getZone("P10Y904M53619708W47DT714H-292275107M-38.905S");
        org.joda.time.DateTimeZone dateTimeZone6 = provider0.getZone("PT0S");
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone dateTimeZone9 = provider0.getZone("2022-02-21T14:59:07.506Z");
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNull(dateTimeZone2);
        org.junit.Assert.assertNull(dateTimeZone4);
        org.junit.Assert.assertNull(dateTimeZone6);
        org.junit.Assert.assertNull(dateTimeZone9);
    }

    @Test
    public void test14385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14385");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 647);
        org.joda.time.Instant instant3 = instant1.withMillis((long) 53790145);
        org.joda.time.Instant instant5 = instant1.minus((long) 53900843);
        org.joda.time.MutableDateTime mutableDateTime6 = instant5.toMutableDateTime();
        int int7 = mutableDateTime6.getDayOfMonth();
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 31 + "'", int7 == 31);
    }

    @Test
    public void test14386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14386");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale locale6 = new java.util.Locale("hi!", "Years", "1970-01-01");
        java.lang.String str7 = locale6.toLanguageTag();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property9 = localTime8.minuteOfHour();
        org.joda.time.LocalTime localTime11 = localTime8.withMillisOfSecond(904);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = localTime8.toDateTimeToday(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusMonths(10);
        org.joda.time.DateTime.Property property16 = dateTime13.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField17 = property16.getField();
        java.util.Locale locale18 = null;
        int int19 = dateTimeField17.getMaximumShortTextLength(locale18);
        java.util.Locale locale20 = java.util.Locale.ITALIAN;
        int int21 = dateTimeField17.getMaximumShortTextLength(locale20);
        java.lang.String str22 = locale6.getDisplayVariant(locale20);
        java.lang.String str25 = nameProvider0.getShortName(locale6, "T14:54:10.579", "gregory");
        java.util.Locale locale26 = java.util.Locale.TAIWAN;
        java.util.Locale locale29 = new java.util.Locale("UTC", "2022-02-21T14:53:49.549Z");
        java.lang.String str30 = locale29.getCountry();
        java.lang.String str32 = locale29.getExtension('x');
        java.lang.String str33 = locale29.getDisplayCountry();
        java.lang.String str34 = locale26.getDisplayLanguage(locale29);
        java.lang.String str37 = nameProvider0.getName(locale26, "14:54:08.577", "14");
        java.lang.String str38 = locale26.getISO3Country();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertEquals(locale6.toString(), "hi!_YEARS_1970-01-01");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "und" + "'", str7, "und");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1970-01-01" + "'", str22, "1970-01-01");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_TW");
        org.junit.Assert.assertEquals(locale29.toString(), "utc_2022-02-21T14:53:49.549Z");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022-02-21T14:53:49.549Z" + "'", str30, "2022-02-21T14:53:49.549Z");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022-02-21T14:53:49.549Z" + "'", str33, "2022-02-21T14:53:49.549Z");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Chinese" + "'", str34, "Chinese");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "TWN" + "'", str38, "TWN");
    }

    @Test
    public void test14387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14387");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusYears((int) (short) 10);
        org.joda.time.DateTime dateTime10 = dateTime6.plus((long) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays(185);
        int int13 = dateTime10.getYearOfEra();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.MutableDateTime mutableDateTime16 = mutableDateTime15.copy();
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone18 = dateMidnight17.getZone();
        mutableDateTime15.setZoneRetainFields(dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(dateTimeZone18);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateMidnight20);
        org.joda.time.Period period23 = period21.withMillis(53752898);
        org.joda.time.Period period25 = period21.withDays(53835495);
        org.joda.time.format.PeriodFormatter periodFormatter26 = null;
        java.lang.String str27 = period21.toString(periodFormatter26);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "P52Y1M2W6DT18H3M30.646S" + "'", str27, "P52Y1M2W6DT18H3M30.646S");
    }

    @Test
    public void test14388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14388");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = mutableDateTime1.copy();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime2.minuteOfDay();
        long long6 = property5.remainder();
        org.joda.time.MutableDateTime mutableDateTime8 = property5.set(842);
        org.joda.time.DateTimeZone dateTimeZone9 = mutableDateTime8.getZone();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime8.setMillisOfSecond(19259000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 19259000 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(property5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 29274L + "'", long6 == 29274L);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
    }

    @Test
    public void test14389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14389");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = localDate2.toDateMidnight(dateTimeZone7);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.yearOfEra();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) (short) 1, chronology11);
        int int13 = localDate12.getDayOfYear();
        org.joda.time.LocalTime localTime14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = localDate12.toDateTime(localTime14, dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = localDate12.toDateMidnight(dateTimeZone17);
        org.joda.time.DateMidnight.Property property19 = dateMidnight18.yearOfEra();
        int int20 = dateMidnight18.getMinuteOfHour();
        org.joda.time.Interval interval21 = dateMidnight18.toInterval();
        org.joda.time.MutableDateTime mutableDateTime22 = dateMidnight18.toMutableDateTime();
        int int23 = dateMidnight8.compareTo((org.joda.time.ReadableInstant) mutableDateTime22);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime22.dayOfMonth();
        int int25 = mutableDateTime22.getWeekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone27 = dateMidnight26.getZone();
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight26.plusYears(53619079);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(chronology30);
        int int32 = mutableDateTime31.getMillisOfSecond();
        boolean boolean33 = dateMidnight26.isEqual((org.joda.time.ReadableInstant) mutableDateTime31);
        boolean boolean34 = dateMidnight26.isAfterNow();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((long) (byte) 100, chronology36);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(chronology38);
        org.joda.time.MutableDateTime mutableDateTime40 = mutableDateTime39.copy();
        org.joda.time.Duration duration41 = period37.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime40);
        int int42 = period37.size();
        org.joda.time.Period period44 = period37.plusHours(53619079);
        org.joda.time.Period period46 = period37.plusWeeks(773);
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight26.withPeriodAdded((org.joda.time.ReadablePeriod) period37, 11);
        int int49 = dateMidnight48.getSecondOfMinute();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Period period52 = new org.joda.time.Period((long) (byte) 100, chronology51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime(chronology53);
        org.joda.time.MutableDateTime mutableDateTime55 = mutableDateTime54.copy();
        org.joda.time.Duration duration56 = period52.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime55);
        org.joda.time.Period period58 = period52.plusDays((int) (byte) 10);
        int int59 = period58.getHours();
        org.joda.time.Period period61 = period58.plusMonths(2);
        org.joda.time.PeriodType periodType62 = period58.getPeriodType();
        org.joda.time.PeriodType periodType63 = periodType62.withDaysRemoved();
        org.joda.time.Period period64 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime22, (org.joda.time.ReadableInstant) dateMidnight48, periodType63);
        boolean boolean66 = dateMidnight48.isAfter(1698200027881796000L);
        org.joda.time.DateMidnight.Property property67 = dateMidnight48.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight69 = property67.setCopy("23 Feb 2022 02:55:40 GMT");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"23 Feb 2022 02:55:40 GMT\" for dayOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateMidnight29);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 288 + "'", int32 == 288);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 8 + "'", int42 == 8);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(property67);
    }

    @Test
    public void test14390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14390");
        org.joda.time.Period period1 = org.joda.time.Period.millis(53795616);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test14391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14391");
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(readableDuration3, readableInstant4, periodType5);
        mutablePeriod6.addYears((int) (byte) 0);
        int int9 = mutablePeriod6.getMonths();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(readableDuration10, readableInstant11, periodType12);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutablePeriod13.add(readableDuration14);
        mutablePeriod13.addMonths((int) '#');
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) (short) 1, chronology19);
        int int21 = localDate20.getDayOfYear();
        org.joda.time.LocalTime localTime22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateTime dateTime24 = localDate20.toDateTime(localTime22, dateTimeZone23);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = localDate20.toDateMidnight(dateTimeZone25);
        org.joda.time.DateMidnight.Property property27 = dateMidnight26.yearOfEra();
        int int28 = dateMidnight26.getMinuteOfHour();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) (byte) 100, chronology30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(chronology32);
        org.joda.time.MutableDateTime mutableDateTime34 = mutableDateTime33.copy();
        org.joda.time.Duration duration35 = period31.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime34);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight26.plus((org.joda.time.ReadableDuration) duration35);
        mutablePeriod13.add((org.joda.time.ReadableDuration) duration35);
        mutablePeriod6.setPeriod((org.joda.time.ReadableDuration) duration35);
        org.joda.time.MutablePeriod mutablePeriod39 = mutablePeriod6.copy();
        org.joda.time.PeriodType periodType40 = mutablePeriod39.getPeriodType();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((long) (short) 1, chronology43);
        java.lang.String str45 = localDate44.toString();
        org.joda.time.LocalDate localDate47 = localDate44.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology48 = localDate47.getChronology();
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime(533L, chronology48);
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod(0L, (long) 53619770, periodType40, chronology48);
        org.joda.time.PeriodType periodType51 = periodType40.withDaysRemoved();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.Period period53 = new org.joda.time.Period(12315L, periodType40, chronology52);
        org.joda.time.PeriodType periodType54 = periodType40.withYearsRemoved();
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(mutablePeriod39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1970-01-01" + "'", str45, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(periodType54);
    }

    @Test
    public void test14392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14392");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.FRENCH;
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.util.Locale locale7 = java.util.Locale.FRENCH;
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str11 = locale9.getExtension('a');
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.util.Locale[] localeArray13 = new java.util.Locale[] { locale3, locale4, locale5, locale6, locale7, locale8, locale9, locale12 };
        java.util.ArrayList<java.util.Locale> localeList14 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList14, localeArray13);
        java.util.List<java.util.Locale> localeList16 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList14);
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet18 = locale17.getUnicodeLocaleKeys();
        java.util.stream.Stream<java.lang.String> strStream19 = strSet18.parallelStream();
        java.util.Locale locale22 = new java.util.Locale("UTC", "2022-02-21T14:53:49.549Z");
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleAttributes();
        boolean boolean24 = strSet23.isEmpty();
        boolean boolean25 = strSet18.removeAll((java.util.Collection<java.lang.String>) strSet23);
        java.lang.String str26 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet18);
        java.lang.Object[] objArray27 = strSet18.toArray();
        strSet18.clear();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertNotNull(localeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(localeList16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(strStream19);
        org.junit.Assert.assertEquals(locale22.toString(), "utc_2022-02-21T14:53:49.549Z");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[]");
    }

    @Test
    public void test14393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14393");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((java.lang.Object) periodType0, dateTimeZone2);
        int int4 = localDateTime3.getDayOfMonth();
        int int5 = localDateTime3.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.millisOfSecond();
        int int7 = localDateTime3.getEra();
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.era();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime3.plusYears(0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusMonths(736);
        int int15 = localDateTime14.getDayOfYear();
        org.joda.time.LocalDateTime.Property property16 = localDateTime14.minuteOfHour();
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 21389390 + "'", int5 == 21389390);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 172 + "'", int15 == 172);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test14394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14394");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) (short) 1, chronology2);
        java.lang.String str4 = localDate3.toString();
        org.joda.time.LocalDate localDate6 = localDate3.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology7 = localDate6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay((long) (short) 1, chronology7);
        int int9 = yearMonthDay8.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay8.withPeriodAdded(readablePeriod10, 552);
        org.joda.time.YearMonthDay.Property property13 = yearMonthDay12.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField14 = property13.getField();
        java.lang.String str15 = property13.toString();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Property[dayOfMonth]" + "'", str15, "Property[dayOfMonth]");
    }

    @Test
    public void test14395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14395");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property2 = localTime1.minuteOfHour();
        org.joda.time.LocalTime localTime4 = localTime1.withMillisOfSecond(904);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localTime1.toDateTimeToday(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusMonths(10);
        org.joda.time.DateTime.Property property9 = dateTime6.minuteOfDay();
        org.joda.time.DateTime dateTime10 = property9.getDateTime();
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfWeek();
        org.joda.time.DateTime dateTime13 = dateTime10.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime15 = dateTime13.minusWeeks(53649515);
        org.joda.time.Duration duration16 = period0.toDurationFrom((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(chronology17);
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime18.copy();
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone21 = dateMidnight20.getZone();
        mutableDateTime18.setZoneRetainFields(dateTimeZone21);
        org.joda.time.LocalTime localTime23 = org.joda.time.LocalTime.now(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone21);
        java.util.Locale.Builder builder25 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder27 = builder25.setLanguage("");
        java.util.Locale locale28 = builder25.build();
        java.util.Calendar calendar29 = dateTime24.toCalendar(locale28);
        java.util.Calendar calendar30 = dateTime13.toCalendar(locale28);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime(chronology31);
        int int33 = mutableDateTime32.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime32.yearOfCentury();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((long) (byte) 100, chronology36);
        org.joda.time.Seconds seconds38 = period37.toStandardSeconds();
        int int39 = period37.getMonths();
        int int40 = period37.getHours();
        org.joda.time.Period period42 = period37.plusSeconds(53619770);
        mutableDateTime32.add((org.joda.time.ReadablePeriod) period42);
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime32.dayOfYear();
        boolean boolean45 = calendar30.before((java.lang.Object) property44);
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(calendar29);
// flaky:         org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=1645455769867,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+14:53:39.988,offset=53619988,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=5,HOUR_OF_DAY=5,MINUTE=56,SECOND=29,MILLISECOND=855,ZONE_OFFSET=53619988,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar30);
// flaky:         org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=1586790169867,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+14:53:39.988,offset=53619988,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2020,MONTH=3,WEEK_OF_YEAR=16,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=105,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=5,HOUR_OF_DAY=5,MINUTE=56,SECOND=29,MILLISECOND=855,ZONE_OFFSET=53619988,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 855 + "'", int33 == 855);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(seconds38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test14396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14396");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) (short) 1, chronology2);
        java.lang.String str4 = localDate3.toString();
        org.joda.time.LocalDate localDate6 = localDate3.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology7 = localDate6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.clockhourOfDay();
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.DateTimeField dateTimeField10 = chronology7.era();
        org.joda.time.DurationField durationField11 = chronology7.hours();
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(chronology7);
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) 185, chronology7);
        org.joda.time.DateTimeField dateTimeField14 = chronology7.centuryOfEra();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test14397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14397");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.minuteOfDay();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.year();
        org.joda.time.MutableDateTime mutableDateTime4 = property3.roundHalfEven();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.centuryOfEra();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime4.centuryOfEra();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
    }

    @Test
    public void test14398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14398");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.withHourOfDay((int) (short) 10);
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.minusMinutes((int) (short) 100);
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay2.plusMillis(0);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.minusHours(53660145);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.plusMillis(53638166);
        int int11 = timeOfDay10.size();
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
    }

    @Test
    public void test14399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14399");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.withHourOfDay((int) (short) 10);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.hours();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay0.withFieldAdded(durationFieldType3, 53625645);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay0.plusHours((int) '4');
        org.joda.time.TimeOfDay.Property property8 = timeOfDay0.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay9 = property8.withMaximumValue();
        java.lang.String str10 = property8.getAsShortText();
        org.joda.time.TimeOfDay timeOfDay12 = property8.addNoWrapToCopy(503);
        org.joda.time.DurationField durationField13 = property8.getDurationField();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) (short) 1, chronology16);
        java.lang.String str18 = localDate17.toString();
        org.joda.time.LocalDate localDate20 = localDate17.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology21 = localDate20.getChronology();
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay((long) (short) 1, chronology21);
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay22.plusMonths(53617719);
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone26 = dateMidnight25.getZone();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) (short) 1, chronology28);
        java.lang.String str30 = localDate29.toString();
        org.joda.time.LocalDate localDate32 = localDate29.withYearOfEra((int) (byte) 100);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight25.withFields((org.joda.time.ReadablePartial) localDate32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight25.withField(dateTimeFieldType34, 842);
        org.joda.time.YearMonthDay.Property property37 = yearMonthDay22.property(dateTimeFieldType34);
        org.joda.time.YearMonthDay.Property property38 = yearMonthDay22.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay40 = property38.addToCopy(53629078);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime(chronology41);
        org.joda.time.MutableDateTime mutableDateTime43 = mutableDateTime42.copy();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        mutableDateTime43.setZone(dateTimeZone44);
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime43.minuteOfDay();
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime();
        org.joda.time.DurationFieldType durationFieldType48 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTime dateTime50 = dateTime47.withFieldAdded(durationFieldType48, (int) (byte) 0);
        mutableDateTime43.add(durationFieldType48, 8);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime55 = dateTime53.withWeekyear((int) (short) 100);
        int int56 = mutableDateTime43.compareTo((org.joda.time.ReadableInstant) dateTime53);
        int int57 = property38.compareTo((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.YearMonthDay yearMonthDay58 = property38.getYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay59 = property38.withMinimumValue();
        org.joda.time.YearMonthDay.Property property60 = yearMonthDay59.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            int int61 = property8.compareTo((org.joda.time.ReadablePartial) yearMonthDay59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'minuteOfHour' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(timeOfDay9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "56" + "'", str10, "56");
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1970-01-01" + "'", str18, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1970-01-01" + "'", str30, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(yearMonthDay40);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay58);
        org.junit.Assert.assertNotNull(yearMonthDay59);
        org.junit.Assert.assertNotNull(property60);
    }

    @Test
    public void test14400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14400");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((java.lang.Object) periodType0, dateTimeZone2);
        int int4 = localDateTime3.getDayOfMonth();
        int int5 = localDateTime3.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.millisOfSecond();
        int int7 = localDateTime3.getEra();
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.era();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime3.withMillisOfDay((int) '#');
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withWeekOfWeekyear((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withCenturyOfEra(553);
        int int15 = localDateTime14.getWeekOfWeekyear();
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 21390000 + "'", int5 == 21390000);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test14401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14401");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setLenient(false);
        java.util.Calendar.Builder builder7 = builder0.setTimeOfDay((int) ' ', 53617440, 3, 53617649);
        java.util.Calendar.Builder builder12 = builder7.setTimeOfDay(53626727, 0, 53628444, (int) ' ');
        java.util.Calendar.Builder builder14 = builder7.setLenient(false);
        java.util.Calendar.Builder builder15 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder17 = builder15.setLenient(false);
        java.util.TimeZone timeZone19 = java.util.TimeZone.getTimeZone("2022-02-21T14:54:05.059Z");
        java.util.Calendar.Builder builder20 = builder17.setTimeZone(timeZone19);
        java.util.TimeZone timeZone21 = java.util.TimeZone.getDefault();
        java.util.Calendar.Builder builder22 = builder20.setTimeZone(timeZone21);
        java.util.Calendar.Builder builder23 = builder14.setTimeZone(timeZone21);
        java.util.Locale locale27 = new java.util.Locale("hi!", "Years", "1970-01-01");
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(timeZone21, locale27);
        java.util.TimeZone timeZone30 = java.util.TimeZone.getTimeZone("2022-02-21T14:54:05.059Z");
        timeZone30.setID("1970-01-01");
        boolean boolean33 = timeZone30.observesDaylightTime();
        boolean boolean34 = timeZone30.observesDaylightTime();
        org.joda.time.format.DateTimePrinter dateTimePrinter35 = null;
        org.joda.time.format.DateTimeParser dateTimeParser36 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter35, dateTimeParser36);
        org.joda.time.Chronology chronology38 = dateTimeFormatter37.getChronolgy();
        boolean boolean39 = dateTimeFormatter37.isOffsetParsed();
        java.util.Locale locale40 = java.util.Locale.TAIWAN;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter37.withLocale(locale40);
        java.util.Calendar calendar42 = java.util.Calendar.getInstance(timeZone30, locale40);
        calendar28.setTimeZone(timeZone30);
        calendar28.setTimeInMillis((-27422462L));
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertEquals(locale27.toString(), "hi!_YEARS_1970-01-01");
        org.junit.Assert.assertNotNull(calendar28);
        org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=-27422462,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"1970-01-01\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=4,HOUR_OF_DAY=16,MINUTE=22,SECOND=57,MILLISECOND=538,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone30);
        org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(chronology38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertNotNull(calendar42);
// flaky:         org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=1645455770024,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"1970-01-01\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=50,MILLISECOND=24,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test14402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14402");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeParser dateTimeParser3 = dateTimeFormatter2.getParser();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) 1, chronology5);
        java.lang.String str7 = localDate6.toString();
        org.joda.time.LocalDate localDate9 = localDate6.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology10 = localDate9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.clockhourOfDay();
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(chronology10);
        org.joda.time.DateTimeField dateTimeField13 = chronology10.era();
        org.joda.time.DateTimeField dateTimeField14 = chronology10.millisOfSecond();
        org.joda.time.DurationField durationField15 = chronology10.years();
        org.joda.time.LocalDate localDate16 = org.joda.time.LocalDate.now(chronology10);
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now(chronology10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter2.withChronology(chronology10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter2.withDefaultYear(3277069);
        org.joda.time.DateTimeZone dateTimeZone21 = dateTimeFormatter2.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime23 = dateTimeFormatter2.parseDateTime("marted\354");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeParser3);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01" + "'", str7, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNull(dateTimeZone21);
    }

    @Test
    public void test14403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14403");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.withHourOfDay((int) (short) 10);
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.minusMinutes((int) (short) 100);
        org.joda.time.LocalTime localTime5 = timeOfDay2.toLocalTime();
        org.joda.time.LocalTime localTime7 = localTime5.minusMinutes(53640490);
        int int8 = localTime5.getHourOfDay();
        int int9 = localTime5.getMinuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            int int11 = localTime5.getValue(53664756);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 53664756");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 56 + "'", int9 == 56);
    }

    @Test
    public void test14404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14404");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusYears((int) (short) 10);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(chronology9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime10.copy();
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone13 = dateMidnight12.getZone();
        mutableDateTime10.setZoneRetainFields(dateTimeZone13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((java.lang.Object) dateTime8, dateTimeZone13);
        org.joda.time.YearMonthDay yearMonthDay16 = dateTime8.toYearMonthDay();
        java.lang.String str17 = yearMonthDay16.toString();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay16.withPeriodAdded(readablePeriod18, 53677506);
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay20.minusMonths(53656402);
        org.joda.time.TimeOfDay timeOfDay23 = null;
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(chronology24);
        org.joda.time.MutableDateTime mutableDateTime26 = mutableDateTime25.copy();
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone28 = dateMidnight27.getZone();
        mutableDateTime25.setZoneRetainFields(dateTimeZone28);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone28);
        int int32 = dateTimeZone28.getStandardOffset((long) 465);
        long long34 = dateTimeZone28.nextTransition((long) (byte) 1);
        org.joda.time.DateTime dateTime35 = yearMonthDay22.toDateTime(timeOfDay23, dateTimeZone28);
        org.joda.time.YearMonthDay yearMonthDay37 = yearMonthDay22.plusYears(534);
        org.joda.time.YearMonthDay.Property property38 = yearMonthDay22.monthOfYear();
        java.util.Locale locale40 = new java.util.Locale("2022-02-21T14:55:43.426");
        int int41 = property38.getMaximumShortTextLength(locale40);
        org.joda.time.YearMonthDay yearMonthDay42 = property38.withMaximumValue();
        java.lang.String str43 = property38.getName();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1980-01-01" + "'", str17, "1980-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 53619988 + "'", int32 == 53619988);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertEquals(locale40.toString(), "2022-02-21t14:55:43.426");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "monthOfYear" + "'", str43, "monthOfYear");
    }

    @Test
    public void test14405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14405");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = mutableDateTime1.copy();
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone4 = dateMidnight3.getZone();
        mutableDateTime1.setZoneRetainFields(dateTimeZone4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone4);
        org.joda.time.DateTime dateTime8 = dateTime6.minusWeeks(736);
        org.joda.time.DateTime dateTime10 = dateTime6.plus((-59011459199999L));
        org.joda.time.DateTime dateTime11 = dateTime6.toDateTime();
        org.joda.time.DateTime.Property property12 = dateTime6.dayOfWeek();
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test14406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14406");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period((long) (byte) 100, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(chronology3);
        org.joda.time.MutableDateTime mutableDateTime5 = mutableDateTime4.copy();
        org.joda.time.Duration duration6 = period2.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.MutableDateTime mutableDateTime9 = mutableDateTime8.copy();
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.years();
        java.lang.String str11 = periodType10.getName();
        org.joda.time.PeriodType periodType12 = periodType10.withMonthsRemoved();
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime5, (org.joda.time.ReadableInstant) mutableDateTime9, periodType10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) (short) 1, chronology15);
        int int17 = localDate16.getDayOfYear();
        org.joda.time.LocalTime localTime18 = null;
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = localDate16.toDateTime(localTime18, dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = localDate16.toDateMidnight(dateTimeZone21);
        org.joda.time.LocalDate localDate24 = localDate16.withYear(53619770);
        java.lang.String str25 = localDate16.toString();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.MutableDateTime mutableDateTime28 = mutableDateTime27.copy();
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone30 = dateMidnight29.getZone();
        mutableDateTime27.setZoneRetainFields(dateTimeZone30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(chronology32);
        org.joda.time.MutableDateTime mutableDateTime34 = mutableDateTime33.copy();
        mutableDateTime33.addMinutes(0);
        mutableDateTime33.setSecondOfDay(21);
        org.joda.time.Chronology chronology39 = null;
        mutableDateTime33.setChronology(chronology39);
        mutableDateTime33.setMinuteOfHour((int) (short) 0);
        mutableDateTime33.addMinutes((int) (byte) 1);
        int int45 = dateTimeZone30.getOffset((org.joda.time.ReadableInstant) mutableDateTime33);
        org.joda.time.DateMidnight dateMidnight46 = localDate16.toDateMidnight(dateTimeZone30);
        org.joda.time.MutableDateTime mutableDateTime47 = mutableDateTime5.toMutableDateTime(dateTimeZone30);
        mutableDateTime47.setDate(32441870357764290L);
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime47.millisOfDay();
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Years" + "'", str11, "Years");
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1970-01-01" + "'", str25, "1970-01-01");
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(mutableDateTime34);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 53619988 + "'", int45 == 53619988);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertNotNull(property50);
    }

    @Test
    public void test14407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14407");
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.days();
        org.joda.time.PeriodType periodType5 = periodType4.withMonthsRemoved();
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.time();
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) 53619708);
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.hours();
        mutableDateTime8.add(durationFieldType9, (int) (byte) 0);
        int int12 = periodType6.indexOf(durationFieldType9);
        boolean boolean13 = periodType4.isSupported(durationFieldType9);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.MutableDateTime mutableDateTime16 = mutableDateTime15.copy();
        mutableDateTime15.addMinutes(0);
        java.lang.String str19 = mutableDateTime15.toString();
        int int20 = mutableDateTime15.getYearOfEra();
        org.joda.time.Chronology chronology21 = mutableDateTime15.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.eras();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) 53644667, (long) (byte) 100, periodType4, chronology21);
        org.joda.time.Period period24 = new org.joda.time.Period(1695093384355200012L, (long) 631, chronology21);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(chronology25);
        org.joda.time.MutableDateTime mutableDateTime27 = mutableDateTime26.copy();
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(readableDuration28, readableInstant29, periodType30);
        mutablePeriod31.addYears((int) (byte) 0);
        int int34 = mutablePeriod31.getMonths();
        mutablePeriod31.clear();
        mutableDateTime26.add((org.joda.time.ReadablePeriod) mutablePeriod31);
        int int37 = mutablePeriod31.getMillis();
        java.lang.Object obj38 = mutablePeriod31.clone();
        int[] intArray41 = chronology21.get((org.joda.time.ReadablePeriod) mutablePeriod31, (long) 54000387, 140399724L);
        org.joda.time.LocalDate localDate43 = org.joda.time.LocalDate.parse("1970-01-01");
        org.joda.time.LocalDate localDate45 = localDate43.withWeekyear((int) (byte) 10);
        int int46 = localDate45.getYear();
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.years();
        java.lang.String str48 = periodType47.getName();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(periodType47);
        org.joda.time.PeriodType periodType50 = periodType47.withYearsRemoved();
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property52 = localTime51.minuteOfHour();
        org.joda.time.LocalTime localTime53 = property52.roundFloorCopy();
        org.joda.time.LocalTime localTime54 = property52.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime56 = property52.addNoWrapToCopy((int) 'a');
        boolean boolean57 = periodType47.equals((java.lang.Object) property52);
        org.joda.time.LocalTime localTime58 = property52.roundHalfCeilingCopy();
        int[] intArray59 = localTime58.getValues();
        // The following exception was thrown during execution in test generation
        try {
            chronology21.validate((org.joda.time.ReadablePartial) localDate45, intArray59);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 57 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(mutableDateTime16);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-22T05:56:30.105+14:53:39.988" + "'", str19, "2022-02-22T05:56:30.105+14:53:39.988");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "PT0S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "PT0S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "PT0S");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[0, 0, 0, 0, 23, 59, 59, 337]");
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 10 + "'", int46 == 10);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Years" + "'", str48, "Years");
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(localTime58);
        org.junit.Assert.assertNotNull(intArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[5, 57, 0, 0]");
    }

    @Test
    public void test14408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14408");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        java.lang.String str3 = localDate2.toString();
        org.joda.time.LocalDate.Property property4 = localDate2.year();
        org.joda.time.LocalDate.Property property5 = localDate2.weekOfWeekyear();
        org.joda.time.LocalDate localDate7 = localDate2.plusWeeks((int) 'u');
        org.joda.time.LocalDate.Property property8 = localDate2.yearOfCentury();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) (byte) 100, chronology10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(chronology12);
        org.joda.time.MutableDateTime mutableDateTime14 = mutableDateTime13.copy();
        org.joda.time.Duration duration15 = period11.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime14);
        org.joda.time.Seconds seconds16 = period11.toStandardSeconds();
        org.joda.time.Period period18 = period11.plusYears(0);
        org.joda.time.Period period20 = period11.withHours(53617440);
        org.joda.time.Period period22 = period20.plusDays(53620972);
        org.joda.time.LocalDate localDate23 = localDate2.plus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.LocalDate.Property property24 = localDate2.yearOfCentury();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01" + "'", str3, "1970-01-01");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(seconds16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test14409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14409");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        java.util.Date date1 = dateTime0.toDate();
        int int2 = date1.getTimezoneOffset();
        date1.setHours(53866329);
        int int5 = date1.getMinutes();
        org.junit.Assert.assertNotNull(date1);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Sun Mar 08 09:02:50 GMT 8167");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
    }

    @Test
    public void test14410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14410");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        int int1 = localTime0.getHourOfDay();
        org.joda.time.LocalTime localTime3 = localTime0.plusHours((int) (short) 1);
        org.joda.time.LocalTime localTime5 = localTime0.minusMillis(718);
        org.joda.time.LocalTime.Property property6 = localTime0.millisOfSecond();
        org.joda.time.LocalTime localTime8 = property6.addCopy(53698857);
        org.joda.time.LocalTime localTime10 = localTime8.plusMinutes(523);
        org.joda.time.LocalTime localTime12 = localTime8.minusMinutes(2020);
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
    }

    @Test
    public void test14411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14411");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int1 = calendar0.getWeekYear();
        calendar0.setTimeInMillis((long) 199);
        org.joda.time.LocalTime localTime4 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        org.joda.time.TimeOfDay timeOfDay5 = org.joda.time.TimeOfDay.fromCalendarFields(calendar0);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.minusMillis(486);
        java.lang.String str8 = timeOfDay7.toString();
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=199,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=199,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 2022 + "'", int1 == 2022);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "T23:59:59.713" + "'", str8, "T23:59:59.713");
    }

    @Test
    public void test14412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14412");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((java.lang.Object) periodType0, dateTimeZone2);
        int int4 = localDateTime3.getDayOfMonth();
        int int5 = localDateTime3.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.millisOfSecond();
        int int7 = localDateTime3.getEra();
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.era();
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(periodType9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((java.lang.Object) periodType9, dateTimeZone11);
        int int13 = localDateTime12.getDayOfMonth();
        int int14 = localDateTime12.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.millisOfSecond();
        int int16 = localDateTime12.getEra();
        org.joda.time.LocalDateTime.Property property17 = localDateTime12.era();
        org.joda.time.LocalDateTime.Property property18 = localDateTime12.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.weekyear();
        int int20 = localDateTime12.get(dateTimeFieldType19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime3.property(dateTimeFieldType19);
        org.joda.time.LocalDateTime localDateTime22 = property21.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime23 = property21.withMaximumValue();
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 21390170 + "'", int5 == 21390170);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 22 + "'", int13 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 21390170 + "'", int14 == 21390170);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
    }

    @Test
    public void test14413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14413");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((java.lang.Object) periodType0, dateTimeZone2);
        int int4 = localDateTime3.getDayOfMonth();
        int int5 = localDateTime3.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.millisOfSecond();
        int int7 = localDateTime3.getEra();
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.era();
        org.joda.time.LocalDateTime.Property property9 = localDateTime3.dayOfMonth();
        int int10 = localDateTime3.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property11 = localDateTime3.monthOfYear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime3.plusWeeks(1439);
        int int14 = localDateTime3.getWeekyear();
        org.joda.time.LocalDateTime.Property property15 = localDateTime3.weekyear();
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 21390185 + "'", int5 == 21390185);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test14414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14414");
        org.joda.time.format.PeriodFormatter periodFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod2 = org.joda.time.MutablePeriod.parse("CA", periodFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14415");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime1 = timeOfDay0.toDateTimeToday();
        org.joda.time.DateTime dateTime3 = dateTime1.withMillisOfSecond(409);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(12);
        org.joda.time.DateTime dateTime6 = dateTime3.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property8 = localTime7.minuteOfHour();
        org.joda.time.LocalTime localTime10 = localTime7.withMillisOfSecond(904);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = localTime7.toDateTimeToday(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.plusMonths(10);
        org.joda.time.DateTime.Property property15 = dateTime12.minuteOfDay();
        org.joda.time.DateTime.Property property16 = dateTime12.year();
        org.joda.time.DateTime dateTime18 = dateTime12.withWeekyear((-144832));
        boolean boolean19 = dateTime18.isEqualNow();
        org.joda.time.DateTime dateTime21 = dateTime18.minusWeeks(2);
        boolean boolean22 = dateTime3.equals((java.lang.Object) dateTime18);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(readableDuration23, readableInstant24, periodType25);
        mutablePeriod26.addYears((int) (byte) 0);
        int int29 = mutablePeriod26.getMonths();
        mutablePeriod26.setWeeks(6);
        mutablePeriod26.setMonths((int) '#');
        org.joda.time.DateTime dateTime35 = dateTime3.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod26, 53695081);
        boolean boolean37 = dateTime3.isEqual((long) 992);
        org.joda.time.DateTime dateTime39 = dateTime3.plusMinutes(53890464);
        org.joda.time.DateTime dateTime41 = dateTime3.minusMillis(4470116);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
    }

    @Test
    public void test14416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14416");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setFirstDayOfWeek(53620623);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        int int4 = calendar0.getWeeksInWeekYear();
        long long5 = calendar0.getTimeInMillis();
        int int6 = calendar0.getFirstDayOfWeek();
        int int7 = calendar0.getWeekYear();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645455770235,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=53620623,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=50,MILLISECOND=235,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1645455770235L + "'", long5 == 1645455770235L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53620623 + "'", int6 == 53620623);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
    }

    @Test
    public void test14417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14417");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        java.lang.String str3 = localDate2.toString();
        org.joda.time.LocalDate localDate5 = localDate2.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology6 = localDate5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.yearOfEra();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now(chronology6);
        org.joda.time.DurationField durationField10 = chronology6.weeks();
        long long13 = durationField10.getMillis(898, 1000L);
        int int15 = durationField10.getValue((-39233271167L));
        long long18 = durationField10.add(0L, 53933316L);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01" + "'", str3, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 543110400000L + "'", long13 == 543110400000L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-64) + "'", int15 == (-64));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 32618869516800000L + "'", long18 == 32618869516800000L);
    }

    @Test
    public void test14418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14418");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 650);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setTime(53626705, 450, 53680252, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53626705 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14419");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalDate.Property property4 = localDate2.weekOfWeekyear();
        org.joda.time.LocalDate localDate5 = property4.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate7 = property4.addToCopy(2022);
        org.joda.time.DateTimeField dateTimeField8 = property4.getField();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test14420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14420");
        org.joda.time.Period period1 = org.joda.time.Period.weeks((int) '4');
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.years();
        java.lang.String str3 = periodType2.getName();
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(periodType2);
        org.joda.time.Period period5 = period1.plus((org.joda.time.ReadablePeriod) mutablePeriod4);
        org.joda.time.Period period6 = period1.negated();
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.hours();
        org.joda.time.Period period9 = period6.withFieldAdded(durationFieldType7, 53646242);
        org.joda.time.MutablePeriod mutablePeriod10 = period9.toMutablePeriod();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) (byte) 100, chronology12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.MutableDateTime mutableDateTime16 = mutableDateTime15.copy();
        org.joda.time.Duration duration17 = period13.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime16);
        org.joda.time.Period period19 = period13.plusDays((int) (byte) 10);
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property21 = localTime20.minuteOfHour();
        org.joda.time.LocalTime localTime23 = localTime20.withMillisOfSecond(904);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = localTime20.toDateTimeToday(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.plusMonths(10);
        org.joda.time.DateTime.Property property28 = dateTime25.minuteOfDay();
        org.joda.time.DateTime.Property property29 = dateTime25.year();
        boolean boolean30 = period19.equals((java.lang.Object) property29);
        org.joda.time.Period period32 = period19.minusWeeks((int) ' ');
        mutablePeriod10.mergePeriod((org.joda.time.ReadablePeriod) period19);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Years" + "'", str3, "Years");
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(mutablePeriod10);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(period32);
    }

    @Test
    public void test14421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14421");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(972, 910, 53773256, 54104995, 2124, 53045628);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54104995 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14422");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        java.lang.String str3 = localDate2.toString();
        org.joda.time.LocalDate.Property property4 = localDate2.year();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 1, chronology6);
        java.lang.String str8 = localDate7.toString();
        org.joda.time.LocalDate.Property property9 = localDate7.year();
        org.joda.time.Period period10 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate.Property property11 = localDate2.yearOfCentury();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod();
        mutablePeriod12.setYears(53660764);
        org.joda.time.LocalDate localDate15 = localDate2.plus((org.joda.time.ReadablePeriod) mutablePeriod12);
        mutablePeriod12.addSeconds(590);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01" + "'", str3, "1970-01-01");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01" + "'", str8, "1970-01-01");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate15);
    }

    @Test
    public void test14423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14423");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.withHourOfDay((int) (short) 10);
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.minusMinutes((int) (short) 100);
        org.joda.time.TimeOfDay.Property property5 = timeOfDay2.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField6 = property5.getField();
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property8 = localTime7.minuteOfHour();
        org.joda.time.LocalTime localTime9 = property8.roundHalfCeilingCopy();
        org.joda.time.LocalTime.Property property10 = localTime9.millisOfSecond();
        org.joda.time.LocalTime localTime11 = property10.roundHalfFloorCopy();
        org.joda.time.LocalTime.Property property12 = localTime11.millisOfDay();
        java.lang.String str13 = property12.getAsText();
        org.joda.time.LocalTime localTime15 = property12.addCopy((long) 368);
        org.joda.time.LocalTime localTime17 = property12.addCopy(445L);
        java.util.Locale.Builder builder18 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder20 = builder18.setLanguage("");
        java.util.Locale locale22 = java.util.Locale.forLanguageTag("2022-02-21T14:54:05.059Z");
        java.util.Locale.Builder builder23 = builder20.setLocale(locale22);
        java.lang.String str24 = dateTimeField6.getAsShortText((org.joda.time.ReadablePartial) localTime17, locale22);
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "21420000" + "'", str13, "21420000");
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0" + "'", str24, "0");
    }

    @Test
    public void test14424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14424");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(902, 0, 53882205, 53989902, 53618195, 53767594);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53989902 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14425");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusYears((int) (short) 10);
        org.joda.time.DateTime dateTime10 = dateTime6.plus((long) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.plusSeconds(53618165);
        org.joda.time.Period period17 = new org.joda.time.Period((int) (byte) 10, (-1), 21, 100);
        org.joda.time.DateTime dateTime19 = dateTime10.withPeriodAdded((org.joda.time.ReadablePeriod) period17, 53620134);
        org.joda.time.DateTime dateTime21 = dateTime10.plusYears(53642637);
        org.joda.time.DateTime.Property property22 = dateTime10.era();
        org.joda.time.DateTime dateTime23 = property22.withMaximumValue();
        org.joda.time.DateTime dateTime24 = property22.roundHalfEvenCopy();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test14426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14426");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property1 = localTime0.minuteOfHour();
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone3 = dateMidnight2.getZone();
        long long4 = property1.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight2);
        org.joda.time.LocalTime localTime6 = property1.addWrapFieldToCopy(53618195);
        org.joda.time.LocalTime localTime7 = property1.withMaximumValue();
        org.joda.time.LocalTime.Property property8 = localTime7.secondOfMinute();
        org.joda.time.LocalTime localTime10 = localTime7.plusSeconds(328);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(readableDuration11, readableInstant12, periodType13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        mutablePeriod14.add(readableDuration15);
        mutablePeriod14.addMonths((int) '#');
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(readableDuration19, readableInstant20, periodType21);
        org.joda.time.ReadableDuration readableDuration23 = null;
        mutablePeriod22.add(readableDuration23);
        mutablePeriod22.addMonths((int) '#');
        mutablePeriod14.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod22);
        mutablePeriod22.add((-1L));
        int int30 = mutablePeriod22.getWeeks();
        org.joda.time.LocalTime localTime31 = localTime10.plus((org.joda.time.ReadablePeriod) mutablePeriod22);
        int int32 = localTime10.getMinuteOfHour();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-27423549L) + "'", long4 == (-27423549L));
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 4 + "'", int32 == 4);
    }

    @Test
    public void test14427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14427");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusYears((int) (short) 10);
        org.joda.time.DateTime dateTime10 = dateTime6.plus((long) 100);
        org.joda.time.DateTime dateTime12 = dateTime10.minusDays(185);
        int int13 = dateTime10.getYearOfEra();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(readableDuration14, readableInstant15, periodType16);
        org.joda.time.ReadableDuration readableDuration18 = null;
        mutablePeriod17.add(readableDuration18);
        mutablePeriod17.addMonths((int) '#');
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) (short) 1, chronology23);
        int int25 = localDate24.getDayOfYear();
        org.joda.time.LocalTime localTime26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = localDate24.toDateTime(localTime26, dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = localDate24.toDateMidnight(dateTimeZone29);
        org.joda.time.DateMidnight.Property property31 = dateMidnight30.yearOfEra();
        int int32 = dateMidnight30.getMinuteOfHour();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.Period period35 = new org.joda.time.Period((long) (byte) 100, chronology34);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime(chronology36);
        org.joda.time.MutableDateTime mutableDateTime38 = mutableDateTime37.copy();
        org.joda.time.Duration duration39 = period35.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime38);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight30.plus((org.joda.time.ReadableDuration) duration39);
        mutablePeriod17.add((org.joda.time.ReadableDuration) duration39);
        org.joda.time.DateTime dateTime42 = dateTime10.minus((org.joda.time.ReadablePeriod) mutablePeriod17);
        org.joda.time.DateTime dateTime43 = dateTime42.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime45 = dateTime43.plusMonths(212400000);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime47 = dateTime43.withHourOfDay(54028511);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54028511 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
    }

    @Test
    public void test14428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14428");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property1 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime3 = localTime0.withMillisOfSecond(904);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localTime0.toDateTimeToday(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths(10);
        org.joda.time.DateTime.Property property8 = dateTime5.minuteOfDay();
        org.joda.time.DateTime.Property property9 = dateTime5.year();
        org.joda.time.DateTime dateTime10 = property9.roundFloorCopy();
        org.joda.time.DateTime dateTime12 = dateTime10.plusMinutes(10);
        org.joda.time.DateTime.Property property13 = dateTime10.millisOfSecond();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test14429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14429");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        mutableDateTime1.addMinutes(904);
        int int4 = mutableDateTime1.getYearOfCentury();
        mutableDateTime1.addWeeks(53626727);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.millisOfSecond();
        int int8 = mutableDateTime1.getCenturyOfEra();
        int int9 = mutableDateTime1.getDayOfWeek();
        mutableDateTime1.add(53634384000L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (short) 1, chronology13);
        java.lang.String str15 = localDate14.toString();
        org.joda.time.LocalDate localDate17 = localDate14.withYearOfEra((int) (byte) 100);
        int int18 = localDate14.getDayOfYear();
        org.joda.time.LocalDate localDate20 = localDate14.withWeekyear(3);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate localDate23 = localDate14.withField(dateTimeFieldType21, 53628506);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime1.property(dateTimeFieldType21);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) (short) 1, chronology26);
        int int28 = localDate27.getDayOfYear();
        org.joda.time.LocalTime localTime29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = localDate27.toDateTime(localTime29, dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime31.plusYears((int) (short) 10);
        org.joda.time.DateTime dateTime35 = dateTime31.plus((long) 100);
        org.joda.time.DateTime dateTime37 = dateTime35.plusSeconds(53618165);
        java.lang.String str39 = dateTime35.toString("14:53:45.116");
        org.joda.time.PeriodType periodType40 = org.joda.time.PeriodType.days();
        org.joda.time.PeriodType periodType41 = periodType40.withMonthsRemoved();
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.time();
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime((long) 53619708);
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.hours();
        mutableDateTime44.add(durationFieldType45, (int) (byte) 0);
        int int48 = periodType42.indexOf(durationFieldType45);
        boolean boolean49 = periodType40.isSupported(durationFieldType45);
        org.joda.time.DateTime dateTime51 = dateTime35.withFieldAdded(durationFieldType45, 53656199);
        int int52 = dateTime51.getYearOfCentury();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate((long) (short) 1, chronology54);
        int int56 = localDate55.getDayOfYear();
        org.joda.time.LocalTime localTime57 = null;
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateTime dateTime59 = localDate55.toDateTime(localTime57, dateTimeZone58);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateMidnight dateMidnight61 = localDate55.toDateMidnight(dateTimeZone60);
        org.joda.time.LocalDate localDate63 = localDate55.withYear(53619770);
        java.lang.String str64 = localDate55.toString();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.MutableDateTime mutableDateTime66 = new org.joda.time.MutableDateTime(chronology65);
        org.joda.time.MutableDateTime mutableDateTime67 = mutableDateTime66.copy();
        org.joda.time.DateMidnight dateMidnight68 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone69 = dateMidnight68.getZone();
        mutableDateTime66.setZoneRetainFields(dateTimeZone69);
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MutableDateTime mutableDateTime72 = new org.joda.time.MutableDateTime(chronology71);
        org.joda.time.MutableDateTime mutableDateTime73 = mutableDateTime72.copy();
        mutableDateTime72.addMinutes(0);
        mutableDateTime72.setSecondOfDay(21);
        org.joda.time.Chronology chronology78 = null;
        mutableDateTime72.setChronology(chronology78);
        mutableDateTime72.setMinuteOfHour((int) (short) 0);
        mutableDateTime72.addMinutes((int) (byte) 1);
        int int84 = dateTimeZone69.getOffset((org.joda.time.ReadableInstant) mutableDateTime72);
        org.joda.time.DateMidnight dateMidnight85 = localDate55.toDateMidnight(dateTimeZone69);
        org.joda.time.LocalDateTime localDateTime86 = null;
        boolean boolean87 = dateTimeZone69.isLocalDateTimeGap(localDateTime86);
        org.joda.time.DateTime dateTime88 = dateTime51.toDateTime(dateTimeZone69);
        org.joda.time.DateTime dateTime89 = mutableDateTime1.toDateTime(dateTimeZone69);
        org.joda.time.MutableDateTime mutableDateTime90 = dateTime89.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime91 = dateTime89.withLaterOffsetAtOverlap();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10297 + "'", int8 == 10297);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1970-01-01" + "'", str15, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "14:53:45.116" + "'", str39, "14:53:45.116");
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 91 + "'", int52 == 91);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "1970-01-01" + "'", str64, "1970-01-01");
        org.junit.Assert.assertNotNull(mutableDateTime67);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(mutableDateTime73);
// flaky:         org.junit.Assert.assertTrue("'" + int84 + "' != '" + 53619988 + "'", int84 == 53619988);
        org.junit.Assert.assertNotNull(dateMidnight85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(mutableDateTime90);
        org.junit.Assert.assertNotNull(dateTime91);
    }

    @Test
    public void test14430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14430");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("GMT");
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test14431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14431");
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(readableDuration5, readableInstant6, periodType7);
        mutablePeriod8.addYears((int) (byte) 0);
        int int11 = mutablePeriod8.getMonths();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(readableDuration12, readableInstant13, periodType14);
        org.joda.time.ReadableDuration readableDuration16 = null;
        mutablePeriod15.add(readableDuration16);
        mutablePeriod15.addMonths((int) '#');
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) (short) 1, chronology21);
        int int23 = localDate22.getDayOfYear();
        org.joda.time.LocalTime localTime24 = null;
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateTime dateTime26 = localDate22.toDateTime(localTime24, dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = localDate22.toDateMidnight(dateTimeZone27);
        org.joda.time.DateMidnight.Property property29 = dateMidnight28.yearOfEra();
        int int30 = dateMidnight28.getMinuteOfHour();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period((long) (byte) 100, chronology32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(chronology34);
        org.joda.time.MutableDateTime mutableDateTime36 = mutableDateTime35.copy();
        org.joda.time.Duration duration37 = period33.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime36);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight28.plus((org.joda.time.ReadableDuration) duration37);
        mutablePeriod15.add((org.joda.time.ReadableDuration) duration37);
        mutablePeriod8.setPeriod((org.joda.time.ReadableDuration) duration37);
        org.joda.time.MutablePeriod mutablePeriod41 = mutablePeriod8.copy();
        org.joda.time.PeriodType periodType42 = mutablePeriod41.getPeriodType();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) (short) 1, chronology45);
        java.lang.String str47 = localDate46.toString();
        org.joda.time.LocalDate localDate49 = localDate46.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology50 = localDate49.getChronology();
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime(533L, chronology50);
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod(0L, (long) 53619770, periodType42, chronology50);
        org.joda.time.PeriodType periodType53 = periodType42.withDaysRemoved();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.Period period55 = new org.joda.time.Period(12315L, periodType42, chronology54);
        int int56 = periodType42.size();
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((long) 53732585, (long) 987, periodType42);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(mutablePeriod41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1970-01-01" + "'", str47, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 8 + "'", int56 == 8);
    }

    @Test
    public void test14432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14432");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property1 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime3 = localTime0.withMillisOfSecond(904);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localTime0.toDateTimeToday(dateTimeZone4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMonths(10);
        org.joda.time.DateTime.Property property8 = dateTime5.hourOfDay();
        org.joda.time.DurationField durationField9 = property8.getRangeDurationField();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime11 = property8.setCopy("2022-02-21T00:00:00.000Z");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-21T00:00:00.000Z\" for hourOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(durationField9);
    }

    @Test
    public void test14433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14433");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property1 = localTime0.minuteOfHour();
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone3 = dateMidnight2.getZone();
        long long4 = property1.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight2);
        org.joda.time.DateMidnight.Property property5 = dateMidnight2.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight2.withDayOfYear(20);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime9.copy();
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone12 = dateMidnight11.getZone();
        mutableDateTime9.setZoneRetainFields(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((java.lang.Object) dateMidnight7, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) mutableDateTime15);
        int int17 = mutableDateTime15.getMillisOfSecond();
        int int18 = mutableDateTime15.getDayOfWeek();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-27423549L) + "'", long4 == (-27423549L));
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
    }

    @Test
    public void test14434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14434");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.withHourOfDay((int) (short) 10);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.hours();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay0.withFieldAdded(durationFieldType3, 53625645);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay0.plusMillis(53659661);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(readableDuration8, readableInstant9, periodType10);
        org.joda.time.ReadableDuration readableDuration12 = null;
        mutablePeriod11.add(readableDuration12);
        mutablePeriod11.addMonths((int) '#');
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(readableDuration16, readableInstant17, periodType18);
        org.joda.time.ReadableDuration readableDuration20 = null;
        mutablePeriod19.add(readableDuration20);
        mutablePeriod19.addMonths((int) '#');
        mutablePeriod11.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod19);
        int int25 = mutablePeriod19.getMonths();
        org.joda.time.TimeOfDay timeOfDay26 = timeOfDay7.plus((org.joda.time.ReadablePeriod) mutablePeriod19);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = timeOfDay26.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay29 = timeOfDay26.plusHours(53869225);
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertNotNull(timeOfDay29);
    }

    @Test
    public void test14435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14435");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property1 = localTime0.minuteOfHour();
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone3 = dateMidnight2.getZone();
        long long4 = property1.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight2);
        org.joda.time.DateMidnight.Property property5 = dateMidnight2.dayOfWeek();
        org.joda.time.DateMidnight.Property property6 = dateMidnight2.monthOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.MutableDateTime mutableDateTime9 = mutableDateTime8.copy();
        mutableDateTime8.addMinutes(0);
        java.lang.String str12 = mutableDateTime8.toString();
        int int13 = mutableDateTime8.getYearOfEra();
        org.joda.time.Chronology chronology14 = mutableDateTime8.getChronology();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight2.withChronology(chronology14);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime18 = dateTime16.withWeekyear((int) (short) 100);
        org.joda.time.DateTime dateTime20 = dateTime18.minusWeeks((int) '4');
        org.joda.time.DateTime dateTime22 = dateTime20.minusMillis(53618333);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(readableDuration23, readableInstant24, periodType25);
        org.joda.time.ReadableDuration readableDuration27 = null;
        mutablePeriod26.add(readableDuration27);
        mutablePeriod26.addSeconds(53617440);
        org.joda.time.DateTime dateTime31 = dateTime20.plus((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.Chronology chronology32 = dateTime20.getChronology();
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight2.withChronology(chronology32);
        org.joda.time.DateMidnight.Property property34 = dateMidnight2.year();
        org.joda.time.DateMidnight dateMidnight36 = property34.addWrapFieldToCopy(53872957);
        org.joda.time.DateMidnight dateMidnight38 = property34.addWrapFieldToCopy(53619770);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-27423549L) + "'", long4 == (-27423549L));
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime9);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-22T05:56:30.514+14:53:39.988" + "'", str12, "2022-02-22T05:56:30.514+14:53:39.988");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateMidnight38);
    }

    @Test
    public void test14436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14436");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableDuration0, readableInstant1, periodType2);
        mutablePeriod3.addYears((int) (byte) 0);
        int int6 = mutablePeriod3.getMonths();
        mutablePeriod3.addMinutes((int) (byte) 0);
        int int9 = mutablePeriod3.getMinutes();
        org.joda.time.ReadableInterval readableInterval10 = null;
        mutablePeriod3.setPeriod(readableInterval10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (short) 1, chronology13);
        java.lang.String str15 = localDate14.toString();
        org.joda.time.LocalDate localDate17 = localDate14.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology18 = localDate17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.clockhourOfDay();
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology18);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((long) (byte) 100, chronology22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(chronology24);
        org.joda.time.MutableDateTime mutableDateTime26 = mutableDateTime25.copy();
        org.joda.time.Duration duration27 = period23.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime26);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime26.hourOfDay();
        mutablePeriod3.setPeriod((org.joda.time.ReadableInstant) mutableDateTime20, (org.joda.time.ReadableInstant) mutableDateTime26);
        mutableDateTime20.addDays(53632583);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime20.setDate(21370896, 53787006, 21381200);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53787006 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1970-01-01" + "'", str15, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(property28);
    }

    @Test
    public void test14437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14437");
        java.lang.Object obj0 = null;
        org.joda.time.Instant instant2 = org.joda.time.Instant.parse("2022-02-21T14:53:37.096Z");
        org.joda.time.Chronology chronology3 = instant2.getChronology();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(obj0, chronology3);
        java.util.Locale locale5 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleKeys();
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(10L, (-1L), periodType9, chronology10);
        org.joda.time.Period period12 = period11.normalizedStandard();
        boolean boolean13 = strSet6.contains((java.lang.Object) period12);
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay4.withPeriodAdded((org.joda.time.ReadablePeriod) period12, 328);
        java.lang.String str16 = timeOfDay15.toString();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(readableDuration17, readableInstant18, periodType19);
        org.joda.time.ReadableDuration readableDuration21 = null;
        mutablePeriod20.add(readableDuration21);
        mutablePeriod20.addYears((int) (short) 100);
        int int25 = mutablePeriod20.getMinutes();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTime dateTime29 = dateTime26.withFieldAdded(durationFieldType27, (int) (byte) 0);
        org.joda.time.DateTime dateTime31 = dateTime26.minusYears(10);
        boolean boolean33 = dateTime31.isBefore((long) 'x');
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.months();
        org.joda.time.DateTime dateTime36 = dateTime31.withFieldAdded(durationFieldType34, 465);
        int int37 = mutablePeriod20.get(durationFieldType34);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay39 = timeOfDay15.withFieldAdded(durationFieldType34, 53698857);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'months' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(timeOfDay15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "T15:02:46.986" + "'", str16, "T15:02:46.986");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test14438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14438");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((java.lang.Object) periodType0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusYears((int) '#');
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusDays(465);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusYears((int) 'u');
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.plusMonths(53619988);
        int int12 = localDateTime11.getDayOfMonth();
        int int13 = localDateTime11.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.minusSeconds(799);
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(periodType16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((java.lang.Object) periodType16, dateTimeZone18);
        int int20 = localDateTime19.getDayOfMonth();
        int int21 = localDateTime19.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.millisOfSecond();
        int int23 = localDateTime19.getEra();
        org.joda.time.LocalDateTime.Property property24 = localDateTime19.era();
        org.joda.time.LocalDateTime.Property property25 = localDateTime19.dayOfMonth();
        int int26 = localDateTime19.getDayOfWeek();
        int int27 = localDateTime19.getMinuteOfHour();
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone29 = dateMidnight28.getZone();
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now(dateTimeZone29);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.plusMillis(342);
        boolean boolean34 = localDateTime19.isBefore((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        int int36 = localDateTime33.get(dateTimeFieldType35);
        org.joda.time.DurationFieldType durationFieldType37 = dateTimeFieldType35.getRangeDurationType();
        boolean boolean38 = localDateTime15.isSupported(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 44703 + "'", int13 == 44703);
        org.junit.Assert.assertNotNull(localDateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 22 + "'", int20 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 21390597 + "'", int21 == 21390597);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 56 + "'", int27 == 56);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5 + "'", int36 == 5);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test14439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14439");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone1 = dateMidnight0.getZone();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) (short) 1, chronology3);
        java.lang.String str5 = localDate4.toString();
        org.joda.time.LocalDate localDate7 = localDate4.withYearOfEra((int) (byte) 100);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight0.withFields((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(readableDuration9, readableInstant10, periodType11);
        mutablePeriod12.setMillis(0);
        org.joda.time.LocalDate localDate15 = localDate7.plus((org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.LocalDate localDate17 = localDate15.withWeekyear((int) ' ');
        org.joda.time.LocalDate localDate19 = localDate17.plusDays(783);
        org.joda.time.LocalDate localDate21 = localDate19.withCenturyOfEra(53645);
        org.joda.time.LocalDate.Property property22 = localDate21.centuryOfEra();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((long) (byte) 100, chronology24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.MutableDateTime mutableDateTime28 = mutableDateTime27.copy();
        org.joda.time.Duration duration29 = period25.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime28);
        int int30 = period25.size();
        org.joda.time.format.PeriodFormatter periodFormatter31 = null;
        java.lang.String str32 = period25.toString(periodFormatter31);
        int int33 = period25.getSeconds();
        org.joda.time.format.DateTimePrinter dateTimePrinter35 = null;
        org.joda.time.format.DateTimeParser dateTimeParser36 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter35, dateTimeParser36);
        boolean boolean38 = dateTimeFormatter37.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter37.withPivotYear((java.lang.Integer) 1);
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone42 = dateMidnight41.getZone();
        boolean boolean44 = dateTimeZone42.isStandardOffset((long) 'a');
        org.joda.time.LocalDate localDate45 = org.joda.time.LocalDate.now(dateTimeZone42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter40.withZone(dateTimeZone42);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) 53628506, dateTimeZone42);
        boolean boolean48 = period25.equals((java.lang.Object) dateTimeZone42);
        long long50 = dateTimeZone42.previousTransition(1645455217096L);
        boolean boolean52 = dateTimeZone42.isStandardOffset((long) 2);
        long long55 = dateTimeZone42.adjustOffset((long) 870, true);
        long long58 = dateTimeZone42.convertLocalToUTC((long) 53835495, false);
        org.joda.time.DateTime dateTime59 = localDate21.toDateTimeAtMidnight(dateTimeZone42);
        org.joda.time.LocalDate localDate61 = localDate21.plusMonths(617);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 8 + "'", int30 == 8);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "PT0.100S" + "'", str32, "PT0.100S");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1645455217096L + "'", long50 == 1645455217096L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 870L + "'", long55 == 870L);
// flaky:         org.junit.Assert.assertTrue("'" + long58 + "' != '" + 215507L + "'", long58 == 215507L);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(localDate61);
    }

    @Test
    public void test14440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14440");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.years();
        java.lang.String str2 = periodType1.getName();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(periodType1);
        org.joda.time.PeriodType periodType4 = periodType1.withYearsRemoved();
        org.joda.time.PeriodType periodType5 = periodType4.withHoursRemoved();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) (short) 1, chronology8);
        java.lang.String str10 = localDate9.toString();
        org.joda.time.LocalDate localDate12 = localDate9.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology13 = localDate12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.yearOfEra();
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType6.getField(chronology13);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) (byte) 100, chronology17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.MutableDateTime mutableDateTime21 = mutableDateTime20.copy();
        org.joda.time.Duration duration22 = period18.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime21);
        org.joda.time.Period period24 = period18.plusDays((int) (byte) 10);
        int int25 = period24.getHours();
        org.joda.time.Period period27 = period24.plusMonths(2);
        org.joda.time.Period period29 = period24.minusMonths(12);
        org.joda.time.Period period31 = period24.withYears(2057);
        int[] intArray33 = chronology13.get((org.joda.time.ReadablePeriod) period31, 259200000L);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(24815L, periodType4, chronology13);
        java.lang.Object obj37 = null;
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime(chronology39);
        org.joda.time.MutableDateTime mutableDateTime41 = mutableDateTime40.copy();
        mutableDateTime40.addMinutes(0);
        java.lang.String str44 = mutableDateTime40.toString();
        int int45 = mutableDateTime40.getYearOfEra();
        org.joda.time.Chronology chronology46 = mutableDateTime40.getChronology();
        org.joda.time.Chronology chronology47 = mutableDateTime40.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.centuryOfEra();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(0L, chronology47);
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate(obj37, chronology47);
        org.joda.time.DateTimeField dateTimeField51 = chronology47.clockhourOfDay();
        mutablePeriod35.add(40002L, chronology47);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Years" + "'", str2, "Years");
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-01" + "'", str10, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 3, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(mutableDateTime41);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2022-02-22T05:56:30.647+14:53:39.988" + "'", str44, "2022-02-22T05:56:30.647+14:53:39.988");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2022 + "'", int45 == 2022);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField51);
    }

    @Test
    public void test14441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14441");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((java.lang.Object) periodType0, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusYears((int) '#');
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusDays(465);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.dayOfYear();
        java.lang.Object obj9 = null;
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology10);
        int int12 = mutableDateTime11.getMillisOfSecond();
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone14 = dateMidnight13.getZone();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        mutableDateTime11.setZoneRetainFields(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(obj9, dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime5, dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusYears(4);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusYears(53967142);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 673 + "'", int12 == 673);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test14442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14442");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone2 = dateMidnight1.getZone();
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) 5, dateTimeZone2);
        org.joda.time.LocalTime.Property property4 = localTime3.millisOfSecond();
        org.joda.time.LocalTime localTime5 = property4.roundCeilingCopy();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime5);
    }

    @Test
    public void test14443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14443");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone2 = dateMidnight1.getZone();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) 53673356, dateTimeZone2);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime4.setSecondOfMinute(53816);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53816 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
    }

    @Test
    public void test14444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14444");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        java.lang.String str3 = localDate2.toString();
        org.joda.time.LocalDate localDate5 = localDate2.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology6 = localDate5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.eras();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.weekyear();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01" + "'", str3, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test14445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14445");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) (short) 1, chronology2);
        java.lang.String str4 = localDate3.toString();
        org.joda.time.LocalDate localDate6 = localDate3.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology7 = localDate6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay((long) (short) 1, chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.plusMonths(53617719);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone12 = dateMidnight11.getZone();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (short) 1, chronology14);
        java.lang.String str16 = localDate15.toString();
        org.joda.time.LocalDate localDate18 = localDate15.withYearOfEra((int) (byte) 100);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight11.withFields((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight11.withField(dateTimeFieldType20, 842);
        org.joda.time.YearMonthDay.Property property23 = yearMonthDay8.property(dateTimeFieldType20);
        org.joda.time.YearMonthDay.Property property24 = yearMonthDay8.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay26 = property24.addToCopy(53629078);
        org.joda.time.YearMonthDay yearMonthDay27 = property24.withMaximumValue();
        int int28 = yearMonthDay27.size();
        org.joda.time.YearMonthDay.Property property29 = yearMonthDay27.dayOfMonth();
        int int30 = yearMonthDay27.size();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01" + "'", str16, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
    }

    @Test
    public void test14446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14446");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 53677);
        org.joda.time.Instant instant4 = instant1.withDurationAdded((long) 53655716, 52);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 1, chronology6);
        java.lang.String str8 = localDate7.toString();
        org.joda.time.LocalDate localDate10 = localDate7.withYearOfEra((int) (byte) 100);
        int int11 = localDate7.getDayOfYear();
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((long) 53619708);
        org.joda.time.DateTime dateTime14 = localDate7.toDateTime((org.joda.time.ReadableInstant) mutableDateTime13);
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone16 = dateMidnight15.getZone();
        boolean boolean18 = dateTimeZone16.isStandardOffset((long) 'a');
        org.joda.time.LocalDate localDate19 = org.joda.time.LocalDate.now(dateTimeZone16);
        java.lang.String str21 = dateTimeZone16.getNameKey((long) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime22 = mutableDateTime13.toMutableDateTime(dateTimeZone16);
        java.util.Locale locale27 = new java.util.Locale("hi!", "Years", "1970-01-01");
        java.lang.String str28 = dateTimeZone16.getShortName((long) 53617440, locale27);
        java.lang.String str29 = dateTimeZone16.getID();
        org.joda.time.MutableDateTime mutableDateTime30 = instant1.toMutableDateTime(dateTimeZone16);
        mutableDateTime30.addYears(0);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01" + "'", str8, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(localDate19);
// flaky:         org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertEquals(locale27.toString(), "hi!_YEARS_1970-01-01");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+14:53:39.988" + "'", str28, "+14:53:39.988");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+14:53:39.988" + "'", str29, "+14:53:39.988");
        org.junit.Assert.assertNotNull(mutableDateTime30);
    }

    @Test
    public void test14447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14447");
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.MutableDateTime mutableDateTime9 = mutableDateTime8.copy();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        mutableDateTime9.setZone(dateTimeZone10);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime9.minuteOfDay();
        int int13 = mutableDateTime9.getSecondOfMinute();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime9.hourOfDay();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime9.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.roundFloor();
        mutableDateTime16.addHours(53863454);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) (short) 1, chronology20);
        java.lang.String str22 = localDate21.toString();
        org.joda.time.LocalDate localDate24 = localDate21.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) (short) 1, chronology26);
        java.lang.String str28 = localDate27.toString();
        org.joda.time.LocalDate localDate30 = localDate27.withYearOfEra((int) (byte) 100);
        org.joda.time.LocalDate.Property property31 = localDate27.weekOfWeekyear();
        org.joda.time.DateTime dateTime32 = localDate27.toDateTimeAtCurrentTime();
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone34 = dateMidnight33.getZone();
        boolean boolean36 = dateTimeZone34.isStandardOffset((long) 'a');
        org.joda.time.DateTime dateTime37 = dateTime32.withZoneRetainFields(dateTimeZone34);
        org.joda.time.DateTime dateTime38 = localDate24.toDateTimeAtStartOfDay(dateTimeZone34);
        org.joda.time.DateMidnight dateMidnight39 = org.joda.time.DateMidnight.now(dateTimeZone34);
        long long41 = dateTimeZone34.previousTransition((long) 53951115);
        mutableDateTime16.setZone(dateTimeZone34);
        java.util.Locale locale44 = java.util.Locale.FRANCE;
        java.lang.String str45 = dateTimeZone34.getName(45869L, locale44);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(21378329, 54143811, 508, 0, 681, 53891619, 328, dateTimeZone34);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 681 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 30 + "'", int13 == 30);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1970-01-01" + "'", str22, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1970-01-01" + "'", str28, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 53951115L + "'", long41 == 53951115L);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr_FR");
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+14:53:39.988" + "'", str45, "+14:53:39.988");
    }

    @Test
    public void test14448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14448");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(chronology1);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 1, chronology6);
        java.lang.String str8 = localDate7.toString();
        org.joda.time.LocalDate localDate10 = localDate7.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology11 = localDate10.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.clockhourOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 14, chronology11);
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((-1L), chronology11);
        org.joda.time.DateTimeField dateTimeField16 = chronology11.minuteOfDay();
        mutableDateTime2.setChronology(chronology11);
        org.joda.time.DateTimeZone dateTimeZone18 = chronology11.getZone();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(96293L, chronology11);
        org.joda.time.DateTimeField dateTimeField20 = chronology11.dayOfMonth();
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01" + "'", str8, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test14449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14449");
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = null;
        org.joda.time.format.DateTimeParser dateTimeParser8 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter7, dateTimeParser8);
        boolean boolean10 = dateTimeFormatter9.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter9.withPivotYear((java.lang.Integer) 1);
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone14 = dateMidnight13.getZone();
        boolean boolean16 = dateTimeZone14.isStandardOffset((long) 'a');
        org.joda.time.LocalDate localDate17 = org.joda.time.LocalDate.now(dateTimeZone14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter12.withZone(dateTimeZone14);
        java.util.Locale locale19 = dateTimeFormatter18.getLocale();
        org.joda.time.Chronology chronology20 = dateTimeFormatter18.getChronolgy();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(readableDuration21, readableInstant22, periodType23);
        int int25 = mutablePeriod24.getMinutes();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) (short) 1, chronology28);
        java.lang.String str30 = localDate29.toString();
        org.joda.time.LocalDate localDate32 = localDate29.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology33 = localDate32.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.clockhourOfDay();
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(chronology33);
        mutablePeriod24.setPeriod((long) 53617649, chronology33);
        org.joda.time.DateTimeField dateTimeField37 = chronology33.era();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter18.withChronology(chronology33);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(0, 53963206, 53832394, 54137464, 54097116, 357, 53828296, chronology33);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54137464 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNull(locale19);
        org.junit.Assert.assertNull(chronology20);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1970-01-01" + "'", str30, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
    }

    @Test
    public void test14450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14450");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) (short) 1, chronology2);
        java.lang.String str4 = localDate3.toString();
        org.joda.time.LocalDate localDate6 = localDate3.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology7 = localDate6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay((long) (short) 1, chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.plusMonths(53617719);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone12 = dateMidnight11.getZone();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (short) 1, chronology14);
        java.lang.String str16 = localDate15.toString();
        org.joda.time.LocalDate localDate18 = localDate15.withYearOfEra((int) (byte) 100);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight11.withFields((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight11.withField(dateTimeFieldType20, 842);
        org.joda.time.YearMonthDay.Property property23 = yearMonthDay8.property(dateTimeFieldType20);
        int int24 = property23.get();
        org.joda.time.YearMonthDay yearMonthDay25 = property23.withMinimumValue();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01" + "'", str16, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1970 + "'", int24 == 1970);
        org.junit.Assert.assertNotNull(yearMonthDay25);
    }

    @Test
    public void test14451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14451");
        java.lang.Object obj1 = null;
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 1, chronology4);
        java.lang.String str6 = localDate5.toString();
        org.joda.time.LocalDate localDate8 = localDate5.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology9 = localDate8.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.yearOfEra();
        org.joda.time.DateTimeField dateTimeField11 = dateTimeFieldType2.getField(chronology9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (short) 1, chronology13);
        java.lang.String str15 = localDate14.toString();
        org.joda.time.LocalDate localDate17 = localDate14.withYearOfEra((int) (byte) 100);
        int int18 = localDate14.getDayOfYear();
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) 53619708);
        org.joda.time.DateTime dateTime21 = localDate14.toDateTime((org.joda.time.ReadableInstant) mutableDateTime20);
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone23 = dateMidnight22.getZone();
        boolean boolean25 = dateTimeZone23.isStandardOffset((long) 'a');
        org.joda.time.LocalDate localDate26 = org.joda.time.LocalDate.now(dateTimeZone23);
        java.lang.String str28 = dateTimeZone23.getNameKey((long) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime29 = mutableDateTime20.toMutableDateTime(dateTimeZone23);
        org.joda.time.Chronology chronology30 = chronology9.withZone(dateTimeZone23);
        org.joda.time.Period period31 = new org.joda.time.Period(obj1, chronology30);
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 53849639, chronology30);
        org.joda.time.DurationField durationField33 = chronology30.eras();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01" + "'", str6, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1970-01-01" + "'", str15, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(localDate26);
// flaky:         org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField33);
    }

    @Test
    public void test14452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14452");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((java.lang.Object) periodType0, dateTimeZone2);
        int int4 = localDateTime3.getDayOfMonth();
        int int5 = localDateTime3.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.millisOfSecond();
        int int7 = localDateTime3.getEra();
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.era();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundHalfEvenCopy();
        boolean boolean10 = property8.isLeap();
        org.joda.time.LocalDateTime localDateTime11 = property8.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime12 = property8.roundHalfCeilingCopy();
        int int13 = localDateTime12.size();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withHourOfDay(54075724);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54075724 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 21390845 + "'", int5 == 21390845);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
    }

    @Test
    public void test14453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14453");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        boolean boolean3 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 1);
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone7 = dateMidnight6.getZone();
        boolean boolean9 = dateTimeZone7.isStandardOffset((long) 'a');
        org.joda.time.LocalDate localDate10 = org.joda.time.LocalDate.now(dateTimeZone7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter5.withZone(dateTimeZone7);
        boolean boolean12 = dateTimeFormatter5.isPrinter();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) (short) 1, chronology18);
        java.lang.String str20 = localDate19.toString();
        org.joda.time.LocalDate localDate22 = localDate19.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology23 = localDate22.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.eras();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(100, 12, (int) (short) 1, chronology23);
        boolean boolean26 = dateTimeFieldType13.isSupported(chronology23);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter5.withChronology(chronology23);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(readableDuration28, readableInstant29, periodType30);
        mutablePeriod31.setMillis(0);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period((long) (byte) 100, chronology35);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime(chronology37);
        org.joda.time.MutableDateTime mutableDateTime39 = mutableDateTime38.copy();
        org.joda.time.Duration duration40 = period36.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime39);
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((-1), 53620134, (int) (byte) -1, 53617719, (int) (byte) 100, 53619079, 1, 53);
        org.joda.time.Period period50 = period36.minus((org.joda.time.ReadablePeriod) mutablePeriod49);
        org.joda.time.Period period51 = period50.normalizedStandard();
        mutablePeriod31.setPeriod((org.joda.time.ReadablePeriod) period51);
        int[] intArray55 = chronology23.get((org.joda.time.ReadablePeriod) period51, (long) 53673313, 1645455255594L);
        org.joda.time.Period period57 = period51.withMonths(788);
        org.joda.time.Period period59 = period57.plusDays(53698857);
        int int60 = period57.getSeconds();
        org.joda.time.Period period62 = period57.plusSeconds(53986296);
        org.joda.time.Period period64 = period62.minusMillis(915);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1970-01-01" + "'", str20, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[52, 1, 2, 5, 23, 59, 42, 281]");
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(period64);
    }

    @Test
    public void test14454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14454");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay3.withHourOfDay((int) (short) 10);
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.hours();
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay3.withFieldAdded(durationFieldType6, 53625645);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay3.plusHours((int) '4');
        org.joda.time.TimeOfDay.Property property11 = timeOfDay3.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay12 = property11.withMinimumValue();
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) 1, (long) 0, periodType15, chronology16);
        org.joda.time.TimeOfDay timeOfDay18 = timeOfDay12.minus((org.joda.time.ReadablePeriod) mutablePeriod17);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(chronology21);
        org.joda.time.MutableDateTime mutableDateTime23 = mutableDateTime22.copy();
        mutableDateTime22.addMinutes(0);
        java.lang.String str26 = mutableDateTime22.toString();
        int int27 = mutableDateTime22.getYearOfEra();
        org.joda.time.Chronology chronology28 = mutableDateTime22.getChronology();
        org.joda.time.Chronology chronology29 = mutableDateTime22.getChronology();
        mutablePeriod17.setPeriod((long) 53, (long) 2022, chronology29);
        org.joda.time.DateTimeField dateTimeField31 = chronology29.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone32 = chronology29.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay33 = new org.joda.time.YearMonthDay(54126881, 53962250, 54141123, chronology29);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53962250 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(mutableDateTime23);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-02-22T05:56:30.887+14:53:39.988" + "'", str26, "2022-02-22T05:56:30.887+14:53:39.988");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
    }

    @Test
    public void test14455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14455");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(53709062, 904, 27, 53699994, (int) (byte) 0, 53618195, 1, 0);
        mutablePeriod8.setPeriod(53776773, 53689021, 344, 246, (int) (byte) 0, 631, 53778809, 53712411);
        mutablePeriod8.addDays(904);
        java.lang.String str20 = mutablePeriod8.toString();
        org.joda.time.DurationFieldType[] durationFieldTypeArray21 = mutablePeriod8.getFieldTypes();
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "P53776773Y53689021M344W1150DT631M53832521.411S" + "'", str20, "P53776773Y53689021M344W1150DT631M53832521.411S");
        org.junit.Assert.assertNotNull(durationFieldTypeArray21);
    }

    @Test
    public void test14456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14456");
        org.joda.time.PeriodType periodType1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod(periodType1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((java.lang.Object) periodType1, dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusYears((int) '#');
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusDays(465);
        java.lang.Object obj9 = null;
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology10);
        int int12 = mutableDateTime11.getMillisOfSecond();
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone14 = dateMidnight13.getZone();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone14);
        mutableDateTime11.setZoneRetainFields(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(obj9, dateTimeZone14);
        org.joda.time.DateTime dateTime18 = localDateTime6.toDateTime(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(141094517856021000L, dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusMinutes(2022);
        int int22 = localDateTime19.getCenturyOfEra();
        int int23 = localDateTime19.getSecondOfMinute();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(chronology24);
        int int26 = mutableDateTime25.getMillisOfSecond();
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone28 = dateMidnight27.getZone();
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now(dateTimeZone28);
        mutableDateTime25.setZoneRetainFields(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone28);
        java.lang.String str32 = dateTimeZone28.toString();
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(dateTimeZone28);
        org.joda.time.DateTime dateTime34 = localDateTime19.toDateTime(dateTimeZone28);
        org.joda.time.MutableDateTime mutableDateTime35 = org.joda.time.MutableDateTime.now(dateTimeZone28);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 921 + "'", int12 == 921);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 44730 + "'", int22 == 44730);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 921 + "'", int26 == 921);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+14:53:39.988" + "'", str32, "+14:53:39.988");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
    }

    @Test
    public void test14457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14457");
        java.util.Locale locale2 = new java.util.Locale("UTC", "2022-02-21T14:53:49.549Z");
        java.lang.String str3 = locale2.getCountry();
        java.lang.String str5 = locale2.getExtension('x');
        boolean boolean6 = locale2.hasExtensions();
        org.junit.Assert.assertEquals(locale2.toString(), "utc_2022-02-21T14:53:49.549Z");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2022-02-21T14:53:49.549Z" + "'", str3, "2022-02-21T14:53:49.549Z");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test14458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14458");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime1 = timeOfDay0.toDateTimeToday();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = timeOfDay0.getFieldType(0);
        int int4 = timeOfDay0.size();
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay0.plusSeconds(53640490);
        int int7 = timeOfDay0.getMinuteOfHour();
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
        org.junit.Assert.assertNotNull(timeOfDay6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 56 + "'", int7 == 56);
    }

    @Test
    public void test14459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14459");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableDuration0, readableInstant1, periodType2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutablePeriod3.add(readableDuration4);
        mutablePeriod3.addSeconds(53617440);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) (short) 1, chronology13);
        java.lang.String str15 = localDate14.toString();
        org.joda.time.LocalDate localDate17 = localDate14.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology18 = localDate17.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.eras();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate(100, 12, (int) (short) 1, chronology18);
        org.joda.time.DateTimeField dateTimeField21 = chronology18.year();
        mutablePeriod3.setPeriod((long) 53618333, chronology18);
        org.joda.time.DateTimeField dateTimeField23 = chronology18.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField24 = chronology18.hourOfDay();
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1970-01-01" + "'", str15, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test14460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14460");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property1 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime3 = localTime0.withMillisOfSecond(904);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localTime0.toDateTimeToday(dateTimeZone4);
        org.joda.time.Chronology chronology6 = localTime0.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.year();
        java.util.Locale locale10 = java.util.Locale.ITALIAN;
        java.lang.String str11 = locale10.getISO3Country();
        java.lang.String str12 = dateTimeField8.getAsText((long) 53653452, locale10);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970" + "'", str12, "1970");
    }

    @Test
    public void test14461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14461");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period((long) (byte) 100, chronology1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(chronology3);
        org.joda.time.MutableDateTime mutableDateTime5 = mutableDateTime4.copy();
        org.joda.time.Duration duration6 = period2.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime5);
        int int7 = period2.size();
        org.joda.time.format.PeriodFormatter periodFormatter8 = null;
        java.lang.String str9 = period2.toString(periodFormatter8);
        int int10 = period2.getSeconds();
        org.joda.time.format.DateTimePrinter dateTimePrinter12 = null;
        org.joda.time.format.DateTimeParser dateTimeParser13 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter12, dateTimeParser13);
        boolean boolean15 = dateTimeFormatter14.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter14.withPivotYear((java.lang.Integer) 1);
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone19 = dateMidnight18.getZone();
        boolean boolean21 = dateTimeZone19.isStandardOffset((long) 'a');
        org.joda.time.LocalDate localDate22 = org.joda.time.LocalDate.now(dateTimeZone19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter17.withZone(dateTimeZone19);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) 53628506, dateTimeZone19);
        boolean boolean25 = period2.equals((java.lang.Object) dateTimeZone19);
        long long27 = dateTimeZone19.previousTransition(1645455217096L);
        java.util.TimeZone timeZone28 = dateTimeZone19.toTimeZone();
        java.util.TimeZone.setDefault(timeZone28);
        int int30 = timeZone28.getDSTSavings();
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PT0.100S" + "'", str9, "PT0.100S");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1645455217096L + "'", long27 == 1645455217096L);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "GMT+14:53");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test14462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14462");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) 53661484);
        org.junit.Assert.assertNotNull(localTime1);
    }

    @Test
    public void test14463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14463");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = mutableDateTime1.copy();
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone4 = dateMidnight3.getZone();
        mutableDateTime1.setZoneRetainFields(dateTimeZone4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone4);
        org.joda.time.DateTime dateTime8 = dateTime6.minusWeeks(736);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(chronology9);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime10.copy();
        mutableDateTime10.addMinutes(0);
        mutableDateTime10.setSecondOfDay(21);
        org.joda.time.Chronology chronology16 = null;
        mutableDateTime10.setChronology(chronology16);
        mutableDateTime10.setMinuteOfHour((int) (short) 0);
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property21 = localTime20.minuteOfHour();
        org.joda.time.LocalTime localTime23 = localTime20.withMillisOfSecond(904);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateTime dateTime25 = localTime20.toDateTimeToday(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.plusMonths(10);
        org.joda.time.DateTime.Property property28 = dateTime25.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField29 = property28.getField();
        java.util.Locale locale30 = null;
        int int31 = dateTimeField29.getMaximumShortTextLength(locale30);
        java.util.Locale locale32 = java.util.Locale.ITALIAN;
        int int33 = dateTimeField29.getMaximumShortTextLength(locale32);
        mutableDateTime10.setRounding(dateTimeField29);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(readableDuration35, readableInstant36, periodType37);
        mutablePeriod38.addYears((int) (byte) 0);
        int int41 = mutablePeriod38.getMonths();
        mutablePeriod38.addMinutes((int) (byte) 0);
        mutablePeriod38.addMonths((int) 'x');
        mutableDateTime10.add((org.joda.time.ReadablePeriod) mutablePeriod38);
        org.joda.time.Chronology chronology47 = mutableDateTime10.getChronology();
        org.joda.time.DateTime dateTime48 = dateTime6.withChronology(chronology47);
        org.joda.time.DateTimeField dateTimeField49 = chronology47.era();
        org.joda.time.DurationField durationField50 = chronology47.years();
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 4 + "'", int31 == 4);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(durationField50);
    }

    @Test
    public void test14464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14464");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = mutableDateTime1.copy();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 1, chronology6);
        int int8 = localDate7.getDayOfYear();
        org.joda.time.LocalTime localTime9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = localDate7.toDateTime(localTime9, dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = localDate7.toDateMidnight(dateTimeZone12);
        org.joda.time.DateMidnight.Property property14 = dateMidnight13.yearOfEra();
        int int15 = dateMidnight13.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property16 = dateMidnight13.year();
        boolean boolean17 = mutableDateTime2.isBefore((org.joda.time.ReadableInstant) dateMidnight13);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime2.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(53619988);
        mutableDateTime2.setZoneRetainFields(dateTimeZone20);
        mutableDateTime2.addMonths(736);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(readableDuration24, readableInstant25, periodType26);
        mutablePeriod27.addYears((int) (byte) 0);
        int int30 = mutablePeriod27.getMonths();
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(readableDuration31, readableInstant32, periodType33);
        org.joda.time.ReadableDuration readableDuration35 = null;
        mutablePeriod34.add(readableDuration35);
        mutablePeriod34.addMonths((int) '#');
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((long) (short) 1, chronology40);
        int int42 = localDate41.getDayOfYear();
        org.joda.time.LocalTime localTime43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateTime dateTime45 = localDate41.toDateTime(localTime43, dateTimeZone44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateMidnight dateMidnight47 = localDate41.toDateMidnight(dateTimeZone46);
        org.joda.time.DateMidnight.Property property48 = dateMidnight47.yearOfEra();
        int int49 = dateMidnight47.getMinuteOfHour();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.Period period52 = new org.joda.time.Period((long) (byte) 100, chronology51);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime(chronology53);
        org.joda.time.MutableDateTime mutableDateTime55 = mutableDateTime54.copy();
        org.joda.time.Duration duration56 = period52.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime55);
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight47.plus((org.joda.time.ReadableDuration) duration56);
        mutablePeriod34.add((org.joda.time.ReadableDuration) duration56);
        mutablePeriod27.setPeriod((org.joda.time.ReadableDuration) duration56);
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone61 = dateMidnight60.getZone();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate((long) (short) 1, chronology63);
        java.lang.String str65 = localDate64.toString();
        org.joda.time.LocalDate localDate67 = localDate64.withYearOfEra((int) (byte) 100);
        org.joda.time.DateMidnight dateMidnight68 = dateMidnight60.withFields((org.joda.time.ReadablePartial) localDate67);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateMidnight dateMidnight71 = dateMidnight60.withField(dateTimeFieldType69, 842);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.Period period74 = new org.joda.time.Period((long) (byte) 100, chronology73);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.MutableDateTime mutableDateTime76 = new org.joda.time.MutableDateTime(chronology75);
        org.joda.time.MutableDateTime mutableDateTime77 = mutableDateTime76.copy();
        org.joda.time.Duration duration78 = period74.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime77);
        org.joda.time.Period period80 = period74.plusDays((int) (byte) 10);
        org.joda.time.Duration duration81 = period80.toStandardDuration();
        org.joda.time.DateMidnight dateMidnight82 = dateMidnight60.minus((org.joda.time.ReadableDuration) duration81);
        boolean boolean83 = duration56.isEqual((org.joda.time.ReadableDuration) duration81);
        mutableDateTime2.add((org.joda.time.ReadableDuration) duration81);
        org.joda.time.MutableDateTime.Property property85 = mutableDateTime2.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime86 = property85.getMutableDateTime();
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "1970-01-01" + "'", str65, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(dateMidnight68);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertNotNull(mutableDateTime77);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(dateMidnight82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(mutableDateTime86);
    }

    @Test
    public void test14465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14465");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        java.lang.String str3 = localDate2.toString();
        org.joda.time.LocalDate localDate5 = localDate2.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) (short) 1, chronology7);
        java.lang.String str9 = localDate8.toString();
        org.joda.time.LocalDate localDate11 = localDate8.withYearOfEra((int) (byte) 100);
        org.joda.time.LocalDate.Property property12 = localDate8.weekOfWeekyear();
        org.joda.time.DateTime dateTime13 = localDate8.toDateTimeAtCurrentTime();
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone15 = dateMidnight14.getZone();
        boolean boolean17 = dateTimeZone15.isStandardOffset((long) 'a');
        org.joda.time.DateTime dateTime18 = dateTime13.withZoneRetainFields(dateTimeZone15);
        org.joda.time.DateTime dateTime19 = localDate5.toDateTimeAtStartOfDay(dateTimeZone15);
        org.joda.time.DateTime.Property property20 = dateTime19.millisOfSecond();
        org.joda.time.DateTime dateTime22 = property20.setCopy(283);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) (short) 1, chronology24);
        java.lang.String str26 = localDate25.toString();
        org.joda.time.LocalDate localDate28 = localDate25.withYearOfEra((int) (byte) 100);
        int int29 = localDate25.getDayOfYear();
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) 53619708);
        org.joda.time.DateTime dateTime32 = localDate25.toDateTime((org.joda.time.ReadableInstant) mutableDateTime31);
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone34 = dateMidnight33.getZone();
        boolean boolean36 = dateTimeZone34.isStandardOffset((long) 'a');
        org.joda.time.LocalDate localDate37 = org.joda.time.LocalDate.now(dateTimeZone34);
        java.lang.String str39 = dateTimeZone34.getNameKey((long) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime40 = mutableDateTime31.toMutableDateTime(dateTimeZone34);
        java.util.Locale locale45 = new java.util.Locale("hi!", "Years", "1970-01-01");
        java.lang.String str46 = dateTimeZone34.getShortName((long) 53617440, locale45);
        java.lang.String str47 = dateTimeZone34.getID();
        org.joda.time.DateTime dateTime48 = dateTime22.withZoneRetainFields(dateTimeZone34);
        org.joda.time.MutableDateTime mutableDateTime49 = org.joda.time.MutableDateTime.now(dateTimeZone34);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01" + "'", str3, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-01" + "'", str9, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1970-01-01" + "'", str26, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(localDate37);
// flaky:         org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertEquals(locale45.toString(), "hi!_YEARS_1970-01-01");
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+14:53:39.988" + "'", str46, "+14:53:39.988");
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+14:53:39.988" + "'", str47, "+14:53:39.988");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(mutableDateTime49);
    }

    @Test
    public void test14466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14466");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property1 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime2 = property1.roundFloorCopy();
        org.joda.time.LocalTime localTime3 = property1.roundHalfEvenCopy();
        java.lang.String str4 = localTime3.toString();
        org.joda.time.Chronology chronology5 = localTime3.getChronology();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "05:57:00.000" + "'", str4, "05:57:00.000");
        org.junit.Assert.assertNotNull(chronology5);
    }

    @Test
    public void test14467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14467");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalDate localDate5 = localDate2.minusYears(53627214);
        org.joda.time.LocalDate.Property property6 = localDate5.year();
        org.joda.time.LocalDate localDate7 = property6.roundCeilingCopy();
        org.joda.time.LocalDate localDate8 = property6.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate10 = property6.addWrapFieldToCopy(694);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
    }

    @Test
    public void test14468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14468");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone1 = dateMidnight0.getZone();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) (short) 1, chronology3);
        java.lang.String str5 = localDate4.toString();
        org.joda.time.LocalDate localDate7 = localDate4.withYearOfEra((int) (byte) 100);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight0.withFields((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.LocalDate.Property property10 = localDate7.property(dateTimeFieldType9);
        org.joda.time.LocalDate localDate11 = property10.getLocalDate();
        org.joda.time.DateTimeField[] dateTimeFieldArray12 = localDate11.getFields();
        org.joda.time.LocalDate localDate14 = localDate11.withYear(371);
        int int15 = localDate11.getDayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeFieldArray12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5 + "'", int15 == 5);
    }

    @Test
    public void test14469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14469");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) (short) 1, chronology2);
        java.lang.String str4 = localDate3.toString();
        org.joda.time.LocalDate localDate6 = localDate3.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology7 = localDate6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.year();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.centuryOfEra();
        boolean boolean11 = dateTimeFieldType0.isSupported(chronology7);
        org.joda.time.DateTimeField dateTimeField12 = chronology7.year();
        org.joda.time.DateTimeField dateTimeField13 = chronology7.weekyear();
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone15 = dateMidnight14.getZone();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) (short) 1, chronology17);
        java.lang.String str19 = localDate18.toString();
        org.joda.time.LocalDate localDate21 = localDate18.withYearOfEra((int) (byte) 100);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight14.withFields((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.LocalDate.Property property24 = localDate21.property(dateTimeFieldType23);
        org.joda.time.LocalDate localDate25 = property24.getLocalDate();
        org.joda.time.LocalDate localDate26 = property24.roundHalfCeilingCopy();
        int int27 = localDate26.getDayOfWeek();
        org.joda.time.LocalDate localDate29 = localDate26.withYear(533);
        org.joda.time.LocalDate localDate31 = localDate29.plusMonths(53632);
        java.util.Locale locale33 = java.util.Locale.ITALY;
        java.util.Locale locale34 = java.util.Locale.JAPANESE;
        java.lang.String str35 = locale34.getDisplayCountry();
        java.lang.String str36 = locale33.getDisplayLanguage(locale34);
        java.lang.String str37 = dateTimeField13.getAsShortText((org.joda.time.ReadablePartial) localDate29, 0, locale33);
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime((long) 53619708);
        org.joda.time.DurationFieldType durationFieldType40 = org.joda.time.DurationFieldType.hours();
        mutableDateTime39.add(durationFieldType40, (int) (byte) 0);
        mutableDateTime39.setTime(47541L);
        mutableDateTime39.setYear(53618165);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime39.property(dateTimeFieldType47);
        java.lang.String str49 = dateTimeFieldType47.getName();
        boolean boolean50 = localDate29.isSupported(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1970-01-01" + "'", str19, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 5 + "'", int27 == 5);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u30a4\u30bf\u30ea\u30a2\u8a9e" + "'", str36, "\u30a4\u30bf\u30ea\u30a2\u8a9e");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "0" + "'", str37, "0");
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "minuteOfHour" + "'", str49, "minuteOfHour");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test14470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14470");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = mutableDateTime1.copy();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (short) 1, chronology6);
        int int8 = localDate7.getDayOfYear();
        org.joda.time.LocalTime localTime9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = localDate7.toDateTime(localTime9, dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = localDate7.toDateMidnight(dateTimeZone12);
        org.joda.time.DateMidnight.Property property14 = dateMidnight13.yearOfEra();
        int int15 = dateMidnight13.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property16 = dateMidnight13.year();
        boolean boolean17 = mutableDateTime2.isBefore((org.joda.time.ReadableInstant) dateMidnight13);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime2.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(53619988);
        mutableDateTime2.setZoneRetainFields(dateTimeZone20);
        int int22 = mutableDateTime2.getDayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((java.lang.Object) int22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 22 + "'", int22 == 22);
    }

    @Test
    public void test14471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14471");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = mutableDateTime1.copy();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime2.minuteOfDay();
        long long6 = property5.remainder();
        org.joda.time.MutableDateTime mutableDateTime8 = property5.set(842);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.add(0);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.minuteOfDay();
        mutableDateTime11.setMillis(49454L);
        org.joda.time.YearMonthDay yearMonthDay15 = new org.joda.time.YearMonthDay((java.lang.Object) mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(property5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 31195L + "'", long6 == 31195L);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test14472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14472");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime1 = timeOfDay0.toDateTimeToday();
        org.joda.time.DateTime dateTime3 = dateTime1.withMillisOfSecond(409);
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime1.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = property5.getField();
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeField6);
    }

    @Test
    public void test14473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14473");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) (short) 1, chronology2);
        int int4 = localDate3.getDayOfYear();
        org.joda.time.LocalTime localTime5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = localDate3.toDateTime(localTime5, dateTimeZone6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = localDate3.toDateMidnight(dateTimeZone8);
        org.joda.time.DateMidnight.Property property10 = dateMidnight9.yearOfEra();
        int int11 = dateMidnight9.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property12 = dateMidnight9.year();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight9.plusYears((int) ' ');
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((java.lang.Object) dateMidnight9);
        org.joda.time.LocalDate.Property property16 = localDate15.dayOfYear();
        org.joda.time.Chronology chronology17 = localDate15.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.seconds();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 53695827, chronology17);
        org.joda.time.DurationField durationField20 = chronology17.years();
        long long23 = durationField20.getMillis(984, (long) 53749370);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 31052073600000L + "'", long23 == 31052073600000L);
    }

    @Test
    public void test14474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14474");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setFirstDayOfWeek(53620623);
        org.joda.time.TimeOfDay timeOfDay3 = org.joda.time.TimeOfDay.fromCalendarFields(calendar0);
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property5 = localTime4.minuteOfHour();
        org.joda.time.LocalTime localTime7 = localTime4.withMillisOfSecond(904);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = localTime4.toDateTimeToday(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusMonths(10);
        org.joda.time.DateTime.Property property12 = dateTime9.minuteOfDay();
        org.joda.time.DateTime.Property property13 = dateTime9.year();
        boolean boolean14 = calendar0.before((java.lang.Object) dateTime9);
        org.joda.time.DateTime dateTime15 = dateTime9.withTimeAtStartOfDay();
        int int16 = dateTime9.getWeekyear();
        int int17 = dateTime9.getHourOfDay();
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property19 = localTime18.minuteOfHour();
        org.joda.time.LocalTime localTime21 = localTime18.withMillisOfSecond(904);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = localTime18.toDateTimeToday(dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime23.plusMonths(10);
        org.joda.time.DateTime.Property property26 = dateTime23.minuteOfDay();
        org.joda.time.DateTime.Property property27 = dateTime23.year();
        org.joda.time.DateTime dateTime29 = dateTime23.withWeekyear((-144832));
        org.joda.time.Instant instant30 = dateTime29.toInstant();
        org.joda.time.DateTime dateTime31 = instant30.toDateTimeISO();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) instant30);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645455771244,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+14:53:39.988,offset=53619988,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=53620623,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=5,HOUR_OF_DAY=5,MINUTE=56,SECOND=31,MILLISECOND=232,ZONE_OFFSET=53619988,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2022 + "'", int16 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(dateTime31);
    }

    @Test
    public void test14475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14475");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("");
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale.Builder builder5 = builder2.removeUnicodeLocaleAttribute("UTC");
        java.util.Locale.Builder builder6 = builder2.clearExtensions();
        java.util.Locale.Builder builder8 = builder2.setVariant("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder2.setVariant("2022-02-21T15:02:09.998");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 2022-02-21T15:02:09.998 [at index 5]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test14476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14476");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) (short) 1, chronology2);
        java.lang.String str4 = localDate3.toString();
        org.joda.time.LocalDate localDate6 = localDate3.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology7 = localDate6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay((long) (short) 1, chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.plusMonths(53617719);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(readableDuration11, readableInstant12, periodType13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        mutablePeriod14.add(readableDuration15);
        mutablePeriod14.addMonths((int) '#');
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(readableDuration19, readableInstant20, periodType21);
        org.joda.time.ReadableDuration readableDuration23 = null;
        mutablePeriod22.add(readableDuration23);
        mutablePeriod22.addMonths((int) '#');
        mutablePeriod14.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod22);
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay10.plus((org.joda.time.ReadablePeriod) mutablePeriod22);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) (byte) 100, chronology30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(chronology32);
        org.joda.time.MutableDateTime mutableDateTime34 = mutableDateTime33.copy();
        org.joda.time.Duration duration35 = period31.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime34);
        org.joda.time.Seconds seconds36 = period31.toStandardSeconds();
        org.joda.time.YearMonthDay yearMonthDay37 = yearMonthDay28.minus((org.joda.time.ReadablePeriod) seconds36);
        org.joda.time.LocalDate localDate38 = yearMonthDay37.toLocalDate();
        org.joda.time.LocalDate localDate40 = localDate38.plusMonths(53632583);
        int int41 = localDate40.getDayOfWeek();
        int int42 = localDate40.getYearOfCentury();
        org.joda.time.LocalDate.Property property43 = localDate40.dayOfYear();
        org.joda.time.LocalDate localDate44 = property43.roundHalfEvenCopy();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(seconds36);
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 98 + "'", int42 == 98);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDate44);
    }

    @Test
    public void test14477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14477");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(chronology2);
        int int4 = mutableDateTime3.getMillisOfSecond();
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone6 = dateMidnight5.getZone();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(dateTimeZone6);
        mutableDateTime3.setZoneRetainFields(dateTimeZone6);
        long long12 = dateTimeZone6.convertLocalToUTC((long) 2, false, (long) 10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(53619988);
        long long16 = dateTimeZone6.getMillisKeepLocal(dateTimeZone14, (long) 53702524);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(0L, dateTimeZone6);
        long long19 = dateTimeZone6.convertUTCToLocal(1519L);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(26484L, dateTimeZone6);
        long long22 = dateTimeZone6.nextTransition((long) 54128141);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 284 + "'", int4 == 284);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-53619986L) + "'", long12 == (-53619986L));
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 53702524L + "'", long16 == 53702524L);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 53621507L + "'", long19 == 53621507L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 54128141L + "'", long22 == 54128141L);
    }

    @Test
    public void test14478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14478");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean2 = localTime0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime4 = localTime0.withFields((org.joda.time.ReadablePartial) localTime3);
        java.lang.String str5 = localTime0.toString();
        org.joda.time.LocalTime localTime7 = localTime0.minusHours(773);
        org.joda.time.Chronology chronology8 = localTime0.getChronology();
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology8);
        org.joda.time.DateTime dateTime12 = dateTime10.withMillisOfDay(53632562);
        org.joda.time.DateTime dateTime14 = dateTime10.minusYears((-1027049));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((java.lang.Object) (-1027049));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localTime4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "05:56:31.295" + "'", str5, "05:56:31.295");
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test14479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14479");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.withHourOfDay((int) (short) 10);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.hours();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay0.withFieldAdded(durationFieldType3, 53625645);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay0.plusMillis(53659661);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(readableDuration8, readableInstant9, periodType10);
        org.joda.time.ReadableDuration readableDuration12 = null;
        mutablePeriod11.add(readableDuration12);
        mutablePeriod11.addMonths((int) '#');
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(readableDuration16, readableInstant17, periodType18);
        org.joda.time.ReadableDuration readableDuration20 = null;
        mutablePeriod19.add(readableDuration20);
        mutablePeriod19.addMonths((int) '#');
        mutablePeriod11.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod19);
        int int25 = mutablePeriod19.getMonths();
        org.joda.time.TimeOfDay timeOfDay26 = timeOfDay7.plus((org.joda.time.ReadablePeriod) mutablePeriod19);
        org.joda.time.TimeOfDay.Property property27 = timeOfDay26.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay29 = timeOfDay26.minusSeconds(871);
        org.joda.time.TimeOfDay timeOfDay31 = timeOfDay29.plusMillis(54090071);
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(timeOfDay31);
    }

    @Test
    public void test14480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14480");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusYears((int) (short) 10);
        org.joda.time.DateTime dateTime10 = dateTime6.withYear(53639477);
        org.joda.time.DateTime dateTime12 = dateTime10.minusWeeks(53636547);
        org.joda.time.DateTime dateTime13 = dateTime10.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime14 = dateTime10.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime15 = dateTime10.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime17 = dateTime15.plusMinutes(53668698);
        org.joda.time.DateTime.Property property18 = dateTime17.secondOfDay();
        org.joda.time.DateTime dateTime20 = property18.setCopy(19);
        org.joda.time.DateTime dateTime22 = property18.addToCopy(34694L);
        org.joda.time.DateTime dateTime24 = dateTime22.withMillisOfDay(53790700);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test14481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14481");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((long) (short) 1, chronology4);
        java.lang.String str6 = localDate5.toString();
        org.joda.time.LocalDate localDate8 = localDate5.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology9 = localDate8.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.era();
        long long14 = chronology9.add((long) 407, (long) 53620623, 53778822);
        org.joda.time.DateTimeField dateTimeField15 = chronology9.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay(53817268, 53792915, 25, chronology9);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53817268 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01" + "'", str6, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 2883653939846513L + "'", long14 == 2883653939846513L);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test14482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14482");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(21367554, 54069181, 197, 54014913, 1030767, 441);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54014913 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14483");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(53636547);
        java.util.Locale locale3 = java.util.Locale.ITALIAN;
        java.lang.String str4 = dateTimeZone1.getName((long) 53939945, locale3);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+14:53:56.547" + "'", str4, "+14:53:56.547");
    }

    @Test
    public void test14484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14484");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone1 = dateMidnight0.getZone();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) (short) 1, chronology3);
        java.lang.String str5 = localDate4.toString();
        org.joda.time.LocalDate localDate7 = localDate4.withYearOfEra((int) (byte) 100);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight0.withFields((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate.Property property9 = localDate7.monthOfYear();
        org.joda.time.LocalDate localDate11 = localDate7.withYear(7);
        int int12 = localDate11.getEra();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01" + "'", str5, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test14485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14485");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableDuration0, readableInstant1, periodType2);
        mutablePeriod3.addYears((int) (byte) 0);
        int int6 = mutablePeriod3.getMonths();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(readableDuration7, readableInstant8, periodType9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        mutablePeriod10.add(readableDuration11);
        mutablePeriod10.addMonths((int) '#');
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) (short) 1, chronology16);
        int int18 = localDate17.getDayOfYear();
        org.joda.time.LocalTime localTime19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = localDate17.toDateTime(localTime19, dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = localDate17.toDateMidnight(dateTimeZone22);
        org.joda.time.DateMidnight.Property property24 = dateMidnight23.yearOfEra();
        int int25 = dateMidnight23.getMinuteOfHour();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period((long) (byte) 100, chronology27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(chronology29);
        org.joda.time.MutableDateTime mutableDateTime31 = mutableDateTime30.copy();
        org.joda.time.Duration duration32 = period28.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime31);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight23.plus((org.joda.time.ReadableDuration) duration32);
        mutablePeriod10.add((org.joda.time.ReadableDuration) duration32);
        mutablePeriod3.setPeriod((org.joda.time.ReadableDuration) duration32);
        mutablePeriod3.setMillis((-144832));
        mutablePeriod3.addWeeks(53940656);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(dateMidnight33);
    }

    @Test
    public void test14486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14486");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("");
        java.util.Locale locale3 = builder0.build();
        java.util.Locale.Builder builder5 = builder0.setLanguage("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder0.setVariant("Property[minuteOfHour]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: Property[minuteOfHour] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test14487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14487");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 53619248, (long) 1);
        mutablePeriod2.add((int) (byte) 10, 904, 53619708, 47, 10, (-292275054), 0, 342);
        mutablePeriod2.addHours(718);
        org.joda.time.format.PeriodFormatter periodFormatter14 = null;
        java.lang.String str15 = mutablePeriod2.toString(periodFormatter14);
        mutablePeriod2.addMonths(53628506);
        mutablePeriod2.addDays(2023);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(periodType20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((java.lang.Object) periodType20, dateTimeZone22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.plusYears((int) '#');
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.plusDays(465);
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.dayOfYear();
        java.lang.Object obj29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(chronology30);
        int int32 = mutableDateTime31.getMillisOfSecond();
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone34 = dateMidnight33.getZone();
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now(dateTimeZone34);
        mutableDateTime31.setZoneRetainFields(dateTimeZone34);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(obj29, dateTimeZone34);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime25, dateTimeZone34);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.plusHours(53660764);
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.time();
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime((long) 53619708);
        org.joda.time.DurationFieldType durationFieldType44 = org.joda.time.DurationFieldType.hours();
        mutableDateTime43.add(durationFieldType44, (int) (byte) 0);
        int int47 = periodType41.indexOf(durationFieldType44);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime38.withFieldAdded(durationFieldType44, 50);
        int int50 = mutablePeriod2.get(durationFieldType44);
        mutablePeriod2.setMinutes(694);
        mutablePeriod2.setSeconds(696);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "P10Y904M53619708W47DT714H-292275107M-38.905S" + "'", str15, "P10Y904M53619708W47DT714H-292275107M-38.905S");
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 430 + "'", int32 == 430);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 714 + "'", int50 == 714);
    }

    @Test
    public void test14488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14488");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean2 = localTime0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalTime localTime4 = localTime0.minusMinutes(409);
        org.joda.time.LocalTime localTime6 = localTime0.minusMinutes(53620134);
        org.joda.time.LocalTime localTime8 = localTime0.plusHours(70);
        org.joda.time.LocalTime localTime10 = localTime8.minusMillis(53950749);
        java.lang.String str11 = localTime10.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "12:57:20.698" + "'", str11, "12:57:20.698");
    }

    @Test
    public void test14489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14489");
        org.joda.time.PeriodType periodType0 = null;
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((java.lang.Object) periodType0, dateTimeZone2);
        int int4 = localDateTime3.getDayOfMonth();
        int int5 = localDateTime3.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.weekyear();
        java.lang.String str7 = localDateTime3.toString();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.plusMinutes(53619708);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime3.plusDays(53626705);
        org.joda.time.LocalDateTime.Property property12 = localDateTime3.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime3.plusYears(486);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusSeconds(53965279);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 21391457 + "'", int5 == 21391457);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022-02-22T05:56:31.457" + "'", str7, "2022-02-22T05:56:31.457");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test14490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14490");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withDefaultYear(8);
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone7 = dateMidnight6.getZone();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter2.withZone(dateTimeZone7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withDefaultYear(53639477);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 865);
        org.joda.time.Chronology chronology14 = dateTimeFormatter2.getChronolgy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate16 = dateTimeFormatter2.parseLocalDate("2022-02-21T14:56:18.179");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNull(chronology14);
    }

    @Test
    public void test14491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14491");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) (short) 1, chronology2);
        java.lang.String str4 = localDate3.toString();
        org.joda.time.LocalDate localDate6 = localDate3.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology7 = localDate6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay((long) (short) 1, chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.plusMonths(53617719);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone12 = dateMidnight11.getZone();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (short) 1, chronology14);
        java.lang.String str16 = localDate15.toString();
        org.joda.time.LocalDate localDate18 = localDate15.withYearOfEra((int) (byte) 100);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight11.withFields((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight11.withField(dateTimeFieldType20, 842);
        org.joda.time.YearMonthDay.Property property23 = yearMonthDay8.property(dateTimeFieldType20);
        org.joda.time.YearMonthDay.Property property24 = yearMonthDay8.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay26 = property24.addWrapFieldToCopy(15);
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay26.plusMonths(53636825);
        java.lang.String str29 = yearMonthDay28.toString();
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay28.minusYears(53994707);
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay28.plusYears(870);
        org.joda.time.Interval interval34 = yearMonthDay33.toInterval();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01" + "'", str16, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "4471705-09-01" + "'", str29, "4471705-09-01");
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(interval34);
    }

    @Test
    public void test14492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14492");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("2022-02-21T15:01:28.670Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-21T15:01:28.670Z\" is malformed at \"Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14493");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(chronology0);
        org.joda.time.MutableDateTime mutableDateTime2 = mutableDateTime1.copy();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        mutableDateTime2.setZone(dateTimeZone3);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime2.minuteOfDay();
        long long6 = property5.remainder();
        org.joda.time.MutableDateTime mutableDateTime8 = property5.set(842);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.add(0);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = property12.getMutableDateTime();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) (short) 1, chronology18);
        java.lang.String str20 = localDate19.toString();
        org.joda.time.LocalDate localDate22 = localDate19.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology23 = localDate22.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.eras();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(100, 12, (int) (short) 1, chronology23);
        org.joda.time.DateTimeField dateTimeField26 = chronology23.year();
        java.util.Locale locale28 = java.util.Locale.CANADA;
        java.lang.String str30 = locale28.getExtension('a');
        java.lang.String str31 = dateTimeField26.getAsText((long) 53617440, locale28);
        java.util.Locale locale34 = new java.util.Locale("2022-02-21T14:53:45.094Z");
        java.lang.String str35 = dateTimeField26.getAsShortText(5, locale34);
        java.lang.String str36 = property12.getAsShortText(locale34);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(property5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 31518L + "'", long6 == 31518L);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1970-01-01" + "'", str20, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_CA");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1970" + "'", str31, "1970");
        org.junit.Assert.assertEquals(locale34.toString(), "2022-02-21t14:53:45.094z");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "5" + "'", str35, "5");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "842" + "'", str36, "842");
    }

    @Test
    public void test14494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14494");
        java.lang.Object obj0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property2 = localTime1.minuteOfHour();
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone4 = dateMidnight3.getZone();
        long long5 = property2.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight3);
        org.joda.time.DateMidnight.Property property6 = dateMidnight3.dayOfWeek();
        org.joda.time.DateMidnight.Property property7 = dateMidnight3.monthOfYear();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime9.copy();
        mutableDateTime9.addMinutes(0);
        java.lang.String str13 = mutableDateTime9.toString();
        int int14 = mutableDateTime9.getYearOfEra();
        org.joda.time.Chronology chronology15 = mutableDateTime9.getChronology();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight3.withChronology(chronology15);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime19 = dateTime17.withWeekyear((int) (short) 100);
        org.joda.time.DateTime dateTime21 = dateTime19.minusWeeks((int) '4');
        org.joda.time.DateTime dateTime23 = dateTime21.minusMillis(53618333);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(readableDuration24, readableInstant25, periodType26);
        org.joda.time.ReadableDuration readableDuration28 = null;
        mutablePeriod27.add(readableDuration28);
        mutablePeriod27.addSeconds(53617440);
        org.joda.time.DateTime dateTime32 = dateTime21.plus((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.Chronology chronology33 = dateTime21.getChronology();
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight3.withChronology(chronology33);
        org.joda.time.DateTimeField dateTimeField35 = chronology33.era();
        org.joda.time.TimeOfDay timeOfDay36 = new org.joda.time.TimeOfDay(obj0, chronology33);
        org.joda.time.TimeOfDay timeOfDay37 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay39 = timeOfDay37.withHourOfDay((int) (short) 10);
        org.joda.time.DurationFieldType durationFieldType40 = org.joda.time.DurationFieldType.hours();
        org.joda.time.TimeOfDay timeOfDay42 = timeOfDay37.withFieldAdded(durationFieldType40, 53625645);
        org.joda.time.TimeOfDay timeOfDay44 = timeOfDay37.plusHours((int) '4');
        org.joda.time.TimeOfDay.Property property45 = timeOfDay37.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay46 = property45.withMaximumValue();
        int int47 = property45.get();
        org.joda.time.DateTimeField dateTimeField48 = property45.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = property45.getFieldType();
        org.joda.time.DurationFieldType durationFieldType50 = dateTimeFieldType49.getDurationType();
        org.joda.time.TimeOfDay timeOfDay52 = timeOfDay36.withFieldAdded(durationFieldType50, 871);
        int int53 = timeOfDay36.getSecondOfMinute();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-27423549L) + "'", long5 == (-27423549L));
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime10);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022-02-22T05:56:31.532+14:53:39.988" + "'", str13, "2022-02-22T05:56:31.532+14:53:39.988");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(timeOfDay39);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertNotNull(timeOfDay42);
        org.junit.Assert.assertNotNull(timeOfDay44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(timeOfDay46);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 56 + "'", int47 == 56);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertNotNull(timeOfDay52);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 31 + "'", int53 == 31);
    }

    @Test
    public void test14495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14495");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        java.lang.String str3 = localDate2.toString();
        org.joda.time.LocalDate localDate5 = localDate2.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology6 = localDate5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfCentury();
        org.joda.time.DurationField durationField9 = chronology6.centuries();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.secondOfMinute();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) (short) 1, chronology14);
        int int16 = localDate15.getDayOfYear();
        org.joda.time.LocalTime localTime17 = null;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = localDate15.toDateTime(localTime17, dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = localDate15.toDateMidnight(dateTimeZone20);
        org.joda.time.DateMidnight.Property property22 = dateMidnight21.yearOfEra();
        int int23 = dateMidnight21.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property24 = dateMidnight21.year();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight21.withMillis((long) ' ');
        int int27 = dateMidnight26.getYear();
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight26.minus((long) 32769);
        org.joda.time.DateMidnight.Property property30 = dateMidnight29.dayOfYear();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period((long) (byte) 100, chronology32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(chronology34);
        org.joda.time.MutableDateTime mutableDateTime36 = mutableDateTime35.copy();
        org.joda.time.Duration duration37 = period33.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime36);
        org.joda.time.Period period39 = period33.plusDays((int) (byte) 10);
        int int40 = period39.getHours();
        org.joda.time.Period period42 = period39.plusMonths(2);
        org.joda.time.Period period44 = period39.minusMonths(12);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight29.minus((org.joda.time.ReadablePeriod) period39);
        org.joda.time.DateMidnight.Property property46 = dateMidnight45.monthOfYear();
        java.util.Locale locale49 = new java.util.Locale("2022-02-21T14:54:12.589", "PT0.100S");
        java.util.Set<java.lang.Character> charSet50 = locale49.getExtensionKeys();
        java.util.Locale locale51 = java.util.Locale.ITALY;
        java.lang.String str52 = locale51.getCountry();
        java.lang.String str53 = locale49.getDisplayCountry(locale51);
        java.lang.String str54 = property46.getAsText(locale51);
        // The following exception was thrown during execution in test generation
        try {
            long long55 = dateTimeField10.set((long) 53824907, "United Kingdom", locale51);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"United Kingdom\" for secondOfMinute is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "1970-01-01" + "'", str3, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1970 + "'", int27 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertEquals(locale49.toString(), "2022-02-21t14:54:12.589_PT0.100S");
        org.junit.Assert.assertNotNull(charSet50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "IT" + "'", str52, "IT");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "PT0.100S" + "'", str53, "PT0.100S");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "dicembre" + "'", str54, "dicembre");
    }

    @Test
    public void test14496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14496");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalDate.Property property4 = localDate2.weekOfWeekyear();
        org.joda.time.LocalDate localDate5 = property4.withMaximumValue();
        org.joda.time.LocalDate localDate6 = property4.withMaximumValue();
        org.joda.time.DateTimeField dateTimeField7 = property4.getField();
        java.lang.String str9 = dateTimeField7.getAsShortText((long) 53878588);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) (short) 1, chronology11);
        java.lang.String str13 = localDate12.toString();
        org.joda.time.LocalDate localDate15 = localDate12.plusWeeks(773);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) (short) 1, chronology18);
        java.lang.String str20 = localDate19.toString();
        org.joda.time.LocalDate localDate22 = localDate19.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology23 = localDate22.getChronology();
        org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay((long) (short) 1, chronology23);
        org.joda.time.YearMonthDay yearMonthDay26 = yearMonthDay24.plusMonths(53617719);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(readableDuration27, readableInstant28, periodType29);
        org.joda.time.ReadableDuration readableDuration31 = null;
        mutablePeriod30.add(readableDuration31);
        mutablePeriod30.addMonths((int) '#');
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(readableDuration35, readableInstant36, periodType37);
        org.joda.time.ReadableDuration readableDuration39 = null;
        mutablePeriod38.add(readableDuration39);
        mutablePeriod38.addMonths((int) '#');
        mutablePeriod30.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod38);
        org.joda.time.YearMonthDay yearMonthDay44 = yearMonthDay26.plus((org.joda.time.ReadablePeriod) mutablePeriod38);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.Period period47 = new org.joda.time.Period((long) (byte) 100, chronology46);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime(chronology48);
        org.joda.time.MutableDateTime mutableDateTime50 = mutableDateTime49.copy();
        org.joda.time.Duration duration51 = period47.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime50);
        org.joda.time.Seconds seconds52 = period47.toStandardSeconds();
        org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay44.minus((org.joda.time.ReadablePeriod) seconds52);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.Period period56 = new org.joda.time.Period((long) (byte) 100, chronology55);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutableDateTime mutableDateTime58 = new org.joda.time.MutableDateTime(chronology57);
        org.joda.time.MutableDateTime mutableDateTime59 = mutableDateTime58.copy();
        org.joda.time.Duration duration60 = period56.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime59);
        int int61 = period56.size();
        org.joda.time.format.PeriodFormatter periodFormatter62 = null;
        java.lang.String str63 = period56.toString(periodFormatter62);
        int int64 = period56.getSeconds();
        org.joda.time.YearMonthDay yearMonthDay66 = yearMonthDay44.withPeriodAdded((org.joda.time.ReadablePeriod) period56, 2);
        int[] intArray67 = yearMonthDay44.getValues();
        int int68 = dateTimeField7.getMaximumValue((org.joda.time.ReadablePartial) localDate12, intArray67);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate70 = localDate12.withEra(53998105);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53998105 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1" + "'", str9, "1");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-01-01" + "'", str13, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1970-01-01" + "'", str20, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(seconds52);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(mutableDateTime59);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 8 + "'", int61 == 8);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "PT0.100S" + "'", str63, "PT0.100S");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay66);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[4470116, 3, 1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 53 + "'", int68 == 53);
    }

    @Test
    public void test14497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14497");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (short) 1, chronology1);
        int int3 = localDate2.getDayOfYear();
        org.joda.time.LocalTime localTime4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateTime dateTime6 = localDate2.toDateTime(localTime4, dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = localDate2.toDateMidnight(dateTimeZone7);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.yearOfEra();
        int int10 = dateMidnight8.getMinuteOfHour();
        org.joda.time.Interval interval11 = dateMidnight8.toInterval();
        org.joda.time.MutableDateTime mutableDateTime12 = dateMidnight8.toMutableDateTime();
        org.joda.time.DateMidnight.Property property13 = dateMidnight8.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight14 = property13.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight15 = property13.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight17 = property13.addWrapFieldToCopy(53656199);
        org.joda.time.DateMidnight dateMidnight18 = property13.roundHalfEvenCopy();
        org.joda.time.DateMidnight.Property property19 = dateMidnight18.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight21 = dateMidnight18.withYearOfCentury(53677939);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53677939 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test14498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14498");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) (short) 1, chronology2);
        java.lang.String str4 = localDate3.toString();
        org.joda.time.LocalDate localDate6 = localDate3.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology7 = localDate6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay((long) (short) 1, chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.plusMonths(53617719);
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay8.withYear(35);
        org.joda.time.YearMonthDay.Property property13 = yearMonthDay8.year();
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(100L);
        java.lang.String str16 = mutableDateTime15.toString();
        mutableDateTime15.addYears(12);
        boolean boolean19 = mutableDateTime15.isBeforeNow();
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime15.copy();
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone22 = dateMidnight21.getZone();
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight21.plusYears(53619079);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(chronology25);
        int int27 = mutableDateTime26.getMillisOfSecond();
        boolean boolean28 = dateMidnight21.isEqual((org.joda.time.ReadableInstant) mutableDateTime26);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) (short) 1, chronology30);
        int int32 = localDate31.getDayOfYear();
        org.joda.time.LocalTime localTime33 = null;
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = localDate31.toDateTime(localTime33, dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = localDate31.toDateMidnight(dateTimeZone36);
        org.joda.time.DateMidnight.Property property38 = dateMidnight37.yearOfEra();
        int int39 = dateMidnight37.getMinuteOfHour();
        org.joda.time.DateMidnight.Property property40 = dateMidnight37.year();
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight37.plusYears((int) ' ');
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((java.lang.Object) dateMidnight37);
        boolean boolean44 = mutableDateTime26.isEqual((org.joda.time.ReadableInstant) dateMidnight37);
        java.lang.Object obj45 = null;
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((long) (short) 1, chronology48);
        java.lang.String str50 = localDate49.toString();
        org.joda.time.LocalDate localDate52 = localDate49.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology53 = localDate52.getChronology();
        org.joda.time.YearMonthDay yearMonthDay54 = new org.joda.time.YearMonthDay((long) (short) 1, chronology53);
        org.joda.time.YearMonthDay yearMonthDay56 = yearMonthDay54.plusMonths(53617719);
        int int57 = yearMonthDay54.getDayOfMonth();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate((long) (short) 1, chronology59);
        java.lang.String str61 = localDate60.toString();
        org.joda.time.LocalDate localDate63 = localDate60.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology64 = localDate63.getChronology();
        org.joda.time.DateTimeField dateTimeField65 = chronology64.yearOfEra();
        org.joda.time.YearMonthDay yearMonthDay66 = yearMonthDay54.withChronologyRetainFields(chronology64);
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(obj45, chronology64);
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.PeriodType periodType70 = null;
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod(readableDuration68, readableInstant69, periodType70);
        int int72 = mutablePeriod71.getMinutes();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.LocalDate localDate76 = new org.joda.time.LocalDate((long) (short) 1, chronology75);
        java.lang.String str77 = localDate76.toString();
        org.joda.time.LocalDate localDate79 = localDate76.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology80 = localDate79.getChronology();
        org.joda.time.DateTimeField dateTimeField81 = chronology80.clockhourOfDay();
        org.joda.time.MutableDateTime mutableDateTime82 = new org.joda.time.MutableDateTime(chronology80);
        mutablePeriod71.setPeriod((long) 53617649, chronology80);
        org.joda.time.MutableDateTime mutableDateTime84 = dateTime67.toMutableDateTime(chronology80);
        mutableDateTime26.setChronology(chronology80);
        int int86 = mutableDateTime15.compareTo((org.joda.time.ReadableInstant) mutableDateTime26);
        int int87 = property13.compareTo((org.joda.time.ReadableInstant) mutableDateTime26);
        mutableDateTime26.addWeeks(54040147);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(property13);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01T14:53:40.088+14:53:39.988" + "'", str16, "1970-01-01T14:53:40.088+14:53:39.988");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateMidnight24);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 616 + "'", int27 == 616);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "1970-01-01" + "'", str50, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "1970-01-01" + "'", str61, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(yearMonthDay66);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "1970-01-01" + "'", str77, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate79);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(mutableDateTime84);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
    }

    @Test
    public void test14499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14499");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) (short) 1, chronology2);
        java.lang.String str4 = localDate3.toString();
        org.joda.time.LocalDate localDate6 = localDate3.withYearOfEra((int) (byte) 100);
        org.joda.time.Chronology chronology7 = localDate6.getChronology();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay((long) (short) 1, chronology7);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.plusMonths(53617719);
        int int11 = yearMonthDay8.getDayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay8.plusDays(22);
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay8.withYear(53644151);
        org.joda.time.YearMonthDay.Property property16 = yearMonthDay8.monthOfYear();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) (short) 1, chronology18);
        java.lang.String str20 = localDate19.toString();
        org.joda.time.LocalDate localDate22 = localDate19.withYearOfEra((int) (byte) 100);
        int int23 = localDate19.getDayOfYear();
        org.joda.time.LocalDate localDate25 = localDate19.withWeekyear(3);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(chronology26);
        mutableDateTime27.addMinutes(904);
        mutableDateTime27.addWeekyears((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        mutableDateTime27.setZoneRetainFields(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = localDate25.toDateTimeAtMidnight(dateTimeZone32);
        boolean boolean35 = property16.equals((java.lang.Object) dateTimeZone32);
        java.lang.String str36 = property16.getAsShortText();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01" + "'", str4, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1970-01-01" + "'", str20, "1970-01-01");
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Jan" + "'", str36, "Jan");
    }

    @Test
    public void test14500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest28.test14500");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(768, 0, 1970, 16, 53619988, 1, 32772, 7);
        org.joda.time.Period period10 = org.joda.time.Period.weeks((int) '4');
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.years();
        java.lang.String str12 = periodType11.getName();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(periodType11);
        org.joda.time.Period period14 = period10.plus((org.joda.time.ReadablePeriod) mutablePeriod13);
        mutablePeriod8.setPeriod((org.joda.time.ReadablePeriod) period10);
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay();
        org.joda.time.DateTime dateTime17 = timeOfDay16.toDateTimeToday();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = timeOfDay16.getFieldType(0);
        java.lang.String str20 = dateTimeFieldType19.toString();
        org.joda.time.DurationFieldType durationFieldType21 = dateTimeFieldType19.getRangeDurationType();
        boolean boolean22 = mutablePeriod8.isSupported(durationFieldType21);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Years" + "'", str12, "Years");
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hourOfDay" + "'", str20, "hourOfDay");
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }
}

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest8 {

    public static boolean debug = false;

    @Test
    public void test04001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04001");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("T00:01:00.000");
        java.util.TimeZone.setDefault(timeZone1);
        java.time.ZoneId zoneId3 = timeZone1.toZoneId();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(zoneId3);
    }

    @Test
    public void test04002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04002");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.plus((long) 2);
        org.joda.time.MutableDateTime mutableDateTime3 = instant2.toMutableDateTimeISO();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        mutableDateTime3.add(readablePeriod4, (int) ' ');
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime14 = timeOfDay11.toDateTime((org.joda.time.ReadableInstant) instant13);
        org.joda.time.Chronology chronology15 = instant13.getChronology();
        org.joda.time.TimeOfDay timeOfDay18 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant20 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime21 = timeOfDay18.toDateTime((org.joda.time.ReadableInstant) instant20);
        int[] intArray23 = chronology15.get((org.joda.time.ReadablePartial) timeOfDay18, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(0L, chronology15);
        org.joda.time.DurationField durationField25 = chronology15.weeks();
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((-86340000L), chronology15);
        org.joda.time.MutableDateTime mutableDateTime27 = org.joda.time.MutableDateTime.now(chronology15);
        org.joda.time.DateTimeField dateTimeField28 = chronology15.dayOfWeek();
        mutableDateTime3.setChronology(chronology15);
        java.lang.String str30 = mutableDateTime3.toString();
        mutableDateTime3.setWeekyear(0);
        int int33 = mutableDateTime3.getDayOfWeek();
        org.joda.time.Instant instant35 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone36 = instant35.getZone();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone36);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.DateTime dateTime40 = dateTime37.withDurationAdded(readableDuration38, (int) (byte) 0);
        org.joda.time.DateTime dateTime42 = dateTime37.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime44 = dateTime42.plusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime46 = dateTime44.plusDays(2);
        org.joda.time.DateTime dateTime48 = dateTime46.minusMillis((int) (short) 0);
        org.joda.time.DateTime dateTime50 = dateTime48.withWeekyear(35);
        org.joda.time.DateTimeZone dateTimeZone51 = dateTime48.getZone();
        org.joda.time.DateTime dateTime53 = dateTime48.withCenturyOfEra(0);
        org.joda.time.Interval interval56 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval59 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean60 = interval56.abuts((org.joda.time.ReadableInterval) interval59);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone62);
        org.joda.time.DateMidnight dateMidnight65 = dateMidnight63.withWeekyear(2);
        boolean boolean66 = interval56.isBefore((org.joda.time.ReadableInstant) dateMidnight63);
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.Interval interval68 = interval56.withDurationAfterStart(readableDuration67);
        org.joda.time.Duration duration69 = interval56.toDuration();
        long long70 = duration69.getMillis();
        org.joda.time.DateTime dateTime71 = dateTime48.minus((org.joda.time.ReadableDuration) duration69);
        org.joda.time.MutableDateTime mutableDateTime72 = new org.joda.time.MutableDateTime();
        org.joda.time.MutableDateTime.Property property73 = mutableDateTime72.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay77 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant79 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime80 = timeOfDay77.toDateTime((org.joda.time.ReadableInstant) instant79);
        org.joda.time.Chronology chronology81 = instant79.getChronology();
        org.joda.time.DateMidnight dateMidnight82 = new org.joda.time.DateMidnight((java.lang.Object) (-11491200000L), chronology81);
        org.joda.time.DateTimeField dateTimeField83 = chronology81.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField84 = chronology81.millisOfSecond();
        mutableDateTime72.setRounding(dateTimeField84);
        org.joda.time.Interval interval86 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration69, (org.joda.time.ReadableInstant) mutableDateTime72);
        mutableDateTime3.add((org.joda.time.ReadableDuration) duration69, 53937);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(dateTimeField28);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022-02-21T15:01:42.275Z" + "'", str30, "2022-02-21T15:01:42.275Z");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
    }

    @Test
    public void test04003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04003");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = localDate0.toDateMidnight(dateTimeZone3);
        org.joda.time.DateTime dateTime5 = localDate0.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property6 = localDate0.yearOfEra();
        org.joda.time.LocalDate.Property property7 = localDate0.year();
        org.joda.time.LocalDate localDate8 = property7.roundCeilingCopy();
        java.util.Date date9 = localDate8.toDate();
        org.joda.time.LocalDate localDate11 = localDate8.withWeekOfWeekyear(14);
        org.joda.time.LocalDate localDate13 = localDate8.plusMonths(0);
        int int14 = localDate8.size();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Jan 01 00:00:00 GMT 2023");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
    }

    @Test
    public void test04004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04004");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = localDate0.toDateMidnight(dateTimeZone3);
        org.joda.time.DateTime dateTime5 = localDate0.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime6 = localDate0.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate8 = localDate0.minusWeeks((int) 'a');
        org.joda.time.LocalDate.Property property9 = localDate8.weekOfWeekyear();
        org.joda.time.LocalDate localDate10 = property9.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate11 = property9.withMinimumValue();
        org.joda.time.LocalDate localDate12 = property9.withMinimumValue();
        int int13 = localDate12.size();
        org.joda.time.LocalDate localDate15 = localDate12.minusDays((-457079));
        org.joda.time.LocalDate localDate17 = localDate15.minusMonths(42);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate19 = localDate15.withMonthOfYear(195);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 195 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
    }

    @Test
    public void test04005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04005");
        java.util.Date date3 = new java.util.Date(0, (int) '4', 0);
        int int4 = date3.getMinutes();
        java.lang.String str5 = date3.toGMTString();
        long long6 = date3.getTime();
        java.util.Date date10 = new java.util.Date(0, (int) '4', 0);
        int int11 = date10.getHours();
        boolean boolean12 = date3.before(date10);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean15 = localDate13.isSupported(dateTimeFieldType14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = localDate13.toDateMidnight(dateTimeZone16);
        org.joda.time.DateTime dateTime18 = localDate13.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property19 = localDate13.yearOfEra();
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.millis();
        boolean boolean21 = localDate13.isSupported(durationFieldType20);
        int int22 = localDate13.getMonthOfYear();
        org.joda.time.LocalDate.Property property23 = localDate13.dayOfMonth();
        int[] intArray24 = localDate13.getValues();
        boolean boolean25 = date10.equals((java.lang.Object) localDate13);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Apr 30 00:00:00 GMT 1904");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "30 Apr 1904 00:00:00 GMT" + "'", str5, "30 Apr 1904 00:00:00 GMT");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-2072476800000L) + "'", long6 == (-2072476800000L));
        org.junit.Assert.assertEquals(date10.toString(), "Sat Apr 30 00:00:00 GMT 1904");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[2022, 2, 21]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test04006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04006");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.Chronology chronology1 = localDateTime0.getChronology();
        int int2 = localDateTime0.size();
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.weekyear();
        org.joda.time.LocalDateTime localDateTime4 = property3.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withYearOfEra((int) (byte) 1);
        org.joda.time.Interval interval9 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean13 = interval9.abuts((org.joda.time.ReadableInterval) interval12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.withWeekyear(2);
        boolean boolean19 = interval9.isBefore((org.joda.time.ReadableInstant) dateMidnight16);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Interval interval21 = interval9.withDurationAfterStart(readableDuration20);
        org.joda.time.Duration duration22 = interval9.toDuration();
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval28 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean29 = interval25.abuts((org.joda.time.ReadableInterval) interval28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.withWeekyear(2);
        boolean boolean35 = interval25.isBefore((org.joda.time.ReadableInstant) dateMidnight32);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Interval interval37 = interval25.withDurationAfterStart(readableDuration36);
        org.joda.time.Duration duration38 = interval25.toDuration();
        int int39 = duration22.compareTo((org.joda.time.ReadableDuration) duration38);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime4.minus((org.joda.time.ReadableDuration) duration22);
        int int41 = localDateTime4.getDayOfMonth();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 18 + "'", int41 == 18);
    }

    @Test
    public void test04007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04007");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears((int) '4');
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfCentury();
        int int4 = localDateTime0.getDayOfYear();
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime0.withFieldAdded(durationFieldType5, 23);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime0.minusHours(8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime0.minusDays(0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusMillis(1969);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test04008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04008");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("T01:01:00.000");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"T01:01:00.000\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04009");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.Chronology chronology1 = localDateTime0.getChronology();
        int int2 = localDateTime0.size();
        int int3 = localDateTime0.getHourOfDay();
        int int4 = localDateTime0.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minusYears(11);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime9 = property7.addToCopy(32772);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 15 + "'", int3 == 15);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 557 + "'", int4 == 557);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test04010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04010");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("TWN");
        double double2 = languageRange1.getWeight();
        java.lang.String str3 = languageRange1.getRange();
        double double4 = languageRange1.getWeight();
        double double5 = languageRange1.getWeight();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean8 = localDate6.isSupported(dateTimeFieldType7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = localDate6.toDateMidnight(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate6.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property12 = localDate6.yearOfEra();
        org.joda.time.LocalDate localDate14 = localDate6.minusMonths((int) (byte) -1);
        org.joda.time.LocalDate.Property property15 = localDate14.year();
        boolean boolean16 = languageRange1.equals((java.lang.Object) localDate14);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "twn" + "'", str3, "twn");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test04011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04011");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears((int) '4');
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime6 = property3.addToCopy((long) 34);
        org.joda.time.LocalDateTime localDateTime8 = property3.addToCopy(32770);
        org.joda.time.LocalDateTime localDateTime9 = property3.roundFloorCopy();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test04012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04012");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime5 = timeOfDay2.toDateTime((org.joda.time.ReadableInstant) instant4);
        org.joda.time.DateTime dateTime7 = dateTime5.withYearOfEra(14);
        org.joda.time.DateTime dateTime8 = dateTime7.toDateTime();
        org.joda.time.DateTime dateTime11 = dateTime8.withDurationAdded(0L, 27);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test04013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04013");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval5 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean6 = interval2.abuts((org.joda.time.ReadableInterval) interval5);
        long long7 = interval5.getStartMillis();
        org.joda.time.Interval interval9 = interval5.withStartMillis((long) (short) -1);
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.Instant instant12 = instant10.plus((long) 2);
        org.joda.time.MutableDateTime mutableDateTime13 = instant12.toMutableDateTimeISO();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        mutableDateTime13.add(readablePeriod14, (int) ' ');
        org.joda.time.TimeOfDay timeOfDay21 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant23 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime24 = timeOfDay21.toDateTime((org.joda.time.ReadableInstant) instant23);
        org.joda.time.Chronology chronology25 = instant23.getChronology();
        org.joda.time.TimeOfDay timeOfDay28 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant30 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime31 = timeOfDay28.toDateTime((org.joda.time.ReadableInstant) instant30);
        int[] intArray33 = chronology25.get((org.joda.time.ReadablePartial) timeOfDay28, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(0L, chronology25);
        org.joda.time.DurationField durationField35 = chronology25.weeks();
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((-86340000L), chronology25);
        org.joda.time.MutableDateTime mutableDateTime37 = org.joda.time.MutableDateTime.now(chronology25);
        org.joda.time.DateTimeField dateTimeField38 = chronology25.dayOfWeek();
        mutableDateTime13.setChronology(chronology25);
        org.joda.time.Interval interval40 = interval9.withChronology(chronology25);
        org.joda.time.DateTime dateTime41 = interval40.getEnd();
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Interval interval43 = interval40.withDurationBeforeEnd(readableDuration42);
        boolean boolean45 = interval40.isAfter((long) '4');
        org.joda.time.Duration duration46 = interval40.toDuration();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(duration46);
    }

    @Test
    public void test04014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04014");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.withWeekyear(2);
        org.joda.time.DateMidnight.Property property7 = dateMidnight2.weekOfWeekyear();
        java.lang.String str8 = property7.getAsString();
        org.joda.time.DateMidnight dateMidnight10 = property7.addWrapFieldToCopy(8);
        org.joda.time.DateMidnight.Property property11 = dateMidnight10.yearOfEra();
        org.joda.time.DurationField durationField12 = property11.getLeapDurationField();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNull(durationField12);
    }

    @Test
    public void test04015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04015");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.withDurationAdded((long) (short) 10, 1);
        org.joda.time.Interval interval6 = dateMidnight2.toInterval();
        org.joda.time.DateMidnight.Property property7 = dateMidnight2.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight9 = dateMidnight2.withYearOfEra(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for yearOfEra must be in the range [1,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test04016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04016");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.Chronology chronology1 = localDateTime0.getChronology();
        org.joda.time.LocalDateTime.Property property2 = localDateTime0.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime3 = property2.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime4 = property2.withMinimumValue();
        int int5 = localDateTime4.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.minusHours(8);
        int int8 = localDateTime4.getDayOfMonth();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 42 + "'", int5 == 42);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
    }

    @Test
    public void test04017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04017");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime.Property property2 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime3 = property2.roundFloorCopy();
        org.joda.time.Chronology chronology4 = localTime3.getChronology();
        int int5 = localTime3.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight8.withDurationAdded((long) 2, 100);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.minusWeeks((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight11.withMonthOfYear((int) (byte) 10);
        org.joda.time.LocalTime localTime17 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime.Property property18 = localTime17.hourOfDay();
        org.joda.time.LocalTime localTime19 = property18.roundFloorCopy();
        org.joda.time.LocalTime localTime21 = property18.setCopy(0);
        org.joda.time.LocalTime localTime23 = property18.addWrapFieldToCopy(19);
        org.joda.time.Interval interval26 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean30 = interval26.abuts((org.joda.time.ReadableInterval) interval29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone32);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight33.withWeekyear(2);
        boolean boolean36 = interval26.isBefore((org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Interval interval38 = interval26.withDurationAfterStart(readableDuration37);
        org.joda.time.Duration duration39 = interval26.toDuration();
        org.joda.time.Interval interval42 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval45 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean46 = interval42.abuts((org.joda.time.ReadableInterval) interval45);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone48);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight49.withWeekyear(2);
        boolean boolean52 = interval42.isBefore((org.joda.time.ReadableInstant) dateMidnight49);
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.Interval interval54 = interval42.withDurationAfterStart(readableDuration53);
        org.joda.time.Duration duration55 = interval42.toDuration();
        int int56 = duration39.compareTo((org.joda.time.ReadableDuration) duration55);
        org.joda.time.Period period57 = duration39.toPeriod();
        org.joda.time.LocalTime localTime58 = localTime23.minus((org.joda.time.ReadablePeriod) period57);
        org.joda.time.LocalTime localTime60 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime localTime62 = localTime60.minusMinutes((int) (short) 1);
        int int63 = localTime60.getMillisOfDay();
        org.joda.time.LocalTime.Property property64 = localTime60.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType65 = org.joda.time.DurationFieldType.millis();
        boolean boolean66 = localTime60.isSupported(durationFieldType65);
        boolean boolean67 = period57.isSupported(durationFieldType65);
        int int68 = period57.size();
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight15.plus((org.joda.time.ReadablePeriod) period57);
        org.joda.time.LocalTime localTime71 = localTime3.withPeriodAdded((org.joda.time.ReadablePeriod) period57, 53948575);
        org.joda.time.DateTimeField[] dateTimeFieldArray72 = localTime71.getFields();
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(localTime58);
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 35 + "'", int63 == 35);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(durationFieldType65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 8 + "'", int68 == 8);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertNotNull(localTime71);
        org.junit.Assert.assertNotNull(dateTimeFieldArray72);
    }

    @Test
    public void test04018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04018");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        int int17 = mutableDateTime16.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime16.property(dateTimeFieldType18);
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime25 = timeOfDay22.toDateTime((org.joda.time.ReadableInstant) instant24);
        org.joda.time.Chronology chronology26 = instant24.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.clockhourOfHalfday();
        long long29 = dateTimeField27.roundHalfFloor(0L);
        java.util.Locale locale30 = java.util.Locale.TRADITIONAL_CHINESE;
        int int31 = dateTimeField27.getMaximumShortTextLength(locale30);
        java.util.Locale locale32 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale33 = locale32.stripExtensions();
        java.util.Locale locale34 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale35 = locale34.stripExtensions();
        java.lang.String str36 = locale32.getDisplayName(locale34);
        java.lang.String str37 = locale30.getDisplayLanguage(locale32);
        java.util.Calendar calendar38 = mutableDateTime16.toCalendar(locale32);
        org.joda.time.TimeOfDay timeOfDay42 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant44 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime45 = timeOfDay42.toDateTime((org.joda.time.ReadableInstant) instant44);
        org.joda.time.Chronology chronology46 = instant44.getChronology();
        org.joda.time.TimeOfDay timeOfDay49 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant51 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime52 = timeOfDay49.toDateTime((org.joda.time.ReadableInstant) instant51);
        int[] intArray54 = chronology46.get((org.joda.time.ReadablePartial) timeOfDay49, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime(0L, chronology46);
        mutableDateTime55.setYear(3);
        org.joda.time.Instant instant59 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone60 = instant59.getZone();
        mutableDateTime55.setZone(dateTimeZone60);
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight(dateTimeZone60);
        java.lang.String str64 = dateTimeZone60.getName((long) 'x');
        org.joda.time.MutableDateTime mutableDateTime65 = org.joda.time.MutableDateTime.now(dateTimeZone60);
        mutableDateTime16.setDate((org.joda.time.ReadableInstant) mutableDateTime65);
        mutableDateTime16.addYears(54082);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str36, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u4e2d\u6587" + "'", str37, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(calendar38);
        org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "+00:00" + "'", str64, "+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime65);
    }

    @Test
    public void test04019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04019");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis((long) (byte) 100);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant2.plus(readableDuration3);
        org.joda.time.Instant instant6 = instant2.minus(94611019623794000L);
        org.joda.time.MutableDateTime mutableDateTime7 = instant2.toMutableDateTime();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime7.setMinuteOfDay((-2678));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -2678 for minuteOfDay must be in the range [0,1439]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
    }

    @Test
    public void test04020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04020");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(53932003, 439);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53932003 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04021");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.clockhourOfHalfday();
        org.joda.time.DurationField durationField9 = chronology7.eras();
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType0.getField(chronology7);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(10, 0);
        org.joda.time.Chronology chronology14 = chronology7.withZone(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = chronology7.weekyear();
        java.lang.String str17 = dateTimeField15.getAsShortText((-839699990000L));
        boolean boolean18 = dateTimeField15.isSupported();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1943" + "'", str17, "1943");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test04022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04022");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        long long1 = instant0.getMillis();
        org.joda.time.Instant instant4 = instant0.withDurationAdded((long) 1970, 32769);
        org.joda.time.DateTime dateTime5 = instant4.toDateTimeISO();
        org.joda.time.DateTime dateTime8 = dateTime5.withDurationAdded(8640000000L, 53910);
        org.joda.time.DateTime.Property property9 = dateTime5.weekyear();
        org.joda.time.DateTime dateTime11 = property9.setCopy(54021076);
        org.joda.time.DateTime dateTime12 = dateTime11.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime13 = dateTime12.toDateTime();
// flaky:         org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1645455703047L + "'", long1 == 1645455703047L);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test04023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04023");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.Chronology chronology1 = localDateTime0.getChronology();
        org.joda.time.LocalDateTime.Property property2 = localDateTime0.weekOfWeekyear();
        int int3 = localDateTime0.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight6.withDurationAdded((long) 2, 100);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minusWeeks((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight9.minusWeeks(0);
        boolean boolean14 = localDateTime0.equals((java.lang.Object) 0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime0.minusSeconds(1970);
        org.joda.time.LocalDateTime.Property property17 = localDateTime0.year();
        int int18 = property17.getMinimumValue();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 22 + "'", int3 == 22);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-292275054) + "'", int18 == (-292275054));
    }

    @Test
    public void test04024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04024");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 195);
    }

    @Test
    public void test04025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04025");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.withDurationAdded(readableDuration4, (int) (byte) 0);
        org.joda.time.DateTime dateTime8 = dateTime3.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime10 = dateTime8.plusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime12 = dateTime10.plusDays(2);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int14 = dateTime12.get(dateTimeFieldType13);
        org.joda.time.DateTime dateTime16 = dateTime12.plusMillis(70);
        org.joda.time.DateTime dateTime18 = dateTime16.withMillisOfDay(23);
        java.util.GregorianCalendar gregorianCalendar19 = dateTime18.toGregorianCalendar();
        org.joda.time.DateMidnight dateMidnight20 = org.joda.time.DateMidnight.now();
        boolean boolean21 = dateTime18.equals((java.lang.Object) dateMidnight20);
        org.joda.time.DateTime dateTime23 = dateTime18.withSecondOfMinute(1);
        org.joda.time.DateTime dateTime24 = dateTime18.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property25 = dateTime24.yearOfCentury();
        org.joda.time.DateTime dateTime26 = property25.withMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 15 + "'", int14 == 15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(gregorianCalendar19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test04026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04026");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime22 = timeOfDay19.toDateTime((org.joda.time.ReadableInstant) instant21);
        org.joda.time.Chronology chronology23 = instant21.getChronology();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        int[] intArray31 = chronology23.get((org.joda.time.ReadablePartial) timeOfDay26, (long) (short) -1);
        mutableDateTime16.setChronology(chronology23);
        boolean boolean33 = mutableDateTime16.isEqualNow();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime16.secondOfDay();
        boolean boolean35 = mutableDateTime16.isAfterNow();
        mutableDateTime16.setMillisOfSecond((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        mutableDateTime16.add(readablePeriod38);
        org.joda.time.DateTimeField dateTimeField40 = mutableDateTime16.getRoundingField();
        mutableDateTime16.addMillis((int) (short) -1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNull(dateTimeField40);
    }

    @Test
    public void test04027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04027");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.withDurationAdded(readableDuration4, (int) (byte) 0);
        org.joda.time.DateTime dateTime7 = dateTime6.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime7.minusDays(4);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, readablePeriod10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Interval interval13 = interval11.withPeriodBeforeEnd(readablePeriod12);
        org.joda.time.Interval interval16 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval19 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean20 = interval16.abuts((org.joda.time.ReadableInterval) interval19);
        org.joda.time.LocalTime localTime22 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime.Property property23 = localTime22.hourOfDay();
        org.joda.time.LocalTime localTime24 = property23.roundFloorCopy();
        org.joda.time.LocalTime localTime26 = property23.setCopy(0);
        org.joda.time.LocalTime localTime28 = property23.addWrapFieldToCopy(19);
        org.joda.time.Interval interval31 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval34 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean35 = interval31.abuts((org.joda.time.ReadableInterval) interval34);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone37);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight38.withWeekyear(2);
        boolean boolean41 = interval31.isBefore((org.joda.time.ReadableInstant) dateMidnight38);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Interval interval43 = interval31.withDurationAfterStart(readableDuration42);
        org.joda.time.Duration duration44 = interval31.toDuration();
        org.joda.time.Interval interval47 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval50 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean51 = interval47.abuts((org.joda.time.ReadableInterval) interval50);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone53);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight54.withWeekyear(2);
        boolean boolean57 = interval47.isBefore((org.joda.time.ReadableInstant) dateMidnight54);
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.Interval interval59 = interval47.withDurationAfterStart(readableDuration58);
        org.joda.time.Duration duration60 = interval47.toDuration();
        int int61 = duration44.compareTo((org.joda.time.ReadableDuration) duration60);
        org.joda.time.Period period62 = duration44.toPeriod();
        org.joda.time.LocalTime localTime63 = localTime28.minus((org.joda.time.ReadablePeriod) period62);
        org.joda.time.Interval interval64 = interval19.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period62);
        org.joda.time.Interval interval65 = interval13.withPeriodAfterStart((org.joda.time.ReadablePeriod) period62);
        java.lang.String str66 = period62.toString();
        java.util.Locale locale68 = java.util.Locale.forLanguageTag("Property[dayOfWeek]");
        boolean boolean69 = period62.equals((java.lang.Object) locale68);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str71 = locale68.getExtension('4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: 4");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(localTime63);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "PT0S" + "'", str66, "PT0S");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test04028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04028");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay(54002, 54020, 230);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54020 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04029");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone4);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight5.withWeekyear(2);
        org.joda.time.DateTimeZone dateTimeZone10 = dateMidnight5.getZone();
        long long12 = dateTimeZone2.getMillisKeepLocal(dateTimeZone10, 10L);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        java.util.Date date15 = localDateTime13.toDate();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.minusHours(3);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.minusMonths(1970);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusYears((int) '4');
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withMillisOfSecond(22);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int26 = localDateTime22.get(dateTimeFieldType25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime19.withField(dateTimeFieldType25, 0);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withWeekyear(21);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.weekyear();
        org.joda.time.LocalDateTime localDateTime33 = property31.addWrapFieldToCopy(14);
        boolean boolean34 = dateTimeZone10.isLocalDateTimeGap(localDateTime33);
        org.joda.time.LocalDateTime.Property property35 = localDateTime33.hourOfDay();
        int int36 = localDateTime33.size();
        org.joda.time.LocalDateTime.Property property37 = localDateTime33.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10L + "'", long12 == 10L);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(date15);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Mon Feb 21 15:01:43 GMT 2022");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 70 + "'", int26 == 70);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4 + "'", int36 == 4);
        org.junit.Assert.assertNotNull(property37);
    }

    @Test
    public void test04030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04030");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime10 = timeOfDay7.toDateTime((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Chronology chronology11 = instant9.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.clockhourOfHalfday();
        long long14 = dateTimeField12.roundHalfFloor(0L);
        java.util.Locale locale15 = java.util.Locale.TRADITIONAL_CHINESE;
        int int16 = dateTimeField12.getMaximumShortTextLength(locale15);
        java.lang.String str17 = locale15.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket((-1L), chronology4, locale15);
        java.util.Locale locale19 = dateTimeParserBucket18.getLocale();
        long long22 = dateTimeParserBucket18.computeMillis(true, "");
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.TimeOfDay timeOfDay27 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant29 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime30 = timeOfDay27.toDateTime((org.joda.time.ReadableInstant) instant29);
        org.joda.time.Chronology chronology31 = instant29.getChronology();
        org.joda.time.TimeOfDay timeOfDay34 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant36 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime37 = timeOfDay34.toDateTime((org.joda.time.ReadableInstant) instant36);
        int[] intArray39 = chronology31.get((org.joda.time.ReadablePartial) timeOfDay34, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime(0L, chronology31);
        org.joda.time.TimeOfDay timeOfDay43 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant45 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime46 = timeOfDay43.toDateTime((org.joda.time.ReadableInstant) instant45);
        org.joda.time.Chronology chronology47 = instant45.getChronology();
        org.joda.time.TimeOfDay timeOfDay50 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant52 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime53 = timeOfDay50.toDateTime((org.joda.time.ReadableInstant) instant52);
        int[] intArray55 = chronology47.get((org.joda.time.ReadablePartial) timeOfDay50, (long) (short) -1);
        mutableDateTime40.setChronology(chronology47);
        org.joda.time.DateTimeField dateTimeField57 = dateTimeFieldType23.getField(chronology47);
        java.util.Locale locale59 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale60 = locale59.stripExtensions();
        dateTimeParserBucket18.saveField(dateTimeFieldType23, "hi!", locale60);
        java.lang.String str62 = locale60.getLanguage();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = dateTimeFormatter2.withLocale(locale60);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter65 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter67 = dateTimeFormatter2.withPivotYear((int) 'a');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter69 = dateTimeFormatter68.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = dateTimeFormatter68.withDefaultYear(266);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter73 = dateTimeFormatter71.withChronology(chronology72);
        org.joda.time.Instant instant76 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone77 = instant76.getZone();
        org.joda.time.MutableDateTime mutableDateTime78 = new org.joda.time.MutableDateTime((long) 2, dateTimeZone77);
        java.util.TimeZone timeZone79 = dateTimeZone77.toTimeZone();
        java.lang.String str80 = dateTimeZone77.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone77);
        org.joda.time.LocalDateTime localDateTime82 = org.joda.time.LocalDateTime.now(dateTimeZone77);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str83 = dateTimeFormatter71.print((org.joda.time.ReadablePartial) localDateTime82);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "zh" + "'", str17, "zh");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "zh" + "'", str62, "zh");
        org.junit.Assert.assertNotNull(dateTimeFormatter63);
        org.junit.Assert.assertNotNull(dateTimeFormatter65);
        org.junit.Assert.assertNotNull(dateTimeFormatter67);
        org.junit.Assert.assertNotNull(dateTimeFormatter68);
        org.junit.Assert.assertNull(dateTimePrinter69);
        org.junit.Assert.assertNotNull(dateTimeFormatter71);
        org.junit.Assert.assertNotNull(dateTimeFormatter73);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(timeZone79);
        org.junit.Assert.assertEquals(timeZone79.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "UTC" + "'", str80, "UTC");
        org.junit.Assert.assertNotNull(localDateTime82);
    }

    @Test
    public void test04031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04031");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.withWeekyear(2);
        org.joda.time.DateTimeZone dateTimeZone7 = dateMidnight2.getZone();
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime14 = timeOfDay11.toDateTime((org.joda.time.ReadableInstant) instant13);
        org.joda.time.Chronology chronology15 = instant13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.clockhourOfHalfday();
        long long18 = dateTimeField16.roundHalfFloor(0L);
        java.util.Locale locale19 = java.util.Locale.TRADITIONAL_CHINESE;
        int int20 = dateTimeField16.getMaximumShortTextLength(locale19);
        java.util.Locale locale21 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale22 = locale21.stripExtensions();
        java.util.Locale locale23 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale24 = locale23.stripExtensions();
        java.lang.String str25 = locale21.getDisplayName(locale23);
        java.lang.String str26 = locale19.getDisplayLanguage(locale21);
        java.lang.String str27 = dateTimeZone7.getName((long) 'x', locale21);
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(locale21);
        java.util.Date date29 = calendar28.getTime();
        // The following exception was thrown during execution in test generation
        try {
            int int31 = calendar28.getActualMaximum((-5599534));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: Array index out of range: -5599534");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str25, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u4e2d\u6587" + "'", str26, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertNotNull(calendar28);
// flaky:         org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=1645455703489,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=1,SECOND=43,MILLISECOND=489,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date29);
// flaky:         org.junit.Assert.assertEquals(date29.toString(), "Mon Feb 21 15:01:43 GMT 2022");
    }

    @Test
    public void test04032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04032");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = localDate0.toDateMidnight(dateTimeZone3);
        org.joda.time.DateTime dateTime5 = localDate0.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property6 = localDate0.yearOfEra();
        boolean boolean7 = property6.isLeap();
        org.joda.time.LocalDate localDate9 = property6.addToCopy(0);
        int int10 = localDate9.getEra();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test04033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04033");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(201, 6);
        int int5 = dateTimeZone3.getOffset(2596441L);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(obj0, dateTimeZone3);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime6.setWeekOfWeekyear(54000821);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54000821 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 723960000 + "'", int5 == 723960000);
    }

    @Test
    public void test04034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04034");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.withSecondOfMinute((int) (byte) 1);
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay7 = property5.addWrapFieldToCopy(1);
        java.util.Locale locale8 = java.util.Locale.ITALY;
        java.lang.String str9 = property5.getAsShortText(locale8);
        org.joda.time.DurationField durationField10 = property5.getDurationField();
        org.joda.time.TimeOfDay timeOfDay12 = property5.addToCopy(26);
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay12.minusSeconds(34);
        org.joda.time.TimeOfDay.Property property15 = timeOfDay14.millisOfSecond();
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "0" + "'", str9, "0");
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test04035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04035");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("centuryOfEra");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"centuryOfEra\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04036");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        int int17 = mutableDateTime16.getEra();
        mutableDateTime16.addMillis(1904);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        mutableDateTime16.add(readablePeriod20, 53891);
        mutableDateTime16.setMillisOfSecond(122);
        mutableDateTime16.setMillisOfSecond(365);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test04037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04037");
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        int[] intArray9 = timeOfDay8.getValues();
        org.joda.time.TimeOfDay timeOfDay12 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant14 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime15 = timeOfDay12.toDateTime((org.joda.time.ReadableInstant) instant14);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay12.minusMinutes((int) '4');
        int int18 = timeOfDay8.compareTo((org.joda.time.ReadablePartial) timeOfDay12);
        org.joda.time.TimeOfDay timeOfDay21 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant23 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime24 = timeOfDay21.toDateTime((org.joda.time.ReadableInstant) instant23);
        org.joda.time.Chronology chronology25 = instant23.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.clockhourOfHalfday();
        org.joda.time.DurationField durationField27 = chronology25.eras();
        org.joda.time.TimeOfDay timeOfDay28 = timeOfDay8.withChronologyRetainFields(chronology25);
        org.joda.time.Chronology chronology29 = timeOfDay8.getChronology();
        org.joda.time.Chronology chronology30 = timeOfDay8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone32);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight33.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight33.withWeekyear(2);
        org.joda.time.DateTimeZone dateTimeZone38 = dateMidnight33.getZone();
        int int40 = dateTimeZone38.getStandardOffset(0L);
        java.util.Locale locale42 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale43 = java.util.Locale.CHINA;
        java.lang.String str44 = locale42.getDisplayScript(locale43);
        java.lang.String str45 = locale43.toLanguageTag();
        java.lang.String str46 = dateTimeZone38.getShortName((long) (byte) 10, locale43);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket((long) ' ', chronology30, locale43, (java.lang.Integer) 36000000, 19);
        java.util.Locale locale50 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket((long) (-292275054), chronology30, locale50);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime(29, 1645455492, 52, 53910, chronology30);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 29 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(timeOfDay28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "zh-CN" + "'", str45, "zh-CN");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00" + "'", str46, "+00:00");
    }

    @Test
    public void test04038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04038");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime10 = timeOfDay7.toDateTime((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Chronology chronology11 = instant9.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.clockhourOfHalfday();
        long long14 = dateTimeField12.roundHalfFloor(0L);
        java.util.Locale locale15 = java.util.Locale.TRADITIONAL_CHINESE;
        int int16 = dateTimeField12.getMaximumShortTextLength(locale15);
        java.lang.String str17 = locale15.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket((-1L), chronology4, locale15);
        java.util.Locale locale19 = dateTimeParserBucket18.getLocale();
        long long22 = dateTimeParserBucket18.computeMillis(true, "");
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.TimeOfDay timeOfDay27 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant29 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime30 = timeOfDay27.toDateTime((org.joda.time.ReadableInstant) instant29);
        org.joda.time.Chronology chronology31 = instant29.getChronology();
        org.joda.time.TimeOfDay timeOfDay34 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant36 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime37 = timeOfDay34.toDateTime((org.joda.time.ReadableInstant) instant36);
        int[] intArray39 = chronology31.get((org.joda.time.ReadablePartial) timeOfDay34, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime(0L, chronology31);
        org.joda.time.TimeOfDay timeOfDay43 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant45 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime46 = timeOfDay43.toDateTime((org.joda.time.ReadableInstant) instant45);
        org.joda.time.Chronology chronology47 = instant45.getChronology();
        org.joda.time.TimeOfDay timeOfDay50 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant52 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime53 = timeOfDay50.toDateTime((org.joda.time.ReadableInstant) instant52);
        int[] intArray55 = chronology47.get((org.joda.time.ReadablePartial) timeOfDay50, (long) (short) -1);
        mutableDateTime40.setChronology(chronology47);
        org.joda.time.DateTimeField dateTimeField57 = dateTimeFieldType23.getField(chronology47);
        java.util.Locale locale59 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale60 = locale59.stripExtensions();
        dateTimeParserBucket18.saveField(dateTimeFieldType23, "hi!", locale60);
        java.lang.String str62 = locale60.getLanguage();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = dateTimeFormatter2.withLocale(locale60);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter64 = dateTimeFormatter63.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = dateTimeFormatter63.withPivotYear((java.lang.Integer) 60);
        org.joda.time.format.DateTimeParser dateTimeParser67 = dateTimeFormatter66.getParser();
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "zh" + "'", str17, "zh");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "zh" + "'", str62, "zh");
        org.junit.Assert.assertNotNull(dateTimeFormatter63);
        org.junit.Assert.assertNotNull(dateTimeFormatter64);
        org.junit.Assert.assertNotNull(dateTimeFormatter66);
        org.junit.Assert.assertNull(dateTimeParser67);
    }

    @Test
    public void test04039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04039");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        int[] intArray3 = timeOfDay2.getValues();
        org.joda.time.TimeOfDay timeOfDay6 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime9 = timeOfDay6.toDateTime((org.joda.time.ReadableInstant) instant8);
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay6.minusMinutes((int) '4');
        int int12 = timeOfDay2.compareTo((org.joda.time.ReadablePartial) timeOfDay6);
        org.joda.time.TimeOfDay timeOfDay15 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant17 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime18 = timeOfDay15.toDateTime((org.joda.time.ReadableInstant) instant17);
        org.joda.time.Chronology chronology19 = instant17.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.clockhourOfHalfday();
        org.joda.time.DurationField durationField21 = chronology19.eras();
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay2.withChronologyRetainFields(chronology19);
        org.joda.time.Chronology chronology23 = timeOfDay2.getChronology();
        org.joda.time.Instant instant25 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone26 = instant25.getZone();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone26);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime30 = dateTime27.withDurationAdded(readableDuration28, (int) (byte) 0);
        org.joda.time.DateTime dateTime32 = dateTime27.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime34 = dateTime32.plusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime36 = dateTime34.plusDays(2);
        org.joda.time.DateTime dateTime38 = dateTime36.minusMillis((int) (short) 0);
        org.joda.time.DateTime dateTime40 = dateTime38.withWeekyear(35);
        org.joda.time.DateTimeZone dateTimeZone41 = dateTime38.getZone();
        boolean boolean43 = dateTimeZone41.isStandardOffset(0L);
        org.joda.time.DateTime dateTime44 = timeOfDay2.toDateTimeToday(dateTimeZone41);
        long long46 = dateTimeZone41.previousTransition((long) 57);
        java.lang.String str48 = dateTimeZone41.getShortName(0L);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 57L + "'", long46 == 57L);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+00:00" + "'", str48, "+00:00");
    }

    @Test
    public void test04040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04040");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.withWeekyear(2);
        org.joda.time.DateMidnight.Property property7 = dateMidnight2.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight2.withYearOfCentury(1);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minusWeeks((int) (short) 0);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.withYearOfEra(497);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
    }

    @Test
    public void test04041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04041");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTime((org.joda.time.ReadableInstant) instant6);
        org.joda.time.Chronology chronology8 = instant6.getChronology();
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime14 = timeOfDay11.toDateTime((org.joda.time.ReadableInstant) instant13);
        int[] intArray16 = chronology8.get((org.joda.time.ReadablePartial) timeOfDay11, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(0L, chronology8);
        org.joda.time.DurationField durationField18 = chronology8.weeks();
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((-86340000L), chronology8);
        org.joda.time.LocalTime localTime21 = localTime19.withMillisOfSecond(795);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType23 = localTime19.getFieldType(865);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 865");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(localTime21);
    }

    @Test
    public void test04042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04042");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.weekyear();
        org.joda.time.LocalDate localDate3 = localDate0.withWeekyear((-1));
        java.util.Date date4 = localDate0.toDate();
        int int5 = date4.getTimezoneOffset();
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime();
        mutableDateTime6.setMillisOfSecond(13);
        boolean boolean9 = date4.equals((java.lang.Object) mutableDateTime6);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Mon Feb 21 00:00:00 GMT 2022");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test04043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04043");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        int int17 = mutableDateTime16.getEra();
        mutableDateTime16.setMillis((long) (short) 10);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime16.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField21 = property20.getField();
        org.joda.time.MutableDateTime mutableDateTime22 = property20.roundHalfFloor();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime22.setMonthOfYear(57);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 57 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
    }

    @Test
    public void test04044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04044");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = yearMonthDay0.plus(readablePeriod1);
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay2.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay4 = property3.withMinimumValue();
        java.util.Locale locale5 = null;
        java.lang.String str6 = property3.getAsShortText(locale5);
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone10 = instant9.getZone();
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) 2, dateTimeZone10);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.weekOfWeekyear();
        org.joda.time.Instant instant14 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone15 = instant14.getZone();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTime dateTime19 = dateTime16.withDurationAdded(readableDuration17, (int) (byte) 0);
        org.joda.time.DateTime dateTime21 = dateTime16.minusSeconds((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.DateTime dateTime23 = dateTime16.minus(readableDuration22);
        org.joda.time.DateTime dateTime25 = dateTime16.minusSeconds((int) (byte) 100);
        int int26 = mutableDateTime11.compareTo((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Chronology chronology27 = dateTime25.getChronology();
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay(chronology27);
        org.joda.time.YearMonthDay yearMonthDay30 = yearMonthDay28.minusMonths(9);
        int int31 = property3.compareTo((org.joda.time.ReadablePartial) yearMonthDay28);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str33 = yearMonthDay28.toString("ko_KR");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: o");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "21" + "'", str6, "21");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test04045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04045");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.Chronology chronology1 = localDateTime0.getChronology();
        java.util.Date date2 = localDateTime0.toDate();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusHours(3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minusMonths(1970);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusYears((int) '4');
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withMillisOfSecond(22);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int13 = localDateTime9.get(dateTimeFieldType12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime6.withField(dateTimeFieldType12, 0);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime18 = property16.setCopy("\u97d3\u6587\u5357\u97d3)");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"?? (??)\" for dayOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(date2);
// flaky:         org.junit.Assert.assertEquals(date2.toString(), "Mon Feb 21 15:01:44 GMT 2022");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 70 + "'", int13 == 70);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test04046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04046");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime22 = timeOfDay19.toDateTime((org.joda.time.ReadableInstant) instant21);
        org.joda.time.Chronology chronology23 = instant21.getChronology();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        int[] intArray31 = chronology23.get((org.joda.time.ReadablePartial) timeOfDay26, (long) (short) -1);
        mutableDateTime16.setChronology(chronology23);
        boolean boolean33 = mutableDateTime16.isEqualNow();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime16.secondOfDay();
        mutableDateTime16.setMillisOfDay((int) (short) 100);
        mutableDateTime16.setMinuteOfDay(52);
        org.joda.time.ReadableDuration readableDuration39 = null;
        mutableDateTime16.add(readableDuration39, 865);
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime16.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime44 = property42.add(121);
        mutableDateTime44.setWeekOfWeekyear(35);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(mutableDateTime44);
    }

    @Test
    public void test04047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04047");
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.months();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime10 = timeOfDay7.toDateTime((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Chronology chronology11 = instant9.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.clockhourOfHalfday();
        long long14 = dateTimeField12.roundHalfFloor(0L);
        java.util.Locale locale15 = java.util.Locale.TRADITIONAL_CHINESE;
        int int16 = dateTimeField12.getMaximumShortTextLength(locale15);
        java.lang.String str17 = locale15.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket((-1L), chronology4, locale15);
        java.lang.Integer int19 = dateTimeParserBucket18.getPivotYear();
        long long20 = dateTimeParserBucket18.computeMillis();
        org.joda.time.Chronology chronology21 = dateTimeParserBucket18.getChronology();
        org.joda.time.DurationField durationField22 = durationFieldType2.getField(chronology21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay23 = new org.joda.time.TimeOfDay(54115371, 64, chronology21);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54115371 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "zh" + "'", str17, "zh");
        org.junit.Assert.assertNull(int19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
    }

    @Test
    public void test04048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04048");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay.Property property3 = timeOfDay2.minuteOfHour();
        java.lang.String str4 = property3.getAsShortText();
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime10 = timeOfDay7.toDateTime((org.joda.time.ReadableInstant) instant9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.DateTime dateTime13 = dateTime10.withPeriodAdded(readablePeriod11, (int) (short) 0);
        int int14 = property3.compareTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime15 = dateTime10.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime17 = dateTime15.plusHours(23);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.TimeOfDay timeOfDay21 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant23 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime24 = timeOfDay21.toDateTime((org.joda.time.ReadableInstant) instant23);
        org.joda.time.Chronology chronology25 = instant23.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.clockhourOfHalfday();
        org.joda.time.DurationField durationField27 = chronology25.eras();
        org.joda.time.DateTimeField dateTimeField28 = dateTimeFieldType18.getField(chronology25);
        long long31 = dateTimeField28.add((long) (short) 100, (long) (byte) -1);
        boolean boolean32 = dateTimeField28.isSupported();
        org.joda.time.LocalTime localTime34 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime localTime36 = localTime34.minusMinutes((int) (short) 1);
        org.joda.time.LocalTime localTime38 = localTime34.withMillisOfDay((int) (byte) 1);
        org.joda.time.TimeOfDay timeOfDay42 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant44 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime45 = timeOfDay42.toDateTime((org.joda.time.ReadableInstant) instant44);
        org.joda.time.TimeOfDay timeOfDay47 = timeOfDay42.minusMinutes((int) '4');
        int[] intArray48 = timeOfDay47.getValues();
        int[] intArray50 = dateTimeField28.add((org.joda.time.ReadablePartial) localTime34, 36000000, intArray48, 52);
        org.joda.time.LocalTime localTime52 = localTime34.minusMinutes(11);
        int int53 = localTime52.getMillisOfSecond();
        org.joda.time.TimeOfDay timeOfDay56 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay timeOfDay58 = timeOfDay56.withSecondOfMinute((int) (byte) 1);
        org.joda.time.TimeOfDay.Property property59 = timeOfDay58.hourOfDay();
        boolean boolean60 = localTime52.isAfter((org.joda.time.ReadablePartial) timeOfDay58);
        org.joda.time.DateTime dateTime61 = dateTime15.withFields((org.joda.time.ReadablePartial) localTime52);
        org.joda.time.DateTime dateTime63 = dateTime15.withWeekOfWeekyear((int) ' ');
        org.joda.time.DateTime.Property property64 = dateTime15.dayOfWeek();
        org.joda.time.Instant instant66 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone67 = instant66.getZone();
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime(dateTimeZone67);
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.DateTime dateTime71 = dateTime68.withDurationAdded(readableDuration69, (int) (byte) 0);
        org.joda.time.DateTime dateTime73 = dateTime68.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime75 = dateTime73.plusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime77 = dateTime75.plusDays(2);
        org.joda.time.DateTime dateTime79 = dateTime75.withHourOfDay(10);
        int int80 = dateTime79.getYear();
        org.joda.time.DateTime.Property property81 = dateTime79.minuteOfHour();
        org.joda.time.DateTime dateTime83 = dateTime79.minusWeeks(52);
        int int84 = property64.getDifference((org.joda.time.ReadableInstant) dateTime79);
        org.joda.time.DateTime dateTime85 = property64.roundFloorCopy();
        int int86 = dateTime85.getYearOfEra();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1" + "'", str4, "1");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-2678399900L) + "'", long31 == (-2678399900L));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(timeOfDay47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[23, 9, 0, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[23, 9, 0, 0]");
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 35 + "'", int53 == 35);
        org.junit.Assert.assertNotNull(timeOfDay58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2022 + "'", int80 == 2022);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-19045) + "'", int84 == (-19045));
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1969 + "'", int86 == 1969);
    }

    @Test
    public void test04049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04049");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(54028, 0, 53942);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04050");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval5 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean6 = interval2.abuts((org.joda.time.ReadableInterval) interval5);
        long long7 = interval5.getStartMillis();
        org.joda.time.Interval interval9 = interval5.withStartMillis((long) (short) -1);
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.Instant instant12 = instant10.plus((long) 2);
        org.joda.time.MutableDateTime mutableDateTime13 = instant12.toMutableDateTimeISO();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        mutableDateTime13.add(readablePeriod14, (int) ' ');
        org.joda.time.TimeOfDay timeOfDay21 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant23 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime24 = timeOfDay21.toDateTime((org.joda.time.ReadableInstant) instant23);
        org.joda.time.Chronology chronology25 = instant23.getChronology();
        org.joda.time.TimeOfDay timeOfDay28 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant30 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime31 = timeOfDay28.toDateTime((org.joda.time.ReadableInstant) instant30);
        int[] intArray33 = chronology25.get((org.joda.time.ReadablePartial) timeOfDay28, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(0L, chronology25);
        org.joda.time.DurationField durationField35 = chronology25.weeks();
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((-86340000L), chronology25);
        org.joda.time.MutableDateTime mutableDateTime37 = org.joda.time.MutableDateTime.now(chronology25);
        org.joda.time.DateTimeField dateTimeField38 = chronology25.dayOfWeek();
        mutableDateTime13.setChronology(chronology25);
        org.joda.time.Interval interval40 = interval9.withChronology(chronology25);
        org.joda.time.DateTime dateTime41 = interval40.getEnd();
        org.joda.time.TimeOfDay timeOfDay45 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant47 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime48 = timeOfDay45.toDateTime((org.joda.time.ReadableInstant) instant47);
        org.joda.time.Chronology chronology49 = instant47.getChronology();
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight((java.lang.Object) (-11491200000L), chronology49);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(chronology49);
        org.joda.time.TimeOfDay timeOfDay52 = new org.joda.time.TimeOfDay((java.lang.Object) dateTime41, chronology49);
        org.joda.time.TimeOfDay timeOfDay54 = timeOfDay52.minusMillis(2744);
        org.joda.time.TimeOfDay.Property property55 = timeOfDay52.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay57 = property55.addWrapFieldToCopy((int) 'u');
        int int58 = property55.getMinimumValueOverall();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(timeOfDay54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(timeOfDay57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
    }

    @Test
    public void test04051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04051");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.Chronology chronology1 = localDateTime0.getChronology();
        int int2 = localDateTime0.size();
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.secondOfMinute();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plus(readablePeriod4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusHours(1952);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withEra(292269054);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292269054 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
    }

    @Test
    public void test04052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04052");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        org.joda.time.DurationField durationField17 = chronology7.weeks();
        org.joda.time.DateTimeField dateTimeField18 = chronology7.monthOfYear();
        org.joda.time.Instant instant20 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone21 = instant20.getZone();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime25 = dateTime22.withDurationAdded(readableDuration23, (int) (byte) 0);
        org.joda.time.DateTime dateTime27 = dateTime22.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime29 = dateTime27.plusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime31 = dateTime29.plusDays(2);
        org.joda.time.TimeOfDay timeOfDay32 = dateTime31.toTimeOfDay();
        long long34 = chronology7.set((org.joda.time.ReadablePartial) timeOfDay32, 0L);
        org.joda.time.TimeOfDay timeOfDay37 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant39 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime40 = timeOfDay37.toDateTime((org.joda.time.ReadableInstant) instant39);
        org.joda.time.Chronology chronology41 = instant39.getChronology();
        org.joda.time.TimeOfDay timeOfDay44 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant46 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime47 = timeOfDay44.toDateTime((org.joda.time.ReadableInstant) instant46);
        int[] intArray49 = chronology41.get((org.joda.time.ReadablePartial) timeOfDay44, (long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay51 = timeOfDay44.withHourOfDay(0);
        org.joda.time.TimeOfDay timeOfDay53 = timeOfDay51.plusHours(865);
        long long55 = chronology7.set((org.joda.time.ReadablePartial) timeOfDay53, 600000L);
        org.joda.time.LocalTime localTime56 = timeOfDay53.toLocalTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType58 = timeOfDay53.getFieldType(54017029);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 54017029");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(timeOfDay32);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + 54703486L + "'", long34 == 54703486L);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(timeOfDay51);
        org.junit.Assert.assertNotNull(timeOfDay53);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 3660000L + "'", long55 == 3660000L);
        org.junit.Assert.assertNotNull(localTime56);
    }

    @Test
    public void test04053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04053");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone1 = dateTimeZone0.toTimeZone();
        int int2 = timeZone1.getRawOffset();
        timeZone1.setID("\u56db\u6708");
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test04054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04054");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime5 = timeOfDay2.toDateTime((org.joda.time.ReadableInstant) instant4);
        org.joda.time.Chronology chronology6 = instant4.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.clockhourOfHalfday();
        org.joda.time.DurationField durationField8 = chronology6.eras();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.dayOfYear();
        org.joda.time.DurationField durationField10 = dateTimeField9.getLeapDurationField();
        java.lang.String str11 = dateTimeField9.toString();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "DateTimeField[dayOfYear]" + "'", str11, "DateTimeField[dayOfYear]");
    }

    @Test
    public void test04055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04055");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTime((org.joda.time.ReadableInstant) instant6);
        org.joda.time.Chronology chronology8 = instant6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.clockhourOfHalfday();
        long long11 = dateTimeField9.roundHalfFloor(0L);
        java.util.Locale locale12 = java.util.Locale.TRADITIONAL_CHINESE;
        int int13 = dateTimeField9.getMaximumShortTextLength(locale12);
        java.lang.String str14 = locale12.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((-1L), chronology1, locale12);
        java.util.Locale locale16 = dateTimeParserBucket15.getLocale();
        org.joda.time.TimeOfDay timeOfDay20 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant22 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime23 = timeOfDay20.toDateTime((org.joda.time.ReadableInstant) instant22);
        org.joda.time.Chronology chronology24 = instant22.getChronology();
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((java.lang.Object) (-11491200000L), chronology24);
        org.joda.time.DateTimeField dateTimeField26 = chronology24.secondOfMinute();
        dateTimeParserBucket15.saveField(dateTimeField26, 53891);
        java.lang.String str29 = dateTimeField26.getName();
        int int30 = dateTimeField26.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "zh" + "'", str14, "zh");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "secondOfMinute" + "'", str29, "secondOfMinute");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test04056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04056");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime5 = timeOfDay2.toDateTime((org.joda.time.ReadableInstant) instant4);
        boolean boolean7 = timeOfDay2.equals((java.lang.Object) (byte) -1);
        int int8 = timeOfDay2.getMinuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay10 = timeOfDay2.withMillisOfSecond(53966);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53966 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test04057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04057");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setLenient(false);
        java.util.Calendar.Builder builder4 = builder2.setInstant((long) 310);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder7 = builder4.setWeekDefinition((-19045), 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test04058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04058");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime localTime3 = localTime1.minusMinutes((int) (short) 1);
        org.joda.time.DateTimeField[] dateTimeFieldArray4 = localTime1.getFields();
        org.joda.time.LocalTime localTime6 = localTime1.plusHours(0);
        org.joda.time.Interval interval9 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean13 = interval9.abuts((org.joda.time.ReadableInterval) interval12);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Interval interval15 = interval12.withDurationBeforeEnd(readableDuration14);
        boolean boolean16 = interval15.isBeforeNow();
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Period period18 = interval15.toPeriod(periodType17);
        org.joda.time.LocalTime localTime19 = localTime1.plus((org.joda.time.ReadablePeriod) period18);
        java.lang.String str20 = period18.toString();
        // The following exception was thrown during execution in test generation
        try {
            int int22 = period18.getValue(9021);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 9021");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(dateTimeFieldArray4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "PT0S" + "'", str20, "PT0S");
    }

    @Test
    public void test04059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04059");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property1 = localTime0.minuteOfHour();
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime.Property property4 = localTime3.hourOfDay();
        org.joda.time.LocalTime localTime5 = property4.withMinimumValue();
        java.util.Locale locale6 = java.util.Locale.UK;
        int int7 = property4.getMaximumTextLength(locale6);
        org.joda.time.LocalTime localTime8 = property4.getLocalTime();
        org.joda.time.LocalTime localTime9 = property4.roundHalfFloorCopy();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean16 = interval12.abuts((org.joda.time.ReadableInterval) interval15);
        org.joda.time.LocalTime localTime18 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime.Property property19 = localTime18.hourOfDay();
        org.joda.time.LocalTime localTime20 = property19.roundFloorCopy();
        org.joda.time.LocalTime localTime22 = property19.setCopy(0);
        org.joda.time.LocalTime localTime24 = property19.addWrapFieldToCopy(19);
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean31 = interval27.abuts((org.joda.time.ReadableInterval) interval30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.withWeekyear(2);
        boolean boolean37 = interval27.isBefore((org.joda.time.ReadableInstant) dateMidnight34);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Interval interval39 = interval27.withDurationAfterStart(readableDuration38);
        org.joda.time.Duration duration40 = interval27.toDuration();
        org.joda.time.Interval interval43 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval46 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean47 = interval43.abuts((org.joda.time.ReadableInterval) interval46);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone49);
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight50.withWeekyear(2);
        boolean boolean53 = interval43.isBefore((org.joda.time.ReadableInstant) dateMidnight50);
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.Interval interval55 = interval43.withDurationAfterStart(readableDuration54);
        org.joda.time.Duration duration56 = interval43.toDuration();
        int int57 = duration40.compareTo((org.joda.time.ReadableDuration) duration56);
        org.joda.time.Period period58 = duration40.toPeriod();
        org.joda.time.LocalTime localTime59 = localTime24.minus((org.joda.time.ReadablePeriod) period58);
        org.joda.time.Interval interval60 = interval15.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period58);
        org.joda.time.LocalTime localTime61 = localTime9.minus((org.joda.time.ReadablePeriod) period58);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone63);
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight64.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight68 = dateMidnight64.withWeekyear(2);
        org.joda.time.DateMidnight.Property property69 = dateMidnight64.weekOfWeekyear();
        java.lang.String str70 = property69.getAsString();
        org.joda.time.DateMidnight dateMidnight72 = property69.addWrapFieldToCopy(8);
        org.joda.time.DateMidnight.Property property73 = dateMidnight72.yearOfEra();
        org.joda.time.DateMidnight dateMidnight75 = dateMidnight72.withDayOfMonth(21);
        org.joda.time.Interval interval76 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period58, (org.joda.time.ReadableInstant) dateMidnight72);
        org.joda.time.LocalTime localTime77 = localTime0.plus((org.joda.time.ReadablePeriod) period58);
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        org.joda.time.DateMidnight dateMidnight80 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone79);
        org.joda.time.DateMidnight dateMidnight83 = dateMidnight80.withDurationAdded((long) 2, 100);
        org.joda.time.DateMidnight dateMidnight85 = dateMidnight83.minusWeeks((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight87 = dateMidnight85.minusMonths(70);
        int int88 = dateMidnight87.getEra();
        org.joda.time.DateMidnight dateMidnight90 = dateMidnight87.plusWeeks(4);
        org.joda.time.DateMidnight.Property property91 = dateMidnight87.era();
        boolean boolean92 = period58.equals((java.lang.Object) dateMidnight87);
        org.joda.time.Period period93 = period58.toPeriod();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_GB");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertNotNull(dateMidnight68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "1" + "'", str70, "1");
        org.junit.Assert.assertNotNull(dateMidnight72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(dateMidnight75);
        org.junit.Assert.assertNotNull(localTime77);
        org.junit.Assert.assertNotNull(dateMidnight83);
        org.junit.Assert.assertNotNull(dateMidnight85);
        org.junit.Assert.assertNotNull(dateMidnight87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNotNull(dateMidnight90);
        org.junit.Assert.assertNotNull(property91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(period93);
    }

    @Test
    public void test04060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04060");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime5 = timeOfDay2.toDateTime((org.joda.time.ReadableInstant) instant4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusDays(0);
        org.joda.time.DateTime dateTime9 = dateTime5.minusWeeks((-1));
        org.joda.time.Instant instant10 = dateTime5.toInstant();
        org.joda.time.DateTime dateTime12 = dateTime5.plusYears(772);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test04061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04061");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime22 = timeOfDay19.toDateTime((org.joda.time.ReadableInstant) instant21);
        org.joda.time.Chronology chronology23 = instant21.getChronology();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        int[] intArray31 = chronology23.get((org.joda.time.ReadablePartial) timeOfDay26, (long) (short) -1);
        mutableDateTime16.setChronology(chronology23);
        boolean boolean33 = mutableDateTime16.isEqualNow();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime16.secondOfDay();
        mutableDateTime16.setMillisOfDay((int) (short) 100);
        mutableDateTime16.setMinuteOfDay(52);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        mutableDateTime16.add(readablePeriod39, 1970);
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime();
        mutableDateTime42.addMonths(0);
        boolean boolean45 = mutableDateTime16.equals((java.lang.Object) 0);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime16.setHourOfDay(54044289);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54044289 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test04062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04062");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.Chronology chronology1 = localDateTime0.getChronology();
        int int2 = localDateTime0.size();
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.weekyear();
        org.joda.time.LocalDateTime localDateTime4 = property3.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusMinutes(0);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight9.withWeekyear(2);
        org.joda.time.DateMidnight.Property property14 = dateMidnight9.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone16);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight17.withDurationAdded((long) 2, 100);
        int int21 = dateMidnight9.compareTo((org.joda.time.ReadableInstant) dateMidnight17);
        int int22 = dateMidnight9.getYearOfCentury();
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight9.minusMonths(19);
        org.joda.time.Instant instant26 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone27 = instant26.getZone();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone27);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateTime dateTime31 = dateTime28.withDurationAdded(readableDuration29, (int) (byte) 0);
        org.joda.time.DateTime dateTime33 = dateTime28.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime35 = dateTime33.plusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime37 = dateTime35.plusDays(2);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int39 = dateTime37.get(dateTimeFieldType38);
        org.joda.time.DateTime dateTime41 = dateTime37.withYearOfCentury(3);
        org.joda.time.DateTime dateTime43 = dateTime37.plusDays((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.DateTime dateTime46 = dateTime43.withDurationAdded(readableDuration44, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime dateTime49 = dateTime46.withField(dateTimeFieldType47, (int) (short) 10);
        int int50 = dateMidnight24.get(dateTimeFieldType47);
        org.joda.time.LocalDateTime.Property property51 = localDateTime6.property(dateTimeFieldType47);
        int int52 = localDateTime6.getCenturyOfEra();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 70 + "'", int22 == 70);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 15 + "'", int39 == 15);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2922789 + "'", int52 == 2922789);
    }

    @Test
    public void test04063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04063");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears((int) '4');
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMillisOfSecond(22);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.dayOfWeek();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
    }

    @Test
    public void test04064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04064");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.withWeekyear(2);
        org.joda.time.DateMidnight.Property property7 = dateMidnight2.weekOfWeekyear();
        java.lang.String str8 = property7.getAsString();
        org.joda.time.DateMidnight dateMidnight10 = property7.addWrapFieldToCopy(8);
        org.joda.time.DateMidnight.Property property11 = dateMidnight10.yearOfEra();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight10.minusMonths((int) '#');
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight10.minus((long) 53932);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight15);
    }

    @Test
    public void test04065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04065");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval5 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean6 = interval2.abuts((org.joda.time.ReadableInterval) interval5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Interval interval8 = interval5.withDurationBeforeEnd(readableDuration7);
        boolean boolean9 = interval8.isBeforeNow();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean16 = interval12.abuts((org.joda.time.ReadableInterval) interval15);
        boolean boolean17 = interval15.containsNow();
        boolean boolean19 = interval15.isBefore((long) 0);
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean26 = interval22.abuts((org.joda.time.ReadableInterval) interval25);
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval32 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean33 = interval29.abuts((org.joda.time.ReadableInterval) interval32);
        long long34 = interval32.getStartMillis();
        org.joda.time.Interval interval37 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean41 = interval37.abuts((org.joda.time.ReadableInterval) interval40);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Interval interval43 = interval40.withDurationBeforeEnd(readableDuration42);
        org.joda.time.Interval interval44 = interval32.overlap((org.joda.time.ReadableInterval) interval40);
        org.joda.time.TimeOfDay timeOfDay48 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant50 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime51 = timeOfDay48.toDateTime((org.joda.time.ReadableInstant) instant50);
        org.joda.time.Chronology chronology52 = instant50.getChronology();
        org.joda.time.TimeOfDay timeOfDay55 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant57 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime58 = timeOfDay55.toDateTime((org.joda.time.ReadableInstant) instant57);
        int[] intArray60 = chronology52.get((org.joda.time.ReadablePartial) timeOfDay55, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime61 = new org.joda.time.MutableDateTime(0L, chronology52);
        mutableDateTime61.setYear(3);
        org.joda.time.Instant instant65 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone66 = instant65.getZone();
        mutableDateTime61.setZone(dateTimeZone66);
        org.joda.time.DateTime dateTime68 = org.joda.time.DateTime.now(dateTimeZone66);
        boolean boolean69 = interval40.contains((org.joda.time.ReadableInstant) dateTime68);
        boolean boolean70 = interval25.contains((org.joda.time.ReadableInterval) interval40);
        org.joda.time.Interval interval71 = interval15.overlap((org.joda.time.ReadableInterval) interval40);
        org.joda.time.Interval interval72 = interval8.gap((org.joda.time.ReadableInterval) interval71);
        org.joda.time.TimeOfDay timeOfDay75 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant77 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime78 = timeOfDay75.toDateTime((org.joda.time.ReadableInstant) instant77);
        org.joda.time.Chronology chronology79 = instant77.getChronology();
        org.joda.time.DateTimeField dateTimeField80 = chronology79.clockhourOfHalfday();
        long long82 = dateTimeField80.roundHalfFloor(0L);
        long long85 = dateTimeField80.addWrapField((long) (byte) 1, 5);
        boolean boolean86 = interval72.equals((java.lang.Object) 5);
        org.joda.time.DateTime dateTime87 = interval72.getEnd();
        org.joda.time.Interval interval88 = interval72.toInterval();
        org.joda.time.Chronology chronology89 = interval88.getChronology();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNull(interval44);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(interval71);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 18000001L + "'", long85 == 18000001L);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(interval88);
        org.junit.Assert.assertNotNull(chronology89);
    }

    @Test
    public void test04066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04066");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.withDurationAdded(readableDuration4, (int) (byte) 0);
        org.joda.time.DateTime dateTime8 = dateTime3.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime10 = dateTime8.plusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime12 = dateTime10.plusDays(2);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMillis((int) (short) 0);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.DateTime dateTime17 = dateTime14.withPeriodAdded(readablePeriod15, (int) (byte) 1);
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone20 = instant19.getZone();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone20);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.DateTime dateTime24 = dateTime21.withDurationAdded(readableDuration22, (int) (byte) 0);
        org.joda.time.DateTime dateTime26 = dateTime21.minusSeconds((int) (short) 1);
        org.joda.time.DateTime.Property property27 = dateTime26.centuryOfEra();
        org.joda.time.DateTime dateTime28 = property27.withMinimumValue();
        org.joda.time.Instant instant30 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone31 = instant30.getZone();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight34.withWeekyear(2);
        org.joda.time.DateTimeZone dateTimeZone39 = dateMidnight34.getZone();
        long long41 = dateTimeZone31.getMillisKeepLocal(dateTimeZone39, 10L);
        org.joda.time.LocalTime localTime42 = org.joda.time.LocalTime.now(dateTimeZone39);
        boolean boolean43 = property27.equals((java.lang.Object) localTime42);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = property27.getFieldType();
        boolean boolean45 = dateTime17.isSupported(dateTimeFieldType44);
        org.joda.time.DateTime.Property property46 = dateTime17.minuteOfDay();
        int int47 = dateTime17.getHourOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 10L + "'", long41 == 10L);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 15 + "'", int47 == 15);
    }

    @Test
    public void test04067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04067");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = localDate0.toDateMidnight(dateTimeZone3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate7 = localDate5.plusMonths((int) (short) 0);
        org.joda.time.LocalDate localDate9 = localDate7.minusYears(70);
        org.joda.time.LocalDate localDate10 = localDate0.withFields((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate localDate12 = localDate10.withWeekyear((int) (short) 10);
        org.joda.time.DateTime dateTime13 = localDate12.toDateTimeAtStartOfDay();
        org.joda.time.Chronology chronology14 = localDate12.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.LocalDate.Property property16 = localDate12.property(dateTimeFieldType15);
        org.joda.time.LocalDate localDate17 = property16.roundHalfCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate19 = property16.setCopy("T14:59:25.372");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"T14:59:25.372\" for dayOfWeek is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate17);
    }

    @Test
    public void test04068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04068");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.withDurationAdded(readableDuration4, (int) (byte) 0);
        org.joda.time.DateTime dateTime7 = dateTime6.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime7.minusDays(4);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, readablePeriod10);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone14 = instant13.getZone();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.withDurationAdded(readableDuration16, (int) (byte) 0);
        int int19 = dateTime18.getMillisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval20 = interval11.withStart((org.joda.time.ReadableInstant) dateTime18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 99 + "'", int19 == 99);
    }

    @Test
    public void test04069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04069");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        int int17 = mutableDateTime16.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime16.property(dateTimeFieldType18);
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime25 = timeOfDay22.toDateTime((org.joda.time.ReadableInstant) instant24);
        org.joda.time.Chronology chronology26 = instant24.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.clockhourOfHalfday();
        long long29 = dateTimeField27.roundHalfFloor(0L);
        java.util.Locale locale30 = java.util.Locale.TRADITIONAL_CHINESE;
        int int31 = dateTimeField27.getMaximumShortTextLength(locale30);
        java.util.Locale locale32 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale33 = locale32.stripExtensions();
        java.util.Locale locale34 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale35 = locale34.stripExtensions();
        java.lang.String str36 = locale32.getDisplayName(locale34);
        java.lang.String str37 = locale30.getDisplayLanguage(locale32);
        java.util.Calendar calendar38 = mutableDateTime16.toCalendar(locale32);
        int int40 = calendar38.getActualMinimum(2);
        calendar38.set(32772, 365, 999);
        // The following exception was thrown during execution in test generation
        try {
            int int46 = calendar38.get(358);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 358");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str36, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u4e2d\u6587" + "'", str37, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(calendar38);
        org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=973063238400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=32805,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=23,DAY_OF_YEAR=54,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test04070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04070");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears((int) '4');
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfCentury();
        int int4 = localDateTime0.getDayOfYear();
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime0.withFieldAdded(durationFieldType5, 23);
        org.joda.time.LocalDateTime.Property property8 = localDateTime0.millisOfDay();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime0.withCenturyOfEra((int) 'a');
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.monthOfYear();
        java.lang.String str12 = property11.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime14 = property11.setCopy("0");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"0\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Property[monthOfYear]" + "'", str12, "Property[monthOfYear]");
    }

    @Test
    public void test04071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04071");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("yearOfEra");
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property3 = localDate2.weekyear();
        org.joda.time.LocalDate localDate5 = localDate2.withWeekyear((-1));
        java.util.Date date6 = localDate2.toDate();
        date6.setDate((int) ' ');
        java.time.Instant instant9 = date6.toInstant();
        java.time.Instant instant10 = date6.toInstant();
        boolean boolean11 = timeZone1.inDaylightTime(date6);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Fri Mar 04 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test04072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04072");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        long long4 = dateTimeZone2.nextTransition(1L);
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) (short) 10, dateTimeZone2);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) 52, dateTimeZone2);
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay(dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.withEra(1);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight10.minusYears(1439);
        org.joda.time.DateTime dateTime15 = timeOfDay7.toDateTime((org.joda.time.ReadableInstant) dateMidnight10);
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime22 = timeOfDay19.toDateTime((org.joda.time.ReadableInstant) instant21);
        org.joda.time.Chronology chronology23 = instant21.getChronology();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        int[] intArray31 = chronology23.get((org.joda.time.ReadablePartial) timeOfDay26, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime(0L, chronology23);
        org.joda.time.TimeOfDay timeOfDay35 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant37 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime38 = timeOfDay35.toDateTime((org.joda.time.ReadableInstant) instant37);
        org.joda.time.Chronology chronology39 = instant37.getChronology();
        org.joda.time.TimeOfDay timeOfDay42 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant44 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime45 = timeOfDay42.toDateTime((org.joda.time.ReadableInstant) instant44);
        int[] intArray47 = chronology39.get((org.joda.time.ReadablePartial) timeOfDay42, (long) (short) -1);
        mutableDateTime32.setChronology(chronology39);
        boolean boolean49 = mutableDateTime32.isEqualNow();
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime32.secondOfDay();
        boolean boolean51 = mutableDateTime32.isAfterNow();
        mutableDateTime32.setMillisOfSecond((int) (byte) 0);
        mutableDateTime32.setHourOfDay(5);
        mutableDateTime32.addWeekyears((-1));
        int int58 = mutableDateTime32.getMonthOfYear();
        boolean boolean59 = dateMidnight10.isAfter((org.joda.time.ReadableInstant) mutableDateTime32);
        mutableDateTime32.setSecondOfDay(0);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
    }

    @Test
    public void test04073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04073");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight((-36806400000L));
    }

    @Test
    public void test04074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04074");
        java.util.Locale locale2 = new java.util.Locale("2022-02-21T14:59:01.406Z", "1904-04-30");
        java.lang.Object obj3 = locale2.clone();
        org.junit.Assert.assertEquals(locale2.toString(), "2022-02-21t14:59:01.406z_1904-04-30");
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "2022-02-21t14:59:01.406z_1904-04-30");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "2022-02-21t14:59:01.406z_1904-04-30");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "2022-02-21t14:59:01.406z_1904-04-30");
    }

    @Test
    public void test04075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04075");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime5 = timeOfDay2.toDateTime((org.joda.time.ReadableInstant) instant4);
        org.joda.time.Chronology chronology6 = instant4.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.clockhourOfHalfday();
        long long9 = dateTimeField7.roundHalfFloor(0L);
        java.util.Locale locale10 = java.util.Locale.TRADITIONAL_CHINESE;
        int int11 = dateTimeField7.getMaximumShortTextLength(locale10);
        java.util.Locale locale12 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale13 = locale12.stripExtensions();
        java.util.Locale locale14 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale15 = locale14.stripExtensions();
        java.lang.String str16 = locale12.getDisplayName(locale14);
        java.lang.String str17 = locale10.getDisplayLanguage(locale12);
        java.lang.String str18 = locale10.getDisplayLanguage();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone20);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight21.withDurationAdded((long) 2, 100);
        int int25 = dateMidnight24.getDayOfMonth();
        java.util.GregorianCalendar gregorianCalendar26 = dateMidnight24.toGregorianCalendar();
        gregorianCalendar26.setTimeInMillis(14L);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.TimeOfDay timeOfDay34 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant36 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime37 = timeOfDay34.toDateTime((org.joda.time.ReadableInstant) instant36);
        org.joda.time.Chronology chronology38 = instant36.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.clockhourOfHalfday();
        org.joda.time.DurationField durationField40 = chronology38.eras();
        org.joda.time.DateTimeField dateTimeField41 = dateTimeFieldType31.getField(chronology38);
        long long44 = dateTimeField41.add((long) (short) 100, (long) (byte) -1);
        boolean boolean45 = dateTimeField41.isSupported();
        org.joda.time.TimeOfDay timeOfDay49 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant51 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime52 = timeOfDay49.toDateTime((org.joda.time.ReadableInstant) instant51);
        org.joda.time.Chronology chronology53 = instant51.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.clockhourOfHalfday();
        long long56 = dateTimeField54.roundHalfFloor(0L);
        java.util.Locale locale57 = java.util.Locale.TRADITIONAL_CHINESE;
        int int58 = dateTimeField54.getMaximumShortTextLength(locale57);
        java.lang.String str59 = locale57.getLanguage();
        java.util.Locale locale60 = locale57.stripExtensions();
        java.lang.String str61 = dateTimeField41.getAsShortText((long) 10, locale57);
        java.util.Map<java.lang.String, java.lang.Integer> strMap62 = gregorianCalendar26.getDisplayNames(11, (int) (byte) 0, locale57);
        java.lang.String str63 = locale10.getDisplayScript(locale57);
        java.util.Locale locale65 = java.util.Locale.forLanguageTag("Property[dayOfWeek]");
        java.util.Locale locale66 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.String> strSet67 = locale66.getUnicodeLocaleAttributes();
        java.lang.String str68 = locale65.getDisplayCountry(locale66);
        java.lang.String str69 = locale65.getISO3Country();
        java.lang.String str70 = locale65.getDisplayVariant();
        java.lang.String str71 = locale57.getDisplayName(locale65);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str16, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u4e2d\u6587" + "'", str17, "\u4e2d\u6587");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u4e2d\u6587" + "'", str18, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(gregorianCalendar26);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + (-2678399900L) + "'", long44 == (-2678399900L));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "zh" + "'", str59, "zh");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "\u4e00\u6708" + "'", str61, "\u4e00\u6708");
        org.junit.Assert.assertNull(strMap62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "de_DE");
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Chinese (Taiwan)" + "'", str71, "Chinese (Taiwan)");
    }

    @Test
    public void test04076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04076");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTime((org.joda.time.ReadableInstant) instant6);
        org.joda.time.Chronology chronology8 = instant6.getChronology();
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime14 = timeOfDay11.toDateTime((org.joda.time.ReadableInstant) instant13);
        int[] intArray16 = chronology8.get((org.joda.time.ReadablePartial) timeOfDay11, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(0L, chronology8);
        int int18 = mutableDateTime17.getEra();
        mutableDateTime0.setMillis((org.joda.time.ReadableInstant) mutableDateTime17);
        mutableDateTime0.addWeekyears(36000000);
        mutableDateTime0.setWeekyear(6);
        mutableDateTime0.addDays((-292275054));
        mutableDateTime0.setMillisOfDay(54075919);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test04077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04077");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 100);
        int int2 = timeOfDay1.getMinuteOfHour();
        org.joda.time.TimeOfDay.Property property3 = timeOfDay1.minuteOfHour();
        org.joda.time.Chronology chronology4 = timeOfDay1.getChronology();
        org.joda.time.LocalTime localTime5 = timeOfDay1.toLocalTime();
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(localTime5);
    }

    @Test
    public void test04078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04078");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime localTime3 = localTime1.minusMinutes((int) (short) 1);
        org.joda.time.DateTimeField[] dateTimeFieldArray4 = localTime1.getFields();
        org.joda.time.LocalTime localTime6 = localTime1.plusHours(0);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfDay();
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(dateTimeFieldArray4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test04079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04079");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime localTime3 = localTime1.minusMinutes((int) (short) 1);
        org.joda.time.LocalTime localTime5 = localTime1.withMillisOfDay((int) (byte) 1);
        org.joda.time.LocalTime localTime7 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime localTime9 = localTime7.minusMinutes((int) (short) 1);
        int int10 = localTime7.getMillisOfDay();
        org.joda.time.LocalTime.Property property11 = localTime7.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.millis();
        boolean boolean13 = localTime7.isSupported(durationFieldType12);
        int int14 = localTime1.compareTo((org.joda.time.ReadablePartial) localTime7);
        int int15 = localTime7.getMillisOfDay();
        org.joda.time.LocalTime.Property property16 = localTime7.minuteOfHour();
        org.joda.time.LocalTime localTime17 = property16.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 35 + "'", int10 == 35);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localTime17);
    }

    @Test
    public void test04080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04080");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime localTime3 = localTime1.minusMinutes((int) (short) 1);
        org.joda.time.LocalTime localTime5 = localTime1.minusMillis((int) 'x');
        org.joda.time.DateTime dateTime6 = localTime1.toDateTimeToday();
        org.joda.time.Chronology chronology7 = localTime1.getChronology();
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
    }

    @Test
    public void test04081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04081");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        java.lang.Object obj17 = mutableDateTime16.clone();
        int int18 = mutableDateTime16.getMinuteOfHour();
        org.joda.time.Instant instant20 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone21 = instant20.getZone();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime25 = dateTime22.withDurationAdded(readableDuration23, (int) (byte) 0);
        org.joda.time.DateTime dateTime27 = dateTime22.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime29 = dateTime27.plusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime31 = dateTime29.plusDays(2);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMillis((int) (short) 0);
        boolean boolean34 = mutableDateTime16.equals((java.lang.Object) dateTime31);
        int int35 = mutableDateTime16.getHourOfDay();
        mutableDateTime16.setYear((-457079));
        org.joda.time.Instant instant39 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone40 = instant39.getZone();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone40);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.DateTime dateTime44 = dateTime41.withDurationAdded(readableDuration42, (int) (byte) 0);
        org.joda.time.DateTime dateTime46 = dateTime41.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime48 = dateTime46.plusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime50 = dateTime48.plusDays(2);
        org.joda.time.DateTime dateTime52 = dateTime50.minusMillis((int) (short) 0);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.DateTime dateTime55 = dateTime52.withPeriodAdded(readablePeriod53, (int) (byte) 1);
        mutableDateTime16.setMillis((org.joda.time.ReadableInstant) dateTime55);
        int int57 = mutableDateTime16.getWeekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime16.setDateTime(51, 53891, 31, 2744, 462, 0, 910);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2744 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 8 + "'", int57 == 8);
    }

    @Test
    public void test04082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04082");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(201, 369);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 201 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04083");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.fromDateFields(date0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04084");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.withDurationAdded(readableDuration4, (int) (byte) 0);
        org.joda.time.DateTime dateTime8 = dateTime3.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime10 = dateTime8.plusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime12 = dateTime10.plusDays(2);
        org.joda.time.DateTime dateTime14 = dateTime10.withHourOfDay(10);
        org.joda.time.DateTime dateTime16 = dateTime14.minusDays((int) 'x');
        org.joda.time.DateTime dateTime18 = dateTime16.minusDays(2678400);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test04085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04085");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime5 = timeOfDay2.toDateTime((org.joda.time.ReadableInstant) instant4);
        org.joda.time.Chronology chronology6 = instant4.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.clockhourOfHalfday();
        org.joda.time.DurationField durationField8 = chronology6.eras();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone10 = chronology6.getZone();
        org.joda.time.DateTimeField dateTimeField11 = chronology6.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField12 = chronology6.dayOfWeek();
        java.lang.String str14 = dateTimeField12.getAsText((long) 42);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = dateTimeField12.getType();
        java.lang.String str17 = dateTimeField12.getAsText(57854412000L);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Thursday" + "'", str14, "Thursday");
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Monday" + "'", str17, "Monday");
    }

    @Test
    public void test04086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04086");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.weekyear();
        java.util.Locale locale2 = java.util.Locale.UK;
        java.lang.String str3 = property1.getAsText(locale2);
        org.joda.time.LocalDate localDate4 = property1.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField5 = property1.getField();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2022" + "'", str3, "2022");
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTimeField5);
    }

    @Test
    public void test04087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04087");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = localDate0.toDateMidnight(dateTimeZone3);
        org.joda.time.DateTime dateTime5 = localDate0.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime6 = localDate0.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate8 = localDate0.minusWeeks((int) 'a');
        org.joda.time.DateTime dateTime9 = localDate8.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate.Property property10 = localDate8.era();
        int int11 = localDate8.getYearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate13 = localDate8.withDayOfMonth(32);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32 for dayOfMonth must be in the range [1,30]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20 + "'", int11 == 20);
    }

    @Test
    public void test04088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04088");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        int int17 = mutableDateTime16.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime16.property(dateTimeFieldType18);
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime25 = timeOfDay22.toDateTime((org.joda.time.ReadableInstant) instant24);
        org.joda.time.Chronology chronology26 = instant24.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.clockhourOfHalfday();
        long long29 = dateTimeField27.roundHalfFloor(0L);
        java.util.Locale locale30 = java.util.Locale.TRADITIONAL_CHINESE;
        int int31 = dateTimeField27.getMaximumShortTextLength(locale30);
        java.util.Locale locale32 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale33 = locale32.stripExtensions();
        java.util.Locale locale34 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale35 = locale34.stripExtensions();
        java.lang.String str36 = locale32.getDisplayName(locale34);
        java.lang.String str37 = locale30.getDisplayLanguage(locale32);
        java.util.Calendar calendar38 = mutableDateTime16.toCalendar(locale32);
        calendar38.set((int) (short) 100, (int) '#', (int) ' ');
        calendar38.setMinimalDaysInFirstWeek((int) (short) 100);
        int int46 = calendar38.getMinimum(7);
        boolean boolean47 = calendar38.isWeekDateSupported();
        // The following exception was thrown during execution in test generation
        try {
            int int49 = calendar38.getActualMinimum(31);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 31");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str36, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u4e2d\u6587" + "'", str37, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(calendar38);
        org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=100,ERA=1,YEAR=100,MONTH=35,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=32,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test04089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04089");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.Chronology chronology1 = localDateTime0.getChronology();
        int int2 = localDateTime0.size();
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime5 = property3.addWrapFieldToCopy(11);
        org.joda.time.DurationField durationField6 = property3.getDurationField();
        // The following exception was thrown during execution in test generation
        try {
            int int9 = durationField6.getDifference((-2072476800000L), 1645455699030L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: -3717932499");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(durationField6);
    }

    @Test
    public void test04090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04090");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.Chronology chronology1 = localDateTime0.getChronology();
        org.joda.time.LocalDateTime.Property property2 = localDateTime0.weekOfWeekyear();
        int int3 = localDateTime0.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight6.withDurationAdded((long) 2, 100);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minusWeeks((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight9.minusWeeks(0);
        boolean boolean14 = localDateTime0.equals((java.lang.Object) 0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime0.minusSeconds(1970);
        org.joda.time.LocalDateTime.Property property17 = localDateTime0.year();
        org.joda.time.Instant instant18 = new org.joda.time.Instant();
        org.joda.time.Instant instant20 = instant18.plus((long) 2);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant22 = instant20.minus(readableDuration21);
        org.joda.time.DateTime dateTime23 = instant22.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight26.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight30.plusWeeks(20);
        org.joda.time.MutableDateTime mutableDateTime33 = dateMidnight32.toMutableDateTimeISO();
        boolean boolean34 = instant22.isAfter((org.joda.time.ReadableInstant) dateMidnight32);
        org.joda.time.DateTime dateTime35 = instant22.toDateTimeISO();
        org.joda.time.DateTime dateTime36 = localDateTime0.toDateTime((org.joda.time.ReadableInstant) dateTime35);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 22 + "'", int3 == 22);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
    }

    @Test
    public void test04091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04091");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = localDate0.toDateMidnight(dateTimeZone3);
        org.joda.time.DateTime dateTime5 = localDate0.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property6 = localDate0.yearOfEra();
        org.joda.time.LocalDate.Property property7 = localDate0.year();
        org.joda.time.LocalDate localDate8 = property7.roundCeilingCopy();
        java.util.Date date9 = localDate8.toDate();
        org.joda.time.LocalDate localDate11 = localDate8.withWeekOfWeekyear(14);
        org.joda.time.LocalDate localDate13 = localDate8.plusMonths(0);
        org.joda.time.Instant instant15 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone16 = instant15.getZone();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.DateTime dateTime20 = dateTime17.withDurationAdded(readableDuration18, (int) (byte) 0);
        org.joda.time.DateTime dateTime22 = dateTime17.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime24 = dateTime22.plusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime26 = dateTime24.plusDays(2);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int28 = dateTime26.get(dateTimeFieldType27);
        org.joda.time.Chronology chronology29 = null;
        boolean boolean30 = dateTimeFieldType27.isSupported(chronology29);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now();
        org.joda.time.Chronology chronology32 = localDateTime31.getChronology();
        boolean boolean33 = dateTimeFieldType27.isSupported(chronology32);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate35 = localDate13.withField(dateTimeFieldType27, 11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'hourOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Sun Jan 01 00:00:00 GMT 2023");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 15 + "'", int28 == 15);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test04092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04092");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime22 = timeOfDay19.toDateTime((org.joda.time.ReadableInstant) instant21);
        org.joda.time.Chronology chronology23 = instant21.getChronology();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        int[] intArray31 = chronology23.get((org.joda.time.ReadablePartial) timeOfDay26, (long) (short) -1);
        mutableDateTime16.setChronology(chronology23);
        boolean boolean33 = mutableDateTime16.isEqualNow();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime16.secondOfDay();
        boolean boolean35 = mutableDateTime16.isAfterNow();
        mutableDateTime16.setMillisOfSecond((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        mutableDateTime16.add(readablePeriod38);
        mutableDateTime16.setMillis((long) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHours(11);
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime((java.lang.Object) mutableDateTime16, dateTimeZone43);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone47);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight48.withEra(1);
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight50.withCenturyOfEra(2);
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight52.plusMonths(2022);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight54.withWeekOfWeekyear(2);
        org.joda.time.Interval interval57 = new org.joda.time.Interval(readablePeriod45, (org.joda.time.ReadableInstant) dateMidnight54);
        mutableDateTime44.setTime((org.joda.time.ReadableInstant) dateMidnight54);
        org.joda.time.MutableDateTime.Property property59 = mutableDateTime44.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime44.setSecondOfMinute(64);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 64 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(property59);
    }

    @Test
    public void test04093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04093");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime5 = timeOfDay2.toDateTime((org.joda.time.ReadableInstant) instant4);
        org.joda.time.Chronology chronology6 = instant4.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.clockhourOfHalfday();
        long long9 = dateTimeField7.roundHalfFloor(0L);
        java.util.Locale locale10 = java.util.Locale.TRADITIONAL_CHINESE;
        int int11 = dateTimeField7.getMaximumShortTextLength(locale10);
        java.util.Locale locale12 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale13 = locale12.stripExtensions();
        java.util.Locale locale14 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale15 = locale14.stripExtensions();
        java.lang.String str16 = locale12.getDisplayName(locale14);
        java.lang.String str17 = locale10.getDisplayLanguage(locale12);
        java.util.Set<java.lang.String> strSet18 = locale12.getUnicodeLocaleAttributes();
        int int19 = strSet18.size();
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap23 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList24 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, strMap23);
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "\u4e2d\u6587\u53f0\u7063)", "zh", "hi!", "\u4e2d\u6587", "1970-01-01T00:00:00.000Z", "zh" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        java.lang.String str35 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.lang.String>) strList33);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap36 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList37 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, strMap36);
        java.util.Locale.LanguageRange[] languageRangeArray38 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList39 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList39, languageRangeArray38);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap41 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList42 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList39, strMap41);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", "\u4e2d\u6587\u53f0\u7063)", "zh", "hi!", "\u4e2d\u6587", "1970-01-01T00:00:00.000Z", "zh" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        java.lang.String str53 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList39, (java.util.Collection<java.lang.String>) strList51);
        java.lang.String[] strArray59 = new java.lang.String[] { "1969-12-31T00:01:00.000Z", "\u4e2d\u6587", "zh_TW", "", "1969-12-31T00:01:00.000Z" };
        java.util.ArrayList<java.lang.String> strList60 = new java.util.ArrayList<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList60, strArray59);
        java.util.Locale.FilteringMode filteringMode62 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList63 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList39, (java.util.Collection<java.lang.String>) strList60, filteringMode62);
        java.util.List<java.lang.String> strList64 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.lang.String>) strList63);
        boolean boolean65 = strSet18.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21);
        java.util.Collection<java.lang.String> strCollection66 = null;
        java.util.Locale.FilteringMode filteringMode67 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList68 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, strCollection66, filteringMode67);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str16, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u4e2d\u6587" + "'", str17, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(languageRangeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(languageRangeList24);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(languageRangeList37);
        org.junit.Assert.assertNotNull(languageRangeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(languageRangeList42);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + filteringMode62 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode62.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList63);
        org.junit.Assert.assertNotNull(strList64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + filteringMode67 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode67.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList68);
    }

    @Test
    public void test04094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04094");
        java.util.Date date3 = new java.util.Date(0, (int) '4', 0);
        int int4 = date3.getMinutes();
        org.joda.time.YearMonthDay yearMonthDay5 = org.joda.time.YearMonthDay.fromDateFields(date3);
        int int6 = yearMonthDay5.getYear();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay5.minus(readablePeriod7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay5.plus(readablePeriod9);
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay10.withYear(16);
        org.joda.time.Interval interval13 = yearMonthDay12.toInterval();
        org.junit.Assert.assertEquals(date3.toString(), "Sat Apr 30 00:00:00 GMT 1904");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1904 + "'", int6 == 1904);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(interval13);
    }

    @Test
    public void test04095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04095");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.withSecondOfMinute((int) (byte) 1);
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay7 = property5.addWrapFieldToCopy(1);
        java.util.Locale locale8 = java.util.Locale.ITALY;
        java.lang.String str9 = property5.getAsShortText(locale8);
        org.joda.time.DurationField durationField10 = property5.getDurationField();
        boolean boolean11 = durationField10.isSupported();
        java.lang.String str12 = durationField10.toString();
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "0" + "'", str9, "0");
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "DurationField[hours]" + "'", str12, "DurationField[hours]");
    }

    @Test
    public void test04096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04096");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTime((org.joda.time.ReadableInstant) instant6);
        org.joda.time.Chronology chronology8 = instant6.getChronology();
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime14 = timeOfDay11.toDateTime((org.joda.time.ReadableInstant) instant13);
        int[] intArray16 = chronology8.get((org.joda.time.ReadablePartial) timeOfDay11, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(0L, chronology8);
        org.joda.time.DurationField durationField18 = chronology8.weeks();
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((-86340000L), chronology8);
        int[] intArray20 = localTime19.getValues();
        org.joda.time.LocalTime localTime22 = localTime19.plusMinutes((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalTime localTime25 = localTime19.withPeriodAdded(readablePeriod23, (int) '4');
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalTime localTime27 = localTime19.plus(readablePeriod26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = localTime19.toDateTimeToday(dateTimeZone28);
        org.joda.time.LocalTime.Property property30 = localTime19.secondOfMinute();
        boolean boolean31 = property30.isLeap();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test04097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04097");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = localDate0.toDateMidnight(dateTimeZone3);
        org.joda.time.DateTime dateTime5 = localDate0.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property6 = localDate0.yearOfEra();
        org.joda.time.LocalDate.Property property7 = localDate0.year();
        org.joda.time.LocalDate localDate9 = localDate0.withCenturyOfEra(70);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate12 = localDate9.withField(dateTimeFieldType10, 290);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 290 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
    }

    @Test
    public void test04098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04098");
        org.joda.time.TimeOfDay timeOfDay5 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime8 = timeOfDay5.toDateTime((org.joda.time.ReadableInstant) instant7);
        org.joda.time.Chronology chronology9 = instant7.getChronology();
        org.joda.time.TimeOfDay timeOfDay12 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant14 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime15 = timeOfDay12.toDateTime((org.joda.time.ReadableInstant) instant14);
        int[] intArray17 = chronology9.get((org.joda.time.ReadablePartial) timeOfDay12, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(0L, chronology9);
        org.joda.time.DurationField durationField19 = chronology9.weeks();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((-86340000L), chronology9);
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now(chronology9);
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay((-30281093963986000L), chronology9);
        org.joda.time.TimeOfDay timeOfDay24 = timeOfDay22.plusMillis(18);
        int int25 = timeOfDay22.getHourOfDay();
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
    }

    @Test
    public void test04099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04099");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime5 = timeOfDay2.toDateTime((org.joda.time.ReadableInstant) instant4);
        org.joda.time.Chronology chronology6 = instant4.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.clockhourOfHalfday();
        long long9 = dateTimeField7.roundHalfFloor(0L);
        java.util.Locale locale10 = java.util.Locale.TRADITIONAL_CHINESE;
        int int11 = dateTimeField7.getMaximumShortTextLength(locale10);
        java.util.Locale locale12 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale13 = locale12.stripExtensions();
        java.util.Locale locale14 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale15 = locale14.stripExtensions();
        java.lang.String str16 = locale12.getDisplayName(locale14);
        java.lang.String str17 = locale10.getDisplayLanguage(locale12);
        java.util.Set<java.lang.String> strSet18 = locale12.getUnicodeLocaleAttributes();
        int int19 = strSet18.size();
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap23 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList24 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, strMap23);
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "\u4e2d\u6587\u53f0\u7063)", "zh", "hi!", "\u4e2d\u6587", "1970-01-01T00:00:00.000Z", "zh" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        java.lang.String str35 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.lang.String>) strList33);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap36 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList37 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, strMap36);
        boolean boolean38 = strSet18.retainAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList37);
        org.joda.time.format.DateTimePrinter dateTimePrinter39 = null;
        org.joda.time.format.DateTimeParser dateTimeParser40 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter39, dateTimeParser40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter41.withZone(dateTimeZone42);
        org.joda.time.format.DateTimeParser dateTimeParser44 = dateTimeFormatter41.getParser();
        boolean boolean45 = strSet18.equals((java.lang.Object) dateTimeFormatter41);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter41.withOffsetParsed();
        org.joda.time.LocalDateTime localDateTime47 = org.joda.time.LocalDateTime.now();
        org.joda.time.Chronology chronology48 = localDateTime47.getChronology();
        int int49 = localDateTime47.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property50 = localDateTime47.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str51 = dateTimeFormatter41.print((org.joda.time.ReadablePartial) localDateTime47);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str16, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u4e2d\u6587" + "'", str17, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(languageRangeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(languageRangeList24);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(languageRangeList37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
        org.junit.Assert.assertNull(dateTimeParser44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(property50);
    }

    @Test
    public void test04100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04100");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTime((org.joda.time.ReadableInstant) instant6);
        org.joda.time.Chronology chronology8 = instant6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.clockhourOfHalfday();
        long long11 = dateTimeField9.roundHalfFloor(0L);
        java.util.Locale locale12 = java.util.Locale.TRADITIONAL_CHINESE;
        int int13 = dateTimeField9.getMaximumShortTextLength(locale12);
        java.util.Locale locale14 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale15 = locale14.stripExtensions();
        java.util.Locale locale16 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale17 = locale16.stripExtensions();
        java.lang.String str18 = locale14.getDisplayName(locale16);
        java.lang.String str19 = locale12.getDisplayLanguage(locale14);
        java.util.Locale.Builder builder20 = builder1.setLocale(locale14);
        java.util.Locale.Builder builder21 = builder1.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder24 = builder1.setExtension('4', "141");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: 4 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str18, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u4e2d\u6587" + "'", str19, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test04101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04101");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval5 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean6 = interval2.abuts((org.joda.time.ReadableInterval) interval5);
        long long7 = interval5.getStartMillis();
        org.joda.time.Interval interval9 = interval5.withStartMillis((long) (short) -1);
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.Instant instant12 = instant10.plus((long) 2);
        org.joda.time.MutableDateTime mutableDateTime13 = instant12.toMutableDateTimeISO();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        mutableDateTime13.add(readablePeriod14, (int) ' ');
        org.joda.time.TimeOfDay timeOfDay21 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant23 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime24 = timeOfDay21.toDateTime((org.joda.time.ReadableInstant) instant23);
        org.joda.time.Chronology chronology25 = instant23.getChronology();
        org.joda.time.TimeOfDay timeOfDay28 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant30 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime31 = timeOfDay28.toDateTime((org.joda.time.ReadableInstant) instant30);
        int[] intArray33 = chronology25.get((org.joda.time.ReadablePartial) timeOfDay28, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(0L, chronology25);
        org.joda.time.DurationField durationField35 = chronology25.weeks();
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((-86340000L), chronology25);
        org.joda.time.MutableDateTime mutableDateTime37 = org.joda.time.MutableDateTime.now(chronology25);
        org.joda.time.DateTimeField dateTimeField38 = chronology25.dayOfWeek();
        mutableDateTime13.setChronology(chronology25);
        org.joda.time.Interval interval40 = interval9.withChronology(chronology25);
        org.joda.time.DateTime dateTime41 = interval40.getEnd();
        org.joda.time.TimeOfDay timeOfDay45 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant47 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime48 = timeOfDay45.toDateTime((org.joda.time.ReadableInstant) instant47);
        org.joda.time.Chronology chronology49 = instant47.getChronology();
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight((java.lang.Object) (-11491200000L), chronology49);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(chronology49);
        org.joda.time.TimeOfDay timeOfDay52 = new org.joda.time.TimeOfDay((java.lang.Object) dateTime41, chronology49);
        org.joda.time.TimeOfDay timeOfDay54 = timeOfDay52.minusMillis(2744);
        org.joda.time.TimeOfDay.Property property55 = timeOfDay52.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField56 = property55.getField();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(timeOfDay54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTimeField56);
    }

    @Test
    public void test04102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04102");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone4);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight5.withWeekyear(2);
        org.joda.time.DateTimeZone dateTimeZone10 = dateMidnight5.getZone();
        long long12 = dateTimeZone2.getMillisKeepLocal(dateTimeZone10, 10L);
        java.lang.String str13 = dateTimeZone10.getID();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10L + "'", long12 == 10L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "UTC" + "'", str13, "UTC");
    }

    @Test
    public void test04103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04103");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.withWeekyear(2);
        org.joda.time.DateMidnight.Property property7 = dateMidnight2.weekOfWeekyear();
        java.lang.String str8 = property7.getAsString();
        org.joda.time.DateMidnight dateMidnight10 = property7.addToCopy((long) (-11491200));
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.withYearOfEra(122);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.plusWeeks((int) (short) 10);
        org.joda.time.LocalDate localDate15 = dateMidnight14.toLocalDate();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.minus(262974600000L);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateMidnight17);
    }

    @Test
    public void test04104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04104");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime5 = timeOfDay2.toDateTime((org.joda.time.ReadableInstant) instant4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.DateTime dateTime8 = dateTime5.withPeriodAdded(readablePeriod6, (int) (short) 0);
        org.joda.time.DateTime.Property property9 = dateTime5.hourOfDay();
        org.joda.time.LocalTime localTime10 = dateTime5.toLocalTime();
        org.joda.time.Chronology chronology11 = localTime10.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.dayOfWeek();
        java.lang.String str13 = chronology11.toString();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology11.clockhourOfHalfday();
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(chronology11);
        org.joda.time.DurationField durationField17 = chronology11.hours();
        int int19 = durationField17.getValue(172800000L);
        long long22 = durationField17.subtract(1645455616426L, 7);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[UTC]" + "'", str13, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 48 + "'", int19 == 48);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1645430416426L + "'", long22 == 1645430416426L);
    }

    @Test
    public void test04105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04105");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.Chronology chronology1 = localDateTime0.getChronology();
        int int2 = localDateTime0.size();
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.weekyear();
        org.joda.time.LocalDateTime localDateTime4 = property3.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withYearOfEra((int) (byte) 1);
        org.joda.time.Interval interval9 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean13 = interval9.abuts((org.joda.time.ReadableInterval) interval12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.withWeekyear(2);
        boolean boolean19 = interval9.isBefore((org.joda.time.ReadableInstant) dateMidnight16);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Interval interval21 = interval9.withDurationAfterStart(readableDuration20);
        org.joda.time.Duration duration22 = interval9.toDuration();
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval28 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean29 = interval25.abuts((org.joda.time.ReadableInterval) interval28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.withWeekyear(2);
        boolean boolean35 = interval25.isBefore((org.joda.time.ReadableInstant) dateMidnight32);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Interval interval37 = interval25.withDurationAfterStart(readableDuration36);
        org.joda.time.Duration duration38 = interval25.toDuration();
        int int39 = duration22.compareTo((org.joda.time.ReadableDuration) duration38);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime4.minus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime4.minusDays(365);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime4.withYearOfCentury(29);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.minusWeeks(32772);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime48 = localDateTime46.plusHours(53979578);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: 9223350149602906464 + 194326480800000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
    }

    @Test
    public void test04106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04106");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime5 = timeOfDay2.toDateTime((org.joda.time.ReadableInstant) instant4);
        org.joda.time.Chronology chronology6 = instant4.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.clockhourOfHalfday();
        org.joda.time.DurationField durationField8 = chronology6.eras();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.dayOfYear();
        org.joda.time.TimeOfDay timeOfDay12 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant14 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime15 = timeOfDay12.toDateTime((org.joda.time.ReadableInstant) instant14);
        org.joda.time.Chronology chronology16 = instant14.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.clockhourOfHalfday();
        long long19 = dateTimeField17.roundHalfFloor(0L);
        java.util.Locale locale20 = java.util.Locale.TRADITIONAL_CHINESE;
        int int21 = dateTimeField17.getMaximumShortTextLength(locale20);
        java.lang.String str22 = locale20.getLanguage();
        int int23 = dateTimeField9.getMaximumTextLength(locale20);
        org.joda.time.LocalTime localTime25 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime localTime27 = localTime25.minusMinutes((int) (short) 1);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.seconds();
        boolean boolean29 = localTime25.isSupported(durationFieldType28);
        int int30 = dateTimeField9.getMaximumValue((org.joda.time.ReadablePartial) localTime25);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = dateTimeField9.getType();
        int int32 = dateTimeField9.getMinimumValue();
        long long35 = dateTimeField9.set((long) 723960000, "10");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "zh" + "'", str22, "zh");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 366 + "'", int30 == 366);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 810360000L + "'", long35 == 810360000L);
    }

    @Test
    public void test04107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04107");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTime((org.joda.time.ReadableInstant) instant6);
        org.joda.time.Chronology chronology8 = instant6.getChronology();
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime14 = timeOfDay11.toDateTime((org.joda.time.ReadableInstant) instant13);
        int[] intArray16 = chronology8.get((org.joda.time.ReadablePartial) timeOfDay11, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(0L, chronology8);
        mutableDateTime17.setYear(3);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone22 = instant21.getZone();
        mutableDateTime17.setZone(dateTimeZone22);
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(dateTimeZone22);
        java.lang.String str26 = dateTimeZone22.getName((long) 'x');
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(0L, dateTimeZone22);
        long long30 = dateTimeZone22.convertLocalToUTC(2596441L, true);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 2596441L + "'", long30 == 2596441L);
    }

    @Test
    public void test04108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04108");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 3);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property4 = localDate3.weekyear();
        org.joda.time.LocalDate localDate6 = localDate3.withWeekyear((-1));
        java.util.Date date7 = localDate3.toDate();
        date7.setDate((int) ' ');
        java.util.Calendar.Builder builder10 = builder0.setInstant(date7);
        date7.setMinutes((int) ' ');
        int int13 = date7.getDate();
        java.time.Instant instant14 = date7.toInstant();
        org.joda.time.LocalDate localDate15 = org.joda.time.LocalDate.fromDateFields(date7);
        java.util.Date date22 = new java.util.Date(1439, (-19045), (-292275054), 865, 999, 22);
        int int23 = date7.compareTo(date22);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Fri Mar 04 00:32:00 GMT 2022");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertEquals(date22.toString(), "Sat Jul 11 17:39:22 GMT 798455");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
    }

    @Test
    public void test04109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04109");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) ' ');
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean4 = localDate2.isSupported(dateTimeFieldType3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = localDate2.toDateMidnight(dateTimeZone5);
        org.joda.time.DateTime dateTime7 = localDate2.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property8 = localDate2.yearOfEra();
        org.joda.time.LocalDate.Property property9 = localDate2.weekyear();
        boolean boolean10 = localDate1.isAfter((org.joda.time.ReadablePartial) localDate2);
        int int11 = localDate1.getDayOfMonth();
        org.joda.time.LocalDate localDate13 = localDate1.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDate.Property property14 = localDate1.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate16 = property14.setCopy("Property[minuteOfHour]");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Property[minuteOfHour]\" for yearOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test04110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04110");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime22 = timeOfDay19.toDateTime((org.joda.time.ReadableInstant) instant21);
        org.joda.time.Chronology chronology23 = instant21.getChronology();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        int[] intArray31 = chronology23.get((org.joda.time.ReadablePartial) timeOfDay26, (long) (short) -1);
        mutableDateTime16.setChronology(chronology23);
        boolean boolean33 = mutableDateTime16.isEqualNow();
        org.joda.time.ReadableDuration readableDuration34 = null;
        mutableDateTime16.add(readableDuration34);
        mutableDateTime16.addSeconds(5);
        mutableDateTime16.addDays(23);
        mutableDateTime16.setSecondOfDay(8);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime16.setWeekOfWeekyear(1900);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1900 for weekOfWeekyear must be in the range [1,53]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test04111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04111");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime22 = timeOfDay19.toDateTime((org.joda.time.ReadableInstant) instant21);
        org.joda.time.Chronology chronology23 = instant21.getChronology();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        int[] intArray31 = chronology23.get((org.joda.time.ReadablePartial) timeOfDay26, (long) (short) -1);
        mutableDateTime16.setChronology(chronology23);
        mutableDateTime16.addMonths((int) (byte) 0);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime16.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay38 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant40 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime41 = timeOfDay38.toDateTime((org.joda.time.ReadableInstant) instant40);
        org.joda.time.Chronology chronology42 = instant40.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.clockhourOfHalfday();
        org.joda.time.DurationField durationField44 = chronology42.eras();
        org.joda.time.DateTimeField dateTimeField45 = chronology42.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone46 = chronology42.getZone();
        org.joda.time.DateTimeField dateTimeField47 = chronology42.clockhourOfDay();
        org.joda.time.TimeOfDay timeOfDay50 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant52 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime53 = timeOfDay50.toDateTime((org.joda.time.ReadableInstant) instant52);
        org.joda.time.Chronology chronology54 = instant52.getChronology();
        org.joda.time.DateTimeField dateTimeField55 = chronology54.clockhourOfHalfday();
        org.joda.time.DurationField durationField56 = chronology54.eras();
        org.joda.time.DateTimeField dateTimeField57 = chronology54.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone58 = chronology54.getZone();
        org.joda.time.Chronology chronology59 = chronology42.withZone(dateTimeZone58);
        int int61 = dateTimeZone58.getOffset(8035L);
        mutableDateTime16.setZone(dateTimeZone58);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime16.setDate(1968, 86399, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 86399 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
    }

    @Test
    public void test04112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04112");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.Chronology chronology1 = localDateTime0.getChronology();
        org.joda.time.LocalDateTime.Property property2 = localDateTime0.weekOfWeekyear();
        int int3 = localDateTime0.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight6.withDurationAdded((long) 2, 100);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minusWeeks((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight9.minusWeeks(0);
        boolean boolean14 = localDateTime0.equals((java.lang.Object) 0);
        int int15 = localDateTime0.getDayOfYear();
        org.joda.time.Chronology chronology16 = localDateTime0.getChronology();
        java.util.Date date17 = localDateTime0.toDate();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime19 = localDateTime0.withMonthOfYear(910);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 910 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 22 + "'", int3 == 22);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(date17);
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Mon Feb 21 15:01:46 GMT 2022");
    }

    @Test
    public void test04113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04113");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder0.set(14, (-1));
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant10 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime11 = timeOfDay8.toDateTime((org.joda.time.ReadableInstant) instant10);
        org.joda.time.Chronology chronology12 = instant10.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.clockhourOfHalfday();
        long long15 = dateTimeField13.roundHalfFloor(0L);
        java.util.Locale locale16 = java.util.Locale.TRADITIONAL_CHINESE;
        int int17 = dateTimeField13.getMaximumShortTextLength(locale16);
        java.lang.String str18 = locale16.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket((-1L), chronology5, locale16);
        java.lang.Integer int20 = dateTimeParserBucket19.getPivotYear();
        long long21 = dateTimeParserBucket19.computeMillis();
        org.joda.time.Chronology chronology22 = dateTimeParserBucket19.getChronology();
        java.util.Locale locale23 = dateTimeParserBucket19.getLocale();
        java.util.Calendar.Builder builder24 = builder0.setLocale(locale23);
        java.util.Calendar.Builder builder28 = builder24.setWeekDate((int) 'u', 8, 59);
        org.joda.time.TimeOfDay timeOfDay31 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant33 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime34 = timeOfDay31.toDateTime((org.joda.time.ReadableInstant) instant33);
        org.joda.time.Chronology chronology35 = instant33.getChronology();
        org.joda.time.TimeOfDay timeOfDay38 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant40 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime41 = timeOfDay38.toDateTime((org.joda.time.ReadableInstant) instant40);
        int[] intArray43 = chronology35.get((org.joda.time.ReadablePartial) timeOfDay38, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField44 = chronology35.dayOfYear();
        java.lang.String str45 = dateTimeField44.toString();
        java.util.Locale locale47 = java.util.Locale.forLanguageTag("GMT+00:00");
        int int48 = dateTimeField44.getMaximumTextLength(locale47);
        java.util.Calendar.Builder builder49 = builder24.setLocale(locale47);
        java.util.Set<java.lang.String> strSet50 = locale47.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "zh" + "'", str18, "zh");
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "DateTimeField[dayOfYear]" + "'", str45, "DateTimeField[dayOfYear]");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(strSet50);
    }

    @Test
    public void test04114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04114");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.withSecondOfMinute((int) (byte) 1);
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.plusMillis(999);
        org.joda.time.TimeOfDay.Property property7 = timeOfDay4.minuteOfHour();
        java.util.Locale locale12 = new java.util.Locale("Mon Feb 21 00:00:00 GMT+00:00 2022", "Property[monthOfYear]", "\u4e8c\u6708");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay13 = property7.setCopy("1970-01-01T05:00:00.000Z", locale12);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"1970-01-01T05:00:00.000Z\" for minuteOfHour is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertEquals(locale12.toString(), "\u4e8c\u6708");
    }

    @Test
    public void test04115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04115");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime.Property property2 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime3 = property2.roundFloorCopy();
        org.joda.time.DateTime dateTime4 = localTime3.toDateTimeToday();
        org.joda.time.DateTime.Property property5 = dateTime4.minuteOfHour();
        org.joda.time.DateTime dateTime6 = property5.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime7 = property5.withMinimumValue();
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime7.toMutableDateTime();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime8.setMonthOfYear(366);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 366 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
    }

    @Test
    public void test04116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04116");
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime10 = timeOfDay7.toDateTime((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Chronology chronology11 = instant9.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.year();
        org.joda.time.TimeOfDay timeOfDay13 = new org.joda.time.TimeOfDay(chronology11);
        org.joda.time.DurationField durationField14 = chronology11.millis();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(54075919, (int) 'x', 101, 195, 36564021, chronology11);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 195 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test04117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04117");
        java.util.Date date3 = new java.util.Date(0, (int) '4', 0);
        int int4 = date3.getMinutes();
        org.joda.time.YearMonthDay yearMonthDay5 = org.joda.time.YearMonthDay.fromDateFields(date3);
        int int6 = yearMonthDay5.getYear();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay5.plus(readablePeriod7);
        org.joda.time.Interval interval11 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval14 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean15 = interval11.abuts((org.joda.time.ReadableInterval) interval14);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Interval interval17 = interval14.withDurationBeforeEnd(readableDuration16);
        boolean boolean18 = interval17.isBeforeNow();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Period period20 = interval17.toPeriod(periodType19);
        java.lang.String str21 = period20.toString();
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay5.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.YearMonthDay.Property property23 = yearMonthDay5.year();
        java.lang.String str24 = yearMonthDay5.toString();
        org.joda.time.Instant instant25 = new org.joda.time.Instant();
        org.joda.time.Instant instant27 = instant25.withMillis((long) (byte) 100);
        org.joda.time.DateTime dateTime28 = instant25.toDateTimeISO();
        java.util.Date date32 = new java.util.Date(0, (int) '4', 0);
        int int33 = date32.getMinutes();
        org.joda.time.YearMonthDay yearMonthDay34 = org.joda.time.YearMonthDay.fromDateFields(date32);
        int int35 = yearMonthDay34.getYear();
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.YearMonthDay yearMonthDay37 = yearMonthDay34.plus(readablePeriod36);
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval43 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean44 = interval40.abuts((org.joda.time.ReadableInterval) interval43);
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.Interval interval46 = interval43.withDurationBeforeEnd(readableDuration45);
        boolean boolean47 = interval46.isBeforeNow();
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.Period period49 = interval46.toPeriod(periodType48);
        java.lang.String str50 = period49.toString();
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay34.minus((org.joda.time.ReadablePeriod) period49);
        org.joda.time.DateTime dateTime53 = dateTime28.withPeriodAdded((org.joda.time.ReadablePeriod) period49, 53989396);
        org.joda.time.MutablePeriod mutablePeriod54 = period49.toMutablePeriod();
        org.joda.time.PeriodType periodType55 = mutablePeriod54.getPeriodType();
        org.joda.time.YearMonthDay yearMonthDay56 = yearMonthDay5.minus((org.joda.time.ReadablePeriod) mutablePeriod54);
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean59 = localDate57.isSupported(dateTimeFieldType58);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateMidnight dateMidnight61 = localDate57.toDateMidnight(dateTimeZone60);
        org.joda.time.DateTime dateTime62 = localDate57.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property63 = localDate57.yearOfEra();
        org.joda.time.DurationFieldType durationFieldType64 = org.joda.time.DurationFieldType.millis();
        boolean boolean65 = localDate57.isSupported(durationFieldType64);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay67 = yearMonthDay56.withFieldAdded(durationFieldType64, 57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'millis' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date3.toString(), "Sat Apr 30 00:00:00 GMT 1904");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1904 + "'", int6 == 1904);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PT0S" + "'", str21, "PT0S");
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1904-04-30" + "'", str24, "1904-04-30");
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertEquals(date32.toString(), "Sat Apr 30 00:00:00 GMT 1904");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1904 + "'", int35 == 1904);
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "PT0S" + "'", str50, "PT0S");
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(mutablePeriod54);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(durationFieldType64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test04118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04118");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.withDurationAdded(readableDuration4, (int) (byte) 0);
        org.joda.time.DateTime dateTime8 = dateTime3.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime10 = dateTime8.plusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime12 = dateTime10.plusDays(2);
        org.joda.time.DateTime dateTime14 = dateTime10.withHourOfDay(10);
        int int15 = dateTime14.getYear();
        org.joda.time.DateTime dateTime17 = dateTime14.withHourOfDay((int) (byte) 10);
        int int18 = dateTime17.getYearOfCentury();
        org.joda.time.DateTime.Property property19 = dateTime17.yearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 22 + "'", int18 == 22);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test04119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04119");
        java.util.Date date3 = new java.util.Date(0, (int) '4', 0);
        int int4 = date3.getMinutes();
        org.joda.time.YearMonthDay yearMonthDay5 = org.joda.time.YearMonthDay.fromDateFields(date3);
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone7 = dateMidnight6.getZone();
        int int9 = dateTimeZone7.getOffset((long) 12);
        org.joda.time.DateMidnight dateMidnight10 = yearMonthDay5.toDateMidnight(dateTimeZone7);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = yearMonthDay5.getFieldTypes();
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay5.plusDays(366);
        org.joda.time.LocalDate localDate14 = yearMonthDay13.toLocalDate();
        org.joda.time.TimeOfDay timeOfDay18 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant20 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime21 = timeOfDay18.toDateTime((org.joda.time.ReadableInstant) instant20);
        org.joda.time.Chronology chronology22 = instant20.getChronology();
        org.joda.time.TimeOfDay timeOfDay25 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant27 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime28 = timeOfDay25.toDateTime((org.joda.time.ReadableInstant) instant27);
        int[] intArray30 = chronology22.get((org.joda.time.ReadablePartial) timeOfDay25, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(0L, chronology22);
        org.joda.time.TimeOfDay timeOfDay34 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant36 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime37 = timeOfDay34.toDateTime((org.joda.time.ReadableInstant) instant36);
        org.joda.time.Chronology chronology38 = instant36.getChronology();
        org.joda.time.TimeOfDay timeOfDay41 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant43 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime44 = timeOfDay41.toDateTime((org.joda.time.ReadableInstant) instant43);
        int[] intArray46 = chronology38.get((org.joda.time.ReadablePartial) timeOfDay41, (long) (short) -1);
        mutableDateTime31.setChronology(chronology38);
        boolean boolean48 = mutableDateTime31.isEqualNow();
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime31.secondOfDay();
        org.joda.time.DurationFieldType durationFieldType50 = org.joda.time.DurationFieldType.millis();
        mutableDateTime31.add(durationFieldType50, (int) (short) 10);
        org.joda.time.TimeOfDay timeOfDay55 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant57 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime58 = timeOfDay55.toDateTime((org.joda.time.ReadableInstant) instant57);
        org.joda.time.Chronology chronology59 = instant57.getChronology();
        org.joda.time.DateTimeField dateTimeField60 = chronology59.clockhourOfHalfday();
        org.joda.time.DurationField durationField61 = durationFieldType50.getField(chronology59);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay63 = yearMonthDay13.withFieldAdded(durationFieldType50, 54021);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'millis' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date3.toString(), "Sat Apr 30 00:00:00 GMT 1904");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(durationField61);
    }

    @Test
    public void test04120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04120");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime22 = timeOfDay19.toDateTime((org.joda.time.ReadableInstant) instant21);
        org.joda.time.Chronology chronology23 = instant21.getChronology();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        int[] intArray31 = chronology23.get((org.joda.time.ReadablePartial) timeOfDay26, (long) (short) -1);
        mutableDateTime16.setChronology(chronology23);
        boolean boolean33 = mutableDateTime16.isEqualNow();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime16.secondOfDay();
        boolean boolean35 = mutableDateTime16.isAfterNow();
        mutableDateTime16.addWeekyears((int) (short) 1);
        org.joda.time.Instant instant39 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone40 = instant39.getZone();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone40);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.DateTime dateTime44 = dateTime41.withDurationAdded(readableDuration42, (int) (byte) 0);
        org.joda.time.DateTime dateTime46 = dateTime41.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime48 = dateTime46.plusMinutes((int) (byte) 10);
        int int49 = dateTime48.getDayOfYear();
        boolean boolean50 = mutableDateTime16.equals((java.lang.Object) int49);
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime16.era();
        org.joda.time.TimeOfDay timeOfDay55 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant57 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime58 = timeOfDay55.toDateTime((org.joda.time.ReadableInstant) instant57);
        org.joda.time.Chronology chronology59 = instant57.getChronology();
        org.joda.time.TimeOfDay timeOfDay62 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant64 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime65 = timeOfDay62.toDateTime((org.joda.time.ReadableInstant) instant64);
        int[] intArray67 = chronology59.get((org.joda.time.ReadablePartial) timeOfDay62, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime68 = new org.joda.time.MutableDateTime(0L, chronology59);
        int int69 = mutableDateTime68.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property71 = mutableDateTime68.property(dateTimeFieldType70);
        org.joda.time.MutableDateTime mutableDateTime72 = property71.roundHalfEven();
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.MutableDateTime.Property property74 = mutableDateTime72.property(dateTimeFieldType73);
        mutableDateTime72.addYears((int) '4');
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        mutableDateTime72.add(readablePeriod77);
        org.joda.time.MutableDateTime.Property property79 = mutableDateTime72.secondOfDay();
        boolean boolean80 = mutableDateTime16.isAfter((org.joda.time.ReadableInstant) mutableDateTime72);
        mutableDateTime72.add(4460337610L);
        long long83 = mutableDateTime72.getMillis();
        mutableDateTime72.addWeeks(36613510);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 52 + "'", int49 == 52);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(mutableDateTime72);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 1645455537610L + "'", long83 == 1645455537610L);
    }

    @Test
    public void test04121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04121");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 3);
        java.util.Calendar calendar3 = builder2.build();
        java.lang.String str4 = calendar3.getCalendarType();
        java.util.TimeZone timeZone5 = calendar3.getTimeZone();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight9.withDurationAdded((long) 2, 100);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusWeeks((int) (short) 100);
        org.joda.time.Interval interval15 = new org.joda.time.Interval(readableDuration6, (org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.DateMidnight.Property property16 = dateMidnight14.era();
        org.joda.time.DateMidnight dateMidnight17 = property16.roundCeilingCopy();
        org.joda.time.LocalTime localTime19 = org.joda.time.LocalTime.fromMillisOfDay((long) 54576831);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight17.withFields((org.joda.time.ReadablePartial) localTime19);
        boolean boolean21 = calendar3.before((java.lang.Object) dateMidnight20);
        org.joda.time.LocalTime localTime22 = org.joda.time.LocalTime.fromCalendarFields(calendar3);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(calendar3);
        org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=3,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=3,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "gregory" + "'", str4, "gregory");
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localTime22);
    }

    @Test
    public void test04122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04122");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime.Property property2 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime3 = property2.roundFloorCopy();
        org.joda.time.DateTime dateTime4 = localTime3.toDateTimeToday();
        org.joda.time.DateTime.Property property5 = dateTime4.minuteOfHour();
        org.joda.time.DateTime dateTime6 = property5.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime7 = property5.withMinimumValue();
        org.joda.time.MutableDateTime mutableDateTime8 = dateTime7.toMutableDateTime();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime8.setWeekOfWeekyear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
    }

    @Test
    public void test04123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04123");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        mutableDateTime16.setYear(3);
        int int19 = mutableDateTime16.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime16.minuteOfDay();
        int int21 = property20.getMaximumValue();
        org.joda.time.MutableDateTime mutableDateTime22 = property20.roundHalfFloor();
        java.util.Locale locale26 = new java.util.Locale("\u516c\u5143", "0", "weekOfWeekyear");
        int int27 = property20.getMaximumShortTextLength(locale26);
        org.joda.time.DateTimeField dateTimeField28 = property20.getField();
        boolean boolean30 = dateTimeField28.isLeap(1645455611599L);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1439 + "'", int21 == 1439);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertEquals(locale26.toString(), "\u516c\u5143_0_weekOfWeekyear");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test04124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04124");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.plusMonths((int) (short) 0);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears(70);
        org.joda.time.LocalDate.Property property5 = localDate2.dayOfMonth();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean8 = localDate6.isSupported(dateTimeFieldType7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = localDate6.toDateMidnight(dateTimeZone9);
        org.joda.time.LocalDate localDate12 = localDate6.minusMonths((int) (short) 10);
        int int13 = localDate6.getDayOfYear();
        org.joda.time.LocalDate localDate14 = localDate2.withFields((org.joda.time.ReadablePartial) localDate6);
        org.joda.time.LocalDate localDate16 = localDate14.plusYears(54007846);
        org.joda.time.LocalDate localDate18 = localDate16.plusYears(795);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
    }

    @Test
    public void test04125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04125");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime22 = timeOfDay19.toDateTime((org.joda.time.ReadableInstant) instant21);
        org.joda.time.Chronology chronology23 = instant21.getChronology();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        int[] intArray31 = chronology23.get((org.joda.time.ReadablePartial) timeOfDay26, (long) (short) -1);
        mutableDateTime16.setChronology(chronology23);
        mutableDateTime16.addMonths((int) (byte) 0);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime16.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay38 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant40 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime41 = timeOfDay38.toDateTime((org.joda.time.ReadableInstant) instant40);
        org.joda.time.Chronology chronology42 = instant40.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.clockhourOfHalfday();
        org.joda.time.DurationField durationField44 = chronology42.eras();
        org.joda.time.DateTimeField dateTimeField45 = chronology42.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone46 = chronology42.getZone();
        org.joda.time.DateTimeField dateTimeField47 = chronology42.clockhourOfDay();
        org.joda.time.TimeOfDay timeOfDay50 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant52 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime53 = timeOfDay50.toDateTime((org.joda.time.ReadableInstant) instant52);
        org.joda.time.Chronology chronology54 = instant52.getChronology();
        org.joda.time.DateTimeField dateTimeField55 = chronology54.clockhourOfHalfday();
        org.joda.time.DurationField durationField56 = chronology54.eras();
        org.joda.time.DateTimeField dateTimeField57 = chronology54.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone58 = chronology54.getZone();
        org.joda.time.Chronology chronology59 = chronology42.withZone(dateTimeZone58);
        int int61 = dateTimeZone58.getOffset(8035L);
        mutableDateTime16.setZone(dateTimeZone58);
        java.util.GregorianCalendar gregorianCalendar63 = mutableDateTime16.toGregorianCalendar();
        org.joda.time.MutableDateTime mutableDateTime64 = mutableDateTime16.toMutableDateTime();
        org.joda.time.Interval interval67 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval70 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean71 = interval67.abuts((org.joda.time.ReadableInterval) interval70);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.DateMidnight dateMidnight74 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone73);
        org.joda.time.DateMidnight dateMidnight76 = dateMidnight74.withWeekyear(2);
        boolean boolean77 = interval67.isBefore((org.joda.time.ReadableInstant) dateMidnight74);
        org.joda.time.ReadableDuration readableDuration78 = null;
        org.joda.time.Interval interval79 = interval67.withDurationAfterStart(readableDuration78);
        org.joda.time.Duration duration80 = interval67.toDuration();
        org.joda.time.Period period81 = duration80.toPeriod();
        mutableDateTime64.add((org.joda.time.ReadablePeriod) period81, 439);
        mutableDateTime64.addMonths((int) (byte) 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(gregorianCalendar63);
        org.junit.Assert.assertNotNull(mutableDateTime64);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(dateMidnight76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(period81);
    }

    @Test
    public void test04126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04126");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("PT0S");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"PT0S\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04127");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.Chronology chronology1 = localDateTime0.getChronology();
        org.joda.time.LocalDateTime.Property property2 = localDateTime0.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime3 = property2.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusHours(999);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.minusDays(2054);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test04128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04128");
        java.util.Date date3 = new java.util.Date(0, (int) '4', 0);
        int int4 = date3.getMinutes();
        org.joda.time.YearMonthDay yearMonthDay5 = org.joda.time.YearMonthDay.fromDateFields(date3);
        int int6 = yearMonthDay5.getYear();
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay5.plusDays((int) (byte) 0);
        org.joda.time.Interval interval11 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval14 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean15 = interval11.abuts((org.joda.time.ReadableInterval) interval14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.withWeekyear(2);
        boolean boolean21 = interval11.isBefore((org.joda.time.ReadableInstant) dateMidnight18);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Interval interval23 = interval11.withDurationAfterStart(readableDuration22);
        org.joda.time.Duration duration24 = interval11.toDuration();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean31 = interval27.abuts((org.joda.time.ReadableInterval) interval30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.withWeekyear(2);
        boolean boolean37 = interval27.isBefore((org.joda.time.ReadableInstant) dateMidnight34);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Interval interval39 = interval27.withDurationAfterStart(readableDuration38);
        org.joda.time.Duration duration40 = interval27.toDuration();
        int int41 = duration24.compareTo((org.joda.time.ReadableDuration) duration40);
        org.joda.time.Period period42 = duration24.toPeriod();
        java.lang.String str43 = period42.toString();
        org.joda.time.YearMonthDay yearMonthDay44 = yearMonthDay8.minus((org.joda.time.ReadablePeriod) period42);
        org.joda.time.YearMonthDay.Property property45 = yearMonthDay44.year();
        org.joda.time.YearMonthDay yearMonthDay46 = property45.getYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay48 = yearMonthDay46.minusDays(900);
        org.joda.time.YearMonthDay.Property property49 = yearMonthDay48.monthOfYear();
        org.junit.Assert.assertEquals(date3.toString(), "Sat Apr 30 00:00:00 GMT 1904");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1904 + "'", int6 == 1904);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "PT0S" + "'", str43, "PT0S");
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertNotNull(yearMonthDay48);
        org.junit.Assert.assertNotNull(property49);
    }

    @Test
    public void test04129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04129");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.withWeekyear(2);
        org.joda.time.DateMidnight.Property property7 = dateMidnight2.weekOfWeekyear();
        java.lang.String str8 = property7.getAsString();
        org.joda.time.DateMidnight dateMidnight10 = property7.addWrapFieldToCopy(8);
        org.joda.time.DateMidnight.Property property11 = dateMidnight10.yearOfEra();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        org.joda.time.Instant instant15 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone16 = instant15.getZone();
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) 2, dateTimeZone16);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime17.weekOfWeekyear();
        org.joda.time.Instant instant20 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone21 = instant20.getZone();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime25 = dateTime22.withDurationAdded(readableDuration23, (int) (byte) 0);
        org.joda.time.DateTime dateTime27 = dateTime22.minusSeconds((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime29 = dateTime22.minus(readableDuration28);
        org.joda.time.DateTime dateTime31 = dateTime22.minusSeconds((int) (byte) 100);
        int int32 = mutableDateTime17.compareTo((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime34 = dateTime31.minusHours(201);
        int int35 = dateTime34.getWeekyear();
        int int36 = property11.compareTo((org.joda.time.ReadableInstant) dateTime34);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight38 = property11.addToCopy(1642809600000L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 1642809600000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
    }

    @Test
    public void test04130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04130");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.withDurationAdded(readableDuration4, (int) (byte) 0);
        org.joda.time.DateTime dateTime8 = dateTime3.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime10 = dateTime8.plusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime12 = dateTime10.plusDays(2);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int14 = dateTime12.get(dateTimeFieldType13);
        org.joda.time.DateTime dateTime16 = dateTime12.withYearOfCentury(3);
        org.joda.time.DateTime dateTime18 = dateTime12.plusDays((int) (byte) 100);
        org.joda.time.DateTime.Property property19 = dateTime12.weekyear();
        org.joda.time.DateTime dateTime20 = property19.withMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 15 + "'", int14 == 15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test04131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04131");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("TWN");
        double double2 = languageRange1.getWeight();
        java.lang.String str3 = languageRange1.getRange();
        double double4 = languageRange1.getWeight();
        double double5 = languageRange1.getWeight();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property7 = localDate6.weekyear();
        org.joda.time.LocalDate localDate9 = localDate6.withWeekyear((-1));
        int int10 = localDate6.getYearOfCentury();
        org.joda.time.LocalDate.Property property11 = localDate6.weekOfWeekyear();
        org.joda.time.LocalDate localDate13 = localDate6.plusYears((int) (byte) -1);
        org.joda.time.LocalDate.Property property14 = localDate13.yearOfEra();
        org.joda.time.LocalDate localDate15 = property14.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate16 = property14.getLocalDate();
        boolean boolean17 = languageRange1.equals((java.lang.Object) property14);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "twn" + "'", str3, "twn");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 22 + "'", int10 == 22);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test04132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04132");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime10 = timeOfDay7.toDateTime((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Chronology chronology11 = instant9.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.clockhourOfHalfday();
        long long14 = dateTimeField12.roundHalfFloor(0L);
        java.util.Locale locale15 = java.util.Locale.TRADITIONAL_CHINESE;
        int int16 = dateTimeField12.getMaximumShortTextLength(locale15);
        java.lang.String str17 = locale15.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket((-1L), chronology4, locale15);
        java.util.Locale locale19 = dateTimeParserBucket18.getLocale();
        long long22 = dateTimeParserBucket18.computeMillis(true, "");
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.TimeOfDay timeOfDay27 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant29 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime30 = timeOfDay27.toDateTime((org.joda.time.ReadableInstant) instant29);
        org.joda.time.Chronology chronology31 = instant29.getChronology();
        org.joda.time.TimeOfDay timeOfDay34 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant36 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime37 = timeOfDay34.toDateTime((org.joda.time.ReadableInstant) instant36);
        int[] intArray39 = chronology31.get((org.joda.time.ReadablePartial) timeOfDay34, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime(0L, chronology31);
        org.joda.time.TimeOfDay timeOfDay43 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant45 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime46 = timeOfDay43.toDateTime((org.joda.time.ReadableInstant) instant45);
        org.joda.time.Chronology chronology47 = instant45.getChronology();
        org.joda.time.TimeOfDay timeOfDay50 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant52 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime53 = timeOfDay50.toDateTime((org.joda.time.ReadableInstant) instant52);
        int[] intArray55 = chronology47.get((org.joda.time.ReadablePartial) timeOfDay50, (long) (short) -1);
        mutableDateTime40.setChronology(chronology47);
        org.joda.time.DateTimeField dateTimeField57 = dateTimeFieldType23.getField(chronology47);
        java.util.Locale locale59 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale60 = locale59.stripExtensions();
        dateTimeParserBucket18.saveField(dateTimeFieldType23, "hi!", locale60);
        java.lang.String str62 = locale60.getLanguage();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = dateTimeFormatter2.withLocale(locale60);
        boolean boolean64 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter65 = dateTimeFormatter2.withOffsetParsed();
        java.lang.StringBuffer stringBuffer66 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(stringBuffer66, (long) 462);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "zh" + "'", str17, "zh");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "zh" + "'", str62, "zh");
        org.junit.Assert.assertNotNull(dateTimeFormatter63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter65);
    }

    @Test
    public void test04133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04133");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.withWeekyear(2);
        org.joda.time.DateMidnight.Property property7 = dateMidnight2.weekOfWeekyear();
        java.lang.String str8 = property7.getAsString();
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime14 = timeOfDay11.toDateTime((org.joda.time.ReadableInstant) instant13);
        org.joda.time.Chronology chronology15 = instant13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.clockhourOfHalfday();
        long long18 = dateTimeField16.roundHalfFloor(0L);
        java.util.Locale locale19 = java.util.Locale.TRADITIONAL_CHINESE;
        int int20 = dateTimeField16.getMaximumShortTextLength(locale19);
        int int21 = property7.getMaximumShortTextLength(locale19);
        org.joda.time.DateMidnight dateMidnight22 = property7.roundHalfCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.withDayOfWeek(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(dateMidnight22);
    }

    @Test
    public void test04134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04134");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime5 = timeOfDay2.toDateTime((org.joda.time.ReadableInstant) instant4);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = null;
        java.lang.String str7 = dateTime5.toString(dateTimeFormatter6);
        int int8 = dateTime5.getSecondOfMinute();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime10 = dateTime5.minus(readableDuration9);
        org.joda.time.TimeOfDay timeOfDay13 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant15 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime16 = timeOfDay13.toDateTime((org.joda.time.ReadableInstant) instant15);
        org.joda.time.Chronology chronology17 = instant15.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.minutes();
        org.joda.time.DateTime dateTime19 = dateTime10.withChronology(chronology17);
        org.joda.time.DateTime dateTime21 = dateTime19.withMillisOfDay(53891);
        org.joda.time.DateTime.Property property22 = dateTime21.monthOfYear();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1969-12-31T00:01:00.000Z" + "'", str7, "1969-12-31T00:01:00.000Z");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test04135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04135");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime localTime3 = localTime1.minusMinutes((int) (short) 1);
        org.joda.time.TimeOfDay timeOfDay6 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        int[] intArray7 = timeOfDay6.getValues();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay10.minusMinutes((int) '4');
        int int16 = timeOfDay6.compareTo((org.joda.time.ReadablePartial) timeOfDay10);
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime22 = timeOfDay19.toDateTime((org.joda.time.ReadableInstant) instant21);
        org.joda.time.Chronology chronology23 = instant21.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.clockhourOfHalfday();
        org.joda.time.DurationField durationField25 = chronology23.eras();
        org.joda.time.TimeOfDay timeOfDay26 = timeOfDay6.withChronologyRetainFields(chronology23);
        int int27 = localTime3.compareTo((org.joda.time.ReadablePartial) timeOfDay26);
        org.joda.time.Chronology chronology28 = localTime3.getChronology();
        org.joda.time.LocalTime localTime30 = localTime3.plusMillis(53956956);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(localTime30);
    }

    @Test
    public void test04136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04136");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime5 = timeOfDay2.toDateTime((org.joda.time.ReadableInstant) instant4);
        org.joda.time.Chronology chronology6 = instant4.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.clockhourOfHalfday();
        long long9 = dateTimeField7.roundHalfFloor(0L);
        long long12 = dateTimeField7.add(31L, (int) 'x');
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 432000031L + "'", long12 == 432000031L);
    }

    @Test
    public void test04137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04137");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.withDurationAdded(readableDuration4, (int) (byte) 0);
        org.joda.time.DateTime dateTime8 = dateTime3.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime10 = dateTime8.plusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime12 = dateTime10.plusDays(2);
        org.joda.time.TimeOfDay timeOfDay13 = dateTime12.toTimeOfDay();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay13.plus(readablePeriod14);
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime22 = timeOfDay19.toDateTime((org.joda.time.ReadableInstant) instant21);
        org.joda.time.Chronology chronology23 = instant21.getChronology();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        int[] intArray31 = chronology23.get((org.joda.time.ReadablePartial) timeOfDay26, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime(0L, chronology23);
        org.joda.time.TimeOfDay timeOfDay35 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant37 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime38 = timeOfDay35.toDateTime((org.joda.time.ReadableInstant) instant37);
        org.joda.time.Chronology chronology39 = instant37.getChronology();
        org.joda.time.TimeOfDay timeOfDay42 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant44 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime45 = timeOfDay42.toDateTime((org.joda.time.ReadableInstant) instant44);
        int[] intArray47 = chronology39.get((org.joda.time.ReadablePartial) timeOfDay42, (long) (short) -1);
        mutableDateTime32.setChronology(chronology39);
        org.joda.time.LocalTime localTime49 = new org.joda.time.LocalTime(chronology39);
        org.joda.time.LocalTime localTime51 = localTime49.minusMillis(21);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.DurationFieldType durationFieldType53 = dateTimeFieldType52.getDurationType();
        boolean boolean54 = localTime49.isSupported(dateTimeFieldType52);
        int int55 = timeOfDay13.get(dateTimeFieldType52);
        org.joda.time.TimeOfDay timeOfDay58 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant60 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime61 = timeOfDay58.toDateTime((org.joda.time.ReadableInstant) instant60);
        org.joda.time.Chronology chronology62 = instant60.getChronology();
        org.joda.time.DateTimeField dateTimeField63 = chronology62.clockhourOfHalfday();
        org.joda.time.DurationField durationField64 = chronology62.eras();
        org.joda.time.DateTimeField dateTimeField65 = chronology62.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone66 = chronology62.getZone();
        org.joda.time.LocalTime localTime67 = org.joda.time.LocalTime.now(dateTimeZone66);
        java.lang.String str69 = dateTimeZone66.getShortName((long) 1968);
        org.joda.time.DateTime dateTime70 = timeOfDay13.toDateTimeToday(dateTimeZone66);
        java.util.TimeZone timeZone71 = dateTimeZone66.toTimeZone();
        boolean boolean72 = dateTimeZone66.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 15 + "'", int55 == 15);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(localTime67);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "+00:00" + "'", str69, "+00:00");
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(timeZone71);
        org.junit.Assert.assertEquals(timeZone71.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
    }

    @Test
    public void test04138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04138");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.withDurationAdded((long) 2, 100);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.minusWeeks((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.minusMonths(70);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.Chronology chronology11 = localDateTime10.getChronology();
        int int12 = localDateTime10.size();
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.secondOfMinute();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.plus(readablePeriod14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusMinutes(35);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight9.withFields((org.joda.time.ReadablePartial) localDateTime15);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.withYearOfCentury(2744);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2744 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateMidnight18);
    }

    @Test
    public void test04139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04139");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.plusWeeks(20);
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight8.toMutableDateTimeISO();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime9.setMinuteOfDay(53956956);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53956956 for minuteOfDay must be in the range [0,1439]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
    }

    @Test
    public void test04140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04140");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTime((org.joda.time.ReadableInstant) instant6);
        org.joda.time.Chronology chronology8 = instant6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.clockhourOfHalfday();
        org.joda.time.DurationField durationField10 = chronology8.eras();
        org.joda.time.DateTimeField dateTimeField11 = dateTimeFieldType1.getField(chronology8);
        long long14 = dateTimeField11.add((long) (short) 100, (long) (byte) -1);
        boolean boolean15 = dateTimeField11.isSupported();
        org.joda.time.LocalTime localTime17 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime localTime19 = localTime17.minusMinutes((int) (short) 1);
        org.joda.time.LocalTime localTime21 = localTime17.withMillisOfDay((int) (byte) 1);
        org.joda.time.TimeOfDay timeOfDay25 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant27 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime28 = timeOfDay25.toDateTime((org.joda.time.ReadableInstant) instant27);
        org.joda.time.TimeOfDay timeOfDay30 = timeOfDay25.minusMinutes((int) '4');
        int[] intArray31 = timeOfDay30.getValues();
        int[] intArray33 = dateTimeField11.add((org.joda.time.ReadablePartial) localTime17, 36000000, intArray31, 52);
        org.joda.time.LocalTime localTime35 = localTime17.minusMinutes(11);
        int int36 = localTime35.getMillisOfSecond();
        org.joda.time.TimeOfDay timeOfDay39 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay timeOfDay41 = timeOfDay39.withSecondOfMinute((int) (byte) 1);
        org.joda.time.TimeOfDay.Property property42 = timeOfDay41.hourOfDay();
        boolean boolean43 = localTime35.isAfter((org.joda.time.ReadablePartial) timeOfDay41);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(32769);
        org.joda.time.DateTime dateTime46 = localTime35.toDateTimeToday(dateTimeZone45);
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight((-259165000L), dateTimeZone45);
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight47.minus((-2072476800000L));
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight47.withYear(169);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-2678399900L) + "'", long14 == (-2678399900L));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[23, 9, 0, 0]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[23, 9, 0, 0]");
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertNotNull(timeOfDay41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(dateMidnight51);
    }

    @Test
    public void test04141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04141");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime9 = dateTime6.withDurationAdded(readableDuration7, (int) (short) 1);
        int int10 = dateTime6.getDayOfYear();
        int int11 = dateTime6.getDayOfMonth();
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant18 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime19 = timeOfDay16.toDateTime((org.joda.time.ReadableInstant) instant18);
        org.joda.time.Chronology chronology20 = instant18.getChronology();
        org.joda.time.TimeOfDay timeOfDay23 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant25 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime26 = timeOfDay23.toDateTime((org.joda.time.ReadableInstant) instant25);
        int[] intArray28 = chronology20.get((org.joda.time.ReadablePartial) timeOfDay23, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(0L, chronology20);
        mutableDateTime29.setYear(3);
        org.joda.time.Instant instant33 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone34 = instant33.getZone();
        mutableDateTime29.setZone(dateTimeZone34);
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(dateTimeZone34);
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime((long) '#', dateTimeZone34);
        org.joda.time.Chronology chronology38 = localTime37.getChronology();
        org.joda.time.DateTime dateTime39 = dateTime6.withChronology(chronology38);
        org.joda.time.TimeOfDay timeOfDay42 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant44 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime45 = timeOfDay42.toDateTime((org.joda.time.ReadableInstant) instant44);
        org.joda.time.Chronology chronology46 = instant44.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.clockhourOfHalfday();
        long long49 = dateTimeField47.roundHalfFloor(0L);
        java.util.Locale locale50 = java.util.Locale.TRADITIONAL_CHINESE;
        int int51 = dateTimeField47.getMaximumShortTextLength(locale50);
        java.util.Locale locale52 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale53 = locale52.stripExtensions();
        java.util.Locale locale54 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale55 = locale54.stripExtensions();
        java.lang.String str56 = locale52.getDisplayName(locale54);
        java.lang.String str57 = locale50.getDisplayLanguage(locale52);
        java.lang.String str58 = locale50.getDisplayScript();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket59 = new org.joda.time.format.DateTimeParserBucket((long) 0, chronology38, locale50);
        org.joda.time.DateTimeField dateTimeField60 = chronology38.weekyearOfCentury();
        int int62 = dateTimeField60.getMinimumValue((long) 34);
        int int64 = dateTimeField60.getMaximumValue((long) 53897496);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 365 + "'", int10 == 365);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 31 + "'", int11 == 31);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str56, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\u4e2d\u6587" + "'", str57, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 99 + "'", int64 == 99);
    }

    @Test
    public void test04142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04142");
        org.joda.time.Instant instant2 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone3 = instant2.getZone();
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) 2, dateTimeZone3);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.weekOfWeekyear();
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone8 = instant7.getZone();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime12 = dateTime9.withDurationAdded(readableDuration10, (int) (byte) 0);
        org.joda.time.DateTime dateTime14 = dateTime9.minusSeconds((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime16 = dateTime9.minus(readableDuration15);
        org.joda.time.DateTime dateTime18 = dateTime9.minusSeconds((int) (byte) 100);
        int int19 = mutableDateTime4.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime21 = dateTime18.minusHours(201);
        int int22 = dateTime21.getWeekyear();
        org.joda.time.DateTime dateTime24 = dateTime21.plusMinutes((int) 'u');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime26 = dateTime21.withHourOfDay(54006);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54006 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test04143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04143");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder1.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder4 = builder2.addUnicodeLocaleAttribute("English (United States)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: English (United States) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test04144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04144");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusSeconds(12);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.plus(readablePeriod3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime0.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = property5.setCopy(32772);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32772 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
    }

    @Test
    public void test04145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04145");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        int int17 = mutableDateTime16.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime16.property(dateTimeFieldType18);
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime25 = timeOfDay22.toDateTime((org.joda.time.ReadableInstant) instant24);
        org.joda.time.Chronology chronology26 = instant24.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.clockhourOfHalfday();
        long long29 = dateTimeField27.roundHalfFloor(0L);
        java.util.Locale locale30 = java.util.Locale.TRADITIONAL_CHINESE;
        int int31 = dateTimeField27.getMaximumShortTextLength(locale30);
        java.util.Locale locale32 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale33 = locale32.stripExtensions();
        java.util.Locale locale34 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale35 = locale34.stripExtensions();
        java.lang.String str36 = locale32.getDisplayName(locale34);
        java.lang.String str37 = locale30.getDisplayLanguage(locale32);
        java.util.Calendar calendar38 = mutableDateTime16.toCalendar(locale32);
        calendar38.set(12, 36000000, (int) 'a', 8, 23, 14);
        calendar38.setFirstDayOfWeek(4);
        org.joda.time.TimeOfDay timeOfDay48 = org.joda.time.TimeOfDay.fromCalendarFields(calendar38);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType50 = timeOfDay48.getFieldType(9021);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 9021");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str36, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u4e2d\u6587" + "'", str37, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(calendar38);
        org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=94611019623794000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=4,minimalDaysInFirstWeek=1,ERA=1,YEAR=3000073,MONTH=10,WEEK_OF_YEAR=46,WEEK_OF_MONTH=2,DAY_OF_MONTH=10,DAY_OF_YEAR=314,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=23,SECOND=14,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeOfDay48);
    }

    @Test
    public void test04146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04146");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime5 = timeOfDay2.toDateTime((org.joda.time.ReadableInstant) instant4);
        org.joda.time.Chronology chronology6 = instant4.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.clockhourOfHalfday();
        org.joda.time.DurationField durationField8 = chronology6.eras();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone10 = chronology6.getZone();
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(dateTimeZone10);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusYears((int) '4');
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.monthOfYear();
        org.joda.time.LocalDateTime localDateTime17 = property15.setCopy((int) (short) 10);
        int int18 = localDateTime17.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.plusMonths(23);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval26 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean27 = interval23.abuts((org.joda.time.ReadableInterval) interval26);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone29);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight30.withWeekyear(2);
        boolean boolean33 = interval23.isBefore((org.joda.time.ReadableInstant) dateMidnight30);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Interval interval35 = interval23.withDurationAfterStart(readableDuration34);
        org.joda.time.Duration duration36 = interval23.toDuration();
        org.joda.time.Interval interval39 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval42 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean43 = interval39.abuts((org.joda.time.ReadableInterval) interval42);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone45);
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight46.withWeekyear(2);
        boolean boolean49 = interval39.isBefore((org.joda.time.ReadableInstant) dateMidnight46);
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Interval interval51 = interval39.withDurationAfterStart(readableDuration50);
        org.joda.time.Duration duration52 = interval39.toDuration();
        org.joda.time.Interval interval55 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval58 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean59 = interval55.abuts((org.joda.time.ReadableInterval) interval58);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone61);
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight62.withWeekyear(2);
        boolean boolean65 = interval55.isBefore((org.joda.time.ReadableInstant) dateMidnight62);
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.Interval interval67 = interval55.withDurationAfterStart(readableDuration66);
        org.joda.time.Duration duration68 = interval55.toDuration();
        int int69 = duration52.compareTo((org.joda.time.ReadableDuration) duration68);
        org.joda.time.Period period70 = duration52.toPeriod();
        boolean boolean71 = duration36.isShorterThan((org.joda.time.ReadableDuration) duration52);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime20.minus((org.joda.time.ReadableDuration) duration36);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime72.withYear(60);
        int int75 = localDateTime74.getYearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            int int76 = localTime11.compareTo((org.joda.time.ReadablePartial) localDateTime74);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 54115303 + "'", int18 == 54115303);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 60 + "'", int75 == 60);
    }

    @Test
    public void test04147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04147");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.Chronology chronology1 = localDateTime0.getChronology();
        int int2 = localDateTime0.size();
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.secondOfMinute();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plus(readablePeriod4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusMinutes(35);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        int int10 = localDateTime8.size();
        int int11 = localDateTime8.getHourOfDay();
        int int12 = localDateTime8.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.withFields((org.joda.time.ReadablePartial) localDateTime8);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime7.withCenturyOfEra(50);
        org.joda.time.LocalDateTime.Property property16 = localDateTime7.yearOfEra();
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now();
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        org.joda.time.LocalDateTime.Property property19 = localDateTime17.weekOfWeekyear();
        int int20 = localDateTime17.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone22);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight23.withDurationAdded((long) 2, 100);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusWeeks((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight26.minusWeeks(0);
        boolean boolean31 = localDateTime17.equals((java.lang.Object) 0);
        int int32 = localDateTime17.getDayOfYear();
        org.joda.time.Chronology chronology33 = localDateTime17.getChronology();
        java.util.Date date34 = localDateTime17.toDate();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone36);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight37.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight37.withWeekyear(2);
        org.joda.time.DateMidnight.Property property42 = dateMidnight37.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone44);
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight45.withDurationAdded((long) 2, 100);
        int int49 = dateMidnight37.compareTo((org.joda.time.ReadableInstant) dateMidnight45);
        int int50 = dateMidnight37.getYearOfCentury();
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight37.minusMonths(19);
        org.joda.time.Instant instant54 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone55 = instant54.getZone();
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(dateTimeZone55);
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.DateTime dateTime59 = dateTime56.withDurationAdded(readableDuration57, (int) (byte) 0);
        org.joda.time.DateTime dateTime61 = dateTime56.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime63 = dateTime61.plusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime65 = dateTime63.plusDays(2);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int67 = dateTime65.get(dateTimeFieldType66);
        org.joda.time.DateTime dateTime69 = dateTime65.withYearOfCentury(3);
        org.joda.time.DateTime dateTime71 = dateTime65.plusDays((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration72 = null;
        org.joda.time.DateTime dateTime74 = dateTime71.withDurationAdded(readableDuration72, (int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime dateTime77 = dateTime74.withField(dateTimeFieldType75, (int) (short) 10);
        int int78 = dateMidnight52.get(dateTimeFieldType75);
        java.lang.String str79 = dateTimeFieldType75.getName();
        int int80 = localDateTime17.get(dateTimeFieldType75);
        boolean boolean81 = localDateTime7.isSupported(dateTimeFieldType75);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str83 = localDateTime7.toString("JANUARY");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: J");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 15 + "'", int11 == 15);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 367 + "'", int12 == 367);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 22 + "'", int20 == 22);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(date34);
// flaky:         org.junit.Assert.assertEquals(date34.toString(), "Mon Feb 21 15:01:55 GMT 2022");
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 70 + "'", int50 == 70);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 15 + "'", int67 == 15);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTimeFieldType75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "secondOfDay" + "'", str79, "secondOfDay");
// flaky:         org.junit.Assert.assertTrue("'" + int80 + "' != '" + 54115 + "'", int80 == 54115);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test04148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04148");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.withDurationAdded(readableDuration4, (int) (byte) 0);
        org.joda.time.DateTime dateTime8 = dateTime3.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime10 = dateTime8.plusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime12 = dateTime10.plusDays(2);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int14 = dateTime12.get(dateTimeFieldType13);
        org.joda.time.DateTime dateTime16 = dateTime12.withYearOfCentury(3);
        org.joda.time.DateTime dateTime18 = dateTime12.plusDays((int) (byte) 100);
        org.joda.time.Instant instant19 = dateTime18.toInstant();
        org.joda.time.MutableDateTime mutableDateTime20 = instant19.toMutableDateTime();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 15 + "'", int14 == 15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
    }

    @Test
    public void test04149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04149");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.withDurationAdded(readableDuration4, (int) (byte) 0);
        org.joda.time.DateTime dateTime8 = dateTime3.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime10 = dateTime8.plusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime12 = dateTime10.plusDays(2);
        org.joda.time.DateTime dateTime14 = dateTime10.withHourOfDay(10);
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime10.toMutableDateTime();
        int int16 = dateTime10.getMinuteOfHour();
        org.joda.time.DateTime dateTime18 = dateTime10.plusMonths(228);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 11 + "'", int16 == 11);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test04150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04150");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.plusMonths((int) (short) 0);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears(70);
        org.joda.time.LocalDate.Property property5 = localDate2.dayOfMonth();
        org.joda.time.LocalDate localDate7 = localDate2.minusWeeks(21);
        org.joda.time.LocalDate.Property property8 = localDate2.year();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test04151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04151");
        org.joda.time.TimeOfDay timeOfDay5 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime8 = timeOfDay5.toDateTime((org.joda.time.ReadableInstant) instant7);
        org.joda.time.Chronology chronology9 = instant7.getChronology();
        org.joda.time.TimeOfDay timeOfDay12 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant14 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime15 = timeOfDay12.toDateTime((org.joda.time.ReadableInstant) instant14);
        int[] intArray17 = chronology9.get((org.joda.time.ReadablePartial) timeOfDay12, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(0L, chronology9);
        org.joda.time.TimeOfDay timeOfDay21 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant23 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime24 = timeOfDay21.toDateTime((org.joda.time.ReadableInstant) instant23);
        org.joda.time.Chronology chronology25 = instant23.getChronology();
        org.joda.time.TimeOfDay timeOfDay28 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant30 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime31 = timeOfDay28.toDateTime((org.joda.time.ReadableInstant) instant30);
        int[] intArray33 = chronology25.get((org.joda.time.ReadablePartial) timeOfDay28, (long) (short) -1);
        mutableDateTime18.setChronology(chronology25);
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime(chronology25);
        org.joda.time.DateTimeField dateTimeField36 = chronology25.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField37 = chronology25.dayOfWeek();
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime(chronology25);
        org.joda.time.DateTimeField dateTimeField39 = chronology25.halfdayOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay40 = new org.joda.time.TimeOfDay(54017029, 54017029, chronology25);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54017029 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField39);
    }

    @Test
    public void test04152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04152");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime5 = timeOfDay2.toDateTime((org.joda.time.ReadableInstant) instant4);
        org.joda.time.Chronology chronology6 = instant4.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.clockhourOfHalfday();
        long long9 = dateTimeField7.roundHalfFloor(0L);
        java.util.Locale locale10 = java.util.Locale.TRADITIONAL_CHINESE;
        int int11 = dateTimeField7.getMaximumShortTextLength(locale10);
        java.util.Locale locale12 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale13 = locale12.stripExtensions();
        java.util.Locale locale14 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale15 = locale14.stripExtensions();
        java.lang.String str16 = locale12.getDisplayName(locale14);
        java.lang.String str17 = locale10.getDisplayLanguage(locale12);
        java.util.Set<java.lang.String> strSet18 = locale12.getUnicodeLocaleAttributes();
        int int19 = strSet18.size();
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap23 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList24 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, strMap23);
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "\u4e2d\u6587\u53f0\u7063)", "zh", "hi!", "\u4e2d\u6587", "1970-01-01T00:00:00.000Z", "zh" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        java.lang.String str35 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.lang.String>) strList33);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap36 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList37 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, strMap36);
        boolean boolean38 = strSet18.retainAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList37);
        org.joda.time.format.DateTimePrinter dateTimePrinter39 = null;
        org.joda.time.format.DateTimeParser dateTimeParser40 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter39, dateTimeParser40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter41.withZone(dateTimeZone42);
        org.joda.time.format.DateTimeParser dateTimeParser44 = dateTimeFormatter41.getParser();
        boolean boolean45 = strSet18.equals((java.lang.Object) dateTimeFormatter41);
        boolean boolean46 = dateTimeFormatter41.isParser();
        org.joda.time.Chronology chronology47 = dateTimeFormatter41.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter41.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter48.withDefaultYear(2022);
        org.joda.time.Instant instant52 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone53 = instant52.getZone();
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone55);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight56.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight56.withWeekyear(2);
        org.joda.time.DateTimeZone dateTimeZone61 = dateMidnight56.getZone();
        long long63 = dateTimeZone53.getMillisKeepLocal(dateTimeZone61, 10L);
        org.joda.time.LocalTime localTime64 = org.joda.time.LocalTime.now(dateTimeZone61);
        org.joda.time.LocalTime localTime66 = localTime64.plusSeconds(7);
        java.lang.String str67 = localTime66.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str68 = dateTimeFormatter50.print((org.joda.time.ReadablePartial) localTime66);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str16, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u4e2d\u6587" + "'", str17, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(languageRangeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(languageRangeList24);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(languageRangeList37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
        org.junit.Assert.assertNull(dateTimeParser44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 10L + "'", long63 == 10L);
        org.junit.Assert.assertNotNull(localTime64);
        org.junit.Assert.assertNotNull(localTime66);
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "15:02:02.644" + "'", str67, "15:02:02.644");
    }

    @Test
    public void test04153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04153");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = localDate0.toDateMidnight(dateTimeZone3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate7 = localDate5.plusMonths((int) (short) 0);
        org.joda.time.LocalDate localDate9 = localDate7.minusYears(70);
        org.joda.time.LocalDate localDate10 = localDate0.withFields((org.joda.time.ReadablePartial) localDate7);
        org.joda.time.LocalDate localDate12 = localDate10.withWeekyear((int) (short) 10);
        int int13 = localDate10.getDayOfYear();
        org.joda.time.TimeOfDay timeOfDay18 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant20 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime21 = timeOfDay18.toDateTime((org.joda.time.ReadableInstant) instant20);
        org.joda.time.Chronology chronology22 = instant20.getChronology();
        org.joda.time.TimeOfDay timeOfDay25 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant27 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime28 = timeOfDay25.toDateTime((org.joda.time.ReadableInstant) instant27);
        int[] intArray30 = chronology22.get((org.joda.time.ReadablePartial) timeOfDay25, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(0L, chronology22);
        mutableDateTime31.setYear(3);
        org.joda.time.Instant instant35 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone36 = instant35.getZone();
        mutableDateTime31.setZone(dateTimeZone36);
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight(dateTimeZone36);
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime((long) '#', dateTimeZone36);
        org.joda.time.Chronology chronology40 = localTime39.getChronology();
        org.joda.time.Instant instant42 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone43 = instant42.getZone();
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone43);
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.DateTime dateTime47 = dateTime44.withDurationAdded(readableDuration45, (int) (byte) 0);
        org.joda.time.DateTime dateTime49 = dateTime44.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime51 = dateTime49.plusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime53 = dateTime51.plusDays(2);
        org.joda.time.DateTime dateTime55 = dateTime51.withHourOfDay(10);
        org.joda.time.DateTime.Property property56 = dateTime55.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.secondOfMinute();
        int int58 = dateTime55.get(dateTimeFieldType57);
        boolean boolean59 = localTime39.isSupported(dateTimeFieldType57);
        // The following exception was thrown during execution in test generation
        try {
            int int60 = localDate10.get(dateTimeFieldType57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'secondOfMinute' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + 54 + "'", int58 == 54);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
    }

    @Test
    public void test04154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04154");
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now();
        org.joda.time.Chronology chronology6 = localDateTime5.getChronology();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        long long10 = chronology6.add(readablePeriod7, 0L, 6);
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now(chronology6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(54021076, 59000, 32, (int) (byte) 100, 3002030, chronology6);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(mutableDateTime11);
    }

    @Test
    public void test04155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04155");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = localDate0.toDateMidnight(dateTimeZone3);
        org.joda.time.DateTime dateTime5 = localDate0.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime6 = localDate0.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate8 = localDate0.minusWeeks((int) 'a');
        org.joda.time.LocalDate.Property property9 = localDate0.yearOfEra();
        org.joda.time.LocalDate localDate10 = property9.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate11 = property9.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate12 = property9.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate13 = property9.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate13);
    }

    @Test
    public void test04156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04156");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.withDurationAdded(readableDuration4, (int) (byte) 0);
        org.joda.time.DateTime dateTime8 = dateTime3.minusSeconds((int) (short) 1);
        org.joda.time.DateTime.Property property9 = dateTime8.centuryOfEra();
        org.joda.time.DateTime dateTime10 = property9.withMinimumValue();
        org.joda.time.DateTime dateTime11 = property9.roundFloorCopy();
        org.joda.time.DateTime dateTime12 = property9.getDateTime();
        boolean boolean13 = property9.isLeap();
        java.util.Locale locale14 = null;
        int int15 = property9.getMaximumShortTextLength(locale14);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 7 + "'", int15 == 7);
    }

    @Test
    public void test04157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04157");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(0, 27, 360, 50400000, 1948, (int) (byte) 0, 22);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 50400000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04158");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 3);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property4 = localDate3.weekyear();
        org.joda.time.LocalDate localDate6 = localDate3.withWeekyear((-1));
        java.util.Date date7 = localDate3.toDate();
        date7.setDate((int) ' ');
        java.util.Calendar.Builder builder10 = builder0.setInstant(date7);
        int int11 = date7.getMinutes();
        java.lang.String str12 = date7.toLocaleString();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Fri Mar 04 00:00:00 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Mar 4, 2022 12:00:00 AM" + "'", str12, "Mar 4, 2022 12:00:00 AM");
    }

    @Test
    public void test04159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04159");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.clockhourOfHalfday();
        org.joda.time.DurationField durationField9 = chronology7.eras();
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType0.getField(chronology7);
        org.joda.time.DateTimeField dateTimeField11 = chronology7.hourOfDay();
        long long15 = chronology7.add(0L, (-11491200000L), (int) '#');
        org.joda.time.DateTimeField dateTimeField16 = chronology7.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField17 = chronology7.weekyearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-402192000000L) + "'", long15 == (-402192000000L));
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test04160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04160");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval5 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean6 = interval2.abuts((org.joda.time.ReadableInterval) interval5);
        long long7 = interval5.getStartMillis();
        org.joda.time.Interval interval9 = interval5.withStartMillis((long) (short) -1);
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.Instant instant12 = instant10.plus((long) 2);
        org.joda.time.MutableDateTime mutableDateTime13 = instant12.toMutableDateTimeISO();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        mutableDateTime13.add(readablePeriod14, (int) ' ');
        org.joda.time.TimeOfDay timeOfDay21 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant23 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime24 = timeOfDay21.toDateTime((org.joda.time.ReadableInstant) instant23);
        org.joda.time.Chronology chronology25 = instant23.getChronology();
        org.joda.time.TimeOfDay timeOfDay28 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant30 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime31 = timeOfDay28.toDateTime((org.joda.time.ReadableInstant) instant30);
        int[] intArray33 = chronology25.get((org.joda.time.ReadablePartial) timeOfDay28, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(0L, chronology25);
        org.joda.time.DurationField durationField35 = chronology25.weeks();
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((-86340000L), chronology25);
        org.joda.time.MutableDateTime mutableDateTime37 = org.joda.time.MutableDateTime.now(chronology25);
        org.joda.time.DateTimeField dateTimeField38 = chronology25.dayOfWeek();
        mutableDateTime13.setChronology(chronology25);
        org.joda.time.Interval interval40 = interval9.withChronology(chronology25);
        org.joda.time.DateTime dateTime41 = interval40.getEnd();
        org.joda.time.TimeOfDay timeOfDay45 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant47 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime48 = timeOfDay45.toDateTime((org.joda.time.ReadableInstant) instant47);
        org.joda.time.Chronology chronology49 = instant47.getChronology();
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight((java.lang.Object) (-11491200000L), chronology49);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(chronology49);
        org.joda.time.TimeOfDay timeOfDay52 = new org.joda.time.TimeOfDay((java.lang.Object) dateTime41, chronology49);
        org.joda.time.TimeOfDay timeOfDay54 = timeOfDay52.minusMillis(2744);
        org.joda.time.TimeOfDay.Property property55 = timeOfDay54.hourOfDay();
        org.joda.time.TimeOfDay.Property property56 = timeOfDay54.minuteOfHour();
        org.joda.time.TimeOfDay.Property property57 = timeOfDay54.minuteOfHour();
        org.joda.time.Chronology chronology58 = timeOfDay54.getChronology();
        int int59 = timeOfDay54.getMinuteOfHour();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(timeOfDay54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 59 + "'", int59 == 59);
    }

    @Test
    public void test04161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04161");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.withDurationAdded(readableDuration4, (int) (byte) 0);
        org.joda.time.DateTime dateTime8 = dateTime3.minusSeconds((int) (short) 1);
        org.joda.time.DateTime.Property property9 = dateTime8.centuryOfEra();
        org.joda.time.DateTime dateTime11 = property9.addToCopy(0);
        org.joda.time.DateTime dateTime13 = property9.addToCopy(1L);
        int int14 = property9.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test04162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04162");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay.Property property3 = timeOfDay2.minuteOfHour();
        org.joda.time.TimeOfDay.Property property4 = timeOfDay2.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight7.withDurationAdded((long) 2, 100);
        org.joda.time.TimeOfDay timeOfDay13 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay13.withSecondOfMinute((int) (byte) 1);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight10.withFields((org.joda.time.ReadablePartial) timeOfDay15);
        int int17 = property4.compareTo((org.joda.time.ReadablePartial) timeOfDay15);
        int int18 = property4.getMaximumValue();
        org.joda.time.TimeOfDay timeOfDay19 = property4.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay21 = property4.setCopy(100);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 999 + "'", int18 == 999);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(timeOfDay21);
    }

    @Test
    public void test04163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04163");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.Chronology chronology1 = localDateTime0.getChronology();
        int int2 = localDateTime0.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusMinutes(1);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.minusDays(53891);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusMonths(8);
        int int10 = localDateTime9.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withYearOfEra(53966);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval18 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean19 = interval15.abuts((org.joda.time.ReadableInterval) interval18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone21);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.withWeekyear(2);
        boolean boolean25 = interval15.isBefore((org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Interval interval27 = interval15.withDurationAfterStart(readableDuration26);
        org.joda.time.Duration duration28 = interval15.toDuration();
        org.joda.time.Interval interval31 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval34 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean35 = interval31.abuts((org.joda.time.ReadableInterval) interval34);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone37);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight38.withWeekyear(2);
        boolean boolean41 = interval31.isBefore((org.joda.time.ReadableInstant) dateMidnight38);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Interval interval43 = interval31.withDurationAfterStart(readableDuration42);
        org.joda.time.Duration duration44 = interval31.toDuration();
        org.joda.time.Interval interval47 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval50 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean51 = interval47.abuts((org.joda.time.ReadableInterval) interval50);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone53);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight54.withWeekyear(2);
        boolean boolean57 = interval47.isBefore((org.joda.time.ReadableInstant) dateMidnight54);
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.Interval interval59 = interval47.withDurationAfterStart(readableDuration58);
        org.joda.time.Duration duration60 = interval47.toDuration();
        org.joda.time.Interval interval63 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval66 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean67 = interval63.abuts((org.joda.time.ReadableInterval) interval66);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.DateMidnight dateMidnight70 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone69);
        org.joda.time.DateMidnight dateMidnight72 = dateMidnight70.withWeekyear(2);
        boolean boolean73 = interval63.isBefore((org.joda.time.ReadableInstant) dateMidnight70);
        org.joda.time.ReadableDuration readableDuration74 = null;
        org.joda.time.Interval interval75 = interval63.withDurationAfterStart(readableDuration74);
        org.joda.time.Duration duration76 = interval63.toDuration();
        int int77 = duration60.compareTo((org.joda.time.ReadableDuration) duration76);
        org.joda.time.Period period78 = duration60.toPeriod();
        boolean boolean79 = duration44.isShorterThan((org.joda.time.ReadableDuration) duration60);
        boolean boolean80 = duration28.isEqual((org.joda.time.ReadableDuration) duration44);
        org.joda.time.DateTimeZone dateTimeZone82 = null;
        org.joda.time.DateMidnight dateMidnight83 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone82);
        org.joda.time.DateMidnight dateMidnight85 = dateMidnight83.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight87 = dateMidnight83.withWeekyear(2);
        org.joda.time.DateMidnight.Property property88 = dateMidnight83.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight90 = dateMidnight83.withYearOfCentury(1);
        boolean boolean91 = duration28.equals((java.lang.Object) 1);
        org.joda.time.Duration duration92 = duration28.toDuration();
        org.joda.time.Duration duration93 = duration92.toDuration();
        org.joda.time.LocalDateTime localDateTime94 = localDateTime12.minus((org.joda.time.ReadableDuration) duration92);
        int int95 = localDateTime94.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 95 + "'", int10 == 95);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(dateMidnight72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(dateMidnight85);
        org.junit.Assert.assertNotNull(dateMidnight87);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertNotNull(dateMidnight90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(duration92);
        org.junit.Assert.assertNotNull(duration93);
        org.junit.Assert.assertNotNull(localDateTime94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 14 + "'", int95 == 14);
    }

    @Test
    public void test04164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04164");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime5 = timeOfDay2.toDateTime((org.joda.time.ReadableInstant) instant4);
        boolean boolean7 = timeOfDay2.equals((java.lang.Object) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        org.joda.time.Chronology chronology14 = instant12.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.clockhourOfHalfday();
        org.joda.time.DurationField durationField16 = chronology14.eras();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone18 = chronology14.getZone();
        org.joda.time.DateTimeField dateTimeField19 = chronology14.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = chronology14.dayOfWeek();
        org.joda.time.TimeOfDay timeOfDay21 = timeOfDay2.withChronologyRetainFields(chronology14);
        int[] intArray22 = timeOfDay21.getValues();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0, 1, 0, 0]");
    }

    @Test
    public void test04165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04165");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay((int) (short) 0, 0);
        java.lang.String str3 = timeOfDay2.toString();
        int int4 = timeOfDay2.size();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(10, 0);
        java.lang.String str8 = dateTimeZone7.toString();
        org.joda.time.TimeOfDay timeOfDay9 = new org.joda.time.TimeOfDay(dateTimeZone7);
        org.joda.time.TimeOfDay timeOfDay13 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant15 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime16 = timeOfDay13.toDateTime((org.joda.time.ReadableInstant) instant15);
        org.joda.time.Chronology chronology17 = instant15.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.clockhourOfHalfday();
        long long20 = dateTimeField18.roundHalfFloor(0L);
        java.util.Locale locale21 = java.util.Locale.TRADITIONAL_CHINESE;
        int int22 = dateTimeField18.getMaximumShortTextLength(locale21);
        java.lang.String str23 = locale21.getLanguage();
        java.lang.String str24 = locale21.getLanguage();
        org.joda.time.TimeOfDay timeOfDay27 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant29 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime30 = timeOfDay27.toDateTime((org.joda.time.ReadableInstant) instant29);
        org.joda.time.Chronology chronology31 = instant29.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.year();
        org.joda.time.TimeOfDay timeOfDay36 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant38 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime39 = timeOfDay36.toDateTime((org.joda.time.ReadableInstant) instant38);
        org.joda.time.Chronology chronology40 = instant38.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.clockhourOfHalfday();
        long long43 = dateTimeField41.roundHalfFloor(0L);
        java.util.Locale locale44 = java.util.Locale.TRADITIONAL_CHINESE;
        int int45 = dateTimeField41.getMaximumShortTextLength(locale44);
        java.lang.String str46 = locale44.getScript();
        java.lang.String str47 = dateTimeField32.getAsText((int) (short) 1, locale44);
        java.util.Locale locale51 = new java.util.Locale("\u516c\u5143", "0", "weekOfWeekyear");
        java.lang.String str52 = locale44.getDisplayLanguage(locale51);
        java.lang.String str53 = locale21.getDisplayVariant(locale51);
        java.lang.String str54 = dateTimeZone7.getShortName((long) 22, locale51);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime((java.lang.Object) timeOfDay2, dateTimeZone7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.TimeOfDay");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "T00:00:00.000" + "'", str3, "T00:00:00.000");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+10:00" + "'", str8, "+10:00");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "zh" + "'", str23, "zh");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "zh" + "'", str24, "zh");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1" + "'", str47, "1");
        org.junit.Assert.assertEquals(locale51.toString(), "\u516c\u5143_0_weekOfWeekyear");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Chinese" + "'", str52, "Chinese");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+10:00" + "'", str54, "+10:00");
    }

    @Test
    public void test04166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04166");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime5 = timeOfDay2.toDateTime((org.joda.time.ReadableInstant) instant4);
        org.joda.time.Chronology chronology6 = instant4.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.clockhourOfHalfday();
        long long9 = dateTimeField7.roundHalfFloor(0L);
        java.util.Locale locale10 = java.util.Locale.TRADITIONAL_CHINESE;
        int int11 = dateTimeField7.getMaximumShortTextLength(locale10);
        java.util.Locale locale12 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale13 = locale12.stripExtensions();
        java.util.Locale locale14 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale15 = locale14.stripExtensions();
        java.lang.String str16 = locale12.getDisplayName(locale14);
        java.lang.String str17 = locale10.getDisplayLanguage(locale12);
        java.util.Set<java.lang.String> strSet18 = locale12.getUnicodeLocaleAttributes();
        int int19 = strSet18.size();
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap23 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList24 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, strMap23);
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "\u4e2d\u6587\u53f0\u7063)", "zh", "hi!", "\u4e2d\u6587", "1970-01-01T00:00:00.000Z", "zh" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        java.lang.String str35 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.lang.String>) strList33);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap36 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList37 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, strMap36);
        boolean boolean38 = strSet18.retainAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList37);
        org.joda.time.format.DateTimePrinter dateTimePrinter39 = null;
        org.joda.time.format.DateTimeParser dateTimeParser40 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter39, dateTimeParser40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter41.withZone(dateTimeZone42);
        org.joda.time.format.DateTimeParser dateTimeParser44 = dateTimeFormatter41.getParser();
        boolean boolean45 = strSet18.equals((java.lang.Object) dateTimeFormatter41);
        boolean boolean46 = dateTimeFormatter41.isParser();
        org.joda.time.Chronology chronology47 = dateTimeFormatter41.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter41.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter48.withDefaultYear(2022);
        org.joda.time.ReadablePartial readablePartial51 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str52 = dateTimeFormatter48.print(readablePartial51);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str16, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u4e2d\u6587" + "'", str17, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(languageRangeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(languageRangeList24);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(languageRangeList37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
        org.junit.Assert.assertNull(dateTimeParser44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
    }

    @Test
    public void test04167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04167");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime10 = timeOfDay7.toDateTime((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Chronology chronology11 = instant9.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.clockhourOfHalfday();
        long long14 = dateTimeField12.roundHalfFloor(0L);
        java.util.Locale locale15 = java.util.Locale.TRADITIONAL_CHINESE;
        int int16 = dateTimeField12.getMaximumShortTextLength(locale15);
        java.lang.String str17 = locale15.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket((-1L), chronology4, locale15);
        java.util.Locale locale19 = dateTimeParserBucket18.getLocale();
        long long22 = dateTimeParserBucket18.computeMillis(true, "");
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.TimeOfDay timeOfDay27 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant29 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime30 = timeOfDay27.toDateTime((org.joda.time.ReadableInstant) instant29);
        org.joda.time.Chronology chronology31 = instant29.getChronology();
        org.joda.time.TimeOfDay timeOfDay34 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant36 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime37 = timeOfDay34.toDateTime((org.joda.time.ReadableInstant) instant36);
        int[] intArray39 = chronology31.get((org.joda.time.ReadablePartial) timeOfDay34, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime(0L, chronology31);
        org.joda.time.TimeOfDay timeOfDay43 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant45 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime46 = timeOfDay43.toDateTime((org.joda.time.ReadableInstant) instant45);
        org.joda.time.Chronology chronology47 = instant45.getChronology();
        org.joda.time.TimeOfDay timeOfDay50 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant52 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime53 = timeOfDay50.toDateTime((org.joda.time.ReadableInstant) instant52);
        int[] intArray55 = chronology47.get((org.joda.time.ReadablePartial) timeOfDay50, (long) (short) -1);
        mutableDateTime40.setChronology(chronology47);
        org.joda.time.DateTimeField dateTimeField57 = dateTimeFieldType23.getField(chronology47);
        java.util.Locale locale59 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale60 = locale59.stripExtensions();
        dateTimeParserBucket18.saveField(dateTimeFieldType23, "hi!", locale60);
        java.lang.String str62 = locale60.getLanguage();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = dateTimeFormatter2.withLocale(locale60);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter65 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 0);
        boolean boolean66 = dateTimeFormatter65.isParser();
        boolean boolean67 = dateTimeFormatter65.isPrinter();
        org.joda.time.Chronology chronology68 = dateTimeFormatter65.getChronolgy();
        boolean boolean69 = dateTimeFormatter65.isOffsetParsed();
        int int70 = dateTimeFormatter65.getDefaultYear();
        org.joda.time.LocalTime localTime72 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime localTime74 = localTime72.minusMinutes((int) (short) 1);
        org.joda.time.LocalTime localTime76 = localTime72.withMillisOfDay((int) (byte) 1);
        org.joda.time.LocalTime localTime78 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime localTime80 = localTime78.minusMinutes((int) (short) 1);
        int int81 = localTime78.getMillisOfDay();
        org.joda.time.LocalTime.Property property82 = localTime78.millisOfSecond();
        org.joda.time.DurationFieldType durationFieldType83 = org.joda.time.DurationFieldType.millis();
        boolean boolean84 = localTime78.isSupported(durationFieldType83);
        int int85 = localTime72.compareTo((org.joda.time.ReadablePartial) localTime78);
        int int86 = localTime78.getMillisOfDay();
        org.joda.time.LocalTime localTime88 = localTime78.plusSeconds((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str89 = dateTimeFormatter65.print((org.joda.time.ReadablePartial) localTime88);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "zh" + "'", str17, "zh");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "zh" + "'", str62, "zh");
        org.junit.Assert.assertNotNull(dateTimeFormatter63);
        org.junit.Assert.assertNotNull(dateTimeFormatter65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(chronology68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2000 + "'", int70 == 2000);
        org.junit.Assert.assertNotNull(localTime72);
        org.junit.Assert.assertNotNull(localTime74);
        org.junit.Assert.assertNotNull(localTime76);
        org.junit.Assert.assertNotNull(localTime78);
        org.junit.Assert.assertNotNull(localTime80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 35 + "'", int81 == 35);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(durationFieldType83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 35 + "'", int86 == 35);
        org.junit.Assert.assertNotNull(localTime88);
    }

    @Test
    public void test04168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04168");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("T00:01:00.000");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight4.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.plusWeeks(20);
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant16 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime17 = timeOfDay14.toDateTime((org.joda.time.ReadableInstant) instant16);
        org.joda.time.Chronology chronology18 = instant16.getChronology();
        org.joda.time.TimeOfDay timeOfDay21 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant23 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime24 = timeOfDay21.toDateTime((org.joda.time.ReadableInstant) instant23);
        int[] intArray26 = chronology18.get((org.joda.time.ReadablePartial) timeOfDay21, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(0L, chronology18);
        int int28 = mutableDateTime27.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime27.property(dateTimeFieldType29);
        org.joda.time.MutableDateTime mutableDateTime31 = property30.roundHalfEven();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime31.property(dateTimeFieldType32);
        org.joda.time.MutableDateTime mutableDateTime34 = property33.roundHalfFloor();
        org.joda.time.Interval interval37 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean41 = interval37.abuts((org.joda.time.ReadableInterval) interval40);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone43);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight44.withWeekyear(2);
        boolean boolean47 = interval37.isBefore((org.joda.time.ReadableInstant) dateMidnight44);
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Interval interval49 = interval37.withDurationAfterStart(readableDuration48);
        org.joda.time.Duration duration50 = interval37.toDuration();
        org.joda.time.Interval interval53 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval56 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean57 = interval53.abuts((org.joda.time.ReadableInterval) interval56);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone59);
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight60.withWeekyear(2);
        boolean boolean63 = interval53.isBefore((org.joda.time.ReadableInstant) dateMidnight60);
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.Interval interval65 = interval53.withDurationAfterStart(readableDuration64);
        org.joda.time.Duration duration66 = interval53.toDuration();
        org.joda.time.Interval interval69 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval72 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean73 = interval69.abuts((org.joda.time.ReadableInterval) interval72);
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.DateMidnight dateMidnight76 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone75);
        org.joda.time.DateMidnight dateMidnight78 = dateMidnight76.withWeekyear(2);
        boolean boolean79 = interval69.isBefore((org.joda.time.ReadableInstant) dateMidnight76);
        org.joda.time.ReadableDuration readableDuration80 = null;
        org.joda.time.Interval interval81 = interval69.withDurationAfterStart(readableDuration80);
        org.joda.time.Duration duration82 = interval69.toDuration();
        int int83 = duration66.compareTo((org.joda.time.ReadableDuration) duration82);
        boolean boolean84 = duration50.isEqual((org.joda.time.ReadableDuration) duration82);
        mutableDateTime34.add((org.joda.time.ReadableDuration) duration82, (int) (short) 10);
        org.joda.time.DateMidnight dateMidnight87 = dateMidnight10.plus((org.joda.time.ReadableDuration) duration82);
        org.joda.time.Instant instant88 = instant1.minus((org.joda.time.ReadableDuration) duration82);
        org.joda.time.Duration duration89 = duration82.toDuration();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay90 = new org.joda.time.YearMonthDay((java.lang.Object) duration89);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.Duration");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(dateMidnight78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(dateMidnight87);
        org.junit.Assert.assertNotNull(instant88);
        org.junit.Assert.assertNotNull(duration89);
    }

    @Test
    public void test04169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04169");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears((int) '4');
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMillisOfSecond(22);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusMonths((int) (byte) 100);
        int int7 = localDateTime6.getMinuteOfHour();
        org.joda.time.LocalDateTime.Property property8 = localDateTime6.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property8.getFieldType();
        org.joda.time.LocalDateTime localDateTime10 = property8.withMinimumValue();
        org.joda.time.TimeOfDay timeOfDay13 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay13.withSecondOfMinute((int) (byte) 1);
        org.joda.time.TimeOfDay.Property property16 = timeOfDay15.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay18 = property16.addWrapFieldToCopy(1);
        int int19 = property16.getMinimumValueOverall();
        int int20 = property16.getMaximumValue();
        org.joda.time.TimeOfDay timeOfDay22 = property16.setCopy(0);
        org.joda.time.TimeOfDay timeOfDay23 = property16.withMinimumValue();
        org.joda.time.DateTime dateTime24 = timeOfDay23.toDateTimeToday();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean25 = localDateTime10.isAfter((org.joda.time.ReadablePartial) timeOfDay23);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 23 + "'", int20 == 23);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test04170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04170");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears((int) '4');
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.minusSeconds(34);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withSecondOfMinute((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
    }

    @Test
    public void test04171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04171");
        long long6 = java.util.Date.UTC(4656319, 0, (-457079), 625, 408, 53897496);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 146897590619976000L + "'", long6 == 146897590619976000L);
    }

    @Test
    public void test04172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04172");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTime((org.joda.time.ReadableInstant) instant6);
        org.joda.time.Chronology chronology8 = instant6.getChronology();
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime14 = timeOfDay11.toDateTime((org.joda.time.ReadableInstant) instant13);
        int[] intArray16 = chronology8.get((org.joda.time.ReadablePartial) timeOfDay11, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(0L, chronology8);
        org.joda.time.DurationField durationField18 = chronology8.weeks();
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((-86340000L), chronology8);
        int[] intArray20 = localTime19.getValues();
        org.joda.time.LocalTime localTime22 = localTime19.plusMinutes((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalTime localTime25 = localTime19.withPeriodAdded(readablePeriod23, (int) '4');
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalTime localTime27 = localTime19.plus(readablePeriod26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateTime dateTime29 = localTime19.toDateTimeToday(dateTimeZone28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.TimeOfDay timeOfDay35 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant37 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime38 = timeOfDay35.toDateTime((org.joda.time.ReadableInstant) instant37);
        org.joda.time.Chronology chronology39 = instant37.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.clockhourOfHalfday();
        long long42 = dateTimeField40.roundHalfFloor(0L);
        java.util.Locale locale43 = java.util.Locale.TRADITIONAL_CHINESE;
        int int44 = dateTimeField40.getMaximumShortTextLength(locale43);
        java.lang.String str45 = locale43.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket((-1L), chronology32, locale43);
        java.lang.Integer int47 = dateTimeParserBucket46.getPivotYear();
        long long48 = dateTimeParserBucket46.computeMillis();
        org.joda.time.Chronology chronology49 = dateTimeParserBucket46.getChronology();
        java.util.Locale locale50 = dateTimeParserBucket46.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str51 = dateTime29.toString("2022-02-21T10:10:56.579Z", locale50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "zh" + "'", str45, "zh");
        org.junit.Assert.assertNull(int47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-1L) + "'", long48 == (-1L));
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh_TW");
    }

    @Test
    public void test04173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04173");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(0L, dateTimeZone1);
        int int4 = dateTimeZone1.getStandardOffset((-1715687880000L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test04174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04174");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        mutableDateTime16.setYear(3);
        mutableDateTime16.setWeekyear(2022);
        org.joda.time.TimeOfDay timeOfDay24 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant26 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime27 = timeOfDay24.toDateTime((org.joda.time.ReadableInstant) instant26);
        org.joda.time.Chronology chronology28 = instant26.getChronology();
        org.joda.time.TimeOfDay timeOfDay31 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant33 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime34 = timeOfDay31.toDateTime((org.joda.time.ReadableInstant) instant33);
        int[] intArray36 = chronology28.get((org.joda.time.ReadablePartial) timeOfDay31, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime(0L, chronology28);
        org.joda.time.TimeOfDay timeOfDay40 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant42 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime43 = timeOfDay40.toDateTime((org.joda.time.ReadableInstant) instant42);
        org.joda.time.Chronology chronology44 = instant42.getChronology();
        org.joda.time.TimeOfDay timeOfDay47 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant49 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime50 = timeOfDay47.toDateTime((org.joda.time.ReadableInstant) instant49);
        int[] intArray52 = chronology44.get((org.joda.time.ReadablePartial) timeOfDay47, (long) (short) -1);
        mutableDateTime37.setChronology(chronology44);
        boolean boolean54 = mutableDateTime37.isEqualNow();
        org.joda.time.MutableDateTime.Property property55 = mutableDateTime37.secondOfDay();
        boolean boolean56 = mutableDateTime37.isAfterNow();
        mutableDateTime37.setMillisOfSecond((int) (byte) 0);
        mutableDateTime37.setHourOfDay(5);
        org.joda.time.Instant instant62 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone63 = instant62.getZone();
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime(dateTimeZone63);
        org.joda.time.Interval interval65 = new org.joda.time.Interval((org.joda.time.ReadableInstant) mutableDateTime37, (org.joda.time.ReadableInstant) dateTime64);
        boolean boolean66 = mutableDateTime16.isAfter((org.joda.time.ReadableInstant) mutableDateTime37);
        org.joda.time.MutableDateTime.Property property67 = mutableDateTime16.monthOfYear();
        org.joda.time.MutableDateTime.Property property68 = mutableDateTime16.era();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime16.setHourOfDay(54034);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54034 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(property68);
    }

    @Test
    public void test04175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04175");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.withWeekyear(2);
        org.joda.time.DateMidnight.Property property7 = dateMidnight2.weekOfWeekyear();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.TimeOfDay timeOfDay13 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant15 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime16 = timeOfDay13.toDateTime((org.joda.time.ReadableInstant) instant15);
        org.joda.time.Chronology chronology17 = instant15.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.clockhourOfHalfday();
        long long20 = dateTimeField18.roundHalfFloor(0L);
        java.util.Locale locale21 = java.util.Locale.TRADITIONAL_CHINESE;
        int int22 = dateTimeField18.getMaximumShortTextLength(locale21);
        java.lang.String str23 = locale21.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket((-1L), chronology10, locale21);
        java.util.Locale locale25 = java.util.Locale.US;
        java.lang.String str26 = locale21.getDisplayScript(locale25);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight27 = property7.setCopy("hours", locale25);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"hours\" for weekOfWeekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "zh" + "'", str23, "zh");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
    }

    @Test
    public void test04176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04176");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        int int17 = mutableDateTime16.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime16.property(dateTimeFieldType18);
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime25 = timeOfDay22.toDateTime((org.joda.time.ReadableInstant) instant24);
        org.joda.time.Chronology chronology26 = instant24.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.clockhourOfHalfday();
        long long29 = dateTimeField27.roundHalfFloor(0L);
        java.util.Locale locale30 = java.util.Locale.TRADITIONAL_CHINESE;
        int int31 = dateTimeField27.getMaximumShortTextLength(locale30);
        java.util.Locale locale32 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale33 = locale32.stripExtensions();
        java.util.Locale locale34 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale35 = locale34.stripExtensions();
        java.lang.String str36 = locale32.getDisplayName(locale34);
        java.lang.String str37 = locale30.getDisplayLanguage(locale32);
        java.util.Calendar calendar38 = mutableDateTime16.toCalendar(locale32);
        java.util.Date date42 = new java.util.Date(0, (int) '4', 0);
        int int43 = date42.getMinutes();
        date42.setYear(12);
        calendar38.setTime(date42);
        java.util.Date date47 = calendar38.getTime();
        int int48 = calendar38.getWeeksInWeekYear();
        java.util.TimeZone timeZone49 = calendar38.getTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            int int56 = timeZone49.getOffset(1978, 3767, 8, 59000, (-5599531), 32772);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal era 1978");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str36, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u4e2d\u6587" + "'", str37, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(calendar38);
        org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=-1820016000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1912,MONTH=3,WEEK_OF_YEAR=18,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=121,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(date42.toString(), "Tue Apr 30 00:00:00 GMT+00:00 1912");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(date47);
// flaky:         org.junit.Assert.assertEquals(date47.toString(), "Tue Apr 30 00:00:00 GMT+00:00 1912");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 52 + "'", int48 == 52);
        org.junit.Assert.assertNotNull(timeZone49);
        org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test04177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04177");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.Chronology chronology1 = localDateTime0.getChronology();
        int int2 = localDateTime0.size();
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime5 = property3.addWrapFieldToCopy(11);
        org.joda.time.Interval interval8 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval11 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean12 = interval8.abuts((org.joda.time.ReadableInterval) interval11);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.withWeekyear(2);
        boolean boolean18 = interval8.isBefore((org.joda.time.ReadableInstant) dateMidnight15);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Interval interval20 = interval8.withDurationAfterStart(readableDuration19);
        org.joda.time.Duration duration21 = interval8.toDuration();
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean28 = interval24.abuts((org.joda.time.ReadableInterval) interval27);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight31.withWeekyear(2);
        boolean boolean34 = interval24.isBefore((org.joda.time.ReadableInstant) dateMidnight31);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Interval interval36 = interval24.withDurationAfterStart(readableDuration35);
        org.joda.time.Duration duration37 = interval24.toDuration();
        int int38 = duration21.compareTo((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Period period39 = duration21.toPeriod();
        java.lang.String str40 = period39.toString();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime5.minus((org.joda.time.ReadablePeriod) period39);
        java.util.Date date42 = localDateTime5.toDate();
        org.joda.time.LocalDateTime.Property property43 = localDateTime5.year();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime5.minusHours(3);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime47 = localDateTime5.withHourOfDay(54023014);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54023014 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "PT0S" + "'", str40, "PT0S");
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(date42);
// flaky:         org.junit.Assert.assertEquals(date42.toString(), "Mon Feb 21 15:01:07 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDateTime45);
    }

    @Test
    public void test04178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04178");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime5 = timeOfDay2.toDateTime((org.joda.time.ReadableInstant) instant4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime8 = dateTime5.withDurationAdded(readableDuration6, (int) (short) 1);
        long long9 = dateTime8.getMillis();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime11 = dateTime8.minus(readablePeriod10);
        org.joda.time.DateTime dateTime13 = dateTime11.minusDays((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime17 = dateTime13.withDate(53979631, 4656319, 54005493);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 4656319 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-86340000L) + "'", long9 == (-86340000L));
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test04179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04179");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.withDurationAdded((long) 2, 100);
        int int6 = dateMidnight5.getDayOfMonth();
        java.util.GregorianCalendar gregorianCalendar7 = dateMidnight5.toGregorianCalendar();
        java.util.Date date11 = new java.util.Date(0, (int) '4', 0);
        int int12 = date11.getMinutes();
        date11.setYear(12);
        gregorianCalendar7.setTime(date11);
        // The following exception was thrown during execution in test generation
        try {
            gregorianCalendar7.roll(960, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(gregorianCalendar7);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Tue Apr 30 00:00:00 GMT+00:00 1912");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test04180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04180");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.withDurationAdded(readableDuration4, (int) (byte) 0);
        org.joda.time.DateTime dateTime8 = dateTime3.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime10 = dateTime8.plusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime12 = dateTime10.plusDays(2);
        org.joda.time.DateTime dateTime14 = dateTime10.withHourOfDay(10);
        org.joda.time.DateTime dateTime16 = dateTime14.minusDays((int) 'x');
        java.lang.String str17 = dateTime14.toString();
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay((java.lang.Object) str17);
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay18.minusYears(32769);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay20.withMonthOfYear(122);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 122 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-21T10:11:55.784Z" + "'", str17, "2022-02-21T10:11:55.784Z");
        org.junit.Assert.assertNotNull(yearMonthDay20);
    }

    @Test
    public void test04181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04181");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.withDurationAdded(readableDuration4, (int) (byte) 0);
        org.joda.time.DateTime dateTime8 = dateTime3.minusSeconds((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime10 = dateTime3.minus(readableDuration9);
        org.joda.time.TimeOfDay timeOfDay15 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant17 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime18 = timeOfDay15.toDateTime((org.joda.time.ReadableInstant) instant17);
        org.joda.time.Chronology chronology19 = instant17.getChronology();
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((java.lang.Object) (-11491200000L), chronology19);
        org.joda.time.TimeOfDay timeOfDay21 = org.joda.time.TimeOfDay.fromMillisOfDay((-2678399900L), chronology19);
        org.joda.time.DateTime dateTime22 = dateTime3.toDateTime(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.TimeOfDay timeOfDay27 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant29 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime30 = timeOfDay27.toDateTime((org.joda.time.ReadableInstant) instant29);
        org.joda.time.Chronology chronology31 = instant29.getChronology();
        org.joda.time.TimeOfDay timeOfDay34 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant36 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime37 = timeOfDay34.toDateTime((org.joda.time.ReadableInstant) instant36);
        int[] intArray39 = chronology31.get((org.joda.time.ReadablePartial) timeOfDay34, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime(0L, chronology31);
        org.joda.time.TimeOfDay timeOfDay43 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant45 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime46 = timeOfDay43.toDateTime((org.joda.time.ReadableInstant) instant45);
        org.joda.time.Chronology chronology47 = instant45.getChronology();
        org.joda.time.TimeOfDay timeOfDay50 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant52 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime53 = timeOfDay50.toDateTime((org.joda.time.ReadableInstant) instant52);
        int[] intArray55 = chronology47.get((org.joda.time.ReadablePartial) timeOfDay50, (long) (short) -1);
        mutableDateTime40.setChronology(chronology47);
        org.joda.time.DateTimeField dateTimeField57 = dateTimeFieldType23.getField(chronology47);
        int int58 = dateTime3.get(dateTimeFieldType23);
        org.joda.time.MutableDateTime mutableDateTime59 = dateTime3.toMutableDateTime();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertNotNull(mutableDateTime59);
    }

    @Test
    public void test04182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04182");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = localDate0.toDateMidnight(dateTimeZone3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.plus((long) 100);
        int int7 = dateMidnight4.getMinuteOfDay();
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight4.withDurationAdded((long) 1970, 100);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight4.plusYears(36000100);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusDays(34);
        org.joda.time.DateMidnight.Property property15 = dateMidnight14.monthOfYear();
        org.joda.time.DateMidnight dateMidnight16 = property15.roundFloorCopy();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateMidnight16);
    }

    @Test
    public void test04183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04183");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime5 = timeOfDay2.toDateTime((org.joda.time.ReadableInstant) instant4);
        org.joda.time.Chronology chronology6 = instant4.getChronology();
        org.joda.time.TimeOfDay timeOfDay9 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime12 = timeOfDay9.toDateTime((org.joda.time.ReadableInstant) instant11);
        int[] intArray14 = chronology6.get((org.joda.time.ReadablePartial) timeOfDay9, (long) (short) -1);
        int int15 = timeOfDay9.size();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = timeOfDay9.toString(dateTimeFormatter16);
        int int18 = timeOfDay9.size();
        org.joda.time.TimeOfDay timeOfDay23 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant25 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime26 = timeOfDay23.toDateTime((org.joda.time.ReadableInstant) instant25);
        org.joda.time.Chronology chronology27 = instant25.getChronology();
        org.joda.time.TimeOfDay timeOfDay30 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant32 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime33 = timeOfDay30.toDateTime((org.joda.time.ReadableInstant) instant32);
        int[] intArray35 = chronology27.get((org.joda.time.ReadablePartial) timeOfDay30, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime(0L, chronology27);
        mutableDateTime36.setYear(3);
        org.joda.time.Instant instant40 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone41 = instant40.getZone();
        mutableDateTime36.setZone(dateTimeZone41);
        org.joda.time.LocalTime localTime43 = new org.joda.time.LocalTime(0L, dateTimeZone41);
        java.util.TimeZone timeZone44 = dateTimeZone41.toTimeZone();
        org.joda.time.TimeOfDay timeOfDay49 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant51 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime52 = timeOfDay49.toDateTime((org.joda.time.ReadableInstant) instant51);
        org.joda.time.Chronology chronology53 = instant51.getChronology();
        org.joda.time.TimeOfDay timeOfDay56 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant58 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime59 = timeOfDay56.toDateTime((org.joda.time.ReadableInstant) instant58);
        int[] intArray61 = chronology53.get((org.joda.time.ReadablePartial) timeOfDay56, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime(0L, chronology53);
        mutableDateTime62.setYear(3);
        org.joda.time.Instant instant66 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone67 = instant66.getZone();
        mutableDateTime62.setZone(dateTimeZone67);
        org.joda.time.LocalTime localTime69 = new org.joda.time.LocalTime(0L, dateTimeZone67);
        java.util.TimeZone timeZone70 = dateTimeZone67.toTimeZone();
        boolean boolean71 = timeZone44.hasSameRules(timeZone70);
        java.util.Locale locale72 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar73 = java.util.Calendar.getInstance(timeZone70, locale72);
        java.util.Date date74 = calendar73.getTime();
        boolean boolean75 = timeOfDay9.equals((java.lang.Object) date74);
        org.joda.time.TimeOfDay.Property property76 = timeOfDay9.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay77 = property76.getTimeOfDay();
        org.joda.time.LocalTime localTime79 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime localTime81 = localTime79.minusMinutes((int) (short) 1);
        org.joda.time.DurationFieldType durationFieldType82 = org.joda.time.DurationFieldType.seconds();
        boolean boolean83 = localTime79.isSupported(durationFieldType82);
        org.joda.time.DurationFieldType durationFieldType84 = org.joda.time.DurationFieldType.millis();
        java.lang.String str85 = durationFieldType84.getName();
        org.joda.time.LocalTime localTime87 = localTime79.withFieldAdded(durationFieldType84, 70);
        org.joda.time.TimeOfDay timeOfDay89 = timeOfDay77.withFieldAdded(durationFieldType84, 18);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "T00:01:00.000" + "'", str17, "T00:01:00.000");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(timeZone44);
        org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(timeZone70);
        org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar73);
// flaky:         org.junit.Assert.assertEquals(calendar73.toString(), "java.util.GregorianCalendar[time=1645455716878,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=1,SECOND=56,MILLISECOND=878,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date74);
// flaky:         org.junit.Assert.assertEquals(date74.toString(), "Mon Feb 21 15:01:56 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(timeOfDay77);
        org.junit.Assert.assertNotNull(localTime79);
        org.junit.Assert.assertNotNull(localTime81);
        org.junit.Assert.assertNotNull(durationFieldType82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(durationFieldType84);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "millis" + "'", str85, "millis");
        org.junit.Assert.assertNotNull(localTime87);
        org.junit.Assert.assertNotNull(timeOfDay89);
    }

    @Test
    public void test04184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04184");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusSeconds(12);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusWeeks(0);
        int int6 = localDateTime0.getMillisOfSecond();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 955 + "'", int6 == 955);
    }

    @Test
    public void test04185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04185");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.clockhourOfHalfday();
        long long10 = dateTimeField8.roundHalfFloor(0L);
        java.util.Locale locale11 = java.util.Locale.TRADITIONAL_CHINESE;
        int int12 = dateTimeField8.getMaximumShortTextLength(locale11);
        java.util.Locale locale13 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale14 = locale13.stripExtensions();
        java.util.Locale locale15 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale16 = locale15.stripExtensions();
        java.lang.String str17 = locale13.getDisplayName(locale15);
        java.lang.String str18 = locale11.getDisplayLanguage(locale13);
        java.util.Set<java.lang.String> strSet19 = locale13.getUnicodeLocaleAttributes();
        int int20 = strSet19.size();
        java.util.Locale.LanguageRange[] languageRangeArray21 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList22 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList22, languageRangeArray21);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap24 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList25 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList22, strMap24);
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "\u4e2d\u6587\u53f0\u7063)", "zh", "hi!", "\u4e2d\u6587", "1970-01-01T00:00:00.000Z", "zh" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        java.lang.String str36 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList22, (java.util.Collection<java.lang.String>) strList34);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap37 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList38 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList22, strMap37);
        boolean boolean39 = strSet19.retainAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList38);
        org.joda.time.format.DateTimePrinter dateTimePrinter40 = null;
        org.joda.time.format.DateTimeParser dateTimeParser41 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter40, dateTimeParser41);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter42.withZone(dateTimeZone43);
        org.joda.time.format.DateTimeParser dateTimeParser45 = dateTimeFormatter42.getParser();
        boolean boolean46 = strSet19.equals((java.lang.Object) dateTimeFormatter42);
        boolean boolean47 = dateTimeFormatter42.isParser();
        org.joda.time.Chronology chronology48 = dateTimeFormatter42.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter42.withZoneUTC();
        boolean boolean50 = dateTimeFormatter42.isParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant51 = org.joda.time.Instant.parse("+00:00:00.029", dateTimeFormatter42);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str17, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u4e2d\u6587" + "'", str18, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(languageRangeArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(languageRangeList25);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(languageRangeList38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNull(dateTimeParser45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test04186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04186");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        int int17 = mutableDateTime16.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime16.property(dateTimeFieldType18);
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime25 = timeOfDay22.toDateTime((org.joda.time.ReadableInstant) instant24);
        org.joda.time.Chronology chronology26 = instant24.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.clockhourOfHalfday();
        long long29 = dateTimeField27.roundHalfFloor(0L);
        java.util.Locale locale30 = java.util.Locale.TRADITIONAL_CHINESE;
        int int31 = dateTimeField27.getMaximumShortTextLength(locale30);
        java.util.Locale locale32 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale33 = locale32.stripExtensions();
        java.util.Locale locale34 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale35 = locale34.stripExtensions();
        java.lang.String str36 = locale32.getDisplayName(locale34);
        java.lang.String str37 = locale30.getDisplayLanguage(locale32);
        java.util.Calendar calendar38 = mutableDateTime16.toCalendar(locale32);
        java.util.Date date42 = new java.util.Date(0, (int) '4', 0);
        int int43 = date42.getMinutes();
        date42.setYear(12);
        calendar38.setTime(date42);
        calendar38.clear(10);
        calendar38.clear();
        calendar38.clear(7);
        int int53 = calendar38.getActualMaximum((int) (byte) 1);
        java.lang.String str54 = calendar38.getCalendarType();
        java.lang.Class<?> wildcardClass55 = calendar38.getClass();
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str36, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u4e2d\u6587" + "'", str37, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(calendar38);
        org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
// flaky:         org.junit.Assert.assertEquals(date42.toString(), "Tue Apr 30 00:00:00 GMT+00:00 1912");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 292278994 + "'", int53 == 292278994);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "gregory" + "'", str54, "gregory");
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test04187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04187");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.DateTime dateTime9 = dateTime6.withPeriodAdded(readablePeriod7, (int) (short) 0);
        boolean boolean10 = dateTime6.isAfterNow();
        org.joda.time.DateTime dateTime12 = dateTime6.plus((long) 15);
        org.joda.time.TimeOfDay timeOfDay15 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay.Property property16 = timeOfDay15.minuteOfHour();
        java.lang.String str17 = property16.getAsShortText();
        org.joda.time.TimeOfDay timeOfDay20 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant22 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime23 = timeOfDay20.toDateTime((org.joda.time.ReadableInstant) instant22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.DateTime dateTime26 = dateTime23.withPeriodAdded(readablePeriod24, (int) (short) 0);
        int int27 = property16.compareTo((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime28 = dateTime23.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property29 = dateTime28.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay32 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant34 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime35 = timeOfDay32.toDateTime((org.joda.time.ReadableInstant) instant34);
        org.joda.time.Chronology chronology36 = instant34.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.clockhourOfHalfday();
        long long39 = dateTimeField37.roundHalfFloor(0L);
        java.util.Locale locale40 = java.util.Locale.TRADITIONAL_CHINESE;
        int int41 = dateTimeField37.getMaximumShortTextLength(locale40);
        java.lang.String str42 = locale40.getLanguage();
        java.lang.String str43 = locale40.getLanguage();
        java.util.Calendar calendar44 = dateTime28.toCalendar(locale40);
        java.util.Calendar calendar45 = dateTime12.toCalendar(locale40);
        org.joda.time.TimeOfDay timeOfDay50 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant52 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime53 = timeOfDay50.toDateTime((org.joda.time.ReadableInstant) instant52);
        org.joda.time.Chronology chronology54 = instant52.getChronology();
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight((java.lang.Object) (-11491200000L), chronology54);
        org.joda.time.TimeOfDay timeOfDay56 = org.joda.time.TimeOfDay.fromMillisOfDay((-2678399900L), chronology54);
        boolean boolean57 = calendar45.after((java.lang.Object) chronology54);
        org.joda.time.DurationField durationField58 = durationFieldType0.getField(chronology54);
        org.joda.time.DateTimeField dateTimeField59 = chronology54.weekyear();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1" + "'", str17, "1");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "zh" + "'", str42, "zh");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "zh" + "'", str43, "zh");
        org.junit.Assert.assertNotNull(calendar44);
        org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=-86340000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar45);
        org.junit.Assert.assertEquals(calendar45.toString(), "java.util.GregorianCalendar[time=-86339985,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=0,MILLISECOND=15,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(timeOfDay56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
    }

    @Test
    public void test04188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04188");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(201, 6);
        int int4 = dateTimeZone2.getOffset(2596441L);
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now();
        org.joda.time.Chronology chronology6 = localDateTime5.getChronology();
        int int7 = localDateTime5.size();
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.weekyear();
        org.joda.time.LocalDateTime localDateTime9 = property8.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime11 = property8.addToCopy((long) 2);
        boolean boolean12 = dateTimeZone2.isLocalDateTimeGap(localDateTime11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withCenturyOfEra(1);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusMonths(816);
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime22 = timeOfDay19.toDateTime((org.joda.time.ReadableInstant) instant21);
        org.joda.time.Chronology chronology23 = instant21.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.year();
        org.joda.time.DurationField durationField25 = chronology23.weeks();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((java.lang.Object) 816, chronology23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 723960000 + "'", int4 == 723960000);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
    }

    @Test
    public void test04189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04189");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 10, 470, 0, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 470 for minuteOfHour must not be larger than 59");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04190");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        int int17 = mutableDateTime16.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime16.property(dateTimeFieldType18);
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime25 = timeOfDay22.toDateTime((org.joda.time.ReadableInstant) instant24);
        org.joda.time.Chronology chronology26 = instant24.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.clockhourOfHalfday();
        long long29 = dateTimeField27.roundHalfFloor(0L);
        java.util.Locale locale30 = java.util.Locale.TRADITIONAL_CHINESE;
        int int31 = dateTimeField27.getMaximumShortTextLength(locale30);
        java.util.Locale locale32 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale33 = locale32.stripExtensions();
        java.util.Locale locale34 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale35 = locale34.stripExtensions();
        java.lang.String str36 = locale32.getDisplayName(locale34);
        java.lang.String str37 = locale30.getDisplayLanguage(locale32);
        java.util.Calendar calendar38 = mutableDateTime16.toCalendar(locale32);
        java.util.Date date42 = new java.util.Date(0, (int) '4', 0);
        int int43 = date42.getMinutes();
        date42.setYear(12);
        calendar38.setTime(date42);
        calendar38.clear(10);
        calendar38.clear();
        java.lang.String str50 = calendar38.getCalendarType();
        // The following exception was thrown during execution in test generation
        try {
            int int52 = calendar38.getGreatestMinimum(795);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 795");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str36, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u4e2d\u6587" + "'", str37, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(calendar38);
        org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
// flaky:         org.junit.Assert.assertEquals(date42.toString(), "Tue Apr 30 00:00:00 GMT+00:00 1912");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "gregory" + "'", str50, "gregory");
    }

    @Test
    public void test04191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04191");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        int int17 = mutableDateTime16.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime16.property(dateTimeFieldType18);
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime25 = timeOfDay22.toDateTime((org.joda.time.ReadableInstant) instant24);
        org.joda.time.Chronology chronology26 = instant24.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.clockhourOfHalfday();
        long long29 = dateTimeField27.roundHalfFloor(0L);
        java.util.Locale locale30 = java.util.Locale.TRADITIONAL_CHINESE;
        int int31 = dateTimeField27.getMaximumShortTextLength(locale30);
        java.util.Locale locale32 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale33 = locale32.stripExtensions();
        java.util.Locale locale34 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale35 = locale34.stripExtensions();
        java.lang.String str36 = locale32.getDisplayName(locale34);
        java.lang.String str37 = locale30.getDisplayLanguage(locale32);
        java.util.Calendar calendar38 = mutableDateTime16.toCalendar(locale32);
        java.util.Date date42 = new java.util.Date(0, (int) '4', 0);
        int int43 = date42.getMinutes();
        date42.setYear(12);
        calendar38.setTime(date42);
        java.util.Date date47 = calendar38.getTime();
        date47.setMinutes(169);
        int int50 = date47.getDate();
        long long51 = date47.getTime();
        java.lang.String str52 = date47.toString();
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str36, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u4e2d\u6587" + "'", str37, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(calendar38);
        org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=-1820016000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1912,MONTH=3,WEEK_OF_YEAR=18,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=121,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(date42.toString(), "Tue Apr 30 00:00:00 GMT+00:00 1912");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(date47);
// flaky:         org.junit.Assert.assertEquals(date47.toString(), "Tue Apr 30 02:49:00 GMT+00:00 1912");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 30 + "'", int50 == 30);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-1820005860000L) + "'", long51 == (-1820005860000L));
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Tue Apr 30 02:49:00 GMT+00:00 1912" + "'", str52, "Tue Apr 30 02:49:00 GMT+00:00 1912");
    }

    @Test
    public void test04192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04192");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = localDate0.toDateMidnight(dateTimeZone3);
        org.joda.time.DateTime dateTime5 = localDate0.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property6 = localDate0.yearOfEra();
        org.joda.time.LocalDate.Property property7 = localDate0.year();
        org.joda.time.LocalDate.Property property8 = localDate0.dayOfMonth();
        org.joda.time.LocalDate localDate10 = localDate0.plusYears(36000000);
        int int11 = localDate0.getCenturyOfEra();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20 + "'", int11 == 20);
    }

    @Test
    public void test04193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04193");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        org.joda.time.DurationField durationField17 = chronology7.weeks();
        org.joda.time.DateTimeField dateTimeField18 = chronology7.dayOfYear();
        org.joda.time.DateTimeField dateTimeField19 = chronology7.yearOfEra();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(chronology7);
        org.joda.time.Instant instant22 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone23 = instant22.getZone();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTime dateTime27 = dateTime24.withDurationAdded(readableDuration25, (int) (byte) 0);
        org.joda.time.DateTime dateTime28 = dateTime27.toDateTime();
        org.joda.time.DateTime dateTime30 = dateTime28.minusDays(4);
        org.joda.time.DateMidnight dateMidnight31 = dateTime28.toDateMidnight();
        boolean boolean32 = dateTime20.isBefore((org.joda.time.ReadableInstant) dateMidnight31);
        org.joda.time.DateTime dateTime33 = dateTime20.withEarlierOffsetAtOverlap();
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTime33);
    }

    @Test
    public void test04194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04194");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = localDate0.toDateMidnight(dateTimeZone3);
        org.joda.time.DateTime dateTime5 = localDate0.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime6 = localDate0.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate8 = localDate0.minusWeeks((int) 'a');
        org.joda.time.LocalDate.Property property9 = localDate8.weekOfWeekyear();
        org.joda.time.LocalDate localDate10 = property9.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate11 = property9.withMinimumValue();
        org.joda.time.LocalDate localDate12 = property9.withMinimumValue();
        int int13 = localDate12.size();
        int int14 = localDate12.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test04195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04195");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = localDate0.toDateMidnight(dateTimeZone3);
        org.joda.time.DateTime dateTime5 = localDate0.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime6 = localDate0.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate8 = localDate0.minusWeeks((int) 'a');
        org.joda.time.LocalDate.Property property9 = localDate8.weekOfWeekyear();
        java.util.Locale locale10 = java.util.Locale.US;
        boolean boolean11 = property9.equals((java.lang.Object) locale10);
        org.joda.time.LocalDate localDate12 = property9.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.plusDays(5);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusMinutes(1);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plusYears((int) ' ');
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withMillisOfDay(30);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.withMillisOfDay(2);
        // The following exception was thrown during execution in test generation
        try {
            int int26 = localDate12.compareTo((org.joda.time.ReadablePartial) localDateTime25);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime25);
    }

    @Test
    public void test04196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04196");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.DateTime dateTime3 = timeOfDay2.toDateTimeToday();
        org.joda.time.DateTime dateTime5 = dateTime3.plusWeeks((int) '4');
        org.joda.time.DateTime dateTime7 = dateTime3.minusHours(100);
        org.joda.time.TimeOfDay timeOfDay13 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant15 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime16 = timeOfDay13.toDateTime((org.joda.time.ReadableInstant) instant15);
        org.joda.time.Chronology chronology17 = instant15.getChronology();
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((java.lang.Object) (-11491200000L), chronology17);
        org.joda.time.DateTimeField dateTimeField19 = chronology17.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay21 = new org.joda.time.TimeOfDay(0L, chronology17);
        org.joda.time.Chronology chronology22 = timeOfDay21.getChronology();
        org.joda.time.TimeOfDay timeOfDay25 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay.Property property26 = timeOfDay25.minuteOfHour();
        java.lang.String str27 = property26.getAsShortText();
        org.joda.time.TimeOfDay timeOfDay30 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant32 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime33 = timeOfDay30.toDateTime((org.joda.time.ReadableInstant) instant32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.DateTime dateTime36 = dateTime33.withPeriodAdded(readablePeriod34, (int) (short) 0);
        int int37 = property26.compareTo((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime38 = dateTime33.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((java.lang.Object) dateTime33);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.DateTime dateTime41 = dateTime39.minus(readablePeriod40);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(10, 0);
        java.lang.String str45 = dateTimeZone44.toString();
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime((java.lang.Object) readablePeriod40, dateTimeZone44);
        org.joda.time.DateTime dateTime47 = timeOfDay21.toDateTimeToday(dateTimeZone44);
        java.lang.String str49 = dateTimeZone44.getNameKey((long) 5);
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime((long) (-11491200), dateTimeZone44);
        boolean boolean52 = dateTimeZone44.isStandardOffset((long) 22);
        int int54 = dateTimeZone44.getOffset((long) 1978);
        org.joda.time.DateTime dateTime55 = dateTime3.withZone(dateTimeZone44);
        int int56 = dateTime3.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1" + "'", str27, "1");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+10:00" + "'", str45, "+10:00");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 36000000 + "'", int54 == 36000000);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 8 + "'", int56 == 8);
    }

    @Test
    public void test04197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04197");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.Chronology chronology1 = localDateTime0.getChronology();
        org.joda.time.LocalDateTime.Property property2 = localDateTime0.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime3 = property2.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime4 = property2.withMinimumValue();
        int int5 = localDateTime4.getSecondOfMinute();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.DateTimeField dateTimeField8 = property6.getField();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime10 = property6.setCopy("\u5fb7\u6587");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"??\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 57 + "'", int5 == 57);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test04198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04198");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay.Property property3 = timeOfDay2.minuteOfHour();
        java.lang.String str4 = property3.getAsShortText();
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant10 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime11 = timeOfDay8.toDateTime((org.joda.time.ReadableInstant) instant10);
        org.joda.time.Chronology chronology12 = instant10.getChronology();
        org.joda.time.TimeOfDay timeOfDay15 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant17 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime18 = timeOfDay15.toDateTime((org.joda.time.ReadableInstant) instant17);
        int[] intArray20 = chronology12.get((org.joda.time.ReadablePartial) timeOfDay15, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(0L, chronology12);
        int int22 = mutableDateTime21.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime21.property(dateTimeFieldType23);
        org.joda.time.TimeOfDay timeOfDay27 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant29 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime30 = timeOfDay27.toDateTime((org.joda.time.ReadableInstant) instant29);
        org.joda.time.Chronology chronology31 = instant29.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.clockhourOfHalfday();
        long long34 = dateTimeField32.roundHalfFloor(0L);
        java.util.Locale locale35 = java.util.Locale.TRADITIONAL_CHINESE;
        int int36 = dateTimeField32.getMaximumShortTextLength(locale35);
        java.util.Locale locale37 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale38 = locale37.stripExtensions();
        java.util.Locale locale39 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale40 = locale39.stripExtensions();
        java.lang.String str41 = locale37.getDisplayName(locale39);
        java.lang.String str42 = locale35.getDisplayLanguage(locale37);
        java.util.Calendar calendar43 = mutableDateTime21.toCalendar(locale37);
        int int44 = property3.getMaximumTextLength(locale37);
        java.lang.String str45 = property3.getAsString();
        java.lang.String str46 = property3.getAsString();
        int int47 = property3.get();
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone49);
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight50.withDurationAdded((long) 2, 100);
        int int54 = dateMidnight53.getDayOfMonth();
        java.util.GregorianCalendar gregorianCalendar55 = dateMidnight53.toGregorianCalendar();
        gregorianCalendar55.setTimeInMillis(14L);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.TimeOfDay timeOfDay63 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant65 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime66 = timeOfDay63.toDateTime((org.joda.time.ReadableInstant) instant65);
        org.joda.time.Chronology chronology67 = instant65.getChronology();
        org.joda.time.DateTimeField dateTimeField68 = chronology67.clockhourOfHalfday();
        org.joda.time.DurationField durationField69 = chronology67.eras();
        org.joda.time.DateTimeField dateTimeField70 = dateTimeFieldType60.getField(chronology67);
        long long73 = dateTimeField70.add((long) (short) 100, (long) (byte) -1);
        boolean boolean74 = dateTimeField70.isSupported();
        org.joda.time.TimeOfDay timeOfDay78 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant80 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime81 = timeOfDay78.toDateTime((org.joda.time.ReadableInstant) instant80);
        org.joda.time.Chronology chronology82 = instant80.getChronology();
        org.joda.time.DateTimeField dateTimeField83 = chronology82.clockhourOfHalfday();
        long long85 = dateTimeField83.roundHalfFloor(0L);
        java.util.Locale locale86 = java.util.Locale.TRADITIONAL_CHINESE;
        int int87 = dateTimeField83.getMaximumShortTextLength(locale86);
        java.lang.String str88 = locale86.getLanguage();
        java.util.Locale locale89 = locale86.stripExtensions();
        java.lang.String str90 = dateTimeField70.getAsShortText((long) 10, locale86);
        java.util.Map<java.lang.String, java.lang.Integer> strMap91 = gregorianCalendar55.getDisplayNames(11, (int) (byte) 0, locale86);
        java.lang.String str92 = locale86.getISO3Language();
        int int93 = property3.getMaximumShortTextLength(locale86);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1" + "'", str4, "1");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str41, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\u4e2d\u6587" + "'", str42, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(calendar43);
        org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1" + "'", str45, "1");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1" + "'", str46, "1");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(gregorianCalendar55);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + (-2678399900L) + "'", long73 == (-2678399900L));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 0L + "'", long85 == 0L);
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2 + "'", int87 == 2);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "zh" + "'", str88, "zh");
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "\u4e00\u6708" + "'", str90, "\u4e00\u6708");
        org.junit.Assert.assertNull(strMap91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "zho" + "'", str92, "zho");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 2 + "'", int93 == 2);
    }

    @Test
    public void test04199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04199");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTime((org.joda.time.ReadableInstant) instant6);
        org.joda.time.Chronology chronology8 = instant6.getChronology();
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((java.lang.Object) (-11491200000L), chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay12 = new org.joda.time.TimeOfDay(0L, chronology8);
        org.joda.time.Chronology chronology13 = timeOfDay12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.months();
        int int17 = durationField14.getValue((long) 17, (long) 999);
        long long20 = durationField14.getMillis(0, 20000L);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
    }

    @Test
    public void test04200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04200");
        java.util.Date date3 = new java.util.Date(0, (int) '4', 0);
        int int4 = date3.getMinutes();
        org.joda.time.YearMonthDay yearMonthDay5 = org.joda.time.YearMonthDay.fromDateFields(date3);
        org.joda.time.DateTime dateTime6 = yearMonthDay5.toDateTimeAtMidnight();
        org.joda.time.DateTime.Property property7 = dateTime6.millisOfDay();
        org.joda.time.DateTime dateTime8 = property7.getDateTime();
        org.joda.time.DateTime dateTime9 = property7.withMinimumValue();
        org.joda.time.DateTime dateTime11 = property7.setCopy(7);
        org.joda.time.DateTime dateTime12 = property7.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime13 = dateTime12.withTimeAtStartOfDay();
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Sat Apr 30 00:00:00 GMT+00:00 1904");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test04201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04201");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.Chronology chronology1 = localDateTime0.getChronology();
        int int2 = localDateTime0.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.monthOfYear();
        int int4 = localDateTime0.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minusMonths((-292275054));
        java.util.Date date13 = new java.util.Date((int) '#', 100, 23, 30, 0, (int) (short) 10);
        java.lang.String str14 = date13.toGMTString();
        java.util.Date date15 = new java.util.Date();
        boolean boolean16 = date13.before(date15);
        int int17 = date13.getSeconds();
        java.lang.String str18 = date13.toLocaleString();
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.fromDateFields(date13);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusWeeks(21);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusWeeks(53917543);
        int int24 = localDateTime6.compareTo((org.joda.time.ReadablePartial) localDateTime21);
        int int25 = localDateTime6.getMonthOfYear();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(localDateTime6);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Mon May 24 06:00:10 GMT+00:00 1943");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "24 May 1943 06:00:10 GMT" + "'", str14, "24 May 1943 06:00:10 GMT");
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Mon Feb 21 15:01:57 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 10 + "'", int17 == 10);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "May 24, 1943 6:00:10 AM" + "'", str18, "May 24, 1943 6:00:10 AM");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 8 + "'", int25 == 8);
    }

    @Test
    public void test04202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04202");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        int int17 = mutableDateTime16.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime16.property(dateTimeFieldType18);
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime25 = timeOfDay22.toDateTime((org.joda.time.ReadableInstant) instant24);
        org.joda.time.Chronology chronology26 = instant24.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.clockhourOfHalfday();
        long long29 = dateTimeField27.roundHalfFloor(0L);
        java.util.Locale locale30 = java.util.Locale.TRADITIONAL_CHINESE;
        int int31 = dateTimeField27.getMaximumShortTextLength(locale30);
        java.util.Locale locale32 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale33 = locale32.stripExtensions();
        java.util.Locale locale34 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale35 = locale34.stripExtensions();
        java.lang.String str36 = locale32.getDisplayName(locale34);
        java.lang.String str37 = locale30.getDisplayLanguage(locale32);
        java.util.Calendar calendar38 = mutableDateTime16.toCalendar(locale32);
        calendar38.roll(3, true);
        int int43 = calendar38.getLeastMaximum(2);
        int int45 = calendar38.getActualMinimum(5);
        int int47 = calendar38.getLeastMaximum((int) (byte) 1);
        java.time.Instant instant48 = calendar38.toInstant();
        java.lang.String str49 = calendar38.getCalendarType();
        // The following exception was thrown during execution in test generation
        try {
            int int51 = calendar38.getLeastMaximum(2054);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2054");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str36, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u4e2d\u6587" + "'", str37, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(calendar38);
        org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=604800000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=8,DAY_OF_YEAR=8,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 11 + "'", int43 == 11);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 292269054 + "'", int47 == 292269054);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "gregory" + "'", str49, "gregory");
    }

    @Test
    public void test04203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04203");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.withWeekyear(2);
        org.joda.time.DateMidnight.Property property7 = dateMidnight2.weekOfWeekyear();
        java.lang.String str8 = property7.getAsString();
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime14 = timeOfDay11.toDateTime((org.joda.time.ReadableInstant) instant13);
        org.joda.time.Chronology chronology15 = instant13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.clockhourOfHalfday();
        long long18 = dateTimeField16.roundHalfFloor(0L);
        java.util.Locale locale19 = java.util.Locale.TRADITIONAL_CHINESE;
        int int20 = dateTimeField16.getMaximumShortTextLength(locale19);
        int int21 = property7.getMaximumShortTextLength(locale19);
        org.joda.time.DateMidnight dateMidnight22 = property7.roundHalfEvenCopy();
        org.joda.time.DurationField durationField23 = property7.getDurationField();
        org.joda.time.TimeOfDay timeOfDay30 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant32 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime33 = timeOfDay30.toDateTime((org.joda.time.ReadableInstant) instant32);
        org.joda.time.Chronology chronology34 = instant32.getChronology();
        org.joda.time.TimeOfDay timeOfDay37 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant39 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime40 = timeOfDay37.toDateTime((org.joda.time.ReadableInstant) instant39);
        int[] intArray42 = chronology34.get((org.joda.time.ReadablePartial) timeOfDay37, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime(0L, chronology34);
        org.joda.time.DurationField durationField44 = chronology34.weeks();
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime((-86340000L), chronology34);
        org.joda.time.MutableDateTime mutableDateTime46 = org.joda.time.MutableDateTime.now(chronology34);
        java.util.Locale locale48 = java.util.Locale.forLanguageTag("\u897f\u5143");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket((long) 88, chronology34, locale48, (java.lang.Integer) 292278994, 290);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight52 = property7.setCopy("24 May 1943 06:00:10 GMT", locale48);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"24 May 1943 06:00:10 GMT\" for weekOfWeekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
    }

    @Test
    public void test04204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04204");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) ' ');
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean4 = localDate2.isSupported(dateTimeFieldType3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = localDate2.toDateMidnight(dateTimeZone5);
        org.joda.time.DateTime dateTime7 = localDate2.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property8 = localDate2.yearOfEra();
        org.joda.time.LocalDate.Property property9 = localDate2.weekyear();
        boolean boolean10 = localDate1.isAfter((org.joda.time.ReadablePartial) localDate2);
        int int11 = localDate1.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.LocalDate.Property property13 = localDate1.property(dateTimeFieldType12);
        org.joda.time.LocalDate localDate14 = property13.getLocalDate();
        org.joda.time.LocalDate localDate16 = localDate14.minusDays((-1));
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate19 = localDate14.withFieldAdded(durationFieldType17, 727);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone22 = instant21.getZone();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone22);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.DateTime dateTime26 = dateTime23.withDurationAdded(readableDuration24, (int) (byte) 0);
        org.joda.time.DateTime dateTime28 = dateTime23.minusSeconds((int) (short) 1);
        org.joda.time.DateTime.Property property29 = dateTime28.centuryOfEra();
        org.joda.time.DateTime dateTime30 = property29.withMinimumValue();
        org.joda.time.Instant instant32 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone33 = instant32.getZone();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone35);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight36.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight36.withWeekyear(2);
        org.joda.time.DateTimeZone dateTimeZone41 = dateMidnight36.getZone();
        long long43 = dateTimeZone33.getMillisKeepLocal(dateTimeZone41, 10L);
        org.joda.time.LocalTime localTime44 = org.joda.time.LocalTime.now(dateTimeZone41);
        boolean boolean45 = property29.equals((java.lang.Object) localTime44);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = property29.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate48 = localDate19.withField(dateTimeFieldType46, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 10L + "'", long43 == 10L);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
    }

    @Test
    public void test04205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04205");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(51, 36, 816, 54021, (int) (short) 10, 408, 53);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54021 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04206");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.weekyear();
        org.joda.time.LocalDate localDate3 = localDate0.withWeekyear((-1));
        org.joda.time.DateTime dateTime4 = localDate3.toDateTimeAtMidnight();
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone7 = instant6.getZone();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime11 = dateTime8.withDurationAdded(readableDuration9, (int) (byte) 0);
        org.joda.time.DateTime dateTime13 = dateTime8.minusSeconds((int) (short) 1);
        org.joda.time.DateTime.Property property14 = dateTime13.centuryOfEra();
        org.joda.time.DateTime dateTime16 = dateTime13.withMillis(18000001L);
        org.joda.time.DateTime dateTime17 = localDate3.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        int int18 = localDate3.getEra();
        org.joda.time.LocalDate.Property property19 = localDate3.yearOfCentury();
        org.joda.time.LocalDate localDate20 = property19.withMinimumValue();
        org.joda.time.LocalDate localDate21 = property19.roundCeilingCopy();
        org.joda.time.LocalDate localDate22 = property19.getLocalDate();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate22);
    }

    @Test
    public void test04207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04207");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTime((org.joda.time.ReadableInstant) instant6);
        org.joda.time.Chronology chronology8 = instant6.getChronology();
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime14 = timeOfDay11.toDateTime((org.joda.time.ReadableInstant) instant13);
        int[] intArray16 = chronology8.get((org.joda.time.ReadablePartial) timeOfDay11, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(0L, chronology8);
        mutableDateTime17.setYear(3);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone22 = instant21.getZone();
        mutableDateTime17.setZone(dateTimeZone22);
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime(0L, dateTimeZone22);
        java.util.TimeZone timeZone25 = dateTimeZone22.toTimeZone();
        org.joda.time.TimeOfDay timeOfDay30 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant32 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime33 = timeOfDay30.toDateTime((org.joda.time.ReadableInstant) instant32);
        org.joda.time.Chronology chronology34 = instant32.getChronology();
        org.joda.time.TimeOfDay timeOfDay37 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant39 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime40 = timeOfDay37.toDateTime((org.joda.time.ReadableInstant) instant39);
        int[] intArray42 = chronology34.get((org.joda.time.ReadablePartial) timeOfDay37, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime(0L, chronology34);
        mutableDateTime43.setYear(3);
        org.joda.time.Instant instant47 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone48 = instant47.getZone();
        mutableDateTime43.setZone(dateTimeZone48);
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime(0L, dateTimeZone48);
        java.util.TimeZone timeZone51 = dateTimeZone48.toTimeZone();
        boolean boolean52 = timeZone25.hasSameRules(timeZone51);
        org.joda.time.TimeOfDay timeOfDay55 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant57 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime58 = timeOfDay55.toDateTime((org.joda.time.ReadableInstant) instant57);
        org.joda.time.Chronology chronology59 = instant57.getChronology();
        org.joda.time.DateTimeField dateTimeField60 = chronology59.clockhourOfHalfday();
        long long62 = dateTimeField60.roundHalfFloor(0L);
        java.util.Locale locale63 = java.util.Locale.TRADITIONAL_CHINESE;
        int int64 = dateTimeField60.getMaximumShortTextLength(locale63);
        java.util.Locale locale65 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale66 = locale65.stripExtensions();
        java.util.Locale locale67 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale68 = locale67.stripExtensions();
        java.lang.String str69 = locale65.getDisplayName(locale67);
        java.lang.String str70 = locale63.getDisplayLanguage(locale65);
        java.util.Calendar calendar71 = java.util.Calendar.getInstance(timeZone51, locale65);
        java.lang.String str72 = timeZone51.getID();
        timeZone51.setID("23");
        java.lang.String str75 = timeZone51.getDisplayName();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(timeZone51);
        org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str69, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "\u4e2d\u6587" + "'", str70, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(calendar71);
// flaky:         org.junit.Assert.assertEquals(calendar71.toString(), "java.util.GregorianCalendar[time=1645455717861,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=23,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=1,SECOND=57,MILLISECOND=861,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "UTC" + "'", str72, "UTC");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "GMT+00:00" + "'", str75, "GMT+00:00");
    }

    @Test
    public void test04208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04208");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.Chronology chronology1 = localDateTime0.getChronology();
        int int2 = localDateTime0.size();
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.secondOfMinute();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime5 = property4.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
    }

    @Test
    public void test04209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04209");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        mutableDateTime16.setYear(3);
        org.joda.time.Instant instant20 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone21 = instant20.getZone();
        mutableDateTime16.setZone(dateTimeZone21);
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(dateTimeZone21);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.withWeekyear(366);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight25.minusMonths(9);
        int int28 = dateMidnight27.getMinuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHours(11);
        org.joda.time.LocalTime localTime31 = org.joda.time.LocalTime.now(dateTimeZone30);
        org.joda.time.MutableDateTime mutableDateTime32 = dateMidnight27.toMutableDateTime(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
    }

    @Test
    public void test04210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04210");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime5 = timeOfDay2.toDateTime((org.joda.time.ReadableInstant) instant4);
        org.joda.time.Chronology chronology6 = instant4.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.clockhourOfHalfday();
        long long9 = dateTimeField7.roundHalfFloor(0L);
        java.util.Locale locale10 = java.util.Locale.TRADITIONAL_CHINESE;
        int int11 = dateTimeField7.getMaximumShortTextLength(locale10);
        java.util.Locale locale12 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale13 = locale12.stripExtensions();
        java.util.Locale locale14 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale15 = locale14.stripExtensions();
        java.lang.String str16 = locale12.getDisplayName(locale14);
        java.lang.String str17 = locale10.getDisplayLanguage(locale12);
        java.util.Set<java.lang.String> strSet18 = locale12.getUnicodeLocaleAttributes();
        int int19 = strSet18.size();
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap23 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList24 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, strMap23);
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "\u4e2d\u6587\u53f0\u7063)", "zh", "hi!", "\u4e2d\u6587", "1970-01-01T00:00:00.000Z", "zh" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        java.lang.String str35 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.lang.String>) strList33);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap36 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList37 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, strMap36);
        java.util.Locale.LanguageRange[] languageRangeArray38 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList39 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList39, languageRangeArray38);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap41 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList42 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList39, strMap41);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", "\u4e2d\u6587\u53f0\u7063)", "zh", "hi!", "\u4e2d\u6587", "1970-01-01T00:00:00.000Z", "zh" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        java.lang.String str53 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList39, (java.util.Collection<java.lang.String>) strList51);
        java.lang.String[] strArray59 = new java.lang.String[] { "1969-12-31T00:01:00.000Z", "\u4e2d\u6587", "zh_TW", "", "1969-12-31T00:01:00.000Z" };
        java.util.ArrayList<java.lang.String> strList60 = new java.util.ArrayList<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList60, strArray59);
        java.util.Locale.FilteringMode filteringMode62 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList63 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList39, (java.util.Collection<java.lang.String>) strList60, filteringMode62);
        java.util.List<java.lang.String> strList64 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.lang.String>) strList63);
        boolean boolean65 = strSet18.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21);
        java.util.Locale.LanguageRange[] languageRangeArray66 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList67 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList67, languageRangeArray66);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap69 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList70 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList67, strMap69);
        java.lang.String[] strArray78 = new java.lang.String[] { "hi!", "\u4e2d\u6587\u53f0\u7063)", "zh", "hi!", "\u4e2d\u6587", "1970-01-01T00:00:00.000Z", "zh" };
        java.util.ArrayList<java.lang.String> strList79 = new java.util.ArrayList<java.lang.String>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList79, strArray78);
        java.lang.String str81 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList67, (java.util.Collection<java.lang.String>) strList79);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap82 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList83 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList67, strMap82);
        boolean boolean84 = strSet18.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList67);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap85 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList86 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList67, strMap85);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str16, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u4e2d\u6587" + "'", str17, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(languageRangeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(languageRangeList24);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(languageRangeList37);
        org.junit.Assert.assertNotNull(languageRangeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(languageRangeList42);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + filteringMode62 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode62.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList63);
        org.junit.Assert.assertNotNull(strList64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(languageRangeArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(languageRangeList70);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNull(str81);
        org.junit.Assert.assertNotNull(languageRangeList83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(languageRangeList86);
    }

    @Test
    public void test04211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04211");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime5 = timeOfDay2.toDateTime((org.joda.time.ReadableInstant) instant4);
        org.joda.time.Chronology chronology6 = instant4.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.clockhourOfHalfday();
        long long9 = dateTimeField7.roundHalfFloor(0L);
        java.util.Locale locale10 = java.util.Locale.TRADITIONAL_CHINESE;
        int int11 = dateTimeField7.getMaximumShortTextLength(locale10);
        java.util.Locale locale12 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale13 = locale12.stripExtensions();
        java.util.Locale locale14 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale15 = locale14.stripExtensions();
        java.lang.String str16 = locale12.getDisplayName(locale14);
        java.lang.String str17 = locale10.getDisplayLanguage(locale12);
        java.util.Set<java.lang.String> strSet18 = locale12.getUnicodeLocaleAttributes();
        int int19 = strSet18.size();
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap23 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList24 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, strMap23);
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "\u4e2d\u6587\u53f0\u7063)", "zh", "hi!", "\u4e2d\u6587", "1970-01-01T00:00:00.000Z", "zh" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        java.lang.String str35 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.lang.String>) strList33);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap36 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList37 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, strMap36);
        boolean boolean38 = strSet18.retainAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList37);
        java.util.Locale.LanguageRange[] languageRangeArray39 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList40 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList40, languageRangeArray39);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap42 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList43 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList40, strMap42);
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!", "\u4e2d\u6587\u53f0\u7063)", "zh", "hi!", "\u4e2d\u6587", "1970-01-01T00:00:00.000Z", "zh" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        java.lang.String str54 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList40, (java.util.Collection<java.lang.String>) strList52);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap55 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList56 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList40, strMap55);
        boolean boolean57 = strSet18.retainAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList40);
        java.util.Locale.LanguageRange[] languageRangeArray58 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList59 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList59, languageRangeArray58);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap61 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList62 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList59, strMap61);
        java.lang.String[] strArray70 = new java.lang.String[] { "hi!", "\u4e2d\u6587\u53f0\u7063)", "zh", "hi!", "\u4e2d\u6587", "1970-01-01T00:00:00.000Z", "zh" };
        java.util.ArrayList<java.lang.String> strList71 = new java.util.ArrayList<java.lang.String>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList71, strArray70);
        java.lang.String str73 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList59, (java.util.Collection<java.lang.String>) strList71);
        java.lang.String[] strArray79 = new java.lang.String[] { "1969-12-31T00:01:00.000Z", "\u4e2d\u6587", "zh_TW", "", "1969-12-31T00:01:00.000Z" };
        java.util.ArrayList<java.lang.String> strList80 = new java.util.ArrayList<java.lang.String>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList80, strArray79);
        java.util.Locale.FilteringMode filteringMode82 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList83 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList59, (java.util.Collection<java.lang.String>) strList80, filteringMode82);
        java.util.List<java.lang.String> strList84 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList40, (java.util.Collection<java.lang.String>) strList80);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream85 = languageRangeList40.parallelStream();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str16, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u4e2d\u6587" + "'", str17, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(languageRangeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(languageRangeList24);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(languageRangeList37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(languageRangeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(languageRangeList43);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(languageRangeList56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(languageRangeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(languageRangeList62);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + filteringMode82 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode82.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList83);
        org.junit.Assert.assertNotNull(strList84);
        org.junit.Assert.assertNotNull(languageRangeStream85);
    }

    @Test
    public void test04212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04212");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime22 = timeOfDay19.toDateTime((org.joda.time.ReadableInstant) instant21);
        org.joda.time.Chronology chronology23 = instant21.getChronology();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        int[] intArray31 = chronology23.get((org.joda.time.ReadablePartial) timeOfDay26, (long) (short) -1);
        mutableDateTime16.setChronology(chronology23);
        boolean boolean33 = mutableDateTime16.isEqualNow();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime16.secondOfDay();
        boolean boolean35 = mutableDateTime16.isAfterNow();
        mutableDateTime16.setMillisOfSecond((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        mutableDateTime16.add(readablePeriod38);
        mutableDateTime16.setMillis((long) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHours(11);
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime((java.lang.Object) mutableDateTime16, dateTimeZone43);
        mutableDateTime44.addMinutes((int) (short) -1);
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime44.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime49 = property47.set("1904-04-30");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"1904-04-30\" for weekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(property47);
    }

    @Test
    public void test04213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04213");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.Chronology chronology1 = localDateTime0.getChronology();
        org.joda.time.LocalDateTime.Property property2 = localDateTime0.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.weekyear();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.weekyear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusSeconds((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField8 = localDateTime0.getField(54015);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 54015");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
    }

    @Test
    public void test04214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04214");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime5 = timeOfDay2.toDateTime((org.joda.time.ReadableInstant) instant4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.DateTime dateTime8 = dateTime5.withPeriodAdded(readablePeriod6, (int) (short) 0);
        boolean boolean9 = dateTime5.isAfterNow();
        org.joda.time.DateTime dateTime11 = dateTime5.plus((long) 15);
        org.joda.time.DateTime.Property property12 = dateTime5.hourOfDay();
        org.joda.time.DateTime dateTime13 = property12.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test04215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04215");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 54020);
    }

    @Test
    public void test04216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04216");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime22 = timeOfDay19.toDateTime((org.joda.time.ReadableInstant) instant21);
        org.joda.time.Chronology chronology23 = instant21.getChronology();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        int[] intArray31 = chronology23.get((org.joda.time.ReadablePartial) timeOfDay26, (long) (short) -1);
        mutableDateTime16.setChronology(chronology23);
        boolean boolean33 = mutableDateTime16.isEqualNow();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime16.secondOfDay();
        boolean boolean35 = mutableDateTime16.isAfterNow();
        mutableDateTime16.setMillisOfSecond((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        mutableDateTime16.add(readablePeriod38);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone41);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight42.withDurationAdded((long) (short) 10, 1);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight45.plus((long) 31);
        boolean boolean48 = mutableDateTime16.isBefore((org.joda.time.ReadableInstant) dateMidnight45);
        int int49 = mutableDateTime16.getYear();
        org.joda.time.DateTime dateTime50 = mutableDateTime16.toDateTime();
        int int51 = dateTime50.getSecondOfDay();
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1970 + "'", int49 == 1970);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
    }

    @Test
    public void test04217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04217");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime10 = timeOfDay7.toDateTime((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Chronology chronology11 = instant9.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.clockhourOfHalfday();
        long long14 = dateTimeField12.roundHalfFloor(0L);
        java.util.Locale locale15 = java.util.Locale.TRADITIONAL_CHINESE;
        int int16 = dateTimeField12.getMaximumShortTextLength(locale15);
        java.lang.String str17 = locale15.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket((-1L), chronology4, locale15);
        java.util.Locale locale19 = dateTimeParserBucket18.getLocale();
        long long22 = dateTimeParserBucket18.computeMillis(true, "");
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.TimeOfDay timeOfDay27 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant29 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime30 = timeOfDay27.toDateTime((org.joda.time.ReadableInstant) instant29);
        org.joda.time.Chronology chronology31 = instant29.getChronology();
        org.joda.time.TimeOfDay timeOfDay34 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant36 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime37 = timeOfDay34.toDateTime((org.joda.time.ReadableInstant) instant36);
        int[] intArray39 = chronology31.get((org.joda.time.ReadablePartial) timeOfDay34, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime(0L, chronology31);
        org.joda.time.TimeOfDay timeOfDay43 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant45 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime46 = timeOfDay43.toDateTime((org.joda.time.ReadableInstant) instant45);
        org.joda.time.Chronology chronology47 = instant45.getChronology();
        org.joda.time.TimeOfDay timeOfDay50 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant52 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime53 = timeOfDay50.toDateTime((org.joda.time.ReadableInstant) instant52);
        int[] intArray55 = chronology47.get((org.joda.time.ReadablePartial) timeOfDay50, (long) (short) -1);
        mutableDateTime40.setChronology(chronology47);
        org.joda.time.DateTimeField dateTimeField57 = dateTimeFieldType23.getField(chronology47);
        java.util.Locale locale59 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale60 = locale59.stripExtensions();
        dateTimeParserBucket18.saveField(dateTimeFieldType23, "hi!", locale60);
        java.lang.String str62 = locale60.getLanguage();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = dateTimeFormatter2.withLocale(locale60);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter64 = dateTimeFormatter63.withOffsetParsed();
        org.joda.time.Chronology chronology65 = dateTimeFormatter64.getChronolgy();
        org.joda.time.Instant instant68 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone69 = instant68.getZone();
        org.joda.time.MutableDateTime mutableDateTime70 = new org.joda.time.MutableDateTime((long) 2, dateTimeZone69);
        org.joda.time.MutableDateTime.Property property71 = mutableDateTime70.weekOfWeekyear();
        org.joda.time.Instant instant73 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone74 = instant73.getZone();
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime(dateTimeZone74);
        org.joda.time.ReadableDuration readableDuration76 = null;
        org.joda.time.DateTime dateTime78 = dateTime75.withDurationAdded(readableDuration76, (int) (byte) 0);
        org.joda.time.DateTime dateTime80 = dateTime75.minusSeconds((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration81 = null;
        org.joda.time.DateTime dateTime82 = dateTime75.minus(readableDuration81);
        org.joda.time.DateTime dateTime84 = dateTime75.minusSeconds((int) (byte) 100);
        int int85 = mutableDateTime70.compareTo((org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.DateTimeZone dateTimeZone87 = null;
        org.joda.time.DateMidnight dateMidnight88 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone87);
        org.joda.time.DateMidnight dateMidnight90 = dateMidnight88.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight92 = dateMidnight88.withWeekyear(2);
        org.joda.time.DateTimeZone dateTimeZone93 = dateMidnight88.getZone();
        org.joda.time.DateTime dateTime94 = mutableDateTime70.toDateTime(dateTimeZone93);
        boolean boolean96 = dateTimeZone93.isStandardOffset((-689418082457L));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter97 = dateTimeFormatter64.withZone(dateTimeZone93);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str99 = dateTimeFormatter64.print((long) 604);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "zh" + "'", str17, "zh");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "zh" + "'", str62, "zh");
        org.junit.Assert.assertNotNull(dateTimeFormatter63);
        org.junit.Assert.assertNotNull(dateTimeFormatter64);
        org.junit.Assert.assertNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertNotNull(dateMidnight90);
        org.junit.Assert.assertNotNull(dateMidnight92);
        org.junit.Assert.assertNotNull(dateTimeZone93);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter97);
    }

    @Test
    public void test04218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04218");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = localDate0.toDateMidnight(dateTimeZone3);
        org.joda.time.DateTime dateTime5 = localDate0.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property6 = localDate0.yearOfEra();
        org.joda.time.LocalDate localDate7 = property6.withMinimumValue();
        org.joda.time.LocalDate localDate9 = property6.addWrapFieldToCopy(60);
        org.joda.time.LocalDate localDate11 = localDate9.plusWeeks((int) (short) 100);
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.DateTime dateTime15 = timeOfDay14.toDateTimeToday();
        org.joda.time.DateTime dateTime17 = dateTime15.plusWeeks((int) '4');
        org.joda.time.TimeOfDay timeOfDay18 = dateTime15.toTimeOfDay();
        org.joda.time.LocalTime localTime20 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime.Property property21 = localTime20.hourOfDay();
        org.joda.time.LocalTime localTime22 = property21.roundFloorCopy();
        org.joda.time.Chronology chronology23 = localTime22.getChronology();
        org.joda.time.Chronology chronology24 = localTime22.getChronology();
        org.joda.time.TimeOfDay timeOfDay25 = timeOfDay18.withChronologyRetainFields(chronology24);
        org.joda.time.TimeOfDay timeOfDay27 = timeOfDay18.plusHours(25);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean28 = localDate11.isEqual((org.joda.time.ReadablePartial) timeOfDay18);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertNotNull(timeOfDay27);
    }

    @Test
    public void test04219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04219");
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(865, 1, 5, 0, 27, 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime11 = localDateTime6.withTime(0, 53897, 738, 58);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53897 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04220");
        org.joda.time.TimeOfDay timeOfDay5 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime8 = timeOfDay5.toDateTime((org.joda.time.ReadableInstant) instant7);
        org.joda.time.Chronology chronology9 = timeOfDay5.getChronology();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(53977, 865, 31, chronology9);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 865 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
    }

    @Test
    public void test04221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04221");
        java.util.Date date0 = new java.util.Date();
        int int1 = date0.getTimezoneOffset();
        java.lang.Object obj2 = date0.clone();
// flaky:         org.junit.Assert.assertEquals(date0.toString(), "Mon Feb 21 15:01:58 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(obj2);
// flaky:         org.junit.Assert.assertEquals(obj2.toString(), "Mon Feb 21 15:01:58 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "Mon Feb 21 15:01:58 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "Mon Feb 21 15:01:58 GMT+00:00 2022");
    }

    @Test
    public void test04222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04222");
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean7 = interval3.abuts((org.joda.time.ReadableInterval) interval6);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Interval interval9 = interval6.withDurationBeforeEnd(readableDuration8);
        boolean boolean10 = interval9.isBeforeNow();
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone13 = instant12.getZone();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime17 = dateTime14.withDurationAdded(readableDuration15, (int) (byte) 0);
        org.joda.time.DateTime dateTime18 = dateTime17.toDateTime();
        org.joda.time.DateTime dateTime20 = dateTime18.minusDays(4);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime20, readablePeriod21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.Interval interval24 = interval22.withPeriodBeforeEnd(readablePeriod23);
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean31 = interval27.abuts((org.joda.time.ReadableInterval) interval30);
        org.joda.time.LocalTime localTime33 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime.Property property34 = localTime33.hourOfDay();
        org.joda.time.LocalTime localTime35 = property34.roundFloorCopy();
        org.joda.time.LocalTime localTime37 = property34.setCopy(0);
        org.joda.time.LocalTime localTime39 = property34.addWrapFieldToCopy(19);
        org.joda.time.Interval interval42 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval45 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean46 = interval42.abuts((org.joda.time.ReadableInterval) interval45);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone48);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight49.withWeekyear(2);
        boolean boolean52 = interval42.isBefore((org.joda.time.ReadableInstant) dateMidnight49);
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.Interval interval54 = interval42.withDurationAfterStart(readableDuration53);
        org.joda.time.Duration duration55 = interval42.toDuration();
        org.joda.time.Interval interval58 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval61 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean62 = interval58.abuts((org.joda.time.ReadableInterval) interval61);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateMidnight dateMidnight65 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone64);
        org.joda.time.DateMidnight dateMidnight67 = dateMidnight65.withWeekyear(2);
        boolean boolean68 = interval58.isBefore((org.joda.time.ReadableInstant) dateMidnight65);
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.Interval interval70 = interval58.withDurationAfterStart(readableDuration69);
        org.joda.time.Duration duration71 = interval58.toDuration();
        int int72 = duration55.compareTo((org.joda.time.ReadableDuration) duration71);
        org.joda.time.Period period73 = duration55.toPeriod();
        org.joda.time.LocalTime localTime74 = localTime39.minus((org.joda.time.ReadablePeriod) period73);
        org.joda.time.Interval interval75 = interval30.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period73);
        org.joda.time.Interval interval76 = interval24.withPeriodAfterStart((org.joda.time.ReadablePeriod) period73);
        boolean boolean77 = interval9.overlaps((org.joda.time.ReadableInterval) interval76);
        org.joda.time.TimeOfDay timeOfDay82 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant84 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime85 = timeOfDay82.toDateTime((org.joda.time.ReadableInstant) instant84);
        org.joda.time.Chronology chronology86 = instant84.getChronology();
        org.joda.time.DateMidnight dateMidnight87 = new org.joda.time.DateMidnight((java.lang.Object) (-11491200000L), chronology86);
        org.joda.time.DateTimeField dateTimeField88 = chronology86.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField89 = chronology86.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay90 = new org.joda.time.TimeOfDay(0L, chronology86);
        org.joda.time.Chronology chronology91 = timeOfDay90.getChronology();
        org.joda.time.DurationField durationField92 = chronology91.months();
        org.joda.time.LocalTime localTime93 = new org.joda.time.LocalTime(chronology91);
        org.joda.time.Interval interval94 = interval9.withChronology(chronology91);
        org.joda.time.DateMidnight dateMidnight95 = new org.joda.time.DateMidnight((long) 37, chronology91);
        org.joda.time.DateMidnight.Property property96 = dateMidnight95.weekyear();
        org.joda.time.DurationField durationField97 = property96.getRangeDurationField();
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(localTime74);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(chronology91);
        org.junit.Assert.assertNotNull(durationField92);
        org.junit.Assert.assertNotNull(interval94);
        org.junit.Assert.assertNotNull(property96);
        org.junit.Assert.assertNull(durationField97);
    }

    @Test
    public void test04223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04223");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTime((org.joda.time.ReadableInstant) instant6);
        org.joda.time.Chronology chronology8 = instant6.getChronology();
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((java.lang.Object) (-11491200000L), chronology8);
        org.joda.time.TimeOfDay timeOfDay10 = org.joda.time.TimeOfDay.fromMillisOfDay((-2678399900L), chronology8);
        int int11 = timeOfDay10.getHourOfDay();
        org.joda.time.TimeOfDay.Property property12 = timeOfDay10.millisOfSecond();
        int int13 = property12.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test04224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04224");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("AD");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"AD\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04225");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = localDate0.toDateMidnight(dateTimeZone3);
        org.joda.time.DateTime dateTime5 = localDate0.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime6 = localDate0.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate8 = localDate0.minusWeeks((int) 'a');
        org.joda.time.LocalDate.Property property9 = localDate0.yearOfEra();
        org.joda.time.LocalDate localDate10 = property9.withMinimumValue();
        org.joda.time.LocalDate localDate12 = property9.addToCopy(1439);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
    }

    @Test
    public void test04226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04226");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        int int17 = mutableDateTime16.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime16.property(dateTimeFieldType18);
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime25 = timeOfDay22.toDateTime((org.joda.time.ReadableInstant) instant24);
        org.joda.time.Chronology chronology26 = instant24.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.clockhourOfHalfday();
        long long29 = dateTimeField27.roundHalfFloor(0L);
        java.util.Locale locale30 = java.util.Locale.TRADITIONAL_CHINESE;
        int int31 = dateTimeField27.getMaximumShortTextLength(locale30);
        java.util.Locale locale32 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale33 = locale32.stripExtensions();
        java.util.Locale locale34 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale35 = locale34.stripExtensions();
        java.lang.String str36 = locale32.getDisplayName(locale34);
        java.lang.String str37 = locale30.getDisplayLanguage(locale32);
        java.util.Calendar calendar38 = mutableDateTime16.toCalendar(locale32);
        int int40 = calendar38.getActualMinimum(2);
        int int42 = calendar38.getGreatestMinimum(0);
        org.joda.time.TimeOfDay timeOfDay46 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant48 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime49 = timeOfDay46.toDateTime((org.joda.time.ReadableInstant) instant48);
        org.joda.time.Chronology chronology50 = instant48.getChronology();
        org.joda.time.TimeOfDay timeOfDay53 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant55 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime56 = timeOfDay53.toDateTime((org.joda.time.ReadableInstant) instant55);
        int[] intArray58 = chronology50.get((org.joda.time.ReadablePartial) timeOfDay53, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime59 = new org.joda.time.MutableDateTime(0L, chronology50);
        int int60 = mutableDateTime59.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property62 = mutableDateTime59.property(dateTimeFieldType61);
        org.joda.time.TimeOfDay timeOfDay65 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant67 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime68 = timeOfDay65.toDateTime((org.joda.time.ReadableInstant) instant67);
        org.joda.time.Chronology chronology69 = instant67.getChronology();
        org.joda.time.DateTimeField dateTimeField70 = chronology69.clockhourOfHalfday();
        long long72 = dateTimeField70.roundHalfFloor(0L);
        java.util.Locale locale73 = java.util.Locale.TRADITIONAL_CHINESE;
        int int74 = dateTimeField70.getMaximumShortTextLength(locale73);
        java.util.Locale locale75 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale76 = locale75.stripExtensions();
        java.util.Locale locale77 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale78 = locale77.stripExtensions();
        java.lang.String str79 = locale75.getDisplayName(locale77);
        java.lang.String str80 = locale73.getDisplayLanguage(locale75);
        java.util.Calendar calendar81 = mutableDateTime59.toCalendar(locale75);
        calendar81.roll(3, true);
        int int85 = calendar81.getFirstDayOfWeek();
        calendar81.set(5, 32772, 999, 36000000, 0);
        calendar81.setTimeInMillis(4460317562L);
        int int94 = calendar81.getMinimalDaysInFirstWeek();
        calendar81.setMinimalDaysInFirstWeek(13);
        calendar81.setMinimalDaysInFirstWeek(40);
        int int99 = calendar38.compareTo(calendar81);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str36, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u4e2d\u6587" + "'", str37, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(calendar38);
        org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str79, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "\u4e2d\u6587" + "'", str80, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(calendar81);
        org.junit.Assert.assertEquals(calendar81.toString(), "java.util.GregorianCalendar[time=4460317562,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=40,ERA=1,YEAR=1970,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=58,SECOND=37,MILLISECOND=562,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + (-1) + "'", int99 == (-1));
    }

    @Test
    public void test04227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04227");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = yearMonthDay0.plus(readablePeriod1);
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay2.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay4 = property3.withMinimumValue();
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.plusYears(10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType9 = yearMonthDay4.getFieldType(49);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 49");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(yearMonthDay7);
    }

    @Test
    public void test04228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04228");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder0.set(14, (-1));
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant10 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime11 = timeOfDay8.toDateTime((org.joda.time.ReadableInstant) instant10);
        org.joda.time.Chronology chronology12 = instant10.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.clockhourOfHalfday();
        long long15 = dateTimeField13.roundHalfFloor(0L);
        java.util.Locale locale16 = java.util.Locale.TRADITIONAL_CHINESE;
        int int17 = dateTimeField13.getMaximumShortTextLength(locale16);
        java.lang.String str18 = locale16.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket((-1L), chronology5, locale16);
        java.lang.Integer int20 = dateTimeParserBucket19.getPivotYear();
        long long21 = dateTimeParserBucket19.computeMillis();
        org.joda.time.Chronology chronology22 = dateTimeParserBucket19.getChronology();
        java.util.Locale locale23 = dateTimeParserBucket19.getLocale();
        java.util.Calendar.Builder builder24 = builder0.setLocale(locale23);
        java.util.Calendar.Builder builder28 = builder24.setWeekDate((int) 'u', 8, 59);
        java.util.Calendar.Builder builder33 = builder24.setTimeOfDay(366, 1962, 53956956, 54);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder36 = builder33.set(1948, 29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: field is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "zh" + "'", str18, "zh");
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test04229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04229");
        java.util.Date date3 = new java.util.Date(0, (int) '4', 0);
        int int4 = date3.getMinutes();
        org.joda.time.YearMonthDay yearMonthDay5 = org.joda.time.YearMonthDay.fromDateFields(date3);
        org.joda.time.DateTime dateTime6 = yearMonthDay5.toDateTimeAtMidnight();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay5.withPeriodAdded(readablePeriod7, (int) '#');
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.minusDays(35);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight14 = yearMonthDay9.toDateMidnight(dateTimeZone12);
        org.joda.time.YearMonthDay.Property property15 = yearMonthDay9.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay16 = property15.getYearMonthDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay18 = property15.setCopy(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Sat Apr 30 00:00:00 GMT+00:00 1904");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(yearMonthDay16);
    }

    @Test
    public void test04230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04230");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.Chronology chronology1 = localDateTime0.getChronology();
        org.joda.time.LocalDateTime.Property property2 = localDateTime0.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withYearOfEra((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusSeconds((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime0.plusMonths(4);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.year();
        org.joda.time.TimeOfDay timeOfDay12 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant14 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime15 = timeOfDay12.toDateTime((org.joda.time.ReadableInstant) instant14);
        org.joda.time.Chronology chronology16 = instant14.getChronology();
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime22 = timeOfDay19.toDateTime((org.joda.time.ReadableInstant) instant21);
        int[] intArray24 = chronology16.get((org.joda.time.ReadablePartial) timeOfDay19, (long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay26 = timeOfDay19.withHourOfDay(0);
        org.joda.time.TimeOfDay timeOfDay28 = timeOfDay26.plusHours(865);
        java.lang.String str29 = timeOfDay26.toString();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean30 = localDateTime8.isEqual((org.joda.time.ReadablePartial) timeOfDay26);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(timeOfDay28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "T00:01:00.000" + "'", str29, "T00:01:00.000");
    }

    @Test
    public void test04231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04231");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.withSecondOfMinute((int) (byte) 1);
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay7 = property5.addWrapFieldToCopy(1);
        int int8 = property5.getMinimumValueOverall();
        org.joda.time.TimeOfDay timeOfDay9 = property5.getTimeOfDay();
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime localTime13 = localTime11.minusMinutes((int) (short) 1);
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.seconds();
        boolean boolean15 = localTime11.isSupported(durationFieldType14);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay9.withFieldAdded(durationFieldType14, 54);
        java.lang.String str18 = durationFieldType14.getName();
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "seconds" + "'", str18, "seconds");
    }

    @Test
    public void test04232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04232");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTime((org.joda.time.ReadableInstant) instant6);
        org.joda.time.Chronology chronology8 = instant6.getChronology();
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime14 = timeOfDay11.toDateTime((org.joda.time.ReadableInstant) instant13);
        int[] intArray16 = chronology8.get((org.joda.time.ReadablePartial) timeOfDay11, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(0L, chronology8);
        mutableDateTime17.setYear(3);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone22 = instant21.getZone();
        mutableDateTime17.setZone(dateTimeZone22);
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime(0L, dateTimeZone22);
        java.util.TimeZone timeZone25 = dateTimeZone22.toTimeZone();
        org.joda.time.TimeOfDay timeOfDay30 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant32 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime33 = timeOfDay30.toDateTime((org.joda.time.ReadableInstant) instant32);
        org.joda.time.Chronology chronology34 = instant32.getChronology();
        org.joda.time.TimeOfDay timeOfDay37 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant39 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime40 = timeOfDay37.toDateTime((org.joda.time.ReadableInstant) instant39);
        int[] intArray42 = chronology34.get((org.joda.time.ReadablePartial) timeOfDay37, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime(0L, chronology34);
        mutableDateTime43.setYear(3);
        org.joda.time.Instant instant47 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone48 = instant47.getZone();
        mutableDateTime43.setZone(dateTimeZone48);
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime(0L, dateTimeZone48);
        java.util.TimeZone timeZone51 = dateTimeZone48.toTimeZone();
        boolean boolean52 = timeZone25.hasSameRules(timeZone51);
        timeZone51.setRawOffset((int) 'a');
        timeZone51.setID("\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)");
        boolean boolean57 = timeZone51.observesDaylightTime();
        timeZone51.setID("secondOfMinute");
        java.lang.String str60 = timeZone51.getDisplayName();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(timeZone51);
        org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "GMT+00:00" + "'", str60, "GMT+00:00");
    }

    @Test
    public void test04233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04233");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale locale2 = builder1.build();
        java.util.Locale locale3 = builder1.build();
        java.util.Locale.Builder builder5 = builder1.addUnicodeLocaleAttribute("Thursday");
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test04234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04234");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.parse("DateTimeField[weekOfWeekyear]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"DateTimeField[weekOfWeekyear]\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04235");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(0, 30, 727, 828, 960, 53965423);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 828 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04236");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.weekyear();
        org.joda.time.LocalDate localDate3 = localDate0.withWeekyear((-1));
        org.joda.time.DateTime dateTime4 = localDate3.toDateTimeAtMidnight();
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone7 = instant6.getZone();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(dateTimeZone7);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime11 = dateTime8.withDurationAdded(readableDuration9, (int) (byte) 0);
        org.joda.time.DateTime dateTime13 = dateTime8.minusSeconds((int) (short) 1);
        org.joda.time.DateTime.Property property14 = dateTime13.centuryOfEra();
        org.joda.time.DateTime dateTime16 = dateTime13.withMillis(18000001L);
        org.joda.time.DateTime dateTime17 = localDate3.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        int int18 = dateTime17.getMonthOfYear();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
    }

    @Test
    public void test04237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04237");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval5 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean6 = interval2.abuts((org.joda.time.ReadableInterval) interval5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.withWeekyear(2);
        boolean boolean12 = interval2.isBefore((org.joda.time.ReadableInstant) dateMidnight9);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Interval interval14 = interval2.withDurationAfterStart(readableDuration13);
        org.joda.time.Duration duration15 = interval2.toDuration();
        org.joda.time.Period period16 = duration15.toPeriod();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType18 = period16.getFieldType(59000);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 59000");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period16);
    }

    @Test
    public void test04238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04238");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder0.set(14, (-1));
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant10 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime11 = timeOfDay8.toDateTime((org.joda.time.ReadableInstant) instant10);
        org.joda.time.Chronology chronology12 = instant10.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.clockhourOfHalfday();
        long long15 = dateTimeField13.roundHalfFloor(0L);
        java.util.Locale locale16 = java.util.Locale.TRADITIONAL_CHINESE;
        int int17 = dateTimeField13.getMaximumShortTextLength(locale16);
        java.lang.String str18 = locale16.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket((-1L), chronology5, locale16);
        java.lang.Integer int20 = dateTimeParserBucket19.getPivotYear();
        long long21 = dateTimeParserBucket19.computeMillis();
        org.joda.time.Chronology chronology22 = dateTimeParserBucket19.getChronology();
        java.util.Locale locale23 = dateTimeParserBucket19.getLocale();
        java.util.Calendar.Builder builder24 = builder0.setLocale(locale23);
        org.joda.time.Instant instant25 = new org.joda.time.Instant();
        org.joda.time.Instant instant27 = instant25.withMillis((long) (byte) 100);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Instant instant29 = instant27.plus(readableDuration28);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Instant instant31 = instant27.minus(readableDuration30);
        boolean boolean32 = locale23.equals((java.lang.Object) instant31);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "zh" + "'", str18, "zh");
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test04239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04239");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        org.joda.time.DurationField durationField17 = chronology7.weeks();
        long long20 = durationField17.add((long) (byte) 10, (long) 'a');
        // The following exception was thrown during execution in test generation
        try {
            long long23 = durationField17.subtract((long) 2020, 20999055490089L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: -20999055490089 * 604800000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 58665600010L + "'", long20 == 58665600010L);
    }

    @Test
    public void test04240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04240");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.withDurationAdded(readableDuration4, (int) (byte) 0);
        org.joda.time.DateTime dateTime8 = dateTime3.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime10 = dateTime8.plusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime12 = dateTime10.plusDays(2);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMillis((int) (short) 0);
        org.joda.time.DateTime dateTime16 = dateTime14.withWeekyear(35);
        org.joda.time.DateTimeZone dateTimeZone17 = dateTime14.getZone();
        org.joda.time.DateTime dateTime19 = dateTime14.withCenturyOfEra(0);
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean26 = interval22.abuts((org.joda.time.ReadableInterval) interval25);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.withWeekyear(2);
        boolean boolean32 = interval22.isBefore((org.joda.time.ReadableInstant) dateMidnight29);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Interval interval34 = interval22.withDurationAfterStart(readableDuration33);
        org.joda.time.Duration duration35 = interval22.toDuration();
        long long36 = duration35.getMillis();
        org.joda.time.DateTime dateTime37 = dateTime14.minus((org.joda.time.ReadableDuration) duration35);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime39 = dateTime14.withEra(52);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(dateTime37);
    }

    @Test
    public void test04241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04241");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval5 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean6 = interval2.abuts((org.joda.time.ReadableInterval) interval5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Interval interval8 = interval5.withDurationBeforeEnd(readableDuration7);
        boolean boolean9 = interval8.isBeforeNow();
        org.joda.time.Interval interval10 = interval8.toInterval();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(interval10);
    }

    @Test
    public void test04242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04242");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTime((org.joda.time.ReadableInstant) instant6);
        org.joda.time.Chronology chronology8 = instant6.getChronology();
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime14 = timeOfDay11.toDateTime((org.joda.time.ReadableInstant) instant13);
        int[] intArray16 = chronology8.get((org.joda.time.ReadablePartial) timeOfDay11, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(0L, chronology8);
        org.joda.time.TimeOfDay timeOfDay20 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant22 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime23 = timeOfDay20.toDateTime((org.joda.time.ReadableInstant) instant22);
        org.joda.time.Chronology chronology24 = instant22.getChronology();
        org.joda.time.TimeOfDay timeOfDay27 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant29 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime30 = timeOfDay27.toDateTime((org.joda.time.ReadableInstant) instant29);
        int[] intArray32 = chronology24.get((org.joda.time.ReadablePartial) timeOfDay27, (long) (short) -1);
        mutableDateTime17.setChronology(chronology24);
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime(chronology24);
        org.joda.time.DateTimeField dateTimeField35 = chronology24.weekOfWeekyear();
        org.joda.time.DurationField durationField36 = chronology24.seconds();
        org.joda.time.DurationField durationField37 = chronology24.weeks();
        org.joda.time.TimeOfDay timeOfDay38 = new org.joda.time.TimeOfDay((long) 999, chronology24);
        org.joda.time.DurationField durationField39 = chronology24.days();
        org.joda.time.DateTimeField dateTimeField40 = chronology24.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
    }

    @Test
    public void test04243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04243");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval5 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean6 = interval2.abuts((org.joda.time.ReadableInterval) interval5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.withWeekyear(2);
        boolean boolean12 = interval2.isBefore((org.joda.time.ReadableInstant) dateMidnight9);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Interval interval14 = interval2.withDurationAfterStart(readableDuration13);
        org.joda.time.Duration duration15 = interval2.toDuration();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean22 = interval18.abuts((org.joda.time.ReadableInterval) interval21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone24);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight25.withWeekyear(2);
        boolean boolean28 = interval18.isBefore((org.joda.time.ReadableInstant) dateMidnight25);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Interval interval30 = interval18.withDurationAfterStart(readableDuration29);
        org.joda.time.Duration duration31 = interval18.toDuration();
        int int32 = duration15.compareTo((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Period period33 = duration15.toPeriod();
        java.lang.String str34 = period33.toString();
        org.joda.time.MutablePeriod mutablePeriod35 = period33.toMutablePeriod();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType37 = mutablePeriod35.getFieldType(1952);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1952");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "PT0S" + "'", str34, "PT0S");
        org.junit.Assert.assertNotNull(mutablePeriod35);
    }

    @Test
    public void test04244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04244");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears((int) '4');
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfEra();
        long long4 = property3.remainder();
        org.joda.time.LocalDateTime localDateTime5 = property3.roundHalfFloorCopy();
        int int6 = localDateTime5.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 4460519107L + "'", long4 == 4460519107L);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
    }

    @Test
    public void test04245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04245");
        org.joda.time.Instant instant2 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone3 = instant2.getZone();
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) 2, dateTimeZone3);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.weekOfWeekyear();
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone8 = instant7.getZone();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime12 = dateTime9.withDurationAdded(readableDuration10, (int) (byte) 0);
        org.joda.time.DateTime dateTime14 = dateTime9.minusSeconds((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime16 = dateTime9.minus(readableDuration15);
        org.joda.time.DateTime dateTime18 = dateTime9.minusSeconds((int) (byte) 100);
        int int19 = mutableDateTime4.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Chronology chronology20 = dateTime18.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.weekyearOfCentury();
        java.lang.String str23 = dateTimeField21.getAsShortText(23L);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "70" + "'", str23, "70");
    }

    @Test
    public void test04246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04246");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTime((org.joda.time.ReadableInstant) instant6);
        org.joda.time.Chronology chronology8 = instant6.getChronology();
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime14 = timeOfDay11.toDateTime((org.joda.time.ReadableInstant) instant13);
        int[] intArray16 = chronology8.get((org.joda.time.ReadablePartial) timeOfDay11, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(0L, chronology8);
        mutableDateTime17.setYear(3);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone22 = instant21.getZone();
        mutableDateTime17.setZone(dateTimeZone22);
        java.util.Locale locale25 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale26 = locale25.stripExtensions();
        java.util.Locale locale27 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale28 = locale27.stripExtensions();
        java.lang.String str29 = locale25.getDisplayName(locale27);
        java.lang.String str30 = dateTimeZone22.getName(100L, locale27);
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((-402192000000L), dateTimeZone22);
        java.util.TimeZone timeZone32 = dateTimeZone22.toTimeZone();
        boolean boolean33 = timeZone32.observesDaylightTime();
        java.util.Date date35 = new java.util.Date(1645455595707L);
        java.lang.String str36 = date35.toLocaleString();
        boolean boolean37 = timeZone32.inDaylightTime(date35);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str29, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
// flaky:         org.junit.Assert.assertEquals(date35.toString(), "Mon Feb 21 14:59:55 GMT+00:00 2022");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Feb 21, 2022 2:59:55 PM" + "'", str36, "Feb 21, 2022 2:59:55 PM");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test04247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04247");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.withDurationAdded((long) 2, 100);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight2.minusMonths((-1));
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight2.minus(readableDuration8);
        org.joda.time.DateMidnight.Property property10 = dateMidnight2.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight2.withYear(53891);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight2.minus((long) 53917543);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight16 = dateMidnight2.withYearOfCentury(448);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 448 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight14);
    }

    @Test
    public void test04248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04248");
        org.joda.time.format.DateTimePrinter dateTimePrinter2 = null;
        org.joda.time.format.DateTimeParser dateTimeParser3 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter2, dateTimeParser3);
        org.joda.time.Chronology chronology5 = dateTimeFormatter4.getChronology();
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant10 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime11 = timeOfDay8.toDateTime((org.joda.time.ReadableInstant) instant10);
        org.joda.time.Chronology chronology12 = instant10.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.clockhourOfHalfday();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter4.withChronology(chronology12);
        boolean boolean15 = dateTimeFormatter14.isOffsetParsed();
        org.joda.time.Chronology chronology16 = dateTimeFormatter14.getChronolgy();
        org.joda.time.Chronology chronology17 = dateTimeFormatter14.getChronolgy();
        org.joda.time.TimeOfDay timeOfDay21 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant23 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime24 = timeOfDay21.toDateTime((org.joda.time.ReadableInstant) instant23);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTime dateTime27 = dateTime24.withDurationAdded(readableDuration25, (int) (short) 1);
        int int28 = dateTime24.getDayOfYear();
        int int29 = dateTime24.getDayOfMonth();
        org.joda.time.TimeOfDay timeOfDay34 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant36 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime37 = timeOfDay34.toDateTime((org.joda.time.ReadableInstant) instant36);
        org.joda.time.Chronology chronology38 = instant36.getChronology();
        org.joda.time.TimeOfDay timeOfDay41 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant43 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime44 = timeOfDay41.toDateTime((org.joda.time.ReadableInstant) instant43);
        int[] intArray46 = chronology38.get((org.joda.time.ReadablePartial) timeOfDay41, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime(0L, chronology38);
        mutableDateTime47.setYear(3);
        org.joda.time.Instant instant51 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone52 = instant51.getZone();
        mutableDateTime47.setZone(dateTimeZone52);
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight(dateTimeZone52);
        org.joda.time.LocalTime localTime55 = new org.joda.time.LocalTime((long) '#', dateTimeZone52);
        org.joda.time.Chronology chronology56 = localTime55.getChronology();
        org.joda.time.DateTime dateTime57 = dateTime24.withChronology(chronology56);
        org.joda.time.TimeOfDay timeOfDay60 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant62 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime63 = timeOfDay60.toDateTime((org.joda.time.ReadableInstant) instant62);
        org.joda.time.Chronology chronology64 = instant62.getChronology();
        org.joda.time.DateTimeField dateTimeField65 = chronology64.clockhourOfHalfday();
        long long67 = dateTimeField65.roundHalfFloor(0L);
        java.util.Locale locale68 = java.util.Locale.TRADITIONAL_CHINESE;
        int int69 = dateTimeField65.getMaximumShortTextLength(locale68);
        java.util.Locale locale70 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale71 = locale70.stripExtensions();
        java.util.Locale locale72 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale73 = locale72.stripExtensions();
        java.lang.String str74 = locale70.getDisplayName(locale72);
        java.lang.String str75 = locale68.getDisplayLanguage(locale70);
        java.lang.String str76 = locale68.getDisplayScript();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket77 = new org.joda.time.format.DateTimeParserBucket((long) 0, chronology56, locale68);
        java.lang.Integer int78 = dateTimeParserBucket77.getPivotYear();
        org.joda.time.DateTimeZone dateTimeZone79 = dateTimeParserBucket77.getZone();
        int int81 = dateTimeZone79.getStandardOffset(0L);
        org.joda.time.Chronology chronology82 = chronology17.withZone(dateTimeZone79);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval83 = new org.joda.time.Interval(1645455692381L, (long) 53917543, dateTimeZone79);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 365 + "'", int28 == 365);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 31 + "'", int29 == 31);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str74, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "\u4e2d\u6587" + "'", str75, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNull(int78);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(chronology82);
    }

    @Test
    public void test04249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04249");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DurationField durationField2 = durationFieldType0.getField(chronology1);
        int int5 = durationField2.getDifference((long) 55, (long) (-2735));
        boolean boolean6 = durationField2.isPrecise();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test04250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04250");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.withEra(1);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.withCenturyOfEra(2);
        int int7 = dateMidnight4.getDayOfYear();
        int int8 = dateMidnight4.getEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight10 = dateMidnight4.withDayOfMonth(53891);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53891 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test04251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04251");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        int int17 = mutableDateTime16.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime16.property(dateTimeFieldType18);
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime25 = timeOfDay22.toDateTime((org.joda.time.ReadableInstant) instant24);
        org.joda.time.Chronology chronology26 = instant24.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.clockhourOfHalfday();
        long long29 = dateTimeField27.roundHalfFloor(0L);
        java.util.Locale locale30 = java.util.Locale.TRADITIONAL_CHINESE;
        int int31 = dateTimeField27.getMaximumShortTextLength(locale30);
        java.util.Locale locale32 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale33 = locale32.stripExtensions();
        java.util.Locale locale34 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale35 = locale34.stripExtensions();
        java.lang.String str36 = locale32.getDisplayName(locale34);
        java.lang.String str37 = locale30.getDisplayLanguage(locale32);
        java.util.Calendar calendar38 = mutableDateTime16.toCalendar(locale32);
        int int40 = calendar38.getActualMinimum(2);
        int int41 = calendar38.getWeekYear();
        // The following exception was thrown during execution in test generation
        try {
            int int43 = calendar38.getLeastMaximum(54006);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 54006");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str36, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u4e2d\u6587" + "'", str37, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(calendar38);
        org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1970 + "'", int41 == 1970);
    }

    @Test
    public void test04252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04252");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        int int17 = mutableDateTime16.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime16.property(dateTimeFieldType18);
        org.joda.time.MutableDateTime mutableDateTime20 = property19.roundHalfEven();
        mutableDateTime20.setTime((long) 19);
        mutableDateTime20.setWeekyear(100);
        mutableDateTime20.add((long) 70);
        int int27 = mutableDateTime20.getWeekyear();
        int int28 = mutableDateTime20.getYearOfCentury();
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.centuries();
        mutableDateTime20.add(durationFieldType29, 60);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 100 + "'", int27 == 100);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(durationFieldType29);
    }

    @Test
    public void test04253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04253");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime22 = timeOfDay19.toDateTime((org.joda.time.ReadableInstant) instant21);
        org.joda.time.Chronology chronology23 = instant21.getChronology();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        int[] intArray31 = chronology23.get((org.joda.time.ReadablePartial) timeOfDay26, (long) (short) -1);
        mutableDateTime16.setChronology(chronology23);
        mutableDateTime16.addMonths((int) (byte) 0);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime16.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay38 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant40 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime41 = timeOfDay38.toDateTime((org.joda.time.ReadableInstant) instant40);
        org.joda.time.Chronology chronology42 = instant40.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.clockhourOfHalfday();
        org.joda.time.DurationField durationField44 = chronology42.eras();
        org.joda.time.DateTimeField dateTimeField45 = chronology42.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone46 = chronology42.getZone();
        org.joda.time.DateTimeField dateTimeField47 = chronology42.clockhourOfDay();
        org.joda.time.TimeOfDay timeOfDay50 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant52 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime53 = timeOfDay50.toDateTime((org.joda.time.ReadableInstant) instant52);
        org.joda.time.Chronology chronology54 = instant52.getChronology();
        org.joda.time.DateTimeField dateTimeField55 = chronology54.clockhourOfHalfday();
        org.joda.time.DurationField durationField56 = chronology54.eras();
        org.joda.time.DateTimeField dateTimeField57 = chronology54.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone58 = chronology54.getZone();
        org.joda.time.Chronology chronology59 = chronology42.withZone(dateTimeZone58);
        int int61 = dateTimeZone58.getOffset(8035L);
        mutableDateTime16.setZone(dateTimeZone58);
        java.util.GregorianCalendar gregorianCalendar63 = mutableDateTime16.toGregorianCalendar();
        org.joda.time.MutableDateTime mutableDateTime64 = mutableDateTime16.toMutableDateTime();
        mutableDateTime64.setWeekOfWeekyear(16);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime64.setDayOfYear(2744);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2744 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(gregorianCalendar63);
        org.junit.Assert.assertNotNull(mutableDateTime64);
    }

    @Test
    public void test04254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04254");
        java.util.Set<java.lang.String> strSet0 = org.joda.time.DateTimeZone.getAvailableIDs();
        strSet0.clear();
        java.lang.Object[] objArray2 = strSet0.toArray();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.LocalDateTime.Property property5 = localDateTime3.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.withWeekyear(6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.weekyear();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.minusMillis(1969);
        boolean boolean11 = strSet0.equals((java.lang.Object) localDateTime7);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date12 = localDateTime7.toDate();
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -192 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test04255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04255");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTime((org.joda.time.ReadableInstant) instant6);
        org.joda.time.Chronology chronology8 = instant6.getChronology();
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime14 = timeOfDay11.toDateTime((org.joda.time.ReadableInstant) instant13);
        int[] intArray16 = chronology8.get((org.joda.time.ReadablePartial) timeOfDay11, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(0L, chronology8);
        org.joda.time.DurationField durationField18 = chronology8.weeks();
        org.joda.time.DateTimeField dateTimeField19 = chronology8.monthOfYear();
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone22 = instant21.getZone();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone22);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.DateTime dateTime26 = dateTime23.withDurationAdded(readableDuration24, (int) (byte) 0);
        org.joda.time.DateTime dateTime28 = dateTime23.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime30 = dateTime28.plusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime32 = dateTime30.plusDays(2);
        org.joda.time.TimeOfDay timeOfDay33 = dateTime32.toTimeOfDay();
        long long35 = chronology8.set((org.joda.time.ReadablePartial) timeOfDay33, 0L);
        org.joda.time.DateTimeField dateTimeField36 = chronology8.minuteOfDay();
        org.joda.time.DurationField durationField37 = chronology8.millis();
        org.joda.time.DurationField durationField38 = chronology8.days();
        org.joda.time.LocalTime localTime39 = org.joda.time.LocalTime.fromMillisOfDay((long) 54006, chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.centuryOfEra();
        org.joda.time.DurationFieldType durationFieldType41 = dateTimeFieldType40.getRangeDurationType();
        boolean boolean42 = localTime39.isSupported(durationFieldType41);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(timeOfDay33);
// flaky:         org.junit.Assert.assertTrue("'" + long35 + "' != '" + 54718863L + "'", long35 == 54718863L);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test04256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04256");
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        long long10 = dateTimeZone8.nextTransition(1L);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) (short) 10, dateTimeZone8);
        java.lang.String str12 = dateTimeZone8.getID();
        int int14 = dateTimeZone8.getStandardOffset((-59955465600000L));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(0, 58, 910, 2001, 46, 2, 14400, dateTimeZone8);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2001 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "UTC" + "'", str12, "UTC");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test04257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04257");
        org.joda.time.Instant instant2 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone3 = instant2.getZone();
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) 2, dateTimeZone3);
        java.util.TimeZone timeZone5 = dateTimeZone3.toTimeZone();
        java.lang.Object obj6 = timeZone5.clone();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
    }

    @Test
    public void test04258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04258");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.withWeekyear(2);
        org.joda.time.DateMidnight.Property property7 = dateMidnight2.weekOfWeekyear();
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime14 = timeOfDay11.toDateTime((org.joda.time.ReadableInstant) instant13);
        org.joda.time.Chronology chronology15 = instant13.getChronology();
        org.joda.time.TimeOfDay timeOfDay18 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant20 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime21 = timeOfDay18.toDateTime((org.joda.time.ReadableInstant) instant20);
        int[] intArray23 = chronology15.get((org.joda.time.ReadablePartial) timeOfDay18, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(0L, chronology15);
        org.joda.time.DurationField durationField25 = chronology15.weeks();
        org.joda.time.DateTimeField dateTimeField26 = chronology15.dayOfYear();
        org.joda.time.DateTimeField dateTimeField27 = chronology15.weekOfWeekyear();
        org.joda.time.DateTime dateTime28 = dateMidnight2.toDateTime(chronology15);
        org.joda.time.DateMidnight.Property property29 = dateMidnight2.monthOfYear();
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight2.minus(345600021L);
        org.joda.time.Interval interval32 = dateMidnight31.toInterval();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(interval32);
    }

    @Test
    public void test04259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04259");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.Chronology chronology1 = localDateTime0.getChronology();
        int int2 = localDateTime0.size();
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.weekyear();
        org.joda.time.LocalDateTime localDateTime4 = property3.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withYearOfEra((int) (byte) 1);
        org.joda.time.Interval interval9 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean13 = interval9.abuts((org.joda.time.ReadableInterval) interval12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.withWeekyear(2);
        boolean boolean19 = interval9.isBefore((org.joda.time.ReadableInstant) dateMidnight16);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Interval interval21 = interval9.withDurationAfterStart(readableDuration20);
        org.joda.time.Duration duration22 = interval9.toDuration();
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval28 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean29 = interval25.abuts((org.joda.time.ReadableInterval) interval28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.withWeekyear(2);
        boolean boolean35 = interval25.isBefore((org.joda.time.ReadableInstant) dateMidnight32);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Interval interval37 = interval25.withDurationAfterStart(readableDuration36);
        org.joda.time.Duration duration38 = interval25.toDuration();
        int int39 = duration22.compareTo((org.joda.time.ReadableDuration) duration38);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime4.minus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime4.minusDays(365);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime4.withYearOfCentury(29);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.minusWeeks(32772);
        int int47 = localDateTime44.getMonthOfYear();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
    }

    @Test
    public void test04260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04260");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval5 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean6 = interval2.abuts((org.joda.time.ReadableInterval) interval5);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.withWeekyear(2);
        boolean boolean12 = interval2.isBefore((org.joda.time.ReadableInstant) dateMidnight9);
        boolean boolean13 = interval2.isBeforeNow();
        org.joda.time.Instant instant15 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone16 = instant15.getZone();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.DateTime dateTime20 = dateTime17.withDurationAdded(readableDuration18, (int) (byte) 0);
        org.joda.time.DateTime dateTime21 = dateTime20.toDateTime();
        org.joda.time.DateTime dateTime23 = dateTime21.minusDays(4);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.Interval interval25 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime23, readablePeriod24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.Interval interval27 = interval25.withPeriodBeforeEnd(readablePeriod26);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Interval interval29 = interval27.withDurationBeforeEnd(readableDuration28);
        org.joda.time.Interval interval32 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval35 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean36 = interval32.abuts((org.joda.time.ReadableInterval) interval35);
        org.joda.time.Interval interval38 = interval32.withEndMillis((long) 1904);
        boolean boolean39 = interval29.abuts((org.joda.time.ReadableInterval) interval38);
        org.joda.time.Interval interval42 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Period period43 = interval42.toPeriod();
        org.joda.time.Interval interval44 = interval29.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period43);
        org.joda.time.Interval interval45 = interval2.withPeriodAfterStart((org.joda.time.ReadablePeriod) period43);
        boolean boolean47 = interval2.contains((long) 18);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test04261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04261");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTime((org.joda.time.ReadableInstant) instant6);
        org.joda.time.Chronology chronology8 = instant6.getChronology();
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime14 = timeOfDay11.toDateTime((org.joda.time.ReadableInstant) instant13);
        int[] intArray16 = chronology8.get((org.joda.time.ReadablePartial) timeOfDay11, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(0L, chronology8);
        mutableDateTime17.setYear(3);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone22 = instant21.getZone();
        mutableDateTime17.setZone(dateTimeZone22);
        java.util.Locale locale25 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale26 = locale25.stripExtensions();
        java.util.Locale locale27 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale28 = locale27.stripExtensions();
        java.lang.String str29 = locale25.getDisplayName(locale27);
        java.lang.String str30 = dateTimeZone22.getName(100L, locale27);
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((-402192000000L), dateTimeZone22);
        org.joda.time.DateMidnight.Property property32 = dateMidnight31.dayOfWeek();
        int int33 = dateMidnight31.getMinuteOfDay();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str29, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test04262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04262");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(1969, 54092, 60000, 512, 865);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 512 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04263");
        java.lang.String[] strArray1 = java.util.TimeZone.getAvailableIDs(35);
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test04264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04264");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.Chronology chronology1 = localDateTime0.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.plusDays(5);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval9 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean10 = interval6.abuts((org.joda.time.ReadableInterval) interval9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.withWeekyear(2);
        boolean boolean16 = interval6.isBefore((org.joda.time.ReadableInstant) dateMidnight13);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Interval interval18 = interval6.withDurationAfterStart(readableDuration17);
        org.joda.time.Duration duration19 = interval6.toDuration();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean26 = interval22.abuts((org.joda.time.ReadableInterval) interval25);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.withWeekyear(2);
        boolean boolean32 = interval22.isBefore((org.joda.time.ReadableInstant) dateMidnight29);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Interval interval34 = interval22.withDurationAfterStart(readableDuration33);
        org.joda.time.Duration duration35 = interval22.toDuration();
        int int36 = duration19.compareTo((org.joda.time.ReadableDuration) duration35);
        org.joda.time.Period period37 = duration19.toPeriod();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime0.minus((org.joda.time.ReadablePeriod) period37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.plusYears(865);
        int int41 = localDateTime40.getMinuteOfHour();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
    }

    @Test
    public void test04265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04265");
        // The following exception was thrown during execution in test generation
        try {
            long long1 = java.util.Date.parse("\u4e09\u6708");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04266");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime5 = timeOfDay2.toDateTime((org.joda.time.ReadableInstant) instant4);
        org.joda.time.Chronology chronology6 = instant4.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.clockhourOfHalfday();
        org.joda.time.DurationField durationField8 = chronology6.eras();
        org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.now(chronology6);
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime(chronology6);
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(chronology6);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.withYear(448);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(dateMidnight13);
    }

    @Test
    public void test04267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04267");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTime((org.joda.time.ReadableInstant) instant6);
        org.joda.time.Chronology chronology8 = instant6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.clockhourOfHalfday();
        long long11 = dateTimeField9.roundHalfFloor(0L);
        java.util.Locale locale12 = java.util.Locale.TRADITIONAL_CHINESE;
        int int13 = dateTimeField9.getMaximumShortTextLength(locale12);
        java.lang.String str14 = locale12.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((-1L), chronology1, locale12);
        java.lang.Integer int16 = dateTimeParserBucket15.getPivotYear();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight19.withWeekyear(2);
        org.joda.time.DateMidnight.Property property24 = dateMidnight19.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight27.withDurationAdded((long) 2, 100);
        int int31 = dateMidnight19.compareTo((org.joda.time.ReadableInstant) dateMidnight27);
        int int32 = dateMidnight19.getYearOfCentury();
        org.joda.time.DateMidnight.Property property33 = dateMidnight19.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight19.plus(readablePeriod34);
        org.joda.time.DateMidnight.Property property36 = dateMidnight35.yearOfEra();
        boolean boolean37 = dateTimeParserBucket15.restoreState((java.lang.Object) dateMidnight35);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = null;
        org.joda.time.Instant instant41 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone42 = instant41.getZone();
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.DateTime dateTime46 = dateTime43.withDurationAdded(readableDuration44, (int) (byte) 0);
        org.joda.time.DateTime dateTime48 = dateTime43.minusSeconds((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.DateTime dateTime50 = dateTime43.minus(readableDuration49);
        org.joda.time.TimeOfDay timeOfDay55 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant57 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime58 = timeOfDay55.toDateTime((org.joda.time.ReadableInstant) instant57);
        org.joda.time.Chronology chronology59 = instant57.getChronology();
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight((java.lang.Object) (-11491200000L), chronology59);
        org.joda.time.TimeOfDay timeOfDay61 = org.joda.time.TimeOfDay.fromMillisOfDay((-2678399900L), chronology59);
        org.joda.time.DateTime dateTime62 = dateTime43.toDateTime(chronology59);
        org.joda.time.DateTimeField dateTimeField63 = chronology59.halfdayOfDay();
        org.joda.time.LocalTime localTime65 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime localTime67 = localTime65.minusMinutes((int) (short) 1);
        org.joda.time.LocalTime localTime69 = localTime65.plusSeconds((-292275054));
        java.util.TimeZone timeZone70 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.DateMidnight dateMidnight73 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone72);
        org.joda.time.DateMidnight dateMidnight76 = dateMidnight73.withDurationAdded((long) 2, 100);
        int int77 = dateMidnight76.getDayOfMonth();
        org.joda.time.DateMidnight.Property property78 = dateMidnight76.era();
        org.joda.time.TimeOfDay timeOfDay81 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant83 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime84 = timeOfDay81.toDateTime((org.joda.time.ReadableInstant) instant83);
        org.joda.time.Chronology chronology85 = instant83.getChronology();
        org.joda.time.DateTimeField dateTimeField86 = chronology85.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField87 = chronology85.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField88 = chronology85.hourOfDay();
        java.util.Locale locale91 = new java.util.Locale("zh");
        java.lang.String str92 = dateTimeField88.getAsShortText((-2678399965L), locale91);
        java.lang.String str93 = property78.getAsShortText(locale91);
        java.util.Calendar calendar94 = java.util.Calendar.getInstance(timeZone70, locale91);
        java.lang.String str95 = dateTimeField63.getAsShortText((org.joda.time.ReadablePartial) localTime69, locale91);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeParserBucket15.saveField(dateTimeFieldType38, "30-apr-1904 0.00.00", locale91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "zh" + "'", str14, "zh");
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 70 + "'", int32 == 70);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(timeOfDay61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(localTime65);
        org.junit.Assert.assertNotNull(localTime67);
        org.junit.Assert.assertNotNull(localTime69);
        org.junit.Assert.assertNotNull(timeZone70);
// flaky:         org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateMidnight76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertEquals(locale91.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "0" + "'", str92, "0");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "\u516c\u5143" + "'", str93, "\u516c\u5143");
        org.junit.Assert.assertNotNull(calendar94);
// flaky:         org.junit.Assert.assertEquals(calendar94.toString(), "java.util.GregorianCalendar[time=1645455720212,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=1969-12-31T23:59:59.999Z,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=0,MILLISECOND=212,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "\u4e0a\u5348" + "'", str95, "\u4e0a\u5348");
    }

    @Test
    public void test04268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04268");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale.Category category2 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale3 = java.util.Locale.getDefault(category2);
        java.lang.String str6 = nameProvider0.getShortName(locale3, "2022", "hi!");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight11.withWeekyear(2);
        org.joda.time.DateTimeZone dateTimeZone16 = dateMidnight11.getZone();
        int int18 = dateTimeZone16.getStandardOffset(0L);
        java.util.Locale locale20 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale21 = java.util.Locale.CHINA;
        java.lang.String str22 = locale20.getDisplayScript(locale21);
        java.lang.String str23 = locale21.toLanguageTag();
        java.lang.String str24 = dateTimeZone16.getShortName((long) (byte) 10, locale21);
        java.lang.String str25 = locale21.getDisplayVariant();
        java.lang.String str27 = locale21.getExtension('x');
        java.lang.String str30 = nameProvider0.getName(locale21, "", "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertTrue("'" + category2 + "' != '" + java.util.Locale.Category.FORMAT + "'", category2.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "hourofday_TUE APR 30 00:00:00 UTC 1912");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "zh-CN" + "'", str23, "zh-CN");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00" + "'", str24, "+00:00");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNull(str30);
    }

    @Test
    public void test04269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04269");
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.TimeOfDay timeOfDay12 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant14 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime15 = timeOfDay12.toDateTime((org.joda.time.ReadableInstant) instant14);
        org.joda.time.Chronology chronology16 = instant14.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.clockhourOfHalfday();
        long long19 = dateTimeField17.roundHalfFloor(0L);
        java.util.Locale locale20 = java.util.Locale.TRADITIONAL_CHINESE;
        int int21 = dateTimeField17.getMaximumShortTextLength(locale20);
        java.lang.String str22 = locale20.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket((-1L), chronology9, locale20);
        java.lang.Integer int24 = dateTimeParserBucket23.getPivotYear();
        long long25 = dateTimeParserBucket23.computeMillis();
        org.joda.time.Chronology chronology26 = dateTimeParserBucket23.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.weeks();
        org.joda.time.TimeOfDay timeOfDay28 = new org.joda.time.TimeOfDay((-259200000L), chronology26);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(54047, 10, 54576831, 28, 23, 2054, 678, chronology26);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 28 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "zh" + "'", str22, "zh");
        org.junit.Assert.assertNull(int24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
    }

    @Test
    public void test04270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04270");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.withDurationAdded((long) 2, 100);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.minusWeeks((int) (short) 100);
        org.joda.time.DateMidnight.Property property8 = dateMidnight7.weekyear();
        int int9 = property8.getMinimumValue();
        org.joda.time.DateTimeField dateTimeField10 = property8.getField();
        org.joda.time.DateMidnight dateMidnight12 = property8.setCopy((-292275054));
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.TimeOfDay timeOfDay17 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime20 = timeOfDay17.toDateTime((org.joda.time.ReadableInstant) instant19);
        org.joda.time.Chronology chronology21 = instant19.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.clockhourOfHalfday();
        long long24 = dateTimeField22.roundHalfFloor(0L);
        java.util.Locale locale25 = java.util.Locale.TRADITIONAL_CHINESE;
        int int26 = dateTimeField22.getMaximumShortTextLength(locale25);
        java.lang.String str27 = locale25.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((-1L), chronology14, locale25);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.dayOfYear();
        dateTimeParserBucket28.saveField(dateTimeFieldType29, (-292275054));
        boolean boolean32 = property8.equals((java.lang.Object) (-292275054));
        org.joda.time.DateMidnight dateMidnight33 = property8.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight35 = property8.addToCopy(2922789);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight37 = property8.setCopy("");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for weekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-292275054) + "'", int9 == (-292275054));
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "zh" + "'", str27, "zh");
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(dateMidnight35);
    }

    @Test
    public void test04271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04271");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime5 = timeOfDay2.toDateTime((org.joda.time.ReadableInstant) instant4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.DateTime dateTime8 = dateTime5.withPeriodAdded(readablePeriod6, (int) (short) 0);
        boolean boolean9 = dateTime5.isAfterNow();
        org.joda.time.DateTime dateTime11 = dateTime5.plus((long) 15);
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay.Property property15 = timeOfDay14.minuteOfHour();
        java.lang.String str16 = property15.getAsShortText();
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime22 = timeOfDay19.toDateTime((org.joda.time.ReadableInstant) instant21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.DateTime dateTime25 = dateTime22.withPeriodAdded(readablePeriod23, (int) (short) 0);
        int int26 = property15.compareTo((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime27 = dateTime22.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property28 = dateTime27.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay31 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant33 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime34 = timeOfDay31.toDateTime((org.joda.time.ReadableInstant) instant33);
        org.joda.time.Chronology chronology35 = instant33.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.clockhourOfHalfday();
        long long38 = dateTimeField36.roundHalfFloor(0L);
        java.util.Locale locale39 = java.util.Locale.TRADITIONAL_CHINESE;
        int int40 = dateTimeField36.getMaximumShortTextLength(locale39);
        java.lang.String str41 = locale39.getLanguage();
        java.lang.String str42 = locale39.getLanguage();
        java.util.Calendar calendar43 = dateTime27.toCalendar(locale39);
        java.util.Calendar calendar44 = dateTime11.toCalendar(locale39);
        org.joda.time.TimeOfDay timeOfDay49 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant51 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime52 = timeOfDay49.toDateTime((org.joda.time.ReadableInstant) instant51);
        org.joda.time.Chronology chronology53 = instant51.getChronology();
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight((java.lang.Object) (-11491200000L), chronology53);
        org.joda.time.TimeOfDay timeOfDay55 = org.joda.time.TimeOfDay.fromMillisOfDay((-2678399900L), chronology53);
        boolean boolean56 = calendar44.after((java.lang.Object) chronology53);
        org.joda.time.TimeOfDay timeOfDay57 = org.joda.time.TimeOfDay.fromCalendarFields(calendar44);
        calendar44.setTimeInMillis((long) 70);
        int int60 = calendar44.getMinimalDaysInFirstWeek();
        org.joda.time.TimeOfDay timeOfDay61 = org.joda.time.TimeOfDay.fromCalendarFields(calendar44);
        java.util.Date date62 = calendar44.getTime();
        org.joda.time.TimeOfDay timeOfDay65 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant67 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime68 = timeOfDay65.toDateTime((org.joda.time.ReadableInstant) instant67);
        org.joda.time.Chronology chronology69 = instant67.getChronology();
        org.joda.time.TimeOfDay timeOfDay72 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant74 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime75 = timeOfDay72.toDateTime((org.joda.time.ReadableInstant) instant74);
        int[] intArray77 = chronology69.get((org.joda.time.ReadablePartial) timeOfDay72, (long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay79 = timeOfDay72.withHourOfDay(0);
        org.joda.time.TimeOfDay timeOfDay81 = timeOfDay79.plusHours(865);
        boolean boolean82 = calendar44.before((java.lang.Object) timeOfDay79);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray83 = timeOfDay79.getFieldTypes();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1" + "'", str16, "1");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "zh" + "'", str41, "zh");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "zh" + "'", str42, "zh");
        org.junit.Assert.assertNotNull(calendar43);
        org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=-86340000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar44);
        org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=70,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=70,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(timeOfDay55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(timeOfDay57);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(timeOfDay61);
        org.junit.Assert.assertNotNull(date62);
// flaky:         org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(timeOfDay79);
        org.junit.Assert.assertNotNull(timeOfDay81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray83);
    }

    @Test
    public void test04272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04272");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight4.withWeekyear(2);
        org.joda.time.DateTimeZone dateTimeZone9 = dateMidnight4.getZone();
        long long13 = dateTimeZone9.convertLocalToUTC(0L, true, (long) 5);
        java.util.Locale locale15 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str16 = dateTimeZone9.getName((-1L), locale15);
        java.lang.String str17 = dateTimeZone9.toString();
        org.joda.time.LocalTime localTime18 = org.joda.time.LocalTime.now(dateTimeZone9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval19 = new org.joda.time.Interval((long) 723960000, 3660000L, dateTimeZone9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertNotNull(localTime18);
    }

    @Test
    public void test04273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04273");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("-0001-02-22");
        mutableDateTime1.addMillis(11);
        org.junit.Assert.assertNotNull(mutableDateTime1);
    }

    @Test
    public void test04274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04274");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay.Property property3 = timeOfDay2.minuteOfHour();
        java.lang.String str4 = property3.getAsShortText();
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime10 = timeOfDay7.toDateTime((org.joda.time.ReadableInstant) instant9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.DateTime dateTime13 = dateTime10.withPeriodAdded(readablePeriod11, (int) (short) 0);
        int int14 = property3.compareTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime15 = dateTime10.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime17 = dateTime15.plusHours(23);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.TimeOfDay timeOfDay21 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant23 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime24 = timeOfDay21.toDateTime((org.joda.time.ReadableInstant) instant23);
        org.joda.time.Chronology chronology25 = instant23.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.clockhourOfHalfday();
        org.joda.time.DurationField durationField27 = chronology25.eras();
        org.joda.time.DateTimeField dateTimeField28 = dateTimeFieldType18.getField(chronology25);
        long long31 = dateTimeField28.add((long) (short) 100, (long) (byte) -1);
        boolean boolean32 = dateTimeField28.isSupported();
        org.joda.time.LocalTime localTime34 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime localTime36 = localTime34.minusMinutes((int) (short) 1);
        org.joda.time.LocalTime localTime38 = localTime34.withMillisOfDay((int) (byte) 1);
        org.joda.time.TimeOfDay timeOfDay42 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant44 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime45 = timeOfDay42.toDateTime((org.joda.time.ReadableInstant) instant44);
        org.joda.time.TimeOfDay timeOfDay47 = timeOfDay42.minusMinutes((int) '4');
        int[] intArray48 = timeOfDay47.getValues();
        int[] intArray50 = dateTimeField28.add((org.joda.time.ReadablePartial) localTime34, 36000000, intArray48, 52);
        org.joda.time.LocalTime localTime52 = localTime34.minusMinutes(11);
        int int53 = localTime52.getMillisOfSecond();
        org.joda.time.TimeOfDay timeOfDay56 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay timeOfDay58 = timeOfDay56.withSecondOfMinute((int) (byte) 1);
        org.joda.time.TimeOfDay.Property property59 = timeOfDay58.hourOfDay();
        boolean boolean60 = localTime52.isAfter((org.joda.time.ReadablePartial) timeOfDay58);
        org.joda.time.DateTime dateTime61 = dateTime15.withFields((org.joda.time.ReadablePartial) localTime52);
        org.joda.time.DateTime dateTime62 = dateTime15.toDateTimeISO();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime64 = dateTime15.withMillisOfDay((-2735));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -2735 for millisOfDay must be in the range [0,86399999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1" + "'", str4, "1");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-2678399900L) + "'", long31 == (-2678399900L));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(timeOfDay47);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[23, 9, 0, 0]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[23, 9, 0, 0]");
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 35 + "'", int53 == 35);
        org.junit.Assert.assertNotNull(timeOfDay58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
    }

    @Test
    public void test04275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04275");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime22 = timeOfDay19.toDateTime((org.joda.time.ReadableInstant) instant21);
        org.joda.time.Chronology chronology23 = instant21.getChronology();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        int[] intArray31 = chronology23.get((org.joda.time.ReadablePartial) timeOfDay26, (long) (short) -1);
        mutableDateTime16.setChronology(chronology23);
        mutableDateTime16.addMonths((int) (byte) 0);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime16.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay38 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant40 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime41 = timeOfDay38.toDateTime((org.joda.time.ReadableInstant) instant40);
        org.joda.time.Chronology chronology42 = instant40.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.clockhourOfHalfday();
        org.joda.time.DurationField durationField44 = chronology42.eras();
        org.joda.time.DateTimeField dateTimeField45 = chronology42.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone46 = chronology42.getZone();
        org.joda.time.DateTimeField dateTimeField47 = chronology42.clockhourOfDay();
        org.joda.time.TimeOfDay timeOfDay50 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant52 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime53 = timeOfDay50.toDateTime((org.joda.time.ReadableInstant) instant52);
        org.joda.time.Chronology chronology54 = instant52.getChronology();
        org.joda.time.DateTimeField dateTimeField55 = chronology54.clockhourOfHalfday();
        org.joda.time.DurationField durationField56 = chronology54.eras();
        org.joda.time.DateTimeField dateTimeField57 = chronology54.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone58 = chronology54.getZone();
        org.joda.time.Chronology chronology59 = chronology42.withZone(dateTimeZone58);
        int int61 = dateTimeZone58.getOffset(8035L);
        mutableDateTime16.setZone(dateTimeZone58);
        boolean boolean64 = dateTimeZone58.isStandardOffset((long) 9021);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test04276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04276");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        int[] intArray3 = timeOfDay2.getValues();
        org.joda.time.TimeOfDay timeOfDay6 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime9 = timeOfDay6.toDateTime((org.joda.time.ReadableInstant) instant8);
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay6.minusMinutes((int) '4');
        int int12 = timeOfDay2.compareTo((org.joda.time.ReadablePartial) timeOfDay6);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray13 = timeOfDay6.getFieldTypes();
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay6.minusMillis(1970);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay17 = timeOfDay15.withSecondOfMinute(672);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 672 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray13);
        org.junit.Assert.assertNotNull(timeOfDay15);
    }

    @Test
    public void test04277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04277");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = localDate0.toDateMidnight(dateTimeZone3);
        org.joda.time.DateTime dateTime5 = localDate0.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property6 = localDate0.yearOfEra();
        org.joda.time.LocalDate.Property property7 = localDate0.year();
        org.joda.time.DateTime dateTime8 = localDate0.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate.Property property9 = localDate0.dayOfYear();
        org.joda.time.DateTime dateTime10 = localDate0.toDateTimeAtStartOfDay();
        org.joda.time.DateTime dateTime12 = dateTime10.withCenturyOfEra(54);
        org.joda.time.MutableDateTime mutableDateTime13 = dateTime12.toMutableDateTime();
        java.lang.String str14 = mutableDateTime13.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "5422-02-21T00:00:00.000Z" + "'", str14, "5422-02-21T00:00:00.000Z");
    }

    @Test
    public void test04278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04278");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.DateTime dateTime3 = timeOfDay2.toDateTimeToday();
        org.joda.time.DateTime dateTime5 = dateTime3.plusWeeks((int) '4');
        org.joda.time.TimeOfDay timeOfDay6 = dateTime3.toTimeOfDay();
        org.joda.time.DateTime dateTime8 = dateTime3.withYear(1904);
        org.joda.time.DateTime dateTime10 = dateTime3.minusMillis(41);
        org.joda.time.DateTime.Property property11 = dateTime10.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test04279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04279");
        java.io.IOException iOException2 = new java.io.IOException("");
        java.io.IOException iOException4 = new java.io.IOException("");
        iOException2.addSuppressed((java.lang.Throwable) iOException4);
        java.io.IOException iOException8 = new java.io.IOException("");
        java.io.IOException iOException10 = new java.io.IOException("");
        iOException8.addSuppressed((java.lang.Throwable) iOException10);
        java.io.IOException iOException12 = new java.io.IOException("1", (java.lang.Throwable) iOException8);
        iOException4.addSuppressed((java.lang.Throwable) iOException8);
        java.io.IOException iOException15 = new java.io.IOException("");
        java.io.IOException iOException17 = new java.io.IOException("");
        iOException15.addSuppressed((java.lang.Throwable) iOException17);
        java.io.IOException iOException21 = new java.io.IOException("");
        java.io.IOException iOException23 = new java.io.IOException("");
        iOException21.addSuppressed((java.lang.Throwable) iOException23);
        java.io.IOException iOException25 = new java.io.IOException("1", (java.lang.Throwable) iOException21);
        iOException17.addSuppressed((java.lang.Throwable) iOException21);
        iOException8.addSuppressed((java.lang.Throwable) iOException21);
        java.io.IOException iOException28 = new java.io.IOException((java.lang.Throwable) iOException8);
        java.io.IOException iOException29 = new java.io.IOException("2022-02-21T10:09:34.070Z", (java.lang.Throwable) iOException28);
        java.lang.String str30 = iOException28.toString();
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "java.io.IOException: java.io.IOException: " + "'", str30, "java.io.IOException: java.io.IOException: ");
    }

    @Test
    public void test04280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04280");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(438);
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = mutableDateTime2.toGregorianCalendar();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime2.setMonthOfYear(1969);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1969 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(gregorianCalendar3);
    }

    @Test
    public void test04281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04281");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime5 = timeOfDay2.toDateTime((org.joda.time.ReadableInstant) instant4);
        org.joda.time.Chronology chronology6 = instant4.getChronology();
        org.joda.time.TimeOfDay timeOfDay9 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime12 = timeOfDay9.toDateTime((org.joda.time.ReadableInstant) instant11);
        int[] intArray14 = chronology6.get((org.joda.time.ReadablePartial) timeOfDay9, (long) (short) -1);
        org.joda.time.DateTimeField dateTimeField15 = chronology6.dayOfYear();
        org.joda.time.TimeOfDay timeOfDay20 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant22 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime23 = timeOfDay20.toDateTime((org.joda.time.ReadableInstant) instant22);
        org.joda.time.Chronology chronology24 = instant22.getChronology();
        org.joda.time.TimeOfDay timeOfDay27 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant29 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime30 = timeOfDay27.toDateTime((org.joda.time.ReadableInstant) instant29);
        int[] intArray32 = chronology24.get((org.joda.time.ReadablePartial) timeOfDay27, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(0L, chronology24);
        mutableDateTime33.setYear(3);
        org.joda.time.Instant instant37 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone38 = instant37.getZone();
        mutableDateTime33.setZone(dateTimeZone38);
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(dateTimeZone38);
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight((long) 'x', dateTimeZone38);
        org.joda.time.Chronology chronology42 = chronology6.withZone(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField43 = chronology6.minuteOfHour();
        org.joda.time.ReadablePartial readablePartial44 = null;
        org.joda.time.TimeOfDay timeOfDay48 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay.Property property49 = timeOfDay48.minuteOfHour();
        java.lang.String str50 = property49.getAsShortText();
        org.joda.time.TimeOfDay timeOfDay53 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant55 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime56 = timeOfDay53.toDateTime((org.joda.time.ReadableInstant) instant55);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.DateTime dateTime59 = dateTime56.withPeriodAdded(readablePeriod57, (int) (short) 0);
        int int60 = property49.compareTo((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTime dateTime61 = dateTime56.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.TimeOfDay timeOfDay65 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant67 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime68 = timeOfDay65.toDateTime((org.joda.time.ReadableInstant) instant67);
        org.joda.time.Chronology chronology69 = instant67.getChronology();
        org.joda.time.DateTimeField dateTimeField70 = chronology69.clockhourOfHalfday();
        org.joda.time.DurationField durationField71 = chronology69.eras();
        org.joda.time.DateTimeField dateTimeField72 = dateTimeFieldType62.getField(chronology69);
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(10, 0);
        org.joda.time.Chronology chronology76 = chronology69.withZone(dateTimeZone75);
        org.joda.time.LocalTime localTime77 = new org.joda.time.LocalTime((java.lang.Object) dateTime61, chronology76);
        int[] intArray78 = localTime77.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray80 = dateTimeField43.add(readablePartial44, 54576831, intArray78, 2922789);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "1" + "'", str50, "1");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[10, 1, 0, 0]");
    }

    @Test
    public void test04282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04282");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime5 = timeOfDay2.toDateTime((org.joda.time.ReadableInstant) instant4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusDays(0);
        org.joda.time.DateTime dateTime9 = dateTime5.minusWeeks((-1));
        int int10 = dateTime9.getDayOfYear();
        org.joda.time.DateTime dateTime12 = dateTime9.plusYears(1032);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime14 = dateTime9.withEra(439);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 439 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 7 + "'", int10 == 7);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test04283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04283");
        java.util.Date date5 = new java.util.Date(1439, 54021076, 53973848, 816, 865);
        java.util.Date date9 = new java.util.Date(23, 0, 53924);
        int int10 = date9.getDay();
        int int11 = date9.getMonth();
        boolean boolean12 = date5.after(date9);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Sat Oct 18 14:25:00 GMT+00:00 4652870");
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Wed Aug 20 00:00:00 GMT+00:00 2070");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test04284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04284");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.withDurationAdded((long) 2, 100);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.minusWeeks((int) (short) 100);
        org.joda.time.DateMidnight.Property property8 = dateMidnight7.weekyear();
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight7.minusYears((int) ' ');
        int int11 = dateMidnight10.getEra();
        boolean boolean13 = dateMidnight10.isAfter(4460337610L);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test04285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04285");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder1.clear();
        java.util.Locale.Builder builder4 = builder1.removeUnicodeLocaleAttribute("UTC");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder4.setScript("DurationField[hours]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: DurationField[hours] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test04286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04286");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.withDurationAdded(readableDuration4, (int) (byte) 0);
        org.joda.time.DateTime dateTime8 = dateTime3.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime10 = dateTime8.plusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime12 = dateTime10.plusDays(2);
        org.joda.time.DateTime dateTime14 = dateTime10.minusMinutes(10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime16 = dateTime10.withEra(3767);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 3767 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test04287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04287");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.withDurationAdded(readableDuration4, (int) (byte) 0);
        org.joda.time.DateTime dateTime8 = dateTime3.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime10 = dateTime8.plusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime12 = dateTime10.plusDays(2);
        org.joda.time.TimeOfDay timeOfDay13 = dateTime12.toTimeOfDay();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay13.plus(readablePeriod14);
        org.joda.time.Instant instant17 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone18 = instant17.getZone();
        org.joda.time.MutableDateTime mutableDateTime19 = instant17.toMutableDateTimeISO();
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay.Property property23 = timeOfDay22.minuteOfHour();
        java.lang.String str24 = property23.getAsShortText();
        org.joda.time.TimeOfDay timeOfDay27 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant29 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime30 = timeOfDay27.toDateTime((org.joda.time.ReadableInstant) instant29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.DateTime dateTime33 = dateTime30.withPeriodAdded(readablePeriod31, (int) (short) 0);
        int int34 = property23.compareTo((org.joda.time.ReadableInstant) dateTime30);
        boolean boolean35 = mutableDateTime19.isBefore((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.TimeOfDay timeOfDay38 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant40 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime41 = timeOfDay38.toDateTime((org.joda.time.ReadableInstant) instant40);
        org.joda.time.Chronology chronology42 = instant40.getChronology();
        org.joda.time.DurationField durationField43 = chronology42.millis();
        org.joda.time.DateTimeField dateTimeField44 = chronology42.monthOfYear();
        mutableDateTime19.setChronology(chronology42);
        org.joda.time.TimeOfDay timeOfDay46 = timeOfDay13.withChronologyRetainFields(chronology42);
        org.joda.time.Interval interval49 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval52 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean53 = interval49.abuts((org.joda.time.ReadableInterval) interval52);
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.Interval interval55 = interval52.withDurationBeforeEnd(readableDuration54);
        boolean boolean56 = interval55.isBeforeNow();
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.Period period58 = interval55.toPeriod(periodType57);
        int[] intArray61 = chronology42.get((org.joda.time.ReadablePeriod) period58, 4460356888L, 1645455486111L);
        org.joda.time.DateTimeField dateTimeField62 = chronology42.secondOfDay();
        org.joda.time.DurationField durationField63 = dateTimeField62.getDurationField();
        boolean boolean64 = durationField63.isSupported();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1" + "'", str24, "1");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(timeOfDay46);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[51, 11, 4, 2, 23, 58, 49, 223]");
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test04288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04288");
        org.joda.time.TimeOfDay timeOfDay5 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime8 = timeOfDay5.toDateTime((org.joda.time.ReadableInstant) instant7);
        org.joda.time.Chronology chronology9 = instant7.getChronology();
        org.joda.time.TimeOfDay timeOfDay12 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant14 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime15 = timeOfDay12.toDateTime((org.joda.time.ReadableInstant) instant14);
        int[] intArray17 = chronology9.get((org.joda.time.ReadablePartial) timeOfDay12, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(0L, chronology9);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.TimeOfDay timeOfDay23 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant25 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime26 = timeOfDay23.toDateTime((org.joda.time.ReadableInstant) instant25);
        org.joda.time.Chronology chronology27 = instant25.getChronology();
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((java.lang.Object) (-11491200000L), chronology27);
        org.joda.time.DateTimeField dateTimeField29 = chronology27.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime19.toMutableDateTime(chronology27);
        java.lang.String str31 = chronology27.toString();
        org.joda.time.DateTimeField dateTimeField32 = chronology27.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(4460386987L, chronology27);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ISOChronology[UTC]" + "'", str31, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField32);
    }

    @Test
    public void test04289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04289");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime localTime3 = localTime1.minusMinutes((int) (short) 1);
        org.joda.time.LocalTime localTime5 = localTime1.plusMinutes(53956956);
        org.joda.time.TimeOfDay timeOfDay9 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime12 = timeOfDay9.toDateTime((org.joda.time.ReadableInstant) instant11);
        org.joda.time.Chronology chronology13 = instant11.getChronology();
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant18 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime19 = timeOfDay16.toDateTime((org.joda.time.ReadableInstant) instant18);
        int[] intArray21 = chronology13.get((org.joda.time.ReadablePartial) timeOfDay16, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(0L, chronology13);
        org.joda.time.TimeOfDay timeOfDay25 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant27 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime28 = timeOfDay25.toDateTime((org.joda.time.ReadableInstant) instant27);
        org.joda.time.Chronology chronology29 = instant27.getChronology();
        org.joda.time.TimeOfDay timeOfDay32 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant34 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime35 = timeOfDay32.toDateTime((org.joda.time.ReadableInstant) instant34);
        int[] intArray37 = chronology29.get((org.joda.time.ReadablePartial) timeOfDay32, (long) (short) -1);
        mutableDateTime22.setChronology(chronology29);
        boolean boolean39 = mutableDateTime22.isEqualNow();
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime22.secondOfDay();
        boolean boolean41 = mutableDateTime22.isAfterNow();
        mutableDateTime22.setMillisOfSecond((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        mutableDateTime22.add(readablePeriod44);
        mutableDateTime22.setMillis((long) (byte) 1);
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime22.dayOfYear();
        int int49 = mutableDateTime22.getSecondOfDay();
        org.joda.time.TimeOfDay timeOfDay53 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant55 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime56 = timeOfDay53.toDateTime((org.joda.time.ReadableInstant) instant55);
        org.joda.time.Chronology chronology57 = instant55.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.clockhourOfHalfday();
        org.joda.time.DurationField durationField59 = chronology57.eras();
        org.joda.time.DateTimeField dateTimeField60 = chronology57.clockhourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime61 = new org.joda.time.MutableDateTime((long) 52, chronology57);
        org.joda.time.TimeOfDay timeOfDay64 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant66 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime67 = timeOfDay64.toDateTime((org.joda.time.ReadableInstant) instant66);
        org.joda.time.Chronology chronology68 = instant66.getChronology();
        mutableDateTime61.setChronology(chronology68);
        org.joda.time.Interval interval72 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval75 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean76 = interval72.abuts((org.joda.time.ReadableInterval) interval75);
        org.joda.time.ReadableDuration readableDuration77 = null;
        org.joda.time.Interval interval78 = interval75.withDurationBeforeEnd(readableDuration77);
        boolean boolean79 = interval78.isBeforeNow();
        org.joda.time.PeriodType periodType80 = null;
        org.joda.time.Period period81 = interval78.toPeriod(periodType80);
        long long84 = chronology68.add((org.joda.time.ReadablePeriod) period81, (long) 23, 32769);
        org.joda.time.PeriodType periodType85 = period81.getPeriodType();
        mutableDateTime22.add((org.joda.time.ReadablePeriod) period81, 1903);
        org.joda.time.MutablePeriod mutablePeriod88 = period81.toMutablePeriod();
        org.joda.time.LocalTime localTime89 = localTime5.minus((org.joda.time.ReadablePeriod) mutablePeriod88);
        org.joda.time.PeriodType periodType90 = mutablePeriod88.getPeriodType();
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 23L + "'", long84 == 23L);
        org.junit.Assert.assertNotNull(periodType85);
        org.junit.Assert.assertNotNull(mutablePeriod88);
        org.junit.Assert.assertNotNull(localTime89);
        org.junit.Assert.assertNotNull(periodType90);
    }

    @Test
    public void test04290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04290");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 23);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setDayOfYear(54115371);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54115371 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
    }

    @Test
    public void test04291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04291");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime10 = timeOfDay7.toDateTime((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Chronology chronology11 = instant9.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.clockhourOfHalfday();
        long long14 = dateTimeField12.roundHalfFloor(0L);
        java.util.Locale locale15 = java.util.Locale.TRADITIONAL_CHINESE;
        int int16 = dateTimeField12.getMaximumShortTextLength(locale15);
        java.lang.String str17 = locale15.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket((-1L), chronology4, locale15);
        java.util.Locale locale19 = dateTimeParserBucket18.getLocale();
        long long22 = dateTimeParserBucket18.computeMillis(true, "");
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.TimeOfDay timeOfDay27 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant29 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime30 = timeOfDay27.toDateTime((org.joda.time.ReadableInstant) instant29);
        org.joda.time.Chronology chronology31 = instant29.getChronology();
        org.joda.time.TimeOfDay timeOfDay34 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant36 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime37 = timeOfDay34.toDateTime((org.joda.time.ReadableInstant) instant36);
        int[] intArray39 = chronology31.get((org.joda.time.ReadablePartial) timeOfDay34, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime(0L, chronology31);
        org.joda.time.TimeOfDay timeOfDay43 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant45 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime46 = timeOfDay43.toDateTime((org.joda.time.ReadableInstant) instant45);
        org.joda.time.Chronology chronology47 = instant45.getChronology();
        org.joda.time.TimeOfDay timeOfDay50 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant52 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime53 = timeOfDay50.toDateTime((org.joda.time.ReadableInstant) instant52);
        int[] intArray55 = chronology47.get((org.joda.time.ReadablePartial) timeOfDay50, (long) (short) -1);
        mutableDateTime40.setChronology(chronology47);
        org.joda.time.DateTimeField dateTimeField57 = dateTimeFieldType23.getField(chronology47);
        java.util.Locale locale59 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale60 = locale59.stripExtensions();
        dateTimeParserBucket18.saveField(dateTimeFieldType23, "hi!", locale60);
        java.lang.String str62 = locale60.getLanguage();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = dateTimeFormatter2.withLocale(locale60);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter65 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter67 = dateTimeFormatter2.withPivotYear((int) 'a');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter69 = dateTimeFormatter68.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = dateTimeFormatter68.withDefaultYear(266);
        org.joda.time.DateTimeZone dateTimeZone72 = dateTimeFormatter68.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter74 = dateTimeFormatter68.withDefaultYear(50);
        java.lang.Appendable appendable75 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter74.printTo(appendable75, (long) 1439);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "zh" + "'", str17, "zh");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "zh" + "'", str62, "zh");
        org.junit.Assert.assertNotNull(dateTimeFormatter63);
        org.junit.Assert.assertNotNull(dateTimeFormatter65);
        org.junit.Assert.assertNotNull(dateTimeFormatter67);
        org.junit.Assert.assertNotNull(dateTimeFormatter68);
        org.junit.Assert.assertNull(dateTimePrinter69);
        org.junit.Assert.assertNotNull(dateTimeFormatter71);
        org.junit.Assert.assertNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(dateTimeFormatter74);
    }

    @Test
    public void test04292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04292");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.weekyear();
        org.joda.time.LocalDate localDate3 = localDate0.withWeekyear((-1));
        java.util.Date date4 = localDate0.toDate();
        org.joda.time.DateTime dateTime5 = localDate0.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate.Property property6 = localDate0.era();
        org.joda.time.LocalDate.Property property7 = localDate0.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate10 = localDate0.withField(dateTimeFieldType8, 795);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'clockhourOfHalfday' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Mon Feb 21 00:00:00 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
    }

    @Test
    public void test04293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04293");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime22 = timeOfDay19.toDateTime((org.joda.time.ReadableInstant) instant21);
        org.joda.time.Chronology chronology23 = instant21.getChronology();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        int[] intArray31 = chronology23.get((org.joda.time.ReadablePartial) timeOfDay26, (long) (short) -1);
        mutableDateTime16.setChronology(chronology23);
        mutableDateTime16.addMonths((int) (byte) 0);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime16.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime36 = property35.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime38 = property35.addWrapField(2);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean42 = localDate40.isSupported(dateTimeFieldType41);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateMidnight dateMidnight44 = localDate40.toDateMidnight(dateTimeZone43);
        org.joda.time.DateTime dateTime45 = localDate40.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime46 = localDate40.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate48 = localDate40.minusWeeks((int) 'a');
        org.joda.time.LocalDate.Property property49 = localDate48.weekOfWeekyear();
        java.util.Locale locale50 = java.util.Locale.US;
        boolean boolean51 = property49.equals((java.lang.Object) locale50);
        java.util.Calendar calendar52 = java.util.Calendar.getInstance(locale50);
        java.lang.String str53 = locale50.getDisplayLanguage();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime54 = property35.set("English (Canada)", locale50);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"English (Canada)\" for millisOfSecond is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(calendar52);
// flaky:         org.junit.Assert.assertEquals(calendar52.toString(), "java.util.GregorianCalendar[time=1645455721159,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=1969-12-31T23:59:59.999Z,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=1,MILLISECOND=159,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "English" + "'", str53, "English");
    }

    @Test
    public void test04294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04294");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval5 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean6 = interval2.abuts((org.joda.time.ReadableInterval) interval5);
        long long7 = interval5.getStartMillis();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean14 = interval10.abuts((org.joda.time.ReadableInterval) interval13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Interval interval16 = interval13.withDurationBeforeEnd(readableDuration15);
        org.joda.time.Interval interval17 = interval5.overlap((org.joda.time.ReadableInterval) interval13);
        org.joda.time.TimeOfDay timeOfDay21 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant23 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime24 = timeOfDay21.toDateTime((org.joda.time.ReadableInstant) instant23);
        org.joda.time.Chronology chronology25 = instant23.getChronology();
        org.joda.time.TimeOfDay timeOfDay28 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant30 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime31 = timeOfDay28.toDateTime((org.joda.time.ReadableInstant) instant30);
        int[] intArray33 = chronology25.get((org.joda.time.ReadablePartial) timeOfDay28, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(0L, chronology25);
        mutableDateTime34.setYear(3);
        org.joda.time.Instant instant38 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone39 = instant38.getZone();
        mutableDateTime34.setZone(dateTimeZone39);
        org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.now(dateTimeZone39);
        boolean boolean42 = interval13.contains((org.joda.time.ReadableInstant) dateTime41);
        boolean boolean43 = interval13.containsNow();
        org.joda.time.TimeOfDay timeOfDay47 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant49 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime50 = timeOfDay47.toDateTime((org.joda.time.ReadableInstant) instant49);
        org.joda.time.Chronology chronology51 = instant49.getChronology();
        org.joda.time.TimeOfDay timeOfDay54 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant56 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime57 = timeOfDay54.toDateTime((org.joda.time.ReadableInstant) instant56);
        int[] intArray59 = chronology51.get((org.joda.time.ReadablePartial) timeOfDay54, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime60 = new org.joda.time.MutableDateTime(0L, chronology51);
        org.joda.time.TimeOfDay timeOfDay63 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant65 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime66 = timeOfDay63.toDateTime((org.joda.time.ReadableInstant) instant65);
        org.joda.time.Chronology chronology67 = instant65.getChronology();
        org.joda.time.TimeOfDay timeOfDay70 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant72 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime73 = timeOfDay70.toDateTime((org.joda.time.ReadableInstant) instant72);
        int[] intArray75 = chronology67.get((org.joda.time.ReadablePartial) timeOfDay70, (long) (short) -1);
        mutableDateTime60.setChronology(chronology67);
        boolean boolean77 = mutableDateTime60.isEqualNow();
        org.joda.time.ReadableDuration readableDuration78 = null;
        mutableDateTime60.add(readableDuration78);
        mutableDateTime60.addSeconds(5);
        mutableDateTime60.addDays(23);
        mutableDateTime60.setSecondOfDay(8);
        org.joda.time.TimeOfDay timeOfDay88 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.DateTime dateTime89 = timeOfDay88.toDateTimeToday();
        org.joda.time.DateTime dateTime91 = dateTime89.plusWeeks((int) '4');
        org.joda.time.TimeOfDay timeOfDay92 = dateTime89.toTimeOfDay();
        boolean boolean93 = mutableDateTime60.isEqual((org.joda.time.ReadableInstant) dateTime89);
        int int94 = mutableDateTime60.getSecondOfMinute();
        mutableDateTime60.addYears(53948575);
        org.joda.time.DateTime dateTime97 = mutableDateTime60.toDateTime();
        boolean boolean98 = interval13.isBefore((org.joda.time.ReadableInstant) dateTime97);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNull(interval17);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(timeOfDay92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 8 + "'", int94 == 8);
        org.junit.Assert.assertNotNull(dateTime97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
    }

    @Test
    public void test04295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04295");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime.Property property2 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime4 = property2.addCopy(21);
        java.lang.String str5 = property2.toString();
        org.joda.time.LocalTime localTime6 = property2.withMaximumValue();
        org.joda.time.LocalTime localTime7 = property2.roundHalfCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime9 = property2.addNoWrapToCopy(2020);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The addition exceeded the boundaries of LocalTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Property[hourOfDay]" + "'", str5, "Property[hourOfDay]");
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
    }

    @Test
    public void test04296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04296");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        int int17 = mutableDateTime16.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime16.property(dateTimeFieldType18);
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime25 = timeOfDay22.toDateTime((org.joda.time.ReadableInstant) instant24);
        org.joda.time.Chronology chronology26 = instant24.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.clockhourOfHalfday();
        long long29 = dateTimeField27.roundHalfFloor(0L);
        java.util.Locale locale30 = java.util.Locale.TRADITIONAL_CHINESE;
        int int31 = dateTimeField27.getMaximumShortTextLength(locale30);
        java.util.Locale locale32 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale33 = locale32.stripExtensions();
        java.util.Locale locale34 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale35 = locale34.stripExtensions();
        java.lang.String str36 = locale32.getDisplayName(locale34);
        java.lang.String str37 = locale30.getDisplayLanguage(locale32);
        java.util.Calendar calendar38 = mutableDateTime16.toCalendar(locale32);
        java.util.Date date42 = new java.util.Date(0, (int) '4', 0);
        int int43 = date42.getMinutes();
        date42.setYear(12);
        calendar38.setTime(date42);
        int int47 = date42.getDay();
        org.joda.time.TimeOfDay timeOfDay48 = org.joda.time.TimeOfDay.fromDateFields(date42);
        java.time.Instant instant49 = date42.toInstant();
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str36, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u4e2d\u6587" + "'", str37, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(calendar38);
        org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=-1820016000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1912,MONTH=3,WEEK_OF_YEAR=18,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=121,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(date42.toString(), "Tue Apr 30 00:00:00 GMT+00:00 1912");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(timeOfDay48);
        org.junit.Assert.assertNotNull(instant49);
    }

    @Test
    public void test04297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04297");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = localDate0.toDateMidnight(dateTimeZone3);
        org.joda.time.DateTime dateTime5 = localDate0.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property6 = localDate0.yearOfEra();
        org.joda.time.LocalDate localDate8 = localDate0.minusMonths((int) (byte) -1);
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.halfdays();
        boolean boolean10 = localDate8.isSupported(durationFieldType9);
        int int11 = localDate8.getCenturyOfEra();
        org.joda.time.LocalDate localDate13 = localDate8.minusDays(1);
        org.joda.time.DateTime dateTime14 = localDate13.toDateTimeAtCurrentTime();
        org.joda.time.DateTime dateTime16 = dateTime14.withMinuteOfHour(0);
        boolean boolean18 = dateTime14.isAfter((long) 310);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20 + "'", int11 == 20);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test04298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04298");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.plusMonths((int) (short) 0);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDate localDate4 = localDate2.minus(readablePeriod3);
        org.joda.time.LocalDate localDate6 = localDate4.withYearOfEra(30);
        org.joda.time.LocalDate.Property property7 = localDate4.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = localDate4.toString("DateTimeField[minuteOfDay]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: t");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test04299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04299");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minusSeconds(34);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.minusMillis(42);
        org.joda.time.LocalTime localTime9 = timeOfDay8.toLocalTime();
        org.joda.time.Chronology chronology10 = localTime9.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval11 = new org.joda.time.Interval(27000L, (long) 462, chronology10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(chronology10);
    }

    @Test
    public void test04300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04300");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        int int17 = mutableDateTime16.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime16.property(dateTimeFieldType18);
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime25 = timeOfDay22.toDateTime((org.joda.time.ReadableInstant) instant24);
        org.joda.time.Chronology chronology26 = instant24.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.clockhourOfHalfday();
        long long29 = dateTimeField27.roundHalfFloor(0L);
        java.util.Locale locale30 = java.util.Locale.TRADITIONAL_CHINESE;
        int int31 = dateTimeField27.getMaximumShortTextLength(locale30);
        java.util.Locale locale32 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale33 = locale32.stripExtensions();
        java.util.Locale locale34 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale35 = locale34.stripExtensions();
        java.lang.String str36 = locale32.getDisplayName(locale34);
        java.lang.String str37 = locale30.getDisplayLanguage(locale32);
        java.util.Calendar calendar38 = mutableDateTime16.toCalendar(locale32);
        java.util.Date date42 = new java.util.Date(0, (int) '4', 0);
        int int43 = date42.getMinutes();
        date42.setYear(12);
        calendar38.setTime(date42);
        java.util.Date date47 = calendar38.getTime();
        java.util.Date date48 = calendar38.getTime();
        calendar38.setFirstDayOfWeek(428);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str36, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u4e2d\u6587" + "'", str37, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(calendar38);
        org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=-1820016000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=428,minimalDaysInFirstWeek=1,ERA=1,YEAR=1912,MONTH=3,WEEK_OF_YEAR=18,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=121,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(date42.toString(), "Tue Apr 30 00:00:00 GMT+00:00 1912");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(date47);
// flaky:         org.junit.Assert.assertEquals(date47.toString(), "Tue Apr 30 00:00:00 GMT+00:00 1912");
        org.junit.Assert.assertNotNull(date48);
// flaky:         org.junit.Assert.assertEquals(date48.toString(), "Tue Apr 30 00:00:00 GMT+00:00 1912");
    }

    @Test
    public void test04301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04301");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime22 = timeOfDay19.toDateTime((org.joda.time.ReadableInstant) instant21);
        org.joda.time.Chronology chronology23 = instant21.getChronology();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        int[] intArray31 = chronology23.get((org.joda.time.ReadablePartial) timeOfDay26, (long) (short) -1);
        mutableDateTime16.setChronology(chronology23);
        boolean boolean33 = mutableDateTime16.isEqualNow();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime16.secondOfDay();
        boolean boolean35 = mutableDateTime16.isAfterNow();
        mutableDateTime16.addWeekyears((int) (short) 1);
        mutableDateTime16.addYears((int) (short) 10);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((long) ' ');
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean44 = localDate42.isSupported(dateTimeFieldType43);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = localDate42.toDateMidnight(dateTimeZone45);
        org.joda.time.DateTime dateTime47 = localDate42.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property48 = localDate42.yearOfEra();
        org.joda.time.LocalDate.Property property49 = localDate42.weekyear();
        boolean boolean50 = localDate41.isAfter((org.joda.time.ReadablePartial) localDate42);
        int int51 = localDate41.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.LocalDate.Property property53 = localDate41.property(dateTimeFieldType52);
        int int54 = localDate41.getDayOfMonth();
        org.joda.time.DurationFieldType durationFieldType55 = org.joda.time.DurationFieldType.eras();
        boolean boolean56 = localDate41.isSupported(durationFieldType55);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime16.add(durationFieldType55, 462);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(durationFieldType55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test04302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04302");
        org.joda.time.TimeOfDay timeOfDay6 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime9 = timeOfDay6.toDateTime((org.joda.time.ReadableInstant) instant8);
        org.joda.time.Chronology chronology10 = instant8.getChronology();
        org.joda.time.TimeOfDay timeOfDay13 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant15 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime16 = timeOfDay13.toDateTime((org.joda.time.ReadableInstant) instant15);
        int[] intArray18 = chronology10.get((org.joda.time.ReadablePartial) timeOfDay13, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(0L, chronology10);
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime25 = timeOfDay22.toDateTime((org.joda.time.ReadableInstant) instant24);
        org.joda.time.Chronology chronology26 = instant24.getChronology();
        org.joda.time.TimeOfDay timeOfDay29 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant31 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime32 = timeOfDay29.toDateTime((org.joda.time.ReadableInstant) instant31);
        int[] intArray34 = chronology26.get((org.joda.time.ReadablePartial) timeOfDay29, (long) (short) -1);
        mutableDateTime19.setChronology(chronology26);
        mutableDateTime19.addMonths((int) (byte) 0);
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime19.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay41 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant43 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime44 = timeOfDay41.toDateTime((org.joda.time.ReadableInstant) instant43);
        org.joda.time.Chronology chronology45 = instant43.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.clockhourOfHalfday();
        org.joda.time.DurationField durationField47 = chronology45.eras();
        org.joda.time.DateTimeField dateTimeField48 = chronology45.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone49 = chronology45.getZone();
        org.joda.time.DateTimeField dateTimeField50 = chronology45.clockhourOfDay();
        org.joda.time.TimeOfDay timeOfDay53 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant55 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime56 = timeOfDay53.toDateTime((org.joda.time.ReadableInstant) instant55);
        org.joda.time.Chronology chronology57 = instant55.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.clockhourOfHalfday();
        org.joda.time.DurationField durationField59 = chronology57.eras();
        org.joda.time.DateTimeField dateTimeField60 = chronology57.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone61 = chronology57.getZone();
        org.joda.time.Chronology chronology62 = chronology45.withZone(dateTimeZone61);
        int int64 = dateTimeZone61.getOffset(8035L);
        mutableDateTime19.setZone(dateTimeZone61);
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((long) 27, dateTimeZone61);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval67 = new org.joda.time.Interval((long) 53942, 34000L, dateTimeZone61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
    }

    @Test
    public void test04303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04303");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay.Property property3 = timeOfDay2.minuteOfHour();
        java.lang.String str4 = property3.getAsShortText();
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime10 = timeOfDay7.toDateTime((org.joda.time.ReadableInstant) instant9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.DateTime dateTime13 = dateTime10.withPeriodAdded(readablePeriod11, (int) (short) 0);
        int int14 = property3.compareTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.TimeOfDay timeOfDay16 = property3.addToCopy(23);
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime22 = timeOfDay19.toDateTime((org.joda.time.ReadableInstant) instant21);
        org.joda.time.Chronology chronology23 = instant21.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.clockhourOfHalfday();
        long long26 = dateTimeField24.roundHalfFloor(0L);
        java.util.Locale locale27 = java.util.Locale.TRADITIONAL_CHINESE;
        int int28 = dateTimeField24.getMaximumShortTextLength(locale27);
        java.util.Locale locale29 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale30 = locale29.stripExtensions();
        java.util.Locale locale31 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale32 = locale31.stripExtensions();
        java.lang.String str33 = locale29.getDisplayName(locale31);
        java.lang.String str34 = locale27.getDisplayLanguage(locale29);
        java.lang.String str35 = locale27.getDisplayScript();
        int int36 = property3.getMaximumTextLength(locale27);
        int int37 = property3.getMinimumValue();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1" + "'", str4, "1");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str33, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\u4e2d\u6587" + "'", str34, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test04304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04304");
        org.joda.time.Instant instant2 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone3 = instant2.getZone();
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) 2, dateTimeZone3);
        java.util.TimeZone timeZone5 = dateTimeZone3.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        java.lang.String str7 = timeZone5.getDisplayName();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Coordinated Universal Time" + "'", str7, "Coordinated Universal Time");
    }

    @Test
    public void test04305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04305");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 100);
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths(1);
        java.lang.String str4 = localDate3.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate6 = localDate3.withDayOfMonth(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1969-12-01" + "'", str4, "1969-12-01");
    }

    @Test
    public void test04306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04306");
        long long6 = java.util.Date.UTC(723960000, 54021076, 816, 0, 1903, 54082304);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 4541286520310932384L + "'", long6 == 4541286520310932384L);
    }

    @Test
    public void test04307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04307");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.Chronology chronology1 = localDateTime0.getChronology();
        int int2 = localDateTime0.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusMinutes(1);
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plus(readableDuration5);
        java.util.Date date7 = localDateTime6.toDate();
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime14 = timeOfDay11.toDateTime((org.joda.time.ReadableInstant) instant13);
        org.joda.time.Chronology chronology15 = instant13.getChronology();
        org.joda.time.TimeOfDay timeOfDay18 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant20 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime21 = timeOfDay18.toDateTime((org.joda.time.ReadableInstant) instant20);
        int[] intArray23 = chronology15.get((org.joda.time.ReadablePartial) timeOfDay18, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(0L, chronology15);
        org.joda.time.TimeOfDay timeOfDay27 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant29 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime30 = timeOfDay27.toDateTime((org.joda.time.ReadableInstant) instant29);
        org.joda.time.Chronology chronology31 = instant29.getChronology();
        org.joda.time.TimeOfDay timeOfDay34 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant36 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime37 = timeOfDay34.toDateTime((org.joda.time.ReadableInstant) instant36);
        int[] intArray39 = chronology31.get((org.joda.time.ReadablePartial) timeOfDay34, (long) (short) -1);
        mutableDateTime24.setChronology(chronology31);
        org.joda.time.DurationField durationField41 = chronology31.seconds();
        org.joda.time.DurationField durationField42 = chronology31.halfdays();
        org.joda.time.DateTimeField dateTimeField43 = chronology31.year();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval44 = new org.joda.time.Interval((java.lang.Object) localDateTime6, chronology31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.LocalDateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Mon Feb 21 15:02:01 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
    }

    @Test
    public void test04308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04308");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.withWeekyear(2);
        org.joda.time.DateMidnight.Property property7 = dateMidnight2.weekOfWeekyear();
        java.lang.String str8 = property7.getAsString();
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime14 = timeOfDay11.toDateTime((org.joda.time.ReadableInstant) instant13);
        org.joda.time.Chronology chronology15 = instant13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.clockhourOfHalfday();
        long long18 = dateTimeField16.roundHalfFloor(0L);
        java.util.Locale locale19 = java.util.Locale.TRADITIONAL_CHINESE;
        int int20 = dateTimeField16.getMaximumShortTextLength(locale19);
        int int21 = property7.getMaximumShortTextLength(locale19);
        java.lang.String str22 = locale19.getDisplayLanguage();
        java.lang.String str23 = locale19.toLanguageTag();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Chinese" + "'", str22, "Chinese");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "zh-TW" + "'", str23, "zh-TW");
    }

    @Test
    public void test04309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04309");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime localTime3 = localTime1.minusMinutes((int) (short) 1);
        int int4 = localTime1.getMillisOfDay();
        org.joda.time.LocalTime.Property property5 = localTime1.millisOfSecond();
        org.joda.time.LocalTime localTime6 = property5.roundCeilingCopy();
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime9 = localTime6.withHourOfDay(36);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 36 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test04310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04310");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTime((org.joda.time.ReadableInstant) instant6);
        org.joda.time.Chronology chronology8 = instant6.getChronology();
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime14 = timeOfDay11.toDateTime((org.joda.time.ReadableInstant) instant13);
        int[] intArray16 = chronology8.get((org.joda.time.ReadablePartial) timeOfDay11, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(0L, chronology8);
        mutableDateTime17.setYear(3);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone22 = instant21.getZone();
        mutableDateTime17.setZone(dateTimeZone22);
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(dateTimeZone22);
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((long) '#', dateTimeZone22);
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime(dateTimeZone22);
        org.joda.time.LocalTime localTime28 = localTime26.plusMinutes(5);
        org.joda.time.TimeOfDay timeOfDay32 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant34 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime35 = timeOfDay32.toDateTime((org.joda.time.ReadableInstant) instant34);
        org.joda.time.Chronology chronology36 = instant34.getChronology();
        org.joda.time.TimeOfDay timeOfDay39 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant41 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime42 = timeOfDay39.toDateTime((org.joda.time.ReadableInstant) instant41);
        int[] intArray44 = chronology36.get((org.joda.time.ReadablePartial) timeOfDay39, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime(0L, chronology36);
        int int46 = mutableDateTime45.getEra();
        mutableDateTime45.setMillis((long) (short) 10);
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime45.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField50 = property49.getField();
        boolean boolean51 = localTime26.equals((java.lang.Object) property49);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test04311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04311");
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.TimeOfDay timeOfDay5 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime8 = timeOfDay5.toDateTime((org.joda.time.ReadableInstant) instant7);
        org.joda.time.Chronology chronology9 = instant7.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.clockhourOfHalfday();
        org.joda.time.DurationField durationField11 = chronology9.eras();
        org.joda.time.DateTimeField dateTimeField12 = dateTimeFieldType2.getField(chronology9);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(10, 0);
        org.joda.time.Chronology chronology16 = chronology9.withZone(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField17 = chronology16.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay18 = new org.joda.time.TimeOfDay(53942, 910, chronology16);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53942 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test04312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04312");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime.Property property2 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime3 = property2.roundFloorCopy();
        org.joda.time.LocalTime localTime5 = property2.setCopy(0);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean8 = localDate6.isSupported(dateTimeFieldType7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = localDate6.toDateMidnight(dateTimeZone9);
        org.joda.time.DateTime dateTime11 = localDate6.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property12 = localDate6.yearOfEra();
        org.joda.time.LocalDate.Property property13 = localDate6.year();
        org.joda.time.LocalDate.Property property14 = localDate6.dayOfMonth();
        java.util.Date date18 = new java.util.Date(0, (int) '4', 0);
        int int19 = date18.getMinutes();
        org.joda.time.YearMonthDay yearMonthDay20 = org.joda.time.YearMonthDay.fromDateFields(date18);
        int int21 = yearMonthDay20.getYear();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay20.minus(readablePeriod22);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.YearMonthDay yearMonthDay26 = yearMonthDay20.withPeriodAdded(readablePeriod24, 2022);
        int int27 = localDate6.compareTo((org.joda.time.ReadablePartial) yearMonthDay26);
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay26.withMonthOfYear(6);
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay29.plusYears(53965423);
        org.joda.time.LocalDate localDate32 = yearMonthDay31.toLocalDate();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean33 = localTime5.isBefore((org.joda.time.ReadablePartial) localDate32);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
// flaky:         org.junit.Assert.assertEquals(date18.toString(), "Sat Apr 30 00:00:00 GMT+00:00 1904");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1904 + "'", int21 == 1904);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(localDate32);
    }

    @Test
    public void test04313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04313");
        long long6 = java.util.Date.UTC(54576831, 54023014, 17, 900, 0, 55);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1864343036808055000L + "'", long6 == 1864343036808055000L);
    }

    @Test
    public void test04314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04314");
        org.joda.time.TimeOfDay timeOfDay5 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime8 = timeOfDay5.toDateTime((org.joda.time.ReadableInstant) instant7);
        org.joda.time.Chronology chronology9 = instant7.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.millis();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(816, 43, 428, chronology9);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 43 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test04315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04315");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.withDurationAdded((long) 2, 100);
        org.joda.time.LocalDate localDate6 = dateMidnight2.toLocalDate();
        org.joda.time.LocalDate localDate8 = localDate6.withYearOfEra((int) '#');
        org.joda.time.LocalDate localDate10 = localDate6.minusMonths((int) (byte) 1);
        org.joda.time.LocalDate localDate12 = localDate6.withMonthOfYear(8);
        org.joda.time.Instant instant14 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone15 = instant14.getZone();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTime dateTime19 = dateTime16.withDurationAdded(readableDuration17, (int) (byte) 0);
        org.joda.time.DateTime dateTime21 = dateTime16.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime23 = dateTime21.plusMinutes((int) (byte) 10);
        org.joda.time.DateTime.Property property24 = dateTime23.dayOfWeek();
        org.joda.time.DateTime dateTime26 = dateTime23.withYear(0);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean29 = localDate27.isSupported(dateTimeFieldType28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = localDate27.toDateMidnight(dateTimeZone30);
        org.joda.time.DateTime dateTime32 = localDate27.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property33 = localDate27.yearOfEra();
        org.joda.time.LocalDate localDate35 = localDate27.minusMonths((int) (byte) -1);
        org.joda.time.DurationFieldType durationFieldType36 = org.joda.time.DurationFieldType.halfdays();
        boolean boolean37 = localDate35.isSupported(durationFieldType36);
        org.joda.time.DateTime dateTime39 = dateTime23.withFieldAdded(durationFieldType36, (-11491200));
        java.lang.String str40 = durationFieldType36.getName();
        boolean boolean41 = localDate6.isSupported(durationFieldType36);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DurationFieldType durationFieldType43 = dateTimeFieldType42.getDurationType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate45 = localDate6.withField(dateTimeFieldType42, 1900);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'millisOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "halfdays" + "'", str40, "halfdays");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(durationFieldType43);
    }

    @Test
    public void test04316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04316");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay.Property property3 = timeOfDay2.minuteOfHour();
        java.lang.String str4 = property3.getAsShortText();
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime10 = timeOfDay7.toDateTime((org.joda.time.ReadableInstant) instant9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.DateTime dateTime13 = dateTime10.withPeriodAdded(readablePeriod11, (int) (short) 0);
        int int14 = property3.compareTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime15 = dateTime10.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime17 = dateTime15.plusHours(23);
        org.joda.time.TimeOfDay timeOfDay21 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant23 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime24 = timeOfDay21.toDateTime((org.joda.time.ReadableInstant) instant23);
        org.joda.time.Chronology chronology25 = instant23.getChronology();
        org.joda.time.TimeOfDay timeOfDay28 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant30 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime31 = timeOfDay28.toDateTime((org.joda.time.ReadableInstant) instant30);
        int[] intArray33 = chronology25.get((org.joda.time.ReadablePartial) timeOfDay28, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(0L, chronology25);
        int int35 = mutableDateTime34.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime34.property(dateTimeFieldType36);
        org.joda.time.MutableDateTime mutableDateTime38 = property37.roundHalfEven();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime38.property(dateTimeFieldType39);
        mutableDateTime38.setDayOfMonth(3);
        mutableDateTime38.setMinuteOfDay(35);
        boolean boolean45 = mutableDateTime38.isBeforeNow();
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime38.yearOfCentury();
        mutableDateTime38.setDayOfYear(16);
        org.joda.time.DateTimeZone dateTimeZone49 = mutableDateTime38.getZone();
        org.joda.time.MutableDateTime mutableDateTime50 = dateTime15.toMutableDateTime(dateTimeZone49);
        mutableDateTime50.addSeconds(22);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1" + "'", str4, "1");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(mutableDateTime50);
    }

    @Test
    public void test04317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04317");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        int int17 = mutableDateTime16.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime16.property(dateTimeFieldType18);
        int int20 = property19.getMaximumValueOverall();
        int int21 = property19.getMinimumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime23 = property19.add((long) 52);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime23.setSecondOfMinute(1970);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1970 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 12 + "'", int20 == 12);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime23);
    }

    @Test
    public void test04318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04318");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.withWeekyear(2);
        org.joda.time.DateMidnight.Property property7 = dateMidnight2.weekOfWeekyear();
        java.lang.String str8 = property7.getAsString();
        org.joda.time.DateMidnight dateMidnight10 = property7.addWrapFieldToCopy(8);
        org.joda.time.DateMidnight.Property property11 = dateMidnight10.yearOfEra();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        java.lang.String str13 = dateTimeField12.getName();
        java.lang.String str15 = dateTimeField12.getAsShortText((long) 54055963);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "yearOfEra" + "'", str13, "yearOfEra");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1970" + "'", str15, "1970");
    }

    @Test
    public void test04319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04319");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(20999055490089L);
    }

    @Test
    public void test04320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04320");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.DateTime dateTime3 = timeOfDay2.toDateTimeToday();
        org.joda.time.DateTime dateTime5 = dateTime3.plusWeeks((int) '4');
        org.joda.time.DateTime.Property property6 = dateTime5.weekyear();
        org.joda.time.DateTime.Property property7 = dateTime5.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test04321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04321");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTime((org.joda.time.ReadableInstant) instant6);
        org.joda.time.Chronology chronology8 = instant6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.clockhourOfHalfday();
        org.joda.time.DurationField durationField10 = chronology8.eras();
        org.joda.time.DateTimeField dateTimeField11 = dateTimeFieldType1.getField(chronology8);
        long long14 = dateTimeField11.add((long) (short) 100, (long) (byte) -1);
        boolean boolean15 = dateTimeField11.isSupported();
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime22 = timeOfDay19.toDateTime((org.joda.time.ReadableInstant) instant21);
        org.joda.time.Chronology chronology23 = instant21.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.clockhourOfHalfday();
        long long26 = dateTimeField24.roundHalfFloor(0L);
        java.util.Locale locale27 = java.util.Locale.TRADITIONAL_CHINESE;
        int int28 = dateTimeField24.getMaximumShortTextLength(locale27);
        java.lang.String str29 = locale27.getLanguage();
        java.util.Locale locale30 = locale27.stripExtensions();
        java.lang.String str31 = dateTimeField11.getAsShortText((long) 10, locale27);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight34.withWeekyear(2);
        org.joda.time.DateMidnight.Property property39 = dateMidnight34.weekOfWeekyear();
        java.lang.String str40 = property39.getAsString();
        java.util.Locale locale41 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale42 = locale41.stripExtensions();
        int int43 = property39.getMaximumTextLength(locale41);
        java.lang.String str44 = locale27.getDisplayCountry(locale41);
        java.lang.String str47 = nameProvider0.getName(locale27, "Tue Apr 30 00:00:00 UTC 1912", "\u897f\u5143");
        java.lang.String str48 = locale27.getISO3Language();
        java.util.Set<java.lang.String> strSet49 = locale27.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-2678399900L) + "'", long14 == (-2678399900L));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "zh" + "'", str29, "zh");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\u4e00\u6708" + "'", str31, "\u4e00\u6708");
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1" + "'", str40, "1");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\u53f0\u7063" + "'", str44, "\u53f0\u7063");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "zho" + "'", str48, "zho");
        org.junit.Assert.assertNotNull(strSet49);
    }

    @Test
    public void test04322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04322");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.withDurationAdded((long) 2, 100);
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.withSecondOfMinute((int) (byte) 1);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight5.withFields((org.joda.time.ReadablePartial) timeOfDay10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.withDayOfMonth(4);
        org.joda.time.DateMidnight.Property property14 = dateMidnight13.centuryOfEra();
        int int15 = dateMidnight13.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test04323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04323");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.withSecondOfMinute((int) (byte) 1);
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay7 = property5.addWrapFieldToCopy(1);
        org.joda.time.TimeOfDay timeOfDay9 = property5.addWrapFieldToCopy((int) (byte) 1);
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay9.minusSeconds(13);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType13 = timeOfDay9.getFieldType(54007846);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 54007846");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay11);
    }

    @Test
    public void test04324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04324");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTime((org.joda.time.ReadableInstant) instant6);
        org.joda.time.Chronology chronology8 = instant6.getChronology();
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime14 = timeOfDay11.toDateTime((org.joda.time.ReadableInstant) instant13);
        int[] intArray16 = chronology8.get((org.joda.time.ReadablePartial) timeOfDay11, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(0L, chronology8);
        mutableDateTime17.setYear(3);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone22 = instant21.getZone();
        mutableDateTime17.setZone(dateTimeZone22);
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime(0L, dateTimeZone22);
        java.util.TimeZone timeZone25 = dateTimeZone22.toTimeZone();
        org.joda.time.TimeOfDay timeOfDay30 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant32 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime33 = timeOfDay30.toDateTime((org.joda.time.ReadableInstant) instant32);
        org.joda.time.Chronology chronology34 = instant32.getChronology();
        org.joda.time.TimeOfDay timeOfDay37 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant39 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime40 = timeOfDay37.toDateTime((org.joda.time.ReadableInstant) instant39);
        int[] intArray42 = chronology34.get((org.joda.time.ReadablePartial) timeOfDay37, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime(0L, chronology34);
        mutableDateTime43.setYear(3);
        org.joda.time.Instant instant47 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone48 = instant47.getZone();
        mutableDateTime43.setZone(dateTimeZone48);
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime(0L, dateTimeZone48);
        java.util.TimeZone timeZone51 = dateTimeZone48.toTimeZone();
        boolean boolean52 = timeZone25.hasSameRules(timeZone51);
        org.joda.time.TimeOfDay timeOfDay55 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant57 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime58 = timeOfDay55.toDateTime((org.joda.time.ReadableInstant) instant57);
        org.joda.time.Chronology chronology59 = instant57.getChronology();
        org.joda.time.DateTimeField dateTimeField60 = chronology59.clockhourOfHalfday();
        long long62 = dateTimeField60.roundHalfFloor(0L);
        java.util.Locale locale63 = java.util.Locale.TRADITIONAL_CHINESE;
        int int64 = dateTimeField60.getMaximumShortTextLength(locale63);
        java.util.Locale locale65 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale66 = locale65.stripExtensions();
        java.util.Locale locale67 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale68 = locale67.stripExtensions();
        java.lang.String str69 = locale65.getDisplayName(locale67);
        java.lang.String str70 = locale63.getDisplayLanguage(locale65);
        java.util.Calendar calendar71 = java.util.Calendar.getInstance(timeZone51, locale65);
        java.lang.String str72 = timeZone51.getID();
        timeZone51.setID("23");
        java.util.Calendar calendar75 = java.util.Calendar.getInstance(timeZone51);
        java.lang.Object obj76 = calendar75.clone();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(timeZone51);
        org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str69, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "\u4e2d\u6587" + "'", str70, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(calendar71);
// flaky:         org.junit.Assert.assertEquals(calendar71.toString(), "java.util.GregorianCalendar[time=1645455722045,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=23,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=2,MILLISECOND=45,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "UTC" + "'", str72, "UTC");
        org.junit.Assert.assertNotNull(calendar75);
// flaky:         org.junit.Assert.assertEquals(calendar75.toString(), "java.util.GregorianCalendar[time=1645455722045,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=23,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=2,MILLISECOND=45,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(obj76);
// flaky:         org.junit.Assert.assertEquals(obj76.toString(), "java.util.GregorianCalendar[time=1645455722045,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=23,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=2,MILLISECOND=45,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj76), "java.util.GregorianCalendar[time=1645455722045,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=23,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=2,MILLISECOND=45,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj76), "java.util.GregorianCalendar[time=1645455722045,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=23,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=2,MILLISECOND=45,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test04325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04325");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime5 = timeOfDay2.toDateTime((org.joda.time.ReadableInstant) instant4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime8 = dateTime5.withDurationAdded(readableDuration6, (int) (short) 1);
        int int9 = dateTime5.getDayOfYear();
        int int10 = dateTime5.getDayOfMonth();
        org.joda.time.TimeOfDay timeOfDay15 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant17 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime18 = timeOfDay15.toDateTime((org.joda.time.ReadableInstant) instant17);
        org.joda.time.Chronology chronology19 = instant17.getChronology();
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime25 = timeOfDay22.toDateTime((org.joda.time.ReadableInstant) instant24);
        int[] intArray27 = chronology19.get((org.joda.time.ReadablePartial) timeOfDay22, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(0L, chronology19);
        mutableDateTime28.setYear(3);
        org.joda.time.Instant instant32 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone33 = instant32.getZone();
        mutableDateTime28.setZone(dateTimeZone33);
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(dateTimeZone33);
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((long) '#', dateTimeZone33);
        org.joda.time.Chronology chronology37 = localTime36.getChronology();
        org.joda.time.DateTime dateTime38 = dateTime5.withChronology(chronology37);
        org.joda.time.TimeOfDay timeOfDay41 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant43 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime44 = timeOfDay41.toDateTime((org.joda.time.ReadableInstant) instant43);
        org.joda.time.Chronology chronology45 = instant43.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.clockhourOfHalfday();
        org.joda.time.DurationField durationField47 = chronology45.eras();
        org.joda.time.DateTimeField dateTimeField48 = chronology45.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone49 = chronology45.getZone();
        org.joda.time.DateTime dateTime50 = dateTime5.withZone(dateTimeZone49);
        int int51 = dateTime5.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 365 + "'", int9 == 365);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 31 + "'", int10 == 31);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
    }

    @Test
    public void test04326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04326");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) ' ');
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean4 = localDate2.isSupported(dateTimeFieldType3);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = localDate2.toDateMidnight(dateTimeZone5);
        org.joda.time.DateTime dateTime7 = localDate2.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property8 = localDate2.yearOfEra();
        org.joda.time.LocalDate.Property property9 = localDate2.weekyear();
        boolean boolean10 = localDate1.isAfter((org.joda.time.ReadablePartial) localDate2);
        int int11 = localDate1.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.LocalDate.Property property13 = localDate1.property(dateTimeFieldType12);
        int int14 = localDate1.getDayOfMonth();
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.eras();
        boolean boolean16 = localDate1.isSupported(durationFieldType15);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate18 = localDate1.withYearOfCentury(2054);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2054 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test04327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04327");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime22 = timeOfDay19.toDateTime((org.joda.time.ReadableInstant) instant21);
        org.joda.time.Chronology chronology23 = instant21.getChronology();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        int[] intArray31 = chronology23.get((org.joda.time.ReadablePartial) timeOfDay26, (long) (short) -1);
        mutableDateTime16.setChronology(chronology23);
        boolean boolean33 = mutableDateTime16.isEqualNow();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime16.secondOfDay();
        boolean boolean35 = mutableDateTime16.isAfterNow();
        int int36 = mutableDateTime16.getEra();
        int int37 = mutableDateTime16.getEra();
        mutableDateTime16.addHours((-11491200));
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime16.year();
        org.joda.time.DurationField durationField41 = property40.getRangeDurationField();
        org.joda.time.MutableDateTime mutableDateTime42 = property40.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime43 = property40.getMutableDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime44 = new org.joda.time.LocalTime((java.lang.Object) property40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.MutableDateTime$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNull(durationField41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(mutableDateTime43);
    }

    @Test
    public void test04328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04328");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.plusMonths((int) (short) 0);
        org.joda.time.DateTime dateTime3 = localDate0.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.LocalDate.Property property5 = localDate0.property(dateTimeFieldType4);
        org.joda.time.LocalDate localDate6 = property5.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
    }

    @Test
    public void test04329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04329");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        int[] intArray3 = timeOfDay2.getValues();
        org.joda.time.TimeOfDay timeOfDay6 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime9 = timeOfDay6.toDateTime((org.joda.time.ReadableInstant) instant8);
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay6.minusMinutes((int) '4');
        int int12 = timeOfDay2.compareTo((org.joda.time.ReadablePartial) timeOfDay6);
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay2.minusMinutes((int) '#');
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay2.minusMinutes(23);
        org.joda.time.TimeOfDay timeOfDay18 = timeOfDay2.plusMinutes(70);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay18.plus(readablePeriod19);
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay18.withSecondOfMinute(46);
        org.joda.time.DateTime dateTime23 = timeOfDay22.toDateTimeToday();
        int int24 = timeOfDay22.size();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
    }

    @Test
    public void test04330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04330");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant1 = org.joda.time.Instant.parse("\ufffd");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"?\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04331");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(53942, 2001, 960);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53942 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04332");
        java.util.Date date3 = new java.util.Date(0, (int) '4', 0);
        int int4 = date3.getMinutes();
        org.joda.time.YearMonthDay yearMonthDay5 = org.joda.time.YearMonthDay.fromDateFields(date3);
        org.joda.time.DateTime dateTime6 = yearMonthDay5.toDateTimeAtMidnight();
        org.joda.time.DateTime.Property property7 = dateTime6.millisOfDay();
        org.joda.time.DateTime dateTime8 = property7.getDateTime();
        int int9 = property7.getLeapAmount();
        org.joda.time.DateTime dateTime11 = property7.addToCopy((long) 36000100);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.plus(readablePeriod12);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Sat Apr 30 00:00:00 GMT+00:00 1904");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test04333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04333");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime5 = timeOfDay2.toDateTime((org.joda.time.ReadableInstant) instant4);
        org.joda.time.Chronology chronology6 = instant4.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.millis();
        org.joda.time.DateTimeZone dateTimeZone8 = chronology6.getZone();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.dayOfYear();
        java.util.Locale locale11 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str12 = locale11.getDisplayLanguage();
        java.lang.String str13 = locale11.getISO3Language();
        java.lang.String str14 = dateTimeField9.getAsShortText(960, locale11);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Chinese" + "'", str12, "Chinese");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "zho" + "'", str13, "zho");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "960" + "'", str14, "960");
    }

    @Test
    public void test04334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04334");
        java.util.Locale locale0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.setDefault(locale0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Can't set default locale to NULL");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04335");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.plusMonths((int) (short) 0);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears(70);
        org.joda.time.LocalDate.Property property5 = localDate2.dayOfMonth();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean8 = localDate6.isSupported(dateTimeFieldType7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = localDate6.toDateMidnight(dateTimeZone9);
        org.joda.time.LocalDate localDate12 = localDate6.minusMonths((int) (short) 10);
        int int13 = localDate6.getDayOfYear();
        org.joda.time.LocalDate localDate14 = localDate2.withFields((org.joda.time.ReadablePartial) localDate6);
        org.joda.time.LocalDate localDate16 = localDate2.plusMonths(795);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
    }

    @Test
    public void test04336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04336");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = new java.util.Date("DateTimeField[hourOfHalfday]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04337");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 52);
    }

    @Test
    public void test04338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04338");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        int int17 = mutableDateTime16.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime16.property(dateTimeFieldType18);
        org.joda.time.MutableDateTime mutableDateTime20 = property19.roundHalfEven();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime20.property(dateTimeFieldType21);
        mutableDateTime20.setDayOfMonth(3);
        mutableDateTime20.setMinuteOfDay(35);
        mutableDateTime20.setMillis((long) 15);
        org.joda.time.Chronology chronology29 = mutableDateTime20.getChronology();
        java.util.GregorianCalendar gregorianCalendar30 = mutableDateTime20.toGregorianCalendar();
        // The following exception was thrown during execution in test generation
        try {
            int int32 = gregorianCalendar30.getMaximum(22);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 22");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(gregorianCalendar30);
    }

    @Test
    public void test04339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04339");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime22 = timeOfDay19.toDateTime((org.joda.time.ReadableInstant) instant21);
        org.joda.time.Chronology chronology23 = instant21.getChronology();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        int[] intArray31 = chronology23.get((org.joda.time.ReadablePartial) timeOfDay26, (long) (short) -1);
        mutableDateTime16.setChronology(chronology23);
        boolean boolean33 = mutableDateTime16.isEqualNow();
        org.joda.time.ReadableDuration readableDuration34 = null;
        mutableDateTime16.add(readableDuration34);
        mutableDateTime16.addMillis(0);
        mutableDateTime16.setHourOfDay(0);
        mutableDateTime16.setYear(70);
        mutableDateTime16.addSeconds(54004294);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test04340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04340");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = localDate0.toDateMidnight(dateTimeZone3);
        org.joda.time.LocalDate localDate5 = dateMidnight4.toLocalDate();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.minusYears(917);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateMidnight7);
    }

    @Test
    public void test04341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04341");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusSeconds(12);
        int int3 = localDateTime0.getYear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.withMillisOfDay(54022);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(localDateTime5);
    }

    @Test
    public void test04342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04342");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.lang.String str1 = locale0.getCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "JP" + "'", str1, "JP");
    }

    @Test
    public void test04343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04343");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.ReadablePeriod readablePeriod1 = null;
        org.joda.time.YearMonthDay yearMonthDay2 = yearMonthDay0.plus(readablePeriod1);
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay2.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay5 = property3.addToCopy((int) 'a');
        org.joda.time.YearMonthDay yearMonthDay7 = property3.addWrapFieldToCopy(14);
        org.joda.time.DurationField durationField8 = property3.getDurationField();
        int int9 = property3.get();
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 21 + "'", int9 == 21);
    }

    @Test
    public void test04344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04344");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay.Property property3 = timeOfDay2.minuteOfHour();
        java.lang.String str4 = property3.getAsShortText();
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime10 = timeOfDay7.toDateTime((org.joda.time.ReadableInstant) instant9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.DateTime dateTime13 = dateTime10.withPeriodAdded(readablePeriod11, (int) (short) 0);
        int int14 = property3.compareTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime15 = dateTime10.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((java.lang.Object) dateTime10);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime16.minus(readablePeriod17);
        org.joda.time.DateTime dateTime20 = dateTime16.withYear(31);
        org.joda.time.DateTime dateTime22 = dateTime16.plusWeeks(23);
        org.joda.time.DateTime dateTime24 = dateTime16.plus(592888L);
        org.joda.time.DateTime dateTime26 = dateTime16.plusWeeks(42);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1" + "'", str4, "1");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test04345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04345");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(54559, 828, 37);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54559 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04346");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.withDurationAdded(readableDuration4, (int) (byte) 0);
        org.joda.time.DateTime dateTime8 = dateTime3.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime10 = dateTime8.plusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime12 = dateTime10.plusDays(2);
        org.joda.time.TimeOfDay timeOfDay13 = dateTime12.toTimeOfDay();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay13.plus(readablePeriod14);
        org.joda.time.Instant instant17 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone18 = instant17.getZone();
        org.joda.time.MutableDateTime mutableDateTime19 = instant17.toMutableDateTimeISO();
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay.Property property23 = timeOfDay22.minuteOfHour();
        java.lang.String str24 = property23.getAsShortText();
        org.joda.time.TimeOfDay timeOfDay27 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant29 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime30 = timeOfDay27.toDateTime((org.joda.time.ReadableInstant) instant29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.DateTime dateTime33 = dateTime30.withPeriodAdded(readablePeriod31, (int) (short) 0);
        int int34 = property23.compareTo((org.joda.time.ReadableInstant) dateTime30);
        boolean boolean35 = mutableDateTime19.isBefore((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.TimeOfDay timeOfDay38 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant40 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime41 = timeOfDay38.toDateTime((org.joda.time.ReadableInstant) instant40);
        org.joda.time.Chronology chronology42 = instant40.getChronology();
        org.joda.time.DurationField durationField43 = chronology42.millis();
        org.joda.time.DateTimeField dateTimeField44 = chronology42.monthOfYear();
        mutableDateTime19.setChronology(chronology42);
        org.joda.time.TimeOfDay timeOfDay46 = timeOfDay13.withChronologyRetainFields(chronology42);
        org.joda.time.TimeOfDay timeOfDay48 = timeOfDay46.minusMillis(122);
        int int49 = timeOfDay48.size();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1" + "'", str24, "1");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(timeOfDay46);
        org.junit.Assert.assertNotNull(timeOfDay48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 4 + "'", int49 == 4);
    }

    @Test
    public void test04347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04347");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime10 = timeOfDay7.toDateTime((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Chronology chronology11 = instant9.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.clockhourOfHalfday();
        long long14 = dateTimeField12.roundHalfFloor(0L);
        java.util.Locale locale15 = java.util.Locale.TRADITIONAL_CHINESE;
        int int16 = dateTimeField12.getMaximumShortTextLength(locale15);
        java.lang.String str17 = locale15.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket((-1L), chronology4, locale15);
        java.util.Locale locale19 = dateTimeParserBucket18.getLocale();
        long long22 = dateTimeParserBucket18.computeMillis(true, "");
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.TimeOfDay timeOfDay27 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant29 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime30 = timeOfDay27.toDateTime((org.joda.time.ReadableInstant) instant29);
        org.joda.time.Chronology chronology31 = instant29.getChronology();
        org.joda.time.TimeOfDay timeOfDay34 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant36 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime37 = timeOfDay34.toDateTime((org.joda.time.ReadableInstant) instant36);
        int[] intArray39 = chronology31.get((org.joda.time.ReadablePartial) timeOfDay34, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime(0L, chronology31);
        org.joda.time.TimeOfDay timeOfDay43 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant45 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime46 = timeOfDay43.toDateTime((org.joda.time.ReadableInstant) instant45);
        org.joda.time.Chronology chronology47 = instant45.getChronology();
        org.joda.time.TimeOfDay timeOfDay50 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant52 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime53 = timeOfDay50.toDateTime((org.joda.time.ReadableInstant) instant52);
        int[] intArray55 = chronology47.get((org.joda.time.ReadablePartial) timeOfDay50, (long) (short) -1);
        mutableDateTime40.setChronology(chronology47);
        org.joda.time.DateTimeField dateTimeField57 = dateTimeFieldType23.getField(chronology47);
        java.util.Locale locale59 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale60 = locale59.stripExtensions();
        dateTimeParserBucket18.saveField(dateTimeFieldType23, "hi!", locale60);
        java.lang.String str62 = locale60.getLanguage();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = dateTimeFormatter2.withLocale(locale60);
        org.joda.time.format.DateTimeParser dateTimeParser64 = dateTimeFormatter63.getParser();
        java.util.Locale locale65 = dateTimeFormatter63.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime67 = dateTimeFormatter63.parseLocalDateTime("Property[millisOfSecond]");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "zh" + "'", str17, "zh");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L) + "'", long22 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "zh" + "'", str62, "zh");
        org.junit.Assert.assertNotNull(dateTimeFormatter63);
        org.junit.Assert.assertNull(dateTimeParser64);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "zh_TW");
    }

    @Test
    public void test04348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04348");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime5 = timeOfDay2.toDateTime((org.joda.time.ReadableInstant) instant4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.DateTime dateTime8 = dateTime5.withPeriodAdded(readablePeriod6, (int) (short) 0);
        org.joda.time.DateTime.Property property9 = dateTime5.hourOfDay();
        org.joda.time.LocalTime localTime10 = dateTime5.toLocalTime();
        org.joda.time.Chronology chronology11 = localTime10.getChronology();
        org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime.Property property14 = localTime13.hourOfDay();
        org.joda.time.LocalTime localTime15 = property14.roundFloorCopy();
        org.joda.time.LocalTime localTime17 = property14.setCopy(0);
        org.joda.time.LocalTime localTime19 = property14.addWrapFieldToCopy(19);
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean26 = interval22.abuts((org.joda.time.ReadableInterval) interval25);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.withWeekyear(2);
        boolean boolean32 = interval22.isBefore((org.joda.time.ReadableInstant) dateMidnight29);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Interval interval34 = interval22.withDurationAfterStart(readableDuration33);
        org.joda.time.Duration duration35 = interval22.toDuration();
        org.joda.time.Interval interval38 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval41 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean42 = interval38.abuts((org.joda.time.ReadableInterval) interval41);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone44);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight45.withWeekyear(2);
        boolean boolean48 = interval38.isBefore((org.joda.time.ReadableInstant) dateMidnight45);
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Interval interval50 = interval38.withDurationAfterStart(readableDuration49);
        org.joda.time.Duration duration51 = interval38.toDuration();
        int int52 = duration35.compareTo((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Period period53 = duration35.toPeriod();
        org.joda.time.LocalTime localTime54 = localTime19.minus((org.joda.time.ReadablePeriod) period53);
        org.joda.time.LocalTime localTime55 = localTime10.plus((org.joda.time.ReadablePeriod) period53);
        org.joda.time.LocalTime.Property property56 = localTime55.millisOfDay();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(property56);
    }

    @Test
    public void test04349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04349");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale locale2 = java.util.Locale.KOREA;
        java.util.Locale locale3 = locale2.stripExtensions();
        java.lang.String str4 = locale3.getISO3Country();
        java.util.Locale.Builder builder5 = builder0.setLocale(locale3);
        java.util.Locale.Builder builder6 = builder0.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder0.setScript("en");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: en [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "KOR" + "'", str4, "KOR");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test04350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04350");
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant10 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime11 = timeOfDay8.toDateTime((org.joda.time.ReadableInstant) instant10);
        org.joda.time.Chronology chronology12 = instant10.getChronology();
        org.joda.time.TimeOfDay timeOfDay15 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant17 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime18 = timeOfDay15.toDateTime((org.joda.time.ReadableInstant) instant17);
        int[] intArray20 = chronology12.get((org.joda.time.ReadablePartial) timeOfDay15, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(0L, chronology12);
        org.joda.time.TimeOfDay timeOfDay24 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant26 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime27 = timeOfDay24.toDateTime((org.joda.time.ReadableInstant) instant26);
        org.joda.time.Chronology chronology28 = instant26.getChronology();
        org.joda.time.TimeOfDay timeOfDay31 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant33 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime34 = timeOfDay31.toDateTime((org.joda.time.ReadableInstant) instant33);
        int[] intArray36 = chronology28.get((org.joda.time.ReadablePartial) timeOfDay31, (long) (short) -1);
        mutableDateTime21.setChronology(chronology28);
        boolean boolean38 = mutableDateTime21.isEqualNow();
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime21.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime41 = property39.set(15);
        org.joda.time.MutableDateTime mutableDateTime42 = property39.roundFloor();
        mutableDateTime42.addMillis(42);
        org.joda.time.TimeOfDay timeOfDay50 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant52 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime53 = timeOfDay50.toDateTime((org.joda.time.ReadableInstant) instant52);
        org.joda.time.Chronology chronology54 = instant52.getChronology();
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight((java.lang.Object) (-11491200000L), chronology54);
        org.joda.time.DateTimeField dateTimeField56 = chronology54.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField57 = chronology54.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay58 = new org.joda.time.TimeOfDay(0L, chronology54);
        org.joda.time.Chronology chronology59 = timeOfDay58.getChronology();
        org.joda.time.TimeOfDay timeOfDay62 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay.Property property63 = timeOfDay62.minuteOfHour();
        java.lang.String str64 = property63.getAsShortText();
        org.joda.time.TimeOfDay timeOfDay67 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant69 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime70 = timeOfDay67.toDateTime((org.joda.time.ReadableInstant) instant69);
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.DateTime dateTime73 = dateTime70.withPeriodAdded(readablePeriod71, (int) (short) 0);
        int int74 = property63.compareTo((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.DateTime dateTime75 = dateTime70.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime((java.lang.Object) dateTime70);
        org.joda.time.ReadablePeriod readablePeriod77 = null;
        org.joda.time.DateTime dateTime78 = dateTime76.minus(readablePeriod77);
        org.joda.time.DateTimeZone dateTimeZone81 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(10, 0);
        java.lang.String str82 = dateTimeZone81.toString();
        org.joda.time.MutableDateTime mutableDateTime83 = new org.joda.time.MutableDateTime((java.lang.Object) readablePeriod77, dateTimeZone81);
        org.joda.time.DateTime dateTime84 = timeOfDay58.toDateTimeToday(dateTimeZone81);
        java.lang.String str86 = dateTimeZone81.getNameKey((long) 5);
        org.joda.time.MutableDateTime mutableDateTime87 = new org.joda.time.MutableDateTime((long) (-11491200), dateTimeZone81);
        boolean boolean89 = dateTimeZone81.isStandardOffset((long) 22);
        java.lang.String str91 = dateTimeZone81.getNameKey(360000000L);
        mutableDateTime42.setZone(dateTimeZone81);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime93 = new org.joda.time.DateTime(910, 37, 0, 2922789, (int) ' ', dateTimeZone81);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2922789 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "1" + "'", str64, "1");
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTimeZone81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "+10:00" + "'", str82, "+10:00");
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNull(str91);
    }

    @Test
    public void test04351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04351");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.Chronology chronology1 = localDateTime0.getChronology();
        int int2 = localDateTime0.size();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withMillisOfDay(2);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = localDateTime0.getFieldTypes();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
    }

    @Test
    public void test04352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04352");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.withWeekyear(2);
        org.joda.time.DateMidnight.Property property7 = dateMidnight2.weekOfWeekyear();
        java.lang.String str8 = property7.getAsString();
        org.joda.time.DateMidnight dateMidnight10 = property7.addWrapFieldToCopy(8);
        org.joda.time.DateMidnight.Property property11 = dateMidnight10.yearOfEra();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight10.withDayOfMonth(21);
        int int14 = dateMidnight13.getEra();
        org.joda.time.TimeOfDay timeOfDay17 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime20 = timeOfDay17.toDateTime((org.joda.time.ReadableInstant) instant19);
        org.joda.time.Chronology chronology21 = instant19.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.clockhourOfHalfday();
        org.joda.time.DurationField durationField23 = chronology21.eras();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField25 = chronology21.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight13.withChronology(chronology21);
        org.joda.time.Chronology chronology27 = dateMidnight26.getChronology();
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight26.minusWeeks((int) (byte) 0);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateMidnight29);
    }

    @Test
    public void test04353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04353");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight3.withWeekyear(2);
        org.joda.time.DateTimeZone dateTimeZone8 = dateMidnight3.getZone();
        long long12 = dateTimeZone8.convertLocalToUTC(0L, true, (long) 5);
        java.util.Locale locale14 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str15 = dateTimeZone8.getName((-1L), locale14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 7, dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withYearOfEra(53979631);
        java.lang.String str19 = localDateTime18.toString();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withMillisOfDay(46);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withYearOfEra(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for yearOfEra must be in the range [1,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00" + "'", str15, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "53979631-01-01T00:00:00.007" + "'", str19, "53979631-01-01T00:00:00.007");
        org.junit.Assert.assertNotNull(localDateTime21);
    }

    @Test
    public void test04354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04354");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.withWeekyear(2);
        org.joda.time.DateMidnight.Property property7 = dateMidnight2.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight10.withDurationAdded((long) 2, 100);
        int int14 = dateMidnight2.compareTo((org.joda.time.ReadableInstant) dateMidnight10);
        int int15 = dateMidnight2.getYearOfCentury();
        org.joda.time.DateMidnight.Property property16 = dateMidnight2.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now();
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.plusDays(5);
        int int21 = property16.compareTo((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime20.year();
        org.joda.time.LocalDateTime localDateTime24 = property22.addToCopy((long) 104);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withWeekyear((-5599531));
        int int27 = localDateTime26.getWeekyear();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 70 + "'", int15 == 70);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-5599531) + "'", int27 == (-5599531));
    }

    @Test
    public void test04355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04355");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        org.joda.time.DurationField durationField17 = chronology7.weeks();
        org.joda.time.DateTimeField dateTimeField18 = chronology7.monthOfYear();
        org.joda.time.Instant instant20 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone21 = instant20.getZone();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime25 = dateTime22.withDurationAdded(readableDuration23, (int) (byte) 0);
        org.joda.time.DateTime dateTime27 = dateTime22.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime29 = dateTime27.plusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime31 = dateTime29.plusDays(2);
        org.joda.time.TimeOfDay timeOfDay32 = dateTime31.toTimeOfDay();
        long long34 = chronology7.set((org.joda.time.ReadablePartial) timeOfDay32, 0L);
        org.joda.time.DateTimeField dateTimeField35 = chronology7.minuteOfDay();
        long long38 = dateTimeField35.getDifferenceAsLong(129600000L, 9L);
        long long40 = dateTimeField35.roundCeiling(9368185430000L);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(timeOfDay32);
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + 54722194L + "'", long34 == 54722194L);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 2159L + "'", long38 == 2159L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 9368185440000L + "'", long40 == 9368185440000L);
    }

    @Test
    public void test04356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04356");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.withDurationAdded(readableDuration4, (int) (byte) 0);
        org.joda.time.DateTime dateTime8 = dateTime3.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime10 = dateTime8.plusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime12 = dateTime10.plusDays(2);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int14 = dateTime12.get(dateTimeFieldType13);
        org.joda.time.DateTime dateTime16 = dateTime12.plusMillis(70);
        org.joda.time.DateTime dateTime18 = dateTime12.withMonthOfYear((int) (short) 1);
        org.joda.time.DateTime dateTime20 = dateTime18.withMinuteOfHour((int) (short) 1);
        org.joda.time.LocalTime localTime22 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime localTime24 = localTime22.minusMinutes((int) (short) 1);
        int int25 = localTime22.getMillisOfDay();
        org.joda.time.LocalTime.Property property26 = localTime22.millisOfSecond();
        org.joda.time.LocalTime localTime27 = property26.withMaximumValue();
        org.joda.time.DateTime dateTime28 = dateTime20.withFields((org.joda.time.ReadablePartial) localTime27);
        org.joda.time.TimeOfDay timeOfDay32 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant34 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime35 = timeOfDay32.toDateTime((org.joda.time.ReadableInstant) instant34);
        org.joda.time.Chronology chronology36 = instant34.getChronology();
        org.joda.time.TimeOfDay timeOfDay39 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant41 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime42 = timeOfDay39.toDateTime((org.joda.time.ReadableInstant) instant41);
        int[] intArray44 = chronology36.get((org.joda.time.ReadablePartial) timeOfDay39, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime(0L, chronology36);
        org.joda.time.TimeOfDay timeOfDay48 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant50 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime51 = timeOfDay48.toDateTime((org.joda.time.ReadableInstant) instant50);
        org.joda.time.Chronology chronology52 = instant50.getChronology();
        org.joda.time.TimeOfDay timeOfDay55 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant57 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime58 = timeOfDay55.toDateTime((org.joda.time.ReadableInstant) instant57);
        int[] intArray60 = chronology52.get((org.joda.time.ReadablePartial) timeOfDay55, (long) (short) -1);
        mutableDateTime45.setChronology(chronology52);
        mutableDateTime45.addMonths((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        mutableDateTime45.setZoneRetainFields(dateTimeZone64);
        org.joda.time.TimeOfDay timeOfDay69 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant71 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime72 = timeOfDay69.toDateTime((org.joda.time.ReadableInstant) instant71);
        org.joda.time.Chronology chronology73 = instant71.getChronology();
        org.joda.time.TimeOfDay timeOfDay76 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant78 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime79 = timeOfDay76.toDateTime((org.joda.time.ReadableInstant) instant78);
        int[] intArray81 = chronology73.get((org.joda.time.ReadablePartial) timeOfDay76, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime82 = new org.joda.time.MutableDateTime(0L, chronology73);
        org.joda.time.DurationField durationField83 = chronology73.weeks();
        org.joda.time.DurationField durationField84 = chronology73.months();
        mutableDateTime45.setChronology(chronology73);
        org.joda.time.DateTimeField dateTimeField86 = chronology73.millisOfDay();
        org.joda.time.DateTime dateTime87 = dateTime20.withChronology(chronology73);
        java.lang.String str88 = chronology73.toString();
        org.joda.time.DurationField durationField89 = chronology73.years();
        org.joda.time.DateTimeField dateTimeField90 = chronology73.era();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 15 + "'", int14 == 15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 35 + "'", int25 == 35);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(durationField83);
        org.junit.Assert.assertNotNull(durationField84);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "ISOChronology[UTC]" + "'", str88, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField89);
        org.junit.Assert.assertNotNull(dateTimeField90);
    }

    @Test
    public void test04357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04357");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.withEra(1);
        int int5 = dateMidnight4.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight4.withDurationAdded((long) 17, 54046399);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight4.minusWeeks(1971);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight10);
    }

    @Test
    public void test04358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04358");
        java.util.Locale locale3 = new java.util.Locale("\u516c\u5143", "0", "weekOfWeekyear");
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleKeys();
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant10 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime11 = timeOfDay8.toDateTime((org.joda.time.ReadableInstant) instant10);
        org.joda.time.Chronology chronology12 = instant10.getChronology();
        org.joda.time.TimeOfDay timeOfDay15 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant17 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime18 = timeOfDay15.toDateTime((org.joda.time.ReadableInstant) instant17);
        int[] intArray20 = chronology12.get((org.joda.time.ReadablePartial) timeOfDay15, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(0L, chronology12);
        org.joda.time.DurationField durationField22 = chronology12.weeks();
        org.joda.time.DateTimeField dateTimeField23 = chronology12.dayOfYear();
        org.joda.time.LocalTime localTime25 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime.Property property26 = localTime25.secondOfMinute();
        long long28 = chronology12.set((org.joda.time.ReadablePartial) localTime25, (-2678399900L));
        boolean boolean29 = strSet4.equals((java.lang.Object) chronology12);
        org.joda.time.DateTimeField dateTimeField30 = chronology12.hourOfDay();
        java.lang.String str31 = dateTimeField30.toString();
        org.junit.Assert.assertEquals(locale3.toString(), "\u516c\u5143_0_weekOfWeekyear");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-2678399965L) + "'", long28 == (-2678399965L));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "DateTimeField[hourOfDay]" + "'", str31, "DateTimeField[hourOfDay]");
    }

    @Test
    public void test04359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04359");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.withDurationAdded(readableDuration4, (int) (byte) 0);
        org.joda.time.DateTime dateTime7 = dateTime6.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime7.minusDays(4);
        int int10 = dateTime7.getDayOfYear();
        int int11 = dateTime7.getWeekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime13 = dateTime7.withMinuteOfHour(2678400);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2678400 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
    }

    @Test
    public void test04360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04360");
        org.joda.time.TimeOfDay timeOfDay5 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime8 = timeOfDay5.toDateTime((org.joda.time.ReadableInstant) instant7);
        org.joda.time.Chronology chronology9 = instant7.getChronology();
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((java.lang.Object) (-11491200000L), chronology9);
        org.joda.time.DateTimeField dateTimeField11 = chronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay13 = new org.joda.time.TimeOfDay(0L, chronology9);
        org.joda.time.Chronology chronology14 = timeOfDay13.getChronology();
        org.joda.time.TimeOfDay timeOfDay18 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant20 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime21 = timeOfDay18.toDateTime((org.joda.time.ReadableInstant) instant20);
        org.joda.time.Chronology chronology22 = instant20.getChronology();
        org.joda.time.TimeOfDay timeOfDay25 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant27 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime28 = timeOfDay25.toDateTime((org.joda.time.ReadableInstant) instant27);
        int[] intArray30 = chronology22.get((org.joda.time.ReadablePartial) timeOfDay25, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(0L, chronology22);
        org.joda.time.DurationField durationField32 = chronology22.weeks();
        org.joda.time.Chronology chronology33 = chronology22.withUTC();
        org.joda.time.TimeOfDay timeOfDay34 = timeOfDay13.withChronologyRetainFields(chronology33);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.TimeOfDay timeOfDay39 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant41 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime42 = timeOfDay39.toDateTime((org.joda.time.ReadableInstant) instant41);
        org.joda.time.Chronology chronology43 = instant41.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.clockhourOfHalfday();
        long long46 = dateTimeField44.roundHalfFloor(0L);
        java.util.Locale locale47 = java.util.Locale.TRADITIONAL_CHINESE;
        int int48 = dateTimeField44.getMaximumShortTextLength(locale47);
        java.lang.String str49 = locale47.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket((-1L), chronology36, locale47);
        int int51 = dateTimeParserBucket50.getOffset();
        java.util.Locale locale52 = dateTimeParserBucket50.getLocale();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket54 = new org.joda.time.format.DateTimeParserBucket(1645455561258L, chronology33, locale52, (java.lang.Integer) 29);
        org.joda.time.DurationField durationField55 = chronology33.eras();
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "zh" + "'", str49, "zh");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(durationField55);
    }

    @Test
    public void test04361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04361");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(150, 54005493, 7, 53937, 43);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53937 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04362");
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        int[] intArray9 = timeOfDay8.getValues();
        org.joda.time.TimeOfDay timeOfDay12 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant14 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime15 = timeOfDay12.toDateTime((org.joda.time.ReadableInstant) instant14);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay12.minusMinutes((int) '4');
        int int18 = timeOfDay8.compareTo((org.joda.time.ReadablePartial) timeOfDay12);
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay8.minusMinutes((int) '#');
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay8.minusMinutes(23);
        org.joda.time.TimeOfDay timeOfDay24 = timeOfDay8.plusMinutes(70);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.TimeOfDay timeOfDay26 = timeOfDay24.plus(readablePeriod25);
        org.joda.time.TimeOfDay timeOfDay28 = timeOfDay24.withMillisOfSecond(0);
        org.joda.time.LocalTime localTime30 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime localTime32 = localTime30.minusMinutes((int) (short) 1);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.seconds();
        boolean boolean34 = localTime30.isSupported(durationFieldType33);
        org.joda.time.DurationFieldType durationFieldType35 = org.joda.time.DurationFieldType.millis();
        java.lang.String str36 = durationFieldType35.getName();
        org.joda.time.LocalTime localTime38 = localTime30.withFieldAdded(durationFieldType35, 70);
        org.joda.time.TimeOfDay timeOfDay40 = timeOfDay28.withFieldAdded(durationFieldType35, 49);
        org.joda.time.Instant instant42 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone43 = instant42.getZone();
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone43);
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.DateTime dateTime47 = dateTime44.withDurationAdded(readableDuration45, (int) (byte) 0);
        org.joda.time.DateTime dateTime49 = dateTime44.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime51 = dateTime49.plusMinutes((int) (byte) 10);
        org.joda.time.DateTime.Property property52 = dateTime51.dayOfWeek();
        org.joda.time.DateTime dateTime53 = property52.getDateTime();
        org.joda.time.DateTime.Property property54 = dateTime53.dayOfMonth();
        org.joda.time.TimeOfDay timeOfDay59 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant61 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime62 = timeOfDay59.toDateTime((org.joda.time.ReadableInstant) instant61);
        org.joda.time.Chronology chronology63 = instant61.getChronology();
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight((java.lang.Object) (-11491200000L), chronology63);
        org.joda.time.TimeOfDay timeOfDay65 = org.joda.time.TimeOfDay.fromMillisOfDay((-2678399900L), chronology63);
        org.joda.time.DateTime dateTime66 = dateTime53.withChronology(chronology63);
        org.joda.time.DurationField durationField67 = chronology63.years();
        boolean boolean68 = durationFieldType35.isSupported(chronology63);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime(54121267, 3767, 0, 1968, 70, 54007846, chronology63);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1968 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(timeOfDay28);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "millis" + "'", str36, "millis");
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(timeOfDay40);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(timeOfDay65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test04363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04363");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.plusMonths((int) (short) 0);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears(70);
        org.joda.time.LocalDate.Property property5 = localDate2.dayOfMonth();
        org.joda.time.LocalDate localDate7 = localDate2.minusWeeks(21);
        org.joda.time.LocalDate localDate9 = localDate7.withDayOfYear(11);
        java.lang.String str10 = localDate9.toString();
        org.joda.time.LocalDate localDate12 = localDate9.plusYears(59);
        org.joda.time.LocalDate.Property property13 = localDate12.dayOfMonth();
        org.joda.time.LocalDate localDate15 = property13.addToCopy(53937);
        org.joda.time.LocalDate localDate16 = property13.withMaximumValue();
        int int17 = localDate16.getMonthOfYear();
        org.joda.time.LocalDate localDate19 = localDate16.minusDays((-2678));
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay timeOfDay24 = timeOfDay22.withSecondOfMinute((int) (byte) 1);
        org.joda.time.TimeOfDay.Property property25 = timeOfDay24.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay27 = property25.addWrapFieldToCopy(1);
        org.joda.time.TimeOfDay timeOfDay29 = property25.addWrapFieldToCopy((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int30 = localDate16.compareTo((org.joda.time.ReadablePartial) timeOfDay29);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2021-01-11" + "'", str10, "2021-01-11");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(timeOfDay29);
    }

    @Test
    public void test04364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04364");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusSeconds(12);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.dayOfMonth();
        java.util.Locale locale5 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale5.getDisplayScript();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime8 = property3.setCopy("2022-02-21T14:59:48.060Z", locale5);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-21T14:59:48.060Z\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test04365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04365");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime localTime3 = localTime1.minusMinutes((int) (short) 1);
        int int4 = localTime1.getMillisOfDay();
        org.joda.time.LocalTime localTime6 = localTime1.plusSeconds(100);
        org.joda.time.LocalTime.Property property7 = localTime1.minuteOfHour();
        boolean boolean8 = property7.isLeap();
        org.joda.time.LocalTime localTime10 = property7.addWrapFieldToCopy(20);
        org.joda.time.LocalTime localTime11 = property7.withMaximumValue();
        org.joda.time.LocalTime localTime12 = property7.roundHalfCeilingCopy();
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay.Property property17 = timeOfDay16.minuteOfHour();
        java.lang.String str18 = property17.getAsShortText();
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime25 = timeOfDay22.toDateTime((org.joda.time.ReadableInstant) instant24);
        org.joda.time.Chronology chronology26 = instant24.getChronology();
        org.joda.time.TimeOfDay timeOfDay29 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant31 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime32 = timeOfDay29.toDateTime((org.joda.time.ReadableInstant) instant31);
        int[] intArray34 = chronology26.get((org.joda.time.ReadablePartial) timeOfDay29, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(0L, chronology26);
        int int36 = mutableDateTime35.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime35.property(dateTimeFieldType37);
        org.joda.time.TimeOfDay timeOfDay41 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant43 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime44 = timeOfDay41.toDateTime((org.joda.time.ReadableInstant) instant43);
        org.joda.time.Chronology chronology45 = instant43.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.clockhourOfHalfday();
        long long48 = dateTimeField46.roundHalfFloor(0L);
        java.util.Locale locale49 = java.util.Locale.TRADITIONAL_CHINESE;
        int int50 = dateTimeField46.getMaximumShortTextLength(locale49);
        java.util.Locale locale51 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale52 = locale51.stripExtensions();
        java.util.Locale locale53 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale54 = locale53.stripExtensions();
        java.lang.String str55 = locale51.getDisplayName(locale53);
        java.lang.String str56 = locale49.getDisplayLanguage(locale51);
        java.util.Calendar calendar57 = mutableDateTime35.toCalendar(locale51);
        int int58 = property17.getMaximumTextLength(locale51);
        java.lang.String str59 = property17.getAsString();
        int int60 = property17.get();
        java.util.Locale locale62 = java.util.Locale.forLanguageTag("Property[dayOfWeek]");
        java.util.Locale locale63 = java.util.Locale.GERMANY;
        java.lang.String str64 = locale62.getDisplayLanguage(locale63);
        int int65 = property17.getMaximumShortTextLength(locale62);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime66 = property7.setCopy("AD", locale62);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"AD\" for minuteOfHour is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1" + "'", str18, "1");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str55, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\u4e2d\u6587" + "'", str56, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(calendar57);
        org.junit.Assert.assertEquals(calendar57.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "1" + "'", str59, "1");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
    }

    @Test
    public void test04366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04366");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        int int17 = mutableDateTime16.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime16.property(dateTimeFieldType18);
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime25 = timeOfDay22.toDateTime((org.joda.time.ReadableInstant) instant24);
        org.joda.time.Chronology chronology26 = instant24.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.clockhourOfHalfday();
        long long29 = dateTimeField27.roundHalfFloor(0L);
        java.util.Locale locale30 = java.util.Locale.TRADITIONAL_CHINESE;
        int int31 = dateTimeField27.getMaximumShortTextLength(locale30);
        java.util.Locale locale32 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale33 = locale32.stripExtensions();
        java.util.Locale locale34 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale35 = locale34.stripExtensions();
        java.lang.String str36 = locale32.getDisplayName(locale34);
        java.lang.String str37 = locale30.getDisplayLanguage(locale32);
        java.util.Calendar calendar38 = mutableDateTime16.toCalendar(locale32);
        calendar38.roll(3, true);
        int int43 = calendar38.getLeastMaximum(2);
        int int45 = calendar38.getActualMinimum(5);
        java.lang.Object obj46 = calendar38.clone();
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str36, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u4e2d\u6587" + "'", str37, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(calendar38);
        org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 11 + "'", int43 == 11);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertEquals(obj46.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test04367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04367");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.withDurationAdded((long) 2, 100);
        org.joda.time.LocalDate localDate6 = dateMidnight2.toLocalDate();
        org.joda.time.LocalDate localDate8 = localDate6.withYearOfEra((int) '#');
        org.joda.time.LocalDate localDate10 = localDate6.minusMonths((int) (byte) 1);
        org.joda.time.LocalDate localDate12 = localDate6.withMonthOfYear(8);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean15 = localDate13.isSupported(dateTimeFieldType14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = localDate13.toDateMidnight(dateTimeZone16);
        org.joda.time.DateTime dateTime18 = localDate13.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime19 = localDate13.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate21 = localDate13.minusWeeks((int) 'a');
        org.joda.time.LocalDate.Property property22 = localDate21.weekOfWeekyear();
        org.joda.time.LocalDate localDate23 = property22.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate24 = property22.withMinimumValue();
        int int25 = property22.getMinimumValueOverall();
        org.joda.time.LocalDate localDate27 = property22.addToCopy((-292275054));
        org.joda.time.LocalDate localDate29 = localDate27.plusWeeks((int) 'x');
        int int30 = localDate12.compareTo((org.joda.time.ReadablePartial) localDate29);
        int int31 = localDate12.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 31 + "'", int31 == 31);
    }

    @Test
    public void test04368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04368");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTime((org.joda.time.ReadableInstant) instant6);
        org.joda.time.Chronology chronology8 = instant6.getChronology();
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime14 = timeOfDay11.toDateTime((org.joda.time.ReadableInstant) instant13);
        int[] intArray16 = chronology8.get((org.joda.time.ReadablePartial) timeOfDay11, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(0L, chronology8);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime25 = timeOfDay22.toDateTime((org.joda.time.ReadableInstant) instant24);
        org.joda.time.Chronology chronology26 = instant24.getChronology();
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((java.lang.Object) (-11491200000L), chronology26);
        org.joda.time.DateTimeField dateTimeField28 = chronology26.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime18.toMutableDateTime(chronology26);
        org.joda.time.DateTime dateTime30 = dateTime18.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.DateTime dateTime32 = dateTime30.minus(readableDuration31);
        org.joda.time.DateTime.Property property33 = dateTime30.era();
        org.joda.time.DateTimeField dateTimeField34 = property33.getField();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeField34);
    }

    @Test
    public void test04369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04369");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay.Property property3 = timeOfDay2.minuteOfHour();
        java.lang.String str4 = property3.getAsShortText();
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant10 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime11 = timeOfDay8.toDateTime((org.joda.time.ReadableInstant) instant10);
        org.joda.time.Chronology chronology12 = instant10.getChronology();
        org.joda.time.TimeOfDay timeOfDay15 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant17 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime18 = timeOfDay15.toDateTime((org.joda.time.ReadableInstant) instant17);
        int[] intArray20 = chronology12.get((org.joda.time.ReadablePartial) timeOfDay15, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(0L, chronology12);
        int int22 = mutableDateTime21.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime21.property(dateTimeFieldType23);
        org.joda.time.TimeOfDay timeOfDay27 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant29 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime30 = timeOfDay27.toDateTime((org.joda.time.ReadableInstant) instant29);
        org.joda.time.Chronology chronology31 = instant29.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.clockhourOfHalfday();
        long long34 = dateTimeField32.roundHalfFloor(0L);
        java.util.Locale locale35 = java.util.Locale.TRADITIONAL_CHINESE;
        int int36 = dateTimeField32.getMaximumShortTextLength(locale35);
        java.util.Locale locale37 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale38 = locale37.stripExtensions();
        java.util.Locale locale39 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale40 = locale39.stripExtensions();
        java.lang.String str41 = locale37.getDisplayName(locale39);
        java.lang.String str42 = locale35.getDisplayLanguage(locale37);
        java.util.Calendar calendar43 = mutableDateTime21.toCalendar(locale37);
        int int44 = property3.getMaximumTextLength(locale37);
        org.joda.time.TimeOfDay timeOfDay47 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant49 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime50 = timeOfDay47.toDateTime((org.joda.time.ReadableInstant) instant49);
        org.joda.time.Chronology chronology51 = instant49.getChronology();
        org.joda.time.DateTimeField dateTimeField52 = chronology51.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField53 = chronology51.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField54 = chronology51.hourOfDay();
        java.util.Locale locale57 = new java.util.Locale("zh");
        java.lang.String str58 = dateTimeField54.getAsShortText((-2678399965L), locale57);
        int int59 = property3.getMaximumShortTextLength(locale57);
        org.joda.time.TimeOfDay timeOfDay61 = property3.addNoWrapToCopy(3);
        org.joda.time.TimeOfDay timeOfDay63 = timeOfDay61.minusMillis(20);
        org.joda.time.TimeOfDay.Property property64 = timeOfDay61.hourOfDay();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1" + "'", str4, "1");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str41, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\u4e2d\u6587" + "'", str42, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(calendar43);
        org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertEquals(locale57.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "0" + "'", str58, "0");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertNotNull(timeOfDay61);
        org.junit.Assert.assertNotNull(timeOfDay63);
        org.junit.Assert.assertNotNull(property64);
    }

    @Test
    public void test04370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04370");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears((int) '4');
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfCentury();
        int int4 = localDateTime0.getDayOfYear();
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime0.withFieldAdded(durationFieldType5, 23);
        org.joda.time.LocalDateTime.Property property8 = localDateTime0.millisOfDay();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime0.plusHours(36);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withSecondOfMinute(54090086);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54090086 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 52 + "'", int4 == 52);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test04371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04371");
        org.joda.time.TimeOfDay timeOfDay6 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime9 = timeOfDay6.toDateTime((org.joda.time.ReadableInstant) instant8);
        org.joda.time.Chronology chronology10 = instant8.getChronology();
        org.joda.time.TimeOfDay timeOfDay13 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant15 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime16 = timeOfDay13.toDateTime((org.joda.time.ReadableInstant) instant15);
        int[] intArray18 = chronology10.get((org.joda.time.ReadablePartial) timeOfDay13, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(0L, chronology10);
        mutableDateTime19.setYear(3);
        org.joda.time.Instant instant23 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone24 = instant23.getZone();
        mutableDateTime19.setZone(dateTimeZone24);
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime(0L, dateTimeZone24);
        java.util.TimeZone timeZone27 = dateTimeZone24.toTimeZone();
        timeZone27.setID("1969-12-31T23:59:59.999Z");
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(timeZone27);
        java.lang.Object obj31 = calendar30.clone();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.TimeOfDay timeOfDay36 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant38 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime39 = timeOfDay36.toDateTime((org.joda.time.ReadableInstant) instant38);
        org.joda.time.Chronology chronology40 = instant38.getChronology();
        org.joda.time.TimeOfDay timeOfDay43 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant45 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime46 = timeOfDay43.toDateTime((org.joda.time.ReadableInstant) instant45);
        int[] intArray48 = chronology40.get((org.joda.time.ReadablePartial) timeOfDay43, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime(0L, chronology40);
        org.joda.time.TimeOfDay timeOfDay52 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant54 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime55 = timeOfDay52.toDateTime((org.joda.time.ReadableInstant) instant54);
        org.joda.time.Chronology chronology56 = instant54.getChronology();
        org.joda.time.TimeOfDay timeOfDay59 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant61 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime62 = timeOfDay59.toDateTime((org.joda.time.ReadableInstant) instant61);
        int[] intArray64 = chronology56.get((org.joda.time.ReadablePartial) timeOfDay59, (long) (short) -1);
        mutableDateTime49.setChronology(chronology56);
        org.joda.time.LocalTime localTime66 = new org.joda.time.LocalTime(chronology56);
        boolean boolean67 = dateTimeFieldType32.isSupported(chronology56);
        org.joda.time.TimeOfDay timeOfDay68 = new org.joda.time.TimeOfDay((java.lang.Object) calendar30, chronology56);
        org.joda.time.Interval interval69 = new org.joda.time.Interval((-1820016000000L), 54588096L, chronology56);
        org.joda.time.Instant instant71 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone72 = instant71.getZone();
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime(dateTimeZone72);
        org.joda.time.ReadableDuration readableDuration74 = null;
        org.joda.time.DateTime dateTime76 = dateTime73.withDurationAdded(readableDuration74, (int) (byte) 0);
        org.joda.time.DateTime dateTime77 = dateTime76.toDateTime();
        org.joda.time.DateTime dateTime79 = dateTime77.minusDays(4);
        org.joda.time.ReadablePeriod readablePeriod80 = null;
        org.joda.time.Interval interval81 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime79, readablePeriod80);
        org.joda.time.Instant instant83 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone84 = instant83.getZone();
        org.joda.time.DateTime dateTime85 = instant83.toDateTimeISO();
        java.util.GregorianCalendar gregorianCalendar86 = dateTime85.toGregorianCalendar();
        org.joda.time.DateTime dateTime88 = dateTime85.minusYears((int) '#');
        boolean boolean89 = interval81.isBefore((org.joda.time.ReadableInstant) dateTime85);
        boolean boolean90 = interval69.isAfter((org.joda.time.ReadableInterval) interval81);
        org.joda.time.DateTimeZone dateTimeZone92 = null;
        org.joda.time.DateMidnight dateMidnight93 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone92);
        org.joda.time.DateMidnight dateMidnight95 = dateMidnight93.withEra(1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval96 = interval81.withEnd((org.joda.time.ReadableInstant) dateMidnight93);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(calendar30);
// flaky:         org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=1645455723905,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=1969-12-31T23:59:59.999Z,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=3,MILLISECOND=905,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(obj31);
// flaky:         org.junit.Assert.assertEquals(obj31.toString(), "java.util.GregorianCalendar[time=1645455723905,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=1969-12-31T23:59:59.999Z,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=3,MILLISECOND=905,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "java.util.GregorianCalendar[time=1645455723905,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=1969-12-31T23:59:59.999Z,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=3,MILLISECOND=905,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "java.util.GregorianCalendar[time=1645455723905,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=1969-12-31T23:59:59.999Z,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=3,MILLISECOND=905,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTimeZone84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(gregorianCalendar86);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(dateMidnight95);
    }

    @Test
    public void test04372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04372");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.withDurationAdded(readableDuration4, (int) (byte) 0);
        org.joda.time.DateTime dateTime8 = dateTime3.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime10 = dateTime8.plusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime12 = dateTime10.plusDays(2);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int14 = dateTime12.get(dateTimeFieldType13);
        org.joda.time.Chronology chronology15 = null;
        boolean boolean16 = dateTimeFieldType13.isSupported(chronology15);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now();
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        boolean boolean19 = dateTimeFieldType13.isSupported(chronology18);
        org.joda.time.DurationField durationField20 = chronology18.centuries();
        java.lang.String str21 = durationField20.getName();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 15 + "'", int14 == 15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "centuries" + "'", str21, "centuries");
    }

    @Test
    public void test04373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04373");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.withDurationAdded(readableDuration4, (int) (byte) 0);
        org.joda.time.DateTime dateTime8 = dateTime3.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime10 = dateTime8.plusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime12 = dateTime10.plusDays(2);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int14 = dateTime12.get(dateTimeFieldType13);
        org.joda.time.DateTime dateTime16 = dateTime12.withYearOfCentury(3);
        org.joda.time.DateTime dateTime18 = dateTime12.plusDays((int) (byte) 100);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTime dateTime21 = dateTime18.withDurationAdded(readableDuration19, (int) 'a');
        org.joda.time.Instant instant23 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone24 = instant23.getZone();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.DateTime dateTime28 = dateTime25.withDurationAdded(readableDuration26, (int) (byte) 0);
        org.joda.time.DateTime dateTime29 = dateTime28.toDateTime();
        org.joda.time.DateTime dateTime31 = dateTime29.minusDays(4);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.Interval interval33 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime31, readablePeriod32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.Interval interval35 = interval33.withPeriodBeforeEnd(readablePeriod34);
        org.joda.time.Interval interval38 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval41 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean42 = interval38.abuts((org.joda.time.ReadableInterval) interval41);
        org.joda.time.LocalTime localTime44 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime.Property property45 = localTime44.hourOfDay();
        org.joda.time.LocalTime localTime46 = property45.roundFloorCopy();
        org.joda.time.LocalTime localTime48 = property45.setCopy(0);
        org.joda.time.LocalTime localTime50 = property45.addWrapFieldToCopy(19);
        org.joda.time.Interval interval53 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval56 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean57 = interval53.abuts((org.joda.time.ReadableInterval) interval56);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone59);
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight60.withWeekyear(2);
        boolean boolean63 = interval53.isBefore((org.joda.time.ReadableInstant) dateMidnight60);
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.Interval interval65 = interval53.withDurationAfterStart(readableDuration64);
        org.joda.time.Duration duration66 = interval53.toDuration();
        org.joda.time.Interval interval69 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval72 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean73 = interval69.abuts((org.joda.time.ReadableInterval) interval72);
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.DateMidnight dateMidnight76 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone75);
        org.joda.time.DateMidnight dateMidnight78 = dateMidnight76.withWeekyear(2);
        boolean boolean79 = interval69.isBefore((org.joda.time.ReadableInstant) dateMidnight76);
        org.joda.time.ReadableDuration readableDuration80 = null;
        org.joda.time.Interval interval81 = interval69.withDurationAfterStart(readableDuration80);
        org.joda.time.Duration duration82 = interval69.toDuration();
        int int83 = duration66.compareTo((org.joda.time.ReadableDuration) duration82);
        org.joda.time.Period period84 = duration66.toPeriod();
        org.joda.time.LocalTime localTime85 = localTime50.minus((org.joda.time.ReadablePeriod) period84);
        org.joda.time.Interval interval86 = interval41.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period84);
        org.joda.time.Interval interval87 = interval35.withPeriodAfterStart((org.joda.time.ReadablePeriod) period84);
        java.lang.String str88 = period84.toString();
        org.joda.time.DateTime dateTime90 = dateTime18.withPeriodAdded((org.joda.time.ReadablePeriod) period84, 53897);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime94 = dateTime18.withDate(53897496, 32769, 54004294);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32769 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 15 + "'", int14 == 15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(dateMidnight78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(localTime85);
        org.junit.Assert.assertNotNull(interval86);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "PT0S" + "'", str88, "PT0S");
        org.junit.Assert.assertNotNull(dateTime90);
    }

    @Test
    public void test04374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04374");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 3);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property4 = localDate3.weekyear();
        org.joda.time.LocalDate localDate6 = localDate3.withWeekyear((-1));
        java.util.Date date7 = localDate3.toDate();
        date7.setDate((int) ' ');
        java.util.Calendar.Builder builder10 = builder0.setInstant(date7);
        java.util.Calendar.Builder builder14 = builder0.setWeekDate((-11491200), 5, (int) (short) 1);
        java.util.Calendar.Builder builder19 = builder0.setTimeOfDay(99, 266, (-457079), 0);
        java.util.Calendar.Builder builder21 = builder0.setLenient(false);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar calendar22 = builder0.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: HOUR_OF_DAY");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Fri Mar 04 00:00:00 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test04375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04375");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime.Property property2 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime4 = property2.addCopy(21);
        java.lang.String str5 = property2.toString();
        org.joda.time.LocalTime localTime6 = property2.withMaximumValue();
        org.joda.time.LocalTime localTime7 = property2.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(10, 0);
        java.lang.String str13 = dateTimeZone12.toString();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (short) -1, dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) 100, dateTimeZone12);
        int int17 = dateTimeZone12.getStandardOffset((long) ' ');
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(dateTimeZone12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((java.lang.Object) localTime7, dateTimeZone12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.LocalTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Property[hourOfDay]" + "'", str5, "Property[hourOfDay]");
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+10:00" + "'", str13, "+10:00");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 36000000 + "'", int17 == 36000000);
    }

    @Test
    public void test04376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04376");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("2022-02-21T00:00:00.000Z", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-21t00:00:00.000z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04377");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime5 = timeOfDay2.toDateTime((org.joda.time.ReadableInstant) instant4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.DateTime dateTime8 = dateTime5.withPeriodAdded(readablePeriod6, (int) (short) 0);
        boolean boolean9 = dateTime5.isAfterNow();
        org.joda.time.DateTime dateTime11 = dateTime5.plus((long) 15);
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay.Property property15 = timeOfDay14.minuteOfHour();
        java.lang.String str16 = property15.getAsShortText();
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime22 = timeOfDay19.toDateTime((org.joda.time.ReadableInstant) instant21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.DateTime dateTime25 = dateTime22.withPeriodAdded(readablePeriod23, (int) (short) 0);
        int int26 = property15.compareTo((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime27 = dateTime22.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property28 = dateTime27.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay31 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant33 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime34 = timeOfDay31.toDateTime((org.joda.time.ReadableInstant) instant33);
        org.joda.time.Chronology chronology35 = instant33.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.clockhourOfHalfday();
        long long38 = dateTimeField36.roundHalfFloor(0L);
        java.util.Locale locale39 = java.util.Locale.TRADITIONAL_CHINESE;
        int int40 = dateTimeField36.getMaximumShortTextLength(locale39);
        java.lang.String str41 = locale39.getLanguage();
        java.lang.String str42 = locale39.getLanguage();
        java.util.Calendar calendar43 = dateTime27.toCalendar(locale39);
        java.util.Calendar calendar44 = dateTime11.toCalendar(locale39);
        org.joda.time.TimeOfDay timeOfDay49 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant51 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime52 = timeOfDay49.toDateTime((org.joda.time.ReadableInstant) instant51);
        org.joda.time.Chronology chronology53 = instant51.getChronology();
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight((java.lang.Object) (-11491200000L), chronology53);
        org.joda.time.TimeOfDay timeOfDay55 = org.joda.time.TimeOfDay.fromMillisOfDay((-2678399900L), chronology53);
        boolean boolean56 = calendar44.after((java.lang.Object) chronology53);
        org.joda.time.TimeOfDay timeOfDay57 = org.joda.time.TimeOfDay.fromCalendarFields(calendar44);
        calendar44.setTimeInMillis((long) 70);
        int int60 = calendar44.getMinimalDaysInFirstWeek();
        org.joda.time.TimeOfDay timeOfDay61 = org.joda.time.TimeOfDay.fromCalendarFields(calendar44);
        java.util.Date date62 = calendar44.getTime();
        org.joda.time.TimeOfDay timeOfDay65 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant67 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime68 = timeOfDay65.toDateTime((org.joda.time.ReadableInstant) instant67);
        org.joda.time.Chronology chronology69 = instant67.getChronology();
        org.joda.time.TimeOfDay timeOfDay72 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant74 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime75 = timeOfDay72.toDateTime((org.joda.time.ReadableInstant) instant74);
        int[] intArray77 = chronology69.get((org.joda.time.ReadablePartial) timeOfDay72, (long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay79 = timeOfDay72.withHourOfDay(0);
        org.joda.time.TimeOfDay timeOfDay81 = timeOfDay79.plusHours(865);
        boolean boolean82 = calendar44.before((java.lang.Object) timeOfDay79);
        int int83 = timeOfDay79.getSecondOfMinute();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1" + "'", str16, "1");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "zh" + "'", str41, "zh");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "zh" + "'", str42, "zh");
        org.junit.Assert.assertNotNull(calendar43);
        org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=-86340000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar44);
        org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=70,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=70,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(timeOfDay55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(timeOfDay57);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(timeOfDay61);
        org.junit.Assert.assertNotNull(date62);
// flaky:         org.junit.Assert.assertEquals(date62.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(timeOfDay79);
        org.junit.Assert.assertNotNull(timeOfDay81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
    }

    @Test
    public void test04378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04378");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        int[] intArray3 = timeOfDay2.getValues();
        org.joda.time.TimeOfDay timeOfDay6 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime9 = timeOfDay6.toDateTime((org.joda.time.ReadableInstant) instant8);
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay6.minusMinutes((int) '4');
        int int12 = timeOfDay2.compareTo((org.joda.time.ReadablePartial) timeOfDay6);
        org.joda.time.TimeOfDay timeOfDay15 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant17 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime18 = timeOfDay15.toDateTime((org.joda.time.ReadableInstant) instant17);
        org.joda.time.Chronology chronology19 = instant17.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.clockhourOfHalfday();
        org.joda.time.DurationField durationField21 = chronology19.eras();
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay2.withChronologyRetainFields(chronology19);
        org.joda.time.Chronology chronology23 = timeOfDay2.getChronology();
        org.joda.time.Chronology chronology24 = timeOfDay2.getChronology();
        org.joda.time.TimeOfDay timeOfDay25 = new org.joda.time.TimeOfDay(chronology24);
        int int26 = timeOfDay25.getHourOfDay();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 15 + "'", int26 == 15);
    }

    @Test
    public void test04379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04379");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.plusMonths((int) (short) 0);
        int int3 = localDate0.getMonthOfYear();
        org.joda.time.LocalDate localDate5 = localDate0.plusMonths(10);
        org.joda.time.LocalDate.Property property6 = localDate0.year();
        org.joda.time.LocalDate localDate8 = localDate0.minusYears((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField10 = localDate0.getField(795);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 795");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate8);
    }

    @Test
    public void test04380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04380");
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone9 = instant8.getZone();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime13 = dateTime10.withDurationAdded(readableDuration11, (int) (byte) 0);
        org.joda.time.DateTime dateTime15 = dateTime10.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime17 = dateTime15.plusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime19 = dateTime17.plusDays(2);
        org.joda.time.DateTime dateTime21 = dateTime19.minusMillis((int) (short) 0);
        org.joda.time.DateTime dateTime23 = dateTime21.withWeekyear(35);
        org.joda.time.DateTimeZone dateTimeZone24 = dateTime21.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(53973848, 266, 2, 1900, (int) '#', 60, 54032290, dateTimeZone24);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1900 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
    }

    @Test
    public void test04381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04381");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.withDurationAdded(readableDuration4, (int) (byte) 0);
        org.joda.time.DateTime dateTime7 = dateTime6.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime7.minusDays(4);
        int int10 = dateTime9.getMillisOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 54124246 + "'", int10 == 54124246);
    }

    @Test
    public void test04382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04382");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.Chronology chronology1 = localDateTime0.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.plusDays(5);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusMinutes(1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusYears((int) ' ');
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMillisOfDay(30);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusWeeks(1904);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.minusDays((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property14 = localDateTime9.minuteOfHour();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test04383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04383");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        java.lang.Object obj17 = mutableDateTime16.clone();
        int int18 = mutableDateTime16.getMinuteOfHour();
        org.joda.time.Instant instant20 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone21 = instant20.getZone();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime25 = dateTime22.withDurationAdded(readableDuration23, (int) (byte) 0);
        org.joda.time.DateTime dateTime27 = dateTime22.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime29 = dateTime27.plusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime31 = dateTime29.plusDays(2);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMillis((int) (short) 0);
        boolean boolean34 = mutableDateTime16.equals((java.lang.Object) dateTime31);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        mutableDateTime16.add(readablePeriod35, 11);
        boolean boolean39 = mutableDateTime16.isEqual((long) 54005493);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test04384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04384");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.Chronology chronology1 = localDateTime0.getChronology();
        int int2 = localDateTime0.size();
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.weekyear();
        org.joda.time.LocalDateTime localDateTime4 = property3.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withYearOfEra((int) (byte) 1);
        org.joda.time.Interval interval9 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean13 = interval9.abuts((org.joda.time.ReadableInterval) interval12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.withWeekyear(2);
        boolean boolean19 = interval9.isBefore((org.joda.time.ReadableInstant) dateMidnight16);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Interval interval21 = interval9.withDurationAfterStart(readableDuration20);
        org.joda.time.Duration duration22 = interval9.toDuration();
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval28 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean29 = interval25.abuts((org.joda.time.ReadableInterval) interval28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.withWeekyear(2);
        boolean boolean35 = interval25.isBefore((org.joda.time.ReadableInstant) dateMidnight32);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Interval interval37 = interval25.withDurationAfterStart(readableDuration36);
        org.joda.time.Duration duration38 = interval25.toDuration();
        int int39 = duration22.compareTo((org.joda.time.ReadableDuration) duration38);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime4.minus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime4.minusDays(365);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime44 = localDateTime42.withDayOfWeek(53973848);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53973848 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
    }

    @Test
    public void test04385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04385");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.withDurationAdded(readableDuration4, (int) (byte) 0);
        org.joda.time.DateTime dateTime8 = dateTime3.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime10 = dateTime8.plusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime12 = dateTime8.plusWeeks((int) (byte) -1);
        org.joda.time.DateTime.Property property13 = dateTime8.monthOfYear();
        org.joda.time.DateTime dateTime15 = property13.addWrapFieldToCopy(21);
        org.joda.time.DateTime dateTime16 = property13.roundFloorCopy();
        org.joda.time.DateTime dateTime17 = dateTime16.toDateTimeISO();
        org.joda.time.DateTime dateTime19 = dateTime16.minusYears(900);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test04386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04386");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTime((org.joda.time.ReadableInstant) instant6);
        org.joda.time.Chronology chronology8 = instant6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.clockhourOfHalfday();
        long long11 = dateTimeField9.roundHalfFloor(0L);
        java.util.Locale locale12 = java.util.Locale.TRADITIONAL_CHINESE;
        int int13 = dateTimeField9.getMaximumShortTextLength(locale12);
        java.lang.String str14 = locale12.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((-1L), chronology1, locale12);
        java.lang.Integer int16 = dateTimeParserBucket15.getPivotYear();
        dateTimeParserBucket15.setOffset(53891);
        int int19 = dateTimeParserBucket15.getOffset();
        java.util.Locale locale20 = dateTimeParserBucket15.getLocale();
        int int21 = dateTimeParserBucket15.getOffset();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "zh" + "'", str14, "zh");
        org.junit.Assert.assertNull(int16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 53891 + "'", int19 == 53891);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 53891 + "'", int21 == 53891);
    }

    @Test
    public void test04387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04387");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay.Property property3 = timeOfDay2.minuteOfHour();
        java.lang.String str4 = property3.getAsShortText();
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime10 = timeOfDay7.toDateTime((org.joda.time.ReadableInstant) instant9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.DateTime dateTime13 = dateTime10.withPeriodAdded(readablePeriod11, (int) (short) 0);
        int int14 = property3.compareTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.TimeOfDay timeOfDay16 = property3.addToCopy(54559);
        int int17 = property3.getMinimumValueOverall();
        org.joda.time.TimeOfDay timeOfDay18 = property3.withMaximumValue();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1" + "'", str4, "1");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(timeOfDay18);
    }

    @Test
    public void test04388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04388");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = localDate0.toDateMidnight(dateTimeZone3);
        org.joda.time.LocalDate localDate5 = dateMidnight4.toLocalDate();
        org.joda.time.DateMidnight dateMidnight6 = localDate5.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.withDayOfYear(7);
        org.joda.time.TimeOfDay timeOfDay13 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant15 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime16 = timeOfDay13.toDateTime((org.joda.time.ReadableInstant) instant15);
        org.joda.time.Chronology chronology17 = instant15.getChronology();
        org.joda.time.TimeOfDay timeOfDay20 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant22 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime23 = timeOfDay20.toDateTime((org.joda.time.ReadableInstant) instant22);
        int[] intArray25 = chronology17.get((org.joda.time.ReadablePartial) timeOfDay20, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(0L, chronology17);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (-1), chronology17);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.TimeOfDay timeOfDay32 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant34 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime35 = timeOfDay32.toDateTime((org.joda.time.ReadableInstant) instant34);
        org.joda.time.Chronology chronology36 = instant34.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.clockhourOfHalfday();
        long long39 = dateTimeField37.roundHalfFloor(0L);
        java.util.Locale locale40 = java.util.Locale.TRADITIONAL_CHINESE;
        int int41 = dateTimeField37.getMaximumShortTextLength(locale40);
        java.lang.String str42 = locale40.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((-1L), chronology29, locale40);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.dayOfYear();
        dateTimeParserBucket43.saveField(dateTimeFieldType44, (-292275054));
        org.joda.time.LocalTime localTime48 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime.Property property49 = localTime48.hourOfDay();
        org.joda.time.LocalTime localTime51 = property49.addCopy(21);
        org.joda.time.LocalTime localTime52 = property49.withMinimumValue();
        org.joda.time.LocalTime localTime54 = property49.setCopy(2);
        org.joda.time.LocalTime localTime55 = property49.roundHalfFloorCopy();
        org.joda.time.Chronology chronology56 = localTime55.getChronology();
        boolean boolean57 = dateTimeFieldType44.isSupported(chronology56);
        org.joda.time.DurationFieldType durationFieldType58 = dateTimeFieldType44.getRangeDurationType();
        int int59 = dateTime27.get(dateTimeFieldType44);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight61 = dateMidnight8.withField(dateTimeFieldType44, 59000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 59000 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "zh" + "'", str42, "zh");
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(durationFieldType58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 365 + "'", int59 == 365);
    }

    @Test
    public void test04389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04389");
        java.util.Date date3 = new java.util.Date(0, (int) '4', 0);
        int int4 = date3.getMinutes();
        org.joda.time.YearMonthDay yearMonthDay5 = org.joda.time.YearMonthDay.fromDateFields(date3);
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone7 = dateMidnight6.getZone();
        int int9 = dateTimeZone7.getOffset((long) 12);
        org.joda.time.DateMidnight dateMidnight10 = yearMonthDay5.toDateMidnight(dateTimeZone7);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = yearMonthDay5.getFieldTypes();
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay5.plusDays(366);
        org.joda.time.Interval interval14 = yearMonthDay5.toInterval();
        org.joda.time.DateTime dateTime15 = interval14.getStart();
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Sat Apr 30 00:00:00 GMT+00:00 1904");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test04390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04390");
        java.util.Date date3 = new java.util.Date(0, (int) '4', 0);
        int int4 = date3.getMinutes();
        date3.setYear(12);
        date3.setHours((int) (short) 10);
        org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.fromDateFields(date3);
        int int10 = localTime9.getHourOfDay();
        org.joda.time.LocalTime.Property property11 = localTime9.millisOfSecond();
        org.joda.time.LocalTime localTime13 = localTime9.plusSeconds(53942);
        java.util.Locale.Builder builder15 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder16 = builder15.clear();
        java.util.Locale locale17 = java.util.Locale.KOREA;
        java.util.Locale locale18 = locale17.stripExtensions();
        java.lang.String str19 = locale18.getISO3Country();
        java.util.Locale.Builder builder20 = builder15.setLocale(locale18);
        java.util.Locale.Builder builder21 = builder20.clearExtensions();
        org.joda.time.tz.NameProvider nameProvider22 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        org.joda.time.Chronology chronology30 = instant28.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.clockhourOfHalfday();
        org.joda.time.DurationField durationField32 = chronology30.eras();
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType23.getField(chronology30);
        long long36 = dateTimeField33.add((long) (short) 100, (long) (byte) -1);
        boolean boolean37 = dateTimeField33.isSupported();
        org.joda.time.TimeOfDay timeOfDay41 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant43 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime44 = timeOfDay41.toDateTime((org.joda.time.ReadableInstant) instant43);
        org.joda.time.Chronology chronology45 = instant43.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.clockhourOfHalfday();
        long long48 = dateTimeField46.roundHalfFloor(0L);
        java.util.Locale locale49 = java.util.Locale.TRADITIONAL_CHINESE;
        int int50 = dateTimeField46.getMaximumShortTextLength(locale49);
        java.lang.String str51 = locale49.getLanguage();
        java.util.Locale locale52 = locale49.stripExtensions();
        java.lang.String str53 = dateTimeField33.getAsShortText((long) 10, locale49);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone55);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight56.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight56.withWeekyear(2);
        org.joda.time.DateMidnight.Property property61 = dateMidnight56.weekOfWeekyear();
        java.lang.String str62 = property61.getAsString();
        java.util.Locale locale63 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale64 = locale63.stripExtensions();
        int int65 = property61.getMaximumTextLength(locale63);
        java.lang.String str66 = locale49.getDisplayCountry(locale63);
        java.lang.String str69 = nameProvider22.getName(locale49, "Tue Apr 30 00:00:00 UTC 1912", "\u897f\u5143");
        java.lang.String str70 = locale49.getISO3Language();
        java.util.Locale.Builder builder71 = builder21.setLocale(locale49);
        java.lang.String str72 = localTime9.toString("2022", locale49);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Tue Apr 30 10:00:00 GMT+00:00 1912");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "KOR" + "'", str19, "KOR");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(nameProvider22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-2678399900L) + "'", long36 == (-2678399900L));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "zh" + "'", str51, "zh");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\u4e00\u6708" + "'", str53, "\u4e00\u6708");
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "1" + "'", str62, "1");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "\u53f0\u7063" + "'", str66, "\u53f0\u7063");
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "zho" + "'", str70, "zho");
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "2022" + "'", str72, "2022");
    }

    @Test
    public void test04391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04391");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(438);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((-2055L), dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone2);
    }

    @Test
    public void test04392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04392");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        int int17 = mutableDateTime16.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime16.property(dateTimeFieldType18);
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime25 = timeOfDay22.toDateTime((org.joda.time.ReadableInstant) instant24);
        org.joda.time.Chronology chronology26 = instant24.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.clockhourOfHalfday();
        long long29 = dateTimeField27.roundHalfFloor(0L);
        java.util.Locale locale30 = java.util.Locale.TRADITIONAL_CHINESE;
        int int31 = dateTimeField27.getMaximumShortTextLength(locale30);
        java.util.Locale locale32 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale33 = locale32.stripExtensions();
        java.util.Locale locale34 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale35 = locale34.stripExtensions();
        java.lang.String str36 = locale32.getDisplayName(locale34);
        java.lang.String str37 = locale30.getDisplayLanguage(locale32);
        java.util.Calendar calendar38 = mutableDateTime16.toCalendar(locale32);
        java.util.Date date42 = new java.util.Date(0, (int) '4', 0);
        int int43 = date42.getMinutes();
        date42.setYear(12);
        calendar38.setTime(date42);
        java.util.Date date47 = calendar38.getTime();
        org.joda.time.TimeOfDay timeOfDay50 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant52 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime53 = timeOfDay50.toDateTime((org.joda.time.ReadableInstant) instant52);
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.DateTime dateTime56 = dateTime53.withDurationAdded(readableDuration54, (int) (short) 1);
        int int57 = dateTime53.getDayOfYear();
        org.joda.time.DateTime dateTime59 = dateTime53.minusMinutes(70);
        boolean boolean60 = calendar38.before((java.lang.Object) dateTime59);
        calendar38.setLenient(false);
        calendar38.setTimeInMillis(1645455631223L);
        // The following exception was thrown during execution in test generation
        try {
            int int66 = calendar38.getLeastMaximum(2922789);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2922789");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str36, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u4e2d\u6587" + "'", str37, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(calendar38);
        org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=1645455631223,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=0,SECOND=31,MILLISECOND=223,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(date42.toString(), "Tue Apr 30 00:00:00 GMT+00:00 1912");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(date47);
// flaky:         org.junit.Assert.assertEquals(date47.toString(), "Tue Apr 30 00:00:00 GMT+00:00 1912");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 365 + "'", int57 == 365);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test04393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04393");
        java.util.Date date3 = new java.util.Date(0, (int) '4', 0);
        int int4 = date3.getMinutes();
        org.joda.time.YearMonthDay yearMonthDay5 = org.joda.time.YearMonthDay.fromDateFields(date3);
        int int6 = yearMonthDay5.getYear();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay5.plus(readablePeriod7);
        org.joda.time.Interval interval11 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval14 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean15 = interval11.abuts((org.joda.time.ReadableInterval) interval14);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Interval interval17 = interval14.withDurationBeforeEnd(readableDuration16);
        boolean boolean18 = interval17.isBeforeNow();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Period period20 = interval17.toPeriod(periodType19);
        java.lang.String str21 = period20.toString();
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay5.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.YearMonthDay.Property property23 = yearMonthDay5.year();
        org.joda.time.TimeOfDay timeOfDay27 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay.Property property28 = timeOfDay27.minuteOfHour();
        java.lang.String str29 = property28.getAsShortText();
        org.joda.time.TimeOfDay timeOfDay33 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant35 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime36 = timeOfDay33.toDateTime((org.joda.time.ReadableInstant) instant35);
        org.joda.time.Chronology chronology37 = instant35.getChronology();
        org.joda.time.TimeOfDay timeOfDay40 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant42 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime43 = timeOfDay40.toDateTime((org.joda.time.ReadableInstant) instant42);
        int[] intArray45 = chronology37.get((org.joda.time.ReadablePartial) timeOfDay40, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime(0L, chronology37);
        int int47 = mutableDateTime46.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime46.property(dateTimeFieldType48);
        org.joda.time.TimeOfDay timeOfDay52 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant54 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime55 = timeOfDay52.toDateTime((org.joda.time.ReadableInstant) instant54);
        org.joda.time.Chronology chronology56 = instant54.getChronology();
        org.joda.time.DateTimeField dateTimeField57 = chronology56.clockhourOfHalfday();
        long long59 = dateTimeField57.roundHalfFloor(0L);
        java.util.Locale locale60 = java.util.Locale.TRADITIONAL_CHINESE;
        int int61 = dateTimeField57.getMaximumShortTextLength(locale60);
        java.util.Locale locale62 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale63 = locale62.stripExtensions();
        java.util.Locale locale64 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale65 = locale64.stripExtensions();
        java.lang.String str66 = locale62.getDisplayName(locale64);
        java.lang.String str67 = locale60.getDisplayLanguage(locale62);
        java.util.Calendar calendar68 = mutableDateTime46.toCalendar(locale62);
        int int69 = property28.getMaximumTextLength(locale62);
        org.joda.time.DurationField durationField70 = property28.getDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = property28.getFieldType();
        org.joda.time.TimeOfDay timeOfDay74 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay timeOfDay76 = timeOfDay74.withSecondOfMinute((int) (byte) 1);
        org.joda.time.TimeOfDay.Property property77 = timeOfDay76.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay79 = property77.addWrapFieldToCopy(1);
        java.util.Locale locale80 = java.util.Locale.ITALY;
        java.lang.String str81 = property77.getAsShortText(locale80);
        org.joda.time.TimeOfDay timeOfDay84 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay timeOfDay86 = timeOfDay84.withSecondOfMinute((int) (byte) 1);
        org.joda.time.TimeOfDay.Property property87 = timeOfDay86.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay89 = property87.addWrapFieldToCopy(1);
        java.util.Locale locale90 = java.util.Locale.ITALY;
        java.lang.String str91 = property87.getAsShortText(locale90);
        java.lang.String str92 = locale80.getDisplayVariant(locale90);
        java.lang.String str93 = property28.getAsText(locale80);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay94 = property23.setCopy("DE", locale80);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"DE\" for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Sat Apr 30 00:00:00 GMT+00:00 1904");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1904 + "'", int6 == 1904);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PT0S" + "'", str21, "PT0S");
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1" + "'", str29, "1");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str66, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "\u4e2d\u6587" + "'", str67, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(calendar68);
        org.junit.Assert.assertEquals(calendar68.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(timeOfDay76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(timeOfDay79);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "0" + "'", str81, "0");
        org.junit.Assert.assertNotNull(timeOfDay86);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertNotNull(timeOfDay89);
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "0" + "'", str91, "0");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "1" + "'", str93, "1");
    }

    @Test
    public void test04394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04394");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay.Property property3 = timeOfDay2.minuteOfHour();
        java.lang.String str4 = property3.getAsShortText();
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime10 = timeOfDay7.toDateTime((org.joda.time.ReadableInstant) instant9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.DateTime dateTime13 = dateTime10.withPeriodAdded(readablePeriod11, (int) (short) 0);
        int int14 = property3.compareTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime15 = dateTime10.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property16 = dateTime15.minuteOfHour();
        org.joda.time.DateTime dateTime18 = dateTime15.minusWeeks(292278994);
        org.joda.time.DateTime.Property property19 = dateTime18.millisOfSecond();
        int int20 = dateTime18.getHourOfDay();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1" + "'", str4, "1");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test04395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04395");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime5 = timeOfDay2.toDateTime((org.joda.time.ReadableInstant) instant4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.DateTime dateTime8 = dateTime5.withPeriodAdded(readablePeriod6, (int) (short) 0);
        org.joda.time.DateTime.Property property9 = dateTime5.hourOfDay();
        org.joda.time.LocalTime localTime10 = dateTime5.toLocalTime();
        org.joda.time.Chronology chronology11 = localTime10.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.dayOfWeek();
        java.lang.String str13 = chronology11.toString();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology11.weekyear();
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeField15.getAsShortText((long) 7, locale17);
        int int20 = dateTimeField15.getMaximumValue((long) 70);
        long long22 = dateTimeField15.roundHalfFloor(1645455460002L);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[UTC]" + "'", str13, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1970" + "'", str18, "1970");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 292278993 + "'", int20 == 292278993);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1641168000000L + "'", long22 == 1641168000000L);
    }

    @Test
    public void test04396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04396");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.withDurationAdded(readableDuration4, (int) (byte) 0);
        org.joda.time.DateTime dateTime8 = dateTime3.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime10 = dateTime8.plusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime12 = dateTime10.plusDays(2);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMillis((int) (short) 0);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.DateTime dateTime17 = dateTime14.withPeriodAdded(readablePeriod15, (int) (byte) 1);
        org.joda.time.TimeOfDay timeOfDay20 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant22 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime23 = timeOfDay20.toDateTime((org.joda.time.ReadableInstant) instant22);
        org.joda.time.Chronology chronology24 = instant22.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.clockhourOfHalfday();
        long long27 = dateTimeField25.roundHalfFloor(0L);
        java.util.Locale locale28 = java.util.Locale.TRADITIONAL_CHINESE;
        int int29 = dateTimeField25.getMaximumShortTextLength(locale28);
        java.util.Locale locale30 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale31 = locale30.stripExtensions();
        java.util.Locale locale32 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale33 = locale32.stripExtensions();
        java.lang.String str34 = locale30.getDisplayName(locale32);
        java.lang.String str35 = locale28.getDisplayLanguage(locale30);
        java.util.Set<java.lang.String> strSet36 = locale30.getUnicodeLocaleAttributes();
        int int37 = strSet36.size();
        java.util.Locale.LanguageRange[] languageRangeArray38 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList39 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList39, languageRangeArray38);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap41 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList42 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList39, strMap41);
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", "\u4e2d\u6587\u53f0\u7063)", "zh", "hi!", "\u4e2d\u6587", "1970-01-01T00:00:00.000Z", "zh" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        java.lang.String str53 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList39, (java.util.Collection<java.lang.String>) strList51);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap54 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList55 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList39, strMap54);
        boolean boolean56 = strSet36.retainAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList55);
        org.joda.time.format.DateTimePrinter dateTimePrinter57 = null;
        org.joda.time.format.DateTimeParser dateTimeParser58 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter57, dateTimeParser58);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = dateTimeFormatter59.withZone(dateTimeZone60);
        org.joda.time.format.DateTimeParser dateTimeParser62 = dateTimeFormatter59.getParser();
        boolean boolean63 = strSet36.equals((java.lang.Object) dateTimeFormatter59);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter64 = dateTimeFormatter59.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = dateTimeFormatter64.withPivotYear((java.lang.Integer) 53932003);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str67 = dateTime14.toString(dateTimeFormatter66);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str34, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u4e2d\u6587" + "'", str35, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(languageRangeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(languageRangeList42);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(languageRangeList55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter61);
        org.junit.Assert.assertNull(dateTimeParser62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter64);
        org.junit.Assert.assertNotNull(dateTimeFormatter66);
    }

    @Test
    public void test04397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04397");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime5 = timeOfDay2.toDateTime((org.joda.time.ReadableInstant) instant4);
        org.joda.time.Chronology chronology6 = instant4.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.clockhourOfHalfday();
        org.joda.time.DurationField durationField8 = chronology6.eras();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.clockhourOfHalfday();
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant18 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime19 = timeOfDay16.toDateTime((org.joda.time.ReadableInstant) instant18);
        org.joda.time.Chronology chronology20 = instant18.getChronology();
        org.joda.time.TimeOfDay timeOfDay23 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant25 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime26 = timeOfDay23.toDateTime((org.joda.time.ReadableInstant) instant25);
        int[] intArray28 = chronology20.get((org.joda.time.ReadablePartial) timeOfDay23, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(0L, chronology20);
        mutableDateTime29.setYear(3);
        org.joda.time.Instant instant33 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone34 = instant33.getZone();
        mutableDateTime29.setZone(dateTimeZone34);
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone34);
        org.joda.time.Interval interval37 = new org.joda.time.Interval((-11491200000L), (long) (-292275054), dateTimeZone34);
        int int39 = dateTimeZone34.getOffset(2678400000L);
        java.util.Locale locale41 = java.util.Locale.CANADA;
        java.util.Locale locale42 = locale41.stripExtensions();
        java.util.Locale locale43 = locale41.stripExtensions();
        java.lang.String str44 = dateTimeZone34.getName((long) 70, locale41);
        java.lang.String str45 = dateTimeField9.getAsText((long) (byte) 0, locale41);
        long long47 = dateTimeField9.roundHalfEven((long) 17);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00" + "'", str44, "+00:00");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "12" + "'", str45, "12");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
    }

    @Test
    public void test04398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04398");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.withDurationAdded(readableDuration4, (int) (byte) 0);
        org.joda.time.DateTime dateTime8 = dateTime3.minusSeconds((int) (short) 1);
        org.joda.time.DateTime.Property property9 = dateTime8.centuryOfEra();
        org.joda.time.DateTime dateTime10 = property9.roundCeilingCopy();
        boolean boolean12 = dateTime10.isBefore(266L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test04399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04399");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.year();
        org.joda.time.DurationField durationField9 = chronology7.weeks();
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(0L, chronology7);
        mutableDateTime10.setMillisOfSecond(45);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
    }

    @Test
    public void test04400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04400");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime22 = timeOfDay19.toDateTime((org.joda.time.ReadableInstant) instant21);
        org.joda.time.Chronology chronology23 = instant21.getChronology();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        int[] intArray31 = chronology23.get((org.joda.time.ReadablePartial) timeOfDay26, (long) (short) -1);
        mutableDateTime16.setChronology(chronology23);
        boolean boolean33 = mutableDateTime16.isEqualNow();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime16.secondOfDay();
        org.joda.time.DurationFieldType durationFieldType35 = org.joda.time.DurationFieldType.millis();
        mutableDateTime16.add(durationFieldType35, (int) (short) 10);
        org.joda.time.TimeOfDay timeOfDay40 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant42 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime43 = timeOfDay40.toDateTime((org.joda.time.ReadableInstant) instant42);
        org.joda.time.Chronology chronology44 = instant42.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.year();
        org.joda.time.TimeOfDay timeOfDay46 = new org.joda.time.TimeOfDay(chronology44);
        org.joda.time.DateTimeField dateTimeField47 = chronology44.weekOfWeekyear();
        boolean boolean48 = durationFieldType35.isSupported(chronology44);
        org.joda.time.DateTimeField dateTimeField49 = chronology44.millisOfDay();
        java.lang.String str50 = dateTimeField49.toString();
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "DateTimeField[millisOfDay]" + "'", str50, "DateTimeField[millisOfDay]");
    }

    @Test
    public void test04401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04401");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.withDurationAdded(readableDuration4, (int) (byte) 0);
        org.joda.time.DateTime dateTime8 = dateTime3.minusSeconds((int) (short) 1);
        org.joda.time.DateTime.Property property9 = dateTime8.centuryOfEra();
        org.joda.time.DateTime dateTime10 = property9.withMinimumValue();
        org.joda.time.DateTime dateTime11 = property9.roundFloorCopy();
        org.joda.time.DateTime dateTime13 = property9.addToCopy(0L);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((java.lang.Object) 0L);
        java.lang.String str16 = localTime14.toString("\u97d3\u6587\u5357\u97d3)");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u97d3\u6587\u5357\u97d3)" + "'", str16, "\u97d3\u6587\u5357\u97d3)");
    }

    @Test
    public void test04402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04402");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime5 = timeOfDay2.toDateTime((org.joda.time.ReadableInstant) instant4);
        org.joda.time.Chronology chronology6 = instant4.getChronology();
        org.joda.time.TimeOfDay timeOfDay9 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime12 = timeOfDay9.toDateTime((org.joda.time.ReadableInstant) instant11);
        int[] intArray14 = chronology6.get((org.joda.time.ReadablePartial) timeOfDay9, (long) (short) -1);
        int int15 = timeOfDay9.size();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = timeOfDay9.toString(dateTimeFormatter16);
        int int18 = timeOfDay9.size();
        org.joda.time.TimeOfDay timeOfDay23 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant25 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime26 = timeOfDay23.toDateTime((org.joda.time.ReadableInstant) instant25);
        org.joda.time.Chronology chronology27 = instant25.getChronology();
        org.joda.time.TimeOfDay timeOfDay30 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant32 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime33 = timeOfDay30.toDateTime((org.joda.time.ReadableInstant) instant32);
        int[] intArray35 = chronology27.get((org.joda.time.ReadablePartial) timeOfDay30, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime(0L, chronology27);
        mutableDateTime36.setYear(3);
        org.joda.time.Instant instant40 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone41 = instant40.getZone();
        mutableDateTime36.setZone(dateTimeZone41);
        org.joda.time.LocalTime localTime43 = new org.joda.time.LocalTime(0L, dateTimeZone41);
        java.util.TimeZone timeZone44 = dateTimeZone41.toTimeZone();
        org.joda.time.TimeOfDay timeOfDay49 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant51 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime52 = timeOfDay49.toDateTime((org.joda.time.ReadableInstant) instant51);
        org.joda.time.Chronology chronology53 = instant51.getChronology();
        org.joda.time.TimeOfDay timeOfDay56 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant58 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime59 = timeOfDay56.toDateTime((org.joda.time.ReadableInstant) instant58);
        int[] intArray61 = chronology53.get((org.joda.time.ReadablePartial) timeOfDay56, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime(0L, chronology53);
        mutableDateTime62.setYear(3);
        org.joda.time.Instant instant66 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone67 = instant66.getZone();
        mutableDateTime62.setZone(dateTimeZone67);
        org.joda.time.LocalTime localTime69 = new org.joda.time.LocalTime(0L, dateTimeZone67);
        java.util.TimeZone timeZone70 = dateTimeZone67.toTimeZone();
        boolean boolean71 = timeZone44.hasSameRules(timeZone70);
        java.util.Locale locale72 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar73 = java.util.Calendar.getInstance(timeZone70, locale72);
        java.util.Date date74 = calendar73.getTime();
        boolean boolean75 = timeOfDay9.equals((java.lang.Object) date74);
        org.joda.time.TimeOfDay timeOfDay80 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant82 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime83 = timeOfDay80.toDateTime((org.joda.time.ReadableInstant) instant82);
        org.joda.time.Chronology chronology84 = instant82.getChronology();
        org.joda.time.TimeOfDay timeOfDay87 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant89 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime90 = timeOfDay87.toDateTime((org.joda.time.ReadableInstant) instant89);
        int[] intArray92 = chronology84.get((org.joda.time.ReadablePartial) timeOfDay87, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime93 = new org.joda.time.MutableDateTime(0L, chronology84);
        java.util.Locale locale95 = new java.util.Locale("zh");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket97 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology84, locale95, (java.lang.Integer) (-292275054));
        org.joda.time.TimeOfDay timeOfDay98 = timeOfDay9.withChronologyRetainFields(chronology84);
        java.lang.String str99 = timeOfDay9.toString();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "T00:01:00.000" + "'", str17, "T00:01:00.000");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(timeZone44);
        org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(timeZone70);
        org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(calendar73);
// flaky:         org.junit.Assert.assertEquals(calendar73.toString(), "java.util.GregorianCalendar[time=1645455725221,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=2,SECOND=5,MILLISECOND=221,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date74);
// flaky:         org.junit.Assert.assertEquals(date74.toString(), "Mon Feb 21 15:02:05 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(intArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray92), "[23, 59, 59, 999]");
        org.junit.Assert.assertEquals(locale95.toString(), "zh");
        org.junit.Assert.assertNotNull(timeOfDay98);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "T00:01:00.000" + "'", str99, "T00:01:00.000");
    }

    @Test
    public void test04403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04403");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(53965423, 169, 54020);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53965423 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04404");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime5 = timeOfDay2.toDateTime((org.joda.time.ReadableInstant) instant4);
        org.joda.time.Chronology chronology6 = instant4.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.clockhourOfHalfday();
        long long9 = dateTimeField7.roundHalfFloor(0L);
        java.util.Locale locale10 = java.util.Locale.TRADITIONAL_CHINESE;
        int int11 = dateTimeField7.getMaximumShortTextLength(locale10);
        java.util.Locale locale12 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale13 = locale12.stripExtensions();
        java.util.Locale locale14 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale15 = locale14.stripExtensions();
        java.lang.String str16 = locale12.getDisplayName(locale14);
        java.lang.String str17 = locale10.getDisplayLanguage(locale12);
        java.util.Set<java.lang.String> strSet18 = locale12.getUnicodeLocaleAttributes();
        int int19 = strSet18.size();
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap23 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList24 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, strMap23);
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "\u4e2d\u6587\u53f0\u7063)", "zh", "hi!", "\u4e2d\u6587", "1970-01-01T00:00:00.000Z", "zh" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        java.lang.String str35 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.lang.String>) strList33);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap36 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList37 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, strMap36);
        boolean boolean38 = strSet18.retainAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList37);
        org.joda.time.format.DateTimePrinter dateTimePrinter39 = null;
        org.joda.time.format.DateTimeParser dateTimeParser40 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter39, dateTimeParser40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter41.withZone(dateTimeZone42);
        org.joda.time.format.DateTimeParser dateTimeParser44 = dateTimeFormatter41.getParser();
        boolean boolean45 = strSet18.equals((java.lang.Object) dateTimeFormatter41);
        boolean boolean46 = dateTimeFormatter41.isParser();
        org.joda.time.Chronology chronology47 = dateTimeFormatter41.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter41.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter48.withDefaultYear(2022);
        java.util.Locale locale51 = dateTimeFormatter48.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = dateTimeFormatter48.withPivotYear((java.lang.Integer) 36613510);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = dateTimeFormatter48.withPivotYear((java.lang.Integer) 195);
        java.io.Writer writer56 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter48.printTo(writer56, (-839699990000L));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str16, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u4e2d\u6587" + "'", str17, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(languageRangeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(languageRangeList24);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(languageRangeList37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
        org.junit.Assert.assertNull(dateTimeParser44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
        org.junit.Assert.assertNull(locale51);
        org.junit.Assert.assertNotNull(dateTimeFormatter53);
        org.junit.Assert.assertNotNull(dateTimeFormatter55);
    }

    @Test
    public void test04405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04405");
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant10 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime11 = timeOfDay8.toDateTime((org.joda.time.ReadableInstant) instant10);
        org.joda.time.Chronology chronology12 = instant10.getChronology();
        org.joda.time.TimeOfDay timeOfDay15 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant17 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime18 = timeOfDay15.toDateTime((org.joda.time.ReadableInstant) instant17);
        int[] intArray20 = chronology12.get((org.joda.time.ReadablePartial) timeOfDay15, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(0L, chronology12);
        org.joda.time.TimeOfDay timeOfDay24 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant26 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime27 = timeOfDay24.toDateTime((org.joda.time.ReadableInstant) instant26);
        org.joda.time.Chronology chronology28 = instant26.getChronology();
        org.joda.time.TimeOfDay timeOfDay31 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant33 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime34 = timeOfDay31.toDateTime((org.joda.time.ReadableInstant) instant33);
        int[] intArray36 = chronology28.get((org.joda.time.ReadablePartial) timeOfDay31, (long) (short) -1);
        mutableDateTime21.setChronology(chronology28);
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime(chronology28);
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime((long) (byte) 0, chronology28);
        org.joda.time.DateTimeField dateTimeField40 = chronology28.halfdayOfDay();
        long long44 = chronology28.add((long) 'a', (long) 32769, 31);
        org.joda.time.TimeOfDay timeOfDay45 = new org.joda.time.TimeOfDay((-2678399965L), chronology28);
        org.joda.time.DateTimeField dateTimeField46 = chronology28.secondOfMinute();
        org.joda.time.DurationField durationField47 = chronology28.years();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate(54004294, 23, 53948575, chronology28);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 23 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1015936L + "'", long44 == 1015936L);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(durationField47);
    }

    @Test
    public void test04406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04406");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        int int17 = mutableDateTime16.getEra();
        int int18 = mutableDateTime16.getWeekyear();
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime25 = timeOfDay22.toDateTime((org.joda.time.ReadableInstant) instant24);
        org.joda.time.Chronology chronology26 = instant24.getChronology();
        org.joda.time.TimeOfDay timeOfDay29 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant31 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime32 = timeOfDay29.toDateTime((org.joda.time.ReadableInstant) instant31);
        int[] intArray34 = chronology26.get((org.joda.time.ReadablePartial) timeOfDay29, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(0L, chronology26);
        mutableDateTime35.setYear(3);
        org.joda.time.Instant instant39 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone40 = instant39.getZone();
        mutableDateTime35.setZone(dateTimeZone40);
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight(dateTimeZone40);
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime(dateTimeZone40);
        mutableDateTime16.setZone(dateTimeZone40);
        mutableDateTime16.setSecondOfDay(9);
        mutableDateTime16.addWeeks(27);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone40);
    }

    @Test
    public void test04407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04407");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale locale2 = java.util.Locale.KOREA;
        java.util.Locale locale3 = locale2.stripExtensions();
        java.lang.String str4 = locale3.getISO3Country();
        java.util.Locale.Builder builder5 = builder0.setLocale(locale3);
        java.util.Locale.Builder builder6 = builder0.clearExtensions();
        java.util.Locale.Builder builder8 = builder0.removeUnicodeLocaleAttribute("German");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder0.removeUnicodeLocaleAttribute("dayOfYear");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: dayOfYear [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "KOR" + "'", str4, "KOR");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test04408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04408");
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime10 = timeOfDay7.toDateTime((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Chronology chronology11 = instant9.getChronology();
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant16 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime17 = timeOfDay14.toDateTime((org.joda.time.ReadableInstant) instant16);
        int[] intArray19 = chronology11.get((org.joda.time.ReadablePartial) timeOfDay14, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(0L, chronology11);
        mutableDateTime20.setYear(3);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone25 = instant24.getZone();
        mutableDateTime20.setZone(dateTimeZone25);
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(dateTimeZone25);
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((long) '#', dateTimeZone25);
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) 36, dateTimeZone25);
        org.joda.time.Interval interval30 = new org.joda.time.Interval(54535866L, 4460480949L, dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone25);
    }

    @Test
    public void test04409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04409");
        org.joda.time.TimeOfDay timeOfDay5 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime8 = timeOfDay5.toDateTime((org.joda.time.ReadableInstant) instant7);
        org.joda.time.Chronology chronology9 = instant7.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.year();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(2020, 0, (int) (short) 100, chronology9);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2020 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test04410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04410");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = new java.util.Date("960");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04411");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        int int17 = mutableDateTime16.getEra();
        boolean boolean19 = mutableDateTime16.isBefore((long) 2);
        mutableDateTime16.setDate((long) (short) 1);
        int int22 = mutableDateTime16.getCenturyOfEra();
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 19 + "'", int22 == 19);
    }

    @Test
    public void test04412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04412");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTime((org.joda.time.ReadableInstant) instant6);
        org.joda.time.Chronology chronology8 = instant6.getChronology();
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime14 = timeOfDay11.toDateTime((org.joda.time.ReadableInstant) instant13);
        int[] intArray16 = chronology8.get((org.joda.time.ReadablePartial) timeOfDay11, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(0L, chronology8);
        mutableDateTime17.setYear(3);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone22 = instant21.getZone();
        mutableDateTime17.setZone(dateTimeZone22);
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(dateTimeZone22);
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((long) '#', dateTimeZone22);
        org.joda.time.Chronology chronology26 = localTime25.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.weekyearOfCentury();
        org.joda.time.DurationField durationField28 = dateTimeField27.getLeapDurationField();
        org.joda.time.TimeOfDay timeOfDay33 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant35 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime36 = timeOfDay33.toDateTime((org.joda.time.ReadableInstant) instant35);
        org.joda.time.Chronology chronology37 = instant35.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.clockhourOfHalfday();
        long long40 = dateTimeField38.roundHalfFloor(0L);
        java.util.Locale locale41 = java.util.Locale.TRADITIONAL_CHINESE;
        int int42 = dateTimeField38.getMaximumShortTextLength(locale41);
        java.lang.String str43 = locale41.getLanguage();
        java.util.Locale locale44 = locale41.stripExtensions();
        java.util.Locale.setDefault(locale41);
        java.lang.String str46 = locale41.getDisplayLanguage();
        // The following exception was thrown during execution in test generation
        try {
            long long47 = dateTimeField27.set(2949578150400000L, "\u53f0\u7063", locale41);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"??\" for weekyearOfCentury is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNull(durationField28);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "zh" + "'", str43, "zh");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\u4e2d\u6587" + "'", str46, "\u4e2d\u6587");
    }

    @Test
    public void test04413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04413");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.minusSeconds(34);
        int int5 = timeOfDay4.size();
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
    }

    @Test
    public void test04414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04414");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone1 = dateTimeZone0.toTimeZone();
        java.lang.Object obj2 = timeZone1.clone();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
    }

    @Test
    public void test04415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04415");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval5 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean6 = interval2.abuts((org.joda.time.ReadableInterval) interval5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Interval interval8 = interval5.withDurationBeforeEnd(readableDuration7);
        boolean boolean9 = interval8.isBeforeNow();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight12.withDurationAdded((long) (short) 10, 1);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.plus((long) 31);
        org.joda.time.Interval interval18 = interval8.withEnd((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        long long23 = dateTimeZone21.nextTransition(1L);
        int int25 = dateTimeZone21.getOffset(1015936L);
        org.joda.time.Interval interval26 = new org.joda.time.Interval((long) 14, (long) 25, dateTimeZone21);
        boolean boolean27 = interval8.abuts((org.joda.time.ReadableInterval) interval26);
        org.joda.time.Interval interval28 = interval8.toInterval();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(interval28);
    }

    @Test
    public void test04416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04416");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = localDate0.toDateMidnight(dateTimeZone3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.plus((long) 100);
        int int7 = dateMidnight4.getMinuteOfDay();
        org.joda.time.DateMidnight.Property property8 = dateMidnight4.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight4.minus((long) 53948575);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight12 = dateMidnight4.withWeekOfWeekyear(1904);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1904 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight10);
    }

    @Test
    public void test04417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04417");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        int int3 = localDate0.getDayOfYear();
        org.joda.time.LocalDate localDate5 = localDate0.plusYears((-1));
        org.joda.time.LocalDate.Property property6 = localDate0.era();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay10.withSecondOfMinute((int) (byte) 1);
        org.joda.time.TimeOfDay.Property property13 = timeOfDay12.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay15 = property13.addWrapFieldToCopy(1);
        java.util.Locale locale16 = java.util.Locale.ITALY;
        java.lang.String str17 = property13.getAsShortText(locale16);
        java.lang.String str19 = locale16.getExtension('x');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate20 = property6.setCopy("16", locale16);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"16\" for era is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 52 + "'", int3 == 52);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0" + "'", str17, "0");
        org.junit.Assert.assertNull(str19);
    }

    @Test
    public void test04418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04418");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay.Property property3 = timeOfDay2.minuteOfHour();
        java.lang.String str4 = property3.getAsShortText();
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime10 = timeOfDay7.toDateTime((org.joda.time.ReadableInstant) instant9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.DateTime dateTime13 = dateTime10.withPeriodAdded(readablePeriod11, (int) (short) 0);
        int int14 = property3.compareTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval20 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean21 = interval17.abuts((org.joda.time.ReadableInterval) interval20);
        long long22 = interval20.getStartMillis();
        org.joda.time.Interval interval24 = interval20.withStartMillis((long) (short) -1);
        org.joda.time.Instant instant25 = new org.joda.time.Instant();
        org.joda.time.Instant instant27 = instant25.plus((long) 2);
        org.joda.time.MutableDateTime mutableDateTime28 = instant27.toMutableDateTimeISO();
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        mutableDateTime28.add(readablePeriod29, (int) ' ');
        org.joda.time.TimeOfDay timeOfDay36 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant38 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime39 = timeOfDay36.toDateTime((org.joda.time.ReadableInstant) instant38);
        org.joda.time.Chronology chronology40 = instant38.getChronology();
        org.joda.time.TimeOfDay timeOfDay43 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant45 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime46 = timeOfDay43.toDateTime((org.joda.time.ReadableInstant) instant45);
        int[] intArray48 = chronology40.get((org.joda.time.ReadablePartial) timeOfDay43, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime(0L, chronology40);
        org.joda.time.DurationField durationField50 = chronology40.weeks();
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime((-86340000L), chronology40);
        org.joda.time.MutableDateTime mutableDateTime52 = org.joda.time.MutableDateTime.now(chronology40);
        org.joda.time.DateTimeField dateTimeField53 = chronology40.dayOfWeek();
        mutableDateTime28.setChronology(chronology40);
        org.joda.time.Interval interval55 = interval24.withChronology(chronology40);
        org.joda.time.DateTime dateTime56 = interval55.getEnd();
        org.joda.time.TimeOfDay timeOfDay60 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant62 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime63 = timeOfDay60.toDateTime((org.joda.time.ReadableInstant) instant62);
        org.joda.time.Chronology chronology64 = instant62.getChronology();
        org.joda.time.TimeOfDay timeOfDay67 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant69 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime70 = timeOfDay67.toDateTime((org.joda.time.ReadableInstant) instant69);
        int[] intArray72 = chronology64.get((org.joda.time.ReadablePartial) timeOfDay67, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime73 = new org.joda.time.MutableDateTime(0L, chronology64);
        int int74 = mutableDateTime73.getEra();
        boolean boolean76 = mutableDateTime73.isBefore((long) 2);
        mutableDateTime73.setSecondOfMinute(10);
        boolean boolean79 = interval55.isAfter((org.joda.time.ReadableInstant) mutableDateTime73);
        int int80 = property3.compareTo((org.joda.time.ReadableInstant) mutableDateTime73);
        org.joda.time.MutableDateTime.Property property81 = mutableDateTime73.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime83 = property81.addWrapField(54002219);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime83.setMonthOfYear(104);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 104 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1" + "'", str4, "1");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(mutableDateTime83);
    }

    @Test
    public void test04419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04419");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.withDurationAdded(readableDuration4, (int) (byte) 0);
        org.joda.time.DateTime dateTime8 = dateTime3.minusSeconds((int) (short) 1);
        org.joda.time.DateTime.Property property9 = dateTime8.centuryOfEra();
        org.joda.time.DateTime dateTime10 = property9.withMinimumValue();
        org.joda.time.DateTime dateTime11 = property9.roundFloorCopy();
        org.joda.time.DateTime dateTime13 = dateTime11.plusDays(2);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateTime dateTime16 = dateTime11.withField(dateTimeFieldType14, 43);
        java.util.Date date20 = new java.util.Date(0, (int) '4', 0);
        int int21 = date20.getMinutes();
        org.joda.time.YearMonthDay yearMonthDay22 = org.joda.time.YearMonthDay.fromDateFields(date20);
        org.joda.time.DateTime dateTime23 = yearMonthDay22.toDateTimeAtMidnight();
        org.joda.time.DateTime.Property property24 = dateTime23.millisOfDay();
        org.joda.time.DateTime dateTime25 = property24.getDateTime();
        org.joda.time.DateTime dateTime26 = property24.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone27 = dateTime26.getZone();
        int int28 = dateTime26.getSecondOfMinute();
        org.joda.time.DateTime dateTime29 = dateTime26.withEarlierOffsetAtOverlap();
        boolean boolean30 = dateTime16.isAfter((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime32 = dateTime16.minusMillis(54006);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(dateTime16);
// flaky:         org.junit.Assert.assertEquals(date20.toString(), "Sat Apr 30 00:00:00 GMT+00:00 1904");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTime32);
    }

    @Test
    public void test04420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04420");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(10, 0);
        java.lang.String str3 = dateTimeZone2.toString();
        boolean boolean4 = dateTimeZone2.isFixed();
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay(dateTimeZone2);
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay5.minusMonths((int) (byte) 1);
        org.joda.time.LocalDate localDate8 = yearMonthDay5.toLocalDate();
        int int9 = localDate8.getDayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate11 = localDate8.withYearOfCentury(1962);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1962 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+10:00" + "'", str3, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
    }

    @Test
    public void test04421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04421");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder2 = builder0.setLanguage("50400000");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 50400000 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04422");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime.Property property2 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime3 = property2.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime4 = property2.roundFloorCopy();
        org.joda.time.LocalTime localTime6 = property2.addCopy((long) 723960000);
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime14 = timeOfDay11.toDateTime((org.joda.time.ReadableInstant) instant13);
        org.joda.time.Chronology chronology15 = instant13.getChronology();
        org.joda.time.TimeOfDay timeOfDay18 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant20 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime21 = timeOfDay18.toDateTime((org.joda.time.ReadableInstant) instant20);
        int[] intArray23 = chronology15.get((org.joda.time.ReadablePartial) timeOfDay18, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(0L, chronology15);
        mutableDateTime24.setYear(3);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone29 = instant28.getZone();
        mutableDateTime24.setZone(dateTimeZone29);
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(dateTimeZone29);
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((long) '#', dateTimeZone29);
        org.joda.time.Chronology chronology33 = localTime32.getChronology();
        org.joda.time.Instant instant35 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone36 = instant35.getZone();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone36);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.DateTime dateTime40 = dateTime37.withDurationAdded(readableDuration38, (int) (byte) 0);
        org.joda.time.DateTime dateTime42 = dateTime37.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime44 = dateTime42.plusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime46 = dateTime44.plusDays(2);
        org.joda.time.DateTime dateTime48 = dateTime44.withHourOfDay(10);
        org.joda.time.DateTime.Property property49 = dateTime48.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.secondOfMinute();
        int int51 = dateTime48.get(dateTimeFieldType50);
        boolean boolean52 = localTime32.isSupported(dateTimeFieldType50);
        boolean boolean53 = localTime6.isSupported(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 4 + "'", int51 == 4);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
    }

    @Test
    public void test04423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04423");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.withDurationAdded((long) 2, 100);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight2.minusMonths((-1));
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.plus(readableDuration8);
        boolean boolean11 = dateMidnight9.isAfter((long) 1645455555);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test04424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04424");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime22 = timeOfDay19.toDateTime((org.joda.time.ReadableInstant) instant21);
        org.joda.time.Chronology chronology23 = instant21.getChronology();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        int[] intArray31 = chronology23.get((org.joda.time.ReadablePartial) timeOfDay26, (long) (short) -1);
        mutableDateTime16.setChronology(chronology23);
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime(chronology23);
        org.joda.time.DateTimeField dateTimeField34 = chronology23.weekOfWeekyear();
        org.joda.time.DurationField durationField35 = chronology23.seconds();
        int int38 = durationField35.getValue((long) (byte) -1, (long) '#');
        long long41 = durationField35.subtract((long) 366, (long) (short) -1);
        long long44 = durationField35.subtract(864000069L, (-292275054));
        java.lang.String str45 = durationField35.toString();
        long long47 = durationField35.getValueAsLong(1645455552947L);
        java.lang.String str48 = durationField35.toString();
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1366L + "'", long41 == 1366L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 293139054069L + "'", long44 == 293139054069L);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "DurationField[seconds]" + "'", str45, "DurationField[seconds]");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 1645455552L + "'", long47 == 1645455552L);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "DurationField[seconds]" + "'", str48, "DurationField[seconds]");
    }

    @Test
    public void test04425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04425");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.Chronology chronology1 = localDateTime0.getChronology();
        int int2 = localDateTime0.size();
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime5 = property3.addWrapFieldToCopy(11);
        org.joda.time.LocalDateTime localDateTime6 = property3.withMinimumValue();
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.year();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundFloorCopy();
        long long9 = property7.remainder();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 4460520978L + "'", long9 == 4460520978L);
    }

    @Test
    public void test04426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04426");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.withDurationAdded(readableDuration4, (int) (byte) 0);
        org.joda.time.DateTime dateTime7 = dateTime6.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime7.minusDays(4);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, readablePeriod10);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.Interval interval13 = interval11.withPeriodBeforeEnd(readablePeriod12);
        org.joda.time.Chronology chronology14 = interval13.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.hours();
        // The following exception was thrown during execution in test generation
        try {
            long long18 = durationField15.add((-1715687880000L), 6374504357932003L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 6374504357932003 * 3600000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test04427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04427");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.plusWeeks(20);
        org.joda.time.MutableDateTime mutableDateTime9 = dateMidnight8.toMutableDateTimeISO();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime9.setDayOfWeek(36);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 36 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
    }

    @Test
    public void test04428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04428");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.Chronology chronology1 = localDateTime0.getChronology();
        org.joda.time.LocalDateTime.Property property2 = localDateTime0.secondOfMinute();
        int int3 = localDateTime0.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateTime dateTime5 = localDateTime0.toDateTime(dateTimeZone4);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime10 = localDateTime0.withTime(38, 16, 0, 1904);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 38 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 21 + "'", int3 == 21);
        org.junit.Assert.assertNotNull(dateTime5);
    }

    @Test
    public void test04429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04429");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.Chronology chronology1 = localDateTime0.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.minusYears(0);
        java.util.Date date4 = localDateTime3.toDate();
        org.joda.time.LocalDateTime.Property property5 = localDateTime3.millisOfDay();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Mon Feb 21 15:02:06 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property5);
    }

    @Test
    public void test04430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04430");
        org.joda.time.TimeOfDay timeOfDay5 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime8 = timeOfDay5.toDateTime((org.joda.time.ReadableInstant) instant7);
        org.joda.time.Chronology chronology9 = instant7.getChronology();
        org.joda.time.TimeOfDay timeOfDay12 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant14 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime15 = timeOfDay12.toDateTime((org.joda.time.ReadableInstant) instant14);
        int[] intArray17 = chronology9.get((org.joda.time.ReadablePartial) timeOfDay12, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(0L, chronology9);
        org.joda.time.TimeOfDay timeOfDay21 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant23 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime24 = timeOfDay21.toDateTime((org.joda.time.ReadableInstant) instant23);
        org.joda.time.Chronology chronology25 = instant23.getChronology();
        org.joda.time.TimeOfDay timeOfDay28 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant30 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime31 = timeOfDay28.toDateTime((org.joda.time.ReadableInstant) instant30);
        int[] intArray33 = chronology25.get((org.joda.time.ReadablePartial) timeOfDay28, (long) (short) -1);
        mutableDateTime18.setChronology(chronology25);
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime(chronology25);
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime((long) (byte) 0, chronology25);
        org.joda.time.DateTimeField dateTimeField37 = chronology25.halfdayOfDay();
        long long41 = chronology25.add((long) 'a', (long) 32769, 31);
        org.joda.time.TimeOfDay timeOfDay42 = new org.joda.time.TimeOfDay((-2678399965L), chronology25);
        org.joda.time.DurationField durationField43 = chronology25.halfdays();
        org.joda.time.DurationField durationField44 = chronology25.millis();
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1015936L + "'", long41 == 1015936L);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(durationField44);
    }

    @Test
    public void test04431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04431");
        org.joda.time.Instant instant2 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone3 = instant2.getZone();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime7 = dateTime4.withDurationAdded(readableDuration5, (int) (byte) 0);
        org.joda.time.DateTime dateTime9 = dateTime4.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusMonths((int) '4');
        org.joda.time.DateTimeZone dateTimeZone14 = dateTime13.getZone();
        long long17 = dateTimeZone14.convertLocalToUTC((long) 35, true);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(4460347660L, dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusDays(14);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.withCenturyOfEra(2678400);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 35L + "'", long17 == 35L);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test04432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04432");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        java.lang.String str1 = localTime0.toString();
        org.joda.time.Interval interval4 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean8 = interval4.abuts((org.joda.time.ReadableInterval) interval7);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.withWeekyear(2);
        boolean boolean14 = interval4.isBefore((org.joda.time.ReadableInstant) dateMidnight11);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Interval interval16 = interval4.withDurationAfterStart(readableDuration15);
        org.joda.time.Duration duration17 = interval4.toDuration();
        org.joda.time.Interval interval20 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean24 = interval20.abuts((org.joda.time.ReadableInterval) interval23);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.withWeekyear(2);
        boolean boolean30 = interval20.isBefore((org.joda.time.ReadableInstant) dateMidnight27);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Interval interval32 = interval20.withDurationAfterStart(readableDuration31);
        org.joda.time.Duration duration33 = interval20.toDuration();
        int int34 = duration17.compareTo((org.joda.time.ReadableDuration) duration33);
        org.joda.time.Period period35 = duration17.toPeriod();
        java.lang.String str36 = period35.toString();
        org.joda.time.MutablePeriod mutablePeriod37 = period35.toMutablePeriod();
        org.joda.time.MutablePeriod mutablePeriod38 = mutablePeriod37.toMutablePeriod();
        org.joda.time.LocalTime localTime40 = localTime0.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod37, 54049);
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "00:00:00.000" + "'", str1, "00:00:00.000");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "PT0S" + "'", str36, "PT0S");
        org.junit.Assert.assertNotNull(mutablePeriod37);
        org.junit.Assert.assertNotNull(mutablePeriod38);
        org.junit.Assert.assertNotNull(localTime40);
    }

    @Test
    public void test04433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04433");
        org.joda.time.Instant instant2 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone3 = instant2.getZone();
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) 2, dateTimeZone3);
        mutableDateTime4.setMinuteOfHour((int) (byte) 0);
        mutableDateTime4.setWeekyear(32769);
        mutableDateTime4.setMillis((long) 57);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime4.hourOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test04434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04434");
        java.util.Date date9 = new java.util.Date(0, (int) '4', 0);
        int int10 = date9.getMinutes();
        org.joda.time.YearMonthDay yearMonthDay11 = org.joda.time.YearMonthDay.fromDateFields(date9);
        int int12 = yearMonthDay11.getYear();
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay11.plusDays((int) (byte) 0);
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay14.plusYears((-19045));
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone20 = instant19.getZone();
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) 2, dateTimeZone20);
        org.joda.time.DateTime dateTime22 = yearMonthDay14.toDateTimeAtMidnight(dateTimeZone20);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(32772, 865, 97, 2000, 0, 53956, dateTimeZone20);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Sat Apr 30 00:00:00 GMT+00:00 1904");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1904 + "'", int12 == 1904);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime22);
    }

    @Test
    public void test04435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04435");
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        int[] intArray8 = timeOfDay7.getValues();
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime14 = timeOfDay11.toDateTime((org.joda.time.ReadableInstant) instant13);
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay11.minusMinutes((int) '4');
        int int17 = timeOfDay7.compareTo((org.joda.time.ReadablePartial) timeOfDay11);
        org.joda.time.TimeOfDay timeOfDay20 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant22 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime23 = timeOfDay20.toDateTime((org.joda.time.ReadableInstant) instant22);
        org.joda.time.Chronology chronology24 = instant22.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.clockhourOfHalfday();
        org.joda.time.DurationField durationField26 = chronology24.eras();
        org.joda.time.TimeOfDay timeOfDay27 = timeOfDay7.withChronologyRetainFields(chronology24);
        org.joda.time.LocalTime localTime29 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime.Property property30 = localTime29.hourOfDay();
        org.joda.time.LocalTime localTime32 = property30.addCopy(21);
        org.joda.time.LocalTime localTime33 = property30.roundFloorCopy();
        org.joda.time.LocalTime localTime35 = localTime33.minusHours(29);
        long long37 = chronology24.set((org.joda.time.ReadablePartial) localTime33, 592888L);
        org.joda.time.DateTimeField dateTimeField38 = chronology24.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(54559, (-457079), 32769, 54010, 54020, chronology24);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54010 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(dateTimeField38);
    }

    @Test
    public void test04436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04436");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime22 = timeOfDay19.toDateTime((org.joda.time.ReadableInstant) instant21);
        org.joda.time.Chronology chronology23 = instant21.getChronology();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        int[] intArray31 = chronology23.get((org.joda.time.ReadablePartial) timeOfDay26, (long) (short) -1);
        mutableDateTime16.setChronology(chronology23);
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime(chronology23);
        org.joda.time.DateTimeField dateTimeField34 = chronology23.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField35 = chronology23.minuteOfHour();
        org.joda.time.DurationField durationField36 = chronology23.halfdays();
        int int38 = durationField36.getValue((long) 53979578);
        long long41 = durationField36.getDifferenceAsLong(53897496L, 54588096L);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
    }

    @Test
    public void test04437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04437");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) (-11491200));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.withMillisOfSecond(53979631);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53979631 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04438");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        mutableDateTime16.setYear(3);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime16.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime20 = property19.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime21 = property19.getMutableDateTime();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime21.year();
        org.joda.time.TimeOfDay timeOfDay25 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay.Property property26 = timeOfDay25.minuteOfHour();
        java.lang.String str27 = property26.getAsShortText();
        org.joda.time.TimeOfDay timeOfDay30 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant32 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime33 = timeOfDay30.toDateTime((org.joda.time.ReadableInstant) instant32);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        org.joda.time.DateTime dateTime36 = dateTime33.withPeriodAdded(readablePeriod34, (int) (short) 0);
        int int37 = property26.compareTo((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime38 = dateTime33.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((java.lang.Object) dateTime33);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.DateTime dateTime41 = dateTime39.minus(readablePeriod40);
        org.joda.time.DateTime dateTime43 = dateTime39.withYear(31);
        mutableDateTime21.setTime((org.joda.time.ReadableInstant) dateTime43);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1" + "'", str27, "1");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
    }

    @Test
    public void test04439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04439");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.withSecondOfMinute((int) (byte) 1);
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay7 = property5.addWrapFieldToCopy(1);
        int int8 = property5.getMinimumValueOverall();
        int int9 = property5.getMaximumValue();
        java.lang.String str10 = property5.getAsString();
        org.joda.time.TimeOfDay timeOfDay12 = property5.addToCopy(54006);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay14 = property5.setCopy("\u4e0a\u5348 12:00:00");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"1970/1/1 ?? 12:00:00\" for hourOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 23 + "'", int9 == 23);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "0" + "'", str10, "0");
        org.junit.Assert.assertNotNull(timeOfDay12);
    }

    @Test
    public void test04440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04440");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime2 = property1.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.roundHalfFloor();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime5 = property1.set((int) ' ');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
    }

    @Test
    public void test04441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04441");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = localDate0.toDateMidnight(dateTimeZone3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.plus((long) 100);
        int int7 = dateMidnight4.getMinuteOfDay();
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight4.withDurationAdded((long) 1970, 100);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(10, 0);
        java.lang.String str14 = dateTimeZone13.toString();
        boolean boolean15 = dateTimeZone13.isFixed();
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(dateTimeZone13);
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay16.plusYears((int) (byte) 100);
        org.joda.time.Instant instant20 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone21 = instant20.getZone();
        org.joda.time.Interval interval22 = yearMonthDay16.toInterval(dateTimeZone21);
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((java.lang.Object) dateMidnight4, dateTimeZone21);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.minusWeeks(235);
        org.joda.time.DateMidnight.Property property26 = dateMidnight25.weekyear();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+10:00" + "'", str14, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(property26);
    }

    @Test
    public void test04442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04442");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis((long) (byte) 100);
        org.joda.time.DateTime dateTime3 = instant0.toDateTimeISO();
        long long4 = instant0.getMillis();
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(dateTime3);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1645455726615L + "'", long4 == 1645455726615L);
    }

    @Test
    public void test04443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04443");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        org.joda.time.DateTime dateTime3 = instant1.toDateTime();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Instant instant6 = instant1.withDurationAdded(readableDuration4, (int) 'x');
        org.joda.time.Instant instant7 = instant1.toInstant();
        org.joda.time.DateTime dateTime8 = instant1.toDateTime();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean11 = localDate9.isSupported(dateTimeFieldType10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = localDate9.toDateMidnight(dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight13.plus((long) 100);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight13.minus((long) (byte) 10);
        boolean boolean18 = instant1.equals((java.lang.Object) (byte) 10);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test04444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04444");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(53517631L);
        org.joda.time.LocalTime.Property property2 = localTime1.minuteOfHour();
        org.junit.Assert.assertNotNull(property2);
    }

    @Test
    public void test04445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04445");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date4 = new java.util.Date(10, 3, 15);
        java.util.Calendar.Builder builder5 = builder0.setInstant(date4);
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        org.joda.time.Chronology chronology14 = instant12.getChronology();
        org.joda.time.TimeOfDay timeOfDay17 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime20 = timeOfDay17.toDateTime((org.joda.time.ReadableInstant) instant19);
        int[] intArray22 = chronology14.get((org.joda.time.ReadablePartial) timeOfDay17, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(0L, chronology14);
        mutableDateTime23.setYear(3);
        org.joda.time.Instant instant27 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone28 = instant27.getZone();
        mutableDateTime23.setZone(dateTimeZone28);
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime(0L, dateTimeZone28);
        java.util.TimeZone timeZone31 = dateTimeZone28.toTimeZone();
        org.joda.time.TimeOfDay timeOfDay36 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant38 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime39 = timeOfDay36.toDateTime((org.joda.time.ReadableInstant) instant38);
        org.joda.time.Chronology chronology40 = instant38.getChronology();
        org.joda.time.TimeOfDay timeOfDay43 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant45 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime46 = timeOfDay43.toDateTime((org.joda.time.ReadableInstant) instant45);
        int[] intArray48 = chronology40.get((org.joda.time.ReadablePartial) timeOfDay43, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime(0L, chronology40);
        mutableDateTime49.setYear(3);
        org.joda.time.Instant instant53 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone54 = instant53.getZone();
        mutableDateTime49.setZone(dateTimeZone54);
        org.joda.time.LocalTime localTime56 = new org.joda.time.LocalTime(0L, dateTimeZone54);
        java.util.TimeZone timeZone57 = dateTimeZone54.toTimeZone();
        boolean boolean58 = timeZone31.hasSameRules(timeZone57);
        timeZone57.setRawOffset((int) 'a');
        timeZone57.setID("\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)");
        java.util.Calendar.Builder builder63 = builder5.setTimeZone(timeZone57);
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZoneId zoneId64 = timeZone57.toZoneId();
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid ID for region-based ZoneId, invalid format: ?? (????)");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Fri Apr 15 00:00:00 GMT+00:00 1910");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(timeZone57);
        org.junit.Assert.assertEquals(timeZone57.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(builder63);
    }

    @Test
    public void test04446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04446");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.plus((long) 2);
        org.joda.time.MutableDateTime mutableDateTime3 = instant2.toMutableDateTimeISO();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        mutableDateTime3.add(readablePeriod4, (int) ' ');
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime14 = timeOfDay11.toDateTime((org.joda.time.ReadableInstant) instant13);
        org.joda.time.Chronology chronology15 = instant13.getChronology();
        org.joda.time.TimeOfDay timeOfDay18 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant20 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime21 = timeOfDay18.toDateTime((org.joda.time.ReadableInstant) instant20);
        int[] intArray23 = chronology15.get((org.joda.time.ReadablePartial) timeOfDay18, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(0L, chronology15);
        org.joda.time.DurationField durationField25 = chronology15.weeks();
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((-86340000L), chronology15);
        org.joda.time.MutableDateTime mutableDateTime27 = org.joda.time.MutableDateTime.now(chronology15);
        org.joda.time.DateTimeField dateTimeField28 = chronology15.dayOfWeek();
        mutableDateTime3.setChronology(chronology15);
        java.lang.String str30 = mutableDateTime3.toString();
        org.joda.time.TimeOfDay timeOfDay34 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant36 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime37 = timeOfDay34.toDateTime((org.joda.time.ReadableInstant) instant36);
        org.joda.time.Chronology chronology38 = instant36.getChronology();
        org.joda.time.TimeOfDay timeOfDay41 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant43 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime44 = timeOfDay41.toDateTime((org.joda.time.ReadableInstant) instant43);
        int[] intArray46 = chronology38.get((org.joda.time.ReadablePartial) timeOfDay41, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime(0L, chronology38);
        org.joda.time.TimeOfDay timeOfDay50 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant52 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime53 = timeOfDay50.toDateTime((org.joda.time.ReadableInstant) instant52);
        org.joda.time.Chronology chronology54 = instant52.getChronology();
        org.joda.time.TimeOfDay timeOfDay57 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant59 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime60 = timeOfDay57.toDateTime((org.joda.time.ReadableInstant) instant59);
        int[] intArray62 = chronology54.get((org.joda.time.ReadablePartial) timeOfDay57, (long) (short) -1);
        mutableDateTime47.setChronology(chronology54);
        org.joda.time.LocalTime localTime64 = new org.joda.time.LocalTime(chronology54);
        org.joda.time.DateTimeField dateTimeField65 = chronology54.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField66 = chronology54.halfdayOfDay();
        org.joda.time.TimeOfDay timeOfDay67 = new org.joda.time.TimeOfDay(chronology54);
        mutableDateTime3.setChronology(chronology54);
        org.joda.time.MutableDateTime.Property property69 = mutableDateTime3.millisOfSecond();
        mutableDateTime3.addYears(53973848);
        org.joda.time.TimeOfDay timeOfDay75 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant77 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime78 = timeOfDay75.toDateTime((org.joda.time.ReadableInstant) instant77);
        org.joda.time.Chronology chronology79 = instant77.getChronology();
        org.joda.time.TimeOfDay timeOfDay82 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant84 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime85 = timeOfDay82.toDateTime((org.joda.time.ReadableInstant) instant84);
        int[] intArray87 = chronology79.get((org.joda.time.ReadablePartial) timeOfDay82, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime88 = new org.joda.time.MutableDateTime(0L, chronology79);
        mutableDateTime88.setYear(3);
        org.joda.time.Instant instant92 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone93 = instant92.getZone();
        mutableDateTime88.setZone(dateTimeZone93);
        org.joda.time.DateMidnight dateMidnight95 = new org.joda.time.DateMidnight(dateTimeZone93);
        org.joda.time.MutableDateTime mutableDateTime96 = new org.joda.time.MutableDateTime(dateTimeZone93);
        int int98 = dateTimeZone93.getOffsetFromLocal(7L);
        mutableDateTime3.setZoneRetainFields(dateTimeZone93);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(dateTimeField28);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022-02-21T15:02:06.813Z" + "'", str30, "2022-02-21T15:02:06.813Z");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone93);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
    }

    @Test
    public void test04447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04447");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.withWeekyear(2);
        org.joda.time.DateTimeZone dateTimeZone7 = dateMidnight2.getZone();
        java.lang.String str8 = dateTimeZone7.toString();
        long long10 = dateTimeZone7.previousTransition((long) 11);
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now(dateTimeZone7);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant18 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime19 = timeOfDay16.toDateTime((org.joda.time.ReadableInstant) instant18);
        org.joda.time.Chronology chronology20 = instant18.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.clockhourOfHalfday();
        long long23 = dateTimeField21.roundHalfFloor(0L);
        java.util.Locale locale24 = java.util.Locale.TRADITIONAL_CHINESE;
        int int25 = dateTimeField21.getMaximumShortTextLength(locale24);
        java.lang.String str26 = locale24.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket((-1L), chronology13, locale24);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.dayOfYear();
        dateTimeParserBucket27.saveField(dateTimeFieldType28, (-292275054));
        org.joda.time.LocalTime localTime32 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime.Property property33 = localTime32.hourOfDay();
        org.joda.time.LocalTime localTime35 = property33.addCopy(21);
        org.joda.time.LocalTime localTime36 = property33.withMinimumValue();
        org.joda.time.LocalTime localTime38 = property33.setCopy(2);
        org.joda.time.LocalTime localTime39 = property33.roundHalfFloorCopy();
        org.joda.time.Chronology chronology40 = localTime39.getChronology();
        boolean boolean41 = dateTimeFieldType28.isSupported(chronology40);
        mutableDateTime11.set(dateTimeFieldType28, 60);
        org.joda.time.DurationFieldType durationFieldType44 = dateTimeFieldType28.getRangeDurationType();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "UTC" + "'", str8, "UTC");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 11L + "'", long10 == 11L);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "zh" + "'", str26, "zh");
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(durationFieldType44);
    }

    @Test
    public void test04448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04448");
        java.util.Set<java.lang.String> strSet0 = java.util.Calendar.getAvailableCalendarTypes();
        boolean boolean1 = strSet0.isEmpty();
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap5 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList6 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, strMap5);
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "\u4e2d\u6587\u53f0\u7063)", "zh", "hi!", "\u4e2d\u6587", "1970-01-01T00:00:00.000Z", "zh" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        java.lang.String str17 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strList15);
        java.lang.String[] strArray23 = new java.lang.String[] { "1969-12-31T00:01:00.000Z", "\u4e2d\u6587", "zh_TW", "", "1969-12-31T00:01:00.000Z" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        java.util.Locale.FilteringMode filteringMode26 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList27 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strList24, filteringMode26);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream28 = languageRangeList3.parallelStream();
        boolean boolean29 = strSet0.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream30 = languageRangeList3.stream();
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(languageRangeList6);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + filteringMode26 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode26.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertNotNull(languageRangeStream28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(languageRangeStream30);
    }

    @Test
    public void test04449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04449");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        mutableDateTime16.setYear(3);
        org.joda.time.Instant instant20 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone21 = instant20.getZone();
        mutableDateTime16.setZone(dateTimeZone21);
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(dateTimeZone21);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.withWeekyear(366);
        int int26 = dateMidnight25.getMonthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight28 = dateMidnight25.withMonthOfYear(42);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 42 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
    }

    @Test
    public void test04450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04450");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears((int) '4');
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.monthOfYear();
        org.joda.time.LocalDateTime localDateTime5 = property3.setCopy((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withSecondOfMinute((int) '#');
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusMonths(0);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test04451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04451");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = localDate0.toDateMidnight(dateTimeZone3);
        org.joda.time.DateTime dateTime5 = localDate0.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime6 = localDate0.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate8 = localDate0.minusWeeks((int) 'a');
        org.joda.time.LocalDate.Property property9 = localDate8.weekOfWeekyear();
        org.joda.time.LocalDate localDate10 = property9.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate11 = property9.withMinimumValue();
        int int12 = property9.getMinimumValueOverall();
        org.joda.time.LocalDate localDate14 = property9.addToCopy((-292275054));
        org.joda.time.DateTimeField dateTimeField15 = property9.getField();
        org.joda.time.LocalDate localDate17 = property9.addWrapFieldToCopy((int) (short) 0);
        int int18 = property9.getLeapAmount();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test04452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04452");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.Chronology chronology1 = localDateTime0.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.plusDays(5);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusMinutes(1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusYears((int) ' ');
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMillisOfDay(30);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.weekOfWeekyear();
        int int13 = localDateTime11.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withYearOfEra(53942);
        org.joda.time.LocalDateTime.Property property16 = localDateTime11.monthOfYear();
        org.joda.time.DurationField durationField17 = property16.getRangeDurationField();
        int int18 = property16.get();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 30 + "'", int13 == 30);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 11 + "'", int18 == 11);
    }

    @Test
    public void test04453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04453");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime5 = timeOfDay2.toDateTime((org.joda.time.ReadableInstant) instant4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime8 = dateTime5.withDurationAdded(readableDuration6, (int) (short) 1);
        int int9 = dateTime5.getDayOfYear();
        int int10 = dateTime5.getDayOfMonth();
        int int11 = dateTime5.getEra();
        org.joda.time.DateTime.Property property12 = dateTime5.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 365 + "'", int9 == 365);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 31 + "'", int10 == 31);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test04454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04454");
        java.util.Date date3 = new java.util.Date(0, (int) '4', 0);
        int int4 = date3.getMinutes();
        org.joda.time.YearMonthDay yearMonthDay5 = org.joda.time.YearMonthDay.fromDateFields(date3);
        int int6 = yearMonthDay5.getYear();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.YearMonthDay yearMonthDay8 = yearMonthDay5.plus(readablePeriod7);
        org.joda.time.Interval interval11 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval14 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean15 = interval11.abuts((org.joda.time.ReadableInterval) interval14);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Interval interval17 = interval14.withDurationBeforeEnd(readableDuration16);
        boolean boolean18 = interval17.isBeforeNow();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Period period20 = interval17.toPeriod(periodType19);
        java.lang.String str21 = period20.toString();
        org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay5.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.YearMonthDay.Property property23 = yearMonthDay5.year();
        java.lang.String str24 = yearMonthDay5.toString();
        int int25 = yearMonthDay5.size();
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Sat Apr 30 00:00:00 GMT+00:00 1904");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1904 + "'", int6 == 1904);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PT0S" + "'", str21, "PT0S");
        org.junit.Assert.assertNotNull(yearMonthDay22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1904-04-30" + "'", str24, "1904-04-30");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
    }

    @Test
    public void test04455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04455");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.plusHours(15);
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minusMinutes(53948575);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(timeOfDay6);
    }

    @Test
    public void test04456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04456");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("DurationField[halfdays]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=durationfield[halfdays]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04457");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay.Property property3 = timeOfDay2.minuteOfHour();
        java.lang.String str4 = property3.getAsShortText();
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime10 = timeOfDay7.toDateTime((org.joda.time.ReadableInstant) instant9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.DateTime dateTime13 = dateTime10.withPeriodAdded(readablePeriod11, (int) (short) 0);
        int int14 = property3.compareTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime15 = dateTime10.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime22 = timeOfDay19.toDateTime((org.joda.time.ReadableInstant) instant21);
        org.joda.time.Chronology chronology23 = instant21.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.clockhourOfHalfday();
        org.joda.time.DurationField durationField25 = chronology23.eras();
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType16.getField(chronology23);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(10, 0);
        org.joda.time.Chronology chronology30 = chronology23.withZone(dateTimeZone29);
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((java.lang.Object) dateTime15, chronology30);
        org.joda.time.LocalTime localTime33 = localTime31.plusHours(0);
        java.lang.String str34 = localTime31.toString();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1" + "'", str4, "1");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "10:01:00.000" + "'", str34, "10:01:00.000");
    }

    @Test
    public void test04458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04458");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime5 = timeOfDay2.toDateTime((org.joda.time.ReadableInstant) instant4);
        org.joda.time.Chronology chronology6 = instant4.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.clockhourOfHalfday();
        long long9 = dateTimeField7.roundHalfFloor(0L);
        java.util.Locale locale10 = java.util.Locale.TRADITIONAL_CHINESE;
        int int11 = dateTimeField7.getMaximumShortTextLength(locale10);
        java.lang.String str12 = locale10.getLanguage();
        java.util.Locale locale13 = locale10.stripExtensions();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight16.withDurationAdded((long) 2, 100);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.minusWeeks((int) (short) 100);
        org.joda.time.DateMidnight.Property property22 = dateMidnight21.weekyear();
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight21.minusYears((int) ' ');
        org.joda.time.DateMidnight.Property property25 = dateMidnight24.era();
        org.joda.time.TimeOfDay timeOfDay29 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant31 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime32 = timeOfDay29.toDateTime((org.joda.time.ReadableInstant) instant31);
        org.joda.time.Chronology chronology33 = instant31.getChronology();
        org.joda.time.TimeOfDay timeOfDay36 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant38 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime39 = timeOfDay36.toDateTime((org.joda.time.ReadableInstant) instant38);
        int[] intArray41 = chronology33.get((org.joda.time.ReadablePartial) timeOfDay36, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime(0L, chronology33);
        mutableDateTime42.setYear(3);
        org.joda.time.Instant instant46 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone47 = instant46.getZone();
        mutableDateTime42.setZone(dateTimeZone47);
        java.util.Locale locale50 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale51 = locale50.stripExtensions();
        java.util.Locale locale52 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale53 = locale52.stripExtensions();
        java.lang.String str54 = locale50.getDisplayName(locale52);
        java.lang.String str55 = dateTimeZone47.getName(100L, locale52);
        java.lang.String str56 = property25.getAsShortText(locale52);
        java.lang.String str57 = locale52.getISO3Language();
        java.lang.String str58 = locale52.getScript();
        java.lang.String str59 = locale10.getDisplayScript(locale52);
        java.lang.String str60 = locale52.toLanguageTag();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "zh" + "'", str12, "zh");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str54, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00" + "'", str55, "+00:00");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\u897f\u5143" + "'", str56, "\u897f\u5143");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "zho" + "'", str57, "zho");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "zh-TW" + "'", str60, "zh-TW");
    }

    @Test
    public void test04459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04459");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        mutableDateTime16.setYear(3);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime16.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime20 = property19.roundCeiling();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime20.setDayOfWeek(438);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 438 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
    }

    @Test
    public void test04460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04460");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.withDurationAdded((long) 2, 100);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.minusWeeks((int) (short) 100);
        org.joda.time.DateMidnight.Property property8 = dateMidnight7.weekyear();
        int int9 = property8.getMinimumValue();
        org.joda.time.DateTimeField dateTimeField10 = property8.getField();
        org.joda.time.DateMidnight dateMidnight12 = property8.setCopy((-292275054));
        int int13 = dateMidnight12.getDayOfYear();
        org.joda.time.DateMidnight.Property property14 = dateMidnight12.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight12.withDurationAdded(54718863L, 99);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-292275054) + "'", int9 == (-292275054));
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 34 + "'", int13 == 34);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateMidnight17);
    }

    @Test
    public void test04461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04461");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears((int) '4');
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime localDateTime7 = localDateTime0.withDayOfYear((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withMinuteOfHour(0);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test04462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04462");
        org.joda.time.Instant instant2 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone3 = instant2.getZone();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone3);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate(1645455513323L, dateTimeZone3);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate7 = localDate5.withDayOfWeek(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
    }

    @Test
    public void test04463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04463");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = localDate0.toDateMidnight(dateTimeZone3);
        org.joda.time.LocalDate localDate6 = localDate0.minusMonths((int) (short) 10);
        int int7 = localDate0.getDayOfMonth();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean10 = localDate8.isSupported(dateTimeFieldType9);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = localDate8.toDateMidnight(dateTimeZone11);
        org.joda.time.DateTime dateTime13 = localDate8.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime14 = localDate8.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate16 = localDate8.minusWeeks((int) 'a');
        boolean boolean17 = localDate0.equals((java.lang.Object) localDate8);
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime25 = timeOfDay22.toDateTime((org.joda.time.ReadableInstant) instant24);
        org.joda.time.Chronology chronology26 = instant24.getChronology();
        org.joda.time.TimeOfDay timeOfDay29 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant31 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime32 = timeOfDay29.toDateTime((org.joda.time.ReadableInstant) instant31);
        int[] intArray34 = chronology26.get((org.joda.time.ReadablePartial) timeOfDay29, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(0L, chronology26);
        org.joda.time.DurationField durationField36 = chronology26.weeks();
        org.joda.time.DateTimeField dateTimeField37 = chronology26.dayOfYear();
        org.joda.time.DateTimeField dateTimeField38 = chronology26.weekOfWeekyear();
        java.util.Locale locale40 = java.util.Locale.GERMAN;
        java.lang.String str41 = dateTimeField38.getAsShortText(10L, locale40);
        java.lang.String str42 = locale40.getDisplayName();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str43 = localDate8.toString("java.util.GregorianCalendar[time=1645455634231,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=0,SECOND=34,MILLISECOND=231,ZONE_OFFSET=0,DST_OFFSET=0]", locale40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: j");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 21 + "'", int7 == 21);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1" + "'", str41, "1");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\u5fb7\u6587" + "'", str42, "\u5fb7\u6587");
    }

    @Test
    public void test04464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04464");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.plusMonths((int) (short) 0);
        int int3 = localDate0.getMonthOfYear();
        org.joda.time.LocalDate localDate5 = localDate0.plusMonths(10);
        org.joda.time.LocalDate.Property property6 = localDate0.year();
        org.joda.time.DateTime dateTime7 = localDate0.toDateTimeAtMidnight();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime9 = dateTime7.withMinuteOfHour(39600);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 39600 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
    }

    @Test
    public void test04465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04465");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.withSecondOfMinute((int) (byte) 1);
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay7 = property5.addWrapFieldToCopy(1);
        int int8 = property5.getMinimumValueOverall();
        int int9 = property5.getMaximumValue();
        java.lang.String str10 = property5.getAsString();
        java.lang.String str11 = property5.toString();
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 23 + "'", int9 == 23);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "0" + "'", str10, "0");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Property[hourOfDay]" + "'", str11, "Property[hourOfDay]");
    }

    @Test
    public void test04466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04466");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.withWeekyear(2);
        org.joda.time.DateMidnight.Property property7 = dateMidnight2.weekOfWeekyear();
        java.lang.String str8 = property7.getAsString();
        org.joda.time.DateMidnight dateMidnight10 = property7.addWrapFieldToCopy(8);
        org.joda.time.DateMidnight.Property property11 = dateMidnight10.yearOfEra();
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        int[] intArray15 = timeOfDay14.getValues();
        org.joda.time.TimeOfDay timeOfDay18 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant20 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime21 = timeOfDay18.toDateTime((org.joda.time.ReadableInstant) instant20);
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay18.minusMinutes((int) '4');
        int int24 = timeOfDay14.compareTo((org.joda.time.ReadablePartial) timeOfDay18);
        org.joda.time.TimeOfDay timeOfDay27 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant29 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime30 = timeOfDay27.toDateTime((org.joda.time.ReadableInstant) instant29);
        org.joda.time.Chronology chronology31 = instant29.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.clockhourOfHalfday();
        org.joda.time.DurationField durationField33 = chronology31.eras();
        org.joda.time.TimeOfDay timeOfDay34 = timeOfDay14.withChronologyRetainFields(chronology31);
        org.joda.time.Chronology chronology35 = timeOfDay14.getChronology();
        org.joda.time.Instant instant37 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone38 = instant37.getZone();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone38);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.DateTime dateTime42 = dateTime39.withDurationAdded(readableDuration40, (int) (byte) 0);
        org.joda.time.DateTime dateTime44 = dateTime39.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime46 = dateTime44.plusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime48 = dateTime46.plusDays(2);
        org.joda.time.DateTime dateTime50 = dateTime48.minusMillis((int) (short) 0);
        org.joda.time.DateTime dateTime52 = dateTime50.withWeekyear(35);
        org.joda.time.DateTimeZone dateTimeZone53 = dateTime50.getZone();
        boolean boolean55 = dateTimeZone53.isStandardOffset(0L);
        org.joda.time.DateTime dateTime56 = timeOfDay14.toDateTimeToday(dateTimeZone53);
        long long58 = dateTimeZone53.previousTransition((long) 57);
        org.joda.time.DateMidnight dateMidnight59 = dateMidnight10.withZoneRetainFields(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 57L + "'", long58 == 57L);
        org.junit.Assert.assertNotNull(dateMidnight59);
    }

    @Test
    public void test04467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04467");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        int int17 = mutableDateTime16.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime16.property(dateTimeFieldType18);
        org.joda.time.MutableDateTime mutableDateTime20 = property19.roundHalfEven();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime20.property(dateTimeFieldType21);
        mutableDateTime20.addYears((int) '4');
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        mutableDateTime20.add(readablePeriod25);
        org.joda.time.MutableDateTime mutableDateTime27 = mutableDateTime20.toMutableDateTime();
        org.joda.time.TimeOfDay timeOfDay31 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant33 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime34 = timeOfDay31.toDateTime((org.joda.time.ReadableInstant) instant33);
        org.joda.time.Chronology chronology35 = instant33.getChronology();
        org.joda.time.TimeOfDay timeOfDay38 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant40 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime41 = timeOfDay38.toDateTime((org.joda.time.ReadableInstant) instant40);
        int[] intArray43 = chronology35.get((org.joda.time.ReadablePartial) timeOfDay38, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime(0L, chronology35);
        org.joda.time.DurationField durationField45 = chronology35.weeks();
        org.joda.time.DateTimeField dateTimeField46 = chronology35.dayOfYear();
        org.joda.time.DateTimeField dateTimeField47 = chronology35.yearOfEra();
        java.lang.String str49 = dateTimeField47.getAsText(1645455692381L);
        int int50 = mutableDateTime27.get(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "2022" + "'", str49, "2022");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2022 + "'", int50 == 2022);
    }

    @Test
    public void test04468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04468");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay3 = new org.joda.time.YearMonthDay(54046399, 88, 45);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 88 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test04469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04469");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology3 = dateTimeFormatter2.getChronology();
        boolean boolean4 = dateTimeFormatter2.isParser();
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant10 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime11 = timeOfDay8.toDateTime((org.joda.time.ReadableInstant) instant10);
        org.joda.time.Chronology chronology12 = instant10.getChronology();
        org.joda.time.TimeOfDay timeOfDay15 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant17 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime18 = timeOfDay15.toDateTime((org.joda.time.ReadableInstant) instant17);
        int[] intArray20 = chronology12.get((org.joda.time.ReadablePartial) timeOfDay15, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(0L, chronology12);
        mutableDateTime21.setYear(3);
        int int24 = mutableDateTime21.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime21.minuteOfDay();
        int int26 = property25.getMaximumValue();
        org.joda.time.MutableDateTime mutableDateTime27 = property25.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime28 = property25.roundCeiling();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.TimeOfDay timeOfDay32 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant34 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime35 = timeOfDay32.toDateTime((org.joda.time.ReadableInstant) instant34);
        org.joda.time.Chronology chronology36 = instant34.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.clockhourOfHalfday();
        org.joda.time.DurationField durationField38 = chronology36.eras();
        org.joda.time.DateTimeField dateTimeField39 = dateTimeFieldType29.getField(chronology36);
        long long42 = dateTimeField39.add((long) (short) 100, (long) (byte) -1);
        boolean boolean44 = dateTimeField39.isLeap((long) 1439);
        org.joda.time.ReadablePartial readablePartial45 = null;
        java.util.Locale locale50 = new java.util.Locale("\u516c\u5143", "0", "weekOfWeekyear");
        java.lang.String str51 = dateTimeField39.getAsShortText(readablePartial45, (int) (byte) 1, locale50);
        java.lang.String str52 = property25.getAsText(locale50);
        java.lang.String str53 = locale50.toLanguageTag();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = dateTimeFormatter2.withLocale(locale50);
        java.lang.Appendable appendable55 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter54.printTo(appendable55, 4460456651L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1439 + "'", int26 == 1439);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + (-2678399900L) + "'", long42 == (-2678399900L));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals(locale50.toString(), "\u516c\u5143_0_weekOfWeekyear");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Jan" + "'", str51, "Jan");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "0" + "'", str52, "0");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "und" + "'", str53, "und");
        org.junit.Assert.assertNotNull(dateTimeFormatter54);
    }

    @Test
    public void test04470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04470");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        int int17 = mutableDateTime16.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime16.property(dateTimeFieldType18);
        org.joda.time.MutableDateTime mutableDateTime20 = property19.roundHalfEven();
        org.joda.time.TimeOfDay timeOfDay24 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant26 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime27 = timeOfDay24.toDateTime((org.joda.time.ReadableInstant) instant26);
        org.joda.time.Chronology chronology28 = instant26.getChronology();
        org.joda.time.TimeOfDay timeOfDay31 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant33 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime34 = timeOfDay31.toDateTime((org.joda.time.ReadableInstant) instant33);
        int[] intArray36 = chronology28.get((org.joda.time.ReadablePartial) timeOfDay31, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime(0L, chronology28);
        org.joda.time.TimeOfDay timeOfDay40 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant42 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime43 = timeOfDay40.toDateTime((org.joda.time.ReadableInstant) instant42);
        org.joda.time.Chronology chronology44 = instant42.getChronology();
        org.joda.time.TimeOfDay timeOfDay47 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant49 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime50 = timeOfDay47.toDateTime((org.joda.time.ReadableInstant) instant49);
        int[] intArray52 = chronology44.get((org.joda.time.ReadablePartial) timeOfDay47, (long) (short) -1);
        mutableDateTime37.setChronology(chronology44);
        boolean boolean54 = mutableDateTime37.isEqualNow();
        org.joda.time.MutableDateTime.Property property55 = mutableDateTime37.secondOfDay();
        mutableDateTime37.setMillisOfDay((int) (short) 100);
        org.joda.time.MutableDateTime.Property property58 = mutableDateTime37.dayOfMonth();
        boolean boolean59 = mutableDateTime20.isBefore((org.joda.time.ReadableInstant) mutableDateTime37);
        mutableDateTime20.setDayOfYear(5);
        mutableDateTime20.addHours((int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime20.setDayOfWeek(54124246);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54124246 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(intArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
    }

    @Test
    public void test04471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04471");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime5 = timeOfDay2.toDateTime((org.joda.time.ReadableInstant) instant4);
        org.joda.time.Chronology chronology6 = instant4.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.clockhourOfHalfday();
        long long9 = dateTimeField7.roundHalfFloor(0L);
        java.util.Locale locale10 = java.util.Locale.TRADITIONAL_CHINESE;
        int int11 = dateTimeField7.getMaximumShortTextLength(locale10);
        java.util.Locale locale12 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale13 = locale12.stripExtensions();
        java.util.Locale locale14 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale15 = locale14.stripExtensions();
        java.lang.String str16 = locale12.getDisplayName(locale14);
        java.lang.String str17 = locale10.getDisplayLanguage(locale12);
        java.util.Set<java.lang.String> strSet18 = locale12.getUnicodeLocaleAttributes();
        int int19 = strSet18.size();
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap23 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList24 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, strMap23);
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "\u4e2d\u6587\u53f0\u7063)", "zh", "hi!", "\u4e2d\u6587", "1970-01-01T00:00:00.000Z", "zh" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        java.lang.String str35 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.lang.String>) strList33);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap36 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList37 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, strMap36);
        boolean boolean38 = strSet18.retainAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList37);
        org.joda.time.format.DateTimePrinter dateTimePrinter39 = null;
        org.joda.time.format.DateTimeParser dateTimeParser40 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter39, dateTimeParser40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter41.withZone(dateTimeZone42);
        org.joda.time.format.DateTimeParser dateTimeParser44 = dateTimeFormatter41.getParser();
        boolean boolean45 = strSet18.equals((java.lang.Object) dateTimeFormatter41);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime47 = dateTimeFormatter41.parseLocalTime("2020-04-13");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str16, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u4e2d\u6587" + "'", str17, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(languageRangeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(languageRangeList24);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(languageRangeList37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
        org.junit.Assert.assertNull(dateTimeParser44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test04472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04472");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime5 = timeOfDay2.toDateTime((org.joda.time.ReadableInstant) instant4);
        org.joda.time.Chronology chronology6 = instant4.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.clockhourOfHalfday();
        long long9 = dateTimeField7.roundHalfFloor(0L);
        java.util.Locale locale10 = java.util.Locale.TRADITIONAL_CHINESE;
        int int11 = dateTimeField7.getMaximumShortTextLength(locale10);
        java.util.Locale locale12 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale13 = locale12.stripExtensions();
        java.util.Locale locale14 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale15 = locale14.stripExtensions();
        java.lang.String str16 = locale12.getDisplayName(locale14);
        java.lang.String str17 = locale10.getDisplayLanguage(locale12);
        java.util.Set<java.lang.String> strSet18 = locale12.getUnicodeLocaleAttributes();
        int int19 = strSet18.size();
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap23 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList24 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, strMap23);
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "\u4e2d\u6587\u53f0\u7063)", "zh", "hi!", "\u4e2d\u6587", "1970-01-01T00:00:00.000Z", "zh" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        java.lang.String str35 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.lang.String>) strList33);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap36 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList37 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, strMap36);
        boolean boolean38 = strSet18.retainAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList37);
        org.joda.time.format.DateTimePrinter dateTimePrinter39 = null;
        org.joda.time.format.DateTimeParser dateTimeParser40 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter39, dateTimeParser40);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter41.withZone(dateTimeZone42);
        org.joda.time.format.DateTimeParser dateTimeParser44 = dateTimeFormatter41.getParser();
        boolean boolean45 = strSet18.equals((java.lang.Object) dateTimeFormatter41);
        boolean boolean46 = dateTimeFormatter41.isParser();
        org.joda.time.Chronology chronology47 = dateTimeFormatter41.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter41.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter41.withDefaultYear(40);
        java.lang.Integer int51 = dateTimeFormatter41.getPivotYear();
        org.joda.time.LocalTime localTime53 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime localTime55 = localTime53.minusMinutes((int) (short) 1);
        int int56 = localTime53.getMillisOfDay();
        org.joda.time.LocalTime.Property property57 = localTime53.millisOfSecond();
        org.joda.time.LocalTime localTime58 = property57.roundCeilingCopy();
        org.joda.time.LocalTime localTime60 = property57.addWrapFieldToCopy((-1));
        int int61 = localTime60.getMillisOfDay();
        org.joda.time.LocalTime localTime63 = localTime60.minusMillis(201);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str64 = dateTimeFormatter41.print((org.joda.time.ReadablePartial) localTime60);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str16, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u4e2d\u6587" + "'", str17, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(languageRangeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(languageRangeList24);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(languageRangeList37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
        org.junit.Assert.assertNull(dateTimeParser44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
        org.junit.Assert.assertNull(int51);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 35 + "'", int56 == 35);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localTime58);
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 34 + "'", int61 == 34);
        org.junit.Assert.assertNotNull(localTime63);
    }

    @Test
    public void test04473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04473");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = localDate0.toDateMidnight(dateTimeZone3);
        org.joda.time.DateTime dateTime5 = localDate0.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property6 = localDate0.yearOfEra();
        org.joda.time.LocalDate localDate8 = localDate0.minusMonths((int) (byte) -1);
        org.joda.time.LocalDate.Property property9 = localDate8.year();
        org.joda.time.LocalDate localDate10 = property9.getLocalDate();
        org.joda.time.DurationField durationField11 = property9.getRangeDurationField();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNull(durationField11);
    }

    @Test
    public void test04474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04474");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.clockhourOfHalfday();
        org.joda.time.DurationField durationField9 = chronology7.eras();
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType0.getField(chronology7);
        long long13 = dateTimeField10.add((long) (short) 100, (long) (byte) -1);
        boolean boolean15 = dateTimeField10.isLeap((long) 1439);
        org.joda.time.ReadablePartial readablePartial16 = null;
        java.util.Locale locale21 = new java.util.Locale("\u516c\u5143", "0", "weekOfWeekyear");
        java.lang.String str22 = dateTimeField10.getAsShortText(readablePartial16, (int) (byte) 1, locale21);
        java.util.Locale.Category category23 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale24 = java.util.Locale.getDefault(category23);
        java.lang.String str25 = locale21.getDisplayLanguage(locale24);
        java.util.Locale.Builder builder26 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder27 = builder26.clear();
        java.util.Locale locale28 = builder27.build();
        java.lang.String str29 = locale24.getDisplayName(locale28);
        java.lang.String str30 = locale28.getDisplayCountry();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-2678399900L) + "'", long13 == (-2678399900L));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals(locale21.toString(), "\u516c\u5143_0_weekOfWeekyear");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Jan" + "'", str22, "Jan");
        org.junit.Assert.assertTrue("'" + category23 + "' != '" + java.util.Locale.Category.FORMAT + "'", category23.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\u516c\u5143" + "'", str25, "\u516c\u5143");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Chinese (Taiwan)" + "'", str29, "Chinese (Taiwan)");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
    }

    @Test
    public void test04475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04475");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime5 = timeOfDay2.toDateTime((org.joda.time.ReadableInstant) instant4);
        org.joda.time.Chronology chronology6 = instant4.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.clockhourOfHalfday();
        org.joda.time.DurationField durationField8 = chronology6.eras();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.centuryOfEra();
        long long13 = dateTimeField10.addWrapField(53932003L, 2020);
        long long15 = dateTimeField10.roundFloor(2678400000L);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 6374504357932003L + "'", long13 == 6374504357932003L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-2208988800000L) + "'", long15 == (-2208988800000L));
    }

    @Test
    public void test04476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04476");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        int int17 = mutableDateTime16.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime16.property(dateTimeFieldType18);
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime25 = timeOfDay22.toDateTime((org.joda.time.ReadableInstant) instant24);
        org.joda.time.Chronology chronology26 = instant24.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.clockhourOfHalfday();
        long long29 = dateTimeField27.roundHalfFloor(0L);
        java.util.Locale locale30 = java.util.Locale.TRADITIONAL_CHINESE;
        int int31 = dateTimeField27.getMaximumShortTextLength(locale30);
        java.util.Locale locale32 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale33 = locale32.stripExtensions();
        java.util.Locale locale34 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale35 = locale34.stripExtensions();
        java.lang.String str36 = locale32.getDisplayName(locale34);
        java.lang.String str37 = locale30.getDisplayLanguage(locale32);
        java.util.Calendar calendar38 = mutableDateTime16.toCalendar(locale32);
        java.util.Date date42 = new java.util.Date(0, (int) '4', 0);
        int int43 = date42.getMinutes();
        date42.setYear(12);
        calendar38.setTime(date42);
        int int47 = date42.getDay();
        org.joda.time.TimeOfDay timeOfDay48 = org.joda.time.TimeOfDay.fromDateFields(date42);
        org.joda.time.LocalTime localTime49 = org.joda.time.LocalTime.fromDateFields(date42);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str36, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u4e2d\u6587" + "'", str37, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(calendar38);
// flaky:         org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=-1820016001904,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1912,MONTH=3,WEEK_OF_YEAR=18,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=120,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=59,SECOND=58,MILLISECOND=96,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(date42.toString(), "Tue Apr 30 00:00:00 GMT+00:00 1912");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(timeOfDay48);
        org.junit.Assert.assertNotNull(localTime49);
    }

    @Test
    public void test04477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04477");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((java.lang.Object) (-11491200000L), chronology7);
        org.joda.time.DateTimeField dateTimeField9 = chronology7.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone11 = chronology7.getZone();
        java.lang.Class<?> wildcardClass12 = chronology7.getClass();
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test04478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04478");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.Chronology chronology1 = localDateTime0.getChronology();
        java.util.Date date2 = localDateTime0.toDate();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusHours(3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minusMonths(1970);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.minuteOfHour();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(date2);
// flaky:         org.junit.Assert.assertEquals(date2.toString(), "Mon Feb 21 15:02:08 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test04479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04479");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.withDurationAdded(readableDuration4, (int) (byte) 0);
        org.joda.time.DateTime dateTime7 = dateTime6.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime7.minusDays(4);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.Interval interval11 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime9, readablePeriod10);
        org.joda.time.DateTime dateTime13 = dateTime9.plusMonths((int) (byte) 0);
        org.joda.time.DateTime dateTime15 = dateTime13.withMillis(14000L);
        org.joda.time.LocalDate localDate16 = dateTime13.toLocalDate();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime18 = dateTime13.withSecondOfMinute(54047506);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54047506 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate16);
    }

    @Test
    public void test04480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04480");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("TWN");
        org.joda.time.Instant instant3 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone4 = instant3.getZone();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime8 = dateTime5.withDurationAdded(readableDuration6, (int) (byte) 0);
        org.joda.time.DateTime dateTime10 = dateTime5.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime12 = dateTime10.plusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime14 = dateTime12.plusDays(2);
        org.joda.time.DateTime dateTime16 = dateTime12.withHourOfDay(10);
        org.joda.time.DateTime.Property property17 = dateTime16.monthOfYear();
        org.joda.time.DateTime dateTime19 = property17.addToCopy(53963);
        boolean boolean20 = languageRange1.equals((java.lang.Object) property17);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test04481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04481");
        long long6 = java.util.Date.UTC(53924, 36002122, 53979578, 36000100, 53891, 1971);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 101169343493031000L + "'", long6 == 101169343493031000L);
    }

    @Test
    public void test04482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04482");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears((int) '4');
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMillisOfSecond((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.minusWeeks(1645455492);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
    }

    @Test
    public void test04483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04483");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setLenient(false);
        java.util.Calendar calendar3 = builder0.build();
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime localTime7 = localTime5.minusMinutes((int) (short) 1);
        int int8 = localTime5.getMillisOfDay();
        org.joda.time.LocalTime localTime10 = localTime5.plusSeconds(100);
        org.joda.time.LocalTime.Property property11 = localTime5.minuteOfHour();
        boolean boolean12 = property11.isLeap();
        org.joda.time.LocalTime localTime14 = property11.addWrapFieldToCopy(50400000);
        org.joda.time.LocalTime localTime16 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime.Property property17 = localTime16.hourOfDay();
        org.joda.time.LocalTime localTime18 = property17.roundFloorCopy();
        org.joda.time.LocalTime localTime20 = property17.setCopy(0);
        org.joda.time.LocalTime localTime22 = property17.addWrapFieldToCopy(19);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval28 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean29 = interval25.abuts((org.joda.time.ReadableInterval) interval28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.withWeekyear(2);
        boolean boolean35 = interval25.isBefore((org.joda.time.ReadableInstant) dateMidnight32);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Interval interval37 = interval25.withDurationAfterStart(readableDuration36);
        org.joda.time.Duration duration38 = interval25.toDuration();
        org.joda.time.Interval interval41 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval44 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean45 = interval41.abuts((org.joda.time.ReadableInterval) interval44);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone47);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight48.withWeekyear(2);
        boolean boolean51 = interval41.isBefore((org.joda.time.ReadableInstant) dateMidnight48);
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Interval interval53 = interval41.withDurationAfterStart(readableDuration52);
        org.joda.time.Duration duration54 = interval41.toDuration();
        int int55 = duration38.compareTo((org.joda.time.ReadableDuration) duration54);
        org.joda.time.Period period56 = duration38.toPeriod();
        org.joda.time.LocalTime localTime57 = localTime22.minus((org.joda.time.ReadablePeriod) period56);
        org.joda.time.LocalTime localTime58 = localTime14.minus((org.joda.time.ReadablePeriod) period56);
        boolean boolean59 = calendar3.before((java.lang.Object) localTime14);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(calendar3);
// flaky:         org.junit.Assert.assertEquals(calendar3.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=java.util.SimpleTimeZone[id=zho,offset=1904,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(localTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test04484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04484");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((-2678399L));
        int int2 = localDate1.getYearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate4 = localDate1.withYearOfEra(292278994);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292278994 for yearOfEra must be in the range [1,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 69 + "'", int2 == 69);
    }

    @Test
    public void test04485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04485");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTime((org.joda.time.ReadableInstant) instant6);
        org.joda.time.Chronology chronology8 = instant6.getChronology();
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime14 = timeOfDay11.toDateTime((org.joda.time.ReadableInstant) instant13);
        int[] intArray16 = chronology8.get((org.joda.time.ReadablePartial) timeOfDay11, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(0L, chronology8);
        mutableDateTime17.setYear(3);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone22 = instant21.getZone();
        mutableDateTime17.setZone(dateTimeZone22);
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime(0L, dateTimeZone22);
        java.util.TimeZone timeZone25 = dateTimeZone22.toTimeZone();
        timeZone25.setID("T00:00:00.000");
        timeZone25.setID("Chinese");
        java.lang.String str30 = timeZone25.getDisplayName();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "GMT+00:00" + "'", str30, "GMT+00:00");
    }

    @Test
    public void test04486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04486");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        org.joda.time.DateTime dateTime3 = instant1.toDateTimeISO();
        java.util.GregorianCalendar gregorianCalendar4 = dateTime3.toGregorianCalendar();
        org.joda.time.DateTime dateTime6 = dateTime3.minusYears((int) '#');
        org.joda.time.DateTime dateTime8 = dateTime3.minusDays(52);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(gregorianCalendar4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
    }

    @Test
    public void test04487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04487");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay(4460386987L);
        int int2 = timeOfDay1.getMinuteOfHour();
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 59 + "'", int2 == 59);
    }

    @Test
    public void test04488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04488");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 12);
        org.joda.time.DateTime.Property property2 = dateTime1.dayOfMonth();
        org.joda.time.DateTime dateTime3 = property2.withMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = property2.setCopy("\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"?? (????)\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime3);
    }

    @Test
    public void test04489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04489");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = localDate0.toDateMidnight(dateTimeZone3);
        org.joda.time.DateTime dateTime5 = localDate0.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime6 = localDate0.toDateTimeAtMidnight();
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.era();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.dayOfMonth();
        long long13 = chronology7.add((long) 53977, 54574925L, 54046399);
        org.joda.time.DurationField durationField14 = chronology7.centuries();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 2949578171999052L + "'", long13 == 2949578171999052L);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test04490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04490");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime22 = timeOfDay19.toDateTime((org.joda.time.ReadableInstant) instant21);
        org.joda.time.Chronology chronology23 = instant21.getChronology();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        int[] intArray31 = chronology23.get((org.joda.time.ReadablePartial) timeOfDay26, (long) (short) -1);
        mutableDateTime16.setChronology(chronology23);
        boolean boolean33 = mutableDateTime16.isEqualNow();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime16.secondOfDay();
        org.joda.time.DurationFieldType durationFieldType35 = org.joda.time.DurationFieldType.millis();
        mutableDateTime16.add(durationFieldType35, (int) (short) 10);
        org.joda.time.TimeOfDay timeOfDay40 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant42 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime43 = timeOfDay40.toDateTime((org.joda.time.ReadableInstant) instant42);
        org.joda.time.Chronology chronology44 = instant42.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.year();
        org.joda.time.TimeOfDay timeOfDay46 = new org.joda.time.TimeOfDay(chronology44);
        org.joda.time.DateTimeField dateTimeField47 = chronology44.weekOfWeekyear();
        boolean boolean48 = durationFieldType35.isSupported(chronology44);
        org.joda.time.DateTimeField dateTimeField49 = chronology44.millisOfDay();
        org.joda.time.DateTimeField dateTimeField50 = chronology44.weekyear();
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
    }

    @Test
    public void test04491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04491");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.clockhourOfHalfday();
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((-1619896259520000000L), chronology7);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minus((-1L));
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight9.minusDays(53956956);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight9.withWeekyear(730);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight15);
    }

    @Test
    public void test04492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04492");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime5 = timeOfDay2.toDateTime((org.joda.time.ReadableInstant) instant4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.DateTime dateTime8 = dateTime5.withPeriodAdded(readablePeriod6, (int) (short) 0);
        org.joda.time.DateTime.Property property9 = dateTime5.hourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = property9.getField();
        org.joda.time.DateTime dateTime11 = property9.roundCeilingCopy();
        org.joda.time.DateTime dateTime13 = property9.addToCopy((long) 88);
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant18 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime19 = timeOfDay16.toDateTime((org.joda.time.ReadableInstant) instant18);
        org.joda.time.Chronology chronology20 = instant18.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.clockhourOfHalfday();
        org.joda.time.DurationField durationField22 = chronology20.eras();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone24 = chronology20.getZone();
        org.joda.time.DateTimeField dateTimeField25 = chronology20.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone26 = chronology20.getZone();
        org.joda.time.DateTime dateTime27 = dateTime13.withChronology(chronology20);
        int int28 = dateTime27.getMillisOfSecond();
        org.joda.time.LocalTime localTime31 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime localTime33 = localTime31.minusMinutes((int) (short) 1);
        org.joda.time.LocalTime localTime35 = localTime31.withMillisOfDay((int) (byte) 1);
        org.joda.time.LocalTime.Property property36 = localTime31.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay39 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant41 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime42 = timeOfDay39.toDateTime((org.joda.time.ReadableInstant) instant41);
        org.joda.time.Chronology chronology43 = instant41.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.clockhourOfHalfday();
        long long46 = dateTimeField44.roundHalfFloor(0L);
        java.util.Locale locale47 = java.util.Locale.TRADITIONAL_CHINESE;
        int int48 = dateTimeField44.getMaximumShortTextLength(locale47);
        java.lang.String str49 = locale47.getScript();
        java.lang.String str50 = locale47.getScript();
        java.lang.String str51 = property36.getAsShortText(locale47);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str52 = dateTime27.toString("24 May 1943 06:00:08 GMT", locale47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "0" + "'", str51, "0");
    }

    @Test
    public void test04493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04493");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval5 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean6 = interval2.abuts((org.joda.time.ReadableInterval) interval5);
        long long7 = interval5.getStartMillis();
        org.joda.time.Interval interval9 = interval5.withStartMillis((long) (short) -1);
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.Instant instant12 = instant10.plus((long) 2);
        org.joda.time.MutableDateTime mutableDateTime13 = instant12.toMutableDateTimeISO();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        mutableDateTime13.add(readablePeriod14, (int) ' ');
        org.joda.time.TimeOfDay timeOfDay21 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant23 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime24 = timeOfDay21.toDateTime((org.joda.time.ReadableInstant) instant23);
        org.joda.time.Chronology chronology25 = instant23.getChronology();
        org.joda.time.TimeOfDay timeOfDay28 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant30 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime31 = timeOfDay28.toDateTime((org.joda.time.ReadableInstant) instant30);
        int[] intArray33 = chronology25.get((org.joda.time.ReadablePartial) timeOfDay28, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(0L, chronology25);
        org.joda.time.DurationField durationField35 = chronology25.weeks();
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((-86340000L), chronology25);
        org.joda.time.MutableDateTime mutableDateTime37 = org.joda.time.MutableDateTime.now(chronology25);
        org.joda.time.DateTimeField dateTimeField38 = chronology25.dayOfWeek();
        mutableDateTime13.setChronology(chronology25);
        org.joda.time.Interval interval40 = interval9.withChronology(chronology25);
        org.joda.time.DateTime dateTime41 = interval40.getEnd();
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Interval interval43 = interval40.withDurationBeforeEnd(readableDuration42);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval45 = interval40.withStartMillis((long) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(interval43);
    }

    @Test
    public void test04494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04494");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime22 = timeOfDay19.toDateTime((org.joda.time.ReadableInstant) instant21);
        org.joda.time.Chronology chronology23 = instant21.getChronology();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        int[] intArray31 = chronology23.get((org.joda.time.ReadablePartial) timeOfDay26, (long) (short) -1);
        mutableDateTime16.setChronology(chronology23);
        boolean boolean33 = mutableDateTime16.isEqualNow();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime16.secondOfDay();
        boolean boolean35 = mutableDateTime16.isAfterNow();
        mutableDateTime16.setMillisOfSecond((int) (byte) 0);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        mutableDateTime16.add(readablePeriod38);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone41);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight42.withDurationAdded((long) (short) 10, 1);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight45.plus((long) 31);
        boolean boolean48 = mutableDateTime16.isBefore((org.joda.time.ReadableInstant) dateMidnight45);
        int int49 = mutableDateTime16.getYear();
        org.joda.time.DateTime dateTime50 = mutableDateTime16.toDateTime();
        int int51 = mutableDateTime16.getYearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime16.setDate(53948575, 2020, 292278993);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2020 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1970 + "'", int49 == 1970);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 70 + "'", int51 == 70);
    }

    @Test
    public void test04495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04495");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 2022, (long) 53932003);
        long long3 = interval2.getEndMillis();
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime10 = timeOfDay7.toDateTime((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Chronology chronology11 = instant9.getChronology();
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant16 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime17 = timeOfDay14.toDateTime((org.joda.time.ReadableInstant) instant16);
        int[] intArray19 = chronology11.get((org.joda.time.ReadablePartial) timeOfDay14, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(0L, chronology11);
        int int21 = mutableDateTime20.getEra();
        int int22 = mutableDateTime20.getWeekyear();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        org.joda.time.Chronology chronology30 = instant28.getChronology();
        org.joda.time.TimeOfDay timeOfDay33 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant35 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime36 = timeOfDay33.toDateTime((org.joda.time.ReadableInstant) instant35);
        int[] intArray38 = chronology30.get((org.joda.time.ReadablePartial) timeOfDay33, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(0L, chronology30);
        mutableDateTime39.setYear(3);
        org.joda.time.Instant instant43 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone44 = instant43.getZone();
        mutableDateTime39.setZone(dateTimeZone44);
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight(dateTimeZone44);
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime(dateTimeZone44);
        mutableDateTime20.setZone(dateTimeZone44);
        mutableDateTime20.setSecondOfDay(9);
        mutableDateTime20.setDayOfYear(19);
        org.joda.time.Interval interval55 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval58 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean59 = interval55.abuts((org.joda.time.ReadableInterval) interval58);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone61);
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight62.withWeekyear(2);
        boolean boolean65 = interval55.isBefore((org.joda.time.ReadableInstant) dateMidnight62);
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.Interval interval67 = interval55.withDurationAfterStart(readableDuration66);
        org.joda.time.Duration duration68 = interval55.toDuration();
        org.joda.time.Interval interval71 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval74 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean75 = interval71.abuts((org.joda.time.ReadableInterval) interval74);
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        org.joda.time.DateMidnight dateMidnight78 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone77);
        org.joda.time.DateMidnight dateMidnight80 = dateMidnight78.withWeekyear(2);
        boolean boolean81 = interval71.isBefore((org.joda.time.ReadableInstant) dateMidnight78);
        org.joda.time.ReadableDuration readableDuration82 = null;
        org.joda.time.Interval interval83 = interval71.withDurationAfterStart(readableDuration82);
        org.joda.time.Duration duration84 = interval71.toDuration();
        int int85 = duration68.compareTo((org.joda.time.ReadableDuration) duration84);
        mutableDateTime20.add((org.joda.time.ReadableDuration) duration84, 1904);
        org.joda.time.Interval interval88 = interval2.withDurationAfterStart((org.joda.time.ReadableDuration) duration84);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 53932003L + "'", long3 == 53932003L);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1970 + "'", int22 == 1970);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(dateMidnight80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertNotNull(duration84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(interval88);
    }

    @Test
    public void test04496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04496");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime22 = timeOfDay19.toDateTime((org.joda.time.ReadableInstant) instant21);
        org.joda.time.Chronology chronology23 = instant21.getChronology();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        int[] intArray31 = chronology23.get((org.joda.time.ReadablePartial) timeOfDay26, (long) (short) -1);
        mutableDateTime16.setChronology(chronology23);
        org.joda.time.DateTimeField dateTimeField33 = chronology23.era();
        org.joda.time.DurationField durationField34 = chronology23.seconds();
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(chronology23);
        org.joda.time.DurationField durationField36 = chronology23.days();
        boolean boolean37 = durationField36.isSupported();
        long long40 = durationField36.subtract((long) 54034, 54576831);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-4715438198345966L) + "'", long40 == (-4715438198345966L));
    }

    @Test
    public void test04497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04497");
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone9 = instant8.getZone();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime13 = dateTime10.withDurationAdded(readableDuration11, (int) (byte) 0);
        org.joda.time.DateTime dateTime15 = dateTime10.minusSeconds((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTime dateTime17 = dateTime10.minus(readableDuration16);
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime25 = timeOfDay22.toDateTime((org.joda.time.ReadableInstant) instant24);
        org.joda.time.Chronology chronology26 = instant24.getChronology();
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((java.lang.Object) (-11491200000L), chronology26);
        org.joda.time.TimeOfDay timeOfDay28 = org.joda.time.TimeOfDay.fromMillisOfDay((-2678399900L), chronology26);
        org.joda.time.DateTime dateTime29 = dateTime10.toDateTime(chronology26);
        org.joda.time.DateTimeZone dateTimeZone30 = chronology26.getZone();
        org.joda.time.DateTimeZone dateTimeZone31 = chronology26.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime(38089, 16, 53897, (-19045), 53932, 54090086, 54047506, dateTimeZone31);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -19045 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(timeOfDay28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
    }

    @Test
    public void test04498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04498");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet1 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet3 = provider0.getAvailableIDs();
        boolean boolean5 = strSet3.add("30");
        org.joda.time.Interval interval8 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval11 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean12 = interval8.abuts((org.joda.time.ReadableInterval) interval11);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval18 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean19 = interval15.abuts((org.joda.time.ReadableInterval) interval18);
        long long20 = interval18.getStartMillis();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval26 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean27 = interval23.abuts((org.joda.time.ReadableInterval) interval26);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Interval interval29 = interval26.withDurationBeforeEnd(readableDuration28);
        org.joda.time.Interval interval30 = interval18.overlap((org.joda.time.ReadableInterval) interval26);
        org.joda.time.TimeOfDay timeOfDay34 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant36 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime37 = timeOfDay34.toDateTime((org.joda.time.ReadableInstant) instant36);
        org.joda.time.Chronology chronology38 = instant36.getChronology();
        org.joda.time.TimeOfDay timeOfDay41 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant43 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime44 = timeOfDay41.toDateTime((org.joda.time.ReadableInstant) instant43);
        int[] intArray46 = chronology38.get((org.joda.time.ReadablePartial) timeOfDay41, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime(0L, chronology38);
        mutableDateTime47.setYear(3);
        org.joda.time.Instant instant51 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone52 = instant51.getZone();
        mutableDateTime47.setZone(dateTimeZone52);
        org.joda.time.DateTime dateTime54 = org.joda.time.DateTime.now(dateTimeZone52);
        boolean boolean55 = interval26.contains((org.joda.time.ReadableInstant) dateTime54);
        boolean boolean56 = interval11.contains((org.joda.time.ReadableInterval) interval26);
        boolean boolean57 = interval11.containsNow();
        org.joda.time.Interval interval60 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval63 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean64 = interval60.abuts((org.joda.time.ReadableInterval) interval63);
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateMidnight dateMidnight67 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone66);
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight67.withWeekyear(2);
        boolean boolean70 = interval60.isBefore((org.joda.time.ReadableInstant) dateMidnight67);
        org.joda.time.ReadableDuration readableDuration71 = null;
        org.joda.time.Interval interval72 = interval60.withDurationAfterStart(readableDuration71);
        org.joda.time.Duration duration73 = interval60.toDuration();
        long long74 = duration73.getMillis();
        org.joda.time.Interval interval75 = interval11.withDurationAfterStart((org.joda.time.ReadableDuration) duration73);
        org.joda.time.TimeOfDay timeOfDay78 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant80 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime81 = timeOfDay78.toDateTime((org.joda.time.ReadableInstant) instant80);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter82 = null;
        java.lang.String str83 = dateTime81.toString(dateTimeFormatter82);
        org.joda.time.DateMidnight dateMidnight84 = dateTime81.toDateMidnight();
        org.joda.time.DateTime dateTime86 = dateTime81.withCenturyOfEra(122);
        boolean boolean87 = duration73.equals((java.lang.Object) dateTime86);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean88 = strSet3.remove((java.lang.Object) boolean87);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.String cannot be cast to java.lang.Boolean");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNull(interval30);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "1969-12-31T00:01:00.000Z" + "'", str83, "1969-12-31T00:01:00.000Z");
        org.junit.Assert.assertNotNull(dateMidnight84);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test04499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04499");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay.Property property3 = timeOfDay2.minuteOfHour();
        java.lang.String str4 = property3.getAsShortText();
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime10 = timeOfDay7.toDateTime((org.joda.time.ReadableInstant) instant9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.DateTime dateTime13 = dateTime10.withPeriodAdded(readablePeriod11, (int) (short) 0);
        int int14 = property3.compareTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.TimeOfDay timeOfDay16 = property3.addToCopy(54559);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType18 = timeOfDay16.getFieldType(58);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 58");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1" + "'", str4, "1");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(timeOfDay16);
    }

    @Test
    public void test04500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest8.test04500");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight3.withDurationAdded((long) 2, 100);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusWeeks((int) (short) 100);
        org.joda.time.Interval interval9 = new org.joda.time.Interval(readableDuration0, (org.joda.time.ReadableInstant) dateMidnight8);
        org.joda.time.DateMidnight.Property property10 = dateMidnight8.era();
        org.joda.time.DateMidnight dateMidnight11 = property10.roundFloorCopy();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.minusMonths((int) (byte) 1);
        long long14 = dateMidnight11.getMillis();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight11.withWeekyear(99);
        org.joda.time.DateMidnight.Property property17 = dateMidnight16.dayOfWeek();
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-62135596800000L) + "'", long14 == (-62135596800000L));
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(property17);
    }
}

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest6 {

    public static boolean debug = false;

    @Test
    public void test3001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3001");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions1 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream0);
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder2 = enumOptions1.toBuilder();
        java.util.Map<com.google.protobuf.Descriptors.FieldDescriptor, java.lang.Object> fieldDescriptorMap3 = builder2.getAllFields();
        org.junit.Assert.assertNotNull(enumOptions1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(fieldDescriptorMap3);
    }

    @Test
    public void test3002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3002");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        compilerOptions0.setRemoveDeadCode(false);
        compilerOptions0.sourceMapOutputPath = "South Korea";
        compilerOptions0.setAssumeStrictThis(false);
        compilerOptions0.setRuntimeTypeCheck(false);
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy13 = com.google.javascript.jscomp.VariableRenamingPolicy.ALL;
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat17 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions14.errorFormat = errorFormat17;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy19 = null;
        compilerOptions14.variableRenaming = variableRenamingPolicy19;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy21 = com.google.javascript.jscomp.VariableRenamingPolicy.LOCAL;
        compilerOptions14.setVariableRenaming(variableRenamingPolicy21);
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy23 = com.google.javascript.jscomp.PropertyRenamingPolicy.ALL_UNQUOTED;
        compilerOptions14.setPropertyRenaming(propertyRenamingPolicy23);
        compilerOptions0.setRenamingPolicy(variableRenamingPolicy13, propertyRenamingPolicy23);
        org.junit.Assert.assertNotNull(errorFormat3);
        org.junit.Assert.assertTrue("'" + variableRenamingPolicy13 + "' != '" + com.google.javascript.jscomp.VariableRenamingPolicy.ALL + "'", variableRenamingPolicy13.equals(com.google.javascript.jscomp.VariableRenamingPolicy.ALL));
        org.junit.Assert.assertNotNull(errorFormat17);
        org.junit.Assert.assertTrue("'" + variableRenamingPolicy21 + "' != '" + com.google.javascript.jscomp.VariableRenamingPolicy.LOCAL + "'", variableRenamingPolicy21.equals(com.google.javascript.jscomp.VariableRenamingPolicy.LOCAL));
        org.junit.Assert.assertTrue("'" + propertyRenamingPolicy23 + "' != '" + com.google.javascript.jscomp.PropertyRenamingPolicy.ALL_UNQUOTED + "'", propertyRenamingPolicy23.equals(com.google.javascript.jscomp.PropertyRenamingPolicy.ALL_UNQUOTED));
    }

    @Test
    public void test3003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3003");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.optimizeCalls = false;
        compilerOptions0.preferLineBreakAtEndOfFile = false;
        boolean boolean5 = compilerOptions0.markNoSideEffectCalls;
        boolean boolean6 = compilerOptions0.labelRenaming;
        com.google.javascript.jscomp.DependencyOptions dependencyOptions7 = new com.google.javascript.jscomp.DependencyOptions();
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        boolean boolean14 = strSet12.isEmpty();
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocate(100);
        boolean boolean17 = strSet12.equals((java.lang.Object) byteBuffer16);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        boolean boolean24 = strSet22.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream25 = strSet22.stream();
        boolean boolean26 = strSet12.retainAll((java.util.Collection<java.lang.String>) strSet22);
        com.google.javascript.jscomp.DependencyOptions dependencyOptions27 = dependencyOptions7.setEntryPoints((java.util.Collection<java.lang.String>) strSet12);
        compilerOptions0.setDependencyOptions(dependencyOptions7);
        com.google.javascript.jscomp.CheckLevel checkLevel29 = compilerOptions0.checkGlobalThisLevel;
        com.google.javascript.jscomp.SourceMap.LocationMapping locationMapping32 = new com.google.javascript.jscomp.SourceMap.LocationMapping("hi!", "(1970-01-01+00:00:52)");
        com.google.javascript.jscomp.SourceMap.LocationMapping locationMapping35 = new com.google.javascript.jscomp.SourceMap.LocationMapping("hi!", "(1970-01-01+00:00:52)");
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray36 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] { locationMapping32, locationMapping35 };
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList37 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList37, locationMappingArray36);
        compilerOptions0.sourceMapLocationMappings = locationMappingList37;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strStream25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dependencyOptions27);
        org.junit.Assert.assertTrue("'" + checkLevel29 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel29.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(locationMappingArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test3004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3004");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        byte[] byteArray5 = compilerOptions0.inputPropertyMapSerialized;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder6 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder8 = builder6.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder9 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label10 = builder9.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder11 = builder6.addExtension(builder9);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder12 = builder6.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder13 = builder12.getOptionsBuilder();
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder14 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output16 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream18 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output16, (int) 'a');
        byte[] byteArray19 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite20 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions21 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray19, extensionRegistryLite20);
        output16.write(byteArray19);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder23 = builder14.mergeFrom(byteArray19);
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder24 = builder13.mergeFrom(byteArray19);
        java.nio.ByteBuffer byteBuffer25 = java.nio.ByteBuffer.wrap(byteArray19);
        compilerOptions0.inputPropertyMapSerialized = byteArray19;
        compilerOptions0.optimizeReturns = false;
        org.junit.Assert.assertNotNull(errorFormat3);
        org.junit.Assert.assertNull(byteArray5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + label10 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label10.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(output16);
        org.junit.Assert.assertNotNull(codedOutputStream18);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(methodOptions21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(byteBuffer25);
    }

    @Test
    public void test3005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3005");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.OffsetDateTime offsetDateTime8 = offsetDateTime6.minusDays((long) (short) 100);
        java.lang.String str9 = offsetDateTime6.toString();
        java.time.ZoneOffset zoneOffset10 = offsetDateTime6.getOffset();
        java.time.LocalTime localTime11 = offsetDateTime6.toLocalTime();
        java.time.OffsetDateTime offsetDateTime13 = offsetDateTime6.withNano(6);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(offsetDateTime8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-01T00:00:52+00:00:52" + "'", str9, "1970-01-01T00:00:52+00:00:52");
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(offsetDateTime13);
    }

    @Test
    public void test3006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3006");
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto0 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.getDefaultInstance();
        boolean boolean1 = serviceDescriptorProto0.hasOptions();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder2 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.newBuilder(serviceDescriptorProto0);
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto3 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.getDefaultInstance();
        boolean boolean4 = serviceDescriptorProto3.hasOptions();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder5 = builder2.mergeFrom(serviceDescriptorProto3);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto7 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.getDefaultInstance();
        boolean boolean8 = methodDescriptorProto7.hasOutputType();
        com.google.protobuf.CodedOutputStream codedOutputStream9 = null;
        methodDescriptorProto7.writeTo(codedOutputStream9);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder11 = methodDescriptorProto7.toBuilder();
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder13 = builder11.setOutputType("java.nio.HeapFloatBuffer[pos=0 lim=6 cap=6]");
        byte[] byteArray14 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite15 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions16 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray14, extensionRegistryLite15);
        com.google.protobuf.DescriptorProtos.UninterpretedOption uninterpretedOption17 = com.google.protobuf.DescriptorProtos.UninterpretedOption.parseFrom(byteArray14);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder18 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label19 = builder18.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto20 = builder18.buildPartial();
        int int21 = fieldDescriptorProto20.getSerializedSize();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder22 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto20);
        java.io.InputStream inputStream23 = null;
        java.io.InputStream inputStream24 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite25 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location26 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream24, extensionRegistryLite25);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder27 = builder22.mergeFrom(inputStream23, extensionRegistryLite25);
        com.google.javascript.jscomp.FunctionInformationMap functionInformationMap28 = com.google.javascript.jscomp.FunctionInformationMap.parseFrom(byteArray14, extensionRegistryLite25);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder29 = builder11.mergeFrom(byteArray14);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder30 = builder2.addMethod(38, builder11);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 38, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serviceDescriptorProto0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(serviceDescriptorProto3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(methodDescriptorProto7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(methodOptions16);
        org.junit.Assert.assertNotNull(uninterpretedOption17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + label19 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label19.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(extensionRegistryLite25);
        org.junit.Assert.assertNotNull(location26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(functionInformationMap28);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test3007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3007");
        java.security.GeneralSecurityException generalSecurityException1 = new java.security.GeneralSecurityException("{1276638193}");
    }

    @Test
    public void test3008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3008");
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions fileOptions1 = builder0.getDefaultInstanceForType();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder3 = builder0.setPyGenericServices(false);
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder4 = builder3.clearJavaMultipleFiles();
        java.nio.CharBuffer charBuffer6 = java.nio.CharBuffer.allocate((int) ' ');
        boolean boolean7 = charBuffer6.isDirect();
        java.nio.CharBuffer charBuffer9 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer11 = charBuffer9.put('a');
        char[] charArray13 = new char[] { '4' };
        java.nio.CharBuffer charBuffer14 = charBuffer11.get(charArray13);
        java.nio.CharBuffer charBuffer15 = charBuffer11.compact();
        java.nio.CharBuffer charBuffer17 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer19 = charBuffer17.put('a');
        java.nio.CharBuffer charBuffer21 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer23 = charBuffer21.put('a');
        char[] charArray25 = new char[] { '4' };
        java.nio.CharBuffer charBuffer26 = charBuffer23.get(charArray25);
        java.nio.CharBuffer charBuffer27 = charBuffer23.compact();
        com.google.common.collect.ImmutableSet<java.lang.Appendable> appendableSet28 = com.google.common.collect.ImmutableSet.of((java.lang.Appendable) charBuffer6, (java.lang.Appendable) charBuffer11, (java.lang.Appendable) charBuffer17, (java.lang.Appendable) charBuffer27);
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime33 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset32);
        int int34 = localDateTime33.getYear();
        java.time.Instant instant35 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset39 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime40 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset39);
        java.time.OffsetDateTime offsetDateTime41 = java.time.OffsetDateTime.ofInstant(instant35, (java.time.ZoneId) zoneOffset39);
        java.time.Instant instant42 = localDateTime33.toInstant(zoneOffset39);
        boolean boolean43 = appendableSet28.equals((java.lang.Object) zoneOffset39);
        java.lang.Object[] objArray44 = appendableSet28.toArray();
        java.util.concurrent.TimeUnit timeUnit45 = java.util.concurrent.TimeUnit.HOURS;
        boolean boolean46 = appendableSet28.contains((java.lang.Object) timeUnit45);
        com.google.common.collect.ImmutableList<java.lang.Appendable> appendableList47 = appendableSet28.asList();
        java.time.ZoneOffset zoneOffset51 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime52 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset51);
        int int53 = localDateTime52.getYear();
        java.time.Instant instant54 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset58 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime59 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset58);
        java.time.OffsetDateTime offsetDateTime60 = java.time.OffsetDateTime.ofInstant(instant54, (java.time.ZoneId) zoneOffset58);
        java.time.Instant instant61 = localDateTime52.toInstant(zoneOffset58);
        int int62 = appendableList47.lastIndexOf((java.lang.Object) instant61);
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder63 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions fileOptions64 = builder63.getDefaultInstanceForType();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder66 = builder63.setPyGenericServices(false);
        int int67 = appendableList47.lastIndexOf((java.lang.Object) builder66);
        com.google.protobuf.DescriptorProtos.FileOptions fileOptions68 = com.google.protobuf.DescriptorProtos.FileOptions.getDefaultInstance();
        java.util.List<com.google.protobuf.DescriptorProtos.UninterpretedOption> uninterpretedOptionList69 = fileOptions68.getUninterpretedOptionList();
        boolean boolean70 = fileOptions68.getJavaGenericServices();
        boolean boolean71 = fileOptions68.getJavaGenerateEqualsAndHash();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder72 = builder66.mergeFrom((com.google.protobuf.Message) fileOptions68);
        boolean boolean73 = fileOptions68.getCcGenericServices();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder74 = builder3.mergeFrom(fileOptions68);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(fileOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(charBuffer9);
        org.junit.Assert.assertNotNull(charBuffer11);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer14);
        org.junit.Assert.assertNotNull(charBuffer15);
        org.junit.Assert.assertNotNull(charBuffer17);
        org.junit.Assert.assertNotNull(charBuffer19);
        org.junit.Assert.assertNotNull(charBuffer21);
        org.junit.Assert.assertNotNull(charBuffer23);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer26);
        org.junit.Assert.assertNotNull(charBuffer27);
        org.junit.Assert.assertNotNull(appendableSet28);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1970 + "'", int34 == 1970);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(zoneOffset39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(offsetDateTime41);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000, \000\000, \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000, \000\000, \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000]");
        org.junit.Assert.assertNotNull(timeUnit45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(appendableList47);
        org.junit.Assert.assertNotNull(zoneOffset51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1970 + "'", int53 == 1970);
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertNotNull(zoneOffset58);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(offsetDateTime60);
        org.junit.Assert.assertNotNull(instant61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(fileOptions64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(fileOptions68);
        org.junit.Assert.assertNotNull(uninterpretedOptionList69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(builder74);
    }

    @Test
    public void test3009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3009");
        com.google.protobuf.DescriptorProtos.MessageOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.MessageOptions.newBuilder();
        java.io.InputStream inputStream1 = null;
        com.google.protobuf.DescriptorProtos.MessageOptions.Builder builder2 = builder0.mergeFrom(inputStream1);
        java.util.List<com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder> builderList3 = builder2.getUninterpretedOptionBuilderList();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builderList3);
    }

    @Test
    public void test3010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3010");
        com.google.javascript.jscomp.JSModule jSModule1 = new com.google.javascript.jscomp.JSModule("/");
        java.lang.String str2 = jSModule1.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "/" + "'", str2, "/");
    }

    @Test
    public void test3011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3011");
        byte[] byteArray0 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions2 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray0, extensionRegistryLite1);
        com.google.protobuf.CodedInputStream codedInputStream5 = com.google.protobuf.CodedInputStream.newInstance(byteArray0, 16, (int) 'a');
        com.google.javascript.jscomp.VariableMap variableMap6 = com.google.javascript.jscomp.VariableMap.fromBytes(byteArray0);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite7 = null;
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto enumDescriptorProto8 = com.google.protobuf.DescriptorProtos.EnumDescriptorProto.parseFrom(byteArray0, extensionRegistryLite7);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder9 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder11 = builder9.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder12 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label13 = builder12.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder14 = builder9.addExtension(builder12);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder15 = builder9.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder16 = builder15.getOptionsBuilder();
        java.io.InputStream inputStream17 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions18 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream17);
        boolean boolean19 = enumOptions18.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder20 = builder16.mergeFrom(enumOptions18);
        com.google.protobuf.UnknownFieldSet unknownFieldSet21 = builder16.getUnknownFields();
        byte[] byteArray22 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite23 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions24 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray22, extensionRegistryLite23);
        com.google.protobuf.CodedOutputStream codedOutputStream27 = com.google.protobuf.CodedOutputStream.newInstance(byteArray22, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite28 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto29 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray22, extensionRegistryLite28);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite30 = null;
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto31 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.parseFrom(byteArray22, extensionRegistryLite30);
        com.google.protobuf.UnknownFieldSet unknownFieldSet32 = com.google.protobuf.UnknownFieldSet.parseFrom(byteArray22);
        com.google.protobuf.ByteString byteString33 = unknownFieldSet32.toByteString();
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite34 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder35 = builder16.mergeFrom(byteString33, extensionRegistryLite34);
        com.google.protobuf.DescriptorProtos.FieldOptions fieldOptions36 = com.google.protobuf.DescriptorProtos.FieldOptions.parseFrom(byteString33);
        com.google.protobuf.ByteString byteString37 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite38 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions39 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(byteString37, extensionRegistryLite38);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder40 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label41 = builder40.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto42 = builder40.buildPartial();
        int int43 = fieldDescriptorProto42.getSerializedSize();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder44 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto42);
        java.io.InputStream inputStream45 = null;
        java.io.InputStream inputStream46 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite47 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location48 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream46, extensionRegistryLite47);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder49 = builder44.mergeFrom(inputStream45, extensionRegistryLite47);
        com.google.javascript.jscomp.FunctionInformationMap functionInformationMap50 = com.google.javascript.jscomp.FunctionInformationMap.parseFrom(byteString37, extensionRegistryLite47);
        com.google.protobuf.DescriptorProtos.FileOptions fileOptions51 = com.google.protobuf.DescriptorProtos.FileOptions.parseFrom(byteString33, extensionRegistryLite47);
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange extensionRange52 = com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.parseFrom(byteArray0, extensionRegistryLite47);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.UninterpretedOption.NamePart namePart53 = com.google.protobuf.DescriptorProtos.UninterpretedOption.NamePart.parseFrom(byteArray0);
            org.junit.Assert.fail("Expected exception of type com.google.protobuf.InvalidProtocolBufferException; message: Message missing required fields: name_part, is_extension");
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(methodOptions2);
        org.junit.Assert.assertNotNull(codedInputStream5);
        org.junit.Assert.assertNotNull(variableMap6);
        org.junit.Assert.assertNotNull(enumDescriptorProto8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + label13 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label13.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(enumOptions18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(unknownFieldSet21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(methodOptions24);
        org.junit.Assert.assertNotNull(codedOutputStream27);
        org.junit.Assert.assertNotNull(fileDescriptorProto29);
        org.junit.Assert.assertNotNull(serviceDescriptorProto31);
        org.junit.Assert.assertNotNull(unknownFieldSet32);
        org.junit.Assert.assertNotNull(byteString33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(fieldOptions36);
        org.junit.Assert.assertNotNull(byteString37);
        org.junit.Assert.assertNotNull(enumOptions39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + label41 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label41.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(extensionRegistryLite47);
        org.junit.Assert.assertNotNull(location48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(functionInformationMap50);
        org.junit.Assert.assertNotNull(fileOptions51);
        org.junit.Assert.assertNotNull(extensionRange52);
    }

    @Test
    public void test3012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3012");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.lang.String str1 = charset0.displayName();
        java.lang.String str2 = charset0.toString();
        java.lang.String str3 = charset0.toString();
        boolean boolean4 = charset0.canEncode();
        java.nio.CharBuffer charBuffer6 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer8 = charBuffer6.put('a');
        java.nio.ByteBuffer byteBuffer9 = charset0.encode(charBuffer8);
        long[] longArray15 = new long[] { 97, 57600000000000L, 28147497671065600L, 52, 37 };
        java.nio.LongBuffer longBuffer16 = java.nio.LongBuffer.wrap(longArray15);
        java.nio.LongBuffer longBuffer17 = longBuffer16.asReadOnlyBuffer();
        int int18 = longBuffer16.arrayOffset();
        long[] longArray24 = new long[] { 97, 57600000000000L, 28147497671065600L, 52, 37 };
        java.nio.LongBuffer longBuffer25 = java.nio.LongBuffer.wrap(longArray24);
        int int26 = longBuffer25.arrayOffset();
        int int27 = longBuffer16.compareTo(longBuffer25);
        java.nio.LongBuffer longBuffer28 = longBuffer16.compact();
        java.io.PrintWriter printWriter30 = new java.io.PrintWriter("1970-03-24T02:02:32");
        char[] charArray36 = new char[] { '4', ' ', 'a', 'a', ':' };
        printWriter30.println(charArray36);
        java.security.SignatureException signatureException39 = new java.security.SignatureException();
        java.security.SignatureException signatureException40 = new java.security.SignatureException();
        java.security.SignatureException signatureException41 = new java.security.SignatureException();
        java.security.SignatureException signatureException42 = new java.security.SignatureException();
        java.security.SignatureException signatureException43 = new java.security.SignatureException();
        java.security.SignatureException[] signatureExceptionArray44 = new java.security.SignatureException[] { signatureException39, signatureException40, signatureException41, signatureException42, signatureException43 };
        com.google.common.collect.ImmutableSet<java.security.SignatureException> signatureExceptionSet45 = com.google.common.collect.ImmutableSet.of(signatureExceptionArray44);
        java.io.PrintWriter printWriter46 = printWriter30.format("ISO", (java.lang.Object[]) signatureExceptionArray44);
        com.google.javascript.rhino.Node node51 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean52 = node51.isStringKey();
        boolean boolean53 = node51.isTrue();
        com.google.javascript.rhino.InputId inputId55 = new com.google.javascript.rhino.InputId("NUMBER 52.0 0");
        node51.setInputId(inputId55);
        com.google.javascript.jscomp.SourceAst sourceAst57 = null;
        com.google.javascript.rhino.InputId inputId58 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput60 = new com.google.javascript.jscomp.CompilerInput(sourceAst57, inputId58, true);
        java.io.PrintStream printStream61 = null;
        com.google.javascript.jscomp.Compiler compiler62 = new com.google.javascript.jscomp.Compiler(printStream61);
        com.google.javascript.jscomp.ErrorManager errorManager63 = compiler62.getErrorManager();
        compilerInput60.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler62);
        com.google.javascript.jscomp.CodingConvention codingConvention65 = compiler62.getCodingConvention();
        boolean boolean66 = inputId55.equals((java.lang.Object) compiler62);
        com.google.javascript.jscomp.Region region69 = compiler62.getSourceRegion("java.nio.HeapFloatBuffer[pos=0 lim=6 cap=6]", 0);
        com.google.javascript.jscomp.JSError[] jSErrorArray70 = compiler62.getWarnings();
        java.io.PrintWriter printWriter71 = printWriter30.format("*global*", (java.lang.Object[]) jSErrorArray70);
        boolean boolean72 = longBuffer28.equals((java.lang.Object) printWriter71);
        java.util.Locale locale76 = new java.util.Locale("", "NUMBER 52.0 0", "hi!");
        java.util.Locale locale80 = new java.util.Locale("", "NUMBER 52.0 0", "hi!");
        java.lang.String str81 = locale76.getDisplayLanguage(locale80);
        java.util.Locale locale82 = locale80.stripExtensions();
        java.lang.String[] strArray84 = java.util.Locale.getISOCountries();
        java.io.PrintWriter printWriter85 = printWriter71.format(locale80, "/tmp/hi!4516073975838273390ISO", (java.lang.Object[]) strArray84);
        java.lang.String str86 = charset0.displayName(locale80);
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "US-ASCII" + "'", str1, "US-ASCII");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "US-ASCII" + "'", str2, "US-ASCII");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "US-ASCII" + "'", str3, "US-ASCII");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(charBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[97, 57600000000000, 28147497671065600, 52, 37]");
        org.junit.Assert.assertNotNull(longBuffer16);
        org.junit.Assert.assertNotNull(longBuffer17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(longArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray24), "[97, 57600000000000, 28147497671065600, 52, 37]");
        org.junit.Assert.assertNotNull(longBuffer25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(longBuffer28);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "4 aa:");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "4 aa:");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[4,  , a, a, :]");
        org.junit.Assert.assertNotNull(signatureExceptionArray44);
        org.junit.Assert.assertNotNull(signatureExceptionSet45);
        org.junit.Assert.assertNotNull(printWriter46);
        org.junit.Assert.assertNotNull(node51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(errorManager63);
        org.junit.Assert.assertNotNull(codingConvention65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(region69);
        org.junit.Assert.assertNotNull(jSErrorArray70);
        org.junit.Assert.assertNotNull(printWriter71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals(locale76.toString(), "_NUMBER 52.0 0_hi!");
        org.junit.Assert.assertEquals(locale80.toString(), "_NUMBER 52.0 0_hi!");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "_NUMBER 52.0 0_hi!");
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertNotNull(printWriter85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "US-ASCII" + "'", str86, "US-ASCII");
    }

    @Test
    public void test3013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3013");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.of(localDateTime4, (java.time.ZoneId) zoneOffset8);
        java.time.temporal.ChronoField chronoField12 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit13 = chronoField12.getBaseUnit();
        java.time.LocalDateTime localDateTime14 = localDateTime4.plus((long) 1970, temporalUnit13);
        java.time.LocalDateTime localDateTime16 = localDateTime4.withHour((int) (short) 1);
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.OffsetDateTime offsetDateTime19 = java.time.OffsetDateTime.of(localDateTime4, zoneOffset18);
        java.time.LocalDateTime localDateTime20 = offsetDateTime19.toLocalDateTime();
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset24);
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset29);
        java.time.ZonedDateTime zonedDateTime31 = java.time.ZonedDateTime.of(localDateTime25, (java.time.ZoneId) zoneOffset29);
        java.time.temporal.ChronoField chronoField33 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit34 = chronoField33.getBaseUnit();
        java.time.LocalDateTime localDateTime35 = localDateTime25.plus((long) 1970, temporalUnit34);
        java.time.ZoneOffset zoneOffset40 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime41 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset40);
        java.time.ZoneOffset zoneOffset45 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime46 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset45);
        java.time.ZonedDateTime zonedDateTime47 = java.time.ZonedDateTime.of(localDateTime41, (java.time.ZoneId) zoneOffset45);
        java.time.temporal.ChronoField chronoField49 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit50 = chronoField49.getBaseUnit();
        java.time.LocalDateTime localDateTime51 = localDateTime41.plus((long) 1970, temporalUnit50);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime52 = localDateTime35.minus((long) 43, temporalUnit50);
        java.time.LocalDateTime localDateTime54 = localDateTime35.minusHours((long) 1024);
        java.time.LocalDateTime localDateTime56 = localDateTime54.plusHours((long) 0);
        boolean boolean57 = localDateTime20.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime54);
        java.time.ZoneOffset zoneOffset61 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime62 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset61);
        java.time.ZoneOffset zoneOffset66 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime67 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset66);
        java.time.ZonedDateTime zonedDateTime68 = java.time.ZonedDateTime.of(localDateTime62, (java.time.ZoneId) zoneOffset66);
        java.time.temporal.ChronoField chronoField70 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit71 = chronoField70.getBaseUnit();
        java.time.LocalDateTime localDateTime72 = localDateTime62.plus((long) 1970, temporalUnit71);
        java.time.LocalTime localTime73 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localDateTime72);
        boolean boolean74 = localDateTime54.isBefore((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime72);
        int int75 = localDateTime72.getSecond();
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertTrue("'" + chronoField12 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField12.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit13 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit13.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(offsetDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(zonedDateTime31);
        org.junit.Assert.assertTrue("'" + chronoField33 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField33.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit34 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit34.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(zoneOffset40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(zoneOffset45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(zonedDateTime47);
        org.junit.Assert.assertTrue("'" + chronoField49 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField49.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit50 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit50.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(zoneOffset61);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(zoneOffset66);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(zonedDateTime68);
        org.junit.Assert.assertTrue("'" + chronoField70 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField70.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit71 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit71.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localTime73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 32 + "'", int75 == 32);
    }

    @Test
    public void test3014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3014");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.nio.file.attribute.FileTime fileTime1 = java.nio.file.attribute.FileTime.from(instant0);
        java.util.concurrent.TimeUnit timeUnit2 = java.util.concurrent.TimeUnit.NANOSECONDS;
        long long3 = fileTime1.to(timeUnit2);
        java.time.Instant instant5 = java.time.Instant.EPOCH;
        java.nio.file.attribute.FileTime fileTime6 = java.nio.file.attribute.FileTime.from(instant5);
        java.util.concurrent.TimeUnit timeUnit7 = java.util.concurrent.TimeUnit.NANOSECONDS;
        long long8 = fileTime6.to(timeUnit7);
        java.time.Instant instant10 = java.time.Instant.EPOCH;
        java.nio.file.attribute.FileTime fileTime11 = java.nio.file.attribute.FileTime.from(instant10);
        java.util.concurrent.TimeUnit timeUnit12 = java.util.concurrent.TimeUnit.NANOSECONDS;
        long long13 = fileTime11.to(timeUnit12);
        long long14 = timeUnit7.convert((long) '4', timeUnit12);
        long long15 = timeUnit2.convert((long) 2, timeUnit7);
        timeUnit2.sleep(0L);
        long long19 = timeUnit2.toMicros((long) 67108864);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(fileTime1);
        org.junit.Assert.assertNotNull(timeUnit2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(fileTime6);
        org.junit.Assert.assertNotNull(timeUnit7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(fileTime11);
        org.junit.Assert.assertNotNull(timeUnit12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 52L + "'", long14 == 52L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2L + "'", long15 == 2L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 67108L + "'", long19 == 67108L);
    }

    @Test
    public void test3015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3015");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.of(localDateTime4, (java.time.ZoneId) zoneOffset8);
        java.time.temporal.ChronoField chronoField12 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit13 = chronoField12.getBaseUnit();
        java.time.LocalDateTime localDateTime14 = localDateTime4.plus((long) 1970, temporalUnit13);
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset19);
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset24);
        java.time.ZonedDateTime zonedDateTime26 = java.time.ZonedDateTime.of(localDateTime20, (java.time.ZoneId) zoneOffset24);
        java.time.temporal.ChronoField chronoField28 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit29 = chronoField28.getBaseUnit();
        java.time.LocalDateTime localDateTime30 = localDateTime20.plus((long) 1970, temporalUnit29);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime31 = localDateTime14.minus((long) 43, temporalUnit29);
        java.time.LocalDateTime localDateTime33 = localDateTime14.minusHours((long) 1024);
        java.time.LocalDateTime localDateTime35 = localDateTime33.plusHours((long) 0);
        java.time.ZoneOffset zoneOffset39 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime40 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset39);
        java.time.ZoneOffset zoneOffset44 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime45 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset44);
        java.time.ZonedDateTime zonedDateTime46 = java.time.ZonedDateTime.of(localDateTime40, (java.time.ZoneId) zoneOffset44);
        java.time.temporal.ChronoField chronoField47 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        boolean boolean48 = localDateTime40.isSupported((java.time.temporal.TemporalField) chronoField47);
        java.time.LocalDateTime localDateTime50 = localDateTime40.plusHours((long) 9);
        java.time.format.DateTimeFormatter dateTimeFormatter51 = java.time.format.DateTimeFormatter.ISO_DATE;
        java.lang.String str52 = localDateTime40.format(dateTimeFormatter51);
        int int53 = localDateTime35.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime40);
        java.time.LocalTime localTime54 = localDateTime35.toLocalTime();
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertTrue("'" + chronoField12 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField12.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit13 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit13.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertTrue("'" + chronoField28 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField28.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit29 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit29.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(zoneOffset39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(zoneOffset44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(zonedDateTime46);
        org.junit.Assert.assertTrue("'" + chronoField47 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField47.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "1970-01-01" + "'", str52, "1970-01-01");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(localTime54);
    }

    @Test
    public void test3016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3016");
        byte[] byteArray0 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions2 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray0, extensionRegistryLite1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite3 = null;
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto enumDescriptorProto4 = com.google.protobuf.DescriptorProtos.EnumDescriptorProto.parseFrom(byteArray0, extensionRegistryLite3);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder5 = enumDescriptorProto4.newBuilderForType();
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto enumDescriptorProto6 = builder5.build();
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder7 = com.google.protobuf.DescriptorProtos.EnumDescriptorProto.newBuilder(enumDescriptorProto6);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(methodOptions2);
        org.junit.Assert.assertNotNull(enumDescriptorProto4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(enumDescriptorProto6);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test3017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3017");
        com.google.protobuf.Descriptors.Descriptor descriptor0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto1 = descriptor0.toProto();
        boolean boolean2 = descriptorProto1.isInitialized();
        com.google.protobuf.DescriptorProtos.MessageOptions messageOptions3 = descriptorProto1.getOptions();
        com.google.protobuf.DescriptorProtos.MessageOptions.Builder builder4 = messageOptions3.newBuilderForType();
        boolean boolean5 = builder4.hasNoStandardDescriptorAccessor();
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor6 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.MessageOptions.Builder builder7 = builder4.clearField(fieldDescriptor6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptor0);
        org.junit.Assert.assertNotNull(descriptorProto1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(messageOptions3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test3018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3018");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_TIME;
        java.time.format.ResolverStyle resolverStyle1 = java.time.format.ResolverStyle.SMART;
        java.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withResolverStyle(resolverStyle1);
        java.util.Locale locale6 = new java.util.Locale("", "NUMBER 52.0 0", "hi!");
        java.time.format.DecimalStyle decimalStyle7 = java.time.format.DecimalStyle.of(locale6);
        java.time.ZoneOffset zoneOffset11 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset11);
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset16);
        java.time.ZonedDateTime zonedDateTime18 = java.time.ZonedDateTime.of(localDateTime12, (java.time.ZoneId) zoneOffset16);
        java.time.ZonedDateTime zonedDateTime20 = zonedDateTime18.withYear((int) (short) 1);
        boolean boolean21 = decimalStyle7.equals((java.lang.Object) (short) 1);
        java.time.format.DecimalStyle decimalStyle23 = decimalStyle7.withNegativeSign('#');
        java.time.format.DecimalStyle decimalStyle25 = decimalStyle7.withPositiveSign('+');
        java.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter2.withDecimalStyle(decimalStyle7);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + resolverStyle1 + "' != '" + java.time.format.ResolverStyle.SMART + "'", resolverStyle1.equals(java.time.format.ResolverStyle.SMART));
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertEquals(locale6.toString(), "_NUMBER 52.0 0_hi!");
        org.junit.Assert.assertNotNull(decimalStyle7);
        org.junit.Assert.assertNotNull(zoneOffset11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zonedDateTime18);
        org.junit.Assert.assertNotNull(zonedDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(decimalStyle23);
        org.junit.Assert.assertNotNull(decimalStyle25);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
    }

    @Test
    public void test3019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3019");
        java.security.KeyException keyException1 = new java.security.KeyException("Named type with empty name component");
        java.security.InvalidKeyException invalidKeyException3 = new java.security.InvalidKeyException();
        java.security.SignatureException signatureException4 = new java.security.SignatureException("hi!", (java.lang.Throwable) invalidKeyException3);
        keyException1.addSuppressed((java.lang.Throwable) signatureException4);
    }

    @Test
    public void test3020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3020");
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto0 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.getDefaultInstance();
        java.lang.String str1 = methodDescriptorProto0.getOutputType();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder4 = builder2.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder5 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label6 = builder5.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder7 = builder2.addExtension(builder5);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder8 = builder2.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder9 = builder8.getOptionsBuilder();
        java.io.InputStream inputStream10 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions11 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream10);
        boolean boolean12 = enumOptions11.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder13 = builder9.mergeFrom(enumOptions11);
        com.google.protobuf.UnknownFieldSet unknownFieldSet14 = builder9.getUnknownFields();
        com.google.protobuf.CodedOutputStream codedOutputStream15 = null;
        unknownFieldSet14.writeTo(codedOutputStream15);
        byte[] byteArray17 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite18 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions19 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray17, extensionRegistryLite18);
        com.google.protobuf.CodedOutputStream codedOutputStream22 = com.google.protobuf.CodedOutputStream.newInstance(byteArray17, (int) (short) 0, 1);
        com.google.protobuf.CodedOutputStream codedOutputStream25 = com.google.protobuf.CodedOutputStream.newInstance(byteArray17, (int) ' ', 0);
        java.io.InputStream inputStream26 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location27 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream26);
        boolean boolean28 = location27.isInitialized();
        codedOutputStream25.writeGroupNoTag((com.google.protobuf.MessageLite) location27);
        unknownFieldSet14.writeAsMessageSetTo(codedOutputStream25);
        byte[] byteArray31 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite32 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions33 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray31, extensionRegistryLite32);
        com.google.protobuf.CodedOutputStream codedOutputStream36 = com.google.protobuf.CodedOutputStream.newInstance(byteArray31, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite37 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto38 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray31, extensionRegistryLite37);
        com.google.protobuf.CodedOutputStream codedOutputStream39 = com.google.protobuf.CodedOutputStream.newInstance(byteArray31);
        unknownFieldSet14.writeAsMessageSetTo(codedOutputStream39);
        methodDescriptorProto0.writeTo(codedOutputStream39);
        boolean boolean42 = methodDescriptorProto0.hasOutputType();
        com.google.protobuf.DescriptorProtos.MethodOptionsOrBuilder methodOptionsOrBuilder43 = methodDescriptorProto0.getOptionsOrBuilder();
        org.junit.Assert.assertNotNull(methodDescriptorProto0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + label6 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label6.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(enumOptions11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(unknownFieldSet14);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(methodOptions19);
        org.junit.Assert.assertNotNull(codedOutputStream22);
        org.junit.Assert.assertNotNull(codedOutputStream25);
        org.junit.Assert.assertNotNull(location27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(methodOptions33);
        org.junit.Assert.assertNotNull(codedOutputStream36);
        org.junit.Assert.assertNotNull(fileDescriptorProto38);
        org.junit.Assert.assertNotNull(codedOutputStream39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(methodOptionsOrBuilder43);
    }

    @Test
    public void test3021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3021");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label4 = builder3.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = builder0.addExtension(builder3);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder6 = builder0.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder7 = builder0.clearPackage();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + label4 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label4.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test3022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3022");
        java.time.temporal.ChronoField chronoField0 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY;
        org.junit.Assert.assertTrue("'" + chronoField0 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY + "'", chronoField0.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_DAY));
    }

    @Test
    public void test3023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3023");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        int int5 = localDateTime4.getYear();
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset9);
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset14);
        java.time.ZonedDateTime zonedDateTime16 = java.time.ZonedDateTime.of(localDateTime10, (java.time.ZoneId) zoneOffset14);
        boolean boolean17 = localDateTime4.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime10);
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset21);
        int int23 = localDateTime22.getYear();
        java.time.LocalDate localDate24 = localDateTime22.toLocalDate();
        int int25 = localDateTime4.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime22);
        java.time.temporal.ChronoField chronoField26 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit27 = chronoField26.getBaseUnit();
        long long28 = localDateTime4.getLong((java.time.temporal.TemporalField) chronoField26);
        java.time.LocalTime localTime29 = localDateTime4.toLocalTime();
        java.time.LocalDate localDate30 = java.time.LocalDate.now();
        java.lang.String str31 = localDate30.toString();
        java.time.chrono.IsoChronology isoChronology32 = localDate30.getChronology();
        java.lang.String str33 = isoChronology32.getId();
        java.time.chrono.ChronoPeriod chronoPeriod37 = isoChronology32.period(1970, (int) (short) 10, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime38 = localTime29.plus((java.time.temporal.TemporalAmount) chronoPeriod37);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported unit: Months");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zonedDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1970 + "'", int23 == 1970);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + chronoField26 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField26.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit27 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit27.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 12L + "'", long28 == 12L);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2022-02-21" + "'", str31, "2022-02-21");
        org.junit.Assert.assertNotNull(isoChronology32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ISO" + "'", str33, "ISO");
        org.junit.Assert.assertNotNull(chronoPeriod37);
    }

    @Test
    public void test3024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3024");
        java.nio.FloatBuffer floatBuffer1 = java.nio.FloatBuffer.allocate(6);
        java.nio.FloatBuffer floatBuffer2 = floatBuffer1.asReadOnlyBuffer();
        java.nio.FloatBuffer floatBuffer3 = floatBuffer1.asReadOnlyBuffer();
        java.nio.ByteOrder byteOrder4 = floatBuffer3.order();
        boolean boolean5 = floatBuffer3.hasArray();
        java.nio.FloatBuffer floatBuffer7 = java.nio.FloatBuffer.allocate(6);
        float[] floatArray8 = floatBuffer7.array();
        java.nio.FloatBuffer floatBuffer9 = java.nio.FloatBuffer.wrap(floatArray8);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.FloatBuffer floatBuffer12 = floatBuffer3.put(floatArray8, (int) '0', 1);
            org.junit.Assert.fail("Expected exception of type java.nio.ReadOnlyBufferException; message: null");
        } catch (java.nio.ReadOnlyBufferException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatBuffer1);
        org.junit.Assert.assertNotNull(floatBuffer2);
        org.junit.Assert.assertNotNull(floatBuffer3);
        org.junit.Assert.assertNotNull(byteOrder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(floatBuffer7);
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(floatBuffer9);
    }

    @Test
    public void test3025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3025");
        com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder builder0 = com.google.javascript.jscomp.FunctionInformationMap.Entry.newBuilder();
        boolean boolean1 = builder0.hasSourceName();
        com.google.javascript.jscomp.FunctionInformationMap.Entry entry2 = builder0.getDefaultInstanceForType();
        boolean boolean3 = entry2.hasSize();
        boolean boolean4 = entry2.isInitialized();
        boolean boolean5 = entry2.isInitialized();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(entry2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test3026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3026");
        java.util.OptionalLong optionalLong0 = java.util.OptionalLong.empty();
        boolean boolean1 = optionalLong0.isPresent();
        org.junit.Assert.assertNotNull(optionalLong0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test3027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3027");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) ' ');
        boolean boolean2 = charBuffer1.isDirect();
        java.nio.CharBuffer charBuffer4 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer6 = charBuffer4.put('a');
        char[] charArray8 = new char[] { '4' };
        java.nio.CharBuffer charBuffer9 = charBuffer6.get(charArray8);
        java.nio.CharBuffer charBuffer10 = charBuffer6.compact();
        java.nio.CharBuffer charBuffer12 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer14 = charBuffer12.put('a');
        java.nio.CharBuffer charBuffer16 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer18 = charBuffer16.put('a');
        char[] charArray20 = new char[] { '4' };
        java.nio.CharBuffer charBuffer21 = charBuffer18.get(charArray20);
        java.nio.CharBuffer charBuffer22 = charBuffer18.compact();
        com.google.common.collect.ImmutableSet<java.lang.Appendable> appendableSet23 = com.google.common.collect.ImmutableSet.of((java.lang.Appendable) charBuffer1, (java.lang.Appendable) charBuffer6, (java.lang.Appendable) charBuffer12, (java.lang.Appendable) charBuffer22);
        java.time.ZoneOffset zoneOffset27 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset27);
        int int29 = localDateTime28.getYear();
        java.time.Instant instant30 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset34);
        java.time.OffsetDateTime offsetDateTime36 = java.time.OffsetDateTime.ofInstant(instant30, (java.time.ZoneId) zoneOffset34);
        java.time.Instant instant37 = localDateTime28.toInstant(zoneOffset34);
        boolean boolean38 = appendableSet23.equals((java.lang.Object) zoneOffset34);
        java.lang.Object[] objArray39 = appendableSet23.toArray();
        java.util.concurrent.TimeUnit timeUnit40 = java.util.concurrent.TimeUnit.HOURS;
        boolean boolean41 = appendableSet23.contains((java.lang.Object) timeUnit40);
        com.google.common.collect.ImmutableList<java.lang.Appendable> appendableList42 = appendableSet23.asList();
        java.time.ZoneOffset zoneOffset46 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime47 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset46);
        int int48 = localDateTime47.getYear();
        java.time.Instant instant49 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset53 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime54 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset53);
        java.time.OffsetDateTime offsetDateTime55 = java.time.OffsetDateTime.ofInstant(instant49, (java.time.ZoneId) zoneOffset53);
        java.time.Instant instant56 = localDateTime47.toInstant(zoneOffset53);
        int int57 = appendableList42.lastIndexOf((java.lang.Object) instant56);
        com.google.common.collect.UnmodifiableIterator<java.lang.Appendable> appendableItor58 = appendableList42.iterator();
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charBuffer4);
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer9);
        org.junit.Assert.assertNotNull(charBuffer10);
        org.junit.Assert.assertNotNull(charBuffer12);
        org.junit.Assert.assertNotNull(charBuffer14);
        org.junit.Assert.assertNotNull(charBuffer16);
        org.junit.Assert.assertNotNull(charBuffer18);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer21);
        org.junit.Assert.assertNotNull(charBuffer22);
        org.junit.Assert.assertNotNull(appendableSet23);
        org.junit.Assert.assertNotNull(zoneOffset27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1970 + "'", int29 == 1970);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(offsetDateTime36);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000, \000\000, \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000, \000\000, \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000]");
        org.junit.Assert.assertNotNull(timeUnit40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(appendableList42);
        org.junit.Assert.assertNotNull(zoneOffset46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1970 + "'", int48 == 1970);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertNotNull(zoneOffset53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(offsetDateTime55);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(appendableItor58);
    }

    @Test
    public void test3028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3028");
        com.google.protobuf.Descriptors.Descriptor descriptor0 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder.getDescriptor();
        org.junit.Assert.assertNotNull(descriptor0);
    }

    @Test
    public void test3029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3029");
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto0 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.getDefaultInstance();
        boolean boolean1 = serviceDescriptorProto0.hasOptions();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder2 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.newBuilder(serviceDescriptorProto0);
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto3 = builder2.buildPartial();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto4 = builder2.build();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder7 = builder5.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder8 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label9 = builder8.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder10 = builder5.addExtension(builder8);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder11 = builder5.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder12 = builder11.getOptionsBuilder();
        java.io.InputStream inputStream13 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions14 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream13);
        boolean boolean15 = enumOptions14.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder16 = builder12.mergeFrom(enumOptions14);
        com.google.protobuf.UnknownFieldSet unknownFieldSet17 = builder12.getUnknownFields();
        com.google.protobuf.CodedOutputStream codedOutputStream18 = null;
        unknownFieldSet17.writeTo(codedOutputStream18);
        byte[] byteArray20 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite21 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions22 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray20, extensionRegistryLite21);
        com.google.protobuf.CodedOutputStream codedOutputStream25 = com.google.protobuf.CodedOutputStream.newInstance(byteArray20, (int) (short) 0, 1);
        com.google.protobuf.CodedOutputStream codedOutputStream28 = com.google.protobuf.CodedOutputStream.newInstance(byteArray20, (int) ' ', 0);
        java.io.InputStream inputStream29 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location30 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream29);
        boolean boolean31 = location30.isInitialized();
        codedOutputStream28.writeGroupNoTag((com.google.protobuf.MessageLite) location30);
        unknownFieldSet17.writeAsMessageSetTo(codedOutputStream28);
        serviceDescriptorProto4.writeTo(codedOutputStream28);
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor35 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean36 = serviceDescriptorProto4.hasField(fieldDescriptor35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serviceDescriptorProto0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(serviceDescriptorProto3);
        org.junit.Assert.assertNotNull(serviceDescriptorProto4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + label9 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label9.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(enumOptions14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(unknownFieldSet17);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(methodOptions22);
        org.junit.Assert.assertNotNull(codedOutputStream25);
        org.junit.Assert.assertNotNull(codedOutputStream28);
        org.junit.Assert.assertNotNull(location30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test3030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3030");
        java.time.temporal.ChronoField chronoField0 = java.time.temporal.ChronoField.OFFSET_SECONDS;
        java.time.temporal.TemporalUnit temporalUnit1 = chronoField0.getRangeUnit();
        long long3 = chronoField0.checkValidValue((long) 2);
        java.util.Locale locale4 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str5 = chronoField0.getDisplayName(locale4);
        org.junit.Assert.assertTrue("'" + chronoField0 + "' != '" + java.time.temporal.ChronoField.OFFSET_SECONDS + "'", chronoField0.equals(java.time.temporal.ChronoField.OFFSET_SECONDS));
        org.junit.Assert.assertTrue("'" + temporalUnit1 + "' != '" + java.time.temporal.ChronoUnit.FOREVER + "'", temporalUnit1.equals(java.time.temporal.ChronoUnit.FOREVER));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 2L + "'", long3 == 2L);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "OffsetSeconds" + "'", str5, "OffsetSeconds");
    }

    @Test
    public void test3031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3031");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean5 = node4.isStringKey();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(0, node4);
        boolean boolean7 = node6.isFor();
        boolean boolean8 = node6.isTry();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean13 = node12.isTry();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean18 = node17.isStringKey();
        boolean boolean19 = node17.isThrow();
        com.google.javascript.rhino.JSDocInfo jSDocInfo20 = null;
        node17.setJSDocInfo(jSDocInfo20);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile22 = node17.getStaticSourceFile();
        boolean boolean23 = node17.isWhile();
        com.google.javascript.rhino.Node node24 = node12.clonePropsFrom(node17);
        com.google.javascript.rhino.Node node25 = node6.copyInformationFrom(node24);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(staticSourceFile22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertNotNull(node25);
    }

    @Test
    public void test3032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3032");
        java.io.InputStream inputStream0 = null;
        java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite> priorityMap1 = new java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite>();
        java.lang.Object obj2 = priorityMap1.clone();
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.newBuilder();
        boolean boolean4 = priorityMap1.containsValue((java.lang.Object) builder3);
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder6 = builder3.setName("java.nio.ByteBufferAsDoubleBufferB[pos=0 lim=12 cap=12]");
        com.google.protobuf.ByteString byteString7 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder8 = builder3.mergeFrom(byteString7);
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions9 = com.google.protobuf.DescriptorProtos.EnumValueOptions.getDefaultInstance();
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder10 = com.google.protobuf.DescriptorProtos.EnumValueOptions.newBuilder(enumValueOptions9);
        java.io.InputStream inputStream11 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder12 = builder10.mergeFrom(inputStream11);
        com.google.protobuf.ByteString byteString13 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto14 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.parseFrom(byteString13);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite15 = null;
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto enumValueDescriptorProto16 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.parseFrom(byteString13, extensionRegistryLite15);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite17 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions18 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteString13, extensionRegistryLite17);
        java.io.InputStream inputStream19 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite20 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location21 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream19, extensionRegistryLite20);
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder22 = builder12.mergeFrom(byteString13, extensionRegistryLite20);
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto23 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.parseFrom(byteString7, extensionRegistryLite20);
        com.google.javascript.jscomp.FunctionInformationMap functionInformationMap24 = com.google.javascript.jscomp.FunctionInformationMap.parseFrom(inputStream0, extensionRegistryLite20);
        int int25 = functionInformationMap24.getModuleCount();
        com.google.javascript.jscomp.FunctionInformationMap.Builder builder26 = functionInformationMap24.toBuilder();
        java.io.InputStream inputStream27 = null;
        com.google.javascript.jscomp.FunctionInformationMap.Builder builder28 = builder26.mergeFrom(inputStream27);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.FunctionInformationMap.Builder builder30 = builder26.removeModule((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "{}");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(byteString7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(enumValueOptions9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(byteString13);
        org.junit.Assert.assertNotNull(methodDescriptorProto14);
        org.junit.Assert.assertNotNull(enumValueDescriptorProto16);
        org.junit.Assert.assertNotNull(methodOptions18);
        org.junit.Assert.assertNotNull(extensionRegistryLite20);
        org.junit.Assert.assertNotNull(location21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(serviceDescriptorProto23);
        org.junit.Assert.assertNotNull(functionInformationMap24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test3033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3033");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.OffsetDateTime offsetDateTime8 = offsetDateTime6.minusDays((long) (short) 100);
        java.lang.String str9 = offsetDateTime6.toString();
        java.time.OffsetDateTime offsetDateTime11 = offsetDateTime6.minusYears((long) 2);
        java.time.Instant instant12 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset16);
        java.time.OffsetDateTime offsetDateTime18 = java.time.OffsetDateTime.ofInstant(instant12, (java.time.ZoneId) zoneOffset16);
        java.time.OffsetDateTime offsetDateTime20 = offsetDateTime18.minusDays((long) (short) 100);
        java.lang.String str21 = offsetDateTime18.toString();
        java.time.ZoneOffset zoneOffset22 = offsetDateTime18.getOffset();
        java.time.LocalTime localTime23 = offsetDateTime18.toLocalTime();
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap24 = java.nio.charset.Charset.availableCharsets();
        java.net.URISyntaxException uRISyntaxException27 = new java.net.URISyntaxException("hi!", "");
        boolean boolean28 = strMap24.containsKey((java.lang.Object) "");
        java.util.Set<java.lang.String> strSet29 = strMap24.keySet();
        boolean boolean30 = offsetDateTime18.equals((java.lang.Object) strMap24);
        boolean boolean31 = offsetDateTime6.isBefore(offsetDateTime18);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(offsetDateTime8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-01T00:00:52+00:00:52" + "'", str9, "1970-01-01T00:00:52+00:00:52");
        org.junit.Assert.assertNotNull(offsetDateTime11);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1970-01-01T00:00:52+00:00:52" + "'", str21, "1970-01-01T00:00:52+00:00:52");
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(strMap24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test3034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3034");
        java.io.File file2 = java.io.File.createTempFile("South Korea", "OptionalDouble[-1.0]");
        long long3 = file2.lastModified();
        java.io.File file6 = null;
        java.io.File file7 = java.io.File.createTempFile("hi!", "ISO", file6);
        boolean boolean10 = file7.setWritable(false, false);
        java.net.URI uRI11 = file7.toURI();
        java.io.PrintStream printStream12 = new java.io.PrintStream(file7);
        boolean boolean13 = file2.renameTo(file7);
        boolean boolean14 = file2.canRead();
        org.junit.Assert.assertNotNull(file2);
        org.junit.Assert.assertEquals(file2.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file2.toString(), "/tmp/South Korea7759913623406830842OptionalDouble[-1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1645437764000L + "'", long3 == 1645437764000L);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file7.toString(), "/tmp/hi!8002517080753458791ISO");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(uRI11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test3035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3035");
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions fileOptions1 = builder0.getDefaultInstanceForType();
        com.google.protobuf.MessageLite messageLite2 = builder0.build();
        byte[] byteArray3 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.Message.Builder builder4 = builder0.mergeFrom(byteArray3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(fileOptions1);
        org.junit.Assert.assertNotNull(messageLite2);
    }

    @Test
    public void test3036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3036");
        java.nio.FloatBuffer floatBuffer1 = java.nio.FloatBuffer.allocate(10);
        org.junit.Assert.assertNotNull(floatBuffer1);
    }

    @Test
    public void test3037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3037");
        com.google.javascript.jscomp.PerformanceTracker.Stats stats1 = new com.google.javascript.jscomp.PerformanceTracker.Stats("goog.global");
        stats1.diff = 8;
        int int4 = stats1.runs;
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test3038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3038");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset9);
        java.time.ZonedDateTime zonedDateTime11 = java.time.ZonedDateTime.of(localDateTime5, (java.time.ZoneId) zoneOffset9);
        java.time.temporal.ChronoField chronoField13 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit14 = chronoField13.getBaseUnit();
        java.time.LocalDateTime localDateTime15 = localDateTime5.plus((long) 1970, temporalUnit14);
        java.time.LocalDateTime localDateTime17 = localDateTime5.withHour((int) (short) 1);
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.OffsetDateTime offsetDateTime20 = java.time.OffsetDateTime.of(localDateTime5, zoneOffset19);
        java.time.OffsetTime offsetTime21 = java.time.OffsetTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset19);
        java.text.Format.Field field22 = null;
        java.text.FieldPosition fieldPosition24 = new java.text.FieldPosition(field22, (int) (byte) 1);
        java.text.Format.Field field25 = fieldPosition24.getFieldAttribute();
        boolean boolean26 = offsetTime21.equals((java.lang.Object) field25);
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset30);
        java.time.ZoneOffset zoneOffset35 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime36 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset35);
        java.time.ZonedDateTime zonedDateTime37 = java.time.ZonedDateTime.of(localDateTime31, (java.time.ZoneId) zoneOffset35);
        java.time.temporal.ChronoField chronoField39 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit40 = chronoField39.getBaseUnit();
        java.time.LocalDateTime localDateTime41 = localDateTime31.plus((long) 1970, temporalUnit40);
        java.time.LocalTime localTime42 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localDateTime41);
        java.time.Period period43 = java.time.Period.ZERO;
        java.time.chrono.ChronoPeriod chronoPeriod44 = period43.normalized();
        java.time.Period period46 = period43.plusMonths((long) ' ');
        java.time.LocalDateTime localDateTime47 = localDateTime41.minus((java.time.temporal.TemporalAmount) period43);
        java.lang.String str48 = localDateTime41.toString();
        java.time.ZoneOffset zoneOffset52 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime53 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset52);
        java.time.ZoneOffset zoneOffset57 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime58 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset57);
        java.time.ZonedDateTime zonedDateTime59 = java.time.ZonedDateTime.of(localDateTime53, (java.time.ZoneId) zoneOffset57);
        java.time.temporal.ChronoField chronoField60 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        boolean boolean61 = localDateTime53.isSupported((java.time.temporal.TemporalField) chronoField60);
        java.time.LocalDateTime localDateTime63 = localDateTime53.plusHours((long) 9);
        java.time.temporal.Temporal temporal64 = localDateTime41.adjustInto((java.time.temporal.Temporal) localDateTime53);
        java.time.LocalTime localTime65 = localDateTime41.toLocalTime();
        java.time.ZoneOffset zoneOffset71 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime72 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset71);
        java.time.ZoneOffset zoneOffset76 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime77 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset76);
        java.time.ZonedDateTime zonedDateTime78 = java.time.ZonedDateTime.of(localDateTime72, (java.time.ZoneId) zoneOffset76);
        java.time.chrono.Chronology chronology79 = java.time.chrono.Chronology.from((java.time.temporal.TemporalAccessor) zoneOffset76);
        java.time.LocalDateTime localDateTime80 = java.time.LocalDateTime.ofEpochSecond((long) 6, (int) 'a', zoneOffset76);
        boolean boolean81 = localDateTime41.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime80);
        java.time.ZoneOffset zoneOffset85 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime86 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset85);
        java.time.ZoneOffset zoneOffset90 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime91 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset90);
        java.time.ZonedDateTime zonedDateTime92 = java.time.ZonedDateTime.of(localDateTime86, (java.time.ZoneId) zoneOffset90);
        java.time.temporal.ChronoField chronoField94 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit95 = chronoField94.getBaseUnit();
        java.time.LocalDateTime localDateTime96 = localDateTime86.plus((long) 1970, temporalUnit95);
        boolean boolean97 = temporalUnit95.isDurationEstimated();
        // The following exception was thrown during execution in test generation
        try {
            long long98 = offsetTime21.until((java.time.temporal.Temporal) localDateTime80, temporalUnit95);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unable to obtain OffsetTime from TemporalAccessor: 1970-01-01T00:00:58.000000097 of type java.time.LocalDateTime");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + chronoField13 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField13.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit14 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit14.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(offsetTime21);
        org.junit.Assert.assertNull(field25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(zoneOffset35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(zonedDateTime37);
        org.junit.Assert.assertTrue("'" + chronoField39 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField39.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit40 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit40.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(chronoPeriod44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1970-03-24T02:02:32" + "'", str48, "1970-03-24T02:02:32");
        org.junit.Assert.assertNotNull(zoneOffset52);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(zoneOffset57);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(zonedDateTime59);
        org.junit.Assert.assertTrue("'" + chronoField60 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField60.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(temporal64);
        org.junit.Assert.assertNotNull(localTime65);
        org.junit.Assert.assertNotNull(zoneOffset71);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(zoneOffset76);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(zonedDateTime78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(zoneOffset85);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(zoneOffset90);
        org.junit.Assert.assertNotNull(localDateTime91);
        org.junit.Assert.assertNotNull(zonedDateTime92);
        org.junit.Assert.assertTrue("'" + chronoField94 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField94.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit95 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit95.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test3039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3039");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean4 = node3.isStringKey();
        boolean boolean5 = node3.isThrow();
        boolean boolean6 = node3.isVarArgs();
        boolean boolean7 = node3.isHook();
        com.google.javascript.rhino.Node node8 = node3.cloneNode();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (byte) -1);
        com.google.javascript.rhino.Node node11 = node8.useSourceInfoFromForTree(node10);
        boolean boolean12 = node8.isNumber();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test3040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3040");
        java.io.PrintStream printStream0 = null;
        com.google.javascript.jscomp.Compiler compiler1 = new com.google.javascript.jscomp.Compiler(printStream0);
        com.google.javascript.jscomp.SourceMap sourceMap2 = compiler1.getSourceMap();
        java.util.stream.LongStream longStream4 = java.util.stream.LongStream.of((long) (-1));
        com.google.common.collect.ImmutableMap<com.google.javascript.jscomp.Compiler, java.util.stream.LongStream> compilerMap5 = com.google.common.collect.ImmutableMap.of(compiler1, longStream4);
        com.google.javascript.jscomp.Scope scope6 = compiler1.getTopScope();
        org.junit.Assert.assertNull(sourceMap2);
        org.junit.Assert.assertNotNull(longStream4);
        org.junit.Assert.assertNotNull(compilerMap5);
        org.junit.Assert.assertNull(scope6);
    }

    @Test
    public void test3041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3041");
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.Builder builder0 = com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.newBuilder();
        java.io.InputStream inputStream1 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite2 = null;
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.Builder builder3 = builder0.mergeFrom(inputStream1, extensionRegistryLite2);
        java.io.InputStream inputStream4 = null;
        com.google.protobuf.ByteString byteString5 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite6 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions7 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(byteString5, extensionRegistryLite6);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder8 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label9 = builder8.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto10 = builder8.buildPartial();
        int int11 = fieldDescriptorProto10.getSerializedSize();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder12 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto10);
        java.io.InputStream inputStream13 = null;
        java.io.InputStream inputStream14 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite15 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location16 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream14, extensionRegistryLite15);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder17 = builder12.mergeFrom(inputStream13, extensionRegistryLite15);
        com.google.javascript.jscomp.FunctionInformationMap functionInformationMap18 = com.google.javascript.jscomp.FunctionInformationMap.parseFrom(byteString5, extensionRegistryLite15);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean19 = builder3.mergeDelimitedFrom(inputStream4, extensionRegistryLite15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(byteString5);
        org.junit.Assert.assertNotNull(enumOptions7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + label9 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label9.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(extensionRegistryLite15);
        org.junit.Assert.assertNotNull(location16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(functionInformationMap18);
    }

    @Test
    public void test3042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3042");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        boolean boolean1 = localDate0.isLeapYear();
        java.time.chrono.Era era2 = localDate0.getEra();
        java.nio.CharBuffer charBuffer4 = java.nio.CharBuffer.allocate((int) ' ');
        boolean boolean5 = charBuffer4.isDirect();
        java.nio.CharBuffer charBuffer7 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer9 = charBuffer7.put('a');
        char[] charArray11 = new char[] { '4' };
        java.nio.CharBuffer charBuffer12 = charBuffer9.get(charArray11);
        java.nio.CharBuffer charBuffer13 = charBuffer9.compact();
        java.nio.CharBuffer charBuffer15 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer17 = charBuffer15.put('a');
        java.nio.CharBuffer charBuffer19 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer21 = charBuffer19.put('a');
        char[] charArray23 = new char[] { '4' };
        java.nio.CharBuffer charBuffer24 = charBuffer21.get(charArray23);
        java.nio.CharBuffer charBuffer25 = charBuffer21.compact();
        com.google.common.collect.ImmutableSet<java.lang.Appendable> appendableSet26 = com.google.common.collect.ImmutableSet.of((java.lang.Appendable) charBuffer4, (java.lang.Appendable) charBuffer9, (java.lang.Appendable) charBuffer15, (java.lang.Appendable) charBuffer25);
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset30);
        int int32 = localDateTime31.getYear();
        java.time.Instant instant33 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset37);
        java.time.OffsetDateTime offsetDateTime39 = java.time.OffsetDateTime.ofInstant(instant33, (java.time.ZoneId) zoneOffset37);
        java.time.Instant instant40 = localDateTime31.toInstant(zoneOffset37);
        boolean boolean41 = appendableSet26.equals((java.lang.Object) zoneOffset37);
        java.lang.Object[] objArray42 = appendableSet26.toArray();
        java.util.concurrent.TimeUnit timeUnit43 = java.util.concurrent.TimeUnit.HOURS;
        boolean boolean44 = appendableSet26.contains((java.lang.Object) timeUnit43);
        com.google.common.collect.ImmutableList<java.lang.Appendable> appendableList45 = appendableSet26.asList();
        java.time.ZoneOffset zoneOffset49 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime50 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset49);
        int int51 = localDateTime50.getYear();
        java.time.Instant instant52 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset56 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime57 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset56);
        java.time.OffsetDateTime offsetDateTime58 = java.time.OffsetDateTime.ofInstant(instant52, (java.time.ZoneId) zoneOffset56);
        java.time.Instant instant59 = localDateTime50.toInstant(zoneOffset56);
        int int60 = appendableList45.lastIndexOf((java.lang.Object) instant59);
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.Temporal temporal61 = localDate0.adjustInto((java.time.temporal.Temporal) instant59);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: EpochDay");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + era2 + "' != '" + java.time.chrono.IsoEra.CE + "'", era2.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertNotNull(charBuffer4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charBuffer7);
        org.junit.Assert.assertNotNull(charBuffer9);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer12);
        org.junit.Assert.assertNotNull(charBuffer13);
        org.junit.Assert.assertNotNull(charBuffer15);
        org.junit.Assert.assertNotNull(charBuffer17);
        org.junit.Assert.assertNotNull(charBuffer19);
        org.junit.Assert.assertNotNull(charBuffer21);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer24);
        org.junit.Assert.assertNotNull(charBuffer25);
        org.junit.Assert.assertNotNull(appendableSet26);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1970 + "'", int32 == 1970);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(offsetDateTime39);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000, \000\000, \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000, \000\000, \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000]");
        org.junit.Assert.assertNotNull(timeUnit43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(appendableList45);
        org.junit.Assert.assertNotNull(zoneOffset49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1970 + "'", int51 == 1970);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertNotNull(zoneOffset56);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(offsetDateTime58);
        org.junit.Assert.assertNotNull(instant59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
    }

    @Test
    public void test3043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3043");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto1 = com.google.protobuf.DescriptorProtos.DescriptorProto.parseFrom(inputStream0);
        org.junit.Assert.assertNotNull(descriptorProto1);
    }

    @Test
    public void test3044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3044");
        com.google.protobuf.Descriptors.EnumDescriptor enumDescriptor0 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type.getDescriptor();
        com.google.protobuf.Descriptors.EnumValueDescriptor enumValueDescriptor2 = enumDescriptor0.findValueByNumber(50);
        org.junit.Assert.assertNotNull(enumDescriptor0);
        org.junit.Assert.assertNull(enumValueDescriptor2);
    }

    @Test
    public void test3045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3045");
        java.time.zone.ZoneOffsetTransitionRule.TimeDefinition timeDefinition0 = java.time.zone.ZoneOffsetTransitionRule.TimeDefinition.WALL;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        int int6 = localDateTime5.getYear();
        java.time.LocalDate localDate7 = localDateTime5.toLocalDate();
        int int8 = localDateTime5.getNano();
        java.time.Instant instant9 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset13);
        java.time.OffsetDateTime offsetDateTime15 = java.time.OffsetDateTime.ofInstant(instant9, (java.time.ZoneId) zoneOffset13);
        java.time.OffsetDateTime offsetDateTime17 = offsetDateTime15.minusDays((long) (short) 100);
        java.lang.String str18 = offsetDateTime15.toString();
        java.time.ZoneOffset zoneOffset19 = offsetDateTime15.getOffset();
        java.lang.String str20 = zoneOffset19.toString();
        java.time.Instant instant21 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime26 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset25);
        java.time.OffsetDateTime offsetDateTime27 = java.time.OffsetDateTime.ofInstant(instant21, (java.time.ZoneId) zoneOffset25);
        java.time.OffsetDateTime offsetDateTime29 = offsetDateTime27.minusDays((long) (short) 100);
        java.lang.String str30 = offsetDateTime27.toString();
        java.time.ZoneOffset zoneOffset31 = offsetDateTime27.getOffset();
        java.lang.String str32 = zoneOffset31.toString();
        java.time.LocalDateTime localDateTime33 = timeDefinition0.createDateTime(localDateTime5, zoneOffset19, zoneOffset31);
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset37);
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime43 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset42);
        java.time.ZonedDateTime zonedDateTime44 = java.time.ZonedDateTime.of(localDateTime38, (java.time.ZoneId) zoneOffset42);
        java.time.temporal.ChronoField chronoField46 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit47 = chronoField46.getBaseUnit();
        java.time.LocalDateTime localDateTime48 = localDateTime38.plus((long) 1970, temporalUnit47);
        java.time.LocalTime localTime49 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localDateTime48);
        java.time.Period period50 = java.time.Period.ZERO;
        java.time.chrono.ChronoPeriod chronoPeriod51 = period50.normalized();
        java.time.Period period53 = period50.plusMonths((long) ' ');
        java.time.LocalDateTime localDateTime54 = localDateTime48.minus((java.time.temporal.TemporalAmount) period50);
        java.time.Period period56 = period50.withMonths(999);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime57 = localDateTime33.plus((java.time.temporal.TemporalAmount) period56);
        java.time.Period period59 = period56.plusDays(10L);
        java.time.Period period61 = period59.minusDays((-64800L));
        org.junit.Assert.assertTrue("'" + timeDefinition0 + "' != '" + java.time.zone.ZoneOffsetTransitionRule.TimeDefinition.WALL + "'", timeDefinition0.equals(java.time.zone.ZoneOffsetTransitionRule.TimeDefinition.WALL));
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertNotNull(offsetDateTime17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1970-01-01T00:00:52+00:00:52" + "'", str18, "1970-01-01T00:00:52+00:00:52");
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:52" + "'", str20, "+00:00:52");
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertNotNull(offsetDateTime29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1970-01-01T00:00:52+00:00:52" + "'", str30, "1970-01-01T00:00:52+00:00:52");
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00:52" + "'", str32, "+00:00:52");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(zonedDateTime44);
        org.junit.Assert.assertTrue("'" + chronoField46 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField46.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit47 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit47.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(chronoPeriod51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(period61);
    }

    @Test
    public void test3046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3046");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label4 = builder3.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = builder0.addExtension(builder3);
        com.google.protobuf.Descriptors.Descriptor descriptor6 = builder5.getDescriptorForType();
        com.google.protobuf.Descriptors.FileDescriptor fileDescriptor7 = descriptor6.getFile();
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor9 = fileDescriptor7.findExtensionByName("{1713661408}");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + label4 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label4.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(descriptor6);
        org.junit.Assert.assertNotNull(fileDescriptor7);
        org.junit.Assert.assertNull(fieldDescriptor9);
    }

    @Test
    public void test3047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3047");
        java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite> priorityMap0 = new java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite>();
        java.lang.Object obj1 = priorityMap0.clone();
        java.util.Set<java.util.Map.Entry<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite>> priorityEntrySet2 = priorityMap0.entrySet();
        priorityMap0.clear();
        java.util.Enumeration<com.google.protobuf.MessageLite> messageLiteEnumeration4 = priorityMap0.elements();
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "{}");
        org.junit.Assert.assertNotNull(priorityEntrySet2);
        org.junit.Assert.assertNotNull(messageLiteEnumeration4);
    }

    @Test
    public void test3048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3048");
        com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder builder0 = com.google.javascript.jscomp.FunctionInformationMap.Entry.newBuilder();
        boolean boolean1 = builder0.hasSourceName();
        com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder builder2 = com.google.javascript.jscomp.FunctionInformationMap.Entry.newBuilder();
        boolean boolean3 = builder2.hasSourceName();
        com.google.javascript.jscomp.FunctionInformationMap.Entry entry4 = builder2.getDefaultInstanceForType();
        com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder builder5 = builder0.mergeFrom(entry4);
        com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder builder6 = com.google.javascript.jscomp.FunctionInformationMap.Entry.newBuilder(entry4);
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto7 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.getDefaultInstance();
        boolean boolean8 = serviceDescriptorProto7.hasOptions();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder9 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.newBuilder(serviceDescriptorProto7);
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto10 = builder9.buildPartial();
        com.google.protobuf.DescriptorProtos.ServiceOptions serviceOptions11 = builder9.getOptions();
        com.google.protobuf.DescriptorProtos.ServiceOptions.Builder builder12 = serviceOptions11.toBuilder();
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto13 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.getDefaultInstance();
        boolean boolean14 = methodDescriptorProto13.hasOutputType();
        byte[] byteArray15 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite16 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions17 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray15, extensionRegistryLite16);
        com.google.protobuf.CodedOutputStream codedOutputStream20 = com.google.protobuf.CodedOutputStream.newInstance(byteArray15, (int) (short) 0, 1);
        methodDescriptorProto13.writeTo(codedOutputStream20);
        serviceOptions11.writeTo(codedOutputStream20);
        entry4.writeTo(codedOutputStream20);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(entry4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(serviceDescriptorProto7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(serviceDescriptorProto10);
        org.junit.Assert.assertNotNull(serviceOptions11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(methodDescriptorProto13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(methodOptions17);
        org.junit.Assert.assertNotNull(codedOutputStream20);
    }

    @Test
    public void test3049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3049");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) ' ');
        boolean boolean2 = charBuffer1.isDirect();
        java.nio.CharBuffer charBuffer4 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer6 = charBuffer4.put('a');
        char[] charArray8 = new char[] { '4' };
        java.nio.CharBuffer charBuffer9 = charBuffer6.get(charArray8);
        java.nio.CharBuffer charBuffer10 = charBuffer6.compact();
        java.nio.CharBuffer charBuffer12 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer14 = charBuffer12.put('a');
        java.nio.CharBuffer charBuffer16 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer18 = charBuffer16.put('a');
        char[] charArray20 = new char[] { '4' };
        java.nio.CharBuffer charBuffer21 = charBuffer18.get(charArray20);
        java.nio.CharBuffer charBuffer22 = charBuffer18.compact();
        com.google.common.collect.ImmutableSet<java.lang.Appendable> appendableSet23 = com.google.common.collect.ImmutableSet.of((java.lang.Appendable) charBuffer1, (java.lang.Appendable) charBuffer6, (java.lang.Appendable) charBuffer12, (java.lang.Appendable) charBuffer22);
        java.time.ZoneOffset zoneOffset27 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset27);
        int int29 = localDateTime28.getYear();
        java.time.Instant instant30 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset34);
        java.time.OffsetDateTime offsetDateTime36 = java.time.OffsetDateTime.ofInstant(instant30, (java.time.ZoneId) zoneOffset34);
        java.time.Instant instant37 = localDateTime28.toInstant(zoneOffset34);
        boolean boolean38 = appendableSet23.equals((java.lang.Object) zoneOffset34);
        java.lang.Object[] objArray39 = appendableSet23.toArray();
        java.util.concurrent.TimeUnit timeUnit40 = java.util.concurrent.TimeUnit.HOURS;
        boolean boolean41 = appendableSet23.contains((java.lang.Object) timeUnit40);
        com.google.common.collect.ImmutableList<java.lang.Appendable> appendableList42 = appendableSet23.asList();
        java.time.ZoneOffset zoneOffset46 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime47 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset46);
        int int48 = localDateTime47.getYear();
        java.time.Instant instant49 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset53 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime54 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset53);
        java.time.OffsetDateTime offsetDateTime55 = java.time.OffsetDateTime.ofInstant(instant49, (java.time.ZoneId) zoneOffset53);
        java.time.Instant instant56 = localDateTime47.toInstant(zoneOffset53);
        int int57 = appendableList42.lastIndexOf((java.lang.Object) instant56);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean62 = node61.isVar();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean67 = node66.isStringKey();
        boolean boolean68 = node66.isThrow();
        boolean boolean69 = node66.isVarArgs();
        boolean boolean70 = node66.isHook();
        com.google.javascript.rhino.Node node71 = node66.cloneNode();
        com.google.javascript.rhino.Node node72 = node61.useSourceInfoIfMissingFromForTree(node71);
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean77 = node76.isFromExterns();
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean82 = node81.isFromExterns();
        java.lang.String str83 = node81.toString();
        com.google.javascript.rhino.Node node84 = node76.copyInformationFrom(node81);
        int int85 = node76.getLineno();
        boolean boolean86 = node76.isLabel();
        java.lang.String str87 = node76.getSourceFileName();
        boolean boolean88 = node76.isDec();
        com.google.javascript.rhino.Node node89 = node71.useSourceInfoFrom(node76);
        boolean boolean90 = appendableList42.equals((java.lang.Object) node89);
        com.google.common.collect.ImmutableList<java.lang.Appendable> appendableList91 = appendableList42.asList();
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charBuffer4);
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer9);
        org.junit.Assert.assertNotNull(charBuffer10);
        org.junit.Assert.assertNotNull(charBuffer12);
        org.junit.Assert.assertNotNull(charBuffer14);
        org.junit.Assert.assertNotNull(charBuffer16);
        org.junit.Assert.assertNotNull(charBuffer18);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer21);
        org.junit.Assert.assertNotNull(charBuffer22);
        org.junit.Assert.assertNotNull(appendableSet23);
        org.junit.Assert.assertNotNull(zoneOffset27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1970 + "'", int29 == 1970);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(offsetDateTime36);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000, \000\000, \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000, \000\000, \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000]");
        org.junit.Assert.assertNotNull(timeUnit40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(appendableList42);
        org.junit.Assert.assertNotNull(zoneOffset46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1970 + "'", int48 == 1970);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertNotNull(zoneOffset53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(offsetDateTime55);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "NUMBER 52.0 0" + "'", str83, "NUMBER 52.0 0");
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(appendableList91);
    }

    @Test
    public void test3050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3050");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.nio.file.attribute.FileTime fileTime1 = java.nio.file.attribute.FileTime.from(instant0);
        java.time.Instant instant3 = java.time.Instant.ofEpochSecond((long) (-1));
        java.time.Instant instant5 = instant3.plusMillis((long) (byte) -1);
        boolean boolean6 = instant0.isBefore(instant5);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime13 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset12);
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset17);
        java.time.ZonedDateTime zonedDateTime19 = java.time.ZonedDateTime.of(localDateTime13, (java.time.ZoneId) zoneOffset17);
        java.time.chrono.Chronology chronology20 = java.time.chrono.Chronology.from((java.time.temporal.TemporalAccessor) zoneOffset17);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.ofEpochSecond((long) 6, (int) 'a', zoneOffset17);
        java.time.OffsetTime offsetTime22 = java.time.OffsetTime.ofInstant(instant5, (java.time.ZoneId) zoneOffset17);
        java.time.ZoneOffset zoneOffset23 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int24 = zoneOffset17.compareTo(zoneOffset23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(fileTime1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(zonedDateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(offsetTime22);
    }

    @Test
    public void test3051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3051");
        java.io.File file2 = null;
        java.io.File file3 = java.io.File.createTempFile("hi!", "ISO", file2);
        boolean boolean6 = file3.setWritable(false, false);
        java.net.URI uRI7 = file3.toURI();
        java.io.PrintStream printStream8 = new java.io.PrintStream(file3);
        boolean boolean10 = file3.setReadable(true);
        boolean boolean12 = file3.setExecutable(false);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file3.toString(), "/tmp/hi!1563414815348723959ISO");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(uRI7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test3052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3052");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        org.junit.Assert.assertNotNull(locale0);
// flaky:         org.junit.Assert.assertEquals(locale0.toString(), "ko");
    }

    @Test
    public void test3053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3053");
        int[] intArray4 = new int[] { 16, ':', 43, (short) 100 };
        java.util.stream.IntStream intStream5 = java.util.stream.IntStream.of(intArray4);
        java.util.OptionalInt optionalInt6 = intStream5.findAny();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream8 = intStream5.skip((long) 29);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[16, 58, 43, 100]");
        org.junit.Assert.assertNotNull(intStream5);
        org.junit.Assert.assertNotNull(optionalInt6);
    }

    @Test
    public void test3054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3054");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet5 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet5, strArray4);
        boolean boolean7 = strSet5.isEmpty();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocate(100);
        boolean boolean10 = strSet5.equals((java.lang.Object) byteBuffer9);
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        boolean boolean17 = strSet15.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream18 = strSet15.stream();
        boolean boolean19 = strSet5.retainAll((java.util.Collection<java.lang.String>) strSet15);
        compilerOptions0.setExtraAnnotationNames((java.util.Set<java.lang.String>) strSet15);
        compilerOptions0.setComputeFunctionSideEffects(false);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strStream18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test3055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3055");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto1 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.parseFrom(inputStream0);
        boolean boolean2 = methodDescriptorProto1.hasInputType();
        org.junit.Assert.assertNotNull(methodDescriptorProto1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test3056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3056");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        com.google.javascript.rhino.jstype.ObjectType objectType6 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType7 = jSTypeRegistry5.createObjectType(objectType6);
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.jstype.ObjectType objectType11 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType12 = jSTypeRegistry10.createObjectType(objectType11);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair13 = objectType7.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType12);
        java.lang.String str14 = objectType12.getDisplayName();
        java.util.Collection<com.google.javascript.rhino.jstype.FunctionType> functionTypeCollection15 = jSTypeRegistry2.getDirectImplementors(objectType12);
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable17 = jSTypeRegistry2.getEachReferenceTypeWithProperty("+00:00:52");
        jSTypeRegistry2.resetForTypeCheck();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean24 = node23.isStringKey();
        boolean boolean25 = node23.isThrow();
        boolean boolean26 = node23.isVarArgs();
        boolean boolean27 = node23.isHook();
        com.google.javascript.rhino.Node node28 = node23.cloneNode();
        com.google.javascript.rhino.ErrorReporter errorReporter29 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter29, false);
        com.google.javascript.rhino.ErrorReporter errorReporter32 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter32, false);
        com.google.javascript.rhino.jstype.ObjectType objectType35 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType36 = jSTypeRegistry34.createObjectType(objectType35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        com.google.javascript.rhino.jstype.ObjectType objectType40 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType41 = jSTypeRegistry39.createObjectType(objectType40);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair42 = objectType36.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType41);
        java.lang.String str43 = objectType41.getDisplayName();
        java.util.Collection<com.google.javascript.rhino.jstype.FunctionType> functionTypeCollection44 = jSTypeRegistry31.getDirectImplementors(objectType41);
        boolean boolean45 = objectType41.isAllType();
        com.google.javascript.rhino.jstype.ObjectType objectType46 = jSTypeRegistry2.createObjectType("+00:00:52", node28, objectType41);
        com.google.javascript.rhino.ErrorReporter errorReporter47 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry49 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter47, false);
        com.google.javascript.rhino.jstype.ObjectType objectType50 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType51 = jSTypeRegistry49.createObjectType(objectType50);
        jSTypeRegistry49.forwardDeclareType("");
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        com.google.javascript.rhino.jstype.ObjectType objectType57 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType58 = jSTypeRegistry56.createObjectType(objectType57);
        com.google.javascript.rhino.ErrorReporter errorReporter59 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry61 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter59, false);
        com.google.javascript.rhino.jstype.ObjectType objectType62 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType63 = jSTypeRegistry61.createObjectType(objectType62);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair64 = objectType58.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType63);
        com.google.javascript.rhino.Node node65 = objectType58.getRootNode();
        com.google.javascript.rhino.ErrorReporter errorReporter66 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry68 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter66, false);
        com.google.javascript.rhino.jstype.ObjectType objectType69 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType70 = jSTypeRegistry68.createObjectType(objectType69);
        com.google.javascript.rhino.ErrorReporter errorReporter71 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry73 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter71, false);
        com.google.javascript.rhino.jstype.ObjectType objectType74 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType75 = jSTypeRegistry73.createObjectType(objectType74);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair76 = objectType70.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType75);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue77 = objectType58.testForEquality((com.google.javascript.rhino.jstype.JSType) objectType70);
        com.google.javascript.rhino.jstype.JSType jSType78 = jSTypeRegistry49.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType58);
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString("java.nio.ByteBufferAsDoubleBufferB[pos=0 lim=12 cap=12]");
        com.google.javascript.rhino.jstype.FunctionType functionType81 = jSTypeRegistry2.createFunctionType((com.google.javascript.rhino.jstype.JSType) objectType58, node80);
        com.google.javascript.rhino.jstype.ObjectType objectType82 = functionType81.getPrototype();
        functionType81.clearCachedValues();
        org.junit.Assert.assertNotNull(objectType7);
        org.junit.Assert.assertNotNull(objectType12);
        org.junit.Assert.assertNotNull(typePair13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(functionTypeCollection15);
        org.junit.Assert.assertNotNull(objectTypeIterable17);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(objectType36);
        org.junit.Assert.assertNotNull(objectType41);
        org.junit.Assert.assertNotNull(typePair42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(functionTypeCollection44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(objectType46);
        org.junit.Assert.assertNotNull(objectType51);
        org.junit.Assert.assertNotNull(objectType58);
        org.junit.Assert.assertNotNull(objectType63);
        org.junit.Assert.assertNotNull(typePair64);
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertNotNull(objectType70);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertNotNull(typePair76);
        org.junit.Assert.assertNotNull(ternaryValue77);
        org.junit.Assert.assertNotNull(jSType78);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(functionType81);
        org.junit.Assert.assertNotNull(objectType82);
    }

    @Test
    public void test3057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3057");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset10);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.of(localDateTime11, (java.time.ZoneId) zoneOffset15);
        java.time.Clock clock18 = java.time.Clock.fixed(instant0, (java.time.ZoneId) zoneOffset15);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.now(clock18);
        java.time.LocalDate localDate20 = java.time.LocalDate.now(clock18);
        com.google.protobuf.Descriptors.Descriptor descriptor21 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto22 = descriptor21.toProto();
        boolean boolean23 = descriptorProto22.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList24 = descriptorProto22.getNestedTypeList();
        int int25 = descriptorProto22.getExtensionRangeCount();
        boolean boolean26 = localDate20.equals((java.lang.Object) descriptorProto22);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder27 = descriptorProto22.newBuilderForType();
        java.util.List<com.google.protobuf.DescriptorProtos.FieldDescriptorProto> fieldDescriptorProtoList28 = builder27.getExtensionList();
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder29 = builder27.addNestedTypeBuilder();
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder30 = builder27.clearExtension();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder31 = builder30.addExtensionBuilder();
        int int32 = builder31.getNumber();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(clock18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(descriptor21);
        org.junit.Assert.assertNotNull(descriptorProto22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(fieldDescriptorProtoList28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test3058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3058");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy5 = null;
        compilerOptions0.variableRenaming = variableRenamingPolicy5;
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode7 = compilerOptions0.getTracerMode();
        compilerOptions0.setCrossModuleMethodMotion(false);
        boolean boolean10 = compilerOptions0.disambiguateProperties;
        compilerOptions0.setPropertyAffinity(true);
        org.junit.Assert.assertNotNull(errorFormat3);
        org.junit.Assert.assertTrue("'" + tracerMode7 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode7.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test3059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3059");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType4 = jSTypeRegistry2.createObjectType(objectType3);
        jSTypeRegistry2.forwardDeclareType("");
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7, false);
        com.google.javascript.rhino.jstype.ObjectType objectType10 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType11 = jSTypeRegistry9.createObjectType(objectType10);
        com.google.javascript.rhino.ErrorReporter errorReporter12 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter12, false);
        com.google.javascript.rhino.jstype.ObjectType objectType15 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType16 = jSTypeRegistry14.createObjectType(objectType15);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair17 = objectType11.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType16);
        boolean boolean18 = objectType11.isInterface();
        com.google.javascript.rhino.jstype.JSType jSType23 = jSTypeRegistry2.getType((com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>) objectType11, "NUMBER 52.0 0", "OffsetSeconds", 256, (int) (short) 10);
        com.google.javascript.rhino.jstype.UnionType unionType24 = jSType23.toMaybeUnionType();
        org.junit.Assert.assertNotNull(objectType4);
        org.junit.Assert.assertNotNull(objectType11);
        org.junit.Assert.assertNotNull(objectType16);
        org.junit.Assert.assertNotNull(typePair17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jSType23);
        org.junit.Assert.assertNull(unionType24);
    }

    @Test
    public void test3060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3060");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        int int5 = localDateTime4.getYear();
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset9);
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset14);
        java.time.ZonedDateTime zonedDateTime16 = java.time.ZonedDateTime.of(localDateTime10, (java.time.ZoneId) zoneOffset14);
        boolean boolean17 = localDateTime4.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime10);
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset21);
        int int23 = localDateTime22.getYear();
        java.time.LocalDate localDate24 = localDateTime22.toLocalDate();
        int int25 = localDateTime4.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime22);
        java.time.LocalDateTime localDateTime27 = localDateTime22.plusWeeks(0L);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zonedDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1970 + "'", int23 == 1970);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(localDateTime27);
    }

    @Test
    public void test3061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3061");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType4 = jSTypeRegistry2.createObjectType(objectType3);
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.jstype.ObjectType objectType8 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry7.createObjectType(objectType8);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair10 = objectType4.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType9);
        com.google.javascript.rhino.Node node11 = objectType4.getRootNode();
        com.google.javascript.rhino.ErrorReporter errorReporter12 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter12, false);
        com.google.javascript.rhino.jstype.ObjectType objectType15 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType16 = jSTypeRegistry14.createObjectType(objectType15);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        com.google.javascript.rhino.jstype.ObjectType objectType20 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType21 = jSTypeRegistry19.createObjectType(objectType20);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair22 = objectType16.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType21);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue23 = objectType4.testForEquality((com.google.javascript.rhino.jstype.JSType) objectType16);
        com.google.javascript.rhino.jstype.JSType jSType24 = objectType16.getIndexType();
        com.google.javascript.rhino.jstype.JSType jSType25 = objectType16.getTypeOfThis();
        org.junit.Assert.assertNotNull(objectType4);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertNotNull(typePair10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(objectType16);
        org.junit.Assert.assertNotNull(objectType21);
        org.junit.Assert.assertNotNull(typePair22);
        org.junit.Assert.assertNotNull(ternaryValue23);
        org.junit.Assert.assertNull(jSType24);
        org.junit.Assert.assertNull(jSType25);
    }

    @Test
    public void test3062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3062");
        com.google.protobuf.Descriptors.Descriptor descriptor0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto1 = descriptor0.toProto();
        boolean boolean2 = descriptorProto1.isInitialized();
        com.google.protobuf.DescriptorProtos.MessageOptions messageOptions3 = descriptorProto1.getOptions();
        com.google.protobuf.DescriptorProtos.MessageOptions.Builder builder4 = messageOptions3.newBuilderForType();
        com.google.protobuf.Message message5 = builder4.buildPartial();
        com.google.protobuf.DescriptorProtos.MessageOptions.Builder builder6 = builder4.clear();
        com.google.protobuf.DescriptorProtos.MessageOptions.Builder builder8 = builder6.setNoStandardDescriptorAccessor(true);
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor9 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean10 = builder6.hasField(fieldDescriptor9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptor0);
        org.junit.Assert.assertNotNull(descriptorProto1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(messageOptions3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(message5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test3063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3063");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.lang.String str1 = charset0.displayName();
        java.lang.String str2 = charset0.toString();
        java.lang.String str3 = charset0.toString();
        boolean boolean4 = charset0.isRegistered();
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "US-ASCII" + "'", str1, "US-ASCII");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "US-ASCII" + "'", str2, "US-ASCII");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "US-ASCII" + "'", str3, "US-ASCII");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test3064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3064");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.optimizeCalls = false;
        compilerOptions0.preferLineBreakAtEndOfFile = false;
        boolean boolean5 = compilerOptions0.markNoSideEffectCalls;
        boolean boolean6 = compilerOptions0.labelRenaming;
        compilerOptions0.checkSymbols = true;
        boolean boolean9 = compilerOptions0.printInputDelimiter;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test3065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3065");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy5 = null;
        compilerOptions0.variableRenaming = variableRenamingPolicy5;
        compilerOptions0.setSpecializeInitialModule(true);
        compilerOptions0.setAliasKeywords(true);
        boolean boolean11 = compilerOptions0.isRemoveUnusedClassProperties();
        java.util.Map<java.lang.String, java.lang.Object> strMap12 = null;
        compilerOptions0.setTweakReplacements(strMap12);
        com.google.javascript.jscomp.SourceMap.Format format14 = compilerOptions0.sourceMapFormat;
        compilerOptions0.setFoldConstants(false);
        org.junit.Assert.assertNotNull(errorFormat3);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(format14);
    }

    @Test
    public void test3066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3066");
        byte[] byteArray0 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions2 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray0, extensionRegistryLite1);
        com.google.protobuf.CodedOutputStream codedOutputStream5 = com.google.protobuf.CodedOutputStream.newInstance(byteArray0, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite6 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto7 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray0, extensionRegistryLite6);
        boolean boolean8 = fileDescriptorProto7.hasOptions();
        com.google.protobuf.DescriptorProtos.FileOptionsOrBuilder fileOptionsOrBuilder9 = fileDescriptorProto7.getOptionsOrBuilder();
        boolean boolean10 = fileDescriptorProto7.hasSourceCodeInfo();
        com.google.protobuf.DescriptorProtos.FileOptions fileOptions11 = fileDescriptorProto7.getOptions();
        int int12 = fileDescriptorProto7.getExtensionCount();
        int int13 = fileDescriptorProto7.getMessageTypeCount();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(methodOptions2);
        org.junit.Assert.assertNotNull(codedOutputStream5);
        org.junit.Assert.assertNotNull(fileDescriptorProto7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(fileOptionsOrBuilder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(fileOptions11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test3067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3067");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean4 = node3.isStringKey();
        boolean boolean5 = node3.hasChildren();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test3068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3068");
        com.google.javascript.jscomp.JSModule jSModule1 = new com.google.javascript.jscomp.JSModule("/");
        jSModule1.removeAll();
    }

    @Test
    public void test3069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3069");
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output2 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream4 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output2, (int) 'a');
        byte[] byteArray5 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite6 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions7 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray5, extensionRegistryLite6);
        output2.write(byteArray5);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder9 = builder0.mergeFrom(byteArray5);
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions10 = builder0.buildPartial();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder11 = builder0.addUninterpretedOptionBuilder();
        byte[] byteArray12 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite13 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions14 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray12, extensionRegistryLite13);
        com.google.protobuf.CodedOutputStream codedOutputStream17 = com.google.protobuf.CodedOutputStream.newInstance(byteArray12, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite18 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto19 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray12, extensionRegistryLite18);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite20 = null;
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto21 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.parseFrom(byteArray12, extensionRegistryLite20);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder22 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label23 = builder22.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto24 = builder22.buildPartial();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder25 = fieldDescriptorProto24.newBuilderForType();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder26 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto24);
        java.io.File file29 = null;
        java.io.File file30 = java.io.File.createTempFile("hi!", "ISO", file29);
        boolean boolean33 = file30.setWritable(false, false);
        java.net.URI uRI34 = file30.toURI();
        java.io.PrintStream printStream35 = new java.io.PrintStream(file30);
        printStream35.print((int) (byte) 0);
        printStream35.print(10.0d);
        printStream35.close();
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        boolean boolean47 = strSet45.isEmpty();
        java.nio.ByteBuffer byteBuffer49 = java.nio.ByteBuffer.allocate(100);
        boolean boolean50 = strSet45.equals((java.lang.Object) byteBuffer49);
        java.nio.IntBuffer intBuffer51 = byteBuffer49.asIntBuffer();
        double double52 = byteBuffer49.getDouble();
        java.nio.ByteBuffer byteBuffer55 = byteBuffer49.put((int) (short) 1, (byte) 1);
        byte[] byteArray56 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite57 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions58 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray56, extensionRegistryLite57);
        com.google.protobuf.CodedOutputStream codedOutputStream61 = com.google.protobuf.CodedOutputStream.newInstance(byteArray56, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite62 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto63 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray56, extensionRegistryLite62);
        com.google.protobuf.CodedOutputStream codedOutputStream64 = com.google.protobuf.CodedOutputStream.newInstance(byteArray56);
        java.nio.ByteBuffer byteBuffer65 = byteBuffer49.get(byteArray56);
        printStream35.write(byteArray56, (int) '/', (int) (byte) 1);
        java.io.InputStream inputStream69 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite70 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location71 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream69, extensionRegistryLite70);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder72 = builder26.mergeFrom(byteArray56, extensionRegistryLite70);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder73 = builder0.mergeFrom(byteArray12, extensionRegistryLite70);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder74 = builder73.clone();
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions75 = builder74.buildPartial();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(output2);
        org.junit.Assert.assertNotNull(codedOutputStream4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(methodOptions7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(methodOptions10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(methodOptions14);
        org.junit.Assert.assertNotNull(codedOutputStream17);
        org.junit.Assert.assertNotNull(fileDescriptorProto19);
        org.junit.Assert.assertNotNull(serviceDescriptorProto21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + label23 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label23.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(file30);
        org.junit.Assert.assertEquals(file30.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file30.toString(), "/tmp/hi!4426501900675715535ISO");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(uRI34);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intBuffer51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertNotNull(methodOptions58);
        org.junit.Assert.assertNotNull(codedOutputStream61);
        org.junit.Assert.assertNotNull(fileDescriptorProto63);
        org.junit.Assert.assertNotNull(codedOutputStream64);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(extensionRegistryLite70);
        org.junit.Assert.assertNotNull(location71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(methodOptions75);
    }

    @Test
    public void test3070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3070");
        short[] shortArray1 = new short[] { (byte) 1 };
        java.nio.ShortBuffer shortBuffer2 = java.nio.ShortBuffer.wrap(shortArray1);
        short[] shortArray4 = new short[] { (byte) 1 };
        java.nio.ShortBuffer shortBuffer5 = java.nio.ShortBuffer.wrap(shortArray4);
        int int6 = shortBuffer2.compareTo(shortBuffer5);
        short[] shortArray8 = new short[] { (byte) 1 };
        java.nio.ShortBuffer shortBuffer9 = java.nio.ShortBuffer.wrap(shortArray8);
        short[] shortArray11 = new short[] { (byte) 1 };
        java.nio.ShortBuffer shortBuffer12 = java.nio.ShortBuffer.wrap(shortArray11);
        int int13 = shortBuffer9.compareTo(shortBuffer12);
        short[] shortArray14 = shortBuffer9.array();
        java.nio.ShortBuffer shortBuffer15 = shortBuffer5.get(shortArray14);
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray1), "[1]");
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[1]");
        org.junit.Assert.assertNotNull(shortBuffer5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[1]");
        org.junit.Assert.assertNotNull(shortBuffer9);
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[1]");
        org.junit.Assert.assertNotNull(shortBuffer12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray14), "[1]");
        org.junit.Assert.assertNotNull(shortBuffer15);
    }

    @Test
    public void test3071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3071");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto1 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.parseFrom(inputStream0);
        com.google.protobuf.DescriptorProtos.FieldOptions fieldOptions2 = fieldDescriptorProto1.getOptions();
        java.lang.String str3 = fieldDescriptorProto1.getExtendee();
        org.junit.Assert.assertNotNull(fieldDescriptorProto1);
        org.junit.Assert.assertNotNull(fieldOptions2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test3072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3072");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.of(localDateTime4, (java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime10.minusSeconds((long) '#');
        java.time.ZonedDateTime zonedDateTime14 = zonedDateTime10.minusYears((long) ' ');
        int int15 = zonedDateTime14.getHour();
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(zonedDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test3073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3073");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label1 = builder0.getLabel();
        java.io.InputStream inputStream2 = null;
        com.google.protobuf.MessageLite.Builder builder3 = builder0.mergeFrom(inputStream2);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type type4 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type.TYPE_BYTES;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder5 = builder0.setType(type4);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder6 = builder5.clearType();
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj9 = builder5.getRepeatedField(fieldDescriptor7, 365);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + label1 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label1.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + type4 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type.TYPE_BYTES + "'", type4.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type.TYPE_BYTES));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test3074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3074");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean5 = node4.isStringKey();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(0, node4);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node4.getStaticSourceFile();
        node4.setCharno((int) (byte) 100);
        boolean boolean10 = node4.isOnlyModifiesThisCall();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test3075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3075");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy5 = null;
        compilerOptions0.variableRenaming = variableRenamingPolicy5;
        compilerOptions0.setSummaryDetailLevel(999);
        compilerOptions0.setInlineVariables(true);
        compilerOptions0.removeUnusedVars = true;
        com.google.javascript.jscomp.SourceMap.Format format13 = compilerOptions0.sourceMapFormat;
        java.util.Map<java.lang.String, java.lang.Object> strMap14 = null;
        compilerOptions0.setDefineReplacements(strMap14);
        org.junit.Assert.assertNotNull(errorFormat3);
        org.junit.Assert.assertNotNull(format13);
    }

    @Test
    public void test3076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3076");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean4 = node3.isStringKey();
        boolean boolean5 = node3.isThrow();
        boolean boolean6 = node3.isVarArgs();
        boolean boolean7 = node3.isHook();
        com.google.javascript.rhino.Node node8 = node3.cloneNode();
        com.google.javascript.rhino.Node node10 = new com.google.javascript.rhino.Node((int) (byte) -1);
        com.google.javascript.rhino.Node node11 = node8.useSourceInfoFromForTree(node10);
        boolean boolean12 = node8.isExprResult();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test3077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3077");
        java.time.OffsetDateTime offsetDateTime0 = java.time.OffsetDateTime.MIN;
        org.junit.Assert.assertNotNull(offsetDateTime0);
    }

    @Test
    public void test3078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3078");
        java.nio.charset.Charset charset1 = java.nio.charset.Charset.defaultCharset();
        java.lang.String str2 = charset1.displayName();
        java.lang.String str3 = charset1.toString();
        java.lang.String str4 = charset1.toString();
        boolean boolean5 = charset1.canEncode();
        java.nio.CharBuffer charBuffer7 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer9 = charBuffer7.put('a');
        java.nio.ByteBuffer byteBuffer10 = charset1.encode(charBuffer9);
        java.nio.charset.CharsetDecoder charsetDecoder11 = charset1.newDecoder();
        com.google.javascript.jscomp.JSSourceFile jSSourceFile12 = com.google.javascript.jscomp.JSSourceFile.fromFile("\ub300\ud55c\ubbfc\uad6d", charset1);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "US-ASCII" + "'", str2, "US-ASCII");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "US-ASCII" + "'", str3, "US-ASCII");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "US-ASCII" + "'", str4, "US-ASCII");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(charBuffer7);
        org.junit.Assert.assertNotNull(charBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(charsetDecoder11);
        org.junit.Assert.assertNotNull(jSSourceFile12);
    }

    @Test
    public void test3079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3079");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label4 = builder3.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = builder0.addExtension(builder3);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder6 = builder0.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder7 = builder6.getOptionsBuilder();
        java.io.InputStream inputStream8 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions9 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream8);
        boolean boolean10 = enumOptions9.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder11 = builder7.mergeFrom(enumOptions9);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto12 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.getDefaultInstance();
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions13 = methodDescriptorProto12.getOptions();
        com.google.protobuf.UnknownFieldSet unknownFieldSet14 = methodDescriptorProto12.getUnknownFields();
        com.google.protobuf.ByteString byteString15 = unknownFieldSet14.toByteString();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder16 = builder7.mergeFrom(byteString15);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder18 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output20 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream22 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output20, (int) 'a');
        byte[] byteArray23 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite24 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions25 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray23, extensionRegistryLite24);
        output20.write(byteArray23);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder27 = builder18.mergeFrom(byteArray23);
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions28 = builder18.buildPartial();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder29 = builder18.addUninterpretedOptionBuilder();
        boolean boolean30 = builder29.hasNegativeIntValue();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder31 = builder29.clearStringValue();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder32 = builder31.clear();
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder33 = builder7.addUninterpretedOption(18, builder31);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 18, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + label4 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label4.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(enumOptions9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(methodDescriptorProto12);
        org.junit.Assert.assertNotNull(methodOptions13);
        org.junit.Assert.assertNotNull(unknownFieldSet14);
        org.junit.Assert.assertNotNull(byteString15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(output20);
        org.junit.Assert.assertNotNull(codedOutputStream22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(methodOptions25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(methodOptions28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test3080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3080");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label4 = builder3.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = builder0.addExtension(builder3);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder6 = builder0.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder7 = builder6.getOptionsBuilder();
        java.io.InputStream inputStream8 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions9 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream8);
        boolean boolean10 = enumOptions9.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder11 = builder7.mergeFrom(enumOptions9);
        com.google.protobuf.UnknownFieldSet unknownFieldSet12 = builder7.getUnknownFields();
        com.google.protobuf.CodedOutputStream codedOutputStream13 = null;
        unknownFieldSet12.writeTo(codedOutputStream13);
        byte[] byteArray15 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite16 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions17 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray15, extensionRegistryLite16);
        com.google.protobuf.CodedOutputStream codedOutputStream20 = com.google.protobuf.CodedOutputStream.newInstance(byteArray15, (int) (short) 0, 1);
        com.google.protobuf.CodedOutputStream codedOutputStream23 = com.google.protobuf.CodedOutputStream.newInstance(byteArray15, (int) ' ', 0);
        java.io.InputStream inputStream24 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location25 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream24);
        boolean boolean26 = location25.isInitialized();
        codedOutputStream23.writeGroupNoTag((com.google.protobuf.MessageLite) location25);
        unknownFieldSet12.writeAsMessageSetTo(codedOutputStream23);
        java.util.Map<java.lang.Integer, com.google.protobuf.UnknownFieldSet.Field> intMap29 = unknownFieldSet12.asMap();
        byte[] byteArray30 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite31 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions32 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray30, extensionRegistryLite31);
        com.google.protobuf.CodedOutputStream codedOutputStream35 = com.google.protobuf.CodedOutputStream.newInstance(byteArray30, (int) (short) 0, 1);
        com.google.protobuf.CodedOutputStream codedOutputStream38 = com.google.protobuf.CodedOutputStream.newInstance(byteArray30, (int) ' ', 0);
        int int39 = codedOutputStream38.spaceLeft();
        unknownFieldSet12.writeTo(codedOutputStream38);
        com.google.protobuf.UnknownFieldSet.Builder builder41 = com.google.protobuf.UnknownFieldSet.newBuilder(unknownFieldSet12);
        com.google.protobuf.UnknownFieldSet unknownFieldSet42 = builder41.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + label4 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label4.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(enumOptions9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(unknownFieldSet12);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(methodOptions17);
        org.junit.Assert.assertNotNull(codedOutputStream20);
        org.junit.Assert.assertNotNull(codedOutputStream23);
        org.junit.Assert.assertNotNull(location25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(intMap29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(methodOptions32);
        org.junit.Assert.assertNotNull(codedOutputStream35);
        org.junit.Assert.assertNotNull(codedOutputStream38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(unknownFieldSet42);
    }

    @Test
    public void test3081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3081");
        com.google.javascript.jscomp.SourceAst sourceAst0 = null;
        com.google.javascript.rhino.InputId inputId1 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput3 = new com.google.javascript.jscomp.CompilerInput(sourceAst0, inputId1, true);
        // The following exception was thrown during execution in test generation
        try {
            compilerInput3.clearAst();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3082");
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto0 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.getDefaultInstance();
        boolean boolean1 = serviceDescriptorProto0.hasOptions();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder2 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.newBuilder(serviceDescriptorProto0);
        byte[] byteArray3 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite4 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions5 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray3, extensionRegistryLite4);
        com.google.protobuf.CodedInputStream codedInputStream8 = com.google.protobuf.CodedInputStream.newInstance(byteArray3, 16, (int) 'a');
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder9 = builder2.mergeFrom(byteArray3);
        java.util.List<com.google.protobuf.DescriptorProtos.MethodDescriptorProto> methodDescriptorProtoList10 = builder9.getMethodList();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder11 = builder9.clearMethod();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto12 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.getDefaultInstance();
        boolean boolean13 = serviceDescriptorProto12.hasOptions();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder14 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.newBuilder(serviceDescriptorProto12);
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto15 = builder14.buildPartial();
        com.google.protobuf.DescriptorProtos.ServiceOptions serviceOptions16 = builder14.getOptions();
        com.google.protobuf.DescriptorProtos.ServiceOptions.Builder builder17 = serviceOptions16.toBuilder();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder18 = builder11.setOptions(builder17);
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto19 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.getDefaultInstance();
        boolean boolean20 = serviceDescriptorProto19.hasOptions();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder21 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.newBuilder(serviceDescriptorProto19);
        byte[] byteArray22 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite23 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions24 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray22, extensionRegistryLite23);
        com.google.protobuf.CodedInputStream codedInputStream27 = com.google.protobuf.CodedInputStream.newInstance(byteArray22, 16, (int) 'a');
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder28 = builder21.mergeFrom(byteArray22);
        java.util.List<com.google.protobuf.DescriptorProtos.MethodDescriptorProto> methodDescriptorProtoList29 = builder28.getMethodList();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder30 = builder28.clearMethod();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto31 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.getDefaultInstance();
        boolean boolean32 = serviceDescriptorProto31.hasOptions();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder33 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.newBuilder(serviceDescriptorProto31);
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto34 = builder33.buildPartial();
        com.google.protobuf.DescriptorProtos.ServiceOptions serviceOptions35 = builder33.getOptions();
        com.google.protobuf.DescriptorProtos.ServiceOptions.Builder builder36 = serviceOptions35.toBuilder();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder37 = builder30.setOptions(builder36);
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder38 = builder18.setOptions(builder36);
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor39 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.ServiceOptions.Builder builder40 = builder36.clearField(fieldDescriptor39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serviceDescriptorProto0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(methodOptions5);
        org.junit.Assert.assertNotNull(codedInputStream8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(methodDescriptorProtoList10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(serviceDescriptorProto12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(serviceDescriptorProto15);
        org.junit.Assert.assertNotNull(serviceOptions16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(serviceDescriptorProto19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(methodOptions24);
        org.junit.Assert.assertNotNull(codedInputStream27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(methodDescriptorProtoList29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(serviceDescriptorProto31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(serviceDescriptorProto34);
        org.junit.Assert.assertNotNull(serviceOptions35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test3083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3083");
        com.google.protobuf.Descriptors.Descriptor descriptor0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto1 = descriptor0.toProto();
        boolean boolean2 = descriptorProto1.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList3 = descriptorProto1.getNestedTypeList();
        int int4 = descriptorProto1.getExtensionCount();
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder5 = descriptorProto1.toBuilder();
        com.google.protobuf.UnknownFieldSet unknownFieldSet6 = builder5.getUnknownFields();
        byte[] byteArray7 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite8 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions9 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray7, extensionRegistryLite8);
        com.google.protobuf.CodedInputStream codedInputStream12 = com.google.protobuf.CodedInputStream.newInstance(byteArray7, 16, (int) 'a');
        com.google.protobuf.CodedInputStream codedInputStream15 = com.google.protobuf.CodedInputStream.newInstance(byteArray7, 0, (int) (short) 10);
        int int17 = codedInputStream15.setRecursionLimit((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder18 = builder5.mergeFrom(codedInputStream15);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptor0);
        org.junit.Assert.assertNotNull(descriptorProto1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(unknownFieldSet6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(methodOptions9);
        org.junit.Assert.assertNotNull(codedInputStream12);
        org.junit.Assert.assertNotNull(codedInputStream15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 64 + "'", int17 == 64);
    }

    @Test
    public void test3084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3084");
        java.util.function.LongSupplier longSupplier0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream1 = java.util.stream.LongStream.generate(longSupplier0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3085");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label4 = builder3.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = builder0.addExtension(builder3);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder6 = builder0.addEnumTypeBuilder();
        boolean boolean7 = builder0.hasName();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder8 = builder0.addExtensionBuilder();
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder10 = builder0.addMessageTypeBuilder((int) '/');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 47, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + label4 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label4.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test3086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3086");
        java.io.InputStream inputStream0 = null;
        byte[] byteArray1 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite2 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions3 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray1, extensionRegistryLite2);
        com.google.protobuf.CodedInputStream codedInputStream6 = com.google.protobuf.CodedInputStream.newInstance(byteArray1, 16, (int) 'a');
        com.google.javascript.jscomp.VariableMap variableMap7 = com.google.javascript.jscomp.VariableMap.fromBytes(byteArray1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite8 = null;
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto enumDescriptorProto9 = com.google.protobuf.DescriptorProtos.EnumDescriptorProto.parseFrom(byteArray1, extensionRegistryLite8);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder10 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder12 = builder10.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder13 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label14 = builder13.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder15 = builder10.addExtension(builder13);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder16 = builder10.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder17 = builder16.getOptionsBuilder();
        java.io.InputStream inputStream18 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions19 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream18);
        boolean boolean20 = enumOptions19.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder21 = builder17.mergeFrom(enumOptions19);
        com.google.protobuf.UnknownFieldSet unknownFieldSet22 = builder17.getUnknownFields();
        byte[] byteArray23 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite24 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions25 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray23, extensionRegistryLite24);
        com.google.protobuf.CodedOutputStream codedOutputStream28 = com.google.protobuf.CodedOutputStream.newInstance(byteArray23, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite29 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto30 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray23, extensionRegistryLite29);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite31 = null;
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto32 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.parseFrom(byteArray23, extensionRegistryLite31);
        com.google.protobuf.UnknownFieldSet unknownFieldSet33 = com.google.protobuf.UnknownFieldSet.parseFrom(byteArray23);
        com.google.protobuf.ByteString byteString34 = unknownFieldSet33.toByteString();
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite35 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder36 = builder17.mergeFrom(byteString34, extensionRegistryLite35);
        com.google.protobuf.DescriptorProtos.FieldOptions fieldOptions37 = com.google.protobuf.DescriptorProtos.FieldOptions.parseFrom(byteString34);
        com.google.protobuf.ByteString byteString38 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite39 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions40 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(byteString38, extensionRegistryLite39);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder41 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label42 = builder41.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto43 = builder41.buildPartial();
        int int44 = fieldDescriptorProto43.getSerializedSize();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder45 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto43);
        java.io.InputStream inputStream46 = null;
        java.io.InputStream inputStream47 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite48 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location49 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream47, extensionRegistryLite48);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder50 = builder45.mergeFrom(inputStream46, extensionRegistryLite48);
        com.google.javascript.jscomp.FunctionInformationMap functionInformationMap51 = com.google.javascript.jscomp.FunctionInformationMap.parseFrom(byteString38, extensionRegistryLite48);
        com.google.protobuf.DescriptorProtos.FileOptions fileOptions52 = com.google.protobuf.DescriptorProtos.FileOptions.parseFrom(byteString34, extensionRegistryLite48);
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange extensionRange53 = com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.parseFrom(byteArray1, extensionRegistryLite48);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.FieldOptions fieldOptions54 = com.google.protobuf.DescriptorProtos.FieldOptions.parseDelimitedFrom(inputStream0, extensionRegistryLite48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertNotNull(methodOptions3);
        org.junit.Assert.assertNotNull(codedInputStream6);
        org.junit.Assert.assertNotNull(variableMap7);
        org.junit.Assert.assertNotNull(enumDescriptorProto9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + label14 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label14.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(enumOptions19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(unknownFieldSet22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(methodOptions25);
        org.junit.Assert.assertNotNull(codedOutputStream28);
        org.junit.Assert.assertNotNull(fileDescriptorProto30);
        org.junit.Assert.assertNotNull(serviceDescriptorProto32);
        org.junit.Assert.assertNotNull(unknownFieldSet33);
        org.junit.Assert.assertNotNull(byteString34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(fieldOptions37);
        org.junit.Assert.assertNotNull(byteString38);
        org.junit.Assert.assertNotNull(enumOptions40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + label42 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label42.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(extensionRegistryLite48);
        org.junit.Assert.assertNotNull(location49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(functionInformationMap51);
        org.junit.Assert.assertNotNull(fileOptions52);
        org.junit.Assert.assertNotNull(extensionRange53);
    }

    @Test
    public void test3087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3087");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean4 = node3.isStringKey();
        boolean boolean5 = node3.isThrow();
        com.google.javascript.rhino.JSDocInfo jSDocInfo6 = null;
        node3.setJSDocInfo(jSDocInfo6);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile8 = node3.getStaticSourceFile();
        boolean boolean9 = node3.isWhile();
        com.google.javascript.rhino.Node node10 = node3.getParent();
        // The following exception was thrown during execution in test generation
        try {
            int int11 = node10.getChildCount();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(node10);
    }

    @Test
    public void test3088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3088");
        com.google.common.collect.ImmutableMap.Builder<java.util.stream.LongStream, com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder> longStreamBuilder0 = com.google.common.collect.ImmutableMap.builder();
        java.util.stream.LongStream longStream3 = java.util.stream.LongStream.rangeClosed((long) 10, 4L);
        byte[] byteArray4 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite5 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions6 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray4, extensionRegistryLite5);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite7 = null;
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto enumDescriptorProto8 = com.google.protobuf.DescriptorProtos.EnumDescriptorProto.parseFrom(byteArray4, extensionRegistryLite7);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder9 = com.google.protobuf.DescriptorProtos.EnumDescriptorProto.newBuilder(enumDescriptorProto8);
        com.google.common.collect.ImmutableMap.Builder<java.util.stream.LongStream, com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder> longStreamBuilder10 = longStreamBuilder0.put(longStream3, builder9);
        java.util.LongSummaryStatistics longSummaryStatistics11 = longStream3.summaryStatistics();
        long long12 = longSummaryStatistics11.getMax();
        org.junit.Assert.assertNotNull(longStreamBuilder0);
        org.junit.Assert.assertNotNull(longStream3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(methodOptions6);
        org.junit.Assert.assertNotNull(enumDescriptorProto8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(longStreamBuilder10);
        org.junit.Assert.assertNotNull(longSummaryStatistics11);
        org.junit.Assert.assertEquals(longSummaryStatistics11.toString(), "LongSummaryStatistics{count=0, sum=0, min=9223372036854775807, average=0.000000, max=-9223372036854775808}");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-9223372036854775808L) + "'", long12 == (-9223372036854775808L));
    }

    @Test
    public void test3089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3089");
        com.google.javascript.jscomp.SourceAst sourceAst0 = null;
        com.google.javascript.rhino.InputId inputId1 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput3 = new com.google.javascript.jscomp.CompilerInput(sourceAst0, inputId1, true);
        com.google.javascript.jscomp.SourceAst sourceAst4 = null;
        com.google.javascript.rhino.InputId inputId5 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput7 = new com.google.javascript.jscomp.CompilerInput(sourceAst4, inputId5, true);
        com.google.javascript.jscomp.SourceAst sourceAst8 = null;
        com.google.javascript.rhino.InputId inputId9 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput11 = new com.google.javascript.jscomp.CompilerInput(sourceAst8, inputId9, true);
        com.google.javascript.rhino.InputId inputId12 = compilerInput11.getInputId();
        com.google.javascript.jscomp.SourceAst sourceAst13 = null;
        com.google.javascript.rhino.InputId inputId14 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput16 = new com.google.javascript.jscomp.CompilerInput(sourceAst13, inputId14, true);
        com.google.javascript.rhino.InputId inputId17 = compilerInput16.getInputId();
        com.google.javascript.jscomp.SourceAst sourceAst18 = null;
        com.google.javascript.rhino.InputId inputId19 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput21 = new com.google.javascript.jscomp.CompilerInput(sourceAst18, inputId19, true);
        java.io.PrintStream printStream22 = null;
        com.google.javascript.jscomp.Compiler compiler23 = new com.google.javascript.jscomp.Compiler(printStream22);
        com.google.javascript.jscomp.ErrorManager errorManager24 = compiler23.getErrorManager();
        compilerInput21.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler23);
        com.google.javascript.jscomp.SourceAst sourceAst26 = null;
        com.google.javascript.rhino.InputId inputId27 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput29 = new com.google.javascript.jscomp.CompilerInput(sourceAst26, inputId27, true);
        com.google.javascript.rhino.InputId inputId30 = compilerInput29.getInputId();
        com.google.javascript.jscomp.SourceAst sourceAst31 = null;
        com.google.javascript.rhino.InputId inputId32 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput34 = new com.google.javascript.jscomp.CompilerInput(sourceAst31, inputId32, true);
        com.google.javascript.jscomp.SourceAst sourceAst35 = null;
        com.google.javascript.rhino.InputId inputId36 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput38 = new com.google.javascript.jscomp.CompilerInput(sourceAst35, inputId36, true);
        java.io.PrintStream printStream39 = null;
        com.google.javascript.jscomp.Compiler compiler40 = new com.google.javascript.jscomp.Compiler(printStream39);
        com.google.javascript.jscomp.ErrorManager errorManager41 = compiler40.getErrorManager();
        compilerInput38.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler40);
        com.google.javascript.jscomp.SourceAst sourceAst43 = null;
        com.google.javascript.rhino.InputId inputId44 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput46 = new com.google.javascript.jscomp.CompilerInput(sourceAst43, inputId44, true);
        com.google.javascript.jscomp.CompilerInput[] compilerInputArray47 = new com.google.javascript.jscomp.CompilerInput[] { compilerInput34, compilerInput38, compilerInput46 };
        com.google.common.collect.ImmutableSet<com.google.javascript.jscomp.CompilerInput> compilerInputSet48 = com.google.common.collect.ImmutableSet.of(compilerInput3, compilerInput7, compilerInput11, compilerInput16, compilerInput21, compilerInput29, compilerInputArray47);
        com.google.javascript.rhino.InputId inputId49 = compilerInput21.getInputId();
        com.google.javascript.jscomp.ErrorFormat errorFormat50 = com.google.javascript.jscomp.ErrorFormat.LEGACY;
        java.io.PrintStream printStream51 = null;
        com.google.javascript.jscomp.Compiler compiler52 = new com.google.javascript.jscomp.Compiler(printStream51);
        com.google.javascript.jscomp.ErrorManager errorManager53 = compiler52.getErrorManager();
        com.google.javascript.jscomp.JSError[] jSErrorArray54 = compiler52.getErrors();
        java.lang.String str55 = compiler52.toSource();
        com.google.javascript.jscomp.MessageFormatter messageFormatter57 = errorFormat50.toFormatter((com.google.javascript.jscomp.SourceExcerptProvider) compiler52, true);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node58 = compilerInput21.getAstRoot((com.google.javascript.jscomp.AbstractCompiler) compiler52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(inputId12);
        org.junit.Assert.assertNull(inputId17);
        org.junit.Assert.assertNotNull(errorManager24);
        org.junit.Assert.assertNull(inputId30);
        org.junit.Assert.assertNotNull(errorManager41);
        org.junit.Assert.assertNotNull(compilerInputArray47);
        org.junit.Assert.assertNotNull(compilerInputSet48);
        org.junit.Assert.assertNull(inputId49);
        org.junit.Assert.assertNotNull(errorFormat50);
        org.junit.Assert.assertNotNull(errorManager53);
        org.junit.Assert.assertNotNull(jSErrorArray54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(messageFormatter57);
    }

    @Test
    public void test3090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3090");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType4 = jSTypeRegistry2.createObjectType(objectType3);
        jSTypeRegistry2.identifyNonNullableName("/");
        jSTypeRegistry2.resetForTypeCheck();
        org.junit.Assert.assertNotNull(objectType4);
    }

    @Test
    public void test3091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3091");
        com.google.javascript.jscomp.SourceAst sourceAst0 = null;
        com.google.javascript.rhino.InputId inputId1 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput3 = new com.google.javascript.jscomp.CompilerInput(sourceAst0, inputId1, true);
        java.io.PrintStream printStream4 = null;
        com.google.javascript.jscomp.Compiler compiler5 = new com.google.javascript.jscomp.Compiler(printStream4);
        com.google.javascript.jscomp.ErrorManager errorManager6 = compiler5.getErrorManager();
        compilerInput3.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler5);
        com.google.javascript.jscomp.CodingConvention codingConvention8 = compiler5.getCodingConvention();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection9 = codingConvention8.getAssertionFunctions();
        java.lang.String str10 = codingConvention8.getAbstractMethodName();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection11 = codingConvention8.getAssertionFunctions();
        boolean boolean14 = codingConvention8.isExported("1970-01-01T00:00:00Z", false);
        java.util.Collection<java.lang.String> strCollection15 = codingConvention8.getIndirectlyDeclaredProperties();
        org.junit.Assert.assertNotNull(errorManager6);
        org.junit.Assert.assertNotNull(codingConvention8);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "goog.abstractMethod" + "'", str10, "goog.abstractMethod");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strCollection15);
    }

    @Test
    public void test3092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3092");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROPERTIES;
        org.junit.Assert.assertNotNull(diagnosticGroup0);
    }

    @Test
    public void test3093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3093");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet5 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet5, strArray4);
        boolean boolean7 = strSet5.isEmpty();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocate(100);
        boolean boolean10 = strSet5.equals((java.lang.Object) byteBuffer9);
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        boolean boolean17 = strSet15.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream18 = strSet15.stream();
        boolean boolean19 = strSet5.retainAll((java.util.Collection<java.lang.String>) strSet15);
        compilerOptions0.setExtraAnnotationNames((java.util.Set<java.lang.String>) strSet15);
        compilerOptions0.setTweakToDoubleLiteral("ISO", (double) (short) 1);
        compilerOptions0.setAliasAllStrings(true);
        compilerOptions0.setClosurePass(false);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strStream18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test3094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3094");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("Type");
        java.util.Locale.LanguageRange languageRange3 = new java.util.Locale.LanguageRange("Type");
        java.util.Locale.LanguageRange[] languageRangeArray4 = new java.util.Locale.LanguageRange[] { languageRange1, languageRange3 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList5 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList5, languageRangeArray4);
        com.google.javascript.rhino.JSDocInfo jSDocInfo7 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean8 = jSDocInfo7.hasThisType();
        java.lang.String str9 = jSDocInfo7.toString();
        java.util.Set<java.lang.String> strSet10 = jSDocInfo7.getSuppressions();
        java.util.List<java.lang.String> strList11 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, (java.util.Collection<java.lang.String>) strSet10);
        java.util.Spliterator<java.lang.String> strSpliterator12 = strSet10.spliterator();
        org.junit.Assert.assertNotNull(languageRangeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "JSDocInfo" + "'", str9, "JSDocInfo");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(strSpliterator12);
    }

    @Test
    public void test3095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3095");
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto0 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.getDefaultInstance();
        boolean boolean1 = serviceDescriptorProto0.hasOptions();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder2 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.newBuilder(serviceDescriptorProto0);
        byte[] byteArray3 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite4 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions5 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray3, extensionRegistryLite4);
        com.google.protobuf.CodedInputStream codedInputStream8 = com.google.protobuf.CodedInputStream.newInstance(byteArray3, 16, (int) 'a');
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder9 = builder2.mergeFrom(byteArray3);
        java.util.List<com.google.protobuf.DescriptorProtos.MethodDescriptorProto> methodDescriptorProtoList10 = builder9.getMethodList();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder11 = builder9.clearMethod();
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto12 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.getDefaultInstance();
        boolean boolean13 = methodDescriptorProto12.hasOutputType();
        com.google.protobuf.CodedOutputStream codedOutputStream14 = null;
        methodDescriptorProto12.writeTo(codedOutputStream14);
        boolean boolean16 = methodDescriptorProto12.hasOutputType();
        boolean boolean17 = methodDescriptorProto12.hasOutputType();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder18 = builder11.addMethod(methodDescriptorProto12);
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder19 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder20 = builder19.clearCcGenericServices();
        boolean boolean21 = builder19.isInitialized();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder23 = builder19.setCcGenericServices(true);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder24 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label25 = builder24.getLabel();
        com.google.protobuf.ByteString byteString26 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder27 = builder24.mergeFrom(byteString26);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite28 = null;
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder29 = builder23.mergeFrom(byteString26, extensionRegistryLite28);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite30 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions31 = com.google.protobuf.DescriptorProtos.EnumValueOptions.parseFrom(byteString26, extensionRegistryLite30);
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder32 = builder18.mergeFrom(byteString26);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder34 = builder32.removeMethod((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serviceDescriptorProto0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(methodOptions5);
        org.junit.Assert.assertNotNull(codedInputStream8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(methodDescriptorProtoList10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(methodDescriptorProto12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + label25 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label25.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(byteString26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(enumValueOptions31);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test3096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3096");
        long[] longArray5 = new long[] { 97, 57600000000000L, 28147497671065600L, 52, 37 };
        java.nio.LongBuffer longBuffer6 = java.nio.LongBuffer.wrap(longArray5);
        int int7 = longBuffer6.arrayOffset();
        long[] longArray13 = new long[] { 97, 57600000000000L, 28147497671065600L, 52, 37 };
        java.nio.LongBuffer longBuffer14 = java.nio.LongBuffer.wrap(longArray13);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.LongBuffer longBuffer17 = longBuffer6.get(longArray13, 7, 7);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[97, 57600000000000, 28147497671065600, 52, 37]");
        org.junit.Assert.assertNotNull(longBuffer6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[97, 57600000000000, 28147497671065600, 52, 37]");
        org.junit.Assert.assertNotNull(longBuffer14);
    }

    @Test
    public void test3097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3097");
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions fileOptions1 = builder0.getDefaultInstanceForType();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder3 = builder0.setPyGenericServices(false);
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder4 = builder3.clearJavaMultipleFiles();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder6 = builder4.setJavaGenerateEqualsAndHash(false);
        boolean boolean7 = builder6.getPyGenericServices();
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder8 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output10 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream12 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output10, (int) 'a');
        byte[] byteArray13 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite14 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions15 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray13, extensionRegistryLite14);
        output10.write(byteArray13);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder17 = builder8.mergeFrom(byteArray13);
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions18 = builder8.buildPartial();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder19 = builder8.addUninterpretedOptionBuilder();
        boolean boolean20 = builder19.hasNegativeIntValue();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder21 = builder6.addUninterpretedOption(builder19);
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder22 = builder19.clearAggregateValue();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(fileOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(output10);
        org.junit.Assert.assertNotNull(codedOutputStream12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(methodOptions15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(methodOptions18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test3098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3098");
        int int1 = com.google.protobuf.CodedOutputStream.computeEnumSizeNoTag(64);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
    }

    @Test
    public void test3099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3099");
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder1 = builder0.clearCcGenericServices();
        boolean boolean2 = builder0.isInitialized();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder4 = builder0.setJavaOuterClassname("hi!");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder7 = builder5.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder8 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label9 = builder8.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder10 = builder5.addExtension(builder8);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder11 = builder5.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder12 = builder11.getOptionsBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder13 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder15 = builder13.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder16 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label17 = builder16.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder18 = builder13.addExtension(builder16);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder19 = builder13.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder20 = builder19.getOptionsBuilder();
        java.io.InputStream inputStream21 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions22 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream21);
        boolean boolean23 = enumOptions22.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder24 = builder20.mergeFrom(enumOptions22);
        com.google.protobuf.UnknownFieldSet unknownFieldSet25 = builder20.getUnknownFields();
        com.google.protobuf.CodedOutputStream codedOutputStream26 = null;
        unknownFieldSet25.writeTo(codedOutputStream26);
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder28 = builder12.setUnknownFields(unknownFieldSet25);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto29 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.getDefaultInstance();
        boolean boolean30 = methodDescriptorProto29.hasOutputType();
        byte[] byteArray31 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite32 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions33 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray31, extensionRegistryLite32);
        com.google.protobuf.CodedOutputStream codedOutputStream36 = com.google.protobuf.CodedOutputStream.newInstance(byteArray31, (int) (short) 0, 1);
        methodDescriptorProto29.writeTo(codedOutputStream36);
        unknownFieldSet25.writeTo(codedOutputStream36);
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder39 = builder0.mergeUnknownFields(unknownFieldSet25);
        java.io.File file42 = null;
        java.io.File file43 = java.io.File.createTempFile("hi!", "ISO", file42);
        boolean boolean46 = file43.setWritable(false, false);
        java.net.URI uRI47 = file43.toURI();
        java.io.PrintStream printStream48 = new java.io.PrintStream(file43);
        printStream48.print((int) (byte) 0);
        printStream48.print(10.0d);
        printStream48.print((int) 'a');
        printStream48.println("/tmp/hi!346938731537444595ISO");
        unknownFieldSet25.writeDelimitedTo((java.io.OutputStream) printStream48);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + label9 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label9.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + label17 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label17.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(enumOptions22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(unknownFieldSet25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(methodDescriptorProto29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(methodOptions33);
        org.junit.Assert.assertNotNull(codedOutputStream36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(file43);
        org.junit.Assert.assertEquals(file43.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file43.toString(), "/tmp/hi!558613156155116470ISO");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(uRI47);
    }

    @Test
    public void test3100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3100");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.of(localDateTime4, (java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime10.withYear((int) (short) 1);
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset16);
        int int18 = localDateTime17.getYear();
        java.time.LocalDate localDate19 = localDateTime17.toLocalDate();
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset23);
        java.time.ZoneOffset zoneOffset28 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset28);
        java.time.ZonedDateTime zonedDateTime30 = java.time.ZonedDateTime.of(localDateTime24, (java.time.ZoneId) zoneOffset28);
        java.time.temporal.ChronoField chronoField32 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit33 = chronoField32.getBaseUnit();
        java.time.LocalDateTime localDateTime34 = localDateTime24.plus((long) 1970, temporalUnit33);
        java.time.LocalTime localTime35 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localDateTime34);
        java.time.ZoneOffset zoneOffset39 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime40 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset39);
        java.time.OffsetDateTime offsetDateTime41 = java.time.OffsetDateTime.of(localDate19, localTime35, zoneOffset39);
        java.time.ZonedDateTime zonedDateTime42 = zonedDateTime10.withZoneSameInstant((java.time.ZoneId) zoneOffset39);
        java.time.ZoneOffset zoneOffset46 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime47 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset46);
        java.time.ZoneOffset zoneOffset51 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime52 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset51);
        java.time.ZonedDateTime zonedDateTime53 = java.time.ZonedDateTime.of(localDateTime47, (java.time.ZoneId) zoneOffset51);
        java.time.ZonedDateTime zonedDateTime55 = zonedDateTime53.plusDays((long) '4');
        java.time.ZonedDateTime zonedDateTime57 = zonedDateTime53.withMinute((int) '#');
        boolean boolean58 = zonedDateTime10.isAfter((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime57);
        java.time.ZoneOffset zoneOffset62 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime63 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset62);
        java.time.ZoneOffset zoneOffset67 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime68 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset67);
        java.time.ZonedDateTime zonedDateTime69 = java.time.ZonedDateTime.of(localDateTime63, (java.time.ZoneId) zoneOffset67);
        java.time.ZonedDateTime zonedDateTime71 = zonedDateTime69.plusDays((long) '4');
        boolean boolean72 = zonedDateTime57.isBefore((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime69);
        java.time.DayOfWeek dayOfWeek73 = java.time.DayOfWeek.FRIDAY;
        java.time.temporal.ChronoField chronoField74 = java.time.temporal.ChronoField.OFFSET_SECONDS;
        java.time.temporal.TemporalUnit temporalUnit75 = chronoField74.getRangeUnit();
        long long77 = chronoField74.checkValidValue((long) 2);
        boolean boolean78 = dayOfWeek73.isSupported((java.time.temporal.TemporalField) chronoField74);
        java.time.temporal.ValueRange valueRange79 = zonedDateTime69.range((java.time.temporal.TemporalField) chronoField74);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zonedDateTime30);
        org.junit.Assert.assertTrue("'" + chronoField32 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField32.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit33 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit33.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(zoneOffset39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(offsetDateTime41);
        org.junit.Assert.assertNotNull(zonedDateTime42);
        org.junit.Assert.assertNotNull(zoneOffset46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(zoneOffset51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(zonedDateTime53);
        org.junit.Assert.assertNotNull(zonedDateTime55);
        org.junit.Assert.assertNotNull(zonedDateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(zoneOffset62);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(zoneOffset67);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(zonedDateTime69);
        org.junit.Assert.assertNotNull(zonedDateTime71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + dayOfWeek73 + "' != '" + java.time.DayOfWeek.FRIDAY + "'", dayOfWeek73.equals(java.time.DayOfWeek.FRIDAY));
        org.junit.Assert.assertTrue("'" + chronoField74 + "' != '" + java.time.temporal.ChronoField.OFFSET_SECONDS + "'", chronoField74.equals(java.time.temporal.ChronoField.OFFSET_SECONDS));
        org.junit.Assert.assertTrue("'" + temporalUnit75 + "' != '" + java.time.temporal.ChronoUnit.FOREVER + "'", temporalUnit75.equals(java.time.temporal.ChronoUnit.FOREVER));
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 2L + "'", long77 == 2L);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(valueRange79);
    }

    @Test
    public void test3101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3101");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean4 = node3.isFromExterns();
        java.util.Set<java.lang.String> strSet5 = node3.getDirectives();
        boolean boolean6 = node3.isDo();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test3102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3102");
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto0 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.getDefaultInstance();
        boolean boolean1 = serviceDescriptorProto0.hasOptions();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder2 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.newBuilder(serviceDescriptorProto0);
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto3 = builder2.buildPartial();
        com.google.protobuf.DescriptorProtos.ServiceOptions serviceOptions4 = builder2.getOptions();
        com.google.protobuf.DescriptorProtos.ServiceOptions.Builder builder5 = serviceOptions4.toBuilder();
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor6 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int7 = serviceOptions4.getRepeatedFieldCount(fieldDescriptor6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serviceDescriptorProto0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(serviceDescriptorProto3);
        org.junit.Assert.assertNotNull(serviceOptions4);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test3103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3103");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.lang.String str1 = charset0.displayName();
        java.lang.String str2 = charset0.toString();
        java.lang.String str3 = charset0.toString();
        boolean boolean4 = charset0.canEncode();
        java.nio.CharBuffer charBuffer6 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer8 = charBuffer6.put('a');
        java.nio.ByteBuffer byteBuffer9 = charset0.encode(charBuffer8);
        java.nio.charset.CharsetDecoder charsetDecoder10 = charset0.newDecoder();
        java.nio.charset.Charset charset11 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder12 = charset11.newDecoder();
        java.lang.String[] strArray16 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet17 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet17, strArray16);
        boolean boolean19 = strSet17.isEmpty();
        java.nio.ByteBuffer byteBuffer21 = java.nio.ByteBuffer.allocate(100);
        boolean boolean22 = strSet17.equals((java.lang.Object) byteBuffer21);
        java.nio.IntBuffer intBuffer23 = byteBuffer21.asIntBuffer();
        java.nio.CharBuffer charBuffer25 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer27 = charBuffer25.put('a');
        char[] charArray29 = new char[] { '4' };
        java.nio.CharBuffer charBuffer30 = charBuffer27.get(charArray29);
        java.nio.charset.CoderResult coderResult32 = charsetDecoder12.decode(byteBuffer21, charBuffer27, true);
        java.nio.charset.CodingErrorAction codingErrorAction33 = charsetDecoder12.malformedInputAction();
        java.nio.charset.CharsetDecoder charsetDecoder34 = charsetDecoder10.onMalformedInput(codingErrorAction33);
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "US-ASCII" + "'", str1, "US-ASCII");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "US-ASCII" + "'", str2, "US-ASCII");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "US-ASCII" + "'", str3, "US-ASCII");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(charBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(charsetDecoder10);
        org.junit.Assert.assertNotNull(charset11);
        org.junit.Assert.assertNotNull(charsetDecoder12);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intBuffer23);
        org.junit.Assert.assertNotNull(charBuffer25);
        org.junit.Assert.assertNotNull(charBuffer27);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer30);
        org.junit.Assert.assertNotNull(coderResult32);
        org.junit.Assert.assertNotNull(codingErrorAction33);
        org.junit.Assert.assertNotNull(charsetDecoder34);
    }

    @Test
    public void test3104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3104");
        byte[] byteArray1 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite2 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions3 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray1, extensionRegistryLite2);
        com.google.protobuf.CodedInputStream codedInputStream6 = com.google.protobuf.CodedInputStream.newInstance(byteArray1, 16, (int) 'a');
        com.google.javascript.jscomp.VariableMap variableMap7 = com.google.javascript.jscomp.VariableMap.fromBytes(byteArray1);
        java.util.Map<java.lang.String, java.lang.String> strMap8 = variableMap7.getOriginalNameToNewNameMap();
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZoneId zoneId9 = java.time.ZoneId.of("1970-01-01T00:00:00.000000032Z", strMap8);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid ID for region-based ZoneId, invalid format: 1970-01-01T00:00:00.000000032Z");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertNotNull(methodOptions3);
        org.junit.Assert.assertNotNull(codedInputStream6);
        org.junit.Assert.assertNotNull(variableMap7);
        org.junit.Assert.assertNotNull(strMap8);
    }

    @Test
    public void test3105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3105");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean4 = node3.isVar();
        boolean boolean5 = node3.isLabel();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test3106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3106");
        com.google.javascript.jscomp.FunctionInformationMap.Module.Builder builder0 = com.google.javascript.jscomp.FunctionInformationMap.Module.newBuilder();
        java.io.InputStream inputStream1 = null;
        java.io.InputStream inputStream2 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite3 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location4 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream2, extensionRegistryLite3);
        com.google.javascript.jscomp.FunctionInformationMap.Module.Builder builder5 = builder0.mergeFrom(inputStream1, extensionRegistryLite3);
        java.io.InputStream inputStream6 = null;
        com.google.javascript.jscomp.FunctionInformationMap.Module.Builder builder7 = builder0.mergeFrom(inputStream6);
        boolean boolean8 = builder7.isInitialized();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(extensionRegistryLite3);
        org.junit.Assert.assertNotNull(location4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test3107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3107");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRecordFunctionInformation(true);
        compilerOptions0.moveFunctionDeclarations = false;
        compilerOptions0.jqueryPass = true;
        boolean boolean7 = compilerOptions0.collapseAnonymousFunctions;
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test3108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3108");
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto0 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.getDefaultInstance();
        boolean boolean1 = serviceDescriptorProto0.hasOptions();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder2 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.newBuilder(serviceDescriptorProto0);
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto3 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.getDefaultInstance();
        boolean boolean4 = serviceDescriptorProto3.hasOptions();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder5 = builder2.mergeFrom(serviceDescriptorProto3);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto7 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.getDefaultInstance();
        boolean boolean8 = methodDescriptorProto7.hasOutputType();
        com.google.protobuf.CodedOutputStream codedOutputStream9 = null;
        methodDescriptorProto7.writeTo(codedOutputStream9);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder11 = methodDescriptorProto7.toBuilder();
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder13 = builder11.setOutputType("java.nio.HeapFloatBuffer[pos=0 lim=6 cap=6]");
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder14 = builder11.clearInputType();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder15 = builder2.addMethod(0, builder14);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder17 = builder14.setOutputType("OffsetSeconds");
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor18 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int19 = builder17.getRepeatedFieldCount(fieldDescriptor18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serviceDescriptorProto0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(serviceDescriptorProto3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(methodDescriptorProto7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test3109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3109");
        byte[] byteArray0 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions2 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray0, extensionRegistryLite1);
        com.google.protobuf.CodedOutputStream codedOutputStream5 = com.google.protobuf.CodedOutputStream.newInstance(byteArray0, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite6 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto7 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray0, extensionRegistryLite6);
        boolean boolean8 = fileDescriptorProto7.hasOptions();
        com.google.protobuf.DescriptorProtos.FileOptionsOrBuilder fileOptionsOrBuilder9 = fileDescriptorProto7.getOptionsOrBuilder();
        boolean boolean10 = fileDescriptorProto7.hasSourceCodeInfo();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder11 = fileDescriptorProto7.newBuilderForType();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto.Builder> builderList12 = builder11.getMessageTypeBuilderList();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(methodOptions2);
        org.junit.Assert.assertNotNull(codedOutputStream5);
        org.junit.Assert.assertNotNull(fileDescriptorProto7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(fileOptionsOrBuilder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builderList12);
    }

    @Test
    public void test3110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3110");
        java.time.temporal.ValueRange valueRange2 = java.time.temporal.ValueRange.of((long) 21, 9223372036854775807L);
        long long3 = valueRange2.getMinimum();
        org.junit.Assert.assertNotNull(valueRange2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 21L + "'", long3 == 21L);
    }

    @Test
    public void test3111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3111");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.of(localDateTime4, (java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime10.withHour(16);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime13 = zonedDateTime12.toLocalDateTime();
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset17);
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset22);
        java.time.ZonedDateTime zonedDateTime24 = java.time.ZonedDateTime.of(localDateTime18, (java.time.ZoneId) zoneOffset22);
        java.time.ZonedDateTime zonedDateTime26 = zonedDateTime24.minusSeconds((long) '#');
        java.time.OffsetDateTime offsetDateTime27 = zonedDateTime24.toOffsetDateTime();
        int int28 = zonedDateTime12.compareTo((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime24);
        java.time.Instant instant29 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset33 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime34 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset33);
        java.time.OffsetDateTime offsetDateTime35 = java.time.OffsetDateTime.ofInstant(instant29, (java.time.ZoneId) zoneOffset33);
        java.time.OffsetDateTime offsetDateTime37 = offsetDateTime35.minusDays((long) (short) 100);
        java.lang.String str38 = offsetDateTime35.toString();
        java.time.ZoneOffset zoneOffset39 = offsetDateTime35.getOffset();
        java.time.LocalTime localTime40 = offsetDateTime35.toLocalTime();
        java.time.Period period41 = java.time.Period.ZERO;
        java.time.Period period43 = period41.plusMonths(0L);
        java.time.LocalTime localTime44 = localTime40.plus((java.time.temporal.TemporalAmount) period43);
        java.time.ZonedDateTime zonedDateTime45 = zonedDateTime24.plus((java.time.temporal.TemporalAmount) period43);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime13);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zonedDateTime24);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(zoneOffset33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(offsetDateTime35);
        org.junit.Assert.assertNotNull(offsetDateTime37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1970-01-01T00:00:52+00:00:52" + "'", str38, "1970-01-01T00:00:52+00:00:52");
        org.junit.Assert.assertNotNull(zoneOffset39);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(zonedDateTime45);
    }

    @Test
    public void test3112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3112");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FileOptionsOrBuilder fileOptionsOrBuilder3 = builder2.getOptionsOrBuilder();
        java.util.List<com.google.protobuf.DescriptorProtos.ServiceDescriptorProto> serviceDescriptorProtoList4 = builder2.getServiceList();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(fileOptionsOrBuilder3);
        org.junit.Assert.assertNotNull(serviceDescriptorProtoList4);
    }

    @Test
    public void test3113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3113");
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap0 = java.nio.charset.Charset.availableCharsets();
        java.net.URISyntaxException uRISyntaxException3 = new java.net.URISyntaxException("hi!", "");
        boolean boolean4 = strMap0.containsKey((java.lang.Object) "");
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap5 = java.nio.charset.Charset.availableCharsets();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean10 = strMap5.containsValue((java.lang.Object) '4');
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap11 = java.nio.charset.Charset.availableCharsets();
        java.net.URISyntaxException uRISyntaxException14 = new java.net.URISyntaxException("hi!", "");
        boolean boolean15 = strMap11.containsKey((java.lang.Object) "");
        int int16 = strMap11.size();
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap17 = java.nio.charset.Charset.availableCharsets();
        java.util.Set<java.lang.String> strSet18 = strMap17.keySet();
        java.util.Set<java.lang.String> strSet19 = strMap17.keySet();
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap20 = java.nio.charset.Charset.availableCharsets();
        java.net.URISyntaxException uRISyntaxException23 = new java.net.URISyntaxException("hi!", "");
        boolean boolean24 = strMap20.containsKey((java.lang.Object) "");
        int int25 = strMap20.size();
        com.google.common.collect.ImmutableList<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>> strMapList26 = com.google.common.collect.ImmutableList.of(strMap0, strMap5, strMap11, strMap17, strMap20);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder27 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder29 = builder27.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder30 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label31 = builder30.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder32 = builder27.addExtension(builder30);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder33 = builder27.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder34 = builder33.getOptionsBuilder();
        java.io.InputStream inputStream35 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions36 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream35);
        boolean boolean37 = enumOptions36.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder38 = builder34.mergeFrom(enumOptions36);
        com.google.protobuf.UnknownFieldSet unknownFieldSet39 = builder34.getUnknownFields();
        com.google.protobuf.CodedOutputStream codedOutputStream40 = null;
        unknownFieldSet39.writeTo(codedOutputStream40);
        byte[] byteArray42 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite43 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions44 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray42, extensionRegistryLite43);
        com.google.protobuf.CodedOutputStream codedOutputStream47 = com.google.protobuf.CodedOutputStream.newInstance(byteArray42, (int) (short) 0, 1);
        com.google.protobuf.CodedOutputStream codedOutputStream50 = com.google.protobuf.CodedOutputStream.newInstance(byteArray42, (int) ' ', 0);
        java.io.InputStream inputStream51 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location52 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream51);
        boolean boolean53 = location52.isInitialized();
        codedOutputStream50.writeGroupNoTag((com.google.protobuf.MessageLite) location52);
        unknownFieldSet39.writeAsMessageSetTo(codedOutputStream50);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.charset.Charset charset56 = strMap11.get((java.lang.Object) codedOutputStream50);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 171 + "'", int16 == 171);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 171 + "'", int25 == 171);
        org.junit.Assert.assertNotNull(strMapList26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + label31 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label31.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(enumOptions36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(unknownFieldSet39);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[]");
        org.junit.Assert.assertNotNull(methodOptions44);
        org.junit.Assert.assertNotNull(codedOutputStream47);
        org.junit.Assert.assertNotNull(codedOutputStream50);
        org.junit.Assert.assertNotNull(location52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
    }

    @Test
    public void test3114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3114");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.of(localDateTime4, (java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime10.withYear((int) (short) 1);
        java.time.temporal.ChronoField chronoField13 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit14 = chronoField13.getBaseUnit();
        java.time.ZonedDateTime zonedDateTime15 = zonedDateTime10.truncatedTo(temporalUnit14);
        java.time.Duration duration16 = temporalUnit14.getDuration();
        long long17 = duration16.toDays();
        java.time.Duration duration19 = duration16.minusDays(999L);
        java.time.Duration duration20 = duration19.abs();
        java.util.List<java.time.temporal.TemporalUnit> temporalUnitList21 = duration20.getUnits();
        java.time.Duration duration23 = duration20.plusDays((long) (-2));
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertTrue("'" + chronoField13 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField13.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit14 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit14.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(zonedDateTime15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(temporalUnitList21);
        org.junit.Assert.assertNotNull(duration23);
    }

    @Test
    public void test3115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3115");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        int int5 = localDateTime4.getYear();
        java.time.LocalDate localDate6 = localDateTime4.toLocalDate();
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset10);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.of(localDateTime11, (java.time.ZoneId) zoneOffset15);
        java.time.temporal.ChronoField chronoField19 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit20 = chronoField19.getBaseUnit();
        java.time.LocalDateTime localDateTime21 = localDateTime11.plus((long) 1970, temporalUnit20);
        java.time.LocalTime localTime22 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localDateTime21);
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset26);
        java.time.OffsetDateTime offsetDateTime28 = java.time.OffsetDateTime.of(localDate6, localTime22, zoneOffset26);
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean33 = node32.isFromExterns();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean38 = node37.isFromExterns();
        java.lang.String str39 = node37.toString();
        com.google.javascript.rhino.Node node40 = node32.copyInformationFrom(node37);
        boolean boolean41 = zoneOffset26.equals((java.lang.Object) node37);
        boolean boolean42 = node37.isVar();
        com.google.javascript.rhino.Node node47 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean48 = node47.isStringKey();
        boolean boolean49 = node47.isThrow();
        boolean boolean50 = node47.isVarArgs();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean55 = node54.isFromExterns();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean60 = node59.isFromExterns();
        java.lang.String str61 = node59.toString();
        com.google.javascript.rhino.Node node62 = node54.copyInformationFrom(node59);
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean67 = node66.isStringKey();
        boolean boolean68 = node66.isThrow();
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean73 = node72.isStringKey();
        com.google.javascript.rhino.Node node76 = new com.google.javascript.rhino.Node((-1), node47, node59, node66, node72, 16384, 16);
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean81 = node80.isStringKey();
        boolean boolean82 = node80.isThrow();
        boolean boolean83 = node80.isVarArgs();
        boolean boolean84 = node80.isHook();
        boolean boolean85 = node80.isAssign();
        boolean boolean86 = node80.isVar();
        com.google.javascript.jscomp.CodingConvention.Bind bind87 = new com.google.javascript.jscomp.CodingConvention.Bind(node37, node72, node80);
        node72.addSuppression("Named type with empty name component");
        int int91 = node72.getIntProp(6);
        boolean boolean92 = node72.isWhile();
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertTrue("'" + chronoField19 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField19.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit20 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit20.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(offsetDateTime28);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "NUMBER 52.0 0" + "'", str39, "NUMBER 52.0 0");
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(node47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "NUMBER 52.0 0" + "'", str61, "NUMBER 52.0 0");
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test3116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3116");
        com.google.javascript.jscomp.FunctionInformationMap.Module.Builder builder0 = com.google.javascript.jscomp.FunctionInformationMap.Module.newBuilder();
        java.lang.String str1 = builder0.getCompiledSource();
        com.google.javascript.jscomp.CompilerOptions compilerOptions2 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions2.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat5 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions2.errorFormat = errorFormat5;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy7 = null;
        compilerOptions2.variableRenaming = variableRenamingPolicy7;
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode9 = compilerOptions2.getTracerMode();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder10 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder12 = builder10.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder13 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label14 = builder13.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder15 = builder10.addExtension(builder13);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder16 = builder10.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder17 = builder16.getOptionsBuilder();
        java.io.InputStream inputStream18 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions19 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream18);
        boolean boolean20 = enumOptions19.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder21 = builder17.mergeFrom(enumOptions19);
        byte[] byteArray22 = enumOptions19.toByteArray();
        compilerOptions2.setInputPropertyMapSerialized(byteArray22);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite24 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location25 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(byteArray22, extensionRegistryLite24);
        com.google.javascript.jscomp.FunctionInformationMap.Module.Builder builder28 = builder0.mergeFrom(byteArray22, 0, 0);
        boolean boolean29 = builder28.hasName();
        com.google.javascript.jscomp.FunctionInformationMap.Module.Builder builder31 = builder28.setCompiledSource("\ub300\ud55c\ubbfc\uad6d");
        com.google.javascript.jscomp.FunctionInformationMap.Module.Builder builder32 = builder31.clearName();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(errorFormat5);
        org.junit.Assert.assertTrue("'" + tracerMode9 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode9.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + label14 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label14.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(enumOptions19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(location25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test3117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3117");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy5 = null;
        compilerOptions0.variableRenaming = variableRenamingPolicy5;
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode7 = compilerOptions0.getTracerMode();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder8 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder10 = builder8.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder11 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label12 = builder11.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder13 = builder8.addExtension(builder11);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder14 = builder8.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder15 = builder14.getOptionsBuilder();
        java.io.InputStream inputStream16 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions17 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream16);
        boolean boolean18 = enumOptions17.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder19 = builder15.mergeFrom(enumOptions17);
        byte[] byteArray20 = enumOptions17.toByteArray();
        compilerOptions0.setInputPropertyMapSerialized(byteArray20);
        compilerOptions0.setManageClosureDependencies(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions24 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions24.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat27 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions24.errorFormat = errorFormat27;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy29 = null;
        compilerOptions24.variableRenaming = variableRenamingPolicy29;
        compilerOptions24.setSummaryDetailLevel(999);
        boolean boolean33 = compilerOptions24.getInferTypes();
        compilerOptions24.setDefineToStringLiteral("java.nio.ByteBufferAsDoubleBufferB[pos=0 lim=12 cap=12]", "1970-01-01");
        java.lang.String str37 = compilerOptions24.renamePrefixNamespace;
        com.google.javascript.jscomp.CompilerOptions compilerOptions38 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions38.setRecordFunctionInformation(true);
        boolean boolean41 = compilerOptions38.checkControlStructures;
        compilerOptions38.setCollapseProperties(false);
        compilerOptions38.setAssumeStrictThis(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions46 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions46.optimizeCalls = false;
        compilerOptions46.preferLineBreakAtEndOfFile = false;
        boolean boolean51 = compilerOptions46.markNoSideEffectCalls;
        boolean boolean52 = compilerOptions46.labelRenaming;
        com.google.javascript.jscomp.DependencyOptions dependencyOptions53 = new com.google.javascript.jscomp.DependencyOptions();
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet58 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet58, strArray57);
        boolean boolean60 = strSet58.isEmpty();
        java.nio.ByteBuffer byteBuffer62 = java.nio.ByteBuffer.allocate(100);
        boolean boolean63 = strSet58.equals((java.lang.Object) byteBuffer62);
        java.lang.String[] strArray67 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet68 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet68, strArray67);
        boolean boolean70 = strSet68.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream71 = strSet68.stream();
        boolean boolean72 = strSet58.retainAll((java.util.Collection<java.lang.String>) strSet68);
        com.google.javascript.jscomp.DependencyOptions dependencyOptions73 = dependencyOptions53.setEntryPoints((java.util.Collection<java.lang.String>) strSet58);
        compilerOptions46.setDependencyOptions(dependencyOptions53);
        com.google.javascript.jscomp.CheckLevel checkLevel75 = compilerOptions46.checkGlobalThisLevel;
        compilerOptions38.reportMissingOverride = checkLevel75;
        compilerOptions24.setCheckUnreachableCode(checkLevel75);
        compilerOptions0.checkMissingGetCssNameLevel = checkLevel75;
        org.junit.Assert.assertNotNull(errorFormat3);
        org.junit.Assert.assertTrue("'" + tracerMode7 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode7.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + label12 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label12.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(enumOptions17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(errorFormat27);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(byteBuffer62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(strStream71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(dependencyOptions73);
        org.junit.Assert.assertTrue("'" + checkLevel75 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel75.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test3118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3118");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        boolean boolean3 = builder0.hasPackage();
        com.google.protobuf.DescriptorProtos.FileOptions fileOptions4 = com.google.protobuf.DescriptorProtos.FileOptions.getDefaultInstance();
        java.util.List<com.google.protobuf.DescriptorProtos.UninterpretedOption> uninterpretedOptionList5 = fileOptions4.getUninterpretedOptionList();
        boolean boolean6 = fileOptions4.getPyGenericServices();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder7 = builder0.mergeOptions(fileOptions4);
        com.google.protobuf.ByteString.Output output9 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream11 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output9, (int) 'a');
        java.io.InputStream inputStream12 = null;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto13 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.parseFrom(inputStream12);
        codedOutputStream11.writeUnknownGroupNoTag((com.google.protobuf.MessageLite) fieldDescriptorProto13);
        fileOptions4.writeTo(codedOutputStream11);
        boolean boolean16 = fileOptions4.hasJavaMultipleFiles();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(fileOptions4);
        org.junit.Assert.assertNotNull(uninterpretedOptionList5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(output9);
        org.junit.Assert.assertNotNull(codedOutputStream11);
        org.junit.Assert.assertNotNull(fieldDescriptorProto13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test3119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3119");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder3 = builder2.clearSourceCodeInfo();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder4 = builder2.getSourceCodeInfoBuilder();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo sourceCodeInfo5 = builder4.getDefaultInstanceForType();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder6 = sourceCodeInfo5.newBuilderForType();
        java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite> priorityMap7 = new java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite>();
        java.lang.Object obj8 = priorityMap7.clone();
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder9 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.newBuilder();
        boolean boolean10 = priorityMap7.containsValue((java.lang.Object) builder9);
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder12 = builder9.setName("java.nio.ByteBufferAsDoubleBufferB[pos=0 lim=12 cap=12]");
        com.google.protobuf.ByteString byteString13 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder14 = builder9.mergeFrom(byteString13);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite15 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder16 = builder6.mergeFrom(byteString13, extensionRegistryLite15);
        com.google.protobuf.Descriptors.Descriptor descriptor17 = builder16.getDescriptorForType();
        com.google.protobuf.UnknownFieldSet.Builder builder18 = com.google.protobuf.UnknownFieldSet.newBuilder();
        boolean boolean20 = builder18.hasField(7);
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.Builder builder21 = com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.newBuilder();
        java.io.InputStream inputStream22 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite23 = null;
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.Builder builder24 = builder21.mergeFrom(inputStream22, extensionRegistryLite23);
        java.util.Map<com.google.protobuf.Descriptors.FieldDescriptor, java.lang.Object> fieldDescriptorMap25 = builder21.getAllFields();
        java.io.File file28 = null;
        java.io.File file29 = java.io.File.createTempFile("hi!", "ISO", file28);
        boolean boolean32 = file29.setWritable(false, false);
        java.net.URI uRI33 = file29.toURI();
        java.io.PrintStream printStream34 = new java.io.PrintStream(file29);
        printStream34.print((int) (byte) 0);
        printStream34.print(10.0d);
        printStream34.close();
        com.google.javascript.jscomp.CompilerOptions compilerOptions40 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions40.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat43 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions40.errorFormat = errorFormat43;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy45 = null;
        compilerOptions40.variableRenaming = variableRenamingPolicy45;
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode47 = compilerOptions40.getTracerMode();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder48 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder50 = builder48.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder51 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label52 = builder51.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder53 = builder48.addExtension(builder51);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder54 = builder48.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder55 = builder54.getOptionsBuilder();
        java.io.InputStream inputStream56 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions57 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream56);
        boolean boolean58 = enumOptions57.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder59 = builder55.mergeFrom(enumOptions57);
        byte[] byteArray60 = enumOptions57.toByteArray();
        compilerOptions40.setInputPropertyMapSerialized(byteArray60);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite62 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location63 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(byteArray60, extensionRegistryLite62);
        printStream34.write(byteArray60, 1970, 152);
        byte[] byteArray67 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite68 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions69 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray67, extensionRegistryLite68);
        com.google.protobuf.DescriptorProtos.UninterpretedOption uninterpretedOption70 = com.google.protobuf.DescriptorProtos.UninterpretedOption.parseFrom(byteArray67);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder71 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label72 = builder71.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto73 = builder71.buildPartial();
        int int74 = fieldDescriptorProto73.getSerializedSize();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder75 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto73);
        java.io.InputStream inputStream76 = null;
        java.io.InputStream inputStream77 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite78 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location79 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream77, extensionRegistryLite78);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder80 = builder75.mergeFrom(inputStream76, extensionRegistryLite78);
        com.google.javascript.jscomp.FunctionInformationMap functionInformationMap81 = com.google.javascript.jscomp.FunctionInformationMap.parseFrom(byteArray67, extensionRegistryLite78);
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.Builder builder82 = builder21.mergeFrom(byteArray60, extensionRegistryLite78);
        com.google.protobuf.UnknownFieldSet.Builder builder83 = builder18.mergeFrom(byteArray60);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder86 = builder16.mergeFrom(byteArray60, (int) '/', 64);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 47");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(sourceCodeInfo5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "{}");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(byteString13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(descriptor17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(fieldDescriptorMap25);
        org.junit.Assert.assertNotNull(file29);
        org.junit.Assert.assertEquals(file29.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file29.toString(), "/tmp/hi!1699865031022943712ISO");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(uRI33);
        org.junit.Assert.assertNotNull(errorFormat43);
        org.junit.Assert.assertTrue("'" + tracerMode47 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode47.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertTrue("'" + label52 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label52.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(enumOptions57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertNotNull(location63);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertNotNull(methodOptions69);
        org.junit.Assert.assertNotNull(uninterpretedOption70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertTrue("'" + label72 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label72.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(extensionRegistryLite78);
        org.junit.Assert.assertNotNull(location79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(functionInformationMap81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder83);
    }

    @Test
    public void test3120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3120");
        java.io.File file2 = null;
        java.io.File file3 = java.io.File.createTempFile("hi!", "ISO", file2);
        boolean boolean4 = file3.createNewFile();
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter6 = new java.io.PrintWriter(file3, "/tmp/hi!4516073975838273390ISO");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: /tmp/hi!4516073975838273390ISO");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file3.toString(), "/tmp/hi!6012630339642281741ISO");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test3121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3121");
        java.io.File file2 = null;
        java.io.File file3 = java.io.File.createTempFile("hi!", "ISO", file2);
        boolean boolean6 = file3.setWritable(false, false);
        java.net.URI uRI7 = file3.toURI();
        com.google.javascript.jscomp.JSSourceFile jSSourceFile8 = com.google.javascript.jscomp.JSSourceFile.fromFile(file3);
        long long9 = file3.length();
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file3.toString(), "/tmp/hi!1626568747733040480ISO");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(uRI7);
        org.junit.Assert.assertNotNull(jSSourceFile8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test3122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3122");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto enumValueDescriptorProto2 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.parseFrom(inputStream0, extensionRegistryLite1);
        com.google.protobuf.DescriptorProtos.EnumValueOptionsOrBuilder enumValueOptionsOrBuilder3 = enumValueDescriptorProto2.getOptionsOrBuilder();
        java.lang.String str4 = enumValueDescriptorProto2.getName();
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions5 = enumValueDescriptorProto2.getOptions();
        org.junit.Assert.assertNotNull(enumValueDescriptorProto2);
        org.junit.Assert.assertNotNull(enumValueOptionsOrBuilder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(enumValueOptions5);
    }

    @Test
    public void test3123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3123");
        java.time.Period period0 = java.time.Period.ZERO;
        java.time.chrono.ChronoPeriod chronoPeriod1 = period0.normalized();
        java.time.Period period3 = period0.minusDays(67108L);
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(chronoPeriod1);
        org.junit.Assert.assertNotNull(period3);
    }

    @Test
    public void test3124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3124");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange extensionRange2 = com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.parseFrom(inputStream0, extensionRegistryLite1);
        int int3 = extensionRange2.getEnd();
        com.google.protobuf.ByteString.Output output5 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream7 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output5, (int) 'a');
        codedOutputStream7.writeInt32NoTag(55);
        extensionRange2.writeTo(codedOutputStream7);
        org.junit.Assert.assertNotNull(extensionRange2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(output5);
        org.junit.Assert.assertNotNull(codedOutputStream7);
    }

    @Test
    public void test3125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3125");
        com.google.javascript.jscomp.JsMessage.Style style0 = com.google.javascript.jscomp.JsMessage.Style.RELAX;
        java.util.stream.Stream<com.google.javascript.jscomp.JsMessage.Style> styleStream1 = java.util.stream.Stream.of(style0);
        org.junit.Assert.assertTrue("'" + style0 + "' != '" + com.google.javascript.jscomp.JsMessage.Style.RELAX + "'", style0.equals(com.google.javascript.jscomp.JsMessage.Style.RELAX));
        org.junit.Assert.assertNotNull(styleStream1);
    }

    @Test
    public void test3126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3126");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) 256, (int) (byte) 10, (int) (short) 100);
        com.google.javascript.rhino.JSDocInfo jSDocInfo4 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean5 = jSDocInfo4.hasThisType();
        boolean boolean6 = jSDocInfo4.isConstant();
        node3.setJSDocInfo(jSDocInfo4);
        java.lang.String str11 = node3.toString(false, false, true);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "NUMBER 256.0" + "'", str11, "NUMBER 256.0");
    }

    @Test
    public void test3127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3127");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        java.util.List<com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder> builderList3 = builder0.getServiceBuilderList();
        com.google.protobuf.DescriptorProtos.SourceCodeInfoOrBuilder sourceCodeInfoOrBuilder4 = builder0.getSourceCodeInfoOrBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = builder0.clearDependency();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder6 = builder0.addExtensionBuilder();
        com.google.protobuf.ByteString.Output output8 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream10 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output8, (int) 'a');
        byte[] byteArray11 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite12 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions13 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray11, extensionRegistryLite12);
        output8.write(byteArray11);
        com.google.protobuf.CodedInputStream codedInputStream17 = com.google.protobuf.CodedInputStream.newInstance(byteArray11, 21, 4);
        int int19 = codedInputStream17.setSizeLimit((int) '/');
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder20 = builder6.mergeFrom(codedInputStream17);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 21");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builderList3);
        org.junit.Assert.assertNotNull(sourceCodeInfoOrBuilder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(output8);
        org.junit.Assert.assertNotNull(codedOutputStream10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(methodOptions13);
        org.junit.Assert.assertNotNull(codedInputStream17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 67108864 + "'", int19 == 67108864);
    }

    @Test
    public void test3128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3128");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder3 = builder2.clearSourceCodeInfo();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder4 = builder2.getSourceCodeInfoBuilder();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo sourceCodeInfo5 = builder4.getDefaultInstanceForType();
        int int6 = sourceCodeInfo5.getSerializedSize();
        int int7 = sourceCodeInfo5.getSerializedSize();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(sourceCodeInfo5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test3129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3129");
        com.google.javascript.jscomp.FunctionInformationMap.Module.Builder builder0 = com.google.javascript.jscomp.FunctionInformationMap.Module.newBuilder();
        java.lang.String str1 = builder0.getCompiledSource();
        java.io.InputStream inputStream2 = null;
        byte[] byteArray3 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite4 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions5 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray3, extensionRegistryLite4);
        com.google.protobuf.DescriptorProtos.UninterpretedOption uninterpretedOption6 = com.google.protobuf.DescriptorProtos.UninterpretedOption.parseFrom(byteArray3);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder7 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label8 = builder7.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto9 = builder7.buildPartial();
        int int10 = fieldDescriptorProto9.getSerializedSize();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder11 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto9);
        java.io.InputStream inputStream12 = null;
        java.io.InputStream inputStream13 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite14 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location15 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream13, extensionRegistryLite14);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder16 = builder11.mergeFrom(inputStream12, extensionRegistryLite14);
        com.google.javascript.jscomp.FunctionInformationMap functionInformationMap17 = com.google.javascript.jscomp.FunctionInformationMap.parseFrom(byteArray3, extensionRegistryLite14);
        com.google.javascript.jscomp.FunctionInformationMap.Module.Builder builder18 = builder0.mergeFrom(inputStream2, extensionRegistryLite14);
        byte[] byteArray19 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite20 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions21 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray19, extensionRegistryLite20);
        com.google.protobuf.CodedInputStream codedInputStream24 = com.google.protobuf.CodedInputStream.newInstance(byteArray19, 16, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.FunctionInformationMap.Module.Builder builder25 = builder18.mergeFrom(codedInputStream24);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 16");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(methodOptions5);
        org.junit.Assert.assertNotNull(uninterpretedOption6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + label8 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label8.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(extensionRegistryLite14);
        org.junit.Assert.assertNotNull(location15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(functionInformationMap17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(methodOptions21);
        org.junit.Assert.assertNotNull(codedInputStream24);
    }

    @Test
    public void test3130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3130");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) ' ');
        boolean boolean2 = charBuffer1.isDirect();
        java.nio.CharBuffer charBuffer4 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer6 = charBuffer4.put('a');
        char[] charArray8 = new char[] { '4' };
        java.nio.CharBuffer charBuffer9 = charBuffer6.get(charArray8);
        java.nio.CharBuffer charBuffer10 = charBuffer6.compact();
        java.nio.CharBuffer charBuffer12 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer14 = charBuffer12.put('a');
        java.nio.CharBuffer charBuffer16 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer18 = charBuffer16.put('a');
        char[] charArray20 = new char[] { '4' };
        java.nio.CharBuffer charBuffer21 = charBuffer18.get(charArray20);
        java.nio.CharBuffer charBuffer22 = charBuffer18.compact();
        com.google.common.collect.ImmutableSet<java.lang.Appendable> appendableSet23 = com.google.common.collect.ImmutableSet.of((java.lang.Appendable) charBuffer1, (java.lang.Appendable) charBuffer6, (java.lang.Appendable) charBuffer12, (java.lang.Appendable) charBuffer22);
        java.time.ZoneOffset zoneOffset27 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset27);
        int int29 = localDateTime28.getYear();
        java.time.Instant instant30 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset34);
        java.time.OffsetDateTime offsetDateTime36 = java.time.OffsetDateTime.ofInstant(instant30, (java.time.ZoneId) zoneOffset34);
        java.time.Instant instant37 = localDateTime28.toInstant(zoneOffset34);
        boolean boolean38 = appendableSet23.equals((java.lang.Object) zoneOffset34);
        java.lang.Object[] objArray39 = appendableSet23.toArray();
        java.util.concurrent.TimeUnit timeUnit40 = java.util.concurrent.TimeUnit.HOURS;
        boolean boolean41 = appendableSet23.contains((java.lang.Object) timeUnit40);
        com.google.common.collect.ImmutableList<java.lang.Appendable> appendableList42 = appendableSet23.asList();
        java.time.ZoneOffset zoneOffset46 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime47 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset46);
        int int48 = localDateTime47.getYear();
        java.time.Instant instant49 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset53 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime54 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset53);
        java.time.OffsetDateTime offsetDateTime55 = java.time.OffsetDateTime.ofInstant(instant49, (java.time.ZoneId) zoneOffset53);
        java.time.Instant instant56 = localDateTime47.toInstant(zoneOffset53);
        int int57 = appendableList42.lastIndexOf((java.lang.Object) instant56);
        java.time.temporal.ChronoField chronoField60 = java.time.temporal.ChronoField.OFFSET_SECONDS;
        java.time.Instant instant61 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset65 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime66 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset65);
        java.time.OffsetDateTime offsetDateTime67 = java.time.OffsetDateTime.ofInstant(instant61, (java.time.ZoneId) zoneOffset65);
        java.time.OffsetDateTime offsetDateTime69 = offsetDateTime67.minusDays((long) (short) 100);
        java.lang.String str70 = offsetDateTime67.toString();
        java.time.temporal.ChronoField chronoField71 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        int int72 = offsetDateTime67.get((java.time.temporal.TemporalField) chronoField71);
        java.time.OffsetDateTime offsetDateTime74 = offsetDateTime67.withDayOfMonth((int) (short) 10);
        java.time.ZoneOffset zoneOffset75 = java.time.ZoneOffset.MAX;
        java.time.OffsetDateTime offsetDateTime76 = offsetDateTime74.withOffsetSameLocal(zoneOffset75);
        boolean boolean77 = chronoField60.isSupportedBy((java.time.temporal.TemporalAccessor) zoneOffset75);
        java.time.LocalDateTime localDateTime78 = java.time.LocalDateTime.ofEpochSecond((long) 8, 10, zoneOffset75);
        java.time.temporal.ChronoField chronoField79 = java.time.temporal.ChronoField.AMPM_OF_DAY;
        boolean boolean80 = localDateTime78.isSupported((java.time.temporal.TemporalField) chronoField79);
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.Temporal temporal82 = instant56.with((java.time.temporal.TemporalField) chronoField79, 946598400000L);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for AmPmOfDay (valid values 0 - 1): 946598400000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charBuffer4);
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer9);
        org.junit.Assert.assertNotNull(charBuffer10);
        org.junit.Assert.assertNotNull(charBuffer12);
        org.junit.Assert.assertNotNull(charBuffer14);
        org.junit.Assert.assertNotNull(charBuffer16);
        org.junit.Assert.assertNotNull(charBuffer18);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer21);
        org.junit.Assert.assertNotNull(charBuffer22);
        org.junit.Assert.assertNotNull(appendableSet23);
        org.junit.Assert.assertNotNull(zoneOffset27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1970 + "'", int29 == 1970);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(offsetDateTime36);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000, \000\000, \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000, \000\000, \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000]");
        org.junit.Assert.assertNotNull(timeUnit40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(appendableList42);
        org.junit.Assert.assertNotNull(zoneOffset46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1970 + "'", int48 == 1970);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertNotNull(zoneOffset53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(offsetDateTime55);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertTrue("'" + chronoField60 + "' != '" + java.time.temporal.ChronoField.OFFSET_SECONDS + "'", chronoField60.equals(java.time.temporal.ChronoField.OFFSET_SECONDS));
        org.junit.Assert.assertNotNull(instant61);
        org.junit.Assert.assertNotNull(zoneOffset65);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(offsetDateTime67);
        org.junit.Assert.assertNotNull(offsetDateTime69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "1970-01-01T00:00:52+00:00:52" + "'", str70, "1970-01-01T00:00:52+00:00:52");
        org.junit.Assert.assertTrue("'" + chronoField71 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField71.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 12 + "'", int72 == 12);
        org.junit.Assert.assertNotNull(offsetDateTime74);
        org.junit.Assert.assertNotNull(zoneOffset75);
        org.junit.Assert.assertNotNull(offsetDateTime76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertTrue("'" + chronoField79 + "' != '" + java.time.temporal.ChronoField.AMPM_OF_DAY + "'", chronoField79.equals(java.time.temporal.ChronoField.AMPM_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test3131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3131");
        java.util.stream.IntStream intStream0 = java.util.stream.IntStream.empty();
        org.junit.Assert.assertNotNull(intStream0);
    }

    @Test
    public void test3132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3132");
        java.time.Instant instant1 = java.time.Instant.EPOCH;
        java.nio.file.attribute.FileTime fileTime2 = java.nio.file.attribute.FileTime.from(instant1);
        java.util.concurrent.TimeUnit timeUnit3 = java.util.concurrent.TimeUnit.NANOSECONDS;
        long long4 = fileTime2.to(timeUnit3);
        java.time.Instant instant6 = java.time.Instant.EPOCH;
        java.nio.file.attribute.FileTime fileTime7 = java.nio.file.attribute.FileTime.from(instant6);
        java.util.concurrent.TimeUnit timeUnit8 = java.util.concurrent.TimeUnit.NANOSECONDS;
        long long9 = fileTime7.to(timeUnit8);
        long long10 = timeUnit3.convert((long) '4', timeUnit8);
        java.nio.file.attribute.FileTime fileTime11 = java.nio.file.attribute.FileTime.from((long) 'x', timeUnit8);
        long long13 = timeUnit8.toMinutes((-712108796000L));
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(fileTime2);
        org.junit.Assert.assertNotNull(timeUnit3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(fileTime7);
        org.junit.Assert.assertNotNull(timeUnit8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 52L + "'", long10 == 52L);
        org.junit.Assert.assertNotNull(fileTime11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-11L) + "'", long13 == (-11L));
    }

    @Test
    public void test3133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3133");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo sourceCodeInfo2 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.parseFrom(inputStream0, extensionRegistryLite1);
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder3 = sourceCodeInfo2.newBuilderForType();
        com.google.protobuf.UnknownFieldSet unknownFieldSet4 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder5 = builder3.setUnknownFields(unknownFieldSet4);
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.Builder builder7 = builder3.addLocationBuilder(0);
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location8 = builder7.buildPartial();
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder9 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output11 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream13 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output11, (int) 'a');
        byte[] byteArray14 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite15 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions16 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray14, extensionRegistryLite15);
        output11.write(byteArray14);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder18 = builder9.mergeFrom(byteArray14);
        java.util.List<com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder> builderList19 = builder18.getUninterpretedOptionBuilderList();
        java.util.List<com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder> builderList20 = builder18.getUninterpretedOptionBuilderList();
        com.google.javascript.jscomp.CompilerOptions compilerOptions21 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions21.setRecordFunctionInformation(true);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder24 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder26 = builder24.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder27 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label28 = builder27.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder29 = builder24.addExtension(builder27);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder30 = builder24.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions31 = builder30.getOptions();
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder32 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output34 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream36 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output34, (int) 'a');
        byte[] byteArray37 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite38 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions39 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray37, extensionRegistryLite38);
        output34.write(byteArray37);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder41 = builder32.mergeFrom(byteArray37);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder42 = builder30.mergeFrom(byteArray37);
        compilerOptions21.setInputVariableMapSerialized(byteArray37);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite44 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder45 = builder18.mergeFrom(byteArray37, extensionRegistryLite44);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.Builder builder48 = builder7.mergeFrom(byteArray37, 1, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(sourceCodeInfo2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(location8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(output11);
        org.junit.Assert.assertNotNull(codedOutputStream13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(methodOptions16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builderList19);
        org.junit.Assert.assertNotNull(builderList20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + label28 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label28.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(enumOptions31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(output34);
        org.junit.Assert.assertNotNull(codedOutputStream36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(methodOptions39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test3134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3134");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        int int5 = localDateTime4.getYear();
        java.time.LocalDate localDate6 = localDateTime4.toLocalDate();
        java.time.LocalDate localDate8 = localDate6.plusDays((long) '#');
        java.time.LocalDate localDate9 = java.time.LocalDate.now();
        java.time.chrono.ChronoPeriod chronoPeriod10 = localDate6.until((java.time.chrono.ChronoLocalDate) localDate9);
        java.time.Instant instant11 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.OffsetDateTime offsetDateTime17 = java.time.OffsetDateTime.ofInstant(instant11, (java.time.ZoneId) zoneOffset15);
        java.time.OffsetDateTime offsetDateTime19 = offsetDateTime17.minusDays((long) (short) 100);
        java.lang.String str20 = offsetDateTime17.toString();
        java.time.LocalTime localTime21 = offsetDateTime17.toLocalTime();
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset26);
        int int28 = localDateTime27.getYear();
        java.time.Instant instant29 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset33 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime34 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset33);
        java.time.OffsetDateTime offsetDateTime35 = java.time.OffsetDateTime.ofInstant(instant29, (java.time.ZoneId) zoneOffset33);
        java.time.Instant instant36 = localDateTime27.toInstant(zoneOffset33);
        java.time.ZoneOffset zoneOffset41 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime42 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset41);
        java.time.ZoneOffset zoneOffset46 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime47 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset46);
        java.time.ZonedDateTime zonedDateTime48 = java.time.ZonedDateTime.of(localDateTime42, (java.time.ZoneId) zoneOffset46);
        java.time.temporal.ChronoField chronoField50 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit51 = chronoField50.getBaseUnit();
        java.time.LocalDateTime localDateTime52 = localDateTime42.plus((long) 1970, temporalUnit51);
        java.time.ZoneOffset zoneOffset57 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime58 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset57);
        java.time.ZoneOffset zoneOffset62 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime63 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset62);
        java.time.ZonedDateTime zonedDateTime64 = java.time.ZonedDateTime.of(localDateTime58, (java.time.ZoneId) zoneOffset62);
        java.time.temporal.ChronoField chronoField66 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit67 = chronoField66.getBaseUnit();
        java.time.LocalDateTime localDateTime68 = localDateTime58.plus((long) 1970, temporalUnit67);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime69 = localDateTime52.minus((long) 43, temporalUnit67);
        java.time.Instant instant70 = instant36.plus((long) 16384, temporalUnit67);
        java.time.LocalTime localTime71 = localTime21.plus((long) 64, temporalUnit67);
        java.time.ZoneOffset zoneOffset76 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime77 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset76);
        java.time.ZoneOffset zoneOffset81 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime82 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset81);
        java.time.ZonedDateTime zonedDateTime83 = java.time.ZonedDateTime.of(localDateTime77, (java.time.ZoneId) zoneOffset81);
        java.time.temporal.ChronoField chronoField85 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit86 = chronoField85.getBaseUnit();
        java.time.LocalDateTime localDateTime87 = localDateTime77.plus((long) 1970, temporalUnit86);
        java.time.LocalTime localTime88 = localTime21.plus(4L, temporalUnit86);
        java.time.LocalDateTime localDateTime89 = localDate6.atTime(localTime88);
        java.time.chrono.Chronology chronology90 = localDate6.getChronology();
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronoPeriod10);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(offsetDateTime17);
        org.junit.Assert.assertNotNull(offsetDateTime19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1970-01-01T00:00:52+00:00:52" + "'", str20, "1970-01-01T00:00:52+00:00:52");
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1970 + "'", int28 == 1970);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(zoneOffset33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(offsetDateTime35);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(zoneOffset41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(zoneOffset46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(zonedDateTime48);
        org.junit.Assert.assertTrue("'" + chronoField50 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField50.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit51 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit51.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(zoneOffset57);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(zoneOffset62);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(zonedDateTime64);
        org.junit.Assert.assertTrue("'" + chronoField66 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField66.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit67 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit67.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime69);
        org.junit.Assert.assertNotNull(instant70);
        org.junit.Assert.assertNotNull(localTime71);
        org.junit.Assert.assertNotNull(zoneOffset76);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(zoneOffset81);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(zonedDateTime83);
        org.junit.Assert.assertTrue("'" + chronoField85 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField85.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit86 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit86.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertNotNull(localTime88);
        org.junit.Assert.assertNotNull(localDateTime89);
        org.junit.Assert.assertNotNull(chronology90);
    }

    @Test
    public void test3135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3135");
        java.util.logging.Level level0 = java.util.logging.Level.OFF;
        java.lang.String str1 = level0.toString();
        org.junit.Assert.assertNotNull(level0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "OFF" + "'", str1, "OFF");
    }

    @Test
    public void test3136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3136");
        com.google.javascript.jscomp.JSModule jSModule1 = new com.google.javascript.jscomp.JSModule("/");
        java.util.Set<com.google.javascript.jscomp.JSModule> jSModuleSet2 = jSModule1.getAllDependencies();
        com.google.javascript.jscomp.JSModule jSModule4 = new com.google.javascript.jscomp.JSModule("/");
        java.util.List<java.lang.String> strList5 = jSModule4.getProvides();
        jSModule1.addDependency(jSModule4);
        java.lang.String str7 = jSModule4.getName();
        org.junit.Assert.assertNotNull(jSModuleSet2);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/" + "'", str7, "/");
    }

    @Test
    public void test3137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3137");
        java.io.PrintStream printStream0 = null;
        com.google.javascript.jscomp.Compiler compiler1 = new com.google.javascript.jscomp.Compiler(printStream0);
        com.google.javascript.jscomp.ErrorManager errorManager2 = compiler1.getErrorManager();
        com.google.javascript.jscomp.SourceFile sourceFile4 = com.google.javascript.jscomp.SourceFile.fromFile("/");
        com.google.javascript.jscomp.SourceFile.Generator generator6 = null;
        com.google.javascript.jscomp.SourceFile sourceFile7 = com.google.javascript.jscomp.SourceFile.fromGenerator("hi!", generator6);
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions8.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat11 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions8.errorFormat = errorFormat11;
        compilerOptions8.setRemoveDeadCode(false);
        com.google.javascript.jscomp.Result result15 = compiler1.compile(sourceFile4, sourceFile7, compilerOptions8);
        java.util.Map<java.lang.String, java.lang.Integer> strMap16 = result15.cssNames;
        java.lang.String str17 = result15.debugLog;
        java.lang.String str18 = result15.externExport;
        org.junit.Assert.assertNotNull(errorManager2);
        org.junit.Assert.assertNotNull(sourceFile4);
        org.junit.Assert.assertNotNull(sourceFile7);
        org.junit.Assert.assertNotNull(errorFormat11);
        org.junit.Assert.assertNotNull(result15);
        org.junit.Assert.assertNull(strMap16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(str18);
    }

    @Test
    public void test3138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3138");
        java.io.InputStream inputStream0 = null;
        java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite> priorityMap1 = new java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite>();
        java.lang.Object obj2 = priorityMap1.clone();
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.newBuilder();
        boolean boolean4 = priorityMap1.containsValue((java.lang.Object) builder3);
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder6 = builder3.setName("java.nio.ByteBufferAsDoubleBufferB[pos=0 lim=12 cap=12]");
        com.google.protobuf.ByteString byteString7 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder8 = builder3.mergeFrom(byteString7);
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions9 = com.google.protobuf.DescriptorProtos.EnumValueOptions.getDefaultInstance();
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder10 = com.google.protobuf.DescriptorProtos.EnumValueOptions.newBuilder(enumValueOptions9);
        java.io.InputStream inputStream11 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder12 = builder10.mergeFrom(inputStream11);
        com.google.protobuf.ByteString byteString13 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto14 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.parseFrom(byteString13);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite15 = null;
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto enumValueDescriptorProto16 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.parseFrom(byteString13, extensionRegistryLite15);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite17 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions18 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteString13, extensionRegistryLite17);
        java.io.InputStream inputStream19 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite20 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location21 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream19, extensionRegistryLite20);
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder22 = builder12.mergeFrom(byteString13, extensionRegistryLite20);
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto23 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.parseFrom(byteString7, extensionRegistryLite20);
        com.google.javascript.jscomp.FunctionInformationMap functionInformationMap24 = com.google.javascript.jscomp.FunctionInformationMap.parseFrom(inputStream0, extensionRegistryLite20);
        int int25 = functionInformationMap24.getModuleCount();
        com.google.javascript.jscomp.FunctionInformationMap.Builder builder26 = functionInformationMap24.toBuilder();
        java.util.List<com.google.javascript.jscomp.FunctionInformationMap.Entry> entryList27 = functionInformationMap24.getEntryList();
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "{}");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(byteString7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(enumValueOptions9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(byteString13);
        org.junit.Assert.assertNotNull(methodDescriptorProto14);
        org.junit.Assert.assertNotNull(enumValueDescriptorProto16);
        org.junit.Assert.assertNotNull(methodOptions18);
        org.junit.Assert.assertNotNull(extensionRegistryLite20);
        org.junit.Assert.assertNotNull(location21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(serviceDescriptorProto23);
        org.junit.Assert.assertNotNull(functionInformationMap24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(entryList27);
    }

    @Test
    public void test3139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3139");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder3 = builder2.clearSourceCodeInfo();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder4 = builder2.getSourceCodeInfoBuilder();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo sourceCodeInfo5 = builder4.getDefaultInstanceForType();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder6 = sourceCodeInfo5.newBuilderForType();
        java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite> priorityMap7 = new java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite>();
        java.lang.Object obj8 = priorityMap7.clone();
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder9 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.newBuilder();
        boolean boolean10 = priorityMap7.containsValue((java.lang.Object) builder9);
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder12 = builder9.setName("java.nio.ByteBufferAsDoubleBufferB[pos=0 lim=12 cap=12]");
        com.google.protobuf.ByteString byteString13 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder14 = builder9.mergeFrom(byteString13);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite15 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder16 = builder6.mergeFrom(byteString13, extensionRegistryLite15);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite17 = null;
        com.google.protobuf.DescriptorProtos.ServiceOptions serviceOptions18 = com.google.protobuf.DescriptorProtos.ServiceOptions.parseFrom(byteString13, extensionRegistryLite17);
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor19 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int20 = serviceOptions18.getRepeatedFieldCount(fieldDescriptor19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(sourceCodeInfo5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "{}");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(byteString13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(serviceOptions18);
    }

    @Test
    public void test3140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3140");
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output2 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream4 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output2, (int) 'a');
        byte[] byteArray5 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite6 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions7 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray5, extensionRegistryLite6);
        output2.write(byteArray5);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder9 = builder0.mergeFrom(byteArray5);
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions10 = builder0.buildPartial();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder11 = builder0.addUninterpretedOptionBuilder();
        boolean boolean12 = builder11.hasNegativeIntValue();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder14 = builder11.setNegativeIntValue((long) 55);
        java.lang.String str15 = builder14.getAggregateValue();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(output2);
        org.junit.Assert.assertNotNull(codedOutputStream4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(methodOptions7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(methodOptions10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test3141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3141");
        int int0 = com.google.javascript.rhino.Node.STATIC_SOURCE_FILE;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 51 + "'", int0 == 51);
    }

    @Test
    public void test3142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3142");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean4 = node3.isFromExterns();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean9 = node8.isFromExterns();
        java.lang.String str10 = node8.toString();
        com.google.javascript.rhino.Node node11 = node3.copyInformationFrom(node8);
        int int12 = node3.getLineno();
        int int13 = node3.getType();
        boolean boolean14 = node3.isBreak();
        boolean boolean15 = node3.isComma();
        boolean boolean16 = node3.isUnscopedQualifiedName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER 52.0 0" + "'", str10, "NUMBER 52.0 0");
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 39 + "'", int13 == 39);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test3143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3143");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder3 = builder2.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions fileOptions4 = builder2.getOptions();
        java.time.Instant instant5 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset9);
        java.time.OffsetDateTime offsetDateTime11 = java.time.OffsetDateTime.ofInstant(instant5, (java.time.ZoneId) zoneOffset9);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZoneOffset zoneOffset20 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset20);
        java.time.ZonedDateTime zonedDateTime22 = java.time.ZonedDateTime.of(localDateTime16, (java.time.ZoneId) zoneOffset20);
        java.time.Clock clock23 = java.time.Clock.fixed(instant5, (java.time.ZoneId) zoneOffset20);
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.now(clock23);
        java.time.LocalDate localDate25 = java.time.LocalDate.now(clock23);
        com.google.protobuf.Descriptors.Descriptor descriptor26 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto27 = descriptor26.toProto();
        boolean boolean28 = descriptorProto27.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList29 = descriptorProto27.getNestedTypeList();
        int int30 = descriptorProto27.getExtensionRangeCount();
        boolean boolean31 = localDate25.equals((java.lang.Object) descriptorProto27);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder32 = descriptorProto27.newBuilderForType();
        java.util.List<com.google.protobuf.DescriptorProtos.FieldDescriptorProto> fieldDescriptorProtoList33 = builder32.getExtensionList();
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder34 = builder32.addNestedTypeBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder35 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder37 = builder35.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder38 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label39 = builder38.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder40 = builder35.addExtension(builder38);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder41 = builder35.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder42 = builder41.getOptionsBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder43 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder45 = builder43.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder46 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label47 = builder46.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder48 = builder43.addExtension(builder46);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder49 = builder43.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder50 = builder49.getOptionsBuilder();
        java.io.InputStream inputStream51 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions52 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream51);
        boolean boolean53 = enumOptions52.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder54 = builder50.mergeFrom(enumOptions52);
        com.google.protobuf.UnknownFieldSet unknownFieldSet55 = builder50.getUnknownFields();
        com.google.protobuf.CodedOutputStream codedOutputStream56 = null;
        unknownFieldSet55.writeTo(codedOutputStream56);
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder58 = builder42.setUnknownFields(unknownFieldSet55);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder59 = builder32.setUnknownFields(unknownFieldSet55);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder60 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder62 = builder60.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder63 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label64 = builder63.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder65 = builder60.addExtension(builder63);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder66 = builder60.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder67 = builder66.getOptionsBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder68 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder70 = builder68.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder71 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label72 = builder71.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder73 = builder68.addExtension(builder71);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder74 = builder68.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder75 = builder74.getOptionsBuilder();
        java.io.InputStream inputStream76 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions77 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream76);
        boolean boolean78 = enumOptions77.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder79 = builder75.mergeFrom(enumOptions77);
        com.google.protobuf.UnknownFieldSet unknownFieldSet80 = builder75.getUnknownFields();
        com.google.protobuf.CodedOutputStream codedOutputStream81 = null;
        unknownFieldSet80.writeTo(codedOutputStream81);
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder83 = builder67.setUnknownFields(unknownFieldSet80);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto84 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.getDefaultInstance();
        boolean boolean85 = methodDescriptorProto84.hasOutputType();
        byte[] byteArray86 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite87 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions88 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray86, extensionRegistryLite87);
        com.google.protobuf.CodedOutputStream codedOutputStream91 = com.google.protobuf.CodedOutputStream.newInstance(byteArray86, (int) (short) 0, 1);
        methodDescriptorProto84.writeTo(codedOutputStream91);
        unknownFieldSet80.writeTo(codedOutputStream91);
        unknownFieldSet55.writeAsMessageSetTo(codedOutputStream91);
        fileOptions4.writeTo(codedOutputStream91);
        // The following exception was thrown during execution in test generation
        try {
            codedOutputStream91.writeInt32NoTag(15);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(fileOptions4);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(offsetDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zoneOffset20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zonedDateTime22);
        org.junit.Assert.assertNotNull(clock23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(descriptor26);
        org.junit.Assert.assertNotNull(descriptorProto27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(fieldDescriptorProtoList33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + label39 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label39.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + label47 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label47.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(enumOptions52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(unknownFieldSet55);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertTrue("'" + label64 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label64.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertTrue("'" + label72 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label72.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(enumOptions77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(unknownFieldSet80);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(methodDescriptorProto84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[]");
        org.junit.Assert.assertNotNull(methodOptions88);
        org.junit.Assert.assertNotNull(codedOutputStream91);
    }

    @Test
    public void test3144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3144");
        java.io.File file2 = null;
        java.io.File file3 = java.io.File.createTempFile("hi!", "ISO", file2);
        boolean boolean6 = file3.setWritable(false, false);
        java.net.URI uRI7 = file3.toURI();
        java.io.PrintStream printStream8 = new java.io.PrintStream(file3);
        printStream8.print((int) (byte) 0);
        printStream8.print(10.0d);
        printStream8.close();
        java.lang.String[] strArray17 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        boolean boolean20 = strSet18.isEmpty();
        java.nio.ByteBuffer byteBuffer22 = java.nio.ByteBuffer.allocate(100);
        boolean boolean23 = strSet18.equals((java.lang.Object) byteBuffer22);
        java.nio.IntBuffer intBuffer24 = byteBuffer22.asIntBuffer();
        double double25 = byteBuffer22.getDouble();
        java.nio.ByteBuffer byteBuffer28 = byteBuffer22.put((int) (short) 1, (byte) 1);
        byte[] byteArray29 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite30 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions31 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray29, extensionRegistryLite30);
        com.google.protobuf.CodedOutputStream codedOutputStream34 = com.google.protobuf.CodedOutputStream.newInstance(byteArray29, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite35 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto36 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray29, extensionRegistryLite35);
        com.google.protobuf.CodedOutputStream codedOutputStream37 = com.google.protobuf.CodedOutputStream.newInstance(byteArray29);
        java.nio.ByteBuffer byteBuffer38 = byteBuffer22.get(byteArray29);
        printStream8.write(byteArray29, (int) '/', (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream44 = new java.io.PrintStream((java.io.OutputStream) printStream8, true, "/tmp/hi!117357409022682367ISO");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: /tmp/hi!117357409022682367ISO");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file3.toString(), "/tmp/hi!7767083516142847746ISO");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(uRI7);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(intBuffer24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.0d + "'", double25 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(methodOptions31);
        org.junit.Assert.assertNotNull(codedOutputStream34);
        org.junit.Assert.assertNotNull(fileDescriptorProto36);
        org.junit.Assert.assertNotNull(codedOutputStream37);
        org.junit.Assert.assertNotNull(byteBuffer38);
    }

    @Test
    public void test3145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3145");
        java.io.PrintStream printStream0 = null;
        com.google.javascript.jscomp.Compiler compiler1 = new com.google.javascript.jscomp.Compiler(printStream0);
        com.google.javascript.jscomp.ErrorManager errorManager2 = compiler1.getErrorManager();
        com.google.javascript.jscomp.ErrorManager errorManager3 = compiler1.getErrorManager();
        compiler1.reportCodeChange();
        com.google.javascript.rhino.Node node5 = compiler1.getRoot();
        com.google.javascript.jscomp.PassConfig passConfig6 = null;
        // The following exception was thrown during execution in test generation
        try {
            compiler1.setPassConfig(passConfig6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(errorManager2);
        org.junit.Assert.assertNotNull(errorManager3);
        org.junit.Assert.assertNull(node5);
    }

    @Test
    public void test3146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3146");
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto0 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.getDefaultInstance();
        boolean boolean1 = methodDescriptorProto0.hasOutputType();
        com.google.protobuf.CodedOutputStream codedOutputStream2 = null;
        methodDescriptorProto0.writeTo(codedOutputStream2);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder4 = methodDescriptorProto0.toBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder5 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder6 = builder5.clearCcGenericServices();
        boolean boolean7 = builder5.isInitialized();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder9 = builder5.setCcGenericServices(true);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder10 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label11 = builder10.getLabel();
        com.google.protobuf.ByteString byteString12 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder13 = builder10.mergeFrom(byteString12);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite14 = null;
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder15 = builder9.mergeFrom(byteString12, extensionRegistryLite14);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite16 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions17 = com.google.protobuf.DescriptorProtos.EnumValueOptions.parseFrom(byteString12, extensionRegistryLite16);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite18 = null;
        com.google.protobuf.DescriptorProtos.MessageOptions messageOptions19 = com.google.protobuf.DescriptorProtos.MessageOptions.parseFrom(byteString12, extensionRegistryLite18);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite20 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder21 = builder4.mergeFrom(byteString12, extensionRegistryLite20);
        java.lang.String str22 = builder4.getInputType();
        org.junit.Assert.assertNotNull(methodDescriptorProto0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + label11 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label11.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(byteString12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(enumValueOptions17);
        org.junit.Assert.assertNotNull(messageOptions19);
        org.junit.Assert.assertNotNull(extensionRegistryLite20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
    }

    @Test
    public void test3147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3147");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.of(localDateTime4, (java.time.ZoneId) zoneOffset8);
        java.time.temporal.ChronoField chronoField12 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit13 = chronoField12.getBaseUnit();
        java.time.LocalDateTime localDateTime14 = localDateTime4.plus((long) 1970, temporalUnit13);
        java.time.LocalDateTime localDateTime16 = localDateTime4.withHour((int) (short) 1);
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.OffsetDateTime offsetDateTime19 = java.time.OffsetDateTime.of(localDateTime4, zoneOffset18);
        java.lang.String str20 = zoneOffset18.toString();
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertTrue("'" + chronoField12 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField12.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit13 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit13.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(offsetDateTime19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:52" + "'", str20, "+00:00:52");
    }

    @Test
    public void test3148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3148");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet5 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet5, strArray4);
        boolean boolean7 = strSet5.isEmpty();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocate(100);
        boolean boolean10 = strSet5.equals((java.lang.Object) byteBuffer9);
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        boolean boolean17 = strSet15.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream18 = strSet15.stream();
        boolean boolean19 = strSet5.retainAll((java.util.Collection<java.lang.String>) strSet15);
        compilerOptions0.setExtraAnnotationNames((java.util.Set<java.lang.String>) strSet15);
        compilerOptions0.setNameAnonymousFunctionsOnly(true);
        com.google.common.collect.Multimap<com.google.javascript.jscomp.CustomPassExecutionTime, com.google.javascript.jscomp.CompilerPass> customPassExecutionTimeMultimap23 = compilerOptions0.customPasses;
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strStream18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(customPassExecutionTimeMultimap23);
    }

    @Test
    public void test3149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3149");
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto0 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.getDefaultInstance();
        boolean boolean1 = serviceDescriptorProto0.hasOptions();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder2 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.newBuilder(serviceDescriptorProto0);
        byte[] byteArray3 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite4 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions5 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray3, extensionRegistryLite4);
        com.google.protobuf.CodedInputStream codedInputStream8 = com.google.protobuf.CodedInputStream.newInstance(byteArray3, 16, (int) 'a');
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder9 = builder2.mergeFrom(byteArray3);
        java.util.List<com.google.protobuf.DescriptorProtos.MethodDescriptorProto> methodDescriptorProtoList10 = builder9.getMethodList();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder11 = builder9.clearMethod();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto12 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.getDefaultInstance();
        boolean boolean13 = serviceDescriptorProto12.hasOptions();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder14 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.newBuilder(serviceDescriptorProto12);
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto15 = builder14.buildPartial();
        com.google.protobuf.DescriptorProtos.ServiceOptions serviceOptions16 = builder14.getOptions();
        com.google.protobuf.DescriptorProtos.ServiceOptions.Builder builder17 = serviceOptions16.toBuilder();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder18 = builder11.setOptions(builder17);
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto19 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.getDefaultInstance();
        boolean boolean20 = serviceDescriptorProto19.hasOptions();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder21 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.newBuilder(serviceDescriptorProto19);
        byte[] byteArray22 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite23 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions24 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray22, extensionRegistryLite23);
        com.google.protobuf.CodedInputStream codedInputStream27 = com.google.protobuf.CodedInputStream.newInstance(byteArray22, 16, (int) 'a');
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder28 = builder21.mergeFrom(byteArray22);
        java.util.List<com.google.protobuf.DescriptorProtos.MethodDescriptorProto> methodDescriptorProtoList29 = builder28.getMethodList();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder30 = builder28.clearMethod();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto31 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.getDefaultInstance();
        boolean boolean32 = serviceDescriptorProto31.hasOptions();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder33 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.newBuilder(serviceDescriptorProto31);
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto34 = builder33.buildPartial();
        com.google.protobuf.DescriptorProtos.ServiceOptions serviceOptions35 = builder33.getOptions();
        com.google.protobuf.DescriptorProtos.ServiceOptions.Builder builder36 = serviceOptions35.toBuilder();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder37 = builder30.setOptions(builder36);
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder38 = builder18.setOptions(builder36);
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor39 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.Message.Builder builder40 = builder38.newBuilderForField(fieldDescriptor39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serviceDescriptorProto0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(methodOptions5);
        org.junit.Assert.assertNotNull(codedInputStream8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(methodDescriptorProtoList10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(serviceDescriptorProto12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(serviceDescriptorProto15);
        org.junit.Assert.assertNotNull(serviceOptions16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(serviceDescriptorProto19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(methodOptions24);
        org.junit.Assert.assertNotNull(codedInputStream27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(methodDescriptorProtoList29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(serviceDescriptorProto31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(serviceDescriptorProto34);
        org.junit.Assert.assertNotNull(serviceOptions35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test3150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3150");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType4 = jSTypeRegistry2.createObjectType(objectType3);
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.jstype.ObjectType objectType8 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry7.createObjectType(objectType8);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair10 = objectType4.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType9);
        com.google.javascript.rhino.Node node11 = objectType4.getRootNode();
        com.google.javascript.rhino.jstype.EnumType enumType12 = objectType4.toMaybeEnumType();
        boolean boolean13 = objectType4.isBooleanValueType();
        com.google.javascript.rhino.ErrorReporter errorReporter14 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter14, false);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode17 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry16.setResolveMode(resolveMode17);
        com.google.javascript.rhino.ErrorReporter errorReporter19 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter19, false);
        com.google.javascript.rhino.jstype.ObjectType objectType22 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType23 = jSTypeRegistry21.createObjectType(objectType22);
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24, false);
        com.google.javascript.rhino.jstype.ObjectType objectType27 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType28 = jSTypeRegistry26.createObjectType(objectType27);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair29 = objectType23.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType28);
        java.lang.String str30 = objectType28.getDisplayName();
        objectType28.clearResolved();
        com.google.javascript.rhino.jstype.JSType jSType32 = jSTypeRegistry16.createNullableType((com.google.javascript.rhino.jstype.JSType) objectType28);
        boolean boolean33 = jSType32.isEmptyType();
        com.google.javascript.rhino.ErrorReporter errorReporter34 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry36 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter34, false);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        com.google.javascript.rhino.jstype.ObjectType objectType40 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType41 = jSTypeRegistry39.createObjectType(objectType40);
        com.google.javascript.rhino.ErrorReporter errorReporter42 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry44 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter42, false);
        com.google.javascript.rhino.jstype.ObjectType objectType45 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType46 = jSTypeRegistry44.createObjectType(objectType45);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair47 = objectType41.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType46);
        java.lang.String str48 = objectType46.getDisplayName();
        java.util.Collection<com.google.javascript.rhino.jstype.FunctionType> functionTypeCollection49 = jSTypeRegistry36.getDirectImplementors(objectType46);
        java.lang.String str50 = objectType46.toDebugHashCodeString();
        com.google.javascript.rhino.jstype.JSType jSType51 = jSType32.getGreatestSubtype((com.google.javascript.rhino.jstype.JSType) objectType46);
        boolean boolean52 = jSType32.matchesNumberContext();
        boolean boolean53 = objectType4.isSubtype(jSType32);
        org.junit.Assert.assertNotNull(objectType4);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertNotNull(typePair10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNull(enumType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + resolveMode17 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode17.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType23);
        org.junit.Assert.assertNotNull(objectType28);
        org.junit.Assert.assertNotNull(typePair29);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(jSType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(objectType41);
        org.junit.Assert.assertNotNull(objectType46);
        org.junit.Assert.assertNotNull(typePair47);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(functionTypeCollection49);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "{1794090772}" + "'", str50, "{1794090772}");
        org.junit.Assert.assertNotNull(jSType51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test3151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3151");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset10);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.of(localDateTime11, (java.time.ZoneId) zoneOffset15);
        java.time.Clock clock18 = java.time.Clock.fixed(instant0, (java.time.ZoneId) zoneOffset15);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.now(clock18);
        java.time.LocalDate localDate20 = java.time.LocalDate.now(clock18);
        com.google.protobuf.Descriptors.Descriptor descriptor21 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto22 = descriptor21.toProto();
        boolean boolean23 = descriptorProto22.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList24 = descriptorProto22.getNestedTypeList();
        int int25 = descriptorProto22.getExtensionRangeCount();
        boolean boolean26 = localDate20.equals((java.lang.Object) descriptorProto22);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder27 = descriptorProto22.newBuilderForType();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList28 = builder27.getNestedTypeList();
        com.google.protobuf.UnknownFieldSet unknownFieldSet29 = builder27.getUnknownFields();
        byte[] byteArray30 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite31 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions32 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray30, extensionRegistryLite31);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite33 = null;
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto enumDescriptorProto34 = com.google.protobuf.DescriptorProtos.EnumDescriptorProto.parseFrom(byteArray30, extensionRegistryLite33);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder35 = enumDescriptorProto34.newBuilderForType();
        boolean boolean36 = builder35.hasOptions();
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder37 = builder27.addEnumType(builder35);
        java.io.InputStream inputStream38 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions39 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream38);
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder40 = enumOptions39.toBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder41 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder43 = builder41.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder44 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label45 = builder44.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder46 = builder41.addExtension(builder44);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder47 = builder41.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder48 = builder47.getOptionsBuilder();
        java.io.InputStream inputStream49 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions50 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream49);
        boolean boolean51 = enumOptions50.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder52 = builder48.mergeFrom(enumOptions50);
        com.google.protobuf.UnknownFieldSet unknownFieldSet53 = builder48.getUnknownFields();
        byte[] byteArray54 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite55 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions56 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray54, extensionRegistryLite55);
        com.google.protobuf.CodedOutputStream codedOutputStream59 = com.google.protobuf.CodedOutputStream.newInstance(byteArray54, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite60 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto61 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray54, extensionRegistryLite60);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite62 = null;
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto63 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.parseFrom(byteArray54, extensionRegistryLite62);
        com.google.protobuf.UnknownFieldSet unknownFieldSet64 = com.google.protobuf.UnknownFieldSet.parseFrom(byteArray54);
        com.google.protobuf.ByteString byteString65 = unknownFieldSet64.toByteString();
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite66 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder67 = builder48.mergeFrom(byteString65, extensionRegistryLite66);
        com.google.protobuf.DescriptorProtos.EnumOptionsOrBuilder[] enumOptionsOrBuilderArray68 = new com.google.protobuf.DescriptorProtos.EnumOptionsOrBuilder[] { builder67 };
        com.google.common.collect.Ordering<com.google.protobuf.DescriptorProtos.EnumOptionsOrBuilder> enumOptionsOrBuilderOrdering69 = com.google.common.collect.Ordering.explicit((com.google.protobuf.DescriptorProtos.EnumOptionsOrBuilder) enumOptions39, enumOptionsOrBuilderArray68);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder70 = builder35.mergeOptions(enumOptions39);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(clock18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(descriptor21);
        org.junit.Assert.assertNotNull(descriptorProto22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(descriptorProtoList28);
        org.junit.Assert.assertNotNull(unknownFieldSet29);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(methodOptions32);
        org.junit.Assert.assertNotNull(enumDescriptorProto34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(enumOptions39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + label45 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label45.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(enumOptions50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(unknownFieldSet53);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[]");
        org.junit.Assert.assertNotNull(methodOptions56);
        org.junit.Assert.assertNotNull(codedOutputStream59);
        org.junit.Assert.assertNotNull(fileDescriptorProto61);
        org.junit.Assert.assertNotNull(serviceDescriptorProto63);
        org.junit.Assert.assertNotNull(unknownFieldSet64);
        org.junit.Assert.assertNotNull(byteString65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(enumOptionsOrBuilderArray68);
        org.junit.Assert.assertNotNull(enumOptionsOrBuilderOrdering69);
        org.junit.Assert.assertNotNull(builder70);
    }

    @Test
    public void test3152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3152");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet5 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet5, strArray4);
        boolean boolean7 = strSet5.isEmpty();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocate(100);
        boolean boolean10 = strSet5.equals((java.lang.Object) byteBuffer9);
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        boolean boolean17 = strSet15.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream18 = strSet15.stream();
        boolean boolean19 = strSet5.retainAll((java.util.Collection<java.lang.String>) strSet15);
        compilerOptions0.setExtraAnnotationNames((java.util.Set<java.lang.String>) strSet15);
        compilerOptions0.setTweakToDoubleLiteral("ISO", (double) (short) 1);
        compilerOptions0.setUnaliasableGlobals("{1572375491}");
        compilerOptions0.setRemoveAbstractMethods(false);
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet32 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet32, strArray31);
        boolean boolean34 = strSet32.isEmpty();
        java.nio.ByteBuffer byteBuffer36 = java.nio.ByteBuffer.allocate(100);
        boolean boolean37 = strSet32.equals((java.lang.Object) byteBuffer36);
        int int38 = strSet32.size();
        compilerOptions0.aliasableStrings = strSet32;
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode40 = compilerOptions0.getLanguageIn();
        compilerOptions0.setCollapseProperties(false);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strStream18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 3 + "'", int38 == 3);
        org.junit.Assert.assertTrue("'" + languageMode40 + "' != '" + com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT3 + "'", languageMode40.equals(com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT3));
    }

    @Test
    public void test3153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3153");
        com.google.javascript.rhino.JSDocInfo.NamePosition namePosition0 = new com.google.javascript.rhino.JSDocInfo.NamePosition();
        int int1 = namePosition0.getEndLine();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
    }

    @Test
    public void test3154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3154");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy5 = null;
        compilerOptions0.variableRenaming = variableRenamingPolicy5;
        compilerOptions0.setSpecializeInitialModule(true);
        compilerOptions0.setAliasKeywords(true);
        boolean boolean11 = compilerOptions0.isRemoveUnusedClassProperties();
        java.util.Map<java.lang.String, java.lang.Object> strMap12 = null;
        compilerOptions0.setDefineReplacements(strMap12);
        org.junit.Assert.assertNotNull(errorFormat3);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test3155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3155");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset10);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.of(localDateTime11, (java.time.ZoneId) zoneOffset15);
        java.time.Clock clock18 = java.time.Clock.fixed(instant0, (java.time.ZoneId) zoneOffset15);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.now(clock18);
        java.time.LocalDate localDate20 = java.time.LocalDate.now(clock18);
        com.google.protobuf.Descriptors.Descriptor descriptor21 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto22 = descriptor21.toProto();
        boolean boolean23 = descriptorProto22.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList24 = descriptorProto22.getNestedTypeList();
        int int25 = descriptorProto22.getExtensionRangeCount();
        boolean boolean26 = localDate20.equals((java.lang.Object) descriptorProto22);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder27 = descriptorProto22.newBuilderForType();
        java.util.List<com.google.protobuf.DescriptorProtos.FieldDescriptorProto> fieldDescriptorProtoList28 = builder27.getExtensionList();
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.Builder builder29 = com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.newBuilder();
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder30 = builder27.addExtensionRange(builder29);
        com.google.protobuf.Descriptors.Descriptor descriptor31 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto32 = descriptor31.toProto();
        boolean boolean33 = descriptorProto32.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList34 = descriptorProto32.getNestedTypeList();
        int int35 = descriptorProto32.getExtensionCount();
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder36 = builder30.mergeFrom(descriptorProto32);
        boolean boolean37 = builder30.hasName();
        com.google.protobuf.UnknownFieldSet unknownFieldSet38 = builder30.getUnknownFields();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(clock18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(descriptor21);
        org.junit.Assert.assertNotNull(descriptorProto22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(fieldDescriptorProtoList28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(descriptor31);
        org.junit.Assert.assertNotNull(descriptorProto32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(unknownFieldSet38);
    }

    @Test
    public void test3156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3156");
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto0 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.getDefaultInstance();
        boolean boolean1 = methodDescriptorProto0.hasOutputType();
        com.google.protobuf.CodedOutputStream codedOutputStream2 = null;
        methodDescriptorProto0.writeTo(codedOutputStream2);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder4 = methodDescriptorProto0.toBuilder();
        java.time.Instant instant5 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset9);
        java.time.OffsetDateTime offsetDateTime11 = java.time.OffsetDateTime.ofInstant(instant5, (java.time.ZoneId) zoneOffset9);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZoneOffset zoneOffset20 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset20);
        java.time.ZonedDateTime zonedDateTime22 = java.time.ZonedDateTime.of(localDateTime16, (java.time.ZoneId) zoneOffset20);
        java.time.Clock clock23 = java.time.Clock.fixed(instant5, (java.time.ZoneId) zoneOffset20);
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.now(clock23);
        java.time.LocalDate localDate25 = java.time.LocalDate.now(clock23);
        com.google.protobuf.Descriptors.Descriptor descriptor26 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto27 = descriptor26.toProto();
        boolean boolean28 = descriptorProto27.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList29 = descriptorProto27.getNestedTypeList();
        int int30 = descriptorProto27.getExtensionRangeCount();
        boolean boolean31 = localDate25.equals((java.lang.Object) descriptorProto27);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder32 = descriptorProto27.newBuilderForType();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList33 = builder32.getNestedTypeList();
        com.google.protobuf.UnknownFieldSet unknownFieldSet34 = builder32.getUnknownFields();
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder35 = builder32.addEnumTypeBuilder();
        com.google.protobuf.ByteString byteString36 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite37 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto38 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteString36, extensionRegistryLite37);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder39 = builder35.mergeFrom(byteString36);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder40 = builder4.mergeFrom(byteString36);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder42 = builder40.setName("");
        com.google.protobuf.UnknownFieldSet unknownFieldSet43 = builder42.getUnknownFields();
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder45 = builder42.setName("/tmp/hi!5708068306138499226ISO");
        java.lang.String str46 = builder42.getOutputType();
        org.junit.Assert.assertNotNull(methodDescriptorProto0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(offsetDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zoneOffset20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zonedDateTime22);
        org.junit.Assert.assertNotNull(clock23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(descriptor26);
        org.junit.Assert.assertNotNull(descriptorProto27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(descriptorProtoList33);
        org.junit.Assert.assertNotNull(unknownFieldSet34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(byteString36);
        org.junit.Assert.assertNotNull(fileDescriptorProto38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(unknownFieldSet43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
    }

    @Test
    public void test3157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3157");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.of(localDateTime4, (java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime10.minusSeconds((long) '#');
        java.time.OffsetDateTime offsetDateTime13 = zonedDateTime10.toOffsetDateTime();
        java.time.OffsetDateTime offsetDateTime15 = offsetDateTime13.plusNanos(3600000L);
        java.time.Instant instant16 = java.time.Instant.from((java.time.temporal.TemporalAccessor) offsetDateTime13);
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset21);
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset26);
        java.time.ZonedDateTime zonedDateTime28 = java.time.ZonedDateTime.of(localDateTime22, (java.time.ZoneId) zoneOffset26);
        java.time.ZoneOffset zoneOffset33 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime34 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset33);
        java.time.ZoneOffset zoneOffset38 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime39 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset38);
        java.time.ZonedDateTime zonedDateTime40 = java.time.ZonedDateTime.of(localDateTime34, (java.time.ZoneId) zoneOffset38);
        java.time.ZonedDateTime zonedDateTime42 = zonedDateTime40.withYear((int) (short) 1);
        java.time.temporal.ChronoField chronoField43 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit44 = chronoField43.getBaseUnit();
        java.time.ZonedDateTime zonedDateTime45 = zonedDateTime40.truncatedTo(temporalUnit44);
        java.time.LocalDateTime localDateTime46 = localDateTime22.plus(999L, temporalUnit44);
        boolean boolean47 = temporalUnit44.isTimeBased();
        java.time.Instant instant48 = instant16.minus(16L, temporalUnit44);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(offsetDateTime13);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(zonedDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(zoneOffset38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(zonedDateTime40);
        org.junit.Assert.assertNotNull(zonedDateTime42);
        org.junit.Assert.assertTrue("'" + chronoField43 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField43.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit44 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit44.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(zonedDateTime45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(instant48);
    }

    @Test
    public void test3158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3158");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node((int) (byte) -1);
        node1.putIntProp((int) (byte) -1, 9);
        boolean boolean5 = node1.isVar();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean10 = node9.isStringKey();
        boolean boolean11 = node9.isThrow();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = null;
        node9.setJSDocInfo(jSDocInfo12);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node9.getStaticSourceFile();
        boolean boolean15 = node9.isWhile();
        com.google.javascript.rhino.Node node16 = node1.useSourceInfoIfMissingFromForTree(node9);
        com.google.javascript.rhino.Node node17 = node9.removeFirstChild();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNull(node17);
    }

    @Test
    public void test3159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3159");
        java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite> priorityMap0 = new java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite>();
        java.lang.Object obj1 = priorityMap0.clone();
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder2 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.newBuilder();
        boolean boolean3 = priorityMap0.containsValue((java.lang.Object) builder2);
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder5 = builder2.setName("java.nio.ByteBufferAsDoubleBufferB[pos=0 lim=12 cap=12]");
        com.google.protobuf.ByteString byteString6 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder7 = builder2.mergeFrom(byteString6);
        com.google.protobuf.DescriptorProtos.ServiceOptions serviceOptions8 = com.google.protobuf.DescriptorProtos.ServiceOptions.parseFrom(byteString6);
        boolean boolean9 = serviceOptions8.isInitialized();
        com.google.protobuf.DescriptorProtos.ServiceOptions.Builder builder10 = serviceOptions8.newBuilderForType();
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj12 = builder10.getField(fieldDescriptor11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "{}");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(byteString6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(serviceOptions8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test3160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3160");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        java.util.List<com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder> builderList3 = builder0.getServiceBuilderList();
        com.google.protobuf.DescriptorProtos.SourceCodeInfoOrBuilder sourceCodeInfoOrBuilder4 = builder0.getSourceCodeInfoOrBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = builder0.clearDependency();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder6 = builder0.addExtensionBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder8 = builder0.setPackage("NUMBER 52.0 0 (hi!)");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builderList3);
        org.junit.Assert.assertNotNull(sourceCodeInfoOrBuilder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test3161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3161");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset10);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.of(localDateTime11, (java.time.ZoneId) zoneOffset15);
        java.time.Clock clock18 = java.time.Clock.fixed(instant0, (java.time.ZoneId) zoneOffset15);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.now(clock18);
        java.time.LocalDate localDate20 = java.time.LocalDate.now(clock18);
        com.google.protobuf.Descriptors.Descriptor descriptor21 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto22 = descriptor21.toProto();
        boolean boolean23 = descriptorProto22.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList24 = descriptorProto22.getNestedTypeList();
        int int25 = descriptorProto22.getExtensionRangeCount();
        boolean boolean26 = localDate20.equals((java.lang.Object) descriptorProto22);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder27 = descriptorProto22.newBuilderForType();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList28 = builder27.getNestedTypeList();
        com.google.protobuf.UnknownFieldSet unknownFieldSet29 = builder27.getUnknownFields();
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder30 = builder27.addEnumTypeBuilder();
        com.google.protobuf.ByteString byteString31 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite32 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto33 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteString31, extensionRegistryLite32);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder34 = builder30.mergeFrom(byteString31);
        java.util.List<com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto> enumValueDescriptorProtoList35 = builder34.getValueList();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder36 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label37 = builder36.getLabel();
        com.google.protobuf.ByteString byteString38 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder39 = builder36.mergeFrom(byteString38);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite40 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location41 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(byteString38, extensionRegistryLite40);
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto42 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.parseFrom(byteString38);
        com.google.javascript.jscomp.CompilerOptions compilerOptions43 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions43.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat46 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions43.errorFormat = errorFormat46;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy48 = null;
        compilerOptions43.variableRenaming = variableRenamingPolicy48;
        compilerOptions43.setSummaryDetailLevel(999);
        boolean boolean52 = compilerOptions43.getInferTypes();
        boolean boolean53 = compilerOptions43.ideMode;
        compilerOptions43.setGroupVariableDeclarations(true);
        compilerOptions43.setCheckCaja(false);
        boolean boolean58 = byteString38.equals((java.lang.Object) compilerOptions43);
        java.lang.String[] strArray62 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet63 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet63, strArray62);
        boolean boolean65 = strSet63.isEmpty();
        java.nio.ByteBuffer byteBuffer67 = java.nio.ByteBuffer.allocate(100);
        boolean boolean68 = strSet63.equals((java.lang.Object) byteBuffer67);
        java.nio.IntBuffer intBuffer69 = byteBuffer67.asIntBuffer();
        double double70 = byteBuffer67.getDouble();
        java.nio.ByteBuffer byteBuffer73 = byteBuffer67.put((int) (short) 1, (byte) 1);
        byte[] byteArray74 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite75 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions76 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray74, extensionRegistryLite75);
        com.google.protobuf.CodedOutputStream codedOutputStream79 = com.google.protobuf.CodedOutputStream.newInstance(byteArray74, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite80 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto81 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray74, extensionRegistryLite80);
        com.google.protobuf.CodedOutputStream codedOutputStream82 = com.google.protobuf.CodedOutputStream.newInstance(byteArray74);
        java.nio.ByteBuffer byteBuffer83 = byteBuffer67.get(byteArray74);
        byteString38.copyTo(byteArray74, (int) (short) 0);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder86 = builder34.mergeFrom(byteString38);
        com.google.protobuf.UnknownFieldSet unknownFieldSet87 = builder86.getUnknownFields();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(clock18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(descriptor21);
        org.junit.Assert.assertNotNull(descriptorProto22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(descriptorProtoList28);
        org.junit.Assert.assertNotNull(unknownFieldSet29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(byteString31);
        org.junit.Assert.assertNotNull(fileDescriptorProto33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(enumValueDescriptorProtoList35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + label37 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label37.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(byteString38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(location41);
        org.junit.Assert.assertNotNull(serviceDescriptorProto42);
        org.junit.Assert.assertNotNull(errorFormat46);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(intBuffer69);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertNotNull(methodOptions76);
        org.junit.Assert.assertNotNull(codedOutputStream79);
        org.junit.Assert.assertNotNull(fileDescriptorProto81);
        org.junit.Assert.assertNotNull(codedOutputStream82);
        org.junit.Assert.assertNotNull(byteBuffer83);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(unknownFieldSet87);
    }

    @Test
    public void test3162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3162");
        java.io.PrintStream printStream0 = null;
        com.google.javascript.jscomp.Compiler compiler1 = new com.google.javascript.jscomp.Compiler(printStream0);
        com.google.javascript.jscomp.SourceMap sourceMap2 = compiler1.getSourceMap();
        java.util.stream.LongStream longStream4 = java.util.stream.LongStream.of((long) (-1));
        com.google.common.collect.ImmutableMap<com.google.javascript.jscomp.Compiler, java.util.stream.LongStream> compilerMap5 = com.google.common.collect.ImmutableMap.of(compiler1, longStream4);
        java.util.stream.DoubleStream doubleStream6 = longStream4.asDoubleStream();
        double[] doubleArray7 = doubleStream6.toArray();
        java.util.stream.DoubleStream doubleStream8 = java.util.stream.DoubleStream.of(doubleArray7);
        java.util.PrimitiveIterator.OfDouble ofDouble9 = doubleStream8.iterator();
        org.junit.Assert.assertNull(sourceMap2);
        org.junit.Assert.assertNotNull(longStream4);
        org.junit.Assert.assertNotNull(compilerMap5);
        org.junit.Assert.assertNotNull(doubleStream6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0]");
        org.junit.Assert.assertNotNull(doubleStream8);
        org.junit.Assert.assertNotNull(ofDouble9);
    }

    @Test
    public void test3163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3163");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.of(localDateTime4, (java.time.ZoneId) zoneOffset8);
        java.time.temporal.ChronoField chronoField12 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit13 = chronoField12.getBaseUnit();
        java.time.LocalDateTime localDateTime14 = localDateTime4.plus((long) 1970, temporalUnit13);
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset19);
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset24);
        java.time.ZonedDateTime zonedDateTime26 = java.time.ZonedDateTime.of(localDateTime20, (java.time.ZoneId) zoneOffset24);
        java.time.temporal.ChronoField chronoField28 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit29 = chronoField28.getBaseUnit();
        java.time.LocalDateTime localDateTime30 = localDateTime20.plus((long) 1970, temporalUnit29);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime31 = localDateTime14.minus((long) 43, temporalUnit29);
        java.time.ZoneOffset zoneOffset35 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime36 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset35);
        java.time.ZoneOffset zoneOffset40 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime41 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset40);
        java.time.ZonedDateTime zonedDateTime42 = java.time.ZonedDateTime.of(localDateTime36, (java.time.ZoneId) zoneOffset40);
        java.time.temporal.ChronoField chronoField43 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        boolean boolean44 = localDateTime36.isSupported((java.time.temporal.TemporalField) chronoField43);
        java.time.LocalDateTime localDateTime46 = localDateTime36.plusHours((long) 9);
        boolean boolean47 = localDateTime14.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime36);
        java.time.LocalDateTime localDateTime49 = localDateTime36.minusWeeks((long) '\000');
        java.time.ZoneOffset zoneOffset53 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime54 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset53);
        java.time.ZoneOffset zoneOffset58 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime59 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset58);
        java.time.ZonedDateTime zonedDateTime60 = java.time.ZonedDateTime.of(localDateTime54, (java.time.ZoneId) zoneOffset58);
        java.time.Period period61 = java.time.Period.ZERO;
        java.time.chrono.ChronoPeriod chronoPeriod62 = period61.normalized();
        java.time.temporal.ChronoField chronoField63 = java.time.temporal.ChronoField.EPOCH_DAY;
        java.time.Instant instant64 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset68 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime69 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset68);
        java.time.OffsetDateTime offsetDateTime70 = java.time.OffsetDateTime.ofInstant(instant64, (java.time.ZoneId) zoneOffset68);
        java.time.temporal.ValueRange valueRange71 = chronoField63.rangeRefinedBy((java.time.temporal.TemporalAccessor) offsetDateTime70);
        java.time.temporal.Temporal temporal72 = period61.subtractFrom((java.time.temporal.Temporal) offsetDateTime70);
        int int73 = offsetDateTime70.getMonthValue();
        java.time.ZonedDateTime zonedDateTime74 = zonedDateTime60.with((java.time.temporal.TemporalAdjuster) offsetDateTime70);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime75 = zonedDateTime74.toLocalDateTime();
        int int76 = localDateTime36.compareTo(localDateChronoLocalDateTime75);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertTrue("'" + chronoField12 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField12.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit13 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit13.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertTrue("'" + chronoField28 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField28.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit29 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit29.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime31);
        org.junit.Assert.assertNotNull(zoneOffset35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(zoneOffset40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(zonedDateTime42);
        org.junit.Assert.assertTrue("'" + chronoField43 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField43.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(zoneOffset53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(zoneOffset58);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(zonedDateTime60);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(chronoPeriod62);
        org.junit.Assert.assertTrue("'" + chronoField63 + "' != '" + java.time.temporal.ChronoField.EPOCH_DAY + "'", chronoField63.equals(java.time.temporal.ChronoField.EPOCH_DAY));
        org.junit.Assert.assertNotNull(instant64);
        org.junit.Assert.assertNotNull(zoneOffset68);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(offsetDateTime70);
        org.junit.Assert.assertNotNull(valueRange71);
        org.junit.Assert.assertNotNull(temporal72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(zonedDateTime74);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
    }

    @Test
    public void test3164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3164");
        int int0 = com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 4 + "'", int0 == 4);
    }

    @Test
    public void test3165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3165");
        java.time.OffsetTime offsetTime0 = java.time.OffsetTime.MAX;
        int int1 = offsetTime0.getHour();
        java.time.OffsetTime offsetTime3 = offsetTime0.minusSeconds((long) '\000');
        java.time.OffsetTime offsetTime5 = offsetTime0.plusSeconds(999L);
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset9);
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset14);
        java.time.ZonedDateTime zonedDateTime16 = java.time.ZonedDateTime.of(localDateTime10, (java.time.ZoneId) zoneOffset14);
        java.time.temporal.ChronoField chronoField18 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit19 = chronoField18.getBaseUnit();
        java.time.LocalDateTime localDateTime20 = localDateTime10.plus((long) 1970, temporalUnit19);
        java.time.LocalTime localTime21 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localDateTime20);
        java.time.Period period22 = java.time.Period.ZERO;
        java.time.chrono.ChronoPeriod chronoPeriod23 = period22.normalized();
        java.time.Period period25 = period22.plusMonths((long) ' ');
        java.time.LocalDateTime localDateTime26 = localDateTime20.minus((java.time.temporal.TemporalAmount) period22);
        java.time.Period period28 = period22.withMonths(999);
        java.time.Period period30 = period22.withDays((int) (byte) -1);
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset34);
        java.time.ZoneOffset zoneOffset39 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime40 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset39);
        java.time.ZonedDateTime zonedDateTime41 = java.time.ZonedDateTime.of(localDateTime35, (java.time.ZoneId) zoneOffset39);
        java.time.ZonedDateTime zonedDateTime43 = zonedDateTime41.minusSeconds((long) '#');
        java.time.temporal.ChronoField chronoField44 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit45 = chronoField44.getBaseUnit();
        boolean boolean46 = zonedDateTime43.isSupported(temporalUnit45);
        java.time.ZoneOffset zoneOffset50 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime51 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset50);
        int int52 = localDateTime51.getYear();
        java.time.Instant instant53 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset57 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime58 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset57);
        java.time.OffsetDateTime offsetDateTime59 = java.time.OffsetDateTime.ofInstant(instant53, (java.time.ZoneId) zoneOffset57);
        java.time.Instant instant60 = localDateTime51.toInstant(zoneOffset57);
        java.time.ZoneOffset zoneOffset65 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime66 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset65);
        java.time.ZoneOffset zoneOffset70 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime71 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset70);
        java.time.ZonedDateTime zonedDateTime72 = java.time.ZonedDateTime.of(localDateTime66, (java.time.ZoneId) zoneOffset70);
        java.time.temporal.ChronoField chronoField74 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit75 = chronoField74.getBaseUnit();
        java.time.LocalDateTime localDateTime76 = localDateTime66.plus((long) 1970, temporalUnit75);
        java.time.ZoneOffset zoneOffset81 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime82 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset81);
        java.time.ZoneOffset zoneOffset86 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime87 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset86);
        java.time.ZonedDateTime zonedDateTime88 = java.time.ZonedDateTime.of(localDateTime82, (java.time.ZoneId) zoneOffset86);
        java.time.temporal.ChronoField chronoField90 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit91 = chronoField90.getBaseUnit();
        java.time.LocalDateTime localDateTime92 = localDateTime82.plus((long) 1970, temporalUnit91);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime93 = localDateTime76.minus((long) 43, temporalUnit91);
        java.time.Instant instant94 = instant60.plus((long) 16384, temporalUnit91);
        java.time.Instant instant96 = temporalUnit45.addTo(instant60, (long) (-1));
        java.time.temporal.Temporal temporal97 = period30.addTo((java.time.temporal.Temporal) instant60);
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetTime offsetTime98 = offsetTime5.minus((java.time.temporal.TemporalAmount) period30);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported unit: Days");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(offsetTime0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 23 + "'", int1 == 23);
        org.junit.Assert.assertNotNull(offsetTime3);
        org.junit.Assert.assertNotNull(offsetTime5);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zonedDateTime16);
        org.junit.Assert.assertTrue("'" + chronoField18 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField18.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit19 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit19.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(chronoPeriod23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(zoneOffset39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(zonedDateTime41);
        org.junit.Assert.assertNotNull(zonedDateTime43);
        org.junit.Assert.assertTrue("'" + chronoField44 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField44.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit45 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit45.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(zoneOffset50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1970 + "'", int52 == 1970);
        org.junit.Assert.assertNotNull(instant53);
        org.junit.Assert.assertNotNull(zoneOffset57);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(offsetDateTime59);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertNotNull(zoneOffset65);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(zoneOffset70);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(zonedDateTime72);
        org.junit.Assert.assertTrue("'" + chronoField74 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField74.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit75 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit75.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(zoneOffset81);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(zoneOffset86);
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertNotNull(zonedDateTime88);
        org.junit.Assert.assertTrue("'" + chronoField90 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField90.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit91 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit91.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime92);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime93);
        org.junit.Assert.assertNotNull(instant94);
        org.junit.Assert.assertNotNull(instant96);
        org.junit.Assert.assertNotNull(temporal97);
    }

    @Test
    public void test3166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3166");
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions0 = com.google.protobuf.DescriptorProtos.EnumValueOptions.getDefaultInstance();
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder1 = com.google.protobuf.DescriptorProtos.EnumValueOptions.newBuilder(enumValueOptions0);
        java.io.InputStream inputStream2 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder3 = builder1.mergeFrom(inputStream2);
        com.google.protobuf.UnknownFieldSet unknownFieldSet4 = builder3.getUnknownFields();
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder5 = builder3.clearUninterpretedOption();
        org.junit.Assert.assertNotNull(enumValueOptions0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(unknownFieldSet4);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test3167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3167");
        java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite> priorityMap0 = new java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite>();
        java.lang.Object obj1 = priorityMap0.clone();
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder2 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.newBuilder();
        boolean boolean3 = priorityMap0.containsValue((java.lang.Object) builder2);
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder5 = builder2.setName("java.nio.ByteBufferAsDoubleBufferB[pos=0 lim=12 cap=12]");
        com.google.protobuf.ByteString byteString6 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder7 = builder2.mergeFrom(byteString6);
        com.google.protobuf.DescriptorProtos.ServiceOptions serviceOptions8 = com.google.protobuf.DescriptorProtos.ServiceOptions.parseFrom(byteString6);
        boolean boolean9 = serviceOptions8.isInitialized();
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.UninterpretedOptionOrBuilder uninterpretedOptionOrBuilder11 = serviceOptions8.getUninterpretedOptionOrBuilder(102);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 102");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "{}");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(byteString6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(serviceOptions8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test3168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3168");
        com.google.javascript.jscomp.DependencyOptions dependencyOptions0 = new com.google.javascript.jscomp.DependencyOptions();
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet5 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet5, strArray4);
        boolean boolean7 = strSet5.isEmpty();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocate(100);
        boolean boolean10 = strSet5.equals((java.lang.Object) byteBuffer9);
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        boolean boolean17 = strSet15.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream18 = strSet15.stream();
        boolean boolean19 = strSet5.retainAll((java.util.Collection<java.lang.String>) strSet15);
        com.google.javascript.jscomp.DependencyOptions dependencyOptions20 = dependencyOptions0.setEntryPoints((java.util.Collection<java.lang.String>) strSet5);
        com.google.javascript.jscomp.DependencyOptions dependencyOptions22 = dependencyOptions20.setMoocherDropping(false);
        com.google.javascript.jscomp.DependencyOptions dependencyOptions24 = dependencyOptions20.setDependencyPruning(true);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strStream18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dependencyOptions20);
        org.junit.Assert.assertNotNull(dependencyOptions22);
        org.junit.Assert.assertNotNull(dependencyOptions24);
    }

    @Test
    public void test3169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3169");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.of(localDateTime4, (java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime10.plusDays((long) '4');
        java.time.ZonedDateTime zonedDateTime14 = zonedDateTime10.withMinute((int) '#');
        java.time.format.DateTimeFormatter dateTimeFormatter15 = java.time.format.DateTimeFormatter.BASIC_ISO_DATE;
        java.lang.String str16 = zonedDateTime10.format(dateTimeFormatter15);
        java.nio.CharBuffer charBuffer18 = java.nio.CharBuffer.allocate((int) ' ');
        boolean boolean19 = charBuffer18.isDirect();
        java.nio.CharBuffer charBuffer21 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer23 = charBuffer21.put('a');
        char[] charArray25 = new char[] { '4' };
        java.nio.CharBuffer charBuffer26 = charBuffer23.get(charArray25);
        java.nio.CharBuffer charBuffer27 = charBuffer23.compact();
        java.nio.CharBuffer charBuffer29 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer31 = charBuffer29.put('a');
        java.nio.CharBuffer charBuffer33 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer35 = charBuffer33.put('a');
        char[] charArray37 = new char[] { '4' };
        java.nio.CharBuffer charBuffer38 = charBuffer35.get(charArray37);
        java.nio.CharBuffer charBuffer39 = charBuffer35.compact();
        com.google.common.collect.ImmutableSet<java.lang.Appendable> appendableSet40 = com.google.common.collect.ImmutableSet.of((java.lang.Appendable) charBuffer18, (java.lang.Appendable) charBuffer23, (java.lang.Appendable) charBuffer29, (java.lang.Appendable) charBuffer39);
        java.nio.CharBuffer charBuffer41 = java.nio.CharBuffer.wrap((java.lang.CharSequence) charBuffer18);
        java.text.ParsePosition parsePosition43 = new java.text.ParsePosition(5);
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.TemporalAccessor temporalAccessor44 = dateTimeFormatter15.parse((java.lang.CharSequence) charBuffer18, parsePosition43);
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text '????????????????????????????????' could not be parsed at index 5");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(zonedDateTime14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "19700101+000052" + "'", str16, "19700101+000052");
        org.junit.Assert.assertNotNull(charBuffer18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(charBuffer21);
        org.junit.Assert.assertNotNull(charBuffer23);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer26);
        org.junit.Assert.assertNotNull(charBuffer27);
        org.junit.Assert.assertNotNull(charBuffer29);
        org.junit.Assert.assertNotNull(charBuffer31);
        org.junit.Assert.assertNotNull(charBuffer33);
        org.junit.Assert.assertNotNull(charBuffer35);
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer38);
        org.junit.Assert.assertNotNull(charBuffer39);
        org.junit.Assert.assertNotNull(appendableSet40);
        org.junit.Assert.assertNotNull(charBuffer41);
    }

    @Test
    public void test3170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3170");
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        boolean boolean6 = strSet4.isEmpty();
        java.nio.ByteBuffer byteBuffer8 = java.nio.ByteBuffer.allocate(100);
        boolean boolean9 = strSet4.equals((java.lang.Object) byteBuffer8);
        int int10 = strSet4.size();
        boolean boolean11 = strSet4.isEmpty();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test3171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3171");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy5 = null;
        compilerOptions0.variableRenaming = variableRenamingPolicy5;
        compilerOptions0.setSummaryDetailLevel(999);
        boolean boolean9 = compilerOptions0.getInferTypes();
        boolean boolean10 = compilerOptions0.ideMode;
        compilerOptions0.setGroupVariableDeclarations(true);
        compilerOptions0.coalesceVariableNames = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions18 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions18.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat21 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions18.errorFormat = errorFormat21;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy23 = null;
        compilerOptions18.variableRenaming = variableRenamingPolicy23;
        compilerOptions18.setSummaryDetailLevel(999);
        compilerOptions18.checkSuspiciousCode = true;
        byte[] byteArray29 = compilerOptions18.inputPropertyMapSerialized;
        com.google.javascript.jscomp.CompilerOptions compilerOptions30 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions30.optimizeCalls = false;
        compilerOptions30.preferLineBreakAtEndOfFile = false;
        boolean boolean35 = compilerOptions30.markNoSideEffectCalls;
        boolean boolean36 = compilerOptions30.labelRenaming;
        com.google.javascript.jscomp.DependencyOptions dependencyOptions37 = new com.google.javascript.jscomp.DependencyOptions();
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        boolean boolean44 = strSet42.isEmpty();
        java.nio.ByteBuffer byteBuffer46 = java.nio.ByteBuffer.allocate(100);
        boolean boolean47 = strSet42.equals((java.lang.Object) byteBuffer46);
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet52 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet52, strArray51);
        boolean boolean54 = strSet52.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream55 = strSet52.stream();
        boolean boolean56 = strSet42.retainAll((java.util.Collection<java.lang.String>) strSet52);
        com.google.javascript.jscomp.DependencyOptions dependencyOptions57 = dependencyOptions37.setEntryPoints((java.util.Collection<java.lang.String>) strSet42);
        compilerOptions30.setDependencyOptions(dependencyOptions37);
        com.google.javascript.jscomp.CheckLevel checkLevel59 = compilerOptions30.checkGlobalThisLevel;
        compilerOptions18.checkMissingReturn = checkLevel59;
        com.google.javascript.jscomp.DiagnosticType diagnosticType61 = com.google.javascript.jscomp.Compiler.MOTION_ITERATIONS_ERROR;
        java.lang.String[] strArray65 = new java.lang.String[] { "FileDescriptorProto", "16:00:52+00:00:52", "Exceeded max number of code motion iterations: {0}" };
        com.google.javascript.jscomp.JSError jSError66 = com.google.javascript.jscomp.JSError.make("java.nio.HeapFloatBuffer[pos=0 lim=6 cap=6]", (int) (short) 10, (int) ':', checkLevel59, diagnosticType61, strArray65);
        compilerOptions0.checkRequires = checkLevel59;
        com.google.javascript.jscomp.CompilerOptions compilerOptions68 = new com.google.javascript.jscomp.CompilerOptions();
        java.lang.String[] strArray72 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet73 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet73, strArray72);
        boolean boolean75 = strSet73.isEmpty();
        java.nio.ByteBuffer byteBuffer77 = java.nio.ByteBuffer.allocate(100);
        boolean boolean78 = strSet73.equals((java.lang.Object) byteBuffer77);
        java.lang.String[] strArray82 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet83 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet83, strArray82);
        boolean boolean85 = strSet83.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream86 = strSet83.stream();
        boolean boolean87 = strSet73.retainAll((java.util.Collection<java.lang.String>) strSet83);
        compilerOptions68.setExtraAnnotationNames((java.util.Set<java.lang.String>) strSet83);
        java.util.Iterator<java.lang.String> strItor89 = strSet83.iterator();
        java.util.Spliterator<java.lang.String> strSpliterator90 = strSet83.spliterator();
        compilerOptions0.stripNamePrefixes = strSet83;
        compilerOptions0.generatePseudoNames = true;
        org.junit.Assert.assertNotNull(errorFormat3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(errorFormat21);
        org.junit.Assert.assertNull(byteArray29);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strStream55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dependencyOptions57);
        org.junit.Assert.assertTrue("'" + checkLevel59 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel59.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(diagnosticType61);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(jSError66);
        org.junit.Assert.assertNotNull(strArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(strArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(strStream86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(strItor89);
        org.junit.Assert.assertNotNull(strSpliterator90);
    }

    @Test
    public void test3172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3172");
        com.google.protobuf.DescriptorProtos.UninterpretedOption.NamePart namePart0 = com.google.protobuf.DescriptorProtos.UninterpretedOption.NamePart.getDefaultInstance();
        boolean boolean1 = namePart0.hasNamePart();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.NamePart.Builder builder2 = namePart0.newBuilderForType();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = builder3.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder6 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label7 = builder6.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder8 = builder3.addExtension(builder6);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder9 = builder3.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder10 = builder9.getOptionsBuilder();
        java.io.InputStream inputStream11 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions12 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream11);
        boolean boolean13 = enumOptions12.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder14 = builder10.mergeFrom(enumOptions12);
        com.google.protobuf.UnknownFieldSet unknownFieldSet15 = builder10.getUnknownFields();
        com.google.protobuf.CodedOutputStream codedOutputStream16 = null;
        unknownFieldSet15.writeTo(codedOutputStream16);
        byte[] byteArray18 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite19 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions20 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray18, extensionRegistryLite19);
        com.google.protobuf.CodedOutputStream codedOutputStream23 = com.google.protobuf.CodedOutputStream.newInstance(byteArray18, (int) (short) 0, 1);
        com.google.protobuf.CodedOutputStream codedOutputStream26 = com.google.protobuf.CodedOutputStream.newInstance(byteArray18, (int) ' ', 0);
        java.io.InputStream inputStream27 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location28 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream27);
        boolean boolean29 = location28.isInitialized();
        codedOutputStream26.writeGroupNoTag((com.google.protobuf.MessageLite) location28);
        unknownFieldSet15.writeAsMessageSetTo(codedOutputStream26);
        byte[] byteArray32 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite33 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions34 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray32, extensionRegistryLite33);
        com.google.protobuf.CodedOutputStream codedOutputStream37 = com.google.protobuf.CodedOutputStream.newInstance(byteArray32, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite38 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto39 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray32, extensionRegistryLite38);
        com.google.protobuf.CodedOutputStream codedOutputStream40 = com.google.protobuf.CodedOutputStream.newInstance(byteArray32);
        unknownFieldSet15.writeAsMessageSetTo(codedOutputStream40);
        boolean boolean42 = unknownFieldSet15.isInitialized();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.NamePart.Builder builder43 = builder2.setUnknownFields(unknownFieldSet15);
        java.io.InputStream inputStream44 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite45 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean46 = builder43.mergeDelimitedFrom(inputStream44, extensionRegistryLite45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namePart0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + label7 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label7.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(enumOptions12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(unknownFieldSet15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(methodOptions20);
        org.junit.Assert.assertNotNull(codedOutputStream23);
        org.junit.Assert.assertNotNull(codedOutputStream26);
        org.junit.Assert.assertNotNull(location28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(methodOptions34);
        org.junit.Assert.assertNotNull(codedOutputStream37);
        org.junit.Assert.assertNotNull(fileDescriptorProto39);
        org.junit.Assert.assertNotNull(codedOutputStream40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test3173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3173");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        int int3 = builder2.getExtensionCount();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test3174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3174");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.of(localDateTime4, (java.time.ZoneId) zoneOffset8);
        java.time.temporal.ChronoField chronoField12 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit13 = chronoField12.getBaseUnit();
        java.time.LocalDateTime localDateTime14 = localDateTime4.plus((long) 1970, temporalUnit13);
        java.time.LocalDateTime localDateTime16 = localDateTime4.withHour((int) (short) 1);
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.OffsetDateTime offsetDateTime19 = java.time.OffsetDateTime.of(localDateTime4, zoneOffset18);
        java.time.LocalDateTime localDateTime20 = offsetDateTime19.toLocalDateTime();
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset24);
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset29);
        java.time.ZonedDateTime zonedDateTime31 = java.time.ZonedDateTime.of(localDateTime25, (java.time.ZoneId) zoneOffset29);
        java.time.temporal.ChronoField chronoField32 = java.time.temporal.ChronoField.EPOCH_DAY;
        java.time.Instant instant33 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset37);
        java.time.OffsetDateTime offsetDateTime39 = java.time.OffsetDateTime.ofInstant(instant33, (java.time.ZoneId) zoneOffset37);
        java.time.temporal.ValueRange valueRange40 = chronoField32.rangeRefinedBy((java.time.temporal.TemporalAccessor) offsetDateTime39);
        long long41 = zonedDateTime31.getLong((java.time.temporal.TemporalField) chronoField32);
        boolean boolean42 = offsetDateTime19.isSupported((java.time.temporal.TemporalField) chronoField32);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertTrue("'" + chronoField12 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField12.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit13 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit13.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(offsetDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(zonedDateTime31);
        org.junit.Assert.assertTrue("'" + chronoField32 + "' != '" + java.time.temporal.ChronoField.EPOCH_DAY + "'", chronoField32.equals(java.time.temporal.ChronoField.EPOCH_DAY));
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(offsetDateTime39);
        org.junit.Assert.assertNotNull(valueRange40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test3175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3175");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8);
        boolean boolean11 = strSet9.isEmpty();
        java.nio.ByteBuffer byteBuffer13 = java.nio.ByteBuffer.allocate(100);
        boolean boolean14 = strSet9.equals((java.lang.Object) byteBuffer13);
        int int15 = strSet9.size();
        compilerOptions0.stripTypes = strSet9;
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto17 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.getDefaultInstance();
        boolean boolean18 = methodDescriptorProto17.hasOutputType();
        com.google.protobuf.CodedOutputStream codedOutputStream19 = null;
        methodDescriptorProto17.writeTo(codedOutputStream19);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder21 = methodDescriptorProto17.toBuilder();
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder23 = builder21.setOutputType("java.nio.HeapFloatBuffer[pos=0 lim=6 cap=6]");
        byte[] byteArray24 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite25 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions26 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray24, extensionRegistryLite25);
        com.google.protobuf.DescriptorProtos.UninterpretedOption uninterpretedOption27 = com.google.protobuf.DescriptorProtos.UninterpretedOption.parseFrom(byteArray24);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder28 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label29 = builder28.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto30 = builder28.buildPartial();
        int int31 = fieldDescriptorProto30.getSerializedSize();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder32 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto30);
        java.io.InputStream inputStream33 = null;
        java.io.InputStream inputStream34 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite35 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location36 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream34, extensionRegistryLite35);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder37 = builder32.mergeFrom(inputStream33, extensionRegistryLite35);
        com.google.javascript.jscomp.FunctionInformationMap functionInformationMap38 = com.google.javascript.jscomp.FunctionInformationMap.parseFrom(byteArray24, extensionRegistryLite35);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder39 = builder21.mergeFrom(byteArray24);
        compilerOptions0.setInputPropertyMapSerialized(byteArray24);
        org.junit.Assert.assertNotNull(errorFormat3);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertNotNull(methodDescriptorProto17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(methodOptions26);
        org.junit.Assert.assertNotNull(uninterpretedOption27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + label29 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label29.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(extensionRegistryLite35);
        org.junit.Assert.assertNotNull(location36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(functionInformationMap38);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test3176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3176");
        java.time.format.FormatStyle formatStyle0 = java.time.format.FormatStyle.LONG;
        org.junit.Assert.assertTrue("'" + formatStyle0 + "' != '" + java.time.format.FormatStyle.LONG + "'", formatStyle0.equals(java.time.format.FormatStyle.LONG));
    }

    @Test
    public void test3177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3177");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.DescriptorProtos.FieldOptions fieldOptions1 = com.google.protobuf.DescriptorProtos.FieldOptions.parseFrom(inputStream0);
        boolean boolean2 = fieldOptions1.getDeprecated();
        org.junit.Assert.assertNotNull(fieldOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test3178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3178");
        com.google.protobuf.UnknownFieldSet.Field.Builder builder0 = com.google.protobuf.UnknownFieldSet.Field.newBuilder();
        java.time.Instant instant1 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset5);
        java.time.OffsetDateTime offsetDateTime7 = java.time.OffsetDateTime.ofInstant(instant1, (java.time.ZoneId) zoneOffset5);
        java.time.ZoneOffset zoneOffset11 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset11);
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset16);
        java.time.ZonedDateTime zonedDateTime18 = java.time.ZonedDateTime.of(localDateTime12, (java.time.ZoneId) zoneOffset16);
        java.time.Clock clock19 = java.time.Clock.fixed(instant1, (java.time.ZoneId) zoneOffset16);
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.now(clock19);
        java.time.LocalDate localDate21 = java.time.LocalDate.now(clock19);
        com.google.protobuf.Descriptors.Descriptor descriptor22 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto23 = descriptor22.toProto();
        boolean boolean24 = descriptorProto23.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList25 = descriptorProto23.getNestedTypeList();
        int int26 = descriptorProto23.getExtensionRangeCount();
        boolean boolean27 = localDate21.equals((java.lang.Object) descriptorProto23);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder28 = descriptorProto23.newBuilderForType();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList29 = builder28.getNestedTypeList();
        com.google.protobuf.UnknownFieldSet unknownFieldSet30 = builder28.getUnknownFields();
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder31 = builder28.addEnumTypeBuilder();
        com.google.protobuf.ByteString byteString32 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite33 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto34 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteString32, extensionRegistryLite33);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder35 = builder31.mergeFrom(byteString32);
        com.google.protobuf.UnknownFieldSet.Field.Builder builder36 = builder0.addLengthDelimited(byteString32);
        com.google.protobuf.UnknownFieldSet.Field field37 = com.google.protobuf.UnknownFieldSet.Field.getDefaultInstance();
        com.google.protobuf.UnknownFieldSet.Field.Builder builder38 = builder0.mergeFrom(field37);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zonedDateTime18);
        org.junit.Assert.assertNotNull(clock19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(descriptor22);
        org.junit.Assert.assertNotNull(descriptorProto23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(descriptorProtoList29);
        org.junit.Assert.assertNotNull(unknownFieldSet30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(byteString32);
        org.junit.Assert.assertNotNull(fileDescriptorProto34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(field37);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test3179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3179");
        byte[] byteArray0 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions2 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray0, extensionRegistryLite1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite3 = null;
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto enumDescriptorProto4 = com.google.protobuf.DescriptorProtos.EnumDescriptorProto.parseFrom(byteArray0, extensionRegistryLite3);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder5 = enumDescriptorProto4.newBuilderForType();
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto enumDescriptorProto6 = builder5.build();
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor7 = null;
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions8.setRecordFunctionInformation(true);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder11 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder13 = builder11.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder14 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label15 = builder14.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder16 = builder11.addExtension(builder14);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder17 = builder11.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions18 = builder17.getOptions();
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder19 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output21 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream23 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output21, (int) 'a');
        byte[] byteArray24 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite25 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions26 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray24, extensionRegistryLite25);
        output21.write(byteArray24);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder28 = builder19.mergeFrom(byteArray24);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder29 = builder17.mergeFrom(byteArray24);
        compilerOptions8.setInputVariableMapSerialized(byteArray24);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite31 = null;
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto enumDescriptorProto32 = com.google.protobuf.DescriptorProtos.EnumDescriptorProto.parseFrom(byteArray24, extensionRegistryLite31);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder33 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder35 = builder33.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder36 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label37 = builder36.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder38 = builder33.addExtension(builder36);
        boolean boolean39 = builder36.hasDefaultValue();
        java.io.InputStream inputStream40 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite41 = null;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder42 = builder36.mergeFrom(inputStream40, extensionRegistryLite41);
        java.io.InputStream inputStream43 = null;
        java.io.InputStream inputStream44 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite45 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location46 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream44, extensionRegistryLite45);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder47 = builder42.mergeFrom(inputStream43, extensionRegistryLite45);
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location48 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(byteArray24, extensionRegistryLite45);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder49 = builder5.setField(fieldDescriptor7, (java.lang.Object) extensionRegistryLite45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(methodOptions2);
        org.junit.Assert.assertNotNull(enumDescriptorProto4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(enumDescriptorProto6);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + label15 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label15.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(enumOptions18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(output21);
        org.junit.Assert.assertNotNull(codedOutputStream23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(methodOptions26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(enumDescriptorProto32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + label37 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label37.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(extensionRegistryLite45);
        org.junit.Assert.assertNotNull(location46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(location48);
    }

    @Test
    public void test3180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3180");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        boolean boolean1 = charset0.canEncode();
        java.nio.charset.CharsetEncoder charsetEncoder2 = charset0.newEncoder();
        float float3 = charsetEncoder2.maxBytesPerChar();
        java.nio.charset.CharsetEncoder charsetEncoder4 = charsetEncoder2.reset();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder5 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label6 = builder5.getLabel();
        com.google.protobuf.ByteString byteString7 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder8 = builder5.mergeFrom(byteString7);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite9 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location10 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(byteString7, extensionRegistryLite9);
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto11 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.parseFrom(byteString7);
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions12.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat15 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions12.errorFormat = errorFormat15;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy17 = null;
        compilerOptions12.variableRenaming = variableRenamingPolicy17;
        compilerOptions12.setSummaryDetailLevel(999);
        boolean boolean21 = compilerOptions12.getInferTypes();
        boolean boolean22 = compilerOptions12.ideMode;
        compilerOptions12.setGroupVariableDeclarations(true);
        compilerOptions12.setCheckCaja(false);
        boolean boolean27 = byteString7.equals((java.lang.Object) compilerOptions12);
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet32 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet32, strArray31);
        boolean boolean34 = strSet32.isEmpty();
        java.nio.ByteBuffer byteBuffer36 = java.nio.ByteBuffer.allocate(100);
        boolean boolean37 = strSet32.equals((java.lang.Object) byteBuffer36);
        java.nio.IntBuffer intBuffer38 = byteBuffer36.asIntBuffer();
        double double39 = byteBuffer36.getDouble();
        java.nio.ByteBuffer byteBuffer42 = byteBuffer36.put((int) (short) 1, (byte) 1);
        byte[] byteArray43 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite44 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions45 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray43, extensionRegistryLite44);
        com.google.protobuf.CodedOutputStream codedOutputStream48 = com.google.protobuf.CodedOutputStream.newInstance(byteArray43, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite49 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto50 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray43, extensionRegistryLite49);
        com.google.protobuf.CodedOutputStream codedOutputStream51 = com.google.protobuf.CodedOutputStream.newInstance(byteArray43);
        java.nio.ByteBuffer byteBuffer52 = byteBuffer36.get(byteArray43);
        byteString7.copyTo(byteArray43, (int) (short) 0);
        boolean boolean55 = charsetEncoder4.isLegalReplacement(byteArray43);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder56 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label57 = builder56.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto58 = builder56.buildPartial();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder59 = builder56.clear();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder61 = builder59.setNumber((int) (short) 100);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder62 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder64 = builder62.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FileOptionsOrBuilder fileOptionsOrBuilder65 = builder64.getOptionsOrBuilder();
        byte[] byteArray66 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite67 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions68 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray66, extensionRegistryLite67);
        com.google.protobuf.CodedOutputStream codedOutputStream71 = com.google.protobuf.CodedOutputStream.newInstance(byteArray66, (int) (short) 0, 1);
        com.google.protobuf.CodedOutputStream codedOutputStream74 = com.google.protobuf.CodedOutputStream.newInstance(byteArray66, (int) ' ', 0);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder75 = builder64.mergeFrom(byteArray66);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder76 = builder59.mergeFrom(byteArray66);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.charset.CharsetEncoder charsetEncoder77 = charsetEncoder4.replaceWith(byteArray66);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Empty replacement");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(charsetEncoder2);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 1.0f + "'", float3 == 1.0f);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + label6 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label6.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(byteString7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(location10);
        org.junit.Assert.assertNotNull(serviceDescriptorProto11);
        org.junit.Assert.assertNotNull(errorFormat15);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(intBuffer38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(methodOptions45);
        org.junit.Assert.assertNotNull(codedOutputStream48);
        org.junit.Assert.assertNotNull(fileDescriptorProto50);
        org.junit.Assert.assertNotNull(codedOutputStream51);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertTrue("'" + label57 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label57.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(fileOptionsOrBuilder65);
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[]");
        org.junit.Assert.assertNotNull(methodOptions68);
        org.junit.Assert.assertNotNull(codedOutputStream71);
        org.junit.Assert.assertNotNull(codedOutputStream74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder76);
    }

    @Test
    public void test3181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3181");
        java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite> priorityMap0 = new java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite>();
        java.lang.Object obj1 = priorityMap0.clone();
        java.util.Set<java.util.Map.Entry<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite>> priorityEntrySet2 = priorityMap0.entrySet();
        priorityMap0.clear();
        java.time.zone.ZoneOffsetTransitionRule.TimeDefinition timeDefinition4 = java.time.zone.ZoneOffsetTransitionRule.TimeDefinition.WALL;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        int int10 = localDateTime9.getYear();
        java.time.Instant instant11 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.OffsetDateTime offsetDateTime17 = java.time.OffsetDateTime.ofInstant(instant11, (java.time.ZoneId) zoneOffset15);
        java.time.Instant instant18 = localDateTime9.toInstant(zoneOffset15);
        java.time.ZoneOffset zoneOffset20 = java.time.ZoneOffset.ofHours(9);
        java.time.temporal.ChronoField chronoField23 = java.time.temporal.ChronoField.OFFSET_SECONDS;
        java.time.Instant instant24 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset28 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset28);
        java.time.OffsetDateTime offsetDateTime30 = java.time.OffsetDateTime.ofInstant(instant24, (java.time.ZoneId) zoneOffset28);
        java.time.OffsetDateTime offsetDateTime32 = offsetDateTime30.minusDays((long) (short) 100);
        java.lang.String str33 = offsetDateTime30.toString();
        java.time.temporal.ChronoField chronoField34 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        int int35 = offsetDateTime30.get((java.time.temporal.TemporalField) chronoField34);
        java.time.OffsetDateTime offsetDateTime37 = offsetDateTime30.withDayOfMonth((int) (short) 10);
        java.time.ZoneOffset zoneOffset38 = java.time.ZoneOffset.MAX;
        java.time.OffsetDateTime offsetDateTime39 = offsetDateTime37.withOffsetSameLocal(zoneOffset38);
        boolean boolean40 = chronoField23.isSupportedBy((java.time.temporal.TemporalAccessor) zoneOffset38);
        java.time.LocalDateTime localDateTime41 = java.time.LocalDateTime.ofEpochSecond((long) 8, 10, zoneOffset38);
        java.time.LocalDateTime localDateTime42 = timeDefinition4.createDateTime(localDateTime9, zoneOffset20, zoneOffset38);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder43 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder45 = builder43.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder46 = builder45.clearSourceCodeInfo();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder47 = builder45.getSourceCodeInfoBuilder();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo sourceCodeInfo48 = builder47.getDefaultInstanceForType();
        int int49 = sourceCodeInfo48.getSerializedSize();
        boolean boolean50 = priorityMap0.remove((java.lang.Object) timeDefinition4, (java.lang.Object) int49);
        com.google.javascript.jscomp.WarningsGuard.Priority priority51 = com.google.javascript.jscomp.WarningsGuard.Priority.MAX;
        com.google.protobuf.Descriptors.Descriptor descriptor52 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto53 = descriptor52.toProto();
        boolean boolean54 = descriptorProto53.isInitialized();
        com.google.protobuf.DescriptorProtos.MessageOptions messageOptions55 = descriptorProto53.getOptions();
        com.google.protobuf.DescriptorProtos.MessageOptions.Builder builder56 = messageOptions55.newBuilderForType();
        com.google.protobuf.Message message57 = builder56.buildPartial();
        int int58 = message57.getSerializedSize();
        com.google.protobuf.MessageLite messageLite59 = priorityMap0.putIfAbsent(priority51, (com.google.protobuf.MessageLite) message57);
        java.util.Enumeration<com.google.protobuf.MessageLite> messageLiteEnumeration60 = priorityMap0.elements();
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "{}");
        org.junit.Assert.assertNotNull(priorityEntrySet2);
        org.junit.Assert.assertTrue("'" + timeDefinition4 + "' != '" + java.time.zone.ZoneOffsetTransitionRule.TimeDefinition.WALL + "'", timeDefinition4.equals(java.time.zone.ZoneOffsetTransitionRule.TimeDefinition.WALL));
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(offsetDateTime17);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(zoneOffset20);
        org.junit.Assert.assertTrue("'" + chronoField23 + "' != '" + java.time.temporal.ChronoField.OFFSET_SECONDS + "'", chronoField23.equals(java.time.temporal.ChronoField.OFFSET_SECONDS));
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(zoneOffset28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(offsetDateTime30);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1970-01-01T00:00:52+00:00:52" + "'", str33, "1970-01-01T00:00:52+00:00:52");
        org.junit.Assert.assertTrue("'" + chronoField34 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField34.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 12 + "'", int35 == 12);
        org.junit.Assert.assertNotNull(offsetDateTime37);
        org.junit.Assert.assertNotNull(zoneOffset38);
        org.junit.Assert.assertNotNull(offsetDateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(sourceCodeInfo48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + priority51 + "' != '" + com.google.javascript.jscomp.WarningsGuard.Priority.MAX + "'", priority51.equals(com.google.javascript.jscomp.WarningsGuard.Priority.MAX));
        org.junit.Assert.assertNotNull(descriptor52);
        org.junit.Assert.assertNotNull(descriptorProto53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(messageOptions55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(message57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNull(messageLite59);
        org.junit.Assert.assertNotNull(messageLiteEnumeration60);
    }

    @Test
    public void test3182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3182");
        java.time.Period period0 = java.time.Period.ZERO;
        java.time.Period period2 = period0.plusMonths(0L);
        int int3 = period0.getMonths();
        java.time.Period period5 = period0.multipliedBy(6);
        boolean boolean6 = period5.isNegative();
        java.time.chrono.IsoChronology isoChronology7 = period5.getChronology();
        java.time.ZoneOffset zoneOffset11 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset11);
        int int13 = localDateTime12.getYear();
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset17);
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset22);
        java.time.ZonedDateTime zonedDateTime24 = java.time.ZonedDateTime.of(localDateTime18, (java.time.ZoneId) zoneOffset22);
        boolean boolean25 = localDateTime12.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime18);
        java.time.LocalDateTime localDateTime27 = localDateTime12.plusNanos((long) 1024);
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoZonedDateTime<? extends java.time.chrono.ChronoLocalDate> wildcardChronoZonedDateTime28 = isoChronology7.zonedDateTime((java.time.temporal.TemporalAccessor) localDateTime12);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unable to obtain ZonedDateTime from TemporalAccessor: 1970-01-01T00:02:32 of type java.time.LocalDateTime");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(isoChronology7);
        org.junit.Assert.assertNotNull(zoneOffset11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zonedDateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(localDateTime27);
    }

    @Test
    public void test3183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3183");
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto0 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.getDefaultInstance();
        boolean boolean1 = serviceDescriptorProto0.hasOptions();
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor2 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean3 = serviceDescriptorProto0.hasField(fieldDescriptor2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serviceDescriptorProto0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test3184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3184");
        java.nio.FloatBuffer floatBuffer1 = java.nio.FloatBuffer.allocate(6);
        java.nio.FloatBuffer floatBuffer2 = floatBuffer1.asReadOnlyBuffer();
        boolean boolean3 = floatBuffer2.hasArray();
        org.junit.Assert.assertNotNull(floatBuffer1);
        org.junit.Assert.assertNotNull(floatBuffer2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test3185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3185");
        byte[] byteArray5 = new byte[] { (byte) 1, (byte) 1, (byte) 1, (byte) -1, (byte) 10 };
        com.google.protobuf.CodedInputStream codedInputStream8 = com.google.protobuf.CodedInputStream.newInstance(byteArray5, 39, (int) '+');
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.FileOptions fileOptions9 = com.google.protobuf.DescriptorProtos.FileOptions.parseFrom(byteArray5);
            org.junit.Assert.fail("Expected exception of type com.google.protobuf.InvalidProtocolBufferException; message: Protocol message contained an invalid tag (zero).");
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[1, 1, 1, -1, 10]");
        org.junit.Assert.assertNotNull(codedInputStream8);
    }

    @Test
    public void test3186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3186");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo sourceCodeInfo2 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.parseFrom(inputStream0, extensionRegistryLite1);
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder3 = sourceCodeInfo2.newBuilderForType();
        com.google.protobuf.UnknownFieldSet unknownFieldSet4 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder5 = builder3.setUnknownFields(unknownFieldSet4);
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.Builder builder7 = builder3.addLocationBuilder(0);
        java.io.File file10 = null;
        java.io.File file11 = java.io.File.createTempFile("hi!", "ISO", file10);
        boolean boolean14 = file11.setWritable(false, false);
        java.net.URI uRI15 = file11.toURI();
        java.io.PrintStream printStream16 = new java.io.PrintStream(file11);
        printStream16.print((int) (byte) 0);
        printStream16.print(10.0d);
        printStream16.close();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        boolean boolean28 = strSet26.isEmpty();
        java.nio.ByteBuffer byteBuffer30 = java.nio.ByteBuffer.allocate(100);
        boolean boolean31 = strSet26.equals((java.lang.Object) byteBuffer30);
        java.nio.IntBuffer intBuffer32 = byteBuffer30.asIntBuffer();
        double double33 = byteBuffer30.getDouble();
        java.nio.ByteBuffer byteBuffer36 = byteBuffer30.put((int) (short) 1, (byte) 1);
        byte[] byteArray37 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite38 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions39 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray37, extensionRegistryLite38);
        com.google.protobuf.CodedOutputStream codedOutputStream42 = com.google.protobuf.CodedOutputStream.newInstance(byteArray37, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite43 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto44 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray37, extensionRegistryLite43);
        com.google.protobuf.CodedOutputStream codedOutputStream45 = com.google.protobuf.CodedOutputStream.newInstance(byteArray37);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer30.get(byteArray37);
        printStream16.write(byteArray37, (int) '/', (int) (byte) 1);
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.Builder builder50 = builder7.mergeFrom(byteArray37);
        int int51 = builder50.getPathCount();
        com.google.protobuf.Descriptors.Descriptor descriptor52 = builder50.getDescriptorForType();
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder53 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output55 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream57 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output55, (int) 'a');
        byte[] byteArray58 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite59 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions60 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray58, extensionRegistryLite59);
        output55.write(byteArray58);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder62 = builder53.mergeFrom(byteArray58);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite65 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.Builder builder66 = builder50.mergeFrom(byteArray58, 365, (int) (short) -1, extensionRegistryLite65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: com.google.protobuf.InvalidProtocolBufferException: CodedInputStream encountered an embedded string or message which claimed to have negative size.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(sourceCodeInfo2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(file11);
        org.junit.Assert.assertEquals(file11.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file11.toString(), "/tmp/hi!7952854157493073898ISO");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(uRI15);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(intBuffer32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(methodOptions39);
        org.junit.Assert.assertNotNull(codedOutputStream42);
        org.junit.Assert.assertNotNull(fileDescriptorProto44);
        org.junit.Assert.assertNotNull(codedOutputStream45);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(descriptor52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(output55);
        org.junit.Assert.assertNotNull(codedOutputStream57);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[]");
        org.junit.Assert.assertNotNull(methodOptions60);
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test3187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3187");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8);
        boolean boolean11 = strSet9.isEmpty();
        java.nio.ByteBuffer byteBuffer13 = java.nio.ByteBuffer.allocate(100);
        boolean boolean14 = strSet9.equals((java.lang.Object) byteBuffer13);
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        boolean boolean21 = strSet19.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream22 = strSet19.stream();
        boolean boolean23 = strSet9.retainAll((java.util.Collection<java.lang.String>) strSet19);
        compilerOptions0.aliasableStrings = strSet9;
        compilerOptions0.setGenerateExports(false);
        org.junit.Assert.assertNotNull(errorFormat3);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strStream22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test3188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3188");
        com.google.javascript.jscomp.SourceAst sourceAst0 = null;
        com.google.javascript.rhino.InputId inputId1 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput3 = new com.google.javascript.jscomp.CompilerInput(sourceAst0, inputId1, true);
        com.google.javascript.rhino.InputId inputId4 = compilerInput3.getInputId();
        com.google.javascript.jscomp.SourceAst sourceAst5 = null;
        com.google.javascript.rhino.InputId inputId6 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput8 = new com.google.javascript.jscomp.CompilerInput(sourceAst5, inputId6, true);
        java.io.PrintStream printStream9 = null;
        com.google.javascript.jscomp.Compiler compiler10 = new com.google.javascript.jscomp.Compiler(printStream9);
        com.google.javascript.jscomp.ErrorManager errorManager11 = compiler10.getErrorManager();
        compilerInput8.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler10);
        com.google.javascript.jscomp.Scope scope13 = compiler10.getTopScope();
        compilerInput3.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler10);
        boolean boolean15 = compilerInput3.isExtern();
        org.junit.Assert.assertNull(inputId4);
        org.junit.Assert.assertNotNull(errorManager11);
        org.junit.Assert.assertNull(scope13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test3189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3189");
        long[] longArray5 = new long[] { 97, 57600000000000L, 28147497671065600L, 52, 37 };
        java.nio.LongBuffer longBuffer6 = java.nio.LongBuffer.wrap(longArray5);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.LongBuffer longBuffer9 = java.nio.LongBuffer.wrap(longArray5, 43, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[97, 57600000000000, 28147497671065600, 52, 37]");
        org.junit.Assert.assertNotNull(longBuffer6);
    }

    @Test
    public void test3190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3190");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        java.util.List<com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder> builderList3 = builder0.getServiceBuilderList();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo sourceCodeInfo4 = builder0.getSourceCodeInfo();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builderList3);
        org.junit.Assert.assertNotNull(sourceCodeInfo4);
    }

    @Test
    public void test3191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3191");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.OffsetDateTime offsetDateTime8 = offsetDateTime6.minusDays((long) (short) 100);
        int int9 = offsetDateTime6.getYear();
        java.time.OffsetDateTime offsetDateTime11 = offsetDateTime6.minusNanos((long) 4);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZoneOffset zoneOffset20 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset20);
        java.time.ZonedDateTime zonedDateTime22 = java.time.ZonedDateTime.of(localDateTime16, (java.time.ZoneId) zoneOffset20);
        java.time.ZonedDateTime zonedDateTime24 = zonedDateTime22.minusSeconds((long) '#');
        java.time.ZonedDateTime zonedDateTime26 = zonedDateTime22.minusYears((long) ' ');
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset30);
        java.time.ZoneOffset zoneOffset35 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime36 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset35);
        java.time.ZonedDateTime zonedDateTime37 = java.time.ZonedDateTime.of(localDateTime31, (java.time.ZoneId) zoneOffset35);
        java.time.ZonedDateTime zonedDateTime39 = zonedDateTime37.minusSeconds((long) '#');
        java.time.temporal.ChronoField chronoField40 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit41 = chronoField40.getBaseUnit();
        boolean boolean42 = zonedDateTime39.isSupported(temporalUnit41);
        java.time.ZoneOffset zoneOffset46 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime47 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset46);
        int int48 = localDateTime47.getYear();
        java.time.Instant instant49 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset53 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime54 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset53);
        java.time.OffsetDateTime offsetDateTime55 = java.time.OffsetDateTime.ofInstant(instant49, (java.time.ZoneId) zoneOffset53);
        java.time.Instant instant56 = localDateTime47.toInstant(zoneOffset53);
        java.time.ZoneOffset zoneOffset61 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime62 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset61);
        java.time.ZoneOffset zoneOffset66 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime67 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset66);
        java.time.ZonedDateTime zonedDateTime68 = java.time.ZonedDateTime.of(localDateTime62, (java.time.ZoneId) zoneOffset66);
        java.time.temporal.ChronoField chronoField70 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit71 = chronoField70.getBaseUnit();
        java.time.LocalDateTime localDateTime72 = localDateTime62.plus((long) 1970, temporalUnit71);
        java.time.ZoneOffset zoneOffset77 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime78 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset77);
        java.time.ZoneOffset zoneOffset82 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime83 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset82);
        java.time.ZonedDateTime zonedDateTime84 = java.time.ZonedDateTime.of(localDateTime78, (java.time.ZoneId) zoneOffset82);
        java.time.temporal.ChronoField chronoField86 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit87 = chronoField86.getBaseUnit();
        java.time.LocalDateTime localDateTime88 = localDateTime78.plus((long) 1970, temporalUnit87);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime89 = localDateTime72.minus((long) 43, temporalUnit87);
        java.time.Instant instant90 = instant56.plus((long) 16384, temporalUnit87);
        java.time.Instant instant92 = temporalUnit41.addTo(instant56, (long) (-1));
        boolean boolean93 = zonedDateTime22.isSupported(temporalUnit41);
        boolean boolean94 = offsetDateTime6.isSupported(temporalUnit41);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(offsetDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
        org.junit.Assert.assertNotNull(offsetDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zoneOffset20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zonedDateTime22);
        org.junit.Assert.assertNotNull(zonedDateTime24);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(zoneOffset35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(zonedDateTime37);
        org.junit.Assert.assertNotNull(zonedDateTime39);
        org.junit.Assert.assertTrue("'" + chronoField40 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField40.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit41 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit41.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(zoneOffset46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1970 + "'", int48 == 1970);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertNotNull(zoneOffset53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(offsetDateTime55);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertNotNull(zoneOffset61);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(zoneOffset66);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(zonedDateTime68);
        org.junit.Assert.assertTrue("'" + chronoField70 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField70.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit71 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit71.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(zoneOffset77);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(zoneOffset82);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(zonedDateTime84);
        org.junit.Assert.assertTrue("'" + chronoField86 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField86.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit87 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit87.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime88);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime89);
        org.junit.Assert.assertNotNull(instant90);
        org.junit.Assert.assertNotNull(instant92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
    }

    @Test
    public void test3192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3192");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.optimizeCalls = false;
        compilerOptions0.preferLineBreakAtEndOfFile = false;
        boolean boolean5 = compilerOptions0.markNoSideEffectCalls;
        boolean boolean6 = compilerOptions0.labelRenaming;
        com.google.javascript.jscomp.DependencyOptions dependencyOptions7 = new com.google.javascript.jscomp.DependencyOptions();
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet12 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet12, strArray11);
        boolean boolean14 = strSet12.isEmpty();
        java.nio.ByteBuffer byteBuffer16 = java.nio.ByteBuffer.allocate(100);
        boolean boolean17 = strSet12.equals((java.lang.Object) byteBuffer16);
        java.lang.String[] strArray21 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet22 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet22, strArray21);
        boolean boolean24 = strSet22.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream25 = strSet22.stream();
        boolean boolean26 = strSet12.retainAll((java.util.Collection<java.lang.String>) strSet22);
        com.google.javascript.jscomp.DependencyOptions dependencyOptions27 = dependencyOptions7.setEntryPoints((java.util.Collection<java.lang.String>) strSet12);
        compilerOptions0.setDependencyOptions(dependencyOptions7);
        com.google.javascript.jscomp.CheckLevel checkLevel29 = compilerOptions0.checkGlobalThisLevel;
        compilerOptions0.setCheckCaja(false);
        boolean boolean32 = compilerOptions0.checkSymbols;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strStream25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dependencyOptions27);
        org.junit.Assert.assertTrue("'" + checkLevel29 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel29.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test3193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3193");
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing0 = com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP;
        boolean boolean1 = tweakProcessing0.isOn();
        org.junit.Assert.assertTrue("'" + tweakProcessing0 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP + "'", tweakProcessing0.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.STRIP));
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test3194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3194");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type type0 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type.TYPE_BOOL;
        com.google.protobuf.Descriptors.EnumValueDescriptor enumValueDescriptor1 = type0.getValueDescriptor();
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto enumValueDescriptorProto2 = enumValueDescriptor1.toProto();
        boolean boolean3 = enumValueDescriptorProto2.isInitialized();
        java.lang.String str4 = enumValueDescriptorProto2.getName();
        org.junit.Assert.assertTrue("'" + type0 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type.TYPE_BOOL + "'", type0.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type.TYPE_BOOL));
        org.junit.Assert.assertNotNull(enumValueDescriptor1);
        org.junit.Assert.assertNotNull(enumValueDescriptorProto2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "TYPE_BOOL" + "'", str4, "TYPE_BOOL");
    }

    @Test
    public void test3195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3195");
        java.util.DoubleSummaryStatistics doubleSummaryStatistics0 = new java.util.DoubleSummaryStatistics();
        java.util.DoubleSummaryStatistics doubleSummaryStatistics1 = null;
        // The following exception was thrown during execution in test generation
        try {
            doubleSummaryStatistics0.combine(doubleSummaryStatistics1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(doubleSummaryStatistics0.toString(), "DoubleSummaryStatistics{count=0, sum=0.000000, min=Infinity, average=0.000000, max=-Infinity}");
    }

    @Test
    public void test3196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3196");
        java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite> priorityMap0 = new java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite>();
        java.lang.Object obj1 = priorityMap0.clone();
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder2 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.newBuilder();
        boolean boolean3 = priorityMap0.containsValue((java.lang.Object) builder2);
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder5 = builder2.setName("java.nio.ByteBufferAsDoubleBufferB[pos=0 lim=12 cap=12]");
        com.google.protobuf.ByteString byteString6 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder7 = builder2.mergeFrom(byteString6);
        java.util.Map<com.google.protobuf.Descriptors.FieldDescriptor, java.lang.Object> fieldDescriptorMap8 = builder7.getAllFields();
        com.google.protobuf.MessageLite messageLite9 = builder7.getDefaultInstanceForType();
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "{}");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(byteString6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(fieldDescriptorMap8);
        org.junit.Assert.assertNotNull(messageLite9);
    }

    @Test
    public void test3197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3197");
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions0 = com.google.protobuf.DescriptorProtos.EnumValueOptions.getDefaultInstance();
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder1 = com.google.protobuf.DescriptorProtos.EnumValueOptions.newBuilder(enumValueOptions0);
        com.google.javascript.jscomp.CompilerOptions compilerOptions2 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions2.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat5 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions2.errorFormat = errorFormat5;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy7 = null;
        compilerOptions2.variableRenaming = variableRenamingPolicy7;
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode9 = compilerOptions2.getTracerMode();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder10 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder12 = builder10.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder13 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label14 = builder13.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder15 = builder10.addExtension(builder13);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder16 = builder10.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder17 = builder16.getOptionsBuilder();
        java.io.InputStream inputStream18 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions19 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream18);
        boolean boolean20 = enumOptions19.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder21 = builder17.mergeFrom(enumOptions19);
        byte[] byteArray22 = enumOptions19.toByteArray();
        compilerOptions2.setInputPropertyMapSerialized(byteArray22);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite24 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo sourceCodeInfo25 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.parseFrom(byteArray22, extensionRegistryLite24);
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder26 = builder1.mergeFrom(byteArray22);
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor27 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.Message.Builder builder28 = builder26.newBuilderForField(fieldDescriptor27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(enumValueOptions0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(errorFormat5);
        org.junit.Assert.assertTrue("'" + tracerMode9 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode9.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + label14 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label14.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(enumOptions19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(sourceCodeInfo25);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test3198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3198");
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        boolean boolean6 = strSet4.isEmpty();
        java.nio.ByteBuffer byteBuffer8 = java.nio.ByteBuffer.allocate(100);
        boolean boolean9 = strSet4.equals((java.lang.Object) byteBuffer8);
        java.nio.IntBuffer intBuffer10 = byteBuffer8.asIntBuffer();
        java.nio.ByteBuffer byteBuffer13 = byteBuffer8.put((int) (short) 1, (byte) 100);
        long long14 = byteBuffer8.getLong();
        float float16 = byteBuffer8.getFloat(50);
        byte byte17 = byteBuffer8.get();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(intBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 28147497671065600L + "'", long14 == 28147497671065600L);
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + 0.0f + "'", float16 == 0.0f);
        org.junit.Assert.assertTrue("'" + byte17 + "' != '" + (byte) 0 + "'", byte17 == (byte) 0);
    }

    @Test
    public void test3199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3199");
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto0 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.getDefaultInstance();
        boolean boolean1 = serviceDescriptorProto0.hasOptions();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder2 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.newBuilder(serviceDescriptorProto0);
        byte[] byteArray3 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite4 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions5 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray3, extensionRegistryLite4);
        com.google.protobuf.CodedInputStream codedInputStream8 = com.google.protobuf.CodedInputStream.newInstance(byteArray3, 16, (int) 'a');
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder9 = builder2.mergeFrom(byteArray3);
        java.util.List<com.google.protobuf.DescriptorProtos.MethodDescriptorProto> methodDescriptorProtoList10 = builder9.getMethodList();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder11 = builder9.clearMethod();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto12 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.getDefaultInstance();
        boolean boolean13 = serviceDescriptorProto12.hasOptions();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder14 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.newBuilder(serviceDescriptorProto12);
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto15 = builder14.buildPartial();
        com.google.protobuf.DescriptorProtos.ServiceOptions serviceOptions16 = builder14.getOptions();
        com.google.protobuf.DescriptorProtos.ServiceOptions.Builder builder17 = serviceOptions16.toBuilder();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder18 = builder11.setOptions(builder17);
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor19 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.ServiceOptions.Builder builder22 = builder17.setRepeatedField(fieldDescriptor19, 17488, (java.lang.Object) (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serviceDescriptorProto0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(methodOptions5);
        org.junit.Assert.assertNotNull(codedInputStream8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(methodDescriptorProtoList10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(serviceDescriptorProto12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(serviceDescriptorProto15);
        org.junit.Assert.assertNotNull(serviceOptions16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test3200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3200");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy5 = null;
        compilerOptions0.variableRenaming = variableRenamingPolicy5;
        compilerOptions0.setSummaryDetailLevel(999);
        boolean boolean9 = compilerOptions0.getInferTypes();
        boolean boolean10 = compilerOptions0.ideMode;
        compilerOptions0.setGroupVariableDeclarations(true);
        boolean boolean13 = compilerOptions0.deadAssignmentElimination;
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap14 = java.nio.charset.Charset.availableCharsets();
        java.net.URISyntaxException uRISyntaxException17 = new java.net.URISyntaxException("hi!", "");
        boolean boolean18 = strMap14.containsKey((java.lang.Object) "");
        java.util.Set<java.lang.String> strSet19 = strMap14.keySet();
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        boolean boolean26 = strSet24.isEmpty();
        java.nio.ByteBuffer byteBuffer28 = java.nio.ByteBuffer.allocate(100);
        boolean boolean29 = strSet24.equals((java.lang.Object) byteBuffer28);
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        boolean boolean36 = strSet34.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream37 = strSet34.stream();
        boolean boolean38 = strSet24.retainAll((java.util.Collection<java.lang.String>) strSet34);
        boolean boolean39 = strSet19.containsAll((java.util.Collection<java.lang.String>) strSet24);
        compilerOptions0.setStripTypes(strSet19);
        compilerOptions0.setIgnoreCajaProperties(false);
        java.util.Set<java.lang.String> strSet43 = compilerOptions0.stripTypes;
        compilerOptions0.flowSensitiveInlineVariables = false;
        org.junit.Assert.assertNotNull(errorFormat3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strStream37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strSet43);
    }

    @Test
    public void test3201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3201");
        com.google.protobuf.Descriptors.Descriptor descriptor0 = com.google.protobuf.DescriptorProtos.EnumOptions.getDescriptor();
        org.junit.Assert.assertNotNull(descriptor0);
    }

    @Test
    public void test3202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3202");
        com.google.protobuf.InvalidProtocolBufferException invalidProtocolBufferException1 = new com.google.protobuf.InvalidProtocolBufferException("South Korea");
    }

    @Test
    public void test3203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3203");
        com.google.protobuf.DescriptorProtos.FieldOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.FieldOptions.newBuilder();
        org.junit.Assert.assertNotNull(builder0);
    }

    @Test
    public void test3204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3204");
        com.google.common.collect.ImmutableList<java.security.NoSuchAlgorithmException> noSuchAlgorithmExceptionList0 = com.google.common.collect.ImmutableList.of();
        org.junit.Assert.assertNotNull(noSuchAlgorithmExceptionList0);
    }

    @Test
    public void test3205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3205");
        java.time.Month month0 = java.time.Month.APRIL;
        java.time.chrono.Chronology chronology1 = java.time.chrono.Chronology.from((java.time.temporal.TemporalAccessor) month0);
        java.lang.String str2 = chronology1.toString();
        java.time.Instant instant3 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime8 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset7);
        java.time.OffsetDateTime offsetDateTime9 = java.time.OffsetDateTime.ofInstant(instant3, (java.time.ZoneId) zoneOffset7);
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset13);
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset18);
        java.time.ZonedDateTime zonedDateTime20 = java.time.ZonedDateTime.of(localDateTime14, (java.time.ZoneId) zoneOffset18);
        java.time.Clock clock21 = java.time.Clock.fixed(instant3, (java.time.ZoneId) zoneOffset18);
        java.time.chrono.ChronoLocalDate chronoLocalDate22 = chronology1.dateNow(clock21);
        long long23 = clock21.millis();
        java.time.Instant instant24 = java.time.Instant.now(clock21);
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset29);
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset34);
        java.time.ZonedDateTime zonedDateTime36 = java.time.ZonedDateTime.of(localDateTime30, (java.time.ZoneId) zoneOffset34);
        java.time.ZonedDateTime zonedDateTime38 = zonedDateTime36.withYear((int) (short) 1);
        java.time.temporal.ChronoField chronoField39 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit40 = chronoField39.getBaseUnit();
        java.time.ZonedDateTime zonedDateTime41 = zonedDateTime36.truncatedTo(temporalUnit40);
        java.time.Instant instant42 = instant24.plus((-712108796000L), temporalUnit40);
        org.junit.Assert.assertTrue("'" + month0 + "' != '" + java.time.Month.APRIL + "'", month0.equals(java.time.Month.APRIL));
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISO" + "'", str2, "ISO");
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(zonedDateTime20);
        org.junit.Assert.assertNotNull(clock21);
        org.junit.Assert.assertNotNull(chronoLocalDate22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(zonedDateTime36);
        org.junit.Assert.assertNotNull(zonedDateTime38);
        org.junit.Assert.assertTrue("'" + chronoField39 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField39.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit40 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit40.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(zonedDateTime41);
        org.junit.Assert.assertNotNull(instant42);
    }

    @Test
    public void test3206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3206");
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder1 = builder0.clearCcGenericServices();
        boolean boolean2 = builder0.isInitialized();
        boolean boolean3 = builder0.getJavaGenericServices();
        int int4 = builder0.getUninterpretedOptionCount();
        com.google.protobuf.DescriptorProtos.FileOptions fileOptions5 = builder0.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(fileOptions5);
    }

    @Test
    public void test3207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3207");
        com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder builder0 = com.google.javascript.jscomp.FunctionInformationMap.Entry.newBuilder();
        boolean boolean1 = builder0.hasSourceName();
        com.google.javascript.jscomp.FunctionInformationMap.Entry entry2 = builder0.getDefaultInstanceForType();
        com.google.protobuf.Descriptors.Descriptor descriptor3 = builder0.getDescriptorForType();
        com.google.javascript.jscomp.FunctionInformationMap.Entry entry4 = builder0.getDefaultInstanceForType();
        int int5 = entry4.getLineNumber();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(entry2);
        org.junit.Assert.assertNotNull(descriptor3);
        org.junit.Assert.assertNotNull(entry4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test3208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3208");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder3 = builder2.clearSourceCodeInfo();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder4 = builder3.clearService();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = builder4.clearSourceCodeInfo();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test3209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3209");
        com.google.javascript.rhino.Node node1 = new com.google.javascript.rhino.Node((int) (byte) -1);
        node1.putIntProp((int) (byte) -1, 9);
        boolean boolean5 = node1.isVar();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean10 = node9.isStringKey();
        boolean boolean11 = node9.isThrow();
        com.google.javascript.rhino.JSDocInfo jSDocInfo12 = null;
        node9.setJSDocInfo(jSDocInfo12);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile14 = node9.getStaticSourceFile();
        boolean boolean15 = node9.isWhile();
        com.google.javascript.rhino.Node node16 = node1.useSourceInfoIfMissingFromForTree(node9);
        boolean boolean17 = node1.isTrue();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(staticSourceFile14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test3210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3210");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.CHECK_TYPES;
        com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_VARIABLES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.DEBUGGER_STATEMENT_PRESENT = diagnosticGroup0;
        org.junit.Assert.assertNotNull(diagnosticGroup0);
    }

    @Test
    public void test3211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3211");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        com.google.javascript.rhino.jstype.ObjectType objectType6 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType7 = jSTypeRegistry5.createObjectType(objectType6);
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.jstype.ObjectType objectType11 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType12 = jSTypeRegistry10.createObjectType(objectType11);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair13 = objectType7.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType12);
        java.lang.String str14 = objectType12.getDisplayName();
        java.util.Collection<com.google.javascript.rhino.jstype.FunctionType> functionTypeCollection15 = jSTypeRegistry2.getDirectImplementors(objectType12);
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable17 = jSTypeRegistry2.getEachReferenceTypeWithProperty("+00:00:52");
        jSTypeRegistry2.resetForTypeCheck();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean24 = node23.isStringKey();
        boolean boolean25 = node23.isThrow();
        boolean boolean26 = node23.isVarArgs();
        boolean boolean27 = node23.isHook();
        com.google.javascript.rhino.Node node28 = node23.cloneNode();
        com.google.javascript.rhino.ErrorReporter errorReporter29 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter29, false);
        com.google.javascript.rhino.ErrorReporter errorReporter32 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter32, false);
        com.google.javascript.rhino.jstype.ObjectType objectType35 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType36 = jSTypeRegistry34.createObjectType(objectType35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        com.google.javascript.rhino.jstype.ObjectType objectType40 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType41 = jSTypeRegistry39.createObjectType(objectType40);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair42 = objectType36.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType41);
        java.lang.String str43 = objectType41.getDisplayName();
        java.util.Collection<com.google.javascript.rhino.jstype.FunctionType> functionTypeCollection44 = jSTypeRegistry31.getDirectImplementors(objectType41);
        boolean boolean45 = objectType41.isAllType();
        com.google.javascript.rhino.jstype.ObjectType objectType46 = jSTypeRegistry2.createObjectType("+00:00:52", node28, objectType41);
        com.google.javascript.rhino.ErrorReporter errorReporter47 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry49 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter47, false);
        com.google.javascript.rhino.jstype.ObjectType objectType50 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType51 = jSTypeRegistry49.createObjectType(objectType50);
        jSTypeRegistry49.forwardDeclareType("");
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        com.google.javascript.rhino.jstype.ObjectType objectType57 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType58 = jSTypeRegistry56.createObjectType(objectType57);
        com.google.javascript.rhino.ErrorReporter errorReporter59 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry61 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter59, false);
        com.google.javascript.rhino.jstype.ObjectType objectType62 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType63 = jSTypeRegistry61.createObjectType(objectType62);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair64 = objectType58.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType63);
        com.google.javascript.rhino.Node node65 = objectType58.getRootNode();
        com.google.javascript.rhino.ErrorReporter errorReporter66 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry68 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter66, false);
        com.google.javascript.rhino.jstype.ObjectType objectType69 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType70 = jSTypeRegistry68.createObjectType(objectType69);
        com.google.javascript.rhino.ErrorReporter errorReporter71 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry73 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter71, false);
        com.google.javascript.rhino.jstype.ObjectType objectType74 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType75 = jSTypeRegistry73.createObjectType(objectType74);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair76 = objectType70.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType75);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue77 = objectType58.testForEquality((com.google.javascript.rhino.jstype.JSType) objectType70);
        com.google.javascript.rhino.jstype.JSType jSType78 = jSTypeRegistry49.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType58);
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString("java.nio.ByteBufferAsDoubleBufferB[pos=0 lim=12 cap=12]");
        com.google.javascript.rhino.jstype.FunctionType functionType81 = jSTypeRegistry2.createFunctionType((com.google.javascript.rhino.jstype.JSType) objectType58, node80);
        boolean boolean82 = functionType81.canBeCalled();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.FunctionType functionType83 = functionType81.getSuperClassConstructor();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectType7);
        org.junit.Assert.assertNotNull(objectType12);
        org.junit.Assert.assertNotNull(typePair13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(functionTypeCollection15);
        org.junit.Assert.assertNotNull(objectTypeIterable17);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(objectType36);
        org.junit.Assert.assertNotNull(objectType41);
        org.junit.Assert.assertNotNull(typePair42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(functionTypeCollection44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(objectType46);
        org.junit.Assert.assertNotNull(objectType51);
        org.junit.Assert.assertNotNull(objectType58);
        org.junit.Assert.assertNotNull(objectType63);
        org.junit.Assert.assertNotNull(typePair64);
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertNotNull(objectType70);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertNotNull(typePair76);
        org.junit.Assert.assertNotNull(ternaryValue77);
        org.junit.Assert.assertNotNull(jSType78);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(functionType81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
    }

    @Test
    public void test3212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3212");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy5 = null;
        compilerOptions0.variableRenaming = variableRenamingPolicy5;
        compilerOptions0.setSummaryDetailLevel(999);
        compilerOptions0.setRemoveClosureAsserts(false);
        boolean boolean11 = compilerOptions0.moveFunctionDeclarations;
        compilerOptions0.setPropertyAffinity(true);
        java.lang.String str14 = compilerOptions0.renamePrefixNamespace;
        compilerOptions0.setInlineConstantVars(true);
        org.junit.Assert.assertNotNull(errorFormat3);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test3213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3213");
        com.google.javascript.rhino.JSDocInfo.Visibility visibility0 = com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED;
        org.junit.Assert.assertTrue("'" + visibility0 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED + "'", visibility0.equals(com.google.javascript.rhino.JSDocInfo.Visibility.INHERITED));
    }

    @Test
    public void test3214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3214");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        com.google.javascript.rhino.jstype.ObjectType objectType6 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType7 = jSTypeRegistry5.createObjectType(objectType6);
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.jstype.ObjectType objectType11 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType12 = jSTypeRegistry10.createObjectType(objectType11);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair13 = objectType7.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType12);
        java.lang.String str14 = objectType12.getDisplayName();
        java.util.Collection<com.google.javascript.rhino.jstype.FunctionType> functionTypeCollection15 = jSTypeRegistry2.getDirectImplementors(objectType12);
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable17 = jSTypeRegistry2.getEachReferenceTypeWithProperty("+00:00:52");
        jSTypeRegistry2.resetForTypeCheck();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean24 = node23.isStringKey();
        boolean boolean25 = node23.isThrow();
        boolean boolean26 = node23.isVarArgs();
        boolean boolean27 = node23.isHook();
        com.google.javascript.rhino.Node node28 = node23.cloneNode();
        com.google.javascript.rhino.ErrorReporter errorReporter29 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter29, false);
        com.google.javascript.rhino.ErrorReporter errorReporter32 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter32, false);
        com.google.javascript.rhino.jstype.ObjectType objectType35 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType36 = jSTypeRegistry34.createObjectType(objectType35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        com.google.javascript.rhino.jstype.ObjectType objectType40 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType41 = jSTypeRegistry39.createObjectType(objectType40);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair42 = objectType36.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType41);
        java.lang.String str43 = objectType41.getDisplayName();
        java.util.Collection<com.google.javascript.rhino.jstype.FunctionType> functionTypeCollection44 = jSTypeRegistry31.getDirectImplementors(objectType41);
        boolean boolean45 = objectType41.isAllType();
        com.google.javascript.rhino.jstype.ObjectType objectType46 = jSTypeRegistry2.createObjectType("+00:00:52", node28, objectType41);
        com.google.javascript.rhino.ErrorReporter errorReporter47 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry49 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter47, false);
        com.google.javascript.rhino.jstype.ObjectType objectType50 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType51 = jSTypeRegistry49.createObjectType(objectType50);
        jSTypeRegistry49.forwardDeclareType("");
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        com.google.javascript.rhino.jstype.ObjectType objectType57 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType58 = jSTypeRegistry56.createObjectType(objectType57);
        com.google.javascript.rhino.ErrorReporter errorReporter59 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry61 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter59, false);
        com.google.javascript.rhino.jstype.ObjectType objectType62 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType63 = jSTypeRegistry61.createObjectType(objectType62);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair64 = objectType58.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType63);
        com.google.javascript.rhino.Node node65 = objectType58.getRootNode();
        com.google.javascript.rhino.ErrorReporter errorReporter66 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry68 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter66, false);
        com.google.javascript.rhino.jstype.ObjectType objectType69 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType70 = jSTypeRegistry68.createObjectType(objectType69);
        com.google.javascript.rhino.ErrorReporter errorReporter71 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry73 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter71, false);
        com.google.javascript.rhino.jstype.ObjectType objectType74 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType75 = jSTypeRegistry73.createObjectType(objectType74);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair76 = objectType70.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType75);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue77 = objectType58.testForEquality((com.google.javascript.rhino.jstype.JSType) objectType70);
        com.google.javascript.rhino.jstype.JSType jSType78 = jSTypeRegistry49.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType58);
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString("java.nio.ByteBufferAsDoubleBufferB[pos=0 lim=12 cap=12]");
        com.google.javascript.rhino.jstype.FunctionType functionType81 = jSTypeRegistry2.createFunctionType((com.google.javascript.rhino.jstype.JSType) objectType58, node80);
        java.lang.Iterable iterable82 = functionType81.getCtorExtendedInterfaces();
        java.util.Spliterator<java.nio.file.Path> pathSpliterator83 = iterable82.spliterator();
        org.junit.Assert.assertNotNull(objectType7);
        org.junit.Assert.assertNotNull(objectType12);
        org.junit.Assert.assertNotNull(typePair13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(functionTypeCollection15);
        org.junit.Assert.assertNotNull(objectTypeIterable17);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(objectType36);
        org.junit.Assert.assertNotNull(objectType41);
        org.junit.Assert.assertNotNull(typePair42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(functionTypeCollection44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(objectType46);
        org.junit.Assert.assertNotNull(objectType51);
        org.junit.Assert.assertNotNull(objectType58);
        org.junit.Assert.assertNotNull(objectType63);
        org.junit.Assert.assertNotNull(typePair64);
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertNotNull(objectType70);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertNotNull(typePair76);
        org.junit.Assert.assertNotNull(ternaryValue77);
        org.junit.Assert.assertNotNull(jSType78);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(functionType81);
        org.junit.Assert.assertNotNull(iterable82);
        org.junit.Assert.assertNotNull(pathSpliterator83);
    }

    @Test
    public void test3215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3215");
        byte[] byteArray0 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions2 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray0, extensionRegistryLite1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite3 = null;
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto enumDescriptorProto4 = com.google.protobuf.DescriptorProtos.EnumDescriptorProto.parseFrom(byteArray0, extensionRegistryLite3);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder5 = enumDescriptorProto4.newBuilderForType();
        com.google.protobuf.Descriptors.Descriptor descriptor6 = builder5.getDescriptorForType();
        com.google.protobuf.DescriptorProtos.EnumOptionsOrBuilder enumOptionsOrBuilder7 = builder5.getOptionsOrBuilder();
        int int8 = builder5.getValueCount();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(methodOptions2);
        org.junit.Assert.assertNotNull(enumDescriptorProto4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(descriptor6);
        org.junit.Assert.assertNotNull(enumOptionsOrBuilder7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test3216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3216");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType4 = jSTypeRegistry2.createObjectType(objectType3);
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.jstype.ObjectType objectType8 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry7.createObjectType(objectType8);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair10 = objectType4.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType9);
        java.lang.String str11 = objectType9.getDisplayName();
        com.google.javascript.rhino.ErrorReporter errorReporter12 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter12, false);
        com.google.javascript.rhino.jstype.ObjectType objectType15 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType16 = jSTypeRegistry14.createObjectType(objectType15);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        com.google.javascript.rhino.jstype.ObjectType objectType20 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType21 = jSTypeRegistry19.createObjectType(objectType20);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair22 = objectType16.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType21);
        boolean boolean23 = objectType21.isTemplateType();
        com.google.javascript.rhino.jstype.JSType jSType24 = objectType9.getLeastSupertype((com.google.javascript.rhino.jstype.JSType) objectType21);
        com.google.javascript.rhino.JSDocInfo jSDocInfo25 = objectType9.getJSDocInfo();
        org.junit.Assert.assertNotNull(objectType4);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertNotNull(typePair10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(objectType16);
        org.junit.Assert.assertNotNull(objectType21);
        org.junit.Assert.assertNotNull(typePair22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertNull(jSDocInfo25);
    }

    @Test
    public void test3217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3217");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy5 = null;
        compilerOptions0.variableRenaming = variableRenamingPolicy5;
        compilerOptions0.setSummaryDetailLevel(999);
        compilerOptions0.checkSuspiciousCode = true;
        byte[] byteArray11 = compilerOptions0.inputPropertyMapSerialized;
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions12.optimizeCalls = false;
        compilerOptions12.preferLineBreakAtEndOfFile = false;
        boolean boolean17 = compilerOptions12.markNoSideEffectCalls;
        boolean boolean18 = compilerOptions12.labelRenaming;
        com.google.javascript.jscomp.DependencyOptions dependencyOptions19 = new com.google.javascript.jscomp.DependencyOptions();
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        boolean boolean26 = strSet24.isEmpty();
        java.nio.ByteBuffer byteBuffer28 = java.nio.ByteBuffer.allocate(100);
        boolean boolean29 = strSet24.equals((java.lang.Object) byteBuffer28);
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        boolean boolean36 = strSet34.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream37 = strSet34.stream();
        boolean boolean38 = strSet24.retainAll((java.util.Collection<java.lang.String>) strSet34);
        com.google.javascript.jscomp.DependencyOptions dependencyOptions39 = dependencyOptions19.setEntryPoints((java.util.Collection<java.lang.String>) strSet24);
        compilerOptions12.setDependencyOptions(dependencyOptions19);
        com.google.javascript.jscomp.CheckLevel checkLevel41 = compilerOptions12.checkGlobalThisLevel;
        compilerOptions0.checkMissingReturn = checkLevel41;
        com.google.javascript.jscomp.CompilerOptions compilerOptions43 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions43.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat46 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions43.errorFormat = errorFormat46;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy48 = null;
        compilerOptions43.variableRenaming = variableRenamingPolicy48;
        compilerOptions43.setSummaryDetailLevel(999);
        compilerOptions43.checkSuspiciousCode = true;
        byte[] byteArray54 = compilerOptions43.inputPropertyMapSerialized;
        com.google.javascript.jscomp.CompilerOptions compilerOptions55 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions55.optimizeCalls = false;
        compilerOptions55.preferLineBreakAtEndOfFile = false;
        boolean boolean60 = compilerOptions55.markNoSideEffectCalls;
        boolean boolean61 = compilerOptions55.labelRenaming;
        com.google.javascript.jscomp.DependencyOptions dependencyOptions62 = new com.google.javascript.jscomp.DependencyOptions();
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet67 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet67, strArray66);
        boolean boolean69 = strSet67.isEmpty();
        java.nio.ByteBuffer byteBuffer71 = java.nio.ByteBuffer.allocate(100);
        boolean boolean72 = strSet67.equals((java.lang.Object) byteBuffer71);
        java.lang.String[] strArray76 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet77 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet77, strArray76);
        boolean boolean79 = strSet77.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream80 = strSet77.stream();
        boolean boolean81 = strSet67.retainAll((java.util.Collection<java.lang.String>) strSet77);
        com.google.javascript.jscomp.DependencyOptions dependencyOptions82 = dependencyOptions62.setEntryPoints((java.util.Collection<java.lang.String>) strSet67);
        compilerOptions55.setDependencyOptions(dependencyOptions62);
        com.google.javascript.jscomp.CheckLevel checkLevel84 = compilerOptions55.checkGlobalThisLevel;
        compilerOptions43.checkMissingReturn = checkLevel84;
        compilerOptions0.setCheckGlobalNamesLevel(checkLevel84);
        compilerOptions0.ambiguateProperties = true;
        org.junit.Assert.assertNotNull(errorFormat3);
        org.junit.Assert.assertNull(byteArray11);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strStream37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dependencyOptions39);
        org.junit.Assert.assertTrue("'" + checkLevel41 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel41.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(errorFormat46);
        org.junit.Assert.assertNull(byteArray54);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(byteBuffer71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(strStream80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(dependencyOptions82);
        org.junit.Assert.assertTrue("'" + checkLevel84 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel84.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test3218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3218");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_OFFSET_DATE;
        java.time.format.DecimalStyle decimalStyle1 = dateTimeFormatter0.getDecimalStyle();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(decimalStyle1);
    }

    @Test
    public void test3219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3219");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        typePosition0.setPositionInformation((int) ':', 50, 64, (int) (short) 10);
        typePosition0.setPositionInformation(12, (int) (byte) 100, 4095, (int) (short) 0);
        int int11 = typePosition0.getStartLine();
        int int12 = typePosition0.getEndLine();
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 12 + "'", int11 == 12);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4095 + "'", int12 == 4095);
    }

    @Test
    public void test3220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3220");
        java.io.InputStream inputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location1 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseDelimitedFrom(inputStream0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3221");
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output2 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream4 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output2, (int) 'a');
        byte[] byteArray5 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite6 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions7 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray5, extensionRegistryLite6);
        output2.write(byteArray5);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder9 = builder0.mergeFrom(byteArray5);
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions10 = builder0.buildPartial();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder11 = builder0.addUninterpretedOptionBuilder();
        byte[] byteArray12 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite13 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions14 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray12, extensionRegistryLite13);
        com.google.protobuf.CodedOutputStream codedOutputStream17 = com.google.protobuf.CodedOutputStream.newInstance(byteArray12, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite18 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto19 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray12, extensionRegistryLite18);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite20 = null;
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto21 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.parseFrom(byteArray12, extensionRegistryLite20);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder22 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label23 = builder22.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto24 = builder22.buildPartial();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder25 = fieldDescriptorProto24.newBuilderForType();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder26 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto24);
        java.io.File file29 = null;
        java.io.File file30 = java.io.File.createTempFile("hi!", "ISO", file29);
        boolean boolean33 = file30.setWritable(false, false);
        java.net.URI uRI34 = file30.toURI();
        java.io.PrintStream printStream35 = new java.io.PrintStream(file30);
        printStream35.print((int) (byte) 0);
        printStream35.print(10.0d);
        printStream35.close();
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        boolean boolean47 = strSet45.isEmpty();
        java.nio.ByteBuffer byteBuffer49 = java.nio.ByteBuffer.allocate(100);
        boolean boolean50 = strSet45.equals((java.lang.Object) byteBuffer49);
        java.nio.IntBuffer intBuffer51 = byteBuffer49.asIntBuffer();
        double double52 = byteBuffer49.getDouble();
        java.nio.ByteBuffer byteBuffer55 = byteBuffer49.put((int) (short) 1, (byte) 1);
        byte[] byteArray56 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite57 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions58 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray56, extensionRegistryLite57);
        com.google.protobuf.CodedOutputStream codedOutputStream61 = com.google.protobuf.CodedOutputStream.newInstance(byteArray56, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite62 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto63 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray56, extensionRegistryLite62);
        com.google.protobuf.CodedOutputStream codedOutputStream64 = com.google.protobuf.CodedOutputStream.newInstance(byteArray56);
        java.nio.ByteBuffer byteBuffer65 = byteBuffer49.get(byteArray56);
        printStream35.write(byteArray56, (int) '/', (int) (byte) 1);
        java.io.InputStream inputStream69 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite70 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location71 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream69, extensionRegistryLite70);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder72 = builder26.mergeFrom(byteArray56, extensionRegistryLite70);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder73 = builder0.mergeFrom(byteArray12, extensionRegistryLite70);
        com.google.protobuf.ByteString byteString74 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto75 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.parseFrom(byteString74);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite76 = null;
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto enumValueDescriptorProto77 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.parseFrom(byteString74, extensionRegistryLite76);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite78 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions79 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteString74, extensionRegistryLite78);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder80 = builder73.mergeFrom(byteString74);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(output2);
        org.junit.Assert.assertNotNull(codedOutputStream4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(methodOptions7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(methodOptions10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(methodOptions14);
        org.junit.Assert.assertNotNull(codedOutputStream17);
        org.junit.Assert.assertNotNull(fileDescriptorProto19);
        org.junit.Assert.assertNotNull(serviceDescriptorProto21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + label23 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label23.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(file30);
        org.junit.Assert.assertEquals(file30.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file30.toString(), "/tmp/hi!3241987253171662437ISO");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(uRI34);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intBuffer51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertNotNull(methodOptions58);
        org.junit.Assert.assertNotNull(codedOutputStream61);
        org.junit.Assert.assertNotNull(fileDescriptorProto63);
        org.junit.Assert.assertNotNull(codedOutputStream64);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(extensionRegistryLite70);
        org.junit.Assert.assertNotNull(location71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(byteString74);
        org.junit.Assert.assertNotNull(methodDescriptorProto75);
        org.junit.Assert.assertNotNull(enumValueDescriptorProto77);
        org.junit.Assert.assertNotNull(methodOptions79);
        org.junit.Assert.assertNotNull(builder80);
    }

    @Test
    public void test3222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3222");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.DescriptorProtos.FieldOptions fieldOptions1 = com.google.protobuf.DescriptorProtos.FieldOptions.parseFrom(inputStream0);
        boolean boolean2 = fieldOptions1.hasExperimentalMapKey();
        org.junit.Assert.assertNotNull(fieldOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test3223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3223");
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output2 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream4 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output2, (int) 'a');
        byte[] byteArray5 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite6 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions7 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray5, extensionRegistryLite6);
        output2.write(byteArray5);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder9 = builder0.mergeFrom(byteArray5);
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions10 = builder0.buildPartial();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder11 = builder0.addUninterpretedOptionBuilder();
        boolean boolean12 = builder11.hasNegativeIntValue();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder13 = builder11.clearStringValue();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder14 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder16 = builder14.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder17 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label18 = builder17.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder19 = builder14.addExtension(builder17);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder20 = builder14.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder21 = builder20.getOptionsBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder22 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder24 = builder22.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder25 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label26 = builder25.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder27 = builder22.addExtension(builder25);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder28 = builder22.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder29 = builder28.getOptionsBuilder();
        java.io.InputStream inputStream30 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions31 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream30);
        boolean boolean32 = enumOptions31.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder33 = builder29.mergeFrom(enumOptions31);
        com.google.protobuf.UnknownFieldSet unknownFieldSet34 = builder29.getUnknownFields();
        com.google.protobuf.CodedOutputStream codedOutputStream35 = null;
        unknownFieldSet34.writeTo(codedOutputStream35);
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder37 = builder21.setUnknownFields(unknownFieldSet34);
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder38 = builder13.mergeUnknownFields(unknownFieldSet34);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(output2);
        org.junit.Assert.assertNotNull(codedOutputStream4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(methodOptions7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(methodOptions10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + label18 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label18.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + label26 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label26.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(enumOptions31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(unknownFieldSet34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test3224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3224");
        java.time.chrono.IsoChronology isoChronology0 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset9);
        java.time.ZonedDateTime zonedDateTime11 = java.time.ZonedDateTime.of(localDateTime5, (java.time.ZoneId) zoneOffset9);
        java.time.ZonedDateTime zonedDateTime13 = zonedDateTime11.withHour(16);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime14 = zonedDateTime13.toLocalDateTime();
        java.time.chrono.Chronology chronology15 = localDateChronoLocalDateTime14.getChronology();
        int int16 = isoChronology0.compareTo(chronology15);
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.MAX;
        java.time.LocalDate localDate18 = isoChronology0.dateNow((java.time.ZoneId) zoneOffset17);
        java.time.Period period22 = isoChronology0.period((int) ':', 171, (int) (short) 100);
        boolean boolean23 = period22.isZero();
        org.junit.Assert.assertNotNull(isoChronology0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(zonedDateTime13);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test3225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3225");
        com.google.javascript.jscomp.SourceFile.Builder builder0 = new com.google.javascript.jscomp.SourceFile.Builder();
        java.nio.charset.Charset charset1 = java.nio.charset.Charset.defaultCharset();
        boolean boolean2 = charset1.canEncode();
        java.nio.charset.CharsetEncoder charsetEncoder3 = charset1.newEncoder();
        com.google.javascript.jscomp.SourceFile.Builder builder4 = builder0.withCharset(charset1);
        java.lang.String str5 = charset1.toString();
        java.nio.CharBuffer charBuffer7 = java.nio.CharBuffer.allocate((int) ' ');
        boolean boolean8 = charBuffer7.isDirect();
        int int9 = charBuffer7.arrayOffset();
        java.nio.ByteBuffer byteBuffer10 = charset1.encode(charBuffer7);
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(charsetEncoder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "US-ASCII" + "'", str5, "US-ASCII");
        org.junit.Assert.assertNotNull(charBuffer7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(byteBuffer10);
    }

    @Test
    public void test3226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3226");
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.Builder builder0 = com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.newBuilder();
        java.io.InputStream inputStream1 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite2 = null;
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.Builder builder3 = builder0.mergeFrom(inputStream1, extensionRegistryLite2);
        java.util.Map<com.google.protobuf.Descriptors.FieldDescriptor, java.lang.Object> fieldDescriptorMap4 = builder0.getAllFields();
        java.io.File file7 = null;
        java.io.File file8 = java.io.File.createTempFile("hi!", "ISO", file7);
        boolean boolean11 = file8.setWritable(false, false);
        java.net.URI uRI12 = file8.toURI();
        java.io.PrintStream printStream13 = new java.io.PrintStream(file8);
        printStream13.print((int) (byte) 0);
        printStream13.print(10.0d);
        printStream13.close();
        com.google.javascript.jscomp.CompilerOptions compilerOptions19 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions19.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat22 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions19.errorFormat = errorFormat22;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy24 = null;
        compilerOptions19.variableRenaming = variableRenamingPolicy24;
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode26 = compilerOptions19.getTracerMode();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder27 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder29 = builder27.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder30 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label31 = builder30.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder32 = builder27.addExtension(builder30);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder33 = builder27.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder34 = builder33.getOptionsBuilder();
        java.io.InputStream inputStream35 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions36 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream35);
        boolean boolean37 = enumOptions36.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder38 = builder34.mergeFrom(enumOptions36);
        byte[] byteArray39 = enumOptions36.toByteArray();
        compilerOptions19.setInputPropertyMapSerialized(byteArray39);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite41 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location42 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(byteArray39, extensionRegistryLite41);
        printStream13.write(byteArray39, 1970, 152);
        byte[] byteArray46 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite47 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions48 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray46, extensionRegistryLite47);
        com.google.protobuf.DescriptorProtos.UninterpretedOption uninterpretedOption49 = com.google.protobuf.DescriptorProtos.UninterpretedOption.parseFrom(byteArray46);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder50 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label51 = builder50.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto52 = builder50.buildPartial();
        int int53 = fieldDescriptorProto52.getSerializedSize();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder54 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto52);
        java.io.InputStream inputStream55 = null;
        java.io.InputStream inputStream56 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite57 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location58 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream56, extensionRegistryLite57);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder59 = builder54.mergeFrom(inputStream55, extensionRegistryLite57);
        com.google.javascript.jscomp.FunctionInformationMap functionInformationMap60 = com.google.javascript.jscomp.FunctionInformationMap.parseFrom(byteArray46, extensionRegistryLite57);
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.Builder builder61 = builder0.mergeFrom(byteArray39, extensionRegistryLite57);
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.Builder builder63 = builder61.setStart((-2));
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(fieldDescriptorMap4);
        org.junit.Assert.assertNotNull(file8);
        org.junit.Assert.assertEquals(file8.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file8.toString(), "/tmp/hi!1693500033008513622ISO");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(uRI12);
        org.junit.Assert.assertNotNull(errorFormat22);
        org.junit.Assert.assertTrue("'" + tracerMode26 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode26.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + label31 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label31.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(enumOptions36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(location42);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(methodOptions48);
        org.junit.Assert.assertNotNull(uninterpretedOption49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + label51 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label51.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(extensionRegistryLite57);
        org.junit.Assert.assertNotNull(location58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(functionInformationMap60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
    }

    @Test
    public void test3227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3227");
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto0 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.getDefaultInstance();
        boolean boolean1 = methodDescriptorProto0.hasOutputType();
        com.google.protobuf.CodedOutputStream codedOutputStream2 = null;
        methodDescriptorProto0.writeTo(codedOutputStream2);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder4 = methodDescriptorProto0.toBuilder();
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder6 = builder4.setOutputType("java.nio.HeapFloatBuffer[pos=0 lim=6 cap=6]");
        java.io.InputStream inputStream7 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite8 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions9 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(inputStream7, extensionRegistryLite8);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder10 = builder6.mergeOptions(methodOptions9);
        java.util.Map<com.google.protobuf.Descriptors.FieldDescriptor, java.lang.Object> fieldDescriptorMap11 = builder10.getAllFields();
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder12 = builder10.clearName();
        com.google.protobuf.MessageLite messageLite13 = builder12.buildPartial();
        org.junit.Assert.assertNotNull(methodDescriptorProto0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(methodOptions9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(fieldDescriptorMap11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(messageLite13);
    }

    @Test
    public void test3228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3228");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset10);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.of(localDateTime11, (java.time.ZoneId) zoneOffset15);
        java.time.Clock clock18 = java.time.Clock.fixed(instant0, (java.time.ZoneId) zoneOffset15);
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset22);
        java.time.ZoneOffset zoneOffset27 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset27);
        java.time.ZonedDateTime zonedDateTime29 = java.time.ZonedDateTime.of(localDateTime23, (java.time.ZoneId) zoneOffset27);
        java.time.ZonedDateTime zonedDateTime31 = zonedDateTime29.withYear((int) (short) 1);
        java.time.temporal.ChronoField chronoField32 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit33 = chronoField32.getBaseUnit();
        java.time.ZonedDateTime zonedDateTime34 = zonedDateTime29.truncatedTo(temporalUnit33);
        java.time.Duration duration35 = temporalUnit33.getDuration();
        long long36 = duration35.toDays();
        java.time.Duration duration38 = duration35.minusDays(999L);
        java.time.Clock clock39 = java.time.Clock.tick(clock18, duration35);
        java.time.ZonedDateTime zonedDateTime40 = java.time.ZonedDateTime.now(clock18);
        java.time.ZonedDateTime zonedDateTime42 = zonedDateTime40.minusYears((long) 4096);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(clock18);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zoneOffset27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zonedDateTime29);
        org.junit.Assert.assertNotNull(zonedDateTime31);
        org.junit.Assert.assertTrue("'" + chronoField32 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField32.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit33 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit33.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(zonedDateTime34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(clock39);
        org.junit.Assert.assertNotNull(zonedDateTime40);
        org.junit.Assert.assertNotNull(zonedDateTime42);
    }

    @Test
    public void test3229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3229");
        com.google.javascript.jscomp.SourceAst sourceAst0 = null;
        com.google.javascript.rhino.InputId inputId1 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput3 = new com.google.javascript.jscomp.CompilerInput(sourceAst0, inputId1, true);
        java.io.PrintStream printStream4 = null;
        com.google.javascript.jscomp.Compiler compiler5 = new com.google.javascript.jscomp.Compiler(printStream4);
        com.google.javascript.jscomp.ErrorManager errorManager6 = compiler5.getErrorManager();
        compilerInput3.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler5);
        com.google.javascript.jscomp.CodingConvention codingConvention8 = compiler5.getCodingConvention();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection9 = codingConvention8.getAssertionFunctions();
        java.lang.String str10 = codingConvention8.getAbstractMethodName();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection11 = codingConvention8.getAssertionFunctions();
        java.lang.String str12 = codingConvention8.getExportSymbolFunction();
        org.junit.Assert.assertNotNull(errorManager6);
        org.junit.Assert.assertNotNull(codingConvention8);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "goog.abstractMethod" + "'", str10, "goog.abstractMethod");
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "goog.exportSymbol" + "'", str12, "goog.exportSymbol");
    }

    @Test
    public void test3230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3230");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo sourceCodeInfo2 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.parseFrom(inputStream0, extensionRegistryLite1);
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder3 = sourceCodeInfo2.newBuilderForType();
        com.google.protobuf.UnknownFieldSet unknownFieldSet4 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder5 = builder3.setUnknownFields(unknownFieldSet4);
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.Builder builder7 = builder3.addLocationBuilder(0);
        java.util.List<java.lang.Integer> intList8 = builder7.getPathList();
        org.junit.Assert.assertNotNull(sourceCodeInfo2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(intList8);
    }

    @Test
    public void test3231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3231");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy5 = null;
        compilerOptions0.variableRenaming = variableRenamingPolicy5;
        compilerOptions0.setSummaryDetailLevel(999);
        compilerOptions0.optimizeReturns = false;
        compilerOptions0.gatherCssNames = false;
        compilerOptions0.setNameReferenceReportPath("{}");
        org.junit.Assert.assertNotNull(errorFormat3);
    }

    @Test
    public void test3232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3232");
        com.google.javascript.jscomp.ErrorFormat errorFormat0 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        java.io.PrintStream printStream1 = null;
        com.google.javascript.jscomp.Compiler compiler2 = new com.google.javascript.jscomp.Compiler(printStream1);
        com.google.javascript.jscomp.ErrorManager errorManager3 = compiler2.getErrorManager();
        com.google.javascript.jscomp.MessageFormatter messageFormatter5 = errorFormat0.toFormatter((com.google.javascript.jscomp.SourceExcerptProvider) compiler2, false);
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode6 = compiler2.languageMode();
        org.junit.Assert.assertNotNull(errorFormat0);
        org.junit.Assert.assertNotNull(errorManager3);
        org.junit.Assert.assertNotNull(messageFormatter5);
        org.junit.Assert.assertTrue("'" + languageMode6 + "' != '" + com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT3 + "'", languageMode6.equals(com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT3));
    }

    @Test
    public void test3233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3233");
        com.google.protobuf.UnknownFieldSet.Builder builder0 = com.google.protobuf.UnknownFieldSet.newBuilder();
        boolean boolean2 = builder0.hasField(7);
        byte[] byteArray3 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite4 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions5 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray3, extensionRegistryLite4);
        com.google.protobuf.CodedOutputStream codedOutputStream8 = com.google.protobuf.CodedOutputStream.newInstance(byteArray3, (int) (short) 0, 1);
        com.google.protobuf.CodedInputStream codedInputStream9 = com.google.protobuf.CodedInputStream.newInstance(byteArray3);
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto10 = com.google.protobuf.DescriptorProtos.DescriptorProto.parseFrom(codedInputStream9);
        com.google.protobuf.UnknownFieldSet.Builder builder11 = builder0.mergeFrom(codedInputStream9);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(methodOptions5);
        org.junit.Assert.assertNotNull(codedOutputStream8);
        org.junit.Assert.assertNotNull(codedInputStream9);
        org.junit.Assert.assertNotNull(descriptorProto10);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test3234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3234");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.of(localDateTime4, (java.time.ZoneId) zoneOffset8);
        java.time.temporal.ChronoField chronoField11 = java.time.temporal.ChronoField.OFFSET_SECONDS;
        java.time.temporal.TemporalUnit temporalUnit12 = chronoField11.getRangeUnit();
        long long14 = chronoField11.checkValidValue((long) 2);
        long long15 = zonedDateTime10.getLong((java.time.temporal.TemporalField) chronoField11);
        java.time.OffsetDateTime offsetDateTime16 = zonedDateTime10.toOffsetDateTime();
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertTrue("'" + chronoField11 + "' != '" + java.time.temporal.ChronoField.OFFSET_SECONDS + "'", chronoField11.equals(java.time.temporal.ChronoField.OFFSET_SECONDS));
        org.junit.Assert.assertTrue("'" + temporalUnit12 + "' != '" + java.time.temporal.ChronoUnit.FOREVER + "'", temporalUnit12.equals(java.time.temporal.ChronoUnit.FOREVER));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 2L + "'", long14 == 2L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 52L + "'", long15 == 52L);
        org.junit.Assert.assertNotNull(offsetDateTime16);
    }

    @Test
    public void test3235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3235");
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.Builder builder0 = com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.newBuilder();
        java.io.InputStream inputStream1 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite2 = null;
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.Builder builder3 = builder0.mergeFrom(inputStream1, extensionRegistryLite2);
        java.io.InputStream inputStream4 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite5 = null;
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.Builder builder6 = builder0.mergeFrom(inputStream4, extensionRegistryLite5);
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.Builder builder7 = builder0.clear();
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.Builder builder9 = builder0.setEnd(64);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test3236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3236");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        byte[] byteArray5 = compilerOptions0.inputPropertyMapSerialized;
        com.google.javascript.jscomp.CompilerOptions compilerOptions6 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions6.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat9 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions6.errorFormat = errorFormat9;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy11 = null;
        compilerOptions6.variableRenaming = variableRenamingPolicy11;
        compilerOptions6.setSummaryDetailLevel(999);
        boolean boolean15 = compilerOptions6.getInferTypes();
        boolean boolean16 = compilerOptions6.ideMode;
        compilerOptions6.setGroupVariableDeclarations(true);
        compilerOptions6.setCheckCaja(false);
        java.util.Set<java.lang.String> strSet21 = compilerOptions6.stripNameSuffixes;
        java.util.Spliterator<java.lang.String> strSpliterator22 = strSet21.spliterator();
        compilerOptions0.setStripNamePrefixes(strSet21);
        org.junit.Assert.assertNotNull(errorFormat3);
        org.junit.Assert.assertNull(byteArray5);
        org.junit.Assert.assertNotNull(errorFormat9);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(strSpliterator22);
    }

    @Test
    public void test3237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3237");
        com.google.javascript.jscomp.SourceAst sourceAst0 = null;
        com.google.javascript.rhino.InputId inputId1 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput3 = new com.google.javascript.jscomp.CompilerInput(sourceAst0, inputId1, true);
        com.google.javascript.jscomp.SourceAst sourceAst4 = null;
        com.google.javascript.rhino.InputId inputId5 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput7 = new com.google.javascript.jscomp.CompilerInput(sourceAst4, inputId5, true);
        com.google.javascript.jscomp.SourceAst sourceAst8 = null;
        com.google.javascript.rhino.InputId inputId9 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput11 = new com.google.javascript.jscomp.CompilerInput(sourceAst8, inputId9, true);
        com.google.javascript.rhino.InputId inputId12 = compilerInput11.getInputId();
        com.google.javascript.jscomp.SourceAst sourceAst13 = null;
        com.google.javascript.rhino.InputId inputId14 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput16 = new com.google.javascript.jscomp.CompilerInput(sourceAst13, inputId14, true);
        com.google.javascript.rhino.InputId inputId17 = compilerInput16.getInputId();
        com.google.javascript.jscomp.SourceAst sourceAst18 = null;
        com.google.javascript.rhino.InputId inputId19 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput21 = new com.google.javascript.jscomp.CompilerInput(sourceAst18, inputId19, true);
        java.io.PrintStream printStream22 = null;
        com.google.javascript.jscomp.Compiler compiler23 = new com.google.javascript.jscomp.Compiler(printStream22);
        com.google.javascript.jscomp.ErrorManager errorManager24 = compiler23.getErrorManager();
        compilerInput21.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler23);
        com.google.javascript.jscomp.SourceAst sourceAst26 = null;
        com.google.javascript.rhino.InputId inputId27 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput29 = new com.google.javascript.jscomp.CompilerInput(sourceAst26, inputId27, true);
        com.google.javascript.rhino.InputId inputId30 = compilerInput29.getInputId();
        com.google.javascript.jscomp.SourceAst sourceAst31 = null;
        com.google.javascript.rhino.InputId inputId32 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput34 = new com.google.javascript.jscomp.CompilerInput(sourceAst31, inputId32, true);
        com.google.javascript.jscomp.SourceAst sourceAst35 = null;
        com.google.javascript.rhino.InputId inputId36 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput38 = new com.google.javascript.jscomp.CompilerInput(sourceAst35, inputId36, true);
        java.io.PrintStream printStream39 = null;
        com.google.javascript.jscomp.Compiler compiler40 = new com.google.javascript.jscomp.Compiler(printStream39);
        com.google.javascript.jscomp.ErrorManager errorManager41 = compiler40.getErrorManager();
        compilerInput38.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler40);
        com.google.javascript.jscomp.SourceAst sourceAst43 = null;
        com.google.javascript.rhino.InputId inputId44 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput46 = new com.google.javascript.jscomp.CompilerInput(sourceAst43, inputId44, true);
        com.google.javascript.jscomp.CompilerInput[] compilerInputArray47 = new com.google.javascript.jscomp.CompilerInput[] { compilerInput34, compilerInput38, compilerInput46 };
        com.google.common.collect.ImmutableSet<com.google.javascript.jscomp.CompilerInput> compilerInputSet48 = com.google.common.collect.ImmutableSet.of(compilerInput3, compilerInput7, compilerInput11, compilerInput16, compilerInput21, compilerInput29, compilerInputArray47);
        com.google.javascript.jscomp.SourceAst sourceAst49 = compilerInput16.getAst();
        com.google.javascript.jscomp.SourceAst sourceAst50 = compilerInput16.getSourceAst();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str51 = compilerInput16.getName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(inputId12);
        org.junit.Assert.assertNull(inputId17);
        org.junit.Assert.assertNotNull(errorManager24);
        org.junit.Assert.assertNull(inputId30);
        org.junit.Assert.assertNotNull(errorManager41);
        org.junit.Assert.assertNotNull(compilerInputArray47);
        org.junit.Assert.assertNotNull(compilerInputSet48);
        org.junit.Assert.assertNull(sourceAst49);
        org.junit.Assert.assertNull(sourceAst50);
    }

    @Test
    public void test3238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3238");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRecordFunctionInformation(true);
        boolean boolean3 = compilerOptions0.checkControlStructures;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setAssumeStrictThis(true);
        com.google.javascript.jscomp.MessageBundle messageBundle8 = compilerOptions0.messageBundle;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(messageBundle8);
    }

    @Test
    public void test3239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3239");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MIN;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset9);
        java.time.ZonedDateTime zonedDateTime11 = java.time.ZonedDateTime.of(localDateTime5, (java.time.ZoneId) zoneOffset9);
        java.time.temporal.ChronoField chronoField13 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit14 = chronoField13.getBaseUnit();
        java.time.LocalDateTime localDateTime15 = localDateTime5.plus((long) 1970, temporalUnit14);
        java.time.ZoneOffset zoneOffset20 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset20);
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime26 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset25);
        java.time.ZonedDateTime zonedDateTime27 = java.time.ZonedDateTime.of(localDateTime21, (java.time.ZoneId) zoneOffset25);
        java.time.temporal.ChronoField chronoField29 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit30 = chronoField29.getBaseUnit();
        java.time.LocalDateTime localDateTime31 = localDateTime21.plus((long) 1970, temporalUnit30);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime32 = localDateTime15.minus((long) 43, temporalUnit30);
        java.time.LocalDateTime localDateTime34 = localDateTime15.minusHours((long) 1024);
        java.time.LocalDateTime localDateTime36 = localDateTime34.plusHours((long) 0);
        java.time.ZoneOffset zoneOffset40 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime41 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset40);
        java.time.ZoneOffset zoneOffset45 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime46 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset45);
        java.time.ZonedDateTime zonedDateTime47 = java.time.ZonedDateTime.of(localDateTime41, (java.time.ZoneId) zoneOffset45);
        java.time.ZonedDateTime zonedDateTime49 = zonedDateTime47.minusSeconds((long) '#');
        java.time.temporal.ChronoField chronoField50 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit51 = chronoField50.getBaseUnit();
        boolean boolean52 = zonedDateTime49.isSupported(temporalUnit51);
        java.time.LocalDate localDate53 = java.time.LocalDate.now();
        java.lang.String str54 = localDate53.toString();
        boolean boolean55 = temporalUnit51.isSupportedBy((java.time.temporal.Temporal) localDate53);
        java.time.LocalDateTime localDateTime56 = localDateTime34.truncatedTo(temporalUnit51);
        boolean boolean57 = temporalUnit51.isTimeBased();
        java.time.LocalDateTime localDateTime58 = localDateTime0.truncatedTo(temporalUnit51);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + chronoField13 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField13.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit14 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit14.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(zonedDateTime27);
        org.junit.Assert.assertTrue("'" + chronoField29 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField29.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit30 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit30.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(zoneOffset40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(zoneOffset45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(zonedDateTime47);
        org.junit.Assert.assertNotNull(zonedDateTime49);
        org.junit.Assert.assertTrue("'" + chronoField50 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField50.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit51 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit51.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "2022-02-21" + "'", str54, "2022-02-21");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(localDateTime58);
    }

    @Test
    public void test3240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3240");
        com.google.common.collect.Ordering<com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode> optimizeModeOrdering0 = com.google.common.collect.Ordering.natural();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder1 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions fileOptions2 = builder1.getDefaultInstanceForType();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder4 = builder1.setPyGenericServices(false);
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder5 = builder4.clearJavaMultipleFiles();
        com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode optimizeMode6 = builder5.getOptimizeFor();
        com.google.common.collect.Ordering<com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode> optimizeModeOrdering7 = com.google.common.collect.Ordering.natural();
        com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode optimizeMode8 = com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE;
        com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode optimizeMode9 = com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE;
        com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode optimizeMode10 = optimizeModeOrdering7.min(optimizeMode8, optimizeMode9);
        com.google.protobuf.Descriptors.EnumDescriptor enumDescriptor11 = optimizeMode10.getDescriptorForType();
        com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode optimizeMode12 = com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE;
        com.google.common.collect.Ordering<com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode> optimizeModeOrdering13 = com.google.common.collect.Ordering.natural();
        com.google.common.collect.Ordering<com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode> optimizeModeOrdering14 = optimizeModeOrdering13.reverse();
        com.google.common.collect.Ordering<com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode> optimizeModeOrdering15 = com.google.common.collect.Ordering.natural();
        com.google.common.collect.Ordering<com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode> optimizeModeOrdering16 = optimizeModeOrdering15.reverse();
        com.google.common.collect.Ordering<com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode> optimizeModeOrdering17 = com.google.common.collect.Ordering.natural();
        com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode optimizeMode18 = com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE;
        com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode optimizeMode19 = com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE;
        com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode optimizeMode20 = optimizeModeOrdering17.min(optimizeMode18, optimizeMode19);
        com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode optimizeMode21 = com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.SPEED;
        com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode optimizeMode22 = optimizeModeOrdering16.max(optimizeMode18, optimizeMode21);
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder23 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder24 = builder23.clearCcGenericServices();
        boolean boolean25 = builder23.isInitialized();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder27 = builder23.setJavaOuterClassname("hi!");
        com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode optimizeMode28 = com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.SPEED;
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder29 = builder27.setOptimizeFor(optimizeMode28);
        com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode optimizeMode30 = com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE;
        com.google.protobuf.Descriptors.EnumDescriptor enumDescriptor31 = optimizeMode30.getDescriptorForType();
        com.google.common.collect.Ordering<com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode> optimizeModeOrdering32 = com.google.common.collect.Ordering.natural();
        com.google.common.collect.Ordering<com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode> optimizeModeOrdering33 = optimizeModeOrdering32.reverse();
        com.google.common.collect.Ordering<com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode> optimizeModeOrdering34 = com.google.common.collect.Ordering.natural();
        com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode optimizeMode35 = com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE;
        com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode optimizeMode36 = com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE;
        com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode optimizeMode37 = optimizeModeOrdering34.min(optimizeMode35, optimizeMode36);
        com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode optimizeMode38 = com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.SPEED;
        com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode optimizeMode39 = optimizeModeOrdering33.max(optimizeMode35, optimizeMode38);
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder40 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions fileOptions41 = builder40.getDefaultInstanceForType();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder43 = builder40.setPyGenericServices(false);
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder44 = builder43.clearJavaMultipleFiles();
        com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode optimizeMode45 = builder44.getOptimizeFor();
        com.google.common.collect.Ordering<com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode> optimizeModeOrdering46 = com.google.common.collect.Ordering.natural();
        com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode optimizeMode47 = com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE;
        com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode optimizeMode48 = com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE;
        com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode optimizeMode49 = optimizeModeOrdering46.min(optimizeMode47, optimizeMode48);
        com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode[] optimizeModeArray50 = new com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode[] { optimizeMode39, optimizeMode45, optimizeMode49 };
        com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode optimizeMode51 = optimizeModeOrdering14.min(optimizeMode22, optimizeMode28, optimizeMode30, optimizeModeArray50);
        com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode optimizeMode52 = optimizeModeOrdering0.min(optimizeMode6, optimizeMode10, optimizeMode12, optimizeModeArray50);
        com.google.protobuf.Descriptors.EnumDescriptor enumDescriptor53 = optimizeMode6.getDescriptorForType();
        org.junit.Assert.assertNotNull(optimizeModeOrdering0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(fileOptions2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + optimizeMode6 + "' != '" + com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.SPEED + "'", optimizeMode6.equals(com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.SPEED));
        org.junit.Assert.assertNotNull(optimizeModeOrdering7);
        org.junit.Assert.assertTrue("'" + optimizeMode8 + "' != '" + com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE + "'", optimizeMode8.equals(com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE));
        org.junit.Assert.assertTrue("'" + optimizeMode9 + "' != '" + com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE + "'", optimizeMode9.equals(com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE));
        org.junit.Assert.assertTrue("'" + optimizeMode10 + "' != '" + com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE + "'", optimizeMode10.equals(com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE));
        org.junit.Assert.assertNotNull(enumDescriptor11);
        org.junit.Assert.assertTrue("'" + optimizeMode12 + "' != '" + com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE + "'", optimizeMode12.equals(com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE));
        org.junit.Assert.assertNotNull(optimizeModeOrdering13);
        org.junit.Assert.assertNotNull(optimizeModeOrdering14);
        org.junit.Assert.assertNotNull(optimizeModeOrdering15);
        org.junit.Assert.assertNotNull(optimizeModeOrdering16);
        org.junit.Assert.assertNotNull(optimizeModeOrdering17);
        org.junit.Assert.assertTrue("'" + optimizeMode18 + "' != '" + com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE + "'", optimizeMode18.equals(com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE));
        org.junit.Assert.assertTrue("'" + optimizeMode19 + "' != '" + com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE + "'", optimizeMode19.equals(com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE));
        org.junit.Assert.assertTrue("'" + optimizeMode20 + "' != '" + com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE + "'", optimizeMode20.equals(com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE));
        org.junit.Assert.assertTrue("'" + optimizeMode21 + "' != '" + com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.SPEED + "'", optimizeMode21.equals(com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.SPEED));
        org.junit.Assert.assertTrue("'" + optimizeMode22 + "' != '" + com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.SPEED + "'", optimizeMode22.equals(com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.SPEED));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + optimizeMode28 + "' != '" + com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.SPEED + "'", optimizeMode28.equals(com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.SPEED));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + optimizeMode30 + "' != '" + com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE + "'", optimizeMode30.equals(com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE));
        org.junit.Assert.assertNotNull(enumDescriptor31);
        org.junit.Assert.assertNotNull(optimizeModeOrdering32);
        org.junit.Assert.assertNotNull(optimizeModeOrdering33);
        org.junit.Assert.assertNotNull(optimizeModeOrdering34);
        org.junit.Assert.assertTrue("'" + optimizeMode35 + "' != '" + com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE + "'", optimizeMode35.equals(com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE));
        org.junit.Assert.assertTrue("'" + optimizeMode36 + "' != '" + com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE + "'", optimizeMode36.equals(com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE));
        org.junit.Assert.assertTrue("'" + optimizeMode37 + "' != '" + com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE + "'", optimizeMode37.equals(com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE));
        org.junit.Assert.assertTrue("'" + optimizeMode38 + "' != '" + com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.SPEED + "'", optimizeMode38.equals(com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.SPEED));
        org.junit.Assert.assertTrue("'" + optimizeMode39 + "' != '" + com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.SPEED + "'", optimizeMode39.equals(com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.SPEED));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(fileOptions41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + optimizeMode45 + "' != '" + com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.SPEED + "'", optimizeMode45.equals(com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.SPEED));
        org.junit.Assert.assertNotNull(optimizeModeOrdering46);
        org.junit.Assert.assertTrue("'" + optimizeMode47 + "' != '" + com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE + "'", optimizeMode47.equals(com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE));
        org.junit.Assert.assertTrue("'" + optimizeMode48 + "' != '" + com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE + "'", optimizeMode48.equals(com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE));
        org.junit.Assert.assertTrue("'" + optimizeMode49 + "' != '" + com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE + "'", optimizeMode49.equals(com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE));
        org.junit.Assert.assertNotNull(optimizeModeArray50);
        org.junit.Assert.assertTrue("'" + optimizeMode51 + "' != '" + com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE + "'", optimizeMode51.equals(com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE));
        org.junit.Assert.assertTrue("'" + optimizeMode52 + "' != '" + com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.SPEED + "'", optimizeMode52.equals(com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.SPEED));
        org.junit.Assert.assertNotNull(enumDescriptor53);
    }

    @Test
    public void test3241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3241");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset10);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.of(localDateTime11, (java.time.ZoneId) zoneOffset15);
        java.time.Clock clock18 = java.time.Clock.fixed(instant0, (java.time.ZoneId) zoneOffset15);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.now(clock18);
        java.time.LocalDate localDate20 = java.time.LocalDate.now(clock18);
        com.google.protobuf.Descriptors.Descriptor descriptor21 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto22 = descriptor21.toProto();
        boolean boolean23 = descriptorProto22.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList24 = descriptorProto22.getNestedTypeList();
        int int25 = descriptorProto22.getExtensionRangeCount();
        boolean boolean26 = localDate20.equals((java.lang.Object) descriptorProto22);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder27 = descriptorProto22.newBuilderForType();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList28 = builder27.getNestedTypeList();
        com.google.protobuf.UnknownFieldSet unknownFieldSet29 = builder27.getUnknownFields();
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder30 = builder27.addEnumTypeBuilder();
        byte[] byteArray31 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite32 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions33 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray31, extensionRegistryLite32);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite34 = null;
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto enumDescriptorProto35 = com.google.protobuf.DescriptorProtos.EnumDescriptorProto.parseFrom(byteArray31, extensionRegistryLite34);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto enumDescriptorProto36 = enumDescriptorProto35.getDefaultInstanceForType();
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder37 = builder27.addEnumType(enumDescriptorProto36);
        java.time.Instant instant38 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime43 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset42);
        java.time.OffsetDateTime offsetDateTime44 = java.time.OffsetDateTime.ofInstant(instant38, (java.time.ZoneId) zoneOffset42);
        java.time.ZoneOffset zoneOffset48 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime49 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset48);
        java.time.ZoneOffset zoneOffset53 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime54 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset53);
        java.time.ZonedDateTime zonedDateTime55 = java.time.ZonedDateTime.of(localDateTime49, (java.time.ZoneId) zoneOffset53);
        java.time.Clock clock56 = java.time.Clock.fixed(instant38, (java.time.ZoneId) zoneOffset53);
        java.time.LocalDateTime localDateTime57 = java.time.LocalDateTime.now(clock56);
        java.time.LocalDate localDate58 = java.time.LocalDate.now(clock56);
        com.google.protobuf.Descriptors.Descriptor descriptor59 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto60 = descriptor59.toProto();
        boolean boolean61 = descriptorProto60.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList62 = descriptorProto60.getNestedTypeList();
        int int63 = descriptorProto60.getExtensionRangeCount();
        boolean boolean64 = localDate58.equals((java.lang.Object) descriptorProto60);
        java.lang.String str65 = descriptorProto60.getName();
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder66 = builder37.mergeFrom(descriptorProto60);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.EnumDescriptorProtoOrBuilder enumDescriptorProtoOrBuilder68 = builder66.getEnumTypeOrBuilder(256);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 256, Size: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(clock18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(descriptor21);
        org.junit.Assert.assertNotNull(descriptorProto22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(descriptorProtoList28);
        org.junit.Assert.assertNotNull(unknownFieldSet29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(methodOptions33);
        org.junit.Assert.assertNotNull(enumDescriptorProto35);
        org.junit.Assert.assertNotNull(enumDescriptorProto36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(offsetDateTime44);
        org.junit.Assert.assertNotNull(zoneOffset48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(zoneOffset53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(zonedDateTime55);
        org.junit.Assert.assertNotNull(clock56);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(descriptor59);
        org.junit.Assert.assertNotNull(descriptorProto60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "FileDescriptorProto" + "'", str65, "FileDescriptorProto");
        org.junit.Assert.assertNotNull(builder66);
    }

    @Test
    public void test3242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3242");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer3 = charBuffer1.put('a');
        char[] charArray5 = new char[] { '4' };
        java.nio.CharBuffer charBuffer6 = charBuffer3.get(charArray5);
        java.nio.CharBuffer charBuffer8 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer10 = charBuffer8.put('a');
        char[] charArray12 = new char[] { '4' };
        java.nio.CharBuffer charBuffer13 = charBuffer10.get(charArray12);
        java.nio.CharBuffer charBuffer14 = charBuffer3.put(charArray12);
        java.nio.CharBuffer charBuffer15 = charBuffer3.slice();
        java.nio.CharBuffer charBuffer17 = charBuffer3.append('#');
        int int18 = charBuffer17.length();
        // The following exception was thrown during execution in test generation
        try {
            char char20 = charBuffer17.get((int) ':');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(charBuffer3);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(charBuffer8);
        org.junit.Assert.assertNotNull(charBuffer10);
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer13);
        org.junit.Assert.assertNotNull(charBuffer14);
        org.junit.Assert.assertNotNull(charBuffer15);
        org.junit.Assert.assertNotNull(charBuffer17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 28 + "'", int18 == 28);
    }

    @Test
    public void test3243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3243");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRecordFunctionInformation(true);
        boolean boolean3 = compilerOptions0.checkControlStructures;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setAssumeStrictThis(true);
        compilerOptions0.setTweakToNumberLiteral("16:00:52+00:00:52", 28);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test3244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3244");
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        boolean boolean6 = strSet4.isEmpty();
        java.nio.ByteBuffer byteBuffer8 = java.nio.ByteBuffer.allocate(100);
        boolean boolean9 = strSet4.equals((java.lang.Object) byteBuffer8);
        int int10 = strSet4.size();
        int int11 = strSet4.size();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
    }

    @Test
    public void test3245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3245");
        com.google.javascript.rhino.Node node1 = com.google.javascript.rhino.Node.newString("August");
        java.lang.String str2 = node1.getQualifiedName();
        org.junit.Assert.assertNotNull(node1);
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test3246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3246");
        java.io.FileNotFoundException fileNotFoundException1 = new java.io.FileNotFoundException("*global*");
    }

    @Test
    public void test3247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3247");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean4 = node3.isTry();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean9 = node8.isStringKey();
        boolean boolean10 = node8.isThrow();
        com.google.javascript.rhino.JSDocInfo jSDocInfo11 = null;
        node8.setJSDocInfo(jSDocInfo11);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile13 = node8.getStaticSourceFile();
        boolean boolean14 = node8.isWhile();
        com.google.javascript.rhino.Node node15 = node3.clonePropsFrom(node8);
        com.google.javascript.rhino.Node node16 = node15.cloneNode();
        boolean boolean17 = node15.isCatch();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(staticSourceFile13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test3248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3248");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder3 = builder2.clearSourceCodeInfo();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder4 = builder2.getSourceCodeInfoBuilder();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo sourceCodeInfo5 = builder4.getDefaultInstanceForType();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder6 = sourceCodeInfo5.newBuilderForType();
        java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite> priorityMap7 = new java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite>();
        java.lang.Object obj8 = priorityMap7.clone();
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder9 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.newBuilder();
        boolean boolean10 = priorityMap7.containsValue((java.lang.Object) builder9);
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder12 = builder9.setName("java.nio.ByteBufferAsDoubleBufferB[pos=0 lim=12 cap=12]");
        com.google.protobuf.ByteString byteString13 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder14 = builder9.mergeFrom(byteString13);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite15 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder16 = builder6.mergeFrom(byteString13, extensionRegistryLite15);
        byte[] byteArray17 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite18 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions19 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray17, extensionRegistryLite18);
        com.google.protobuf.CodedInputStream codedInputStream22 = com.google.protobuf.CodedInputStream.newInstance(byteArray17, 16, (int) 'a');
        com.google.protobuf.CodedInputStream codedInputStream25 = com.google.protobuf.CodedInputStream.newInstance(byteArray17, 0, (int) (short) 10);
        int int27 = codedInputStream25.setRecursionLimit((int) 'a');
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder28 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder29 = builder28.clearCcGenericServices();
        boolean boolean30 = builder28.isInitialized();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder32 = builder28.setCcGenericServices(true);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder33 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label34 = builder33.getLabel();
        com.google.protobuf.ByteString byteString35 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder36 = builder33.mergeFrom(byteString35);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite37 = null;
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder38 = builder32.mergeFrom(byteString35, extensionRegistryLite37);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite39 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions40 = com.google.protobuf.DescriptorProtos.EnumValueOptions.parseFrom(byteString35, extensionRegistryLite39);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite41 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto42 = com.google.protobuf.DescriptorProtos.DescriptorProto.parseFrom(byteString35, extensionRegistryLite41);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder43 = builder6.mergeFrom(codedInputStream25, extensionRegistryLite41);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(sourceCodeInfo5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "{}");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(byteString13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(methodOptions19);
        org.junit.Assert.assertNotNull(codedInputStream22);
        org.junit.Assert.assertNotNull(codedInputStream25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 64 + "'", int27 == 64);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + label34 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label34.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(byteString35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(enumValueOptions40);
        org.junit.Assert.assertNotNull(extensionRegistryLite41);
        org.junit.Assert.assertNotNull(descriptorProto42);
    }

    @Test
    public void test3249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3249");
        java.time.OffsetTime offsetTime0 = java.time.OffsetTime.MAX;
        java.time.Instant instant1 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset5);
        java.time.OffsetDateTime offsetDateTime7 = java.time.OffsetDateTime.ofInstant(instant1, (java.time.ZoneId) zoneOffset5);
        java.time.OffsetDateTime offsetDateTime9 = offsetDateTime7.minusDays((long) (short) 100);
        java.lang.String str10 = offsetDateTime7.toString();
        java.time.LocalTime localTime11 = offsetDateTime7.toLocalTime();
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset16);
        int int18 = localDateTime17.getYear();
        java.time.Instant instant19 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset23);
        java.time.OffsetDateTime offsetDateTime25 = java.time.OffsetDateTime.ofInstant(instant19, (java.time.ZoneId) zoneOffset23);
        java.time.Instant instant26 = localDateTime17.toInstant(zoneOffset23);
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime32 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset31);
        java.time.ZoneOffset zoneOffset36 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime37 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset36);
        java.time.ZonedDateTime zonedDateTime38 = java.time.ZonedDateTime.of(localDateTime32, (java.time.ZoneId) zoneOffset36);
        java.time.temporal.ChronoField chronoField40 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit41 = chronoField40.getBaseUnit();
        java.time.LocalDateTime localDateTime42 = localDateTime32.plus((long) 1970, temporalUnit41);
        java.time.ZoneOffset zoneOffset47 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime48 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset47);
        java.time.ZoneOffset zoneOffset52 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime53 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset52);
        java.time.ZonedDateTime zonedDateTime54 = java.time.ZonedDateTime.of(localDateTime48, (java.time.ZoneId) zoneOffset52);
        java.time.temporal.ChronoField chronoField56 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit57 = chronoField56.getBaseUnit();
        java.time.LocalDateTime localDateTime58 = localDateTime48.plus((long) 1970, temporalUnit57);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime59 = localDateTime42.minus((long) 43, temporalUnit57);
        java.time.Instant instant60 = instant26.plus((long) 16384, temporalUnit57);
        java.time.LocalTime localTime61 = localTime11.plus((long) 64, temporalUnit57);
        java.time.ZoneOffset zoneOffset66 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime67 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset66);
        java.time.ZoneOffset zoneOffset71 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime72 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset71);
        java.time.ZonedDateTime zonedDateTime73 = java.time.ZonedDateTime.of(localDateTime67, (java.time.ZoneId) zoneOffset71);
        java.time.temporal.ChronoField chronoField75 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit76 = chronoField75.getBaseUnit();
        java.time.LocalDateTime localDateTime77 = localDateTime67.plus((long) 1970, temporalUnit76);
        java.time.LocalTime localTime78 = localTime11.plus(4L, temporalUnit76);
        java.time.OffsetTime offsetTime79 = offsetTime0.truncatedTo(temporalUnit76);
        java.time.ZoneOffset zoneOffset83 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime84 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset83);
        java.time.ZoneOffset zoneOffset88 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime89 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset88);
        java.time.ZonedDateTime zonedDateTime90 = java.time.ZonedDateTime.of(localDateTime84, (java.time.ZoneId) zoneOffset88);
        java.time.ZonedDateTime zonedDateTime92 = zonedDateTime90.withYear((int) (short) 1);
        java.time.temporal.ChronoField chronoField93 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit94 = chronoField93.getBaseUnit();
        java.time.ZonedDateTime zonedDateTime95 = zonedDateTime90.truncatedTo(temporalUnit94);
        java.time.format.DateTimeFormatter dateTimeFormatter96 = java.time.format.DateTimeFormatter.ISO_INSTANT;
        java.lang.String str97 = zonedDateTime90.format(dateTimeFormatter96);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str98 = offsetTime79.format(dateTimeFormatter96);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: InstantSeconds");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(offsetTime0);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-01T00:00:52+00:00:52" + "'", str10, "1970-01-01T00:00:52+00:00:52");
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(zoneOffset36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(zonedDateTime38);
        org.junit.Assert.assertTrue("'" + chronoField40 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField40.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit41 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit41.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(zoneOffset47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(zoneOffset52);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(zonedDateTime54);
        org.junit.Assert.assertTrue("'" + chronoField56 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField56.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit57 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit57.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime59);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertNotNull(zoneOffset66);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(zoneOffset71);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(zonedDateTime73);
        org.junit.Assert.assertTrue("'" + chronoField75 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField75.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit76 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit76.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(localTime78);
        org.junit.Assert.assertNotNull(offsetTime79);
        org.junit.Assert.assertNotNull(zoneOffset83);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(zoneOffset88);
        org.junit.Assert.assertNotNull(localDateTime89);
        org.junit.Assert.assertNotNull(zonedDateTime90);
        org.junit.Assert.assertNotNull(zonedDateTime92);
        org.junit.Assert.assertTrue("'" + chronoField93 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField93.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit94 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit94.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(zonedDateTime95);
        org.junit.Assert.assertNotNull(dateTimeFormatter96);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "1970-01-01T00:01:40Z" + "'", str97, "1970-01-01T00:01:40Z");
    }

    @Test
    public void test3250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3250");
        java.util.List<java.nio.file.spi.FileSystemProvider> fileSystemProviderList0 = java.nio.file.spi.FileSystemProvider.installedProviders();
        org.junit.Assert.assertNotNull(fileSystemProviderList0);
    }

    @Test
    public void test3251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3251");
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        boolean boolean6 = strSet4.isEmpty();
        java.nio.ByteBuffer byteBuffer8 = java.nio.ByteBuffer.allocate(100);
        boolean boolean9 = strSet4.equals((java.lang.Object) byteBuffer8);
        java.nio.IntBuffer intBuffer10 = byteBuffer8.asIntBuffer();
        double double11 = byteBuffer8.getDouble();
        java.nio.ByteBuffer byteBuffer12 = byteBuffer8.asReadOnlyBuffer();
        boolean boolean13 = byteBuffer8.isDirect();
        char char15 = byteBuffer8.getChar((int) (byte) 1);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(intBuffer10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + char15 + "' != '" + '\000' + "'", char15 == '\000');
    }

    @Test
    public void test3252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3252");
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative0 = com.google.javascript.rhino.jstype.JSTypeNative.URI_ERROR_FUNCTION_TYPE;
        org.junit.Assert.assertTrue("'" + jSTypeNative0 + "' != '" + com.google.javascript.rhino.jstype.JSTypeNative.URI_ERROR_FUNCTION_TYPE + "'", jSTypeNative0.equals(com.google.javascript.rhino.jstype.JSTypeNative.URI_ERROR_FUNCTION_TYPE));
    }

    @Test
    public void test3253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3253");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) ' ');
        boolean boolean2 = charBuffer1.isDirect();
        java.nio.CharBuffer charBuffer4 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer6 = charBuffer4.put('a');
        char[] charArray8 = new char[] { '4' };
        java.nio.CharBuffer charBuffer9 = charBuffer6.get(charArray8);
        java.nio.CharBuffer charBuffer10 = charBuffer6.compact();
        java.nio.CharBuffer charBuffer12 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer14 = charBuffer12.put('a');
        java.nio.CharBuffer charBuffer16 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer18 = charBuffer16.put('a');
        char[] charArray20 = new char[] { '4' };
        java.nio.CharBuffer charBuffer21 = charBuffer18.get(charArray20);
        java.nio.CharBuffer charBuffer22 = charBuffer18.compact();
        com.google.common.collect.ImmutableSet<java.lang.Appendable> appendableSet23 = com.google.common.collect.ImmutableSet.of((java.lang.Appendable) charBuffer1, (java.lang.Appendable) charBuffer6, (java.lang.Appendable) charBuffer12, (java.lang.Appendable) charBuffer22);
        java.time.ZoneOffset zoneOffset27 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset27);
        int int29 = localDateTime28.getYear();
        java.time.Instant instant30 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset34);
        java.time.OffsetDateTime offsetDateTime36 = java.time.OffsetDateTime.ofInstant(instant30, (java.time.ZoneId) zoneOffset34);
        java.time.Instant instant37 = localDateTime28.toInstant(zoneOffset34);
        boolean boolean38 = appendableSet23.equals((java.lang.Object) zoneOffset34);
        java.lang.Object[] objArray39 = appendableSet23.toArray();
        java.util.concurrent.TimeUnit timeUnit40 = java.util.concurrent.TimeUnit.HOURS;
        boolean boolean41 = appendableSet23.contains((java.lang.Object) timeUnit40);
        com.google.common.collect.ImmutableList<java.lang.Appendable> appendableList42 = appendableSet23.asList();
        java.time.ZoneOffset zoneOffset46 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime47 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset46);
        int int48 = localDateTime47.getYear();
        java.time.Instant instant49 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset53 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime54 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset53);
        java.time.OffsetDateTime offsetDateTime55 = java.time.OffsetDateTime.ofInstant(instant49, (java.time.ZoneId) zoneOffset53);
        java.time.Instant instant56 = localDateTime47.toInstant(zoneOffset53);
        int int57 = appendableList42.lastIndexOf((java.lang.Object) instant56);
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder58 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions fileOptions59 = builder58.getDefaultInstanceForType();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder61 = builder58.setPyGenericServices(false);
        int int62 = appendableList42.lastIndexOf((java.lang.Object) builder61);
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.ImmutableList<java.lang.Appendable> appendableList65 = appendableList42.subList(999, 8);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: start index (999) must not be greater than size (3)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charBuffer4);
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer9);
        org.junit.Assert.assertNotNull(charBuffer10);
        org.junit.Assert.assertNotNull(charBuffer12);
        org.junit.Assert.assertNotNull(charBuffer14);
        org.junit.Assert.assertNotNull(charBuffer16);
        org.junit.Assert.assertNotNull(charBuffer18);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer21);
        org.junit.Assert.assertNotNull(charBuffer22);
        org.junit.Assert.assertNotNull(appendableSet23);
        org.junit.Assert.assertNotNull(zoneOffset27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1970 + "'", int29 == 1970);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(offsetDateTime36);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000, \000\000, \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000, \000\000, \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000]");
        org.junit.Assert.assertNotNull(timeUnit40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(appendableList42);
        org.junit.Assert.assertNotNull(zoneOffset46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1970 + "'", int48 == 1970);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertNotNull(zoneOffset53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(offsetDateTime55);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(fileOptions59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
    }

    @Test
    public void test3254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3254");
        byte[] byteArray0 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions2 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray0, extensionRegistryLite1);
        com.google.protobuf.CodedOutputStream codedOutputStream5 = com.google.protobuf.CodedOutputStream.newInstance(byteArray0, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite6 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto7 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray0, extensionRegistryLite6);
        boolean boolean8 = fileDescriptorProto7.hasOptions();
        com.google.protobuf.DescriptorProtos.FileOptionsOrBuilder fileOptionsOrBuilder9 = fileDescriptorProto7.getOptionsOrBuilder();
        boolean boolean10 = fileDescriptorProto7.hasSourceCodeInfo();
        com.google.protobuf.DescriptorProtos.FileOptions fileOptions11 = fileDescriptorProto7.getOptions();
        java.util.List<com.google.protobuf.DescriptorProtos.FieldDescriptorProto> fieldDescriptorProtoList12 = fileDescriptorProto7.getExtensionList();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(methodOptions2);
        org.junit.Assert.assertNotNull(codedOutputStream5);
        org.junit.Assert.assertNotNull(fileDescriptorProto7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(fileOptionsOrBuilder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(fileOptions11);
        org.junit.Assert.assertNotNull(fieldDescriptorProtoList12);
    }

    @Test
    public void test3255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3255");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        boolean boolean1 = charset0.canEncode();
        java.nio.charset.CharsetEncoder charsetEncoder2 = charset0.newEncoder();
        float float3 = charsetEncoder2.maxBytesPerChar();
        java.nio.CharBuffer charBuffer5 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer7 = charBuffer5.put('a');
        char[] charArray9 = new char[] { '4' };
        java.nio.CharBuffer charBuffer10 = charBuffer7.get(charArray9);
        java.nio.CharBuffer charBuffer12 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer14 = charBuffer12.put('a');
        char[] charArray16 = new char[] { '4' };
        java.nio.CharBuffer charBuffer17 = charBuffer14.get(charArray16);
        java.nio.CharBuffer charBuffer18 = charBuffer7.put(charArray16);
        java.nio.CharBuffer charBuffer19 = charBuffer7.slice();
        char[] charArray24 = new char[] { '#', ' ', ':', ' ' };
        java.nio.CharBuffer charBuffer25 = java.nio.CharBuffer.wrap(charArray24);
        java.nio.CharBuffer charBuffer26 = charBuffer19.get(charArray24);
        java.nio.CharBuffer charBuffer28 = charBuffer19.put('a');
        java.nio.ByteBuffer byteBuffer29 = charsetEncoder2.encode(charBuffer28);
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(charsetEncoder2);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 1.0f + "'", float3 == 1.0f);
        org.junit.Assert.assertNotNull(charBuffer5);
        org.junit.Assert.assertNotNull(charBuffer7);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer10);
        org.junit.Assert.assertNotNull(charBuffer12);
        org.junit.Assert.assertNotNull(charBuffer14);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer17);
        org.junit.Assert.assertNotNull(charBuffer18);
        org.junit.Assert.assertNotNull(charBuffer19);
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[\000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(charBuffer25);
        org.junit.Assert.assertNotNull(charBuffer26);
        org.junit.Assert.assertNotNull(charBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer29);
    }

    @Test
    public void test3256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3256");
        java.io.InputStream inputStream0 = null;
        java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite> priorityMap1 = new java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite>();
        java.lang.Object obj2 = priorityMap1.clone();
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.newBuilder();
        boolean boolean4 = priorityMap1.containsValue((java.lang.Object) builder3);
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder6 = builder3.setName("java.nio.ByteBufferAsDoubleBufferB[pos=0 lim=12 cap=12]");
        com.google.protobuf.ByteString byteString7 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder8 = builder3.mergeFrom(byteString7);
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions9 = com.google.protobuf.DescriptorProtos.EnumValueOptions.getDefaultInstance();
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder10 = com.google.protobuf.DescriptorProtos.EnumValueOptions.newBuilder(enumValueOptions9);
        java.io.InputStream inputStream11 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder12 = builder10.mergeFrom(inputStream11);
        com.google.protobuf.ByteString byteString13 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto14 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.parseFrom(byteString13);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite15 = null;
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto enumValueDescriptorProto16 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.parseFrom(byteString13, extensionRegistryLite15);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite17 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions18 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteString13, extensionRegistryLite17);
        java.io.InputStream inputStream19 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite20 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location21 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream19, extensionRegistryLite20);
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder22 = builder12.mergeFrom(byteString13, extensionRegistryLite20);
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto23 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.parseFrom(byteString7, extensionRegistryLite20);
        com.google.javascript.jscomp.FunctionInformationMap functionInformationMap24 = com.google.javascript.jscomp.FunctionInformationMap.parseFrom(inputStream0, extensionRegistryLite20);
        int int25 = functionInformationMap24.getModuleCount();
        com.google.javascript.jscomp.FunctionInformationMap.Builder builder26 = functionInformationMap24.toBuilder();
        java.io.InputStream inputStream27 = null;
        com.google.javascript.jscomp.FunctionInformationMap.Builder builder28 = builder26.mergeFrom(inputStream27);
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor29 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int30 = builder26.getRepeatedFieldCount(fieldDescriptor29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "{}");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(byteString7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(enumValueOptions9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(byteString13);
        org.junit.Assert.assertNotNull(methodDescriptorProto14);
        org.junit.Assert.assertNotNull(enumValueDescriptorProto16);
        org.junit.Assert.assertNotNull(methodOptions18);
        org.junit.Assert.assertNotNull(extensionRegistryLite20);
        org.junit.Assert.assertNotNull(location21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(serviceDescriptorProto23);
        org.junit.Assert.assertNotNull(functionInformationMap24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test3257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3257");
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        boolean boolean6 = strSet4.isEmpty();
        java.nio.ByteBuffer byteBuffer8 = java.nio.ByteBuffer.allocate(100);
        boolean boolean9 = strSet4.equals((java.lang.Object) byteBuffer8);
        java.nio.ByteBuffer byteBuffer11 = byteBuffer8.putInt((int) ':');
        // The following exception was thrown during execution in test generation
        try {
            double double13 = byteBuffer11.getDouble(99);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(byteBuffer11);
    }

    @Test
    public void test3258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3258");
        com.google.javascript.jscomp.JsMessage.Builder builder1 = new com.google.javascript.jscomp.JsMessage.Builder("2022-02-21");
        java.util.Set<java.lang.String> strSet2 = builder1.getPlaceholders();
        com.google.javascript.jscomp.JsMessage.Builder builder4 = builder1.setKey("1947-06-09T18:00+18:00");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test3259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3259");
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode0 = com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF;
        org.junit.Assert.assertTrue("'" + tracerMode0 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode0.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
    }

    @Test
    public void test3260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3260");
        byte[] byteArray0 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions2 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray0, extensionRegistryLite1);
        com.google.protobuf.CodedOutputStream codedOutputStream5 = com.google.protobuf.CodedOutputStream.newInstance(byteArray0, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite6 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto7 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray0, extensionRegistryLite6);
        boolean boolean8 = fileDescriptorProto7.hasOptions();
        com.google.protobuf.DescriptorProtos.FileOptionsOrBuilder fileOptionsOrBuilder9 = fileDescriptorProto7.getOptionsOrBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions fileOptions10 = fileDescriptorProto7.getOptions();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(methodOptions2);
        org.junit.Assert.assertNotNull(codedOutputStream5);
        org.junit.Assert.assertNotNull(fileDescriptorProto7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(fileOptionsOrBuilder9);
        org.junit.Assert.assertNotNull(fileOptions10);
    }

    @Test
    public void test3261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3261");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label1 = builder0.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto2 = builder0.buildPartial();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder3 = builder0.clear();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder5 = builder3.setNumber((int) (short) 100);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder6 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder8 = builder6.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FileOptionsOrBuilder fileOptionsOrBuilder9 = builder8.getOptionsOrBuilder();
        byte[] byteArray10 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite11 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions12 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray10, extensionRegistryLite11);
        com.google.protobuf.CodedOutputStream codedOutputStream15 = com.google.protobuf.CodedOutputStream.newInstance(byteArray10, (int) (short) 0, 1);
        com.google.protobuf.CodedOutputStream codedOutputStream18 = com.google.protobuf.CodedOutputStream.newInstance(byteArray10, (int) ' ', 0);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder19 = builder8.mergeFrom(byteArray10);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder20 = builder3.mergeFrom(byteArray10);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder21 = builder20.clone();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + label1 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label1.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(fileOptionsOrBuilder9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(methodOptions12);
        org.junit.Assert.assertNotNull(codedOutputStream15);
        org.junit.Assert.assertNotNull(codedOutputStream18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test3262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3262");
        java.time.temporal.ChronoField chronoField0 = java.time.temporal.ChronoField.EPOCH_DAY;
        java.time.Instant instant1 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset5);
        java.time.OffsetDateTime offsetDateTime7 = java.time.OffsetDateTime.ofInstant(instant1, (java.time.ZoneId) zoneOffset5);
        java.time.temporal.ValueRange valueRange8 = chronoField0.rangeRefinedBy((java.time.temporal.TemporalAccessor) offsetDateTime7);
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset13);
        int int15 = localDateTime14.getYear();
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset19);
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset24);
        java.time.ZonedDateTime zonedDateTime26 = java.time.ZonedDateTime.of(localDateTime20, (java.time.ZoneId) zoneOffset24);
        boolean boolean27 = localDateTime14.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime20);
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime32 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset31);
        int int33 = localDateTime32.getYear();
        java.time.LocalDate localDate34 = localDateTime32.toLocalDate();
        int int35 = localDateTime14.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime32);
        java.time.temporal.ChronoField chronoField36 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit37 = chronoField36.getBaseUnit();
        long long38 = localDateTime14.getLong((java.time.temporal.TemporalField) chronoField36);
        boolean boolean39 = chronoField36.isTimeBased();
        long long40 = valueRange8.checkValidValue((long) 256, (java.time.temporal.TemporalField) chronoField36);
        org.junit.Assert.assertTrue("'" + chronoField0 + "' != '" + java.time.temporal.ChronoField.EPOCH_DAY + "'", chronoField0.equals(java.time.temporal.ChronoField.EPOCH_DAY));
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(valueRange8);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1970 + "'", int33 == 1970);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + chronoField36 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField36.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit37 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit37.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 12L + "'", long38 == 12L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 256L + "'", long40 == 256L);
    }

    @Test
    public void test3263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3263");
        com.google.javascript.jscomp.WarningsGuard[] warningsGuardArray0 = new com.google.javascript.jscomp.WarningsGuard[] {};
        java.util.ArrayList<com.google.javascript.jscomp.WarningsGuard> warningsGuardList1 = new java.util.ArrayList<com.google.javascript.jscomp.WarningsGuard>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.WarningsGuard>) warningsGuardList1, warningsGuardArray0);
        com.google.javascript.jscomp.ComposeWarningsGuard composeWarningsGuard3 = new com.google.javascript.jscomp.ComposeWarningsGuard((java.util.List<com.google.javascript.jscomp.WarningsGuard>) warningsGuardList1);
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean9 = node8.isFromExterns();
        com.google.javascript.rhino.Node node13 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean14 = node13.isFromExterns();
        java.lang.String str15 = node13.toString();
        com.google.javascript.rhino.Node node16 = node8.copyInformationFrom(node13);
        int int17 = node8.getLineno();
        boolean boolean18 = node8.isLabel();
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean23 = node22.isStringKey();
        boolean boolean24 = node22.isTrue();
        com.google.javascript.rhino.InputId inputId26 = new com.google.javascript.rhino.InputId("NUMBER 52.0 0");
        node22.setInputId(inputId26);
        node8.setInputId(inputId26);
        com.google.javascript.jscomp.CompilerOptions compilerOptions29 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions29.setRecordFunctionInformation(true);
        boolean boolean32 = compilerOptions29.checkControlStructures;
        compilerOptions29.setCollapseProperties(false);
        compilerOptions29.setAssumeStrictThis(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions37 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions37.optimizeCalls = false;
        compilerOptions37.preferLineBreakAtEndOfFile = false;
        boolean boolean42 = compilerOptions37.markNoSideEffectCalls;
        boolean boolean43 = compilerOptions37.labelRenaming;
        com.google.javascript.jscomp.DependencyOptions dependencyOptions44 = new com.google.javascript.jscomp.DependencyOptions();
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet49 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet49, strArray48);
        boolean boolean51 = strSet49.isEmpty();
        java.nio.ByteBuffer byteBuffer53 = java.nio.ByteBuffer.allocate(100);
        boolean boolean54 = strSet49.equals((java.lang.Object) byteBuffer53);
        java.lang.String[] strArray58 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet59 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet59, strArray58);
        boolean boolean61 = strSet59.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream62 = strSet59.stream();
        boolean boolean63 = strSet49.retainAll((java.util.Collection<java.lang.String>) strSet59);
        com.google.javascript.jscomp.DependencyOptions dependencyOptions64 = dependencyOptions44.setEntryPoints((java.util.Collection<java.lang.String>) strSet49);
        compilerOptions37.setDependencyOptions(dependencyOptions44);
        com.google.javascript.jscomp.CheckLevel checkLevel66 = compilerOptions37.checkGlobalThisLevel;
        compilerOptions29.reportMissingOverride = checkLevel66;
        com.google.javascript.jscomp.DiagnosticType diagnosticType70 = com.google.javascript.jscomp.DiagnosticType.warning("", "Unknown class name");
        java.lang.String[] strArray75 = new java.lang.String[] { "2022-02-21", "2022-02-21", "hi!", "/tmp/hi!4516073975838273390ISO" };
        com.google.javascript.jscomp.JSError jSError76 = com.google.javascript.jscomp.JSError.make("{}", node8, checkLevel66, diagnosticType70, strArray75);
        int int77 = jSError76.getLineNumber();
        com.google.javascript.jscomp.CheckLevel checkLevel78 = composeWarningsGuard3.level(jSError76);
        org.junit.Assert.assertNotNull(warningsGuardArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "NUMBER 52.0 0" + "'", str15, "NUMBER 52.0 0");
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(strStream62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(dependencyOptions64);
        org.junit.Assert.assertTrue("'" + checkLevel66 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel66.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(diagnosticType70);
        org.junit.Assert.assertNotNull(strArray75);
        org.junit.Assert.assertNotNull(jSError76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNull(checkLevel78);
    }

    @Test
    public void test3264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3264");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType4 = jSTypeRegistry2.createObjectType(objectType3);
        jSTypeRegistry2.forwardDeclareType("");
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7, false);
        com.google.javascript.rhino.jstype.ObjectType objectType10 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType11 = jSTypeRegistry9.createObjectType(objectType10);
        com.google.javascript.rhino.ErrorReporter errorReporter12 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter12, false);
        com.google.javascript.rhino.jstype.ObjectType objectType15 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType16 = jSTypeRegistry14.createObjectType(objectType15);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair17 = objectType11.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType16);
        com.google.javascript.rhino.Node node18 = objectType11.getRootNode();
        com.google.javascript.rhino.ErrorReporter errorReporter19 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter19, false);
        com.google.javascript.rhino.jstype.ObjectType objectType22 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType23 = jSTypeRegistry21.createObjectType(objectType22);
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24, false);
        com.google.javascript.rhino.jstype.ObjectType objectType27 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType28 = jSTypeRegistry26.createObjectType(objectType27);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair29 = objectType23.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType28);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue30 = objectType11.testForEquality((com.google.javascript.rhino.jstype.JSType) objectType23);
        com.google.javascript.rhino.jstype.JSType jSType31 = jSTypeRegistry2.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType11);
        com.google.javascript.rhino.ErrorReporter errorReporter33 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter33, false);
        com.google.javascript.rhino.jstype.ObjectType objectType36 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType37 = jSTypeRegistry35.createObjectType(objectType36);
        com.google.javascript.rhino.ErrorReporter errorReporter38 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry40 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter38, false);
        com.google.javascript.rhino.jstype.ObjectType objectType41 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType42 = jSTypeRegistry40.createObjectType(objectType41);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair43 = objectType37.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType42);
        boolean boolean45 = objectType37.isPropertyInExterns("hi!");
        com.google.javascript.rhino.jstype.JSType jSType46 = objectType37.getTypeOfThis();
        boolean boolean47 = jSTypeRegistry2.declareType("{184980960}", (com.google.javascript.rhino.jstype.JSType) objectType37);
        com.google.javascript.rhino.jstype.FunctionType functionType48 = objectType37.getOwnerFunction();
        org.junit.Assert.assertNotNull(objectType4);
        org.junit.Assert.assertNotNull(objectType11);
        org.junit.Assert.assertNotNull(objectType16);
        org.junit.Assert.assertNotNull(typePair17);
        org.junit.Assert.assertNull(node18);
        org.junit.Assert.assertNotNull(objectType23);
        org.junit.Assert.assertNotNull(objectType28);
        org.junit.Assert.assertNotNull(typePair29);
        org.junit.Assert.assertNotNull(ternaryValue30);
        org.junit.Assert.assertNotNull(jSType31);
        org.junit.Assert.assertNotNull(objectType37);
        org.junit.Assert.assertNotNull(objectType42);
        org.junit.Assert.assertNotNull(typePair43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(jSType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNull(functionType48);
    }

    @Test
    public void test3265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3265");
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output2 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream4 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output2, (int) 'a');
        byte[] byteArray5 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite6 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions7 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray5, extensionRegistryLite6);
        output2.write(byteArray5);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder9 = builder0.mergeFrom(byteArray5);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder10 = builder0.clear();
        java.io.InputStream inputStream11 = null;
        com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder builder12 = com.google.javascript.jscomp.FunctionInformationMap.Entry.newBuilder();
        boolean boolean13 = builder12.hasSourceName();
        com.google.javascript.jscomp.FunctionInformationMap.Entry entry14 = builder12.getDefaultInstanceForType();
        com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder builder16 = builder12.setLineNumber(7);
        java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite> priorityMap17 = new java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite>();
        java.lang.Object obj18 = priorityMap17.clone();
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder19 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.newBuilder();
        boolean boolean20 = priorityMap17.containsValue((java.lang.Object) builder19);
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder22 = builder19.setName("java.nio.ByteBufferAsDoubleBufferB[pos=0 lim=12 cap=12]");
        com.google.protobuf.ByteString byteString23 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder24 = builder19.mergeFrom(byteString23);
        com.google.protobuf.ByteString byteString25 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite26 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions27 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(byteString25, extensionRegistryLite26);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder28 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label29 = builder28.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto30 = builder28.buildPartial();
        int int31 = fieldDescriptorProto30.getSerializedSize();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder32 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto30);
        java.io.InputStream inputStream33 = null;
        java.io.InputStream inputStream34 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite35 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location36 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream34, extensionRegistryLite35);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder37 = builder32.mergeFrom(inputStream33, extensionRegistryLite35);
        com.google.javascript.jscomp.FunctionInformationMap functionInformationMap38 = com.google.javascript.jscomp.FunctionInformationMap.parseFrom(byteString25, extensionRegistryLite35);
        com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder builder39 = builder16.mergeFrom(byteString23, extensionRegistryLite35);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean40 = builder10.mergeDelimitedFrom(inputStream11, extensionRegistryLite35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(output2);
        org.junit.Assert.assertNotNull(codedOutputStream4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(methodOptions7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(entry14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "{}");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(byteString23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(byteString25);
        org.junit.Assert.assertNotNull(enumOptions27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + label29 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label29.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(extensionRegistryLite35);
        org.junit.Assert.assertNotNull(location36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(functionInformationMap38);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test3266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3266");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType4 = jSTypeRegistry2.createObjectType(objectType3);
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.jstype.ObjectType objectType8 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry7.createObjectType(objectType8);
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10, false);
        com.google.javascript.rhino.jstype.ObjectType objectType13 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType14 = jSTypeRegistry12.createObjectType(objectType13);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair15 = objectType9.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType14);
        com.google.javascript.rhino.Node node16 = objectType9.getRootNode();
        com.google.javascript.rhino.jstype.EnumType enumType17 = objectType9.toMaybeEnumType();
        boolean boolean18 = objectType9.isParameterizedType();
        com.google.javascript.rhino.jstype.JSType jSType19 = jSTypeRegistry2.createNullableType((com.google.javascript.rhino.jstype.JSType) objectType9);
        com.google.javascript.rhino.ErrorReporter errorReporter20 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter20, false);
        com.google.javascript.rhino.jstype.ObjectType objectType23 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType24 = jSTypeRegistry22.createObjectType(objectType23);
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        com.google.javascript.rhino.jstype.ObjectType objectType28 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType29 = jSTypeRegistry27.createObjectType(objectType28);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair30 = objectType24.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType29);
        com.google.javascript.rhino.JSDocInfo jSDocInfo31 = objectType24.getJSDocInfo();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray32 = new com.google.javascript.rhino.jstype.JSType[] { objectType24 };
        com.google.javascript.rhino.Node node33 = jSTypeRegistry2.createOptionalParameters(jSTypeArray32);
        org.junit.Assert.assertNotNull(objectType4);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertNotNull(objectType14);
        org.junit.Assert.assertNotNull(typePair15);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNull(enumType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jSType19);
        org.junit.Assert.assertNotNull(objectType24);
        org.junit.Assert.assertNotNull(objectType29);
        org.junit.Assert.assertNotNull(typePair30);
        org.junit.Assert.assertNull(jSDocInfo31);
        org.junit.Assert.assertNotNull(jSTypeArray32);
        org.junit.Assert.assertNotNull(node33);
    }

    @Test
    public void test3267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3267");
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder1 = builder0.clearCcGenericServices();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder2 = builder0.clearJavaOuterClassname();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder3 = builder2.clearJavaPackage();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder4 = builder2.clearJavaOuterClassname();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test3268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3268");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean5 = node4.isStringKey();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean10 = node9.isVar();
        com.google.javascript.rhino.Node[] nodeArray11 = new com.google.javascript.rhino.Node[] { node4, node9 };
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(10, nodeArray11);
        boolean boolean13 = node12.isInc();
        boolean boolean14 = node12.isTypeOf();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node15 = node12.detachFromParent();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(nodeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test3269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3269");
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative0 = com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN;
        org.junit.Assert.assertTrue("'" + jSTypeNative0 + "' != '" + com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN + "'", jSTypeNative0.equals(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN));
    }

    @Test
    public void test3270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3270");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        com.google.javascript.rhino.jstype.ObjectType objectType6 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType7 = jSTypeRegistry5.createObjectType(objectType6);
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.jstype.ObjectType objectType11 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType12 = jSTypeRegistry10.createObjectType(objectType11);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair13 = objectType7.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType12);
        java.lang.String str14 = objectType12.getDisplayName();
        java.util.Collection<com.google.javascript.rhino.jstype.FunctionType> functionTypeCollection15 = jSTypeRegistry2.getDirectImplementors(objectType12);
        java.lang.String str16 = objectType12.toDebugHashCodeString();
        com.google.javascript.rhino.jstype.FunctionType functionType17 = objectType12.getOwnerFunction();
        org.junit.Assert.assertNotNull(objectType7);
        org.junit.Assert.assertNotNull(objectType12);
        org.junit.Assert.assertNotNull(typePair13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(functionTypeCollection15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{1083841325}" + "'", str16, "{1083841325}");
        org.junit.Assert.assertNull(functionType17);
    }

    @Test
    public void test3271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3271");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.nio.file.attribute.FileTime fileTime1 = java.nio.file.attribute.FileTime.from(instant0);
        java.time.Instant instant2 = java.time.Instant.EPOCH;
        java.nio.file.attribute.FileTime fileTime3 = java.nio.file.attribute.FileTime.from(instant2);
        java.util.concurrent.TimeUnit timeUnit4 = java.util.concurrent.TimeUnit.NANOSECONDS;
        long long5 = fileTime3.to(timeUnit4);
        java.time.Instant instant7 = java.time.Instant.EPOCH;
        java.nio.file.attribute.FileTime fileTime8 = java.nio.file.attribute.FileTime.from(instant7);
        java.util.concurrent.TimeUnit timeUnit9 = java.util.concurrent.TimeUnit.NANOSECONDS;
        long long10 = fileTime8.to(timeUnit9);
        java.time.Instant instant12 = java.time.Instant.EPOCH;
        java.nio.file.attribute.FileTime fileTime13 = java.nio.file.attribute.FileTime.from(instant12);
        java.util.concurrent.TimeUnit timeUnit14 = java.util.concurrent.TimeUnit.NANOSECONDS;
        long long15 = fileTime13.to(timeUnit14);
        long long16 = timeUnit9.convert((long) '4', timeUnit14);
        long long17 = timeUnit4.convert((long) 2, timeUnit9);
        long long18 = fileTime1.to(timeUnit4);
        java.util.concurrent.TimeUnit timeUnit20 = java.util.concurrent.TimeUnit.NANOSECONDS;
        java.nio.file.attribute.FileTime fileTime21 = java.nio.file.attribute.FileTime.from((long) 1970, timeUnit20);
        int int22 = fileTime1.compareTo(fileTime21);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(fileTime1);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(fileTime3);
        org.junit.Assert.assertNotNull(timeUnit4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(fileTime8);
        org.junit.Assert.assertNotNull(timeUnit9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(fileTime13);
        org.junit.Assert.assertNotNull(timeUnit14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 52L + "'", long16 == 52L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2L + "'", long17 == 2L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(timeUnit20);
        org.junit.Assert.assertNotNull(fileTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
    }

    @Test
    public void test3272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3272");
        java.io.PrintStream printStream0 = null;
        com.google.javascript.jscomp.Compiler compiler1 = new com.google.javascript.jscomp.Compiler(printStream0);
        com.google.javascript.jscomp.ErrorManager errorManager2 = compiler1.getErrorManager();
        com.google.javascript.jscomp.JSError[] jSErrorArray3 = compiler1.getErrors();
        com.google.javascript.jscomp.ErrorManager errorManager4 = compiler1.getErrorManager();
        int int5 = errorManager4.getErrorCount();
        org.junit.Assert.assertNotNull(errorManager2);
        org.junit.Assert.assertNotNull(jSErrorArray3);
        org.junit.Assert.assertNotNull(errorManager4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test3273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3273");
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto0 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.getDefaultInstance();
        boolean boolean1 = methodDescriptorProto0.hasOutputType();
        com.google.protobuf.CodedOutputStream codedOutputStream2 = null;
        methodDescriptorProto0.writeTo(codedOutputStream2);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder4 = methodDescriptorProto0.toBuilder();
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder6 = builder4.setOutputType("java.nio.HeapFloatBuffer[pos=0 lim=6 cap=6]");
        java.io.InputStream inputStream7 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite8 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions9 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(inputStream7, extensionRegistryLite8);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder10 = builder6.mergeOptions(methodOptions9);
        java.util.Map<com.google.protobuf.Descriptors.FieldDescriptor, java.lang.Object> fieldDescriptorMap11 = builder10.getAllFields();
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions12 = builder10.getOptions();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder13 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder15 = builder13.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder16 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label17 = builder16.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder18 = builder13.addExtension(builder16);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder19 = builder13.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder20 = builder19.getOptionsBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder21 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder23 = builder21.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder24 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label25 = builder24.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder26 = builder21.addExtension(builder24);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder27 = builder21.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder28 = builder27.getOptionsBuilder();
        java.io.InputStream inputStream29 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions30 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream29);
        boolean boolean31 = enumOptions30.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder32 = builder28.mergeFrom(enumOptions30);
        com.google.protobuf.UnknownFieldSet unknownFieldSet33 = builder28.getUnknownFields();
        com.google.protobuf.CodedOutputStream codedOutputStream34 = null;
        unknownFieldSet33.writeTo(codedOutputStream34);
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder36 = builder20.setUnknownFields(unknownFieldSet33);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto37 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.getDefaultInstance();
        boolean boolean38 = methodDescriptorProto37.hasOutputType();
        byte[] byteArray39 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite40 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions41 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray39, extensionRegistryLite40);
        com.google.protobuf.CodedOutputStream codedOutputStream44 = com.google.protobuf.CodedOutputStream.newInstance(byteArray39, (int) (short) 0, 1);
        methodDescriptorProto37.writeTo(codedOutputStream44);
        unknownFieldSet33.writeTo(codedOutputStream44);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder47 = builder10.mergeUnknownFields(unknownFieldSet33);
        com.google.protobuf.DescriptorProtos.MethodOptionsOrBuilder methodOptionsOrBuilder48 = builder10.getOptionsOrBuilder();
        org.junit.Assert.assertNotNull(methodDescriptorProto0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(methodOptions9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(fieldDescriptorMap11);
        org.junit.Assert.assertNotNull(methodOptions12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + label17 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label17.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + label25 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label25.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(enumOptions30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(unknownFieldSet33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(methodDescriptorProto37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(methodOptions41);
        org.junit.Assert.assertNotNull(codedOutputStream44);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(methodOptionsOrBuilder48);
    }

    @Test
    public void test3274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3274");
        com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder builder0 = com.google.javascript.jscomp.FunctionInformationMap.Entry.newBuilder();
        com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder builder1 = builder0.clearModuleName();
        java.lang.String str2 = builder0.getModuleName();
        int int3 = builder0.getSize();
        com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder builder5 = builder0.setSourceName("\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test3275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3275");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        com.google.javascript.rhino.jstype.ObjectType objectType6 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType7 = jSTypeRegistry5.createObjectType(objectType6);
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.jstype.ObjectType objectType11 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType12 = jSTypeRegistry10.createObjectType(objectType11);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair13 = objectType7.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType12);
        java.lang.String str14 = objectType12.getDisplayName();
        java.util.Collection<com.google.javascript.rhino.jstype.FunctionType> functionTypeCollection15 = jSTypeRegistry2.getDirectImplementors(objectType12);
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable17 = jSTypeRegistry2.getEachReferenceTypeWithProperty("+00:00:52");
        jSTypeRegistry2.forwardDeclareType("{1572375491}");
        com.google.javascript.rhino.ErrorReporter errorReporter21 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter21, false);
        com.google.javascript.rhino.jstype.ObjectType objectType24 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType25 = jSTypeRegistry23.createObjectType(objectType24);
        com.google.javascript.rhino.ErrorReporter errorReporter26 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter26, false);
        com.google.javascript.rhino.jstype.ObjectType objectType29 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType30 = jSTypeRegistry28.createObjectType(objectType29);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        com.google.javascript.rhino.jstype.ObjectType objectType34 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType35 = jSTypeRegistry33.createObjectType(objectType34);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair36 = objectType30.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType35);
        com.google.javascript.rhino.Node node37 = objectType30.getRootNode();
        com.google.javascript.rhino.jstype.EnumType enumType38 = objectType30.toMaybeEnumType();
        boolean boolean39 = objectType30.isParameterizedType();
        com.google.javascript.rhino.jstype.JSType jSType40 = jSTypeRegistry23.createNullableType((com.google.javascript.rhino.jstype.JSType) objectType30);
        com.google.javascript.rhino.ErrorReporter errorReporter42 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry44 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter42, false);
        com.google.javascript.rhino.jstype.ObjectType objectType45 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType46 = jSTypeRegistry44.createObjectType(objectType45);
        com.google.javascript.rhino.ErrorReporter errorReporter47 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry49 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter47, false);
        com.google.javascript.rhino.jstype.ObjectType objectType50 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType51 = jSTypeRegistry49.createObjectType(objectType50);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair52 = objectType46.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType51);
        boolean boolean53 = objectType51.isTemplateType();
        boolean boolean54 = objectType51.isNativeObjectType();
        boolean boolean55 = objectType51.isNumberValueType();
        jSTypeRegistry23.unregisterPropertyOnType("goog.exportSymbol", (com.google.javascript.rhino.jstype.JSType) objectType51);
        java.lang.String str57 = objectType51.getNormalizedReferenceName();
        jSTypeRegistry2.unregisterPropertyOnType("{1572375491}", (com.google.javascript.rhino.jstype.JSType) objectType51);
        org.junit.Assert.assertNotNull(objectType7);
        org.junit.Assert.assertNotNull(objectType12);
        org.junit.Assert.assertNotNull(typePair13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(functionTypeCollection15);
        org.junit.Assert.assertNotNull(objectTypeIterable17);
        org.junit.Assert.assertNotNull(objectType25);
        org.junit.Assert.assertNotNull(objectType30);
        org.junit.Assert.assertNotNull(objectType35);
        org.junit.Assert.assertNotNull(typePair36);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNull(enumType38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(jSType40);
        org.junit.Assert.assertNotNull(objectType46);
        org.junit.Assert.assertNotNull(objectType51);
        org.junit.Assert.assertNotNull(typePair52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(str57);
    }

    @Test
    public void test3276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3276");
        com.google.protobuf.CodedInputStream codedInputStream0 = null;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder1 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label2 = builder1.getLabel();
        java.io.InputStream inputStream3 = null;
        com.google.protobuf.MessageLite.Builder builder4 = builder1.mergeFrom(inputStream3);
        com.google.protobuf.UnknownFieldSet unknownFieldSet5 = null;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder6 = builder1.setUnknownFields(unknownFieldSet5);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder8 = builder6.setNumber((int) (short) 100);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder9 = builder8.clear();
        java.io.InputStream inputStream10 = null;
        com.google.javascript.jscomp.FunctionInformationMap.Module.Builder builder11 = com.google.javascript.jscomp.FunctionInformationMap.Module.newBuilder();
        java.io.InputStream inputStream12 = null;
        java.io.InputStream inputStream13 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite14 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location15 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream13, extensionRegistryLite14);
        com.google.javascript.jscomp.FunctionInformationMap.Module.Builder builder16 = builder11.mergeFrom(inputStream12, extensionRegistryLite14);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder17 = builder8.mergeFrom(inputStream10, extensionRegistryLite14);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.ServiceOptions serviceOptions18 = com.google.protobuf.DescriptorProtos.ServiceOptions.parseFrom(codedInputStream0, extensionRegistryLite14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + label2 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label2.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(extensionRegistryLite14);
        org.junit.Assert.assertNotNull(location15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test3277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3277");
        com.google.protobuf.DescriptorProtos.UninterpretedOption.NamePart namePart0 = com.google.protobuf.DescriptorProtos.UninterpretedOption.NamePart.getDefaultInstance();
        boolean boolean1 = namePart0.hasNamePart();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.NamePart.Builder builder2 = namePart0.newBuilderForType();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder3 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder4 = builder3.clearCcGenericServices();
        boolean boolean5 = builder3.isInitialized();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder7 = builder3.setCcGenericServices(true);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder8 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label9 = builder8.getLabel();
        com.google.protobuf.ByteString byteString10 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder11 = builder8.mergeFrom(byteString10);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite12 = null;
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder13 = builder7.mergeFrom(byteString10, extensionRegistryLite12);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite14 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions15 = com.google.protobuf.DescriptorProtos.EnumValueOptions.parseFrom(byteString10, extensionRegistryLite14);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite16 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto17 = com.google.protobuf.DescriptorProtos.DescriptorProto.parseFrom(byteString10, extensionRegistryLite16);
        com.google.protobuf.DescriptorProtos.UninterpretedOption.NamePart.Builder builder18 = builder2.mergeFrom(byteString10);
        byte[] byteArray19 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite20 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions21 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray19, extensionRegistryLite20);
        com.google.protobuf.CodedInputStream codedInputStream24 = com.google.protobuf.CodedInputStream.newInstance(byteArray19, 16, (int) 'a');
        com.google.javascript.jscomp.VariableMap variableMap25 = com.google.javascript.jscomp.VariableMap.fromBytes(byteArray19);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite26 = null;
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto enumDescriptorProto27 = com.google.protobuf.DescriptorProtos.EnumDescriptorProto.parseFrom(byteArray19, extensionRegistryLite26);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder28 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder30 = builder28.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder31 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label32 = builder31.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder33 = builder28.addExtension(builder31);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder34 = builder28.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder35 = builder34.getOptionsBuilder();
        java.io.InputStream inputStream36 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions37 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream36);
        boolean boolean38 = enumOptions37.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder39 = builder35.mergeFrom(enumOptions37);
        com.google.protobuf.UnknownFieldSet unknownFieldSet40 = builder35.getUnknownFields();
        byte[] byteArray41 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite42 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions43 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray41, extensionRegistryLite42);
        com.google.protobuf.CodedOutputStream codedOutputStream46 = com.google.protobuf.CodedOutputStream.newInstance(byteArray41, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite47 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto48 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray41, extensionRegistryLite47);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite49 = null;
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto50 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.parseFrom(byteArray41, extensionRegistryLite49);
        com.google.protobuf.UnknownFieldSet unknownFieldSet51 = com.google.protobuf.UnknownFieldSet.parseFrom(byteArray41);
        com.google.protobuf.ByteString byteString52 = unknownFieldSet51.toByteString();
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite53 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder54 = builder35.mergeFrom(byteString52, extensionRegistryLite53);
        com.google.protobuf.DescriptorProtos.FieldOptions fieldOptions55 = com.google.protobuf.DescriptorProtos.FieldOptions.parseFrom(byteString52);
        com.google.protobuf.ByteString byteString56 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite57 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions58 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(byteString56, extensionRegistryLite57);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder59 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label60 = builder59.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto61 = builder59.buildPartial();
        int int62 = fieldDescriptorProto61.getSerializedSize();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder63 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto61);
        java.io.InputStream inputStream64 = null;
        java.io.InputStream inputStream65 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite66 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location67 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream65, extensionRegistryLite66);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder68 = builder63.mergeFrom(inputStream64, extensionRegistryLite66);
        com.google.javascript.jscomp.FunctionInformationMap functionInformationMap69 = com.google.javascript.jscomp.FunctionInformationMap.parseFrom(byteString56, extensionRegistryLite66);
        com.google.protobuf.DescriptorProtos.FileOptions fileOptions70 = com.google.protobuf.DescriptorProtos.FileOptions.parseFrom(byteString52, extensionRegistryLite66);
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange extensionRange71 = com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.parseFrom(byteArray19, extensionRegistryLite66);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto enumDescriptorProto72 = com.google.protobuf.DescriptorProtos.EnumDescriptorProto.parseFrom(byteString10, extensionRegistryLite66);
        org.junit.Assert.assertNotNull(namePart0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + label9 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label9.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(byteString10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(enumValueOptions15);
        org.junit.Assert.assertNotNull(extensionRegistryLite16);
        org.junit.Assert.assertNotNull(descriptorProto17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(methodOptions21);
        org.junit.Assert.assertNotNull(codedInputStream24);
        org.junit.Assert.assertNotNull(variableMap25);
        org.junit.Assert.assertNotNull(enumDescriptorProto27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + label32 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label32.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(enumOptions37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(unknownFieldSet40);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[]");
        org.junit.Assert.assertNotNull(methodOptions43);
        org.junit.Assert.assertNotNull(codedOutputStream46);
        org.junit.Assert.assertNotNull(fileDescriptorProto48);
        org.junit.Assert.assertNotNull(serviceDescriptorProto50);
        org.junit.Assert.assertNotNull(unknownFieldSet51);
        org.junit.Assert.assertNotNull(byteString52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(fieldOptions55);
        org.junit.Assert.assertNotNull(byteString56);
        org.junit.Assert.assertNotNull(enumOptions58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertTrue("'" + label60 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label60.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(extensionRegistryLite66);
        org.junit.Assert.assertNotNull(location67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(functionInformationMap69);
        org.junit.Assert.assertNotNull(fileOptions70);
        org.junit.Assert.assertNotNull(extensionRange71);
        org.junit.Assert.assertNotNull(enumDescriptorProto72);
    }

    @Test
    public void test3278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3278");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("1970-03-24T02:02:32");
        char[] charArray5 = new char[] { '/', '+', '/' };
        printWriter1.println(charArray5);
        printWriter1.print((float) 28147497671065600L);
        printWriter1.write((int) (byte) 100);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "/+/");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "/+/");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[/, +, /]");
    }

    @Test
    public void test3279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3279");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean4 = node3.isStringKey();
        boolean boolean5 = node3.isTrue();
        com.google.javascript.rhino.InputId inputId7 = new com.google.javascript.rhino.InputId("NUMBER 52.0 0");
        node3.setInputId(inputId7);
        com.google.javascript.jscomp.SourceAst sourceAst9 = null;
        com.google.javascript.rhino.InputId inputId10 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput12 = new com.google.javascript.jscomp.CompilerInput(sourceAst9, inputId10, true);
        java.io.PrintStream printStream13 = null;
        com.google.javascript.jscomp.Compiler compiler14 = new com.google.javascript.jscomp.Compiler(printStream13);
        com.google.javascript.jscomp.ErrorManager errorManager15 = compiler14.getErrorManager();
        compilerInput12.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler14);
        com.google.javascript.jscomp.CodingConvention codingConvention17 = compiler14.getCodingConvention();
        boolean boolean18 = inputId7.equals((java.lang.Object) compiler14);
        compiler14.disableThreads();
        com.google.javascript.jscomp.SourceFile.Builder builder20 = new com.google.javascript.jscomp.SourceFile.Builder();
        java.nio.charset.Charset charset21 = java.nio.charset.Charset.defaultCharset();
        boolean boolean22 = charset21.canEncode();
        java.nio.charset.CharsetEncoder charsetEncoder23 = charset21.newEncoder();
        com.google.javascript.jscomp.SourceFile.Builder builder24 = builder20.withCharset(charset21);
        com.google.javascript.jscomp.SourceFile sourceFile27 = builder20.buildFromCode("Unknown class name", "/tmp/hi!2243381819290526754ISO");
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node28 = compiler14.parse(sourceFile27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(errorManager15);
        org.junit.Assert.assertNotNull(codingConvention17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(charsetEncoder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(sourceFile27);
    }

    @Test
    public void test3280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3280");
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto0 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.getDefaultInstance();
        boolean boolean1 = serviceDescriptorProto0.hasOptions();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder2 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.newBuilder(serviceDescriptorProto0);
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto3 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.getDefaultInstance();
        boolean boolean4 = serviceDescriptorProto3.hasOptions();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder5 = builder2.mergeFrom(serviceDescriptorProto3);
        boolean boolean6 = builder5.hasOptions();
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto8 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.getDefaultInstance();
        boolean boolean9 = methodDescriptorProto8.hasOutputType();
        com.google.protobuf.CodedOutputStream codedOutputStream10 = null;
        methodDescriptorProto8.writeTo(codedOutputStream10);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder12 = methodDescriptorProto8.toBuilder();
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder14 = builder12.setOutputType("java.nio.HeapFloatBuffer[pos=0 lim=6 cap=6]");
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder15 = builder12.clearInputType();
        java.lang.String str16 = builder12.getOutputType();
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder17 = builder5.addMethod((int) (byte) 1, builder12);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serviceDescriptorProto0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(serviceDescriptorProto3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(methodDescriptorProto8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "java.nio.HeapFloatBuffer[pos=0 lim=6 cap=6]" + "'", str16, "java.nio.HeapFloatBuffer[pos=0 lim=6 cap=6]");
    }

    @Test
    public void test3281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3281");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean4 = node3.isStringKey();
        boolean boolean5 = node3.isTrue();
        com.google.javascript.rhino.InputId inputId7 = new com.google.javascript.rhino.InputId("NUMBER 52.0 0");
        node3.setInputId(inputId7);
        com.google.javascript.jscomp.SourceAst sourceAst9 = null;
        com.google.javascript.rhino.InputId inputId10 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput12 = new com.google.javascript.jscomp.CompilerInput(sourceAst9, inputId10, true);
        java.io.PrintStream printStream13 = null;
        com.google.javascript.jscomp.Compiler compiler14 = new com.google.javascript.jscomp.Compiler(printStream13);
        com.google.javascript.jscomp.ErrorManager errorManager15 = compiler14.getErrorManager();
        compilerInput12.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler14);
        com.google.javascript.jscomp.CodingConvention codingConvention17 = compiler14.getCodingConvention();
        boolean boolean18 = inputId7.equals((java.lang.Object) compiler14);
        com.google.javascript.jscomp.Region region21 = compiler14.getSourceRegion("java.nio.HeapFloatBuffer[pos=0 lim=6 cap=6]", 0);
        com.google.javascript.jscomp.JSError[] jSErrorArray22 = compiler14.getWarnings();
        com.google.javascript.jscomp.CompilerOptions compilerOptions26 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions26.optimizeCalls = false;
        compilerOptions26.preferLineBreakAtEndOfFile = false;
        boolean boolean31 = compilerOptions26.markNoSideEffectCalls;
        boolean boolean32 = compilerOptions26.labelRenaming;
        com.google.javascript.jscomp.DependencyOptions dependencyOptions33 = new com.google.javascript.jscomp.DependencyOptions();
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        boolean boolean40 = strSet38.isEmpty();
        java.nio.ByteBuffer byteBuffer42 = java.nio.ByteBuffer.allocate(100);
        boolean boolean43 = strSet38.equals((java.lang.Object) byteBuffer42);
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet48 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet48, strArray47);
        boolean boolean50 = strSet48.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream51 = strSet48.stream();
        boolean boolean52 = strSet38.retainAll((java.util.Collection<java.lang.String>) strSet48);
        com.google.javascript.jscomp.DependencyOptions dependencyOptions53 = dependencyOptions33.setEntryPoints((java.util.Collection<java.lang.String>) strSet38);
        compilerOptions26.setDependencyOptions(dependencyOptions33);
        com.google.javascript.jscomp.CheckLevel checkLevel55 = compilerOptions26.checkGlobalThisLevel;
        com.google.javascript.jscomp.DiagnosticType diagnosticType56 = com.google.javascript.jscomp.Compiler.MOTION_ITERATIONS_ERROR;
        java.lang.String[] strArray57 = null;
        com.google.javascript.jscomp.JSError jSError58 = com.google.javascript.jscomp.JSError.make("goog.abstractMethod", 37, (int) (byte) -1, checkLevel55, diagnosticType56, strArray57);
        int int59 = jSError58.getNodeLength();
        compiler14.report(jSError58);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(errorManager15);
        org.junit.Assert.assertNotNull(codingConvention17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(region21);
        org.junit.Assert.assertNotNull(jSErrorArray22);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(strStream51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dependencyOptions53);
        org.junit.Assert.assertTrue("'" + checkLevel55 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel55.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(diagnosticType56);
        org.junit.Assert.assertNotNull(jSError58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
    }

    @Test
    public void test3282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3282");
        java.io.File file2 = null;
        java.io.File file3 = java.io.File.createTempFile("hi!", "ISO", file2);
        boolean boolean6 = file3.setWritable(false, false);
        java.net.URI uRI7 = file3.toURI();
        java.io.PrintStream printStream8 = new java.io.PrintStream(file3);
        printStream8.print((int) (byte) 0);
        printStream8.print(10.0d);
        java.util.Locale locale13 = java.util.Locale.TAIWAN;
        com.google.javascript.rhino.ErrorReporter errorReporter15 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter15, false);
        com.google.javascript.rhino.jstype.ObjectType objectType18 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType19 = jSTypeRegistry17.createObjectType(objectType18);
        jSTypeRegistry17.identifyNonNullableName("/");
        boolean boolean23 = jSTypeRegistry17.isForwardDeclaredType("java.nio.ByteBufferAsDoubleBufferB[pos=0 lim=12 cap=12]");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray24 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.Node node25 = jSTypeRegistry17.createParametersWithVarArgs(jSTypeArray24);
        java.io.PrintStream printStream26 = printStream8.printf(locale13, "java.nio.HeapLongBufferR[pos=0 lim=5 cap=5]", (java.lang.Object[]) jSTypeArray24);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file3.toString(), "/tmp/hi!3922788295614751433ISO");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(uRI7);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(objectType19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(jSTypeArray24);
        org.junit.Assert.assertNotNull(node25);
        org.junit.Assert.assertNotNull(printStream26);
    }

    @Test
    public void test3283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3283");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label4 = builder3.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = builder0.addExtension(builder3);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder6 = builder0.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder7 = builder6.getOptionsBuilder();
        java.io.InputStream inputStream8 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions9 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream8);
        boolean boolean10 = enumOptions9.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder11 = builder7.mergeFrom(enumOptions9);
        com.google.protobuf.UnknownFieldSet unknownFieldSet12 = builder7.getUnknownFields();
        byte[] byteArray13 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite14 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions15 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray13, extensionRegistryLite14);
        com.google.protobuf.CodedOutputStream codedOutputStream18 = com.google.protobuf.CodedOutputStream.newInstance(byteArray13, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite19 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto20 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray13, extensionRegistryLite19);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite21 = null;
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto22 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.parseFrom(byteArray13, extensionRegistryLite21);
        com.google.protobuf.UnknownFieldSet unknownFieldSet23 = com.google.protobuf.UnknownFieldSet.parseFrom(byteArray13);
        com.google.protobuf.ByteString byteString24 = unknownFieldSet23.toByteString();
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite25 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder26 = builder7.mergeFrom(byteString24, extensionRegistryLite25);
        com.google.protobuf.DescriptorProtos.FieldOptions fieldOptions27 = com.google.protobuf.DescriptorProtos.FieldOptions.parseFrom(byteString24);
        com.google.protobuf.ByteString byteString28 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite29 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions30 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(byteString28, extensionRegistryLite29);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder31 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label32 = builder31.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto33 = builder31.buildPartial();
        int int34 = fieldDescriptorProto33.getSerializedSize();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder35 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto33);
        java.io.InputStream inputStream36 = null;
        java.io.InputStream inputStream37 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite38 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location39 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream37, extensionRegistryLite38);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder40 = builder35.mergeFrom(inputStream36, extensionRegistryLite38);
        com.google.javascript.jscomp.FunctionInformationMap functionInformationMap41 = com.google.javascript.jscomp.FunctionInformationMap.parseFrom(byteString28, extensionRegistryLite38);
        com.google.protobuf.DescriptorProtos.FileOptions fileOptions42 = com.google.protobuf.DescriptorProtos.FileOptions.parseFrom(byteString24, extensionRegistryLite38);
        com.google.javascript.jscomp.FunctionInformationMap functionInformationMap43 = com.google.javascript.jscomp.FunctionInformationMap.parseFrom(byteString24);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + label4 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label4.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(enumOptions9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(unknownFieldSet12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(methodOptions15);
        org.junit.Assert.assertNotNull(codedOutputStream18);
        org.junit.Assert.assertNotNull(fileDescriptorProto20);
        org.junit.Assert.assertNotNull(serviceDescriptorProto22);
        org.junit.Assert.assertNotNull(unknownFieldSet23);
        org.junit.Assert.assertNotNull(byteString24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(fieldOptions27);
        org.junit.Assert.assertNotNull(byteString28);
        org.junit.Assert.assertNotNull(enumOptions30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + label32 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label32.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(extensionRegistryLite38);
        org.junit.Assert.assertNotNull(location39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(functionInformationMap41);
        org.junit.Assert.assertNotNull(fileOptions42);
        org.junit.Assert.assertNotNull(functionInformationMap43);
    }

    @Test
    public void test3284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3284");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        com.google.javascript.rhino.Node node4 = node3.getLastChild();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean5 = node4.isFor();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(node4);
    }

    @Test
    public void test3285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3285");
        java.io.InputStream inputStream0 = null;
        byte[] byteArray1 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite2 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions3 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray1, extensionRegistryLite2);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite4 = null;
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto enumDescriptorProto5 = com.google.protobuf.DescriptorProtos.EnumDescriptorProto.parseFrom(byteArray1, extensionRegistryLite4);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite6 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions7 = com.google.protobuf.DescriptorProtos.EnumValueOptions.parseFrom(byteArray1, extensionRegistryLite6);
        com.google.javascript.jscomp.FunctionInformationMap.Module.Builder builder8 = com.google.javascript.jscomp.FunctionInformationMap.Module.newBuilder();
        java.lang.String str9 = builder8.getCompiledSource();
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite12 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions13 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray11, extensionRegistryLite12);
        com.google.protobuf.DescriptorProtos.UninterpretedOption uninterpretedOption14 = com.google.protobuf.DescriptorProtos.UninterpretedOption.parseFrom(byteArray11);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder15 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label16 = builder15.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto17 = builder15.buildPartial();
        int int18 = fieldDescriptorProto17.getSerializedSize();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder19 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto17);
        java.io.InputStream inputStream20 = null;
        java.io.InputStream inputStream21 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite22 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location23 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream21, extensionRegistryLite22);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder24 = builder19.mergeFrom(inputStream20, extensionRegistryLite22);
        com.google.javascript.jscomp.FunctionInformationMap functionInformationMap25 = com.google.javascript.jscomp.FunctionInformationMap.parseFrom(byteArray11, extensionRegistryLite22);
        com.google.javascript.jscomp.FunctionInformationMap.Module.Builder builder26 = builder8.mergeFrom(inputStream10, extensionRegistryLite22);
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions27 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray1, extensionRegistryLite22);
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions28 = com.google.protobuf.DescriptorProtos.EnumValueOptions.parseFrom(inputStream0, extensionRegistryLite22);
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertNotNull(methodOptions3);
        org.junit.Assert.assertNotNull(enumDescriptorProto5);
        org.junit.Assert.assertNotNull(enumValueOptions7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(methodOptions13);
        org.junit.Assert.assertNotNull(uninterpretedOption14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + label16 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label16.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(extensionRegistryLite22);
        org.junit.Assert.assertNotNull(location23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(functionInformationMap25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(methodOptions27);
        org.junit.Assert.assertNotNull(enumValueOptions28);
    }

    @Test
    public void test3286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3286");
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder1 = builder0.clearCcGenericServices();
        java.lang.String str2 = builder1.getJavaPackage();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test3287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3287");
        com.google.protobuf.DescriptorProtos.FileOptions fileOptions0 = com.google.protobuf.DescriptorProtos.FileOptions.getDefaultInstance();
        java.util.List<com.google.protobuf.DescriptorProtos.UninterpretedOption> uninterpretedOptionList1 = fileOptions0.getUninterpretedOptionList();
        boolean boolean2 = fileOptions0.getJavaGenericServices();
        boolean boolean3 = fileOptions0.hasCcGenericServices();
        java.lang.String str4 = fileOptions0.getJavaPackage();
        org.junit.Assert.assertNotNull(fileOptions0);
        org.junit.Assert.assertNotNull(uninterpretedOptionList1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test3288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3288");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label4 = builder3.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = builder0.addExtension(builder3);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder6 = builder0.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder7 = builder6.getOptionsBuilder();
        java.io.InputStream inputStream8 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions9 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream8);
        boolean boolean10 = enumOptions9.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder11 = builder7.mergeFrom(enumOptions9);
        com.google.protobuf.UnknownFieldSet unknownFieldSet12 = builder7.getUnknownFields();
        byte[] byteArray13 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite14 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions15 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray13, extensionRegistryLite14);
        com.google.protobuf.CodedOutputStream codedOutputStream18 = com.google.protobuf.CodedOutputStream.newInstance(byteArray13, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite19 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto20 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray13, extensionRegistryLite19);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite21 = null;
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto22 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.parseFrom(byteArray13, extensionRegistryLite21);
        com.google.protobuf.UnknownFieldSet unknownFieldSet23 = com.google.protobuf.UnknownFieldSet.parseFrom(byteArray13);
        com.google.protobuf.ByteString byteString24 = unknownFieldSet23.toByteString();
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite25 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder26 = builder7.mergeFrom(byteString24, extensionRegistryLite25);
        com.google.protobuf.DescriptorProtos.FieldOptions fieldOptions27 = com.google.protobuf.DescriptorProtos.FieldOptions.parseFrom(byteString24);
        com.google.protobuf.DescriptorProtos.FieldOptions.Builder builder28 = fieldOptions27.newBuilderForType();
        java.util.Map<com.google.protobuf.Descriptors.FieldDescriptor, java.lang.Object> fieldDescriptorMap29 = builder28.getAllFields();
        com.google.protobuf.DescriptorProtos.FieldOptions fieldOptions30 = builder28.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + label4 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label4.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(enumOptions9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(unknownFieldSet12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(methodOptions15);
        org.junit.Assert.assertNotNull(codedOutputStream18);
        org.junit.Assert.assertNotNull(fileDescriptorProto20);
        org.junit.Assert.assertNotNull(serviceDescriptorProto22);
        org.junit.Assert.assertNotNull(unknownFieldSet23);
        org.junit.Assert.assertNotNull(byteString24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(fieldOptions27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(fieldDescriptorMap29);
        org.junit.Assert.assertNotNull(fieldOptions30);
    }

    @Test
    public void test3289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3289");
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.of((long) (-1));
        java.util.stream.LongStream longStream2 = longStream1.distinct();
        java.util.stream.DoubleStream doubleStream3 = longStream2.asDoubleStream();
        boolean boolean4 = doubleStream3.isParallel();
        java.util.stream.DoubleStream doubleStream5 = doubleStream3.unordered();
        java.util.DoubleSummaryStatistics doubleSummaryStatistics6 = new java.util.DoubleSummaryStatistics();
        java.util.stream.DoubleStream doubleStream7 = doubleStream5.peek((java.util.function.DoubleConsumer) doubleSummaryStatistics6);
        long long8 = doubleSummaryStatistics6.getCount();
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(doubleStream3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(doubleStream5);
        org.junit.Assert.assertEquals(doubleSummaryStatistics6.toString(), "DoubleSummaryStatistics{count=0, sum=0.000000, min=Infinity, average=0.000000, max=-Infinity}");
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test3290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3290");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.of(localDateTime4, (java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime10.minusSeconds((long) '#');
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset16);
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset21);
        java.time.ZonedDateTime zonedDateTime23 = java.time.ZonedDateTime.of(localDateTime17, (java.time.ZoneId) zoneOffset21);
        boolean boolean24 = zonedDateTime10.isBefore((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime23);
        java.time.ZoneOffset zoneOffset25 = zonedDateTime10.getOffset();
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset29);
        int int31 = localDateTime30.getYear();
        java.time.Instant instant32 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset36 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime37 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset36);
        java.time.OffsetDateTime offsetDateTime38 = java.time.OffsetDateTime.ofInstant(instant32, (java.time.ZoneId) zoneOffset36);
        java.time.Instant instant39 = localDateTime30.toInstant(zoneOffset36);
        int int40 = zoneOffset25.compareTo(zoneOffset36);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zonedDateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1970 + "'", int31 == 1970);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(zoneOffset36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(offsetDateTime38);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test3291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3291");
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder1 = builder0.clearCcGenericServices();
        boolean boolean2 = builder0.isInitialized();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder4 = builder0.setCcGenericServices(true);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder5 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label6 = builder5.getLabel();
        com.google.protobuf.ByteString byteString7 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder8 = builder5.mergeFrom(byteString7);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite9 = null;
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder10 = builder4.mergeFrom(byteString7, extensionRegistryLite9);
        com.google.protobuf.UnknownFieldSet unknownFieldSet11 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.FileOptions.Builder builder12 = builder10.mergeUnknownFields(unknownFieldSet11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + label6 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label6.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(byteString7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test3292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3292");
        java.io.File file2 = java.io.File.createTempFile("South Korea", "OptionalDouble[-1.0]");
        boolean boolean4 = file2.setWritable(true);
        org.junit.Assert.assertNotNull(file2);
        org.junit.Assert.assertEquals(file2.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file2.toString(), "/tmp/South Korea2096316245980717780OptionalDouble[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test3293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3293");
        com.google.protobuf.ByteString.Output output1 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream3 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output1, (int) 'a');
        byte[] byteArray4 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite5 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions6 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray4, extensionRegistryLite5);
        output1.write(byteArray4);
        com.google.protobuf.CodedInputStream codedInputStream10 = com.google.protobuf.CodedInputStream.newInstance(byteArray4, 21, 4);
        // The following exception was thrown during execution in test generation
        try {
            byte byte11 = codedInputStream10.readRawByte();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 21");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(output1);
        org.junit.Assert.assertNotNull(codedOutputStream3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(methodOptions6);
        org.junit.Assert.assertNotNull(codedInputStream10);
    }

    @Test
    public void test3294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3294");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean4 = node3.isFromExterns();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean9 = node8.isFromExterns();
        java.lang.String str10 = node8.toString();
        com.google.javascript.rhino.Node node11 = node3.copyInformationFrom(node8);
        boolean boolean12 = node8.isScript();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER 52.0 0" + "'", str10, "NUMBER 52.0 0");
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test3295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3295");
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.of((long) (-1));
        java.util.stream.LongStream longStream2 = longStream1.distinct();
        java.util.stream.DoubleStream doubleStream3 = longStream2.asDoubleStream();
        boolean boolean4 = doubleStream3.isParallel();
        java.util.stream.DoubleStream doubleStream5 = doubleStream3.unordered();
        java.util.stream.DoubleStream doubleStream6 = doubleStream5.sequential();
        java.util.stream.DoubleStream doubleStream7 = doubleStream5.sorted();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Stream<java.lang.Double> doubleStream8 = doubleStream5.boxed();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(doubleStream3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(doubleStream5);
        org.junit.Assert.assertNotNull(doubleStream6);
        org.junit.Assert.assertNotNull(doubleStream7);
    }

    @Test
    public void test3296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3296");
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.Builder builder0 = com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.newBuilder();
        java.io.InputStream inputStream1 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite2 = null;
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.Builder builder3 = builder0.mergeFrom(inputStream1, extensionRegistryLite2);
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.Builder builder4 = builder3.clear();
        com.google.common.collect.ImmutableList<com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.Builder> builderList5 = com.google.common.collect.ImmutableList.of(builder3);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builderList5);
    }

    @Test
    public void test3297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3297");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label4 = builder3.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = builder0.addExtension(builder3);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder6 = builder0.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder7 = builder6.getOptionsBuilder();
        java.io.InputStream inputStream8 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions9 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream8);
        boolean boolean10 = enumOptions9.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder11 = builder7.mergeFrom(enumOptions9);
        com.google.protobuf.UnknownFieldSet unknownFieldSet12 = builder7.getUnknownFields();
        byte[] byteArray13 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite14 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions15 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray13, extensionRegistryLite14);
        com.google.protobuf.CodedOutputStream codedOutputStream18 = com.google.protobuf.CodedOutputStream.newInstance(byteArray13, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite19 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto20 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray13, extensionRegistryLite19);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite21 = null;
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto22 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.parseFrom(byteArray13, extensionRegistryLite21);
        com.google.protobuf.UnknownFieldSet unknownFieldSet23 = com.google.protobuf.UnknownFieldSet.parseFrom(byteArray13);
        com.google.protobuf.ByteString byteString24 = unknownFieldSet23.toByteString();
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite25 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder26 = builder7.mergeFrom(byteString24, extensionRegistryLite25);
        com.google.protobuf.DescriptorProtos.FieldOptions fieldOptions27 = com.google.protobuf.DescriptorProtos.FieldOptions.parseFrom(byteString24);
        com.google.protobuf.DescriptorProtos.FieldOptions.Builder builder28 = fieldOptions27.newBuilderForType();
        com.google.protobuf.DescriptorProtos.FieldOptions.Builder builder29 = builder28.clone();
        com.google.protobuf.DescriptorProtos.FieldOptions.Builder builder30 = builder28.clearUninterpretedOption();
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor31 = null;
        java.time.Instant instant32 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset36 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime37 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset36);
        java.time.OffsetDateTime offsetDateTime38 = java.time.OffsetDateTime.ofInstant(instant32, (java.time.ZoneId) zoneOffset36);
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime43 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset42);
        java.time.ZoneOffset zoneOffset47 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime48 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset47);
        java.time.ZonedDateTime zonedDateTime49 = java.time.ZonedDateTime.of(localDateTime43, (java.time.ZoneId) zoneOffset47);
        java.time.Clock clock50 = java.time.Clock.fixed(instant32, (java.time.ZoneId) zoneOffset47);
        java.time.ZoneOffset zoneOffset54 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime55 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset54);
        java.time.ZoneOffset zoneOffset59 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime60 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset59);
        java.time.ZonedDateTime zonedDateTime61 = java.time.ZonedDateTime.of(localDateTime55, (java.time.ZoneId) zoneOffset59);
        java.time.ZonedDateTime zonedDateTime63 = zonedDateTime61.withYear((int) (short) 1);
        java.time.temporal.ChronoField chronoField64 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit65 = chronoField64.getBaseUnit();
        java.time.ZonedDateTime zonedDateTime66 = zonedDateTime61.truncatedTo(temporalUnit65);
        java.time.Duration duration67 = temporalUnit65.getDuration();
        long long68 = duration67.toDays();
        java.time.Duration duration70 = duration67.minusDays(999L);
        java.time.Clock clock71 = java.time.Clock.tick(clock50, duration67);
        boolean boolean72 = duration67.isZero();
        java.time.Duration duration74 = duration67.minusSeconds(0L);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.FieldOptions.Builder builder75 = builder28.addRepeatedField(fieldDescriptor31, (java.lang.Object) 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + label4 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label4.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(enumOptions9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(unknownFieldSet12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(methodOptions15);
        org.junit.Assert.assertNotNull(codedOutputStream18);
        org.junit.Assert.assertNotNull(fileDescriptorProto20);
        org.junit.Assert.assertNotNull(serviceDescriptorProto22);
        org.junit.Assert.assertNotNull(unknownFieldSet23);
        org.junit.Assert.assertNotNull(byteString24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(fieldOptions27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(zoneOffset36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(offsetDateTime38);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(zoneOffset47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(zonedDateTime49);
        org.junit.Assert.assertNotNull(clock50);
        org.junit.Assert.assertNotNull(zoneOffset54);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(zoneOffset59);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(zonedDateTime61);
        org.junit.Assert.assertNotNull(zonedDateTime63);
        org.junit.Assert.assertTrue("'" + chronoField64 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField64.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit65 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit65.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(zonedDateTime66);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(clock71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(duration74);
    }

    @Test
    public void test3298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3298");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.lang.String str1 = localDate0.toString();
        java.time.chrono.IsoChronology isoChronology2 = localDate0.getChronology();
        java.time.format.TextStyle textStyle3 = java.time.format.TextStyle.SHORT;
        boolean boolean4 = textStyle3.isStandalone();
        java.util.Locale locale8 = new java.util.Locale("", "NUMBER 52.0 0", "hi!");
        java.util.Locale locale12 = new java.util.Locale("", "NUMBER 52.0 0", "hi!");
        java.lang.String str13 = locale8.getDisplayLanguage(locale12);
        java.lang.String str14 = locale12.getLanguage();
        java.lang.String str15 = isoChronology2.getDisplayName(textStyle3, locale12);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDate localDate19 = isoChronology2.date((int) (short) 0, (int) (short) 100, 11);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MonthOfYear (valid values 1 - 12): 100");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "2022-02-21" + "'", str1, "2022-02-21");
        org.junit.Assert.assertNotNull(isoChronology2);
        org.junit.Assert.assertTrue("'" + textStyle3 + "' != '" + java.time.format.TextStyle.SHORT + "'", textStyle3.equals(java.time.format.TextStyle.SHORT));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals(locale8.toString(), "_NUMBER 52.0 0_hi!");
        org.junit.Assert.assertEquals(locale12.toString(), "_NUMBER 52.0 0_hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ISO" + "'", str15, "ISO");
    }

    @Test
    public void test3299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3299");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.lang.String str1 = localDate0.toString();
        java.time.chrono.IsoChronology isoChronology2 = localDate0.getChronology();
        java.lang.String str3 = isoChronology2.getCalendarType();
        java.util.List<java.time.chrono.Era> eraList4 = isoChronology2.eras();
        java.lang.String str5 = isoChronology2.toString();
        java.lang.String str6 = isoChronology2.getId();
        java.time.chrono.IsoChronology isoChronology7 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.ZoneOffset zoneOffset11 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset11);
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset16);
        java.time.ZonedDateTime zonedDateTime18 = java.time.ZonedDateTime.of(localDateTime12, (java.time.ZoneId) zoneOffset16);
        java.time.ZonedDateTime zonedDateTime20 = zonedDateTime18.withHour(16);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime21 = zonedDateTime20.toLocalDateTime();
        java.time.chrono.Chronology chronology22 = localDateChronoLocalDateTime21.getChronology();
        int int23 = isoChronology7.compareTo(chronology22);
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.MAX;
        java.time.LocalDate localDate25 = isoChronology7.dateNow((java.time.ZoneId) zoneOffset24);
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset29);
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset34);
        java.time.ZonedDateTime zonedDateTime36 = java.time.ZonedDateTime.of(localDateTime30, (java.time.ZoneId) zoneOffset34);
        java.time.chrono.Chronology chronology37 = java.time.chrono.Chronology.from((java.time.temporal.TemporalAccessor) zoneOffset34);
        java.time.chrono.IsoEra isoEra38 = java.time.chrono.IsoEra.CE;
        int int40 = chronology37.prolepticYear((java.time.chrono.Era) isoEra38, 100);
        int int42 = isoChronology7.prolepticYear((java.time.chrono.Era) isoEra38, 1970);
        int int44 = isoChronology2.prolepticYear((java.time.chrono.Era) isoEra38, (int) '4');
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "2022-02-21" + "'", str1, "2022-02-21");
        org.junit.Assert.assertNotNull(isoChronology2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "iso8601" + "'", str3, "iso8601");
        org.junit.Assert.assertNotNull(eraList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ISO" + "'", str5, "ISO");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ISO" + "'", str6, "ISO");
        org.junit.Assert.assertNotNull(isoChronology7);
        org.junit.Assert.assertNotNull(zoneOffset11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zonedDateTime18);
        org.junit.Assert.assertNotNull(zonedDateTime20);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(zonedDateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertTrue("'" + isoEra38 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra38.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 100 + "'", int40 == 100);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1970 + "'", int42 == 1970);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
    }

    @Test
    public void test3300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3300");
        com.google.protobuf.DescriptorProtos.MessageOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.MessageOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.MessageOptions messageOptions1 = builder0.getDefaultInstanceForType();
        com.google.protobuf.Descriptors.Descriptor descriptor2 = builder0.getDescriptorForType();
        byte[] byteArray3 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite4 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions5 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray3, extensionRegistryLite4);
        com.google.protobuf.CodedInputStream codedInputStream8 = com.google.protobuf.CodedInputStream.newInstance(byteArray3, 16, (int) 'a');
        com.google.protobuf.CodedInputStream codedInputStream11 = com.google.protobuf.CodedInputStream.newInstance(byteArray3, 0, (int) (short) 10);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder12 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label13 = builder12.getLabel();
        com.google.protobuf.ByteString byteString14 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder15 = builder12.mergeFrom(byteString14);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder16 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label17 = builder16.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto18 = builder16.buildPartial();
        int int19 = fieldDescriptorProto18.getSerializedSize();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder20 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto18);
        java.io.InputStream inputStream21 = null;
        java.io.InputStream inputStream22 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite23 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location24 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream22, extensionRegistryLite23);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder25 = builder20.mergeFrom(inputStream21, extensionRegistryLite23);
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location26 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(byteString14, extensionRegistryLite23);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.MessageOptions.Builder builder27 = builder0.mergeFrom(codedInputStream11, extensionRegistryLite23);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(messageOptions1);
        org.junit.Assert.assertNotNull(descriptor2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(methodOptions5);
        org.junit.Assert.assertNotNull(codedInputStream8);
        org.junit.Assert.assertNotNull(codedInputStream11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + label13 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label13.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(byteString14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + label17 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label17.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(extensionRegistryLite23);
        org.junit.Assert.assertNotNull(location24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(location26);
    }

    @Test
    public void test3301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3301");
        com.google.protobuf.UnknownFieldSet.Builder builder0 = com.google.protobuf.UnknownFieldSet.newBuilder();
        com.google.protobuf.UnknownFieldSet.Builder builder1 = builder0.clone();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test3302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3302");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        int int5 = localDateTime4.getYear();
        java.time.LocalDate localDate6 = localDateTime4.toLocalDate();
        java.time.LocalDate localDate8 = localDate6.plusDays((long) '#');
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime13 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset12);
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset17);
        java.time.ZonedDateTime zonedDateTime19 = java.time.ZonedDateTime.of(localDateTime13, (java.time.ZoneId) zoneOffset17);
        java.time.ZonedDateTime zonedDateTime21 = zonedDateTime19.plusDays((long) '4');
        java.time.ZonedDateTime zonedDateTime23 = zonedDateTime19.withMinute((int) '#');
        java.time.format.DateTimeFormatter dateTimeFormatter24 = java.time.format.DateTimeFormatter.BASIC_ISO_DATE;
        java.lang.String str25 = zonedDateTime19.format(dateTimeFormatter24);
        java.lang.String str26 = localDate8.format(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(zonedDateTime19);
        org.junit.Assert.assertNotNull(zonedDateTime21);
        org.junit.Assert.assertNotNull(zonedDateTime23);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "19700101+000052" + "'", str25, "19700101+000052");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "19700205" + "'", str26, "19700205");
    }

    @Test
    public void test3303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3303");
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        boolean boolean6 = strSet4.isEmpty();
        java.nio.ByteBuffer byteBuffer8 = java.nio.ByteBuffer.allocate(100);
        boolean boolean9 = strSet4.equals((java.lang.Object) byteBuffer8);
        java.nio.IntBuffer intBuffer10 = byteBuffer8.asIntBuffer();
        java.nio.IntBuffer intBuffer11 = intBuffer10.duplicate();
        java.nio.IntBuffer intBuffer12 = intBuffer11.duplicate();
        java.nio.IntBuffer intBuffer13 = intBuffer12.duplicate();
        java.nio.IntBuffer intBuffer14 = intBuffer12.duplicate();
        java.nio.IntBuffer intBuffer15 = intBuffer12.slice();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(intBuffer10);
        org.junit.Assert.assertNotNull(intBuffer11);
        org.junit.Assert.assertNotNull(intBuffer12);
        org.junit.Assert.assertNotNull(intBuffer13);
        org.junit.Assert.assertNotNull(intBuffer14);
        org.junit.Assert.assertNotNull(intBuffer15);
    }

    @Test
    public void test3304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3304");
        java.io.File file2 = null;
        java.io.File file3 = java.io.File.createTempFile("hi!", "ISO", file2);
        boolean boolean6 = file3.setWritable(false, false);
        java.net.URI uRI7 = file3.toURI();
        java.io.PrintStream printStream8 = new java.io.PrintStream(file3);
        boolean boolean10 = file3.setReadable(true);
        boolean boolean12 = file3.setWritable(false);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file3.toString(), "/tmp/hi!1878435978934587439ISO");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(uRI7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test3305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3305");
        java.io.File file2 = null;
        java.io.File file3 = java.io.File.createTempFile("hi!", "ISO", file2);
        long long4 = file3.lastModified();
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file3.toString(), "/tmp/hi!1738894947224954251ISO");
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1645437770000L + "'", long4 == 1645437770000L);
    }

    @Test
    public void test3306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3306");
        java.io.InputStream inputStream0 = null;
        byte[] byteArray1 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite2 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions3 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray1, extensionRegistryLite2);
        com.google.protobuf.DescriptorProtos.UninterpretedOption uninterpretedOption4 = com.google.protobuf.DescriptorProtos.UninterpretedOption.parseFrom(byteArray1);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder5 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label6 = builder5.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto7 = builder5.buildPartial();
        int int8 = fieldDescriptorProto7.getSerializedSize();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder9 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto7);
        java.io.InputStream inputStream10 = null;
        java.io.InputStream inputStream11 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite12 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location13 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream11, extensionRegistryLite12);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder14 = builder9.mergeFrom(inputStream10, extensionRegistryLite12);
        com.google.javascript.jscomp.FunctionInformationMap functionInformationMap15 = com.google.javascript.jscomp.FunctionInformationMap.parseFrom(byteArray1, extensionRegistryLite12);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.EnumOptions enumOptions16 = com.google.protobuf.DescriptorProtos.EnumOptions.parseDelimitedFrom(inputStream0, extensionRegistryLite12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertNotNull(methodOptions3);
        org.junit.Assert.assertNotNull(uninterpretedOption4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + label6 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label6.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(extensionRegistryLite12);
        org.junit.Assert.assertNotNull(location13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(functionInformationMap15);
    }

    @Test
    public void test3307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3307");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.CHECK_TYPES;
        com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_VARIABLES = diagnosticGroup0;
        java.lang.String str2 = diagnosticGroup0.toString();
        org.junit.Assert.assertNotNull(diagnosticGroup0);
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "DiagnosticGroup<invalidCasts>" + "'", str2, "DiagnosticGroup<invalidCasts>");
    }

    @Test
    public void test3308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3308");
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions0 = com.google.protobuf.DescriptorProtos.EnumValueOptions.getDefaultInstance();
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder1 = com.google.protobuf.DescriptorProtos.EnumValueOptions.newBuilder(enumValueOptions0);
        com.google.javascript.jscomp.CompilerOptions compilerOptions2 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions2.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat5 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions2.errorFormat = errorFormat5;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy7 = null;
        compilerOptions2.variableRenaming = variableRenamingPolicy7;
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode9 = compilerOptions2.getTracerMode();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder10 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder12 = builder10.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder13 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label14 = builder13.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder15 = builder10.addExtension(builder13);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder16 = builder10.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder17 = builder16.getOptionsBuilder();
        java.io.InputStream inputStream18 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions19 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream18);
        boolean boolean20 = enumOptions19.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder21 = builder17.mergeFrom(enumOptions19);
        byte[] byteArray22 = enumOptions19.toByteArray();
        compilerOptions2.setInputPropertyMapSerialized(byteArray22);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite24 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo sourceCodeInfo25 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.parseFrom(byteArray22, extensionRegistryLite24);
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder26 = builder1.mergeFrom(byteArray22);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder27 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder29 = builder27.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder30 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label31 = builder30.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder32 = builder27.addExtension(builder30);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder33 = builder27.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder34 = builder33.getOptionsBuilder();
        java.io.InputStream inputStream35 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions36 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream35);
        boolean boolean37 = enumOptions36.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder38 = builder34.mergeFrom(enumOptions36);
        com.google.protobuf.UnknownFieldSet unknownFieldSet39 = builder34.getUnknownFields();
        byte[] byteArray40 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite41 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions42 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray40, extensionRegistryLite41);
        com.google.protobuf.CodedOutputStream codedOutputStream45 = com.google.protobuf.CodedOutputStream.newInstance(byteArray40, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite46 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto47 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray40, extensionRegistryLite46);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite48 = null;
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto49 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.parseFrom(byteArray40, extensionRegistryLite48);
        com.google.protobuf.UnknownFieldSet unknownFieldSet50 = com.google.protobuf.UnknownFieldSet.parseFrom(byteArray40);
        com.google.protobuf.ByteString byteString51 = unknownFieldSet50.toByteString();
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite52 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder53 = builder34.mergeFrom(byteString51, extensionRegistryLite52);
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder54 = builder1.mergeFrom(byteString51);
        byte[] byteArray55 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite56 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions57 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray55, extensionRegistryLite56);
        com.google.protobuf.CodedInputStream codedInputStream60 = com.google.protobuf.CodedInputStream.newInstance(byteArray55, 16, (int) 'a');
        codedInputStream60.resetSizeCounter();
        com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder builder62 = com.google.javascript.jscomp.FunctionInformationMap.Entry.newBuilder();
        boolean boolean63 = builder62.hasSourceName();
        com.google.javascript.jscomp.FunctionInformationMap.Entry entry64 = builder62.getDefaultInstanceForType();
        com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder builder66 = builder62.setLineNumber(7);
        java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite> priorityMap67 = new java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite>();
        java.lang.Object obj68 = priorityMap67.clone();
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder69 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.newBuilder();
        boolean boolean70 = priorityMap67.containsValue((java.lang.Object) builder69);
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder72 = builder69.setName("java.nio.ByteBufferAsDoubleBufferB[pos=0 lim=12 cap=12]");
        com.google.protobuf.ByteString byteString73 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder74 = builder69.mergeFrom(byteString73);
        com.google.protobuf.ByteString byteString75 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite76 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions77 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(byteString75, extensionRegistryLite76);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder78 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label79 = builder78.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto80 = builder78.buildPartial();
        int int81 = fieldDescriptorProto80.getSerializedSize();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder82 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto80);
        java.io.InputStream inputStream83 = null;
        java.io.InputStream inputStream84 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite85 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location86 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream84, extensionRegistryLite85);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder87 = builder82.mergeFrom(inputStream83, extensionRegistryLite85);
        com.google.javascript.jscomp.FunctionInformationMap functionInformationMap88 = com.google.javascript.jscomp.FunctionInformationMap.parseFrom(byteString75, extensionRegistryLite85);
        com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder builder89 = builder66.mergeFrom(byteString73, extensionRegistryLite85);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder90 = builder1.mergeFrom(codedInputStream60, extensionRegistryLite85);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 16");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(enumValueOptions0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(errorFormat5);
        org.junit.Assert.assertTrue("'" + tracerMode9 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode9.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + label14 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label14.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(enumOptions19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(sourceCodeInfo25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + label31 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label31.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(enumOptions36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(unknownFieldSet39);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(methodOptions42);
        org.junit.Assert.assertNotNull(codedOutputStream45);
        org.junit.Assert.assertNotNull(fileDescriptorProto47);
        org.junit.Assert.assertNotNull(serviceDescriptorProto49);
        org.junit.Assert.assertNotNull(unknownFieldSet50);
        org.junit.Assert.assertNotNull(byteString51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertNotNull(methodOptions57);
        org.junit.Assert.assertNotNull(codedInputStream60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(entry64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertEquals(obj68.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "{}");
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(byteString73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(byteString75);
        org.junit.Assert.assertNotNull(enumOptions77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertTrue("'" + label79 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label79.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(extensionRegistryLite85);
        org.junit.Assert.assertNotNull(location86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(functionInformationMap88);
        org.junit.Assert.assertNotNull(builder89);
    }

    @Test
    public void test3309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3309");
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output2 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream4 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output2, (int) 'a');
        byte[] byteArray5 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite6 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions7 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray5, extensionRegistryLite6);
        output2.write(byteArray5);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder9 = builder0.mergeFrom(byteArray5);
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions10 = builder0.buildPartial();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder11 = builder0.addUninterpretedOptionBuilder();
        boolean boolean12 = builder11.hasNegativeIntValue();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder14 = builder11.setNegativeIntValue((long) 55);
        java.util.Map<com.google.protobuf.Descriptors.FieldDescriptor, java.lang.Object> fieldDescriptorMap15 = builder14.getAllFields();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(output2);
        org.junit.Assert.assertNotNull(codedOutputStream4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(methodOptions7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(methodOptions10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(fieldDescriptorMap15);
    }

    @Test
    public void test3310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3310");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder3 = builder2.clearSourceCodeInfo();
        boolean boolean4 = builder2.hasOptions();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder5 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder6 = builder5.clearCcGenericServices();
        boolean boolean7 = builder5.isInitialized();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder9 = builder5.setJavaOuterClassname("hi!");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder10 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder12 = builder10.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder13 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label14 = builder13.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder15 = builder10.addExtension(builder13);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder16 = builder10.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder17 = builder16.getOptionsBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder18 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder20 = builder18.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder21 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label22 = builder21.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder23 = builder18.addExtension(builder21);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder24 = builder18.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder25 = builder24.getOptionsBuilder();
        java.io.InputStream inputStream26 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions27 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream26);
        boolean boolean28 = enumOptions27.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder29 = builder25.mergeFrom(enumOptions27);
        com.google.protobuf.UnknownFieldSet unknownFieldSet30 = builder25.getUnknownFields();
        com.google.protobuf.CodedOutputStream codedOutputStream31 = null;
        unknownFieldSet30.writeTo(codedOutputStream31);
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder33 = builder17.setUnknownFields(unknownFieldSet30);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto34 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.getDefaultInstance();
        boolean boolean35 = methodDescriptorProto34.hasOutputType();
        byte[] byteArray36 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite37 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions38 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray36, extensionRegistryLite37);
        com.google.protobuf.CodedOutputStream codedOutputStream41 = com.google.protobuf.CodedOutputStream.newInstance(byteArray36, (int) (short) 0, 1);
        methodDescriptorProto34.writeTo(codedOutputStream41);
        unknownFieldSet30.writeTo(codedOutputStream41);
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder44 = builder5.mergeUnknownFields(unknownFieldSet30);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder45 = builder2.setOptions(builder44);
        com.google.protobuf.DescriptorProtos.SourceCodeInfo sourceCodeInfo46 = builder45.getSourceCodeInfo();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + label14 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label14.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + label22 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label22.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(enumOptions27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(unknownFieldSet30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(methodDescriptorProto34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[]");
        org.junit.Assert.assertNotNull(methodOptions38);
        org.junit.Assert.assertNotNull(codedOutputStream41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(sourceCodeInfo46);
    }

    @Test
    public void test3311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3311");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasThisType();
        java.lang.String str2 = jSDocInfo0.toString();
        java.util.Set<java.lang.String> strSet3 = jSDocInfo0.getSuppressions();
        java.lang.String str4 = jSDocInfo0.getBlockDescription();
        boolean boolean5 = jSDocInfo0.hasTypedefType();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "JSDocInfo" + "'", str2, "JSDocInfo");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test3312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3312");
        java.net.Proxy.Type type0 = java.net.Proxy.Type.HTTP;
        java.net.SocketAddress socketAddress1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Proxy proxy2 = new java.net.Proxy(type0, socketAddress1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: type HTTP is not compatible with address null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + type0 + "' != '" + java.net.Proxy.Type.HTTP + "'", type0.equals(java.net.Proxy.Type.HTTP));
    }

    @Test
    public void test3313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3313");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset10);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.of(localDateTime11, (java.time.ZoneId) zoneOffset15);
        java.time.Clock clock18 = java.time.Clock.fixed(instant0, (java.time.ZoneId) zoneOffset15);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.now(clock18);
        java.time.LocalDate localDate20 = java.time.LocalDate.now(clock18);
        com.google.protobuf.Descriptors.Descriptor descriptor21 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto22 = descriptor21.toProto();
        boolean boolean23 = descriptorProto22.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList24 = descriptorProto22.getNestedTypeList();
        int int25 = descriptorProto22.getExtensionRangeCount();
        boolean boolean26 = localDate20.equals((java.lang.Object) descriptorProto22);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder27 = descriptorProto22.newBuilderForType();
        java.util.List<com.google.protobuf.DescriptorProtos.FieldDescriptorProto> fieldDescriptorProtoList28 = builder27.getExtensionList();
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder29 = builder27.addNestedTypeBuilder();
        byte[] byteArray31 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite32 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions33 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray31, extensionRegistryLite32);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite34 = null;
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto enumDescriptorProto35 = com.google.protobuf.DescriptorProtos.EnumDescriptorProto.parseFrom(byteArray31, extensionRegistryLite34);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder36 = enumDescriptorProto35.newBuilderForType();
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto enumDescriptorProto37 = builder36.build();
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder38 = builder36.clearName();
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder39 = builder29.addEnumType(37, builder36);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 37, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(clock18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(descriptor21);
        org.junit.Assert.assertNotNull(descriptorProto22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(fieldDescriptorProtoList28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(methodOptions33);
        org.junit.Assert.assertNotNull(enumDescriptorProto35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(enumDescriptorProto37);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test3314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3314");
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto0 = com.google.protobuf.DescriptorProtos.DescriptorProto.getDefaultInstance();
        boolean boolean1 = descriptorProto0.hasOptions();
        org.junit.Assert.assertNotNull(descriptorProto0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test3315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3315");
        java.io.File file2 = null;
        java.io.File file3 = java.io.File.createTempFile("hi!", "ISO", file2);
        boolean boolean6 = file3.setWritable(false, false);
        java.net.URI uRI7 = file3.toURI();
        java.lang.String str8 = uRI7.getRawSchemeSpecificPart();
        java.io.File file11 = null;
        java.io.File file12 = java.io.File.createTempFile("hi!", "ISO", file11);
        boolean boolean15 = file12.setWritable(false, false);
        java.net.URI uRI16 = file12.toURI();
        java.lang.String str17 = uRI16.getSchemeSpecificPart();
        java.lang.String str18 = uRI16.getScheme();
        java.lang.String str19 = uRI16.getScheme();
        java.lang.String str20 = uRI16.getRawPath();
        java.net.URI uRI21 = uRI16.parseServerAuthority();
        java.io.File file24 = null;
        java.io.File file25 = java.io.File.createTempFile("hi!", "ISO", file24);
        boolean boolean28 = file25.setWritable(false, false);
        java.net.URI uRI29 = file25.toURI();
        java.lang.String str30 = uRI29.getSchemeSpecificPart();
        java.lang.String str31 = uRI29.getScheme();
        java.lang.String str32 = uRI29.getScheme();
        java.lang.String str33 = uRI29.getRawPath();
        java.net.URI uRI34 = uRI29.parseServerAuthority();
        java.net.URI uRI35 = uRI16.resolve(uRI29);
        java.net.URI uRI36 = uRI7.relativize(uRI16);
        java.net.URI uRI37 = uRI7.normalize();
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file3.toString(), "/tmp/hi!137498651913463726ISO");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(uRI7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "/tmp/hi!137498651913463726ISO" + "'", str8, "/tmp/hi!137498651913463726ISO");
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/tmp/hi!2368504324742638057ISO");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(uRI16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "/tmp/hi!2368504324742638057ISO" + "'", str17, "/tmp/hi!2368504324742638057ISO");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "file" + "'", str18, "file");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "file" + "'", str19, "file");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "/tmp/hi!2368504324742638057ISO" + "'", str20, "/tmp/hi!2368504324742638057ISO");
        org.junit.Assert.assertNotNull(uRI21);
        org.junit.Assert.assertNotNull(file25);
        org.junit.Assert.assertEquals(file25.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file25.toString(), "/tmp/hi!1892762719597809622ISO");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(uRI29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "/tmp/hi!1892762719597809622ISO" + "'", str30, "/tmp/hi!1892762719597809622ISO");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "file" + "'", str31, "file");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "file" + "'", str32, "file");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "/tmp/hi!1892762719597809622ISO" + "'", str33, "/tmp/hi!1892762719597809622ISO");
        org.junit.Assert.assertNotNull(uRI34);
        org.junit.Assert.assertNotNull(uRI35);
        org.junit.Assert.assertNotNull(uRI36);
        org.junit.Assert.assertNotNull(uRI37);
    }

    @Test
    public void test3316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3316");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        int int5 = localDateTime4.getYear();
        java.time.LocalDate localDate6 = localDateTime4.toLocalDate();
        java.time.chrono.Chronology chronology7 = java.time.chrono.Chronology.from((java.time.temporal.TemporalAccessor) localDate6);
        boolean boolean8 = localDate6.isLeapYear();
        java.time.LocalDate localDate10 = localDate6.plusDays((long) 12);
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset14);
        int int16 = localDateTime15.getYear();
        java.time.LocalDate localDate17 = localDateTime15.toLocalDate();
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset21);
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset26);
        java.time.ZonedDateTime zonedDateTime28 = java.time.ZonedDateTime.of(localDateTime22, (java.time.ZoneId) zoneOffset26);
        java.time.temporal.ChronoField chronoField30 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit31 = chronoField30.getBaseUnit();
        java.time.LocalDateTime localDateTime32 = localDateTime22.plus((long) 1970, temporalUnit31);
        java.time.LocalTime localTime33 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localDateTime32);
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset37);
        java.time.OffsetDateTime offsetDateTime39 = java.time.OffsetDateTime.of(localDate17, localTime33, zoneOffset37);
        java.time.chrono.ChronoPeriod chronoPeriod40 = java.time.chrono.ChronoPeriod.between((java.time.chrono.ChronoLocalDate) localDate6, (java.time.chrono.ChronoLocalDate) localDate17);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(zonedDateTime28);
        org.junit.Assert.assertTrue("'" + chronoField30 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField30.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit31 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit31.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(offsetDateTime39);
        org.junit.Assert.assertNotNull(chronoPeriod40);
    }

    @Test
    public void test3317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3317");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean5 = node4.isStringKey();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(0, node4);
        com.google.javascript.rhino.Node.AncestorIterable ancestorIterable7 = node4.getAncestors();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable8 = node4.children();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(ancestorIterable7);
        org.junit.Assert.assertNotNull(nodeIterable8);
    }

    @Test
    public void test3318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3318");
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap0 = java.nio.charset.Charset.availableCharsets();
        java.net.URISyntaxException uRISyntaxException3 = new java.net.URISyntaxException("hi!", "");
        boolean boolean4 = strMap0.containsKey((java.lang.Object) "");
        int int5 = strMap0.size();
        java.time.Instant instant6 = java.time.Instant.EPOCH;
        java.nio.file.attribute.FileTime fileTime7 = java.nio.file.attribute.FileTime.from(instant6);
        java.time.Instant instant9 = instant6.plusNanos((long) 32);
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset14);
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset19);
        java.time.ZonedDateTime zonedDateTime21 = java.time.ZonedDateTime.of(localDateTime15, (java.time.ZoneId) zoneOffset19);
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset26);
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime32 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset31);
        java.time.ZonedDateTime zonedDateTime33 = java.time.ZonedDateTime.of(localDateTime27, (java.time.ZoneId) zoneOffset31);
        java.time.ZonedDateTime zonedDateTime35 = zonedDateTime33.withYear((int) (short) 1);
        java.time.temporal.ChronoField chronoField36 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit37 = chronoField36.getBaseUnit();
        java.time.ZonedDateTime zonedDateTime38 = zonedDateTime33.truncatedTo(temporalUnit37);
        java.time.LocalDateTime localDateTime39 = localDateTime15.plus(999L, temporalUnit37);
        boolean boolean40 = temporalUnit37.isTimeBased();
        java.time.Instant instant41 = instant9.minus((long) 256, temporalUnit37);
        boolean boolean42 = strMap0.containsValue((java.lang.Object) instant9);
        java.util.Set<java.util.Map.Entry<java.lang.String, java.nio.charset.Charset>> strEntrySet43 = strMap0.entrySet();
        org.junit.Assert.assertNotNull(strMap0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 171 + "'", int5 == 171);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(fileTime7);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(zonedDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(zonedDateTime33);
        org.junit.Assert.assertNotNull(zonedDateTime35);
        org.junit.Assert.assertTrue("'" + chronoField36 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField36.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit37 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit37.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(zonedDateTime38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strEntrySet43);
    }

    @Test
    public void test3319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3319");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.DescriptorProtos.FieldOptions fieldOptions1 = com.google.protobuf.DescriptorProtos.FieldOptions.parseFrom(inputStream0);
        boolean boolean2 = fieldOptions1.hasExperimentalMapKey();
        com.google.protobuf.DescriptorProtos.FieldOptions fieldOptions3 = fieldOptions1.getDefaultInstanceForType();
        boolean boolean4 = fieldOptions3.getDeprecated();
        org.junit.Assert.assertNotNull(fieldOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(fieldOptions3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test3320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3320");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer3 = charBuffer1.put('a');
        char[] charArray5 = new char[] { '4' };
        java.nio.CharBuffer charBuffer6 = charBuffer3.get(charArray5);
        java.nio.CharBuffer charBuffer8 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer10 = charBuffer8.put('a');
        char[] charArray12 = new char[] { '4' };
        java.nio.CharBuffer charBuffer13 = charBuffer10.get(charArray12);
        java.nio.CharBuffer charBuffer14 = charBuffer3.put(charArray12);
        java.nio.CharBuffer charBuffer15 = charBuffer3.slice();
        java.nio.CharBuffer charBuffer17 = charBuffer3.append('#');
        java.nio.CharBuffer charBuffer19 = java.nio.CharBuffer.allocate((int) ' ');
        boolean boolean20 = charBuffer19.isDirect();
        java.nio.CharBuffer charBuffer22 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer24 = charBuffer22.put('a');
        char[] charArray26 = new char[] { '4' };
        java.nio.CharBuffer charBuffer27 = charBuffer24.get(charArray26);
        java.nio.CharBuffer charBuffer28 = charBuffer24.compact();
        java.nio.CharBuffer charBuffer30 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer32 = charBuffer30.put('a');
        java.nio.CharBuffer charBuffer34 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer36 = charBuffer34.put('a');
        char[] charArray38 = new char[] { '4' };
        java.nio.CharBuffer charBuffer39 = charBuffer36.get(charArray38);
        java.nio.CharBuffer charBuffer40 = charBuffer36.compact();
        com.google.common.collect.ImmutableSet<java.lang.Appendable> appendableSet41 = com.google.common.collect.ImmutableSet.of((java.lang.Appendable) charBuffer19, (java.lang.Appendable) charBuffer24, (java.lang.Appendable) charBuffer30, (java.lang.Appendable) charBuffer40);
        boolean boolean42 = charBuffer40.isDirect();
        char[] charArray43 = charBuffer40.array();
        java.nio.CharBuffer charBuffer45 = java.nio.CharBuffer.allocate((int) ' ');
        boolean boolean46 = charBuffer45.isDirect();
        java.nio.CharBuffer charBuffer48 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer50 = charBuffer48.put('a');
        char[] charArray52 = new char[] { '4' };
        java.nio.CharBuffer charBuffer53 = charBuffer50.get(charArray52);
        java.nio.CharBuffer charBuffer54 = charBuffer50.compact();
        java.nio.CharBuffer charBuffer56 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer58 = charBuffer56.put('a');
        java.nio.CharBuffer charBuffer60 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer62 = charBuffer60.put('a');
        char[] charArray64 = new char[] { '4' };
        java.nio.CharBuffer charBuffer65 = charBuffer62.get(charArray64);
        java.nio.CharBuffer charBuffer66 = charBuffer62.compact();
        com.google.common.collect.ImmutableSet<java.lang.Appendable> appendableSet67 = com.google.common.collect.ImmutableSet.of((java.lang.Appendable) charBuffer45, (java.lang.Appendable) charBuffer50, (java.lang.Appendable) charBuffer56, (java.lang.Appendable) charBuffer66);
        boolean boolean68 = charBuffer66.isDirect();
        int int69 = charBuffer40.read(charBuffer66);
        char[] charArray70 = new char[] {};
        java.nio.CharBuffer charBuffer71 = charBuffer40.get(charArray70);
        java.nio.CharBuffer charBuffer72 = charBuffer3.get(charArray70);
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(charBuffer3);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(charBuffer8);
        org.junit.Assert.assertNotNull(charBuffer10);
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer13);
        org.junit.Assert.assertNotNull(charBuffer14);
        org.junit.Assert.assertNotNull(charBuffer15);
        org.junit.Assert.assertNotNull(charBuffer17);
        org.junit.Assert.assertNotNull(charBuffer19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(charBuffer22);
        org.junit.Assert.assertNotNull(charBuffer24);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer27);
        org.junit.Assert.assertNotNull(charBuffer28);
        org.junit.Assert.assertNotNull(charBuffer30);
        org.junit.Assert.assertNotNull(charBuffer32);
        org.junit.Assert.assertNotNull(charBuffer34);
        org.junit.Assert.assertNotNull(charBuffer36);
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer39);
        org.junit.Assert.assertNotNull(charBuffer40);
        org.junit.Assert.assertNotNull(appendableSet41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[\000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(charBuffer45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(charBuffer48);
        org.junit.Assert.assertNotNull(charBuffer50);
        org.junit.Assert.assertNotNull(charArray52);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray52), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray52), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray52), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer53);
        org.junit.Assert.assertNotNull(charBuffer54);
        org.junit.Assert.assertNotNull(charBuffer56);
        org.junit.Assert.assertNotNull(charBuffer58);
        org.junit.Assert.assertNotNull(charBuffer60);
        org.junit.Assert.assertNotNull(charBuffer62);
        org.junit.Assert.assertNotNull(charArray64);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray64), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray64), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray64), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer65);
        org.junit.Assert.assertNotNull(charBuffer66);
        org.junit.Assert.assertNotNull(appendableSet67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertNotNull(charArray70);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray70), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray70), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray70), "[]");
        org.junit.Assert.assertNotNull(charBuffer71);
        org.junit.Assert.assertNotNull(charBuffer72);
    }

    @Test
    public void test3321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3321");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label4 = builder3.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = builder0.addExtension(builder3);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder6 = builder0.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder7 = builder6.getOptionsBuilder();
        java.io.InputStream inputStream8 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions9 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream8);
        boolean boolean10 = enumOptions9.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder11 = builder7.mergeFrom(enumOptions9);
        com.google.protobuf.UnknownFieldSet unknownFieldSet12 = builder7.getUnknownFields();
        byte[] byteArray13 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite14 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions15 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray13, extensionRegistryLite14);
        com.google.protobuf.CodedOutputStream codedOutputStream18 = com.google.protobuf.CodedOutputStream.newInstance(byteArray13, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite19 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto20 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray13, extensionRegistryLite19);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite21 = null;
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto22 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.parseFrom(byteArray13, extensionRegistryLite21);
        com.google.protobuf.UnknownFieldSet unknownFieldSet23 = com.google.protobuf.UnknownFieldSet.parseFrom(byteArray13);
        com.google.protobuf.ByteString byteString24 = unknownFieldSet23.toByteString();
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite25 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder26 = builder7.mergeFrom(byteString24, extensionRegistryLite25);
        com.google.protobuf.DescriptorProtos.FieldOptions fieldOptions27 = com.google.protobuf.DescriptorProtos.FieldOptions.parseFrom(byteString24);
        com.google.protobuf.DescriptorProtos.FieldOptions.Builder builder28 = fieldOptions27.newBuilderForType();
        java.util.Map<com.google.protobuf.Descriptors.FieldDescriptor, java.lang.Object> fieldDescriptorMap29 = builder28.getAllFields();
        int int30 = builder28.getUninterpretedOptionCount();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + label4 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label4.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(enumOptions9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(unknownFieldSet12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(methodOptions15);
        org.junit.Assert.assertNotNull(codedOutputStream18);
        org.junit.Assert.assertNotNull(fileDescriptorProto20);
        org.junit.Assert.assertNotNull(serviceDescriptorProto22);
        org.junit.Assert.assertNotNull(unknownFieldSet23);
        org.junit.Assert.assertNotNull(byteString24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(fieldOptions27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(fieldDescriptorMap29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test3322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3322");
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions0 = com.google.protobuf.DescriptorProtos.EnumValueOptions.getDefaultInstance();
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder1 = com.google.protobuf.DescriptorProtos.EnumValueOptions.newBuilder(enumValueOptions0);
        java.io.InputStream inputStream2 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder3 = builder1.mergeFrom(inputStream2);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder4 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output6 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream8 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output6, (int) 'a');
        byte[] byteArray9 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite10 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions11 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray9, extensionRegistryLite10);
        output6.write(byteArray9);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder13 = builder4.mergeFrom(byteArray9);
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions14 = builder4.buildPartial();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder15 = builder4.addUninterpretedOptionBuilder();
        com.google.protobuf.DescriptorProtos.UninterpretedOption uninterpretedOption16 = builder15.buildPartial();
        java.lang.String str17 = uninterpretedOption16.getIdentifierValue();
        int int18 = uninterpretedOption16.getNameCount();
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder19 = builder1.addUninterpretedOption(uninterpretedOption16);
        double double20 = uninterpretedOption16.getDoubleValue();
        org.junit.Assert.assertNotNull(enumValueOptions0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(output6);
        org.junit.Assert.assertNotNull(codedOutputStream8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(methodOptions11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(methodOptions14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(uninterpretedOption16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
    }

    @Test
    public void test3323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3323");
        byte[] byteArray0 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions2 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray0, extensionRegistryLite1);
        com.google.protobuf.CodedOutputStream codedOutputStream5 = com.google.protobuf.CodedOutputStream.newInstance(byteArray0, (int) (short) 0, 1);
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions7 = com.google.protobuf.DescriptorProtos.EnumValueOptions.getDefaultInstance();
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder8 = com.google.protobuf.DescriptorProtos.EnumValueOptions.newBuilder(enumValueOptions7);
        com.google.javascript.jscomp.CompilerOptions compilerOptions9 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions9.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat12 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions9.errorFormat = errorFormat12;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy14 = null;
        compilerOptions9.variableRenaming = variableRenamingPolicy14;
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode16 = compilerOptions9.getTracerMode();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder17 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder19 = builder17.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder20 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label21 = builder20.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder22 = builder17.addExtension(builder20);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder23 = builder17.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder24 = builder23.getOptionsBuilder();
        java.io.InputStream inputStream25 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions26 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream25);
        boolean boolean27 = enumOptions26.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder28 = builder24.mergeFrom(enumOptions26);
        byte[] byteArray29 = enumOptions26.toByteArray();
        compilerOptions9.setInputPropertyMapSerialized(byteArray29);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite31 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo sourceCodeInfo32 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.parseFrom(byteArray29, extensionRegistryLite31);
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder33 = builder8.mergeFrom(byteArray29);
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder34 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder35 = builder34.clearCcGenericServices();
        boolean boolean36 = builder34.isInitialized();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder38 = builder34.setCcGenericServices(true);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder39 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label40 = builder39.getLabel();
        com.google.protobuf.ByteString byteString41 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder42 = builder39.mergeFrom(byteString41);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite43 = null;
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder44 = builder38.mergeFrom(byteString41, extensionRegistryLite43);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite45 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions46 = com.google.protobuf.DescriptorProtos.EnumValueOptions.parseFrom(byteString41, extensionRegistryLite45);
        java.util.List<com.google.protobuf.DescriptorProtos.UninterpretedOption> uninterpretedOptionList47 = enumValueOptions46.getUninterpretedOptionList();
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder48 = builder33.mergeFrom(enumValueOptions46);
        com.google.protobuf.ByteString byteString49 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite50 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto51 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteString49, extensionRegistryLite50);
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange extensionRange52 = com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.parseFrom(byteString49);
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder53 = builder33.mergeFrom(byteString49);
        // The following exception was thrown during execution in test generation
        try {
            codedOutputStream5.writeBytes(16, byteString49);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(methodOptions2);
        org.junit.Assert.assertNotNull(codedOutputStream5);
        org.junit.Assert.assertNotNull(enumValueOptions7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(errorFormat12);
        org.junit.Assert.assertTrue("'" + tracerMode16 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode16.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + label21 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label21.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(enumOptions26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(sourceCodeInfo32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + label40 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label40.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(byteString41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(enumValueOptions46);
        org.junit.Assert.assertNotNull(uninterpretedOptionList47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(byteString49);
        org.junit.Assert.assertNotNull(fileDescriptorProto51);
        org.junit.Assert.assertNotNull(extensionRange52);
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test3324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3324");
        com.google.protobuf.DescriptorProtos.FieldOptions fieldOptions0 = com.google.protobuf.DescriptorProtos.FieldOptions.getDefaultInstance();
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor1 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int2 = fieldOptions0.getRepeatedFieldCount(fieldDescriptor1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fieldOptions0);
    }

    @Test
    public void test3325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3325");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.of(localDateTime4, (java.time.ZoneId) zoneOffset8);
        java.time.chrono.Chronology chronology11 = java.time.chrono.Chronology.from((java.time.temporal.TemporalAccessor) zoneOffset8);
        java.time.chrono.IsoEra isoEra12 = java.time.chrono.IsoEra.CE;
        int int14 = chronology11.prolepticYear((java.time.chrono.Era) isoEra12, 100);
        int int15 = isoEra12.getValue();
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertTrue("'" + isoEra12 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra12.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test3326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3326");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType4 = jSTypeRegistry2.createObjectType(objectType3);
        jSTypeRegistry2.identifyNonNullableName("/");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean12 = node11.isFromExterns();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean17 = node16.isFromExterns();
        java.lang.String str18 = node16.toString();
        com.google.javascript.rhino.Node node19 = node11.copyInformationFrom(node16);
        int int20 = node11.getLineno();
        int int21 = node11.getType();
        boolean boolean22 = node11.isQuotedString();
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        com.google.javascript.rhino.ErrorReporter errorReporter26 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter26, false);
        com.google.javascript.rhino.jstype.ObjectType objectType29 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType30 = jSTypeRegistry28.createObjectType(objectType29);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        com.google.javascript.rhino.jstype.ObjectType objectType34 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType35 = jSTypeRegistry33.createObjectType(objectType34);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair36 = objectType30.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType35);
        java.lang.String str37 = objectType35.getDisplayName();
        java.util.Collection<com.google.javascript.rhino.jstype.FunctionType> functionTypeCollection38 = jSTypeRegistry25.getDirectImplementors(objectType35);
        com.google.javascript.rhino.jstype.ObjectType objectType39 = jSTypeRegistry2.createObjectType("US-ASCII", node11, objectType35);
        com.google.javascript.rhino.JSDocInfo jSDocInfo41 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean42 = jSDocInfo41.hasThisType();
        java.lang.String str43 = jSDocInfo41.toString();
        boolean boolean44 = jSDocInfo41.isInterface();
        boolean boolean45 = jSDocInfo41.hasBaseType();
        com.google.javascript.rhino.Node node46 = jSDocInfo41.getAssociatedNode();
        java.util.Set<java.lang.String> strSet47 = jSDocInfo41.getSuppressions();
        objectType39.setPropertyJSDocInfo(":", jSDocInfo41);
        boolean boolean49 = jSDocInfo41.isOverride();
        org.junit.Assert.assertNotNull(objectType4);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "NUMBER 52.0 0" + "'", str18, "NUMBER 52.0 0");
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 39 + "'", int21 == 39);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objectType30);
        org.junit.Assert.assertNotNull(objectType35);
        org.junit.Assert.assertNotNull(typePair36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(functionTypeCollection38);
        org.junit.Assert.assertNotNull(objectType39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "JSDocInfo" + "'", str43, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(node46);
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test3327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3327");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean5 = node4.isStringKey();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(0, node4);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node4.getStaticSourceFile();
        node4.setCharno((int) (byte) 100);
        boolean boolean10 = node4.isName();
        node4.setWasEmptyNode(true);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test3328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3328");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.of(localDateTime4, (java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime10.withYear((int) (short) 1);
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset16);
        int int18 = localDateTime17.getYear();
        java.time.LocalDate localDate19 = localDateTime17.toLocalDate();
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset23);
        java.time.ZoneOffset zoneOffset28 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset28);
        java.time.ZonedDateTime zonedDateTime30 = java.time.ZonedDateTime.of(localDateTime24, (java.time.ZoneId) zoneOffset28);
        java.time.temporal.ChronoField chronoField32 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit33 = chronoField32.getBaseUnit();
        java.time.LocalDateTime localDateTime34 = localDateTime24.plus((long) 1970, temporalUnit33);
        java.time.LocalTime localTime35 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localDateTime34);
        java.time.ZoneOffset zoneOffset39 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime40 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset39);
        java.time.OffsetDateTime offsetDateTime41 = java.time.OffsetDateTime.of(localDate19, localTime35, zoneOffset39);
        java.time.ZonedDateTime zonedDateTime42 = zonedDateTime10.withZoneSameInstant((java.time.ZoneId) zoneOffset39);
        java.lang.String str43 = zonedDateTime42.toString();
        java.time.ZonedDateTime zonedDateTime45 = zonedDateTime42.minusMinutes((long) 4095);
        java.time.temporal.ChronoField chronoField46 = java.time.temporal.ChronoField.EPOCH_DAY;
        java.time.Instant instant47 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset51 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime52 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset51);
        java.time.OffsetDateTime offsetDateTime53 = java.time.OffsetDateTime.ofInstant(instant47, (java.time.ZoneId) zoneOffset51);
        java.time.temporal.ValueRange valueRange54 = chronoField46.rangeRefinedBy((java.time.temporal.TemporalAccessor) offsetDateTime53);
        long long55 = zonedDateTime42.getLong((java.time.temporal.TemporalField) chronoField46);
        java.time.chrono.Chronology chronology56 = zonedDateTime42.getChronology();
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zonedDateTime30);
        org.junit.Assert.assertTrue("'" + chronoField32 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField32.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit33 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit33.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(zoneOffset39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(offsetDateTime41);
        org.junit.Assert.assertNotNull(zonedDateTime42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1970-01-01T00:02:32+00:00:52" + "'", str43, "1970-01-01T00:02:32+00:00:52");
        org.junit.Assert.assertNotNull(zonedDateTime45);
        org.junit.Assert.assertTrue("'" + chronoField46 + "' != '" + java.time.temporal.ChronoField.EPOCH_DAY + "'", chronoField46.equals(java.time.temporal.ChronoField.EPOCH_DAY));
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertNotNull(zoneOffset51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(offsetDateTime53);
        org.junit.Assert.assertNotNull(valueRange54);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(chronology56);
    }

    @Test
    public void test3329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3329");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        com.google.javascript.rhino.jstype.ObjectType objectType6 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType7 = jSTypeRegistry5.createObjectType(objectType6);
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.jstype.ObjectType objectType11 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType12 = jSTypeRegistry10.createObjectType(objectType11);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair13 = objectType7.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType12);
        java.lang.String str14 = objectType12.getDisplayName();
        java.util.Collection<com.google.javascript.rhino.jstype.FunctionType> functionTypeCollection15 = jSTypeRegistry2.getDirectImplementors(objectType12);
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable17 = jSTypeRegistry2.getEachReferenceTypeWithProperty("+00:00:52");
        com.google.javascript.rhino.ErrorReporter errorReporter18 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter18, false);
        com.google.javascript.rhino.jstype.ObjectType objectType21 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType22 = jSTypeRegistry20.createObjectType(objectType21);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        com.google.javascript.rhino.jstype.ObjectType objectType26 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType27 = jSTypeRegistry25.createObjectType(objectType26);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair28 = objectType22.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType27);
        com.google.javascript.rhino.Node node29 = objectType22.getRootNode();
        com.google.javascript.rhino.ErrorReporter errorReporter30 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry32 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter30, false);
        com.google.javascript.rhino.jstype.ObjectType objectType33 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType34 = jSTypeRegistry32.createObjectType(objectType33);
        com.google.javascript.rhino.ErrorReporter errorReporter35 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter35, false);
        com.google.javascript.rhino.jstype.ObjectType objectType38 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType39 = jSTypeRegistry37.createObjectType(objectType38);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair40 = objectType34.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType39);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue41 = objectType22.testForEquality((com.google.javascript.rhino.jstype.JSType) objectType34);
        com.google.javascript.rhino.jstype.JSType jSType46 = jSTypeRegistry2.getType((com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>) objectType34, "1970-01-01T00:00:52+00:00:52", "goog.abstractMethod", (int) ':', (int) (byte) -1);
        boolean boolean47 = objectType34.isNumber();
        com.google.javascript.rhino.ErrorReporter errorReporter48 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry50 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter48, false);
        com.google.javascript.rhino.jstype.ObjectType objectType51 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType52 = jSTypeRegistry50.createObjectType(objectType51);
        com.google.javascript.rhino.ErrorReporter errorReporter53 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry55 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter53, false);
        com.google.javascript.rhino.jstype.ObjectType objectType56 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType57 = jSTypeRegistry55.createObjectType(objectType56);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair58 = objectType52.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType57);
        boolean boolean59 = objectType57.isTemplateType();
        boolean boolean60 = objectType57.isNativeObjectType();
        boolean boolean61 = objectType34.canTestForShallowEqualityWith((com.google.javascript.rhino.jstype.JSType) objectType57);
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope62 = objectType34.getParentScope();
        org.junit.Assert.assertNotNull(objectType7);
        org.junit.Assert.assertNotNull(objectType12);
        org.junit.Assert.assertNotNull(typePair13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(functionTypeCollection15);
        org.junit.Assert.assertNotNull(objectTypeIterable17);
        org.junit.Assert.assertNotNull(objectType22);
        org.junit.Assert.assertNotNull(objectType27);
        org.junit.Assert.assertNotNull(typePair28);
        org.junit.Assert.assertNull(node29);
        org.junit.Assert.assertNotNull(objectType34);
        org.junit.Assert.assertNotNull(objectType39);
        org.junit.Assert.assertNotNull(typePair40);
        org.junit.Assert.assertNotNull(ternaryValue41);
        org.junit.Assert.assertNotNull(jSType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(objectType52);
        org.junit.Assert.assertNotNull(objectType57);
        org.junit.Assert.assertNotNull(typePair58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(jSTypeStaticScope62);
    }

    @Test
    public void test3330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3330");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.of(localDateTime4, (java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime10.withHour(16);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime13 = zonedDateTime12.toLocalDateTime();
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset17);
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset22);
        java.time.ZonedDateTime zonedDateTime24 = java.time.ZonedDateTime.of(localDateTime18, (java.time.ZoneId) zoneOffset22);
        java.time.ZonedDateTime zonedDateTime26 = zonedDateTime24.withYear((int) (short) 1);
        java.time.temporal.ChronoField chronoField27 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit28 = chronoField27.getBaseUnit();
        java.time.ZonedDateTime zonedDateTime29 = zonedDateTime24.truncatedTo(temporalUnit28);
        java.time.Duration duration30 = temporalUnit28.getDuration();
        long long31 = duration30.toDays();
        java.time.Duration duration32 = duration30.abs();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime33 = localDateChronoLocalDateTime13.minus((java.time.temporal.TemporalAmount) duration32);
        java.time.Duration duration35 = duration32.plusDays(16L);
        java.time.ZoneOffset zoneOffset39 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime40 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset39);
        java.time.ZoneOffset zoneOffset44 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime45 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset44);
        java.time.ZonedDateTime zonedDateTime46 = java.time.ZonedDateTime.of(localDateTime40, (java.time.ZoneId) zoneOffset44);
        java.time.ZonedDateTime zonedDateTime48 = zonedDateTime46.withYear((int) (short) 1);
        java.time.temporal.ChronoField chronoField49 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit50 = chronoField49.getBaseUnit();
        java.time.ZonedDateTime zonedDateTime51 = zonedDateTime46.truncatedTo(temporalUnit50);
        java.time.Duration duration52 = temporalUnit50.getDuration();
        long long53 = duration52.toDays();
        java.time.Duration duration55 = duration52.minusDays(999L);
        boolean boolean56 = duration52.isZero();
        long long57 = duration52.toMillis();
        java.time.Duration duration59 = duration52.minusNanos((long) 7);
        java.time.Duration duration60 = duration32.plus(duration59);
        java.time.Duration duration62 = duration59.dividedBy(1645437337000L);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime13);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zonedDateTime24);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertTrue("'" + chronoField27 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField27.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit28 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit28.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(zonedDateTime29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(zoneOffset39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(zoneOffset44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(zonedDateTime46);
        org.junit.Assert.assertNotNull(zonedDateTime48);
        org.junit.Assert.assertTrue("'" + chronoField49 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField49.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit50 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit50.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(zonedDateTime51);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 3600000L + "'", long57 == 3600000L);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
    }

    @Test
    public void test3331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3331");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags0 = new com.google.javascript.rhino.Node.SideEffectFlags();
        boolean boolean1 = sideEffectFlags0.areAllFlagsSet();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test3332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3332");
        java.security.cert.CertPath certPath0 = null;
        java.security.Timestamp timestamp1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.security.CodeSigner codeSigner2 = new java.security.CodeSigner(certPath0, timestamp1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3333");
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto0 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.getDefaultInstance();
        boolean boolean1 = serviceDescriptorProto0.hasOptions();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder2 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.newBuilder(serviceDescriptorProto0);
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto3 = builder2.buildPartial();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto4 = builder2.build();
        com.google.protobuf.Descriptors.Descriptor descriptor5 = serviceDescriptorProto4.getDescriptorForType();
        org.junit.Assert.assertNotNull(serviceDescriptorProto0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(serviceDescriptorProto3);
        org.junit.Assert.assertNotNull(serviceDescriptorProto4);
        org.junit.Assert.assertNotNull(descriptor5);
    }

    @Test
    public void test3334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3334");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
    }

    @Test
    public void test3335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3335");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) ' ');
        boolean boolean2 = charBuffer1.isDirect();
        java.nio.CharBuffer charBuffer4 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer6 = charBuffer4.put('a');
        char[] charArray8 = new char[] { '4' };
        java.nio.CharBuffer charBuffer9 = charBuffer6.get(charArray8);
        java.nio.CharBuffer charBuffer10 = charBuffer6.compact();
        java.nio.CharBuffer charBuffer12 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer14 = charBuffer12.put('a');
        java.nio.CharBuffer charBuffer16 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer18 = charBuffer16.put('a');
        char[] charArray20 = new char[] { '4' };
        java.nio.CharBuffer charBuffer21 = charBuffer18.get(charArray20);
        java.nio.CharBuffer charBuffer22 = charBuffer18.compact();
        com.google.common.collect.ImmutableSet<java.lang.Appendable> appendableSet23 = com.google.common.collect.ImmutableSet.of((java.lang.Appendable) charBuffer1, (java.lang.Appendable) charBuffer6, (java.lang.Appendable) charBuffer12, (java.lang.Appendable) charBuffer22);
        java.time.ZoneOffset zoneOffset27 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset27);
        int int29 = localDateTime28.getYear();
        java.time.Instant instant30 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset34);
        java.time.OffsetDateTime offsetDateTime36 = java.time.OffsetDateTime.ofInstant(instant30, (java.time.ZoneId) zoneOffset34);
        java.time.Instant instant37 = localDateTime28.toInstant(zoneOffset34);
        boolean boolean38 = appendableSet23.equals((java.lang.Object) zoneOffset34);
        java.lang.Object[] objArray39 = appendableSet23.toArray();
        java.util.concurrent.TimeUnit timeUnit40 = java.util.concurrent.TimeUnit.HOURS;
        boolean boolean41 = appendableSet23.contains((java.lang.Object) timeUnit40);
        com.google.common.collect.ImmutableList<java.lang.Appendable> appendableList42 = appendableSet23.asList();
        java.time.ZoneOffset zoneOffset46 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime47 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset46);
        int int48 = localDateTime47.getYear();
        java.time.Instant instant49 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset53 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime54 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset53);
        java.time.OffsetDateTime offsetDateTime55 = java.time.OffsetDateTime.ofInstant(instant49, (java.time.ZoneId) zoneOffset53);
        java.time.Instant instant56 = localDateTime47.toInstant(zoneOffset53);
        int int57 = appendableList42.lastIndexOf((java.lang.Object) instant56);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean62 = node61.isVar();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean67 = node66.isStringKey();
        boolean boolean68 = node66.isThrow();
        boolean boolean69 = node66.isVarArgs();
        boolean boolean70 = node66.isHook();
        com.google.javascript.rhino.Node node71 = node66.cloneNode();
        com.google.javascript.rhino.Node node72 = node61.useSourceInfoIfMissingFromForTree(node71);
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean77 = node76.isFromExterns();
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean82 = node81.isFromExterns();
        java.lang.String str83 = node81.toString();
        com.google.javascript.rhino.Node node84 = node76.copyInformationFrom(node81);
        int int85 = node76.getLineno();
        boolean boolean86 = node76.isLabel();
        java.lang.String str87 = node76.getSourceFileName();
        boolean boolean88 = node76.isDec();
        com.google.javascript.rhino.Node node89 = node71.useSourceInfoFrom(node76);
        boolean boolean90 = appendableList42.equals((java.lang.Object) node89);
        com.google.protobuf.Descriptors.Descriptor descriptor91 = com.google.protobuf.DescriptorProtos.FieldOptions.getDescriptor();
        com.google.protobuf.Descriptors.FileDescriptor fileDescriptor92 = descriptor91.getFile();
        java.util.List<com.google.protobuf.Descriptors.FileDescriptor> fileDescriptorList93 = fileDescriptor92.getDependencies();
        java.util.List<com.google.protobuf.Descriptors.Descriptor> descriptorList94 = fileDescriptor92.getMessageTypes();
        boolean boolean95 = appendableList42.equals((java.lang.Object) descriptorList94);
        com.google.common.collect.UnmodifiableListIterator<java.lang.Appendable> appendableItor96 = appendableList42.listIterator();
        int int97 = appendableItor96.previousIndex();
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charBuffer4);
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer9);
        org.junit.Assert.assertNotNull(charBuffer10);
        org.junit.Assert.assertNotNull(charBuffer12);
        org.junit.Assert.assertNotNull(charBuffer14);
        org.junit.Assert.assertNotNull(charBuffer16);
        org.junit.Assert.assertNotNull(charBuffer18);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer21);
        org.junit.Assert.assertNotNull(charBuffer22);
        org.junit.Assert.assertNotNull(appendableSet23);
        org.junit.Assert.assertNotNull(zoneOffset27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1970 + "'", int29 == 1970);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(offsetDateTime36);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000, \000\000, \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000, \000\000, \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000]");
        org.junit.Assert.assertNotNull(timeUnit40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(appendableList42);
        org.junit.Assert.assertNotNull(zoneOffset46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1970 + "'", int48 == 1970);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertNotNull(zoneOffset53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(offsetDateTime55);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "NUMBER 52.0 0" + "'", str83, "NUMBER 52.0 0");
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(descriptor91);
        org.junit.Assert.assertNotNull(fileDescriptor92);
        org.junit.Assert.assertNotNull(fileDescriptorList93);
        org.junit.Assert.assertNotNull(descriptorList94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(appendableItor96);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + (-1) + "'", int97 == (-1));
    }

    @Test
    public void test3336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3336");
        java.util.stream.IntStream.Builder builder0 = java.util.stream.IntStream.builder();
        java.util.stream.IntStream.Builder builder2 = builder0.add(39);
        java.util.stream.IntStream.Builder builder4 = builder2.add(97);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test3337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3337");
        java.util.function.UnaryOperator<com.google.javascript.jscomp.DiagnosticGroup> diagnosticGroupUnaryOperator0 = java.util.function.UnaryOperator.identity();
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup1 = com.google.javascript.jscomp.DiagnosticGroups.TYPE_INVALIDATION;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup2 = diagnosticGroupUnaryOperator0.apply(diagnosticGroup1);
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_REGEXP = diagnosticGroup2;
        org.junit.Assert.assertNotNull(diagnosticGroupUnaryOperator0);
        org.junit.Assert.assertNotNull(diagnosticGroup1);
        org.junit.Assert.assertNotNull(diagnosticGroup2);
    }

    @Test
    public void test3338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3338");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect(9);
        org.junit.Assert.assertNotNull(byteBuffer1);
    }

    @Test
    public void test3339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3339");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str2 = jSDocInfo0.getDescriptionForParameter("iso8601");
        java.lang.String str3 = jSDocInfo0.getLicense();
        java.lang.String str4 = jSDocInfo0.toString();
        java.lang.String str5 = jSDocInfo0.getReturnDescription();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JSDocInfo" + "'", str4, "JSDocInfo");
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test3340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3340");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) ' ');
        boolean boolean2 = charBuffer1.isDirect();
        java.nio.CharBuffer charBuffer4 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer6 = charBuffer4.put('a');
        char[] charArray8 = new char[] { '4' };
        java.nio.CharBuffer charBuffer9 = charBuffer6.get(charArray8);
        java.nio.CharBuffer charBuffer10 = charBuffer6.compact();
        java.nio.CharBuffer charBuffer12 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer14 = charBuffer12.put('a');
        java.nio.CharBuffer charBuffer16 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer18 = charBuffer16.put('a');
        char[] charArray20 = new char[] { '4' };
        java.nio.CharBuffer charBuffer21 = charBuffer18.get(charArray20);
        java.nio.CharBuffer charBuffer22 = charBuffer18.compact();
        com.google.common.collect.ImmutableSet<java.lang.Appendable> appendableSet23 = com.google.common.collect.ImmutableSet.of((java.lang.Appendable) charBuffer1, (java.lang.Appendable) charBuffer6, (java.lang.Appendable) charBuffer12, (java.lang.Appendable) charBuffer22);
        java.time.ZoneOffset zoneOffset27 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset27);
        int int29 = localDateTime28.getYear();
        java.time.Instant instant30 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset34);
        java.time.OffsetDateTime offsetDateTime36 = java.time.OffsetDateTime.ofInstant(instant30, (java.time.ZoneId) zoneOffset34);
        java.time.Instant instant37 = localDateTime28.toInstant(zoneOffset34);
        boolean boolean38 = appendableSet23.equals((java.lang.Object) zoneOffset34);
        java.lang.Object[] objArray39 = appendableSet23.toArray();
        java.util.concurrent.TimeUnit timeUnit40 = java.util.concurrent.TimeUnit.HOURS;
        boolean boolean41 = appendableSet23.contains((java.lang.Object) timeUnit40);
        com.google.common.collect.ImmutableList<java.lang.Appendable> appendableList42 = appendableSet23.asList();
        java.time.ZoneOffset zoneOffset46 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime47 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset46);
        int int48 = localDateTime47.getYear();
        java.time.Instant instant49 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset53 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime54 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset53);
        java.time.OffsetDateTime offsetDateTime55 = java.time.OffsetDateTime.ofInstant(instant49, (java.time.ZoneId) zoneOffset53);
        java.time.Instant instant56 = localDateTime47.toInstant(zoneOffset53);
        int int57 = appendableList42.lastIndexOf((java.lang.Object) instant56);
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions58 = com.google.protobuf.DescriptorProtos.EnumValueOptions.getDefaultInstance();
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder59 = com.google.protobuf.DescriptorProtos.EnumValueOptions.newBuilder(enumValueOptions58);
        java.io.InputStream inputStream60 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder61 = builder59.mergeFrom(inputStream60);
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions62 = builder59.build();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean63 = appendableList42.remove((java.lang.Object) enumValueOptions62);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charBuffer4);
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer9);
        org.junit.Assert.assertNotNull(charBuffer10);
        org.junit.Assert.assertNotNull(charBuffer12);
        org.junit.Assert.assertNotNull(charBuffer14);
        org.junit.Assert.assertNotNull(charBuffer16);
        org.junit.Assert.assertNotNull(charBuffer18);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer21);
        org.junit.Assert.assertNotNull(charBuffer22);
        org.junit.Assert.assertNotNull(appendableSet23);
        org.junit.Assert.assertNotNull(zoneOffset27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1970 + "'", int29 == 1970);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(offsetDateTime36);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000, \000\000, \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000, \000\000, \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000]");
        org.junit.Assert.assertNotNull(timeUnit40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(appendableList42);
        org.junit.Assert.assertNotNull(zoneOffset46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1970 + "'", int48 == 1970);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertNotNull(zoneOffset53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(offsetDateTime55);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(enumValueOptions58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(enumValueOptions62);
    }

    @Test
    public void test3341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3341");
        short[] shortArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ShortBuffer shortBuffer1 = java.nio.ShortBuffer.wrap(shortArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3342");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
    }

    @Test
    public void test3343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3343");
        java.time.OffsetTime offsetTime0 = java.time.OffsetTime.MAX;
        java.time.Instant instant1 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset5);
        java.time.OffsetDateTime offsetDateTime7 = java.time.OffsetDateTime.ofInstant(instant1, (java.time.ZoneId) zoneOffset5);
        java.time.OffsetDateTime offsetDateTime9 = offsetDateTime7.minusDays((long) (short) 100);
        java.lang.String str10 = offsetDateTime7.toString();
        java.time.LocalTime localTime11 = offsetDateTime7.toLocalTime();
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset16);
        int int18 = localDateTime17.getYear();
        java.time.Instant instant19 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset23);
        java.time.OffsetDateTime offsetDateTime25 = java.time.OffsetDateTime.ofInstant(instant19, (java.time.ZoneId) zoneOffset23);
        java.time.Instant instant26 = localDateTime17.toInstant(zoneOffset23);
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime32 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset31);
        java.time.ZoneOffset zoneOffset36 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime37 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset36);
        java.time.ZonedDateTime zonedDateTime38 = java.time.ZonedDateTime.of(localDateTime32, (java.time.ZoneId) zoneOffset36);
        java.time.temporal.ChronoField chronoField40 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit41 = chronoField40.getBaseUnit();
        java.time.LocalDateTime localDateTime42 = localDateTime32.plus((long) 1970, temporalUnit41);
        java.time.ZoneOffset zoneOffset47 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime48 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset47);
        java.time.ZoneOffset zoneOffset52 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime53 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset52);
        java.time.ZonedDateTime zonedDateTime54 = java.time.ZonedDateTime.of(localDateTime48, (java.time.ZoneId) zoneOffset52);
        java.time.temporal.ChronoField chronoField56 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit57 = chronoField56.getBaseUnit();
        java.time.LocalDateTime localDateTime58 = localDateTime48.plus((long) 1970, temporalUnit57);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime59 = localDateTime42.minus((long) 43, temporalUnit57);
        java.time.Instant instant60 = instant26.plus((long) 16384, temporalUnit57);
        java.time.LocalTime localTime61 = localTime11.plus((long) 64, temporalUnit57);
        java.time.ZoneOffset zoneOffset66 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime67 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset66);
        java.time.ZoneOffset zoneOffset71 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime72 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset71);
        java.time.ZonedDateTime zonedDateTime73 = java.time.ZonedDateTime.of(localDateTime67, (java.time.ZoneId) zoneOffset71);
        java.time.temporal.ChronoField chronoField75 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit76 = chronoField75.getBaseUnit();
        java.time.LocalDateTime localDateTime77 = localDateTime67.plus((long) 1970, temporalUnit76);
        java.time.LocalTime localTime78 = localTime11.plus(4L, temporalUnit76);
        java.time.OffsetTime offsetTime79 = offsetTime0.truncatedTo(temporalUnit76);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDate localDate80 = java.time.LocalDate.from((java.time.temporal.TemporalAccessor) offsetTime79);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unable to obtain LocalDate from TemporalAccessor: 23:00-18:00 of type java.time.OffsetTime");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(offsetTime0);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-01T00:00:52+00:00:52" + "'", str10, "1970-01-01T00:00:52+00:00:52");
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(zoneOffset36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(zonedDateTime38);
        org.junit.Assert.assertTrue("'" + chronoField40 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField40.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit41 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit41.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(zoneOffset47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(zoneOffset52);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(zonedDateTime54);
        org.junit.Assert.assertTrue("'" + chronoField56 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField56.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit57 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit57.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime59);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertNotNull(zoneOffset66);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(zoneOffset71);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(zonedDateTime73);
        org.junit.Assert.assertTrue("'" + chronoField75 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField75.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit76 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit76.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(localTime78);
        org.junit.Assert.assertNotNull(offsetTime79);
    }

    @Test
    public void test3344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3344");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy5 = null;
        compilerOptions0.variableRenaming = variableRenamingPolicy5;
        compilerOptions0.setSummaryDetailLevel(999);
        compilerOptions0.setRemoveClosureAsserts(false);
        compilerOptions0.disambiguateProperties = false;
        boolean boolean13 = compilerOptions0.aliasExternals;
        org.junit.Assert.assertNotNull(errorFormat3);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test3345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3345");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label4 = builder3.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = builder0.addExtension(builder3);
        boolean boolean6 = builder3.hasDefaultValue();
        java.io.InputStream inputStream7 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite8 = null;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder9 = builder3.mergeFrom(inputStream7, extensionRegistryLite8);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder10 = builder3.clone();
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor11 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int12 = builder10.getRepeatedFieldCount(fieldDescriptor11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + label4 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label4.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test3346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3346");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label4 = builder3.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = builder0.addExtension(builder3);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder6 = builder0.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder7 = builder6.getOptionsBuilder();
        java.io.InputStream inputStream8 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions9 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream8);
        boolean boolean10 = enumOptions9.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder11 = builder7.mergeFrom(enumOptions9);
        com.google.protobuf.UnknownFieldSet unknownFieldSet12 = builder7.getUnknownFields();
        byte[] byteArray13 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite14 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions15 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray13, extensionRegistryLite14);
        com.google.protobuf.CodedOutputStream codedOutputStream18 = com.google.protobuf.CodedOutputStream.newInstance(byteArray13, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite19 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto20 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray13, extensionRegistryLite19);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite21 = null;
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto22 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.parseFrom(byteArray13, extensionRegistryLite21);
        com.google.protobuf.UnknownFieldSet unknownFieldSet23 = com.google.protobuf.UnknownFieldSet.parseFrom(byteArray13);
        com.google.protobuf.ByteString byteString24 = unknownFieldSet23.toByteString();
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite25 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder26 = builder7.mergeFrom(byteString24, extensionRegistryLite25);
        com.google.protobuf.DescriptorProtos.FieldOptions fieldOptions27 = com.google.protobuf.DescriptorProtos.FieldOptions.parseFrom(byteString24);
        com.google.protobuf.DescriptorProtos.FieldOptions.Builder builder28 = fieldOptions27.newBuilderForType();
        com.google.protobuf.DescriptorProtos.FieldOptions.CType cType29 = com.google.protobuf.DescriptorProtos.FieldOptions.CType.STRING_PIECE;
        com.google.protobuf.DescriptorProtos.FieldOptions.Builder builder30 = builder28.setCtype(cType29);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + label4 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label4.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(enumOptions9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(unknownFieldSet12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(methodOptions15);
        org.junit.Assert.assertNotNull(codedOutputStream18);
        org.junit.Assert.assertNotNull(fileDescriptorProto20);
        org.junit.Assert.assertNotNull(serviceDescriptorProto22);
        org.junit.Assert.assertNotNull(unknownFieldSet23);
        org.junit.Assert.assertNotNull(byteString24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(fieldOptions27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + cType29 + "' != '" + com.google.protobuf.DescriptorProtos.FieldOptions.CType.STRING_PIECE + "'", cType29.equals(com.google.protobuf.DescriptorProtos.FieldOptions.CType.STRING_PIECE));
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test3347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3347");
        com.google.protobuf.UnknownFieldSet.Field field0 = com.google.protobuf.UnknownFieldSet.Field.getDefaultInstance();
        java.util.List<java.lang.Long> longList1 = field0.getVarintList();
        int int3 = field0.getSerializedSizeAsMessageSetExtension((int) (byte) -1);
        org.junit.Assert.assertNotNull(field0);
        org.junit.Assert.assertNotNull(longList1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test3348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3348");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility1 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        jSDocInfo0.setVisibility(visibility1);
        boolean boolean3 = jSDocInfo0.hasTypedefType();
        boolean boolean4 = jSDocInfo0.hasBaseType();
        org.junit.Assert.assertTrue("'" + visibility1 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility1.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test3349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3349");
        java.io.InputStream inputStream0 = null;
        java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite> priorityMap1 = new java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite>();
        java.lang.Object obj2 = priorityMap1.clone();
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.newBuilder();
        boolean boolean4 = priorityMap1.containsValue((java.lang.Object) builder3);
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder6 = builder3.setName("java.nio.ByteBufferAsDoubleBufferB[pos=0 lim=12 cap=12]");
        com.google.protobuf.ByteString byteString7 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder8 = builder3.mergeFrom(byteString7);
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions9 = com.google.protobuf.DescriptorProtos.EnumValueOptions.getDefaultInstance();
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder10 = com.google.protobuf.DescriptorProtos.EnumValueOptions.newBuilder(enumValueOptions9);
        java.io.InputStream inputStream11 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder12 = builder10.mergeFrom(inputStream11);
        com.google.protobuf.ByteString byteString13 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto14 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.parseFrom(byteString13);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite15 = null;
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto enumValueDescriptorProto16 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.parseFrom(byteString13, extensionRegistryLite15);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite17 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions18 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteString13, extensionRegistryLite17);
        java.io.InputStream inputStream19 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite20 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location21 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream19, extensionRegistryLite20);
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder22 = builder12.mergeFrom(byteString13, extensionRegistryLite20);
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto23 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.parseFrom(byteString7, extensionRegistryLite20);
        com.google.javascript.jscomp.FunctionInformationMap functionInformationMap24 = com.google.javascript.jscomp.FunctionInformationMap.parseFrom(inputStream0, extensionRegistryLite20);
        int int25 = functionInformationMap24.getModuleCount();
        com.google.javascript.jscomp.FunctionInformationMap.Builder builder26 = functionInformationMap24.toBuilder();
        com.google.protobuf.UnknownFieldSet unknownFieldSet27 = builder26.getUnknownFields();
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "{}");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(byteString7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(enumValueOptions9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(byteString13);
        org.junit.Assert.assertNotNull(methodDescriptorProto14);
        org.junit.Assert.assertNotNull(enumValueDescriptorProto16);
        org.junit.Assert.assertNotNull(methodOptions18);
        org.junit.Assert.assertNotNull(extensionRegistryLite20);
        org.junit.Assert.assertNotNull(location21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(serviceDescriptorProto23);
        org.junit.Assert.assertNotNull(functionInformationMap24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(unknownFieldSet27);
    }

    @Test
    public void test3350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3350");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label4 = builder3.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = builder0.addExtension(builder3);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder6 = builder0.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder7 = builder6.getOptionsBuilder();
        java.io.InputStream inputStream8 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions9 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream8);
        boolean boolean10 = enumOptions9.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder11 = builder7.mergeFrom(enumOptions9);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto12 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.getDefaultInstance();
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions13 = methodDescriptorProto12.getOptions();
        com.google.protobuf.UnknownFieldSet unknownFieldSet14 = methodDescriptorProto12.getUnknownFields();
        com.google.protobuf.ByteString byteString15 = unknownFieldSet14.toByteString();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder16 = builder7.mergeFrom(byteString15);
        com.google.protobuf.Descriptors.Descriptor descriptor17 = builder16.getDescriptorForType();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + label4 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label4.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(enumOptions9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(methodDescriptorProto12);
        org.junit.Assert.assertNotNull(methodOptions13);
        org.junit.Assert.assertNotNull(unknownFieldSet14);
        org.junit.Assert.assertNotNull(byteString15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(descriptor17);
    }

    @Test
    public void test3351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3351");
        java.io.File file2 = null;
        java.io.File file3 = java.io.File.createTempFile("hi!", "ISO", file2);
        boolean boolean6 = file3.setWritable(false, false);
        java.net.URI uRI7 = file3.toURI();
        java.io.PrintStream printStream8 = new java.io.PrintStream(file3);
        printStream8.print((int) (byte) 0);
        com.google.javascript.jscomp.CompilerOptions compilerOptions11 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions11.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat14 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions11.errorFormat = errorFormat14;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy16 = null;
        compilerOptions11.variableRenaming = variableRenamingPolicy16;
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode18 = compilerOptions11.getTracerMode();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder19 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder21 = builder19.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder22 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label23 = builder22.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder24 = builder19.addExtension(builder22);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder25 = builder19.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder26 = builder25.getOptionsBuilder();
        java.io.InputStream inputStream27 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions28 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream27);
        boolean boolean29 = enumOptions28.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder30 = builder26.mergeFrom(enumOptions28);
        byte[] byteArray31 = enumOptions28.toByteArray();
        compilerOptions11.setInputPropertyMapSerialized(byteArray31);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite33 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location34 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(byteArray31, extensionRegistryLite33);
        // The following exception was thrown during execution in test generation
        try {
            printStream8.write(byteArray31, (int) 'u', 15);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file3.toString(), "/tmp/hi!1372474791781069315ISO");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(uRI7);
        org.junit.Assert.assertNotNull(errorFormat14);
        org.junit.Assert.assertTrue("'" + tracerMode18 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode18.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + label23 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label23.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(enumOptions28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(location34);
    }

    @Test
    public void test3352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3352");
        java.io.File file2 = null;
        java.io.File file3 = java.io.File.createTempFile("hi!", "ISO", file2);
        boolean boolean6 = file3.setWritable(false, false);
        java.io.PrintStream printStream7 = new java.io.PrintStream(file3);
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter(file3);
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter10 = new java.io.PrintWriter(file3, "");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file3.toString(), "/tmp/hi!618249067524946939ISO");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test3353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3353");
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder1 = builder0.clearCcGenericServices();
        boolean boolean2 = builder0.isInitialized();
        boolean boolean3 = builder0.getJavaGenericServices();
        int int4 = builder0.getUninterpretedOptionCount();
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.UninterpretedOption uninterpretedOption6 = builder0.getUninterpretedOption(152);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 152");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test3354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3354");
        java.time.Clock clock0 = java.time.Clock.systemDefaultZone();
        java.time.ZonedDateTime zonedDateTime1 = java.time.ZonedDateTime.now(clock0);
        long long2 = clock0.millis();
        java.time.OffsetTime offsetTime3 = java.time.OffsetTime.now(clock0);
        org.junit.Assert.assertNotNull(clock0);
        org.junit.Assert.assertNotNull(zonedDateTime1);
// flaky:         org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1645437772111L + "'", long2 == 1645437772111L);
        org.junit.Assert.assertNotNull(offsetTime3);
    }

    @Test
    public void test3355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3355");
        com.google.javascript.jscomp.SourceAst sourceAst0 = null;
        com.google.javascript.rhino.InputId inputId1 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput3 = new com.google.javascript.jscomp.CompilerInput(sourceAst0, inputId1, true);
        com.google.javascript.jscomp.SourceAst sourceAst4 = null;
        com.google.javascript.rhino.InputId inputId5 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput7 = new com.google.javascript.jscomp.CompilerInput(sourceAst4, inputId5, true);
        com.google.javascript.jscomp.SourceAst sourceAst8 = null;
        com.google.javascript.rhino.InputId inputId9 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput11 = new com.google.javascript.jscomp.CompilerInput(sourceAst8, inputId9, true);
        com.google.javascript.rhino.InputId inputId12 = compilerInput11.getInputId();
        com.google.javascript.jscomp.SourceAst sourceAst13 = null;
        com.google.javascript.rhino.InputId inputId14 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput16 = new com.google.javascript.jscomp.CompilerInput(sourceAst13, inputId14, true);
        com.google.javascript.rhino.InputId inputId17 = compilerInput16.getInputId();
        com.google.javascript.jscomp.SourceAst sourceAst18 = null;
        com.google.javascript.rhino.InputId inputId19 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput21 = new com.google.javascript.jscomp.CompilerInput(sourceAst18, inputId19, true);
        java.io.PrintStream printStream22 = null;
        com.google.javascript.jscomp.Compiler compiler23 = new com.google.javascript.jscomp.Compiler(printStream22);
        com.google.javascript.jscomp.ErrorManager errorManager24 = compiler23.getErrorManager();
        compilerInput21.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler23);
        com.google.javascript.jscomp.SourceAst sourceAst26 = null;
        com.google.javascript.rhino.InputId inputId27 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput29 = new com.google.javascript.jscomp.CompilerInput(sourceAst26, inputId27, true);
        com.google.javascript.rhino.InputId inputId30 = compilerInput29.getInputId();
        com.google.javascript.jscomp.SourceAst sourceAst31 = null;
        com.google.javascript.rhino.InputId inputId32 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput34 = new com.google.javascript.jscomp.CompilerInput(sourceAst31, inputId32, true);
        com.google.javascript.jscomp.SourceAst sourceAst35 = null;
        com.google.javascript.rhino.InputId inputId36 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput38 = new com.google.javascript.jscomp.CompilerInput(sourceAst35, inputId36, true);
        java.io.PrintStream printStream39 = null;
        com.google.javascript.jscomp.Compiler compiler40 = new com.google.javascript.jscomp.Compiler(printStream39);
        com.google.javascript.jscomp.ErrorManager errorManager41 = compiler40.getErrorManager();
        compilerInput38.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler40);
        com.google.javascript.jscomp.SourceAst sourceAst43 = null;
        com.google.javascript.rhino.InputId inputId44 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput46 = new com.google.javascript.jscomp.CompilerInput(sourceAst43, inputId44, true);
        com.google.javascript.jscomp.CompilerInput[] compilerInputArray47 = new com.google.javascript.jscomp.CompilerInput[] { compilerInput34, compilerInput38, compilerInput46 };
        com.google.common.collect.ImmutableSet<com.google.javascript.jscomp.CompilerInput> compilerInputSet48 = com.google.common.collect.ImmutableSet.of(compilerInput3, compilerInput7, compilerInput11, compilerInput16, compilerInput21, compilerInput29, compilerInputArray47);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.SourceFile sourceFile49 = compilerInput7.getSourceFile();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(inputId12);
        org.junit.Assert.assertNull(inputId17);
        org.junit.Assert.assertNotNull(errorManager24);
        org.junit.Assert.assertNull(inputId30);
        org.junit.Assert.assertNotNull(errorManager41);
        org.junit.Assert.assertNotNull(compilerInputArray47);
        org.junit.Assert.assertNotNull(compilerInputSet48);
    }

    @Test
    public void test3356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3356");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.of(localDateTime4, (java.time.ZoneId) zoneOffset8);
        java.time.temporal.ChronoField chronoField11 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        boolean boolean12 = localDateTime4.isSupported((java.time.temporal.TemporalField) chronoField11);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime14 = localDateTime4.withDayOfYear(0);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for DayOfYear (valid values 1 - 365/366): 0");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertTrue("'" + chronoField11 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField11.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test3357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3357");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label4 = builder3.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = builder0.addExtension(builder3);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder6 = builder0.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder7 = builder6.getOptionsBuilder();
        java.io.InputStream inputStream8 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions9 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream8);
        boolean boolean10 = enumOptions9.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder11 = builder7.mergeFrom(enumOptions9);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto12 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.getDefaultInstance();
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions13 = methodDescriptorProto12.getOptions();
        com.google.protobuf.UnknownFieldSet unknownFieldSet14 = methodDescriptorProto12.getUnknownFields();
        com.google.protobuf.ByteString byteString15 = unknownFieldSet14.toByteString();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder16 = builder7.mergeFrom(byteString15);
        java.time.Instant instant17 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset21);
        java.time.OffsetDateTime offsetDateTime23 = java.time.OffsetDateTime.ofInstant(instant17, (java.time.ZoneId) zoneOffset21);
        java.time.ZoneOffset zoneOffset27 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset27);
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime33 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset32);
        java.time.ZonedDateTime zonedDateTime34 = java.time.ZonedDateTime.of(localDateTime28, (java.time.ZoneId) zoneOffset32);
        java.time.Clock clock35 = java.time.Clock.fixed(instant17, (java.time.ZoneId) zoneOffset32);
        java.time.LocalDateTime localDateTime36 = java.time.LocalDateTime.now(clock35);
        java.time.LocalDate localDate37 = java.time.LocalDate.now(clock35);
        com.google.protobuf.Descriptors.Descriptor descriptor38 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto39 = descriptor38.toProto();
        boolean boolean40 = descriptorProto39.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList41 = descriptorProto39.getNestedTypeList();
        int int42 = descriptorProto39.getExtensionRangeCount();
        boolean boolean43 = localDate37.equals((java.lang.Object) descriptorProto39);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder44 = descriptorProto39.newBuilderForType();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList45 = builder44.getNestedTypeList();
        com.google.protobuf.UnknownFieldSet unknownFieldSet46 = builder44.getUnknownFields();
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder47 = builder44.addEnumTypeBuilder();
        com.google.protobuf.ByteString byteString48 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite49 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto50 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteString48, extensionRegistryLite49);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder51 = builder47.mergeFrom(byteString48);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder52 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder54 = builder52.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder55 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label56 = builder55.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder57 = builder52.addExtension(builder55);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder58 = builder52.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder59 = builder58.getOptionsBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions60 = builder59.getDefaultInstanceForType();
        com.google.protobuf.Descriptors.Descriptor descriptor61 = builder59.getDescriptorForType();
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder62 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output64 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream66 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output64, (int) 'a');
        byte[] byteArray67 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite68 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions69 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray67, extensionRegistryLite68);
        output64.write(byteArray67);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder71 = builder62.mergeFrom(byteArray67);
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions72 = builder62.buildPartial();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder73 = builder62.addUninterpretedOptionBuilder();
        com.google.protobuf.DescriptorProtos.UninterpretedOption uninterpretedOption74 = builder73.buildPartial();
        java.lang.String str75 = uninterpretedOption74.getIdentifierValue();
        int int76 = uninterpretedOption74.getNameCount();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder77 = builder59.addUninterpretedOption(uninterpretedOption74);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder78 = builder47.setOptions(builder59);
        java.io.InputStream inputStream79 = null;
        com.google.protobuf.ByteString byteString80 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite81 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions82 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(byteString80, extensionRegistryLite81);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder83 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label84 = builder83.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto85 = builder83.buildPartial();
        int int86 = fieldDescriptorProto85.getSerializedSize();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder87 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto85);
        java.io.InputStream inputStream88 = null;
        java.io.InputStream inputStream89 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite90 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location91 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream89, extensionRegistryLite90);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder92 = builder87.mergeFrom(inputStream88, extensionRegistryLite90);
        com.google.javascript.jscomp.FunctionInformationMap functionInformationMap93 = com.google.javascript.jscomp.FunctionInformationMap.parseFrom(byteString80, extensionRegistryLite90);
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder94 = builder59.mergeFrom(inputStream79, extensionRegistryLite90);
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions95 = com.google.protobuf.DescriptorProtos.EnumValueOptions.parseFrom(byteString15, extensionRegistryLite90);
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder96 = enumValueOptions95.newBuilderForType();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + label4 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label4.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(enumOptions9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(methodDescriptorProto12);
        org.junit.Assert.assertNotNull(methodOptions13);
        org.junit.Assert.assertNotNull(unknownFieldSet14);
        org.junit.Assert.assertNotNull(byteString15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertNotNull(zoneOffset27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(zonedDateTime34);
        org.junit.Assert.assertNotNull(clock35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(descriptor38);
        org.junit.Assert.assertNotNull(descriptorProto39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(descriptorProtoList45);
        org.junit.Assert.assertNotNull(unknownFieldSet46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(byteString48);
        org.junit.Assert.assertNotNull(fileDescriptorProto50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertTrue("'" + label56 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label56.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(enumOptions60);
        org.junit.Assert.assertNotNull(descriptor61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(output64);
        org.junit.Assert.assertNotNull(codedOutputStream66);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[]");
        org.junit.Assert.assertNotNull(methodOptions69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(methodOptions72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(uninterpretedOption74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(byteString80);
        org.junit.Assert.assertNotNull(enumOptions82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertTrue("'" + label84 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label84.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(extensionRegistryLite90);
        org.junit.Assert.assertNotNull(location91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(functionInformationMap93);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(enumValueOptions95);
        org.junit.Assert.assertNotNull(builder96);
    }

    @Test
    public void test3358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3358");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label4 = builder3.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = builder0.addExtension(builder3);
        com.google.protobuf.ByteString.Output output7 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream9 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output7, (int) 'a');
        byte[] byteArray10 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite11 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions12 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray10, extensionRegistryLite11);
        output7.write(byteArray10);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder14 = builder0.mergeFrom(byteArray10);
        java.io.InputStream inputStream15 = null;
        com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder builder16 = com.google.javascript.jscomp.FunctionInformationMap.Entry.newBuilder();
        boolean boolean17 = builder16.hasSourceName();
        com.google.javascript.jscomp.FunctionInformationMap.Entry entry18 = builder16.getDefaultInstanceForType();
        com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder builder20 = builder16.setLineNumber(7);
        java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite> priorityMap21 = new java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite>();
        java.lang.Object obj22 = priorityMap21.clone();
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder23 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.newBuilder();
        boolean boolean24 = priorityMap21.containsValue((java.lang.Object) builder23);
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder26 = builder23.setName("java.nio.ByteBufferAsDoubleBufferB[pos=0 lim=12 cap=12]");
        com.google.protobuf.ByteString byteString27 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder28 = builder23.mergeFrom(byteString27);
        com.google.protobuf.ByteString byteString29 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite30 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions31 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(byteString29, extensionRegistryLite30);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder32 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label33 = builder32.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto34 = builder32.buildPartial();
        int int35 = fieldDescriptorProto34.getSerializedSize();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder36 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto34);
        java.io.InputStream inputStream37 = null;
        java.io.InputStream inputStream38 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite39 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location40 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream38, extensionRegistryLite39);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder41 = builder36.mergeFrom(inputStream37, extensionRegistryLite39);
        com.google.javascript.jscomp.FunctionInformationMap functionInformationMap42 = com.google.javascript.jscomp.FunctionInformationMap.parseFrom(byteString29, extensionRegistryLite39);
        com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder builder43 = builder20.mergeFrom(byteString27, extensionRegistryLite39);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean44 = builder0.mergeDelimitedFrom(inputStream15, extensionRegistryLite39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + label4 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label4.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(output7);
        org.junit.Assert.assertNotNull(codedOutputStream9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(methodOptions12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(entry18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "{}");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(byteString27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(byteString29);
        org.junit.Assert.assertNotNull(enumOptions31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + label33 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label33.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(extensionRegistryLite39);
        org.junit.Assert.assertNotNull(location40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(functionInformationMap42);
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test3359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3359");
        java.io.File file2 = null;
        java.io.File file3 = java.io.File.createTempFile("hi!", "ISO", file2);
        boolean boolean6 = file3.setWritable(false, false);
        java.net.URI uRI7 = file3.toURI();
        java.io.PrintStream printStream8 = new java.io.PrintStream(file3);
        printStream8.print((int) (byte) 0);
        java.nio.CharBuffer charBuffer12 = java.nio.CharBuffer.allocate((int) ' ');
        boolean boolean13 = charBuffer12.isDirect();
        java.nio.CharBuffer charBuffer15 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer17 = charBuffer15.put('a');
        char[] charArray19 = new char[] { '4' };
        java.nio.CharBuffer charBuffer20 = charBuffer17.get(charArray19);
        java.nio.CharBuffer charBuffer21 = charBuffer17.compact();
        java.nio.CharBuffer charBuffer23 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer25 = charBuffer23.put('a');
        java.nio.CharBuffer charBuffer27 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer29 = charBuffer27.put('a');
        char[] charArray31 = new char[] { '4' };
        java.nio.CharBuffer charBuffer32 = charBuffer29.get(charArray31);
        java.nio.CharBuffer charBuffer33 = charBuffer29.compact();
        com.google.common.collect.ImmutableSet<java.lang.Appendable> appendableSet34 = com.google.common.collect.ImmutableSet.of((java.lang.Appendable) charBuffer12, (java.lang.Appendable) charBuffer17, (java.lang.Appendable) charBuffer23, (java.lang.Appendable) charBuffer33);
        boolean boolean35 = charBuffer33.isDirect();
        char[] charArray36 = charBuffer33.array();
        java.nio.CharBuffer charBuffer38 = java.nio.CharBuffer.allocate((int) ' ');
        boolean boolean39 = charBuffer38.isDirect();
        java.nio.CharBuffer charBuffer41 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer43 = charBuffer41.put('a');
        char[] charArray45 = new char[] { '4' };
        java.nio.CharBuffer charBuffer46 = charBuffer43.get(charArray45);
        java.nio.CharBuffer charBuffer47 = charBuffer43.compact();
        java.nio.CharBuffer charBuffer49 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer51 = charBuffer49.put('a');
        java.nio.CharBuffer charBuffer53 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer55 = charBuffer53.put('a');
        char[] charArray57 = new char[] { '4' };
        java.nio.CharBuffer charBuffer58 = charBuffer55.get(charArray57);
        java.nio.CharBuffer charBuffer59 = charBuffer55.compact();
        com.google.common.collect.ImmutableSet<java.lang.Appendable> appendableSet60 = com.google.common.collect.ImmutableSet.of((java.lang.Appendable) charBuffer38, (java.lang.Appendable) charBuffer43, (java.lang.Appendable) charBuffer49, (java.lang.Appendable) charBuffer59);
        boolean boolean61 = charBuffer59.isDirect();
        int int62 = charBuffer33.read(charBuffer59);
        char[] charArray63 = new char[] {};
        java.nio.CharBuffer charBuffer64 = charBuffer33.get(charArray63);
        printStream8.print(charArray63);
        printStream8.print(' ');
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file3.toString(), "/tmp/hi!8413623955142422791ISO");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(uRI7);
        org.junit.Assert.assertNotNull(charBuffer12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(charBuffer15);
        org.junit.Assert.assertNotNull(charBuffer17);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer20);
        org.junit.Assert.assertNotNull(charBuffer21);
        org.junit.Assert.assertNotNull(charBuffer23);
        org.junit.Assert.assertNotNull(charBuffer25);
        org.junit.Assert.assertNotNull(charBuffer27);
        org.junit.Assert.assertNotNull(charBuffer29);
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer32);
        org.junit.Assert.assertNotNull(charBuffer33);
        org.junit.Assert.assertNotNull(appendableSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[\000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(charBuffer38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(charBuffer41);
        org.junit.Assert.assertNotNull(charBuffer43);
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray45), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray45), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray45), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer46);
        org.junit.Assert.assertNotNull(charBuffer47);
        org.junit.Assert.assertNotNull(charBuffer49);
        org.junit.Assert.assertNotNull(charBuffer51);
        org.junit.Assert.assertNotNull(charBuffer53);
        org.junit.Assert.assertNotNull(charBuffer55);
        org.junit.Assert.assertNotNull(charArray57);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray57), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray57), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray57), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer58);
        org.junit.Assert.assertNotNull(charBuffer59);
        org.junit.Assert.assertNotNull(appendableSet60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertNotNull(charArray63);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray63), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray63), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray63), "[]");
        org.junit.Assert.assertNotNull(charBuffer64);
    }

    @Test
    public void test3360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3360");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.of(localDateTime4, (java.time.ZoneId) zoneOffset8);
        java.time.temporal.ChronoField chronoField12 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit13 = chronoField12.getBaseUnit();
        java.time.LocalDateTime localDateTime14 = localDateTime4.plus((long) 1970, temporalUnit13);
        java.time.LocalTime localTime15 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localDateTime14);
        java.time.Period period16 = java.time.Period.ZERO;
        java.time.chrono.ChronoPeriod chronoPeriod17 = period16.normalized();
        java.time.Period period19 = period16.plusMonths((long) ' ');
        java.time.LocalDateTime localDateTime20 = localDateTime14.minus((java.time.temporal.TemporalAmount) period16);
        java.lang.String str21 = localDateTime14.toString();
        int int22 = localDateTime14.getHour();
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset26);
        int int28 = localDateTime27.getYear();
        java.time.LocalDate localDate29 = localDateTime27.toLocalDate();
        java.time.ZoneOffset zoneOffset33 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime34 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset33);
        java.time.ZoneOffset zoneOffset38 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime39 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset38);
        java.time.ZonedDateTime zonedDateTime40 = java.time.ZonedDateTime.of(localDateTime34, (java.time.ZoneId) zoneOffset38);
        java.time.temporal.ChronoField chronoField42 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit43 = chronoField42.getBaseUnit();
        java.time.LocalDateTime localDateTime44 = localDateTime34.plus((long) 1970, temporalUnit43);
        java.time.LocalTime localTime45 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localDateTime44);
        java.time.ZoneOffset zoneOffset49 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime50 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset49);
        java.time.OffsetDateTime offsetDateTime51 = java.time.OffsetDateTime.of(localDate29, localTime45, zoneOffset49);
        java.time.LocalTime localTime52 = offsetDateTime51.toLocalTime();
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime53 = localDateTime14.with((java.time.temporal.TemporalAdjuster) offsetDateTime51);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: OffsetSeconds");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertTrue("'" + chronoField12 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField12.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit13 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit13.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(chronoPeriod17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1970-03-24T02:02:32" + "'", str21, "1970-03-24T02:02:32");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1970 + "'", int28 == 1970);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(zoneOffset33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(zoneOffset38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(zonedDateTime40);
        org.junit.Assert.assertTrue("'" + chronoField42 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField42.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit43 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit43.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(zoneOffset49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(offsetDateTime51);
        org.junit.Assert.assertNotNull(localTime52);
    }

    @Test
    public void test3361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3361");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean4 = node3.isStringKey();
        boolean boolean5 = node3.isTrue();
        com.google.javascript.rhino.InputId inputId7 = new com.google.javascript.rhino.InputId("NUMBER 52.0 0");
        node3.setInputId(inputId7);
        com.google.javascript.jscomp.SourceAst sourceAst9 = null;
        com.google.javascript.rhino.InputId inputId10 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput12 = new com.google.javascript.jscomp.CompilerInput(sourceAst9, inputId10, true);
        java.io.PrintStream printStream13 = null;
        com.google.javascript.jscomp.Compiler compiler14 = new com.google.javascript.jscomp.Compiler(printStream13);
        com.google.javascript.jscomp.ErrorManager errorManager15 = compiler14.getErrorManager();
        compilerInput12.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler14);
        com.google.javascript.jscomp.CodingConvention codingConvention17 = compiler14.getCodingConvention();
        boolean boolean18 = inputId7.equals((java.lang.Object) compiler14);
        com.google.javascript.jscomp.ErrorManager errorManager19 = compiler14.getErrorManager();
        double double20 = errorManager19.getTypedPercent();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(errorManager15);
        org.junit.Assert.assertNotNull(codingConvention17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(errorManager19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.0d + "'", double20 == 0.0d);
    }

    @Test
    public void test3362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3362");
        com.google.javascript.jscomp.JSModule jSModule1 = new com.google.javascript.jscomp.JSModule("South Korea");
    }

    @Test
    public void test3363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3363");
        java.util.Locale locale3 = new java.util.Locale("", "NUMBER 52.0 0", "hi!");
        java.util.Locale locale7 = new java.util.Locale("", "NUMBER 52.0 0", "hi!");
        java.lang.String str8 = locale3.getDisplayLanguage(locale7);
        java.util.Locale locale9 = locale3.stripExtensions();
        org.junit.Assert.assertEquals(locale3.toString(), "_NUMBER 52.0 0_hi!");
        org.junit.Assert.assertEquals(locale7.toString(), "_NUMBER 52.0 0_hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "_NUMBER 52.0 0_hi!");
    }

    @Test
    public void test3364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3364");
        java.io.File file2 = null;
        java.io.File file3 = java.io.File.createTempFile("hi!", "ISO", file2);
        boolean boolean6 = file3.setWritable(false, false);
        java.net.URI uRI7 = file3.toURI();
        java.io.PrintStream printStream8 = new java.io.PrintStream(file3);
        boolean boolean10 = file3.setReadable(true);
        boolean boolean11 = file3.setReadOnly();
        boolean boolean12 = file3.createNewFile();
        boolean boolean13 = file3.canExecute();
        long long14 = file3.getFreeSpace();
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file3.toString(), "/tmp/hi!2545669539073430158ISO");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(uRI7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 299100536832L + "'", long14 == 299100536832L);
    }

    @Test
    public void test3365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3365");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) ' ');
        boolean boolean2 = charBuffer1.isDirect();
        java.nio.CharBuffer charBuffer4 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer6 = charBuffer4.put('a');
        char[] charArray8 = new char[] { '4' };
        java.nio.CharBuffer charBuffer9 = charBuffer6.get(charArray8);
        java.nio.CharBuffer charBuffer10 = charBuffer6.compact();
        java.nio.CharBuffer charBuffer12 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer14 = charBuffer12.put('a');
        java.nio.CharBuffer charBuffer16 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer18 = charBuffer16.put('a');
        char[] charArray20 = new char[] { '4' };
        java.nio.CharBuffer charBuffer21 = charBuffer18.get(charArray20);
        java.nio.CharBuffer charBuffer22 = charBuffer18.compact();
        com.google.common.collect.ImmutableSet<java.lang.Appendable> appendableSet23 = com.google.common.collect.ImmutableSet.of((java.lang.Appendable) charBuffer1, (java.lang.Appendable) charBuffer6, (java.lang.Appendable) charBuffer12, (java.lang.Appendable) charBuffer22);
        boolean boolean24 = charBuffer22.hasRemaining();
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charBuffer4);
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer9);
        org.junit.Assert.assertNotNull(charBuffer10);
        org.junit.Assert.assertNotNull(charBuffer12);
        org.junit.Assert.assertNotNull(charBuffer14);
        org.junit.Assert.assertNotNull(charBuffer16);
        org.junit.Assert.assertNotNull(charBuffer18);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer21);
        org.junit.Assert.assertNotNull(charBuffer22);
        org.junit.Assert.assertNotNull(appendableSet23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test3366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3366");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean4 = node3.isVar();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean9 = node8.isStringKey();
        boolean boolean10 = node8.isThrow();
        boolean boolean11 = node8.isVarArgs();
        boolean boolean12 = node8.isHook();
        com.google.javascript.rhino.Node node13 = node8.cloneNode();
        com.google.javascript.rhino.Node node14 = node3.useSourceInfoIfMissingFromForTree(node13);
        boolean boolean15 = node3.isThis();
        int int16 = node3.getCharno();
        int int17 = node3.getSideEffectFlags();
        node3.setSourceEncodedPositionForTree(1970);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 32 + "'", int16 == 32);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test3367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3367");
        long[] longArray5 = new long[] { 97, 57600000000000L, 28147497671065600L, 52, 37 };
        java.nio.LongBuffer longBuffer6 = java.nio.LongBuffer.wrap(longArray5);
        java.nio.LongBuffer longBuffer7 = longBuffer6.asReadOnlyBuffer();
        int int8 = longBuffer6.arrayOffset();
        long[] longArray14 = new long[] { 97, 57600000000000L, 28147497671065600L, 52, 37 };
        java.nio.LongBuffer longBuffer15 = java.nio.LongBuffer.wrap(longArray14);
        int int16 = longBuffer15.arrayOffset();
        int int17 = longBuffer6.compareTo(longBuffer15);
        java.nio.LongBuffer longBuffer18 = longBuffer15.slice();
        long[] longArray24 = new long[] { 97, 57600000000000L, 28147497671065600L, 52, 37 };
        java.nio.LongBuffer longBuffer25 = java.nio.LongBuffer.wrap(longArray24);
        java.nio.LongBuffer longBuffer26 = longBuffer25.asReadOnlyBuffer();
        int int27 = longBuffer15.compareTo(longBuffer25);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.Buffer buffer29 = longBuffer15.limit(35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[97, 57600000000000, 28147497671065600, 52, 37]");
        org.junit.Assert.assertNotNull(longBuffer6);
        org.junit.Assert.assertNotNull(longBuffer7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[97, 57600000000000, 28147497671065600, 52, 37]");
        org.junit.Assert.assertNotNull(longBuffer15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(longBuffer18);
        org.junit.Assert.assertNotNull(longArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray24), "[97, 57600000000000, 28147497671065600, 52, 37]");
        org.junit.Assert.assertNotNull(longBuffer25);
        org.junit.Assert.assertNotNull(longBuffer26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test3368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3368");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = locale0.getExtension('/');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: /");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
    }

    @Test
    public void test3369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3369");
        java.time.Month month0 = java.time.Month.AUGUST;
        int int1 = month0.getValue();
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime2 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) month0);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unable to obtain LocalTime from TemporalAccessor: AUGUST of type java.time.Month");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + month0 + "' != '" + java.time.Month.AUGUST + "'", month0.equals(java.time.Month.AUGUST));
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 8 + "'", int1 == 8);
    }

    @Test
    public void test3370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3370");
        com.google.protobuf.DescriptorProtos.MessageOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.MessageOptions.newBuilder();
        java.io.InputStream inputStream1 = null;
        com.google.protobuf.DescriptorProtos.MessageOptions.Builder builder2 = builder0.mergeFrom(inputStream1);
        com.google.protobuf.ByteString.Output output4 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream6 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output4, (int) 'a');
        byte[] byteArray7 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite8 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions9 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray7, extensionRegistryLite8);
        output4.write(byteArray7);
        com.google.protobuf.CodedInputStream codedInputStream13 = com.google.protobuf.CodedInputStream.newInstance(byteArray7, 21, 4);
        int int15 = codedInputStream13.setSizeLimit((int) '/');
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.MessageOptions.Builder builder16 = builder2.mergeFrom(codedInputStream13);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 21");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(output4);
        org.junit.Assert.assertNotNull(codedOutputStream6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(methodOptions9);
        org.junit.Assert.assertNotNull(codedInputStream13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 67108864 + "'", int15 == 67108864);
    }

    @Test
    public void test3371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3371");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy5 = null;
        compilerOptions0.variableRenaming = variableRenamingPolicy5;
        compilerOptions0.setSummaryDetailLevel(999);
        boolean boolean9 = compilerOptions0.getInferTypes();
        boolean boolean10 = compilerOptions0.ideMode;
        compilerOptions0.setGroupVariableDeclarations(true);
        compilerOptions0.coalesceVariableNames = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions18 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions18.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat21 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions18.errorFormat = errorFormat21;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy23 = null;
        compilerOptions18.variableRenaming = variableRenamingPolicy23;
        compilerOptions18.setSummaryDetailLevel(999);
        compilerOptions18.checkSuspiciousCode = true;
        byte[] byteArray29 = compilerOptions18.inputPropertyMapSerialized;
        com.google.javascript.jscomp.CompilerOptions compilerOptions30 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions30.optimizeCalls = false;
        compilerOptions30.preferLineBreakAtEndOfFile = false;
        boolean boolean35 = compilerOptions30.markNoSideEffectCalls;
        boolean boolean36 = compilerOptions30.labelRenaming;
        com.google.javascript.jscomp.DependencyOptions dependencyOptions37 = new com.google.javascript.jscomp.DependencyOptions();
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet42 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet42, strArray41);
        boolean boolean44 = strSet42.isEmpty();
        java.nio.ByteBuffer byteBuffer46 = java.nio.ByteBuffer.allocate(100);
        boolean boolean47 = strSet42.equals((java.lang.Object) byteBuffer46);
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet52 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet52, strArray51);
        boolean boolean54 = strSet52.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream55 = strSet52.stream();
        boolean boolean56 = strSet42.retainAll((java.util.Collection<java.lang.String>) strSet52);
        com.google.javascript.jscomp.DependencyOptions dependencyOptions57 = dependencyOptions37.setEntryPoints((java.util.Collection<java.lang.String>) strSet42);
        compilerOptions30.setDependencyOptions(dependencyOptions37);
        com.google.javascript.jscomp.CheckLevel checkLevel59 = compilerOptions30.checkGlobalThisLevel;
        compilerOptions18.checkMissingReturn = checkLevel59;
        com.google.javascript.jscomp.DiagnosticType diagnosticType61 = com.google.javascript.jscomp.Compiler.MOTION_ITERATIONS_ERROR;
        java.lang.String[] strArray65 = new java.lang.String[] { "FileDescriptorProto", "16:00:52+00:00:52", "Exceeded max number of code motion iterations: {0}" };
        com.google.javascript.jscomp.JSError jSError66 = com.google.javascript.jscomp.JSError.make("java.nio.HeapFloatBuffer[pos=0 lim=6 cap=6]", (int) (short) 10, (int) ':', checkLevel59, diagnosticType61, strArray65);
        compilerOptions0.checkRequires = checkLevel59;
        com.google.javascript.jscomp.CheckLevel checkLevel68 = null;
        compilerOptions0.setReportUnknownTypes(checkLevel68);
        org.junit.Assert.assertNotNull(errorFormat3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(errorFormat21);
        org.junit.Assert.assertNull(byteArray29);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strStream55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dependencyOptions57);
        org.junit.Assert.assertTrue("'" + checkLevel59 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel59.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(diagnosticType61);
        org.junit.Assert.assertNotNull(strArray65);
        org.junit.Assert.assertNotNull(jSError66);
    }

    @Test
    public void test3372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3372");
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto0 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.getDefaultInstance();
        boolean boolean1 = methodDescriptorProto0.hasOutputType();
        com.google.protobuf.CodedOutputStream codedOutputStream2 = null;
        methodDescriptorProto0.writeTo(codedOutputStream2);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder4 = methodDescriptorProto0.toBuilder();
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder6 = builder4.setOutputType("java.nio.HeapFloatBuffer[pos=0 lim=6 cap=6]");
        java.io.InputStream inputStream7 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite8 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions9 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(inputStream7, extensionRegistryLite8);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder10 = builder6.mergeOptions(methodOptions9);
        java.util.Map<com.google.protobuf.Descriptors.FieldDescriptor, java.lang.Object> fieldDescriptorMap11 = builder10.getAllFields();
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions12 = builder10.getOptions();
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder13 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder(methodOptions12);
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor14 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean15 = methodOptions12.hasField(fieldDescriptor14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(methodDescriptorProto0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(methodOptions9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(fieldDescriptorMap11);
        org.junit.Assert.assertNotNull(methodOptions12);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test3373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3373");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label4 = builder3.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = builder0.addExtension(builder3);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder6 = builder0.addEnumTypeBuilder();
        com.google.protobuf.ByteString.Output output8 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream10 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output8, (int) 'a');
        byte[] byteArray11 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite12 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions13 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray11, extensionRegistryLite12);
        output8.write(byteArray11);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder15 = builder0.mergeFrom(byteArray11);
        java.util.List<com.google.protobuf.DescriptorProtos.FieldDescriptorProto> fieldDescriptorProtoList16 = builder0.getExtensionList();
        boolean boolean17 = builder0.hasPackage();
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder19 = builder0.addMessageTypeBuilder(82000000);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 82000000, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + label4 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label4.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(output8);
        org.junit.Assert.assertNotNull(codedOutputStream10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(methodOptions13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(fieldDescriptorProtoList16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test3374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3374");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset10);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.of(localDateTime11, (java.time.ZoneId) zoneOffset15);
        java.time.Clock clock18 = java.time.Clock.fixed(instant0, (java.time.ZoneId) zoneOffset15);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.now(clock18);
        java.time.LocalDate localDate20 = java.time.LocalDate.now(clock18);
        com.google.protobuf.Descriptors.Descriptor descriptor21 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto22 = descriptor21.toProto();
        boolean boolean23 = descriptorProto22.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList24 = descriptorProto22.getNestedTypeList();
        int int25 = descriptorProto22.getExtensionRangeCount();
        boolean boolean26 = localDate20.equals((java.lang.Object) descriptorProto22);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder27 = descriptorProto22.newBuilderForType();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList28 = builder27.getNestedTypeList();
        com.google.protobuf.UnknownFieldSet unknownFieldSet29 = builder27.getUnknownFields();
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder30 = builder27.addEnumTypeBuilder();
        int int31 = builder27.getExtensionRangeCount();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(clock18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(descriptor21);
        org.junit.Assert.assertNotNull(descriptorProto22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(descriptorProtoList28);
        org.junit.Assert.assertNotNull(unknownFieldSet29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test3375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3375");
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        boolean boolean6 = strSet4.isEmpty();
        java.nio.ByteBuffer byteBuffer8 = java.nio.ByteBuffer.allocate(100);
        boolean boolean9 = strSet4.equals((java.lang.Object) byteBuffer8);
        java.nio.IntBuffer intBuffer10 = byteBuffer8.asIntBuffer();
        double double11 = byteBuffer8.getDouble();
        java.nio.ByteBuffer byteBuffer12 = byteBuffer8.asReadOnlyBuffer();
        java.nio.ByteBuffer byteBuffer14 = byteBuffer8.putLong((long) 'u');
        java.nio.ByteBuffer byteBuffer15 = byteBuffer14.duplicate();
        java.nio.ByteBuffer byteBuffer17 = byteBuffer14.putLong(0L);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(intBuffer10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteBuffer17);
    }

    @Test
    public void test3376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3376");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label4 = builder3.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = builder0.addExtension(builder3);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder6 = builder0.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder7 = builder6.getOptionsBuilder();
        java.io.InputStream inputStream8 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions9 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream8);
        boolean boolean10 = enumOptions9.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder11 = builder7.mergeFrom(enumOptions9);
        com.google.protobuf.UnknownFieldSet unknownFieldSet12 = builder7.getUnknownFields();
        byte[] byteArray13 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite14 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions15 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray13, extensionRegistryLite14);
        com.google.protobuf.CodedOutputStream codedOutputStream18 = com.google.protobuf.CodedOutputStream.newInstance(byteArray13, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite19 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto20 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray13, extensionRegistryLite19);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite21 = null;
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto22 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.parseFrom(byteArray13, extensionRegistryLite21);
        com.google.protobuf.UnknownFieldSet unknownFieldSet23 = com.google.protobuf.UnknownFieldSet.parseFrom(byteArray13);
        com.google.protobuf.ByteString byteString24 = unknownFieldSet23.toByteString();
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite25 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder26 = builder7.mergeFrom(byteString24, extensionRegistryLite25);
        com.google.protobuf.DescriptorProtos.FieldOptions fieldOptions27 = com.google.protobuf.DescriptorProtos.FieldOptions.parseFrom(byteString24);
        com.google.protobuf.DescriptorProtos.FieldOptions.Builder builder28 = fieldOptions27.newBuilderForType();
        com.google.protobuf.DescriptorProtos.FieldOptions.Builder builder29 = builder28.clone();
        com.google.protobuf.DescriptorProtos.FieldOptions.Builder builder30 = builder28.clearUninterpretedOption();
        com.google.protobuf.DescriptorProtos.FieldOptions.Builder builder32 = builder28.setDeprecated(true);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + label4 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label4.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(enumOptions9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(unknownFieldSet12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(methodOptions15);
        org.junit.Assert.assertNotNull(codedOutputStream18);
        org.junit.Assert.assertNotNull(fileDescriptorProto20);
        org.junit.Assert.assertNotNull(serviceDescriptorProto22);
        org.junit.Assert.assertNotNull(unknownFieldSet23);
        org.junit.Assert.assertNotNull(byteString24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(fieldOptions27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test3377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3377");
        byte[] byteArray0 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions2 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray0, extensionRegistryLite1);
        com.google.protobuf.CodedOutputStream codedOutputStream5 = com.google.protobuf.CodedOutputStream.newInstance(byteArray0, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite6 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto7 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray0, extensionRegistryLite6);
        boolean boolean8 = fileDescriptorProto7.hasOptions();
        com.google.protobuf.DescriptorProtos.FileOptionsOrBuilder fileOptionsOrBuilder9 = fileDescriptorProto7.getOptionsOrBuilder();
        boolean boolean10 = fileDescriptorProto7.hasSourceCodeInfo();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder11 = fileDescriptorProto7.newBuilderForType();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList12 = builder11.getMessageTypeList();
        java.io.InputStream inputStream13 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder14 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder16 = builder14.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder17 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label18 = builder17.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder19 = builder14.addExtension(builder17);
        boolean boolean20 = builder17.hasDefaultValue();
        java.io.InputStream inputStream21 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite22 = null;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder23 = builder17.mergeFrom(inputStream21, extensionRegistryLite22);
        java.io.InputStream inputStream24 = null;
        java.io.InputStream inputStream25 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite26 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location27 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream25, extensionRegistryLite26);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder28 = builder23.mergeFrom(inputStream24, extensionRegistryLite26);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean29 = builder11.mergeDelimitedFrom(inputStream13, extensionRegistryLite26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(methodOptions2);
        org.junit.Assert.assertNotNull(codedOutputStream5);
        org.junit.Assert.assertNotNull(fileDescriptorProto7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(fileOptionsOrBuilder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(descriptorProtoList12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + label18 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label18.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(extensionRegistryLite26);
        org.junit.Assert.assertNotNull(location27);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test3378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3378");
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime2 = java.time.LocalTime.of(8, (-2));
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MinuteOfHour (valid values 0 - 59): -2");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3379");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
    }

    @Test
    public void test3380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3380");
        com.google.javascript.jscomp.SourceAst sourceAst0 = null;
        com.google.javascript.rhino.InputId inputId1 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput3 = new com.google.javascript.jscomp.CompilerInput(sourceAst0, inputId1, true);
        java.io.PrintStream printStream4 = null;
        com.google.javascript.jscomp.Compiler compiler5 = new com.google.javascript.jscomp.Compiler(printStream4);
        com.google.javascript.jscomp.ErrorManager errorManager6 = compiler5.getErrorManager();
        compilerInput3.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler5);
        com.google.javascript.jscomp.CodingConvention codingConvention8 = compiler5.getCodingConvention();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection9 = codingConvention8.getAssertionFunctions();
        boolean boolean11 = codingConvention8.isSuperClassReference("FileDescriptorProto");
        java.lang.String str12 = codingConvention8.getExportSymbolFunction();
        java.lang.String str13 = codingConvention8.getAbstractMethodName();
        boolean boolean16 = codingConvention8.isExported(":", true);
        org.junit.Assert.assertNotNull(errorManager6);
        org.junit.Assert.assertNotNull(codingConvention8);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "goog.exportSymbol" + "'", str12, "goog.exportSymbol");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "goog.abstractMethod" + "'", str13, "goog.abstractMethod");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test3381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3381");
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.EnumValueOptions.newBuilder();
        java.io.InputStream inputStream1 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite2 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo sourceCodeInfo3 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.parseFrom(inputStream1, extensionRegistryLite2);
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder4 = sourceCodeInfo3.newBuilderForType();
        com.google.protobuf.UnknownFieldSet unknownFieldSet5 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder6 = builder4.setUnknownFields(unknownFieldSet5);
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.Builder builder8 = builder4.addLocationBuilder(0);
        java.io.File file11 = null;
        java.io.File file12 = java.io.File.createTempFile("hi!", "ISO", file11);
        boolean boolean15 = file12.setWritable(false, false);
        java.net.URI uRI16 = file12.toURI();
        java.io.PrintStream printStream17 = new java.io.PrintStream(file12);
        printStream17.print((int) (byte) 0);
        printStream17.print(10.0d);
        printStream17.close();
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet27 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet27, strArray26);
        boolean boolean29 = strSet27.isEmpty();
        java.nio.ByteBuffer byteBuffer31 = java.nio.ByteBuffer.allocate(100);
        boolean boolean32 = strSet27.equals((java.lang.Object) byteBuffer31);
        java.nio.IntBuffer intBuffer33 = byteBuffer31.asIntBuffer();
        double double34 = byteBuffer31.getDouble();
        java.nio.ByteBuffer byteBuffer37 = byteBuffer31.put((int) (short) 1, (byte) 1);
        byte[] byteArray38 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite39 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions40 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray38, extensionRegistryLite39);
        com.google.protobuf.CodedOutputStream codedOutputStream43 = com.google.protobuf.CodedOutputStream.newInstance(byteArray38, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite44 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto45 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray38, extensionRegistryLite44);
        com.google.protobuf.CodedOutputStream codedOutputStream46 = com.google.protobuf.CodedOutputStream.newInstance(byteArray38);
        java.nio.ByteBuffer byteBuffer47 = byteBuffer31.get(byteArray38);
        printStream17.write(byteArray38, (int) '/', (int) (byte) 1);
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.Builder builder51 = builder8.mergeFrom(byteArray38);
        int int52 = builder51.getPathCount();
        java.time.Instant instant53 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset57 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime58 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset57);
        java.time.OffsetDateTime offsetDateTime59 = java.time.OffsetDateTime.ofInstant(instant53, (java.time.ZoneId) zoneOffset57);
        java.time.ZoneOffset zoneOffset63 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime64 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset63);
        java.time.ZoneOffset zoneOffset68 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime69 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset68);
        java.time.ZonedDateTime zonedDateTime70 = java.time.ZonedDateTime.of(localDateTime64, (java.time.ZoneId) zoneOffset68);
        java.time.Clock clock71 = java.time.Clock.fixed(instant53, (java.time.ZoneId) zoneOffset68);
        java.time.LocalDateTime localDateTime72 = java.time.LocalDateTime.now(clock71);
        java.time.LocalDate localDate73 = java.time.LocalDate.now(clock71);
        com.google.protobuf.Descriptors.Descriptor descriptor74 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto75 = descriptor74.toProto();
        boolean boolean76 = descriptorProto75.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList77 = descriptorProto75.getNestedTypeList();
        int int78 = descriptorProto75.getExtensionRangeCount();
        boolean boolean79 = localDate73.equals((java.lang.Object) descriptorProto75);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder80 = descriptorProto75.newBuilderForType();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList81 = builder80.getNestedTypeList();
        com.google.protobuf.UnknownFieldSet unknownFieldSet82 = builder80.getUnknownFields();
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder83 = builder80.addEnumTypeBuilder();
        byte[] byteArray84 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite85 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions86 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray84, extensionRegistryLite85);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite87 = null;
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto enumDescriptorProto88 = com.google.protobuf.DescriptorProtos.EnumDescriptorProto.parseFrom(byteArray84, extensionRegistryLite87);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto enumDescriptorProto89 = enumDescriptorProto88.getDefaultInstanceForType();
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder90 = builder80.addEnumType(enumDescriptorProto89);
        com.google.protobuf.ByteString byteString91 = enumDescriptorProto89.toByteString();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.Builder builder92 = builder51.mergeFrom(byteString91);
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder93 = builder0.mergeFrom(byteString91);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(sourceCodeInfo3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(file12);
        org.junit.Assert.assertEquals(file12.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file12.toString(), "/tmp/hi!3772598615318126587ISO");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(uRI16);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(intBuffer33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.0d + "'", double34 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[]");
        org.junit.Assert.assertNotNull(methodOptions40);
        org.junit.Assert.assertNotNull(codedOutputStream43);
        org.junit.Assert.assertNotNull(fileDescriptorProto45);
        org.junit.Assert.assertNotNull(codedOutputStream46);
        org.junit.Assert.assertNotNull(byteBuffer47);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(instant53);
        org.junit.Assert.assertNotNull(zoneOffset57);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(offsetDateTime59);
        org.junit.Assert.assertNotNull(zoneOffset63);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(zoneOffset68);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(zonedDateTime70);
        org.junit.Assert.assertNotNull(clock71);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertNotNull(descriptor74);
        org.junit.Assert.assertNotNull(descriptorProto75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(descriptorProtoList81);
        org.junit.Assert.assertNotNull(unknownFieldSet82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[]");
        org.junit.Assert.assertNotNull(methodOptions86);
        org.junit.Assert.assertNotNull(enumDescriptorProto88);
        org.junit.Assert.assertNotNull(enumDescriptorProto89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(byteString91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder93);
    }

    @Test
    public void test3382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3382");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label1 = builder0.getLabel();
        com.google.protobuf.ByteString byteString2 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder3 = builder0.mergeFrom(byteString2);
        boolean boolean4 = builder3.hasNumber();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder7 = builder5.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder8 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label9 = builder8.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder10 = builder5.addExtension(builder8);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder11 = builder5.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder12 = builder11.getOptionsBuilder();
        java.io.InputStream inputStream13 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions14 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream13);
        boolean boolean15 = enumOptions14.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder16 = builder12.mergeFrom(enumOptions14);
        com.google.protobuf.UnknownFieldSet unknownFieldSet17 = builder12.getUnknownFields();
        com.google.protobuf.CodedOutputStream codedOutputStream18 = null;
        unknownFieldSet17.writeTo(codedOutputStream18);
        byte[] byteArray20 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite21 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions22 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray20, extensionRegistryLite21);
        com.google.protobuf.CodedOutputStream codedOutputStream25 = com.google.protobuf.CodedOutputStream.newInstance(byteArray20, (int) (short) 0, 1);
        com.google.protobuf.CodedOutputStream codedOutputStream28 = com.google.protobuf.CodedOutputStream.newInstance(byteArray20, (int) ' ', 0);
        java.io.InputStream inputStream29 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location30 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream29);
        boolean boolean31 = location30.isInitialized();
        codedOutputStream28.writeGroupNoTag((com.google.protobuf.MessageLite) location30);
        unknownFieldSet17.writeAsMessageSetTo(codedOutputStream28);
        byte[] byteArray34 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite35 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions36 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray34, extensionRegistryLite35);
        com.google.protobuf.CodedOutputStream codedOutputStream39 = com.google.protobuf.CodedOutputStream.newInstance(byteArray34, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite40 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto41 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray34, extensionRegistryLite40);
        com.google.protobuf.CodedOutputStream codedOutputStream42 = com.google.protobuf.CodedOutputStream.newInstance(byteArray34);
        unknownFieldSet17.writeAsMessageSetTo(codedOutputStream42);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder44 = builder3.mergeUnknownFields(unknownFieldSet17);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + label1 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label1.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(byteString2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + label9 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label9.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(enumOptions14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(unknownFieldSet17);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[]");
        org.junit.Assert.assertNotNull(methodOptions22);
        org.junit.Assert.assertNotNull(codedOutputStream25);
        org.junit.Assert.assertNotNull(codedOutputStream28);
        org.junit.Assert.assertNotNull(location30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(methodOptions36);
        org.junit.Assert.assertNotNull(codedOutputStream39);
        org.junit.Assert.assertNotNull(fileDescriptorProto41);
        org.junit.Assert.assertNotNull(codedOutputStream42);
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test3383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3383");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.of(localDateTime4, (java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime10.withHour(16);
        java.time.chrono.IsoChronology isoChronology13 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset17);
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset22);
        java.time.ZonedDateTime zonedDateTime24 = java.time.ZonedDateTime.of(localDateTime18, (java.time.ZoneId) zoneOffset22);
        java.time.ZonedDateTime zonedDateTime26 = zonedDateTime24.withHour(16);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime27 = zonedDateTime26.toLocalDateTime();
        java.time.chrono.Chronology chronology28 = localDateChronoLocalDateTime27.getChronology();
        int int29 = isoChronology13.compareTo(chronology28);
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.MAX;
        java.time.LocalDate localDate31 = isoChronology13.dateNow((java.time.ZoneId) zoneOffset30);
        java.time.Period period35 = isoChronology13.period((int) ':', 171, (int) (short) 100);
        java.time.Period period39 = isoChronology13.period(43, 9, 52);
        java.time.ZonedDateTime zonedDateTime40 = zonedDateTime12.plus((java.time.temporal.TemporalAmount) period39);
        java.time.ZoneOffset zoneOffset45 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime46 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset45);
        java.time.ZoneOffset zoneOffset50 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime51 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset50);
        java.time.ZonedDateTime zonedDateTime52 = java.time.ZonedDateTime.of(localDateTime46, (java.time.ZoneId) zoneOffset50);
        java.time.temporal.ChronoField chronoField54 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit55 = chronoField54.getBaseUnit();
        java.time.LocalDateTime localDateTime56 = localDateTime46.plus((long) 1970, temporalUnit55);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime57 = zonedDateTime40.minus((long) 8, temporalUnit55);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(isoChronology13);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zonedDateTime24);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(zonedDateTime40);
        org.junit.Assert.assertNotNull(zoneOffset45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(zoneOffset50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(zonedDateTime52);
        org.junit.Assert.assertTrue("'" + chronoField54 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField54.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit55 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit55.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime57);
    }

    @Test
    public void test3384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3384");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label4 = builder3.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = builder0.addExtension(builder3);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder6 = builder0.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder7 = builder6.getOptionsBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder8 = builder6.getOptionsBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions9 = builder8.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + label4 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label4.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(enumOptions9);
    }

    @Test
    public void test3385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3385");
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto0 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.getDefaultInstance();
        boolean boolean1 = serviceDescriptorProto0.hasOptions();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder2 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.newBuilder(serviceDescriptorProto0);
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto3 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.getDefaultInstance();
        boolean boolean4 = serviceDescriptorProto3.hasOptions();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder5 = builder2.mergeFrom(serviceDescriptorProto3);
        com.google.protobuf.DescriptorProtos.ServiceOptions serviceOptions6 = null;
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder7 = builder5.mergeOptions(serviceOptions6);
        java.io.InputStream inputStream8 = null;
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder9 = builder7.mergeFrom(inputStream8);
        org.junit.Assert.assertNotNull(serviceDescriptorProto0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(serviceDescriptorProto3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test3386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3386");
        int int1 = com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag((int) 'u');
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
    }

    @Test
    public void test3387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3387");
        java.time.Period period0 = java.time.Period.ZERO;
        java.time.chrono.ChronoPeriod chronoPeriod1 = period0.normalized();
        java.time.temporal.ChronoField chronoField2 = java.time.temporal.ChronoField.EPOCH_DAY;
        java.time.Instant instant3 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime8 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset7);
        java.time.OffsetDateTime offsetDateTime9 = java.time.OffsetDateTime.ofInstant(instant3, (java.time.ZoneId) zoneOffset7);
        java.time.temporal.ValueRange valueRange10 = chronoField2.rangeRefinedBy((java.time.temporal.TemporalAccessor) offsetDateTime9);
        java.time.temporal.Temporal temporal11 = period0.subtractFrom((java.time.temporal.Temporal) offsetDateTime9);
        java.time.Month month12 = java.time.Month.AUGUST;
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset16);
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset21);
        java.time.ZonedDateTime zonedDateTime23 = java.time.ZonedDateTime.of(localDateTime17, (java.time.ZoneId) zoneOffset21);
        java.time.temporal.ChronoField chronoField24 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        boolean boolean25 = localDateTime17.isSupported((java.time.temporal.TemporalField) chronoField24);
        boolean boolean26 = month12.isSupported((java.time.temporal.TemporalField) chronoField24);
        long long27 = offsetDateTime9.getLong((java.time.temporal.TemporalField) chronoField24);
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime33 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset32);
        int int34 = localDateTime33.getYear();
        java.time.LocalDate localDate35 = localDateTime33.toLocalDate();
        java.time.temporal.ChronoField chronoField36 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_MONTH;
        long long37 = localDateTime33.getLong((java.time.temporal.TemporalField) chronoField36);
        boolean boolean38 = chronoField36.isTimeBased();
        java.time.temporal.TemporalUnit temporalUnit39 = chronoField36.getBaseUnit();
        java.time.temporal.Temporal temporal40 = offsetDateTime9.minus((long) 82000000, temporalUnit39);
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(chronoPeriod1);
        org.junit.Assert.assertTrue("'" + chronoField2 + "' != '" + java.time.temporal.ChronoField.EPOCH_DAY + "'", chronoField2.equals(java.time.temporal.ChronoField.EPOCH_DAY));
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(valueRange10);
        org.junit.Assert.assertNotNull(temporal11);
        org.junit.Assert.assertTrue("'" + month12 + "' != '" + java.time.Month.AUGUST + "'", month12.equals(java.time.Month.AUGUST));
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zonedDateTime23);
        org.junit.Assert.assertTrue("'" + chronoField24 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField24.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 12L + "'", long27 == 12L);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1970 + "'", int34 == 1970);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertTrue("'" + chronoField36 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_MONTH + "'", chronoField36.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_MONTH));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L + "'", long37 == 1L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit39 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit39.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(temporal40);
    }

    @Test
    public void test3388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3388");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label4 = builder3.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = builder0.addExtension(builder3);
        boolean boolean6 = builder3.hasDefaultValue();
        java.io.InputStream inputStream7 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite8 = null;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder9 = builder3.mergeFrom(inputStream7, extensionRegistryLite8);
        java.io.InputStream inputStream10 = null;
        java.io.InputStream inputStream11 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite12 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location13 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream11, extensionRegistryLite12);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder14 = builder9.mergeFrom(inputStream10, extensionRegistryLite12);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder15 = builder14.clear();
        java.io.InputStream inputStream16 = null;
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder17 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder18 = builder17.clearCcGenericServices();
        boolean boolean19 = builder17.isInitialized();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder21 = builder17.setCcGenericServices(true);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder22 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label23 = builder22.getLabel();
        com.google.protobuf.ByteString byteString24 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder25 = builder22.mergeFrom(byteString24);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite26 = null;
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder27 = builder21.mergeFrom(byteString24, extensionRegistryLite26);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite28 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions29 = com.google.protobuf.DescriptorProtos.EnumValueOptions.parseFrom(byteString24, extensionRegistryLite28);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite30 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto31 = com.google.protobuf.DescriptorProtos.DescriptorProto.parseFrom(byteString24, extensionRegistryLite30);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean32 = builder15.mergeDelimitedFrom(inputStream16, extensionRegistryLite30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + label4 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label4.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(extensionRegistryLite12);
        org.junit.Assert.assertNotNull(location13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + label23 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label23.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(byteString24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(enumValueOptions29);
        org.junit.Assert.assertNotNull(extensionRegistryLite30);
        org.junit.Assert.assertNotNull(descriptorProto31);
    }

    @Test
    public void test3389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3389");
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder1 = builder0.clearCcGenericServices();
        boolean boolean2 = builder0.isInitialized();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder4 = builder0.setCcGenericServices(true);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder5 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label6 = builder5.getLabel();
        com.google.protobuf.ByteString byteString7 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder8 = builder5.mergeFrom(byteString7);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite9 = null;
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder10 = builder4.mergeFrom(byteString7, extensionRegistryLite9);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite11 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions12 = com.google.protobuf.DescriptorProtos.EnumValueOptions.parseFrom(byteString7, extensionRegistryLite11);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite13 = null;
        com.google.protobuf.DescriptorProtos.MessageOptions messageOptions14 = com.google.protobuf.DescriptorProtos.MessageOptions.parseFrom(byteString7, extensionRegistryLite13);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite15 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions16 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteString7, extensionRegistryLite15);
        com.google.protobuf.Descriptors.Descriptor descriptor17 = methodOptions16.getDescriptorForType();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + label6 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label6.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(byteString7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(enumValueOptions12);
        org.junit.Assert.assertNotNull(messageOptions14);
        org.junit.Assert.assertNotNull(methodOptions16);
        org.junit.Assert.assertNotNull(descriptor17);
    }

    @Test
    public void test3390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3390");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.DescriptorProtos.FieldOptions fieldOptions1 = com.google.protobuf.DescriptorProtos.FieldOptions.parseFrom(inputStream0);
        boolean boolean2 = fieldOptions1.hasExperimentalMapKey();
        com.google.protobuf.DescriptorProtos.FieldOptions fieldOptions3 = fieldOptions1.getDefaultInstanceForType();
        boolean boolean4 = fieldOptions1.getDeprecated();
        org.junit.Assert.assertNotNull(fieldOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(fieldOptions3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test3391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3391");
        java.io.InputStream inputStream0 = null;
        byte[] byteArray1 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite2 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions3 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray1, extensionRegistryLite2);
        com.google.protobuf.CodedOutputStream codedOutputStream6 = com.google.protobuf.CodedOutputStream.newInstance(byteArray1, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite7 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto8 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray1, extensionRegistryLite7);
        com.google.protobuf.CodedOutputStream codedOutputStream9 = com.google.protobuf.CodedOutputStream.newInstance(byteArray1);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder10 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label11 = builder10.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto12 = builder10.buildPartial();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder13 = fieldDescriptorProto12.newBuilderForType();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder14 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto12);
        java.io.File file17 = null;
        java.io.File file18 = java.io.File.createTempFile("hi!", "ISO", file17);
        boolean boolean21 = file18.setWritable(false, false);
        java.net.URI uRI22 = file18.toURI();
        java.io.PrintStream printStream23 = new java.io.PrintStream(file18);
        printStream23.print((int) (byte) 0);
        printStream23.print(10.0d);
        printStream23.close();
        java.lang.String[] strArray32 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32);
        boolean boolean35 = strSet33.isEmpty();
        java.nio.ByteBuffer byteBuffer37 = java.nio.ByteBuffer.allocate(100);
        boolean boolean38 = strSet33.equals((java.lang.Object) byteBuffer37);
        java.nio.IntBuffer intBuffer39 = byteBuffer37.asIntBuffer();
        double double40 = byteBuffer37.getDouble();
        java.nio.ByteBuffer byteBuffer43 = byteBuffer37.put((int) (short) 1, (byte) 1);
        byte[] byteArray44 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite45 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions46 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray44, extensionRegistryLite45);
        com.google.protobuf.CodedOutputStream codedOutputStream49 = com.google.protobuf.CodedOutputStream.newInstance(byteArray44, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite50 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto51 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray44, extensionRegistryLite50);
        com.google.protobuf.CodedOutputStream codedOutputStream52 = com.google.protobuf.CodedOutputStream.newInstance(byteArray44);
        java.nio.ByteBuffer byteBuffer53 = byteBuffer37.get(byteArray44);
        printStream23.write(byteArray44, (int) '/', (int) (byte) 1);
        java.io.InputStream inputStream57 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite58 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location59 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream57, extensionRegistryLite58);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder60 = builder14.mergeFrom(byteArray44, extensionRegistryLite58);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto61 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray1, extensionRegistryLite58);
        com.google.protobuf.DescriptorProtos.UninterpretedOption uninterpretedOption62 = com.google.protobuf.DescriptorProtos.UninterpretedOption.parseFrom(inputStream0, extensionRegistryLite58);
        boolean boolean63 = uninterpretedOption62.hasStringValue();
        boolean boolean64 = uninterpretedOption62.hasNegativeIntValue();
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertNotNull(methodOptions3);
        org.junit.Assert.assertNotNull(codedOutputStream6);
        org.junit.Assert.assertNotNull(fileDescriptorProto8);
        org.junit.Assert.assertNotNull(codedOutputStream9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + label11 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label11.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(file18);
        org.junit.Assert.assertEquals(file18.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file18.toString(), "/tmp/hi!2537869216209984154ISO");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(uRI22);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intBuffer39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 0.0d + "'", double40 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[]");
        org.junit.Assert.assertNotNull(methodOptions46);
        org.junit.Assert.assertNotNull(codedOutputStream49);
        org.junit.Assert.assertNotNull(fileDescriptorProto51);
        org.junit.Assert.assertNotNull(codedOutputStream52);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertNotNull(extensionRegistryLite58);
        org.junit.Assert.assertNotNull(location59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(fileDescriptorProto61);
        org.junit.Assert.assertNotNull(uninterpretedOption62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test3392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3392");
        java.io.File file2 = null;
        java.io.File file3 = java.io.File.createTempFile("hi!", "ISO", file2);
        boolean boolean4 = file3.createNewFile();
        boolean boolean7 = file3.setWritable(true, true);
        boolean boolean8 = file3.exists();
        boolean boolean10 = file3.setReadable(false);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file3.toString(), "/tmp/hi!1503980601446683542ISO");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test3393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3393");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.of(localDateTime4, (java.time.ZoneId) zoneOffset8);
        java.time.temporal.ChronoField chronoField12 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit13 = chronoField12.getBaseUnit();
        java.time.LocalDateTime localDateTime14 = localDateTime4.plus((long) 1970, temporalUnit13);
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset19);
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset24);
        java.time.ZonedDateTime zonedDateTime26 = java.time.ZonedDateTime.of(localDateTime20, (java.time.ZoneId) zoneOffset24);
        java.time.temporal.ChronoField chronoField28 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit29 = chronoField28.getBaseUnit();
        java.time.LocalDateTime localDateTime30 = localDateTime20.plus((long) 1970, temporalUnit29);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime31 = localDateTime14.minus((long) 43, temporalUnit29);
        java.time.LocalDateTime localDateTime33 = localDateTime14.minusHours((long) 1024);
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset37);
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime43 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset42);
        java.time.ZonedDateTime zonedDateTime44 = java.time.ZonedDateTime.of(localDateTime38, (java.time.ZoneId) zoneOffset42);
        java.time.temporal.ChronoField chronoField46 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit47 = chronoField46.getBaseUnit();
        java.time.LocalDateTime localDateTime48 = localDateTime38.plus((long) 1970, temporalUnit47);
        java.time.ZoneOffset zoneOffset53 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime54 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset53);
        java.time.ZoneOffset zoneOffset58 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime59 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset58);
        java.time.ZonedDateTime zonedDateTime60 = java.time.ZonedDateTime.of(localDateTime54, (java.time.ZoneId) zoneOffset58);
        java.time.temporal.ChronoField chronoField62 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit63 = chronoField62.getBaseUnit();
        java.time.LocalDateTime localDateTime64 = localDateTime54.plus((long) 1970, temporalUnit63);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime65 = localDateTime48.minus((long) 43, temporalUnit63);
        java.time.ZoneOffset zoneOffset69 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime70 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset69);
        java.time.ZoneOffset zoneOffset74 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime75 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset74);
        java.time.ZonedDateTime zonedDateTime76 = java.time.ZonedDateTime.of(localDateTime70, (java.time.ZoneId) zoneOffset74);
        java.time.temporal.ChronoField chronoField77 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        boolean boolean78 = localDateTime70.isSupported((java.time.temporal.TemporalField) chronoField77);
        java.time.LocalDateTime localDateTime80 = localDateTime70.plusHours((long) 9);
        boolean boolean81 = localDateTime48.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime70);
        java.time.LocalDateTime localDateTime83 = localDateTime70.minusWeeks((long) '\000');
        java.time.temporal.Temporal temporal84 = localDateTime33.adjustInto((java.time.temporal.Temporal) localDateTime70);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertTrue("'" + chronoField12 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField12.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit13 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit13.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertTrue("'" + chronoField28 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField28.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit29 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit29.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(zonedDateTime44);
        org.junit.Assert.assertTrue("'" + chronoField46 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField46.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit47 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit47.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(zoneOffset53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(zoneOffset58);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(zonedDateTime60);
        org.junit.Assert.assertTrue("'" + chronoField62 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField62.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit63 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit63.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime65);
        org.junit.Assert.assertNotNull(zoneOffset69);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(zoneOffset74);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(zonedDateTime76);
        org.junit.Assert.assertTrue("'" + chronoField77 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField77.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(temporal84);
    }

    @Test
    public void test3394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3394");
        java.net.InetAddress inetAddress0 = java.net.InetAddress.getLocalHost();
        boolean boolean1 = inetAddress0.isMCSiteLocal();
        org.junit.Assert.assertNotNull(inetAddress0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test3395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3395");
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions0 = com.google.protobuf.DescriptorProtos.EnumValueOptions.getDefaultInstance();
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder1 = com.google.protobuf.DescriptorProtos.EnumValueOptions.newBuilder(enumValueOptions0);
        com.google.javascript.jscomp.CompilerOptions compilerOptions2 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions2.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat5 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions2.errorFormat = errorFormat5;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy7 = null;
        compilerOptions2.variableRenaming = variableRenamingPolicy7;
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode9 = compilerOptions2.getTracerMode();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder10 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder12 = builder10.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder13 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label14 = builder13.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder15 = builder10.addExtension(builder13);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder16 = builder10.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder17 = builder16.getOptionsBuilder();
        java.io.InputStream inputStream18 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions19 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream18);
        boolean boolean20 = enumOptions19.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder21 = builder17.mergeFrom(enumOptions19);
        byte[] byteArray22 = enumOptions19.toByteArray();
        compilerOptions2.setInputPropertyMapSerialized(byteArray22);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite24 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo sourceCodeInfo25 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.parseFrom(byteArray22, extensionRegistryLite24);
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder26 = builder1.mergeFrom(byteArray22);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder27 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder29 = builder27.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder30 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label31 = builder30.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder32 = builder27.addExtension(builder30);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder33 = builder27.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder34 = builder33.getOptionsBuilder();
        java.io.InputStream inputStream35 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions36 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream35);
        boolean boolean37 = enumOptions36.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder38 = builder34.mergeFrom(enumOptions36);
        com.google.protobuf.UnknownFieldSet unknownFieldSet39 = builder34.getUnknownFields();
        byte[] byteArray40 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite41 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions42 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray40, extensionRegistryLite41);
        com.google.protobuf.CodedOutputStream codedOutputStream45 = com.google.protobuf.CodedOutputStream.newInstance(byteArray40, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite46 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto47 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray40, extensionRegistryLite46);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite48 = null;
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto49 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.parseFrom(byteArray40, extensionRegistryLite48);
        com.google.protobuf.UnknownFieldSet unknownFieldSet50 = com.google.protobuf.UnknownFieldSet.parseFrom(byteArray40);
        com.google.protobuf.ByteString byteString51 = unknownFieldSet50.toByteString();
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite52 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder53 = builder34.mergeFrom(byteString51, extensionRegistryLite52);
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder54 = builder1.mergeFrom(byteString51);
        java.io.InputStream inputStream55 = null;
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto56 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.getDefaultInstance();
        boolean boolean57 = methodDescriptorProto56.hasOutputType();
        com.google.protobuf.CodedOutputStream codedOutputStream58 = null;
        methodDescriptorProto56.writeTo(codedOutputStream58);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder60 = methodDescriptorProto56.toBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder61 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder62 = builder61.clearCcGenericServices();
        boolean boolean63 = builder61.isInitialized();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder65 = builder61.setCcGenericServices(true);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder66 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label67 = builder66.getLabel();
        com.google.protobuf.ByteString byteString68 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder69 = builder66.mergeFrom(byteString68);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite70 = null;
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder71 = builder65.mergeFrom(byteString68, extensionRegistryLite70);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite72 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions73 = com.google.protobuf.DescriptorProtos.EnumValueOptions.parseFrom(byteString68, extensionRegistryLite72);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite74 = null;
        com.google.protobuf.DescriptorProtos.MessageOptions messageOptions75 = com.google.protobuf.DescriptorProtos.MessageOptions.parseFrom(byteString68, extensionRegistryLite74);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite76 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder77 = builder60.mergeFrom(byteString68, extensionRegistryLite76);
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder78 = builder54.mergeFrom(inputStream55, extensionRegistryLite76);
        org.junit.Assert.assertNotNull(enumValueOptions0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(errorFormat5);
        org.junit.Assert.assertTrue("'" + tracerMode9 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode9.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + label14 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label14.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(enumOptions19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(sourceCodeInfo25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + label31 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label31.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(enumOptions36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(unknownFieldSet39);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(methodOptions42);
        org.junit.Assert.assertNotNull(codedOutputStream45);
        org.junit.Assert.assertNotNull(fileDescriptorProto47);
        org.junit.Assert.assertNotNull(serviceDescriptorProto49);
        org.junit.Assert.assertNotNull(unknownFieldSet50);
        org.junit.Assert.assertNotNull(byteString51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(methodDescriptorProto56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertTrue("'" + label67 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label67.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(byteString68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(enumValueOptions73);
        org.junit.Assert.assertNotNull(messageOptions75);
        org.junit.Assert.assertNotNull(extensionRegistryLite76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder78);
    }

    @Test
    public void test3396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3396");
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel0 = com.google.javascript.jscomp.SourceMap.DetailLevel.ALL;
        com.google.javascript.rhino.Node node5 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean6 = node5.isStringKey();
        boolean boolean7 = node5.isThrow();
        boolean boolean8 = node5.isVarArgs();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean13 = node12.isFromExterns();
        com.google.javascript.rhino.Node node17 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean18 = node17.isFromExterns();
        java.lang.String str19 = node17.toString();
        com.google.javascript.rhino.Node node20 = node12.copyInformationFrom(node17);
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean25 = node24.isStringKey();
        boolean boolean26 = node24.isThrow();
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean31 = node30.isStringKey();
        com.google.javascript.rhino.Node node34 = new com.google.javascript.rhino.Node((-1), node5, node17, node24, node30, 16384, 16);
        boolean boolean35 = detailLevel0.apply(node17);
        org.junit.Assert.assertNotNull(detailLevel0);
        org.junit.Assert.assertNotNull(node5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "NUMBER 52.0 0" + "'", str19, "NUMBER 52.0 0");
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test3397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3397");
        java.nio.charset.CoderResult coderResult0 = java.nio.charset.CoderResult.OVERFLOW;
        boolean boolean1 = coderResult0.isOverflow();
        org.junit.Assert.assertNotNull(coderResult0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test3398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3398");
        com.google.protobuf.Descriptors.Descriptor descriptor0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto1 = descriptor0.toProto();
        boolean boolean2 = descriptorProto1.isInitialized();
        com.google.protobuf.DescriptorProtos.MessageOptions messageOptions3 = descriptorProto1.getOptions();
        com.google.protobuf.DescriptorProtos.MessageOptions.Builder builder4 = messageOptions3.newBuilderForType();
        com.google.protobuf.Message message5 = builder4.buildPartial();
        com.google.protobuf.DescriptorProtos.MessageOptions.Builder builder6 = builder4.clear();
        com.google.protobuf.DescriptorProtos.MessageOptions.Builder builder8 = builder6.setNoStandardDescriptorAccessor(true);
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj10 = builder6.getField(fieldDescriptor9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptor0);
        org.junit.Assert.assertNotNull(descriptorProto1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(messageOptions3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(message5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test3399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3399");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label1 = builder0.getLabel();
        java.io.InputStream inputStream2 = null;
        com.google.protobuf.MessageLite.Builder builder3 = builder0.mergeFrom(inputStream2);
        com.google.protobuf.UnknownFieldSet unknownFieldSet4 = null;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder5 = builder0.setUnknownFields(unknownFieldSet4);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder6 = builder5.clear();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder8 = builder5.setTypeName("");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder10 = builder5.setExtendee("/tmp/hi!6894515710367881997ISO");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + label1 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label1.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test3400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3400");
        com.google.javascript.jscomp.FunctionInformationMap.Module.Builder builder0 = com.google.javascript.jscomp.FunctionInformationMap.Module.newBuilder();
        com.google.javascript.jscomp.FunctionInformationMap.Module module1 = builder0.buildPartial();
        boolean boolean2 = module1.hasCompiledSource();
        com.google.javascript.jscomp.FunctionInformationMap.Module.Builder builder3 = module1.toBuilder();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(module1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test3401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3401");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode3 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry2.setResolveMode(resolveMode3);
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.jstype.ObjectType objectType8 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry7.createObjectType(objectType8);
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10, false);
        com.google.javascript.rhino.jstype.ObjectType objectType13 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType14 = jSTypeRegistry12.createObjectType(objectType13);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair15 = objectType9.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType14);
        java.lang.String str16 = objectType14.getDisplayName();
        objectType14.clearResolved();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean22 = node21.isStringKey();
        boolean boolean23 = node21.isThrow();
        boolean boolean24 = node21.isVarArgs();
        boolean boolean25 = node21.isHook();
        boolean boolean26 = node21.isAssign();
        boolean boolean27 = objectType14.equals((java.lang.Object) boolean26);
        boolean boolean28 = objectType14.isOrdinaryFunction();
        com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType> jSTypeStaticScope29 = objectType14.getParentScope();
        com.google.javascript.rhino.jstype.JSType jSType31 = objectType14.findPropertyType("NUMBER 52.0 0");
        com.google.javascript.rhino.ErrorReporter errorReporter32 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter32, false);
        com.google.javascript.rhino.ErrorReporter errorReporter35 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter35, false);
        com.google.javascript.rhino.jstype.ObjectType objectType38 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType39 = jSTypeRegistry37.createObjectType(objectType38);
        jSTypeRegistry37.identifyNonNullableName("/");
        boolean boolean43 = jSTypeRegistry37.isForwardDeclaredType("java.nio.ByteBufferAsDoubleBufferB[pos=0 lim=12 cap=12]");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray44 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.Node node45 = jSTypeRegistry37.createParametersWithVarArgs(jSTypeArray44);
        com.google.javascript.rhino.Node node46 = jSTypeRegistry34.createParameters(jSTypeArray44);
        com.google.javascript.rhino.jstype.FunctionType functionType47 = jSTypeRegistry2.createConstructorTypeWithVarArgs((com.google.javascript.rhino.jstype.JSType) objectType14, jSTypeArray44);
        org.junit.Assert.assertTrue("'" + resolveMode3 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode3.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertNotNull(objectType14);
        org.junit.Assert.assertNotNull(typePair15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(jSTypeStaticScope29);
        org.junit.Assert.assertNull(jSType31);
        org.junit.Assert.assertNotNull(objectType39);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(jSTypeArray44);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node46);
        org.junit.Assert.assertNotNull(functionType47);
    }

    @Test
    public void test3402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3402");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer3 = charBuffer1.put('a');
        char[] charArray5 = new char[] { '4' };
        java.nio.CharBuffer charBuffer6 = charBuffer3.get(charArray5);
        java.nio.CharBuffer charBuffer7 = charBuffer3.compact();
        java.util.stream.IntStream intStream8 = charBuffer7.chars();
        java.util.OptionalInt optionalInt9 = intStream8.findFirst();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Stream<java.lang.Integer> intStream10 = intStream8.boxed();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(charBuffer3);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(charBuffer7);
        org.junit.Assert.assertNotNull(intStream8);
        org.junit.Assert.assertNotNull(optionalInt9);
    }

    @Test
    public void test3403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3403");
        com.google.javascript.jscomp.ErrorFormat errorFormat0 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        java.io.PrintStream printStream1 = null;
        com.google.javascript.jscomp.Compiler compiler2 = new com.google.javascript.jscomp.Compiler(printStream1);
        com.google.javascript.jscomp.ErrorManager errorManager3 = compiler2.getErrorManager();
        com.google.javascript.jscomp.MessageFormatter messageFormatter5 = errorFormat0.toFormatter((com.google.javascript.jscomp.SourceExcerptProvider) compiler2, false);
        boolean boolean6 = compiler2.acceptEcmaScript5();
        com.google.javascript.jscomp.CodingConvention codingConvention7 = compiler2.getCodingConvention();
        org.junit.Assert.assertNotNull(errorFormat0);
        org.junit.Assert.assertNotNull(errorManager3);
        org.junit.Assert.assertNotNull(messageFormatter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(codingConvention7);
    }

    @Test
    public void test3404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3404");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean5 = node4.isStringKey();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(0, node4);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean11 = node10.isFromExterns();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean16 = node15.isFromExterns();
        java.lang.String str17 = node15.toString();
        com.google.javascript.rhino.Node node18 = node10.copyInformationFrom(node15);
        boolean boolean19 = node10.isGetProp();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean25 = node24.isStringKey();
        boolean boolean26 = node24.isThrow();
        boolean boolean27 = node24.isVarArgs();
        com.google.javascript.rhino.Node node31 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean32 = node31.isFromExterns();
        com.google.javascript.rhino.Node node36 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean37 = node36.isFromExterns();
        java.lang.String str38 = node36.toString();
        com.google.javascript.rhino.Node node39 = node31.copyInformationFrom(node36);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean44 = node43.isStringKey();
        boolean boolean45 = node43.isThrow();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean50 = node49.isStringKey();
        com.google.javascript.rhino.Node node53 = new com.google.javascript.rhino.Node((-1), node24, node36, node43, node49, 16384, 16);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile54 = node43.getStaticSourceFile();
        com.google.javascript.rhino.Node node55 = node43.getNext();
        com.google.javascript.rhino.Node node56 = node10.copyInformationFromForTree(node55);
        boolean boolean57 = node4.isEquivalentToTyped(node56);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "NUMBER 52.0 0" + "'", str17, "NUMBER 52.0 0");
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(node36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "NUMBER 52.0 0" + "'", str38, "NUMBER 52.0 0");
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(staticSourceFile54);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test3405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3405");
        // The following exception was thrown during execution in test generation
        try {
            java.time.DayOfWeek dayOfWeek1 = java.time.DayOfWeek.of(0);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for DayOfWeek: 0");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3406");
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto0 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.getDefaultInstance();
        boolean boolean1 = methodDescriptorProto0.hasOutputType();
        com.google.protobuf.CodedOutputStream codedOutputStream2 = null;
        methodDescriptorProto0.writeTo(codedOutputStream2);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder4 = methodDescriptorProto0.toBuilder();
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder6 = builder4.setOutputType("java.nio.HeapFloatBuffer[pos=0 lim=6 cap=6]");
        java.io.InputStream inputStream7 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite8 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions9 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(inputStream7, extensionRegistryLite8);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder10 = builder6.mergeOptions(methodOptions9);
        java.util.Map<com.google.protobuf.Descriptors.FieldDescriptor, java.lang.Object> fieldDescriptorMap11 = builder10.getAllFields();
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder12 = builder10.clearName();
        com.google.protobuf.ByteString.Output output14 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream16 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output14, (int) 'a');
        codedOutputStream16.writeSFixed64((int) 'a', (long) 10);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder21 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label22 = builder21.getLabel();
        com.google.protobuf.ByteString byteString23 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder24 = builder21.mergeFrom(byteString23);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite25 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location26 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(byteString23, extensionRegistryLite25);
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto27 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.parseFrom(byteString23);
        com.google.javascript.jscomp.CompilerOptions compilerOptions28 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions28.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat31 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions28.errorFormat = errorFormat31;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy33 = null;
        compilerOptions28.variableRenaming = variableRenamingPolicy33;
        compilerOptions28.setSummaryDetailLevel(999);
        boolean boolean37 = compilerOptions28.getInferTypes();
        boolean boolean38 = compilerOptions28.ideMode;
        compilerOptions28.setGroupVariableDeclarations(true);
        compilerOptions28.setCheckCaja(false);
        boolean boolean43 = byteString23.equals((java.lang.Object) compilerOptions28);
        codedOutputStream16.writeRawMessageSetExtension(16, byteString23);
        java.io.InputStream inputStream46 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions47 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(inputStream46);
        java.util.List<com.google.protobuf.DescriptorProtos.UninterpretedOption> uninterpretedOptionList48 = methodOptions47.getUninterpretedOptionList();
        codedOutputStream16.writeMessageSetExtension((int) '#', (com.google.protobuf.MessageLite) methodOptions47);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder50 = builder10.setOptions(methodOptions47);
        org.junit.Assert.assertNotNull(methodDescriptorProto0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(methodOptions9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(fieldDescriptorMap11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(output14);
        org.junit.Assert.assertNotNull(codedOutputStream16);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + label22 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label22.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(byteString23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(location26);
        org.junit.Assert.assertNotNull(serviceDescriptorProto27);
        org.junit.Assert.assertNotNull(errorFormat31);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(methodOptions47);
        org.junit.Assert.assertNotNull(uninterpretedOptionList48);
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test3407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3407");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(10);
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.setMutatesThis();
    }

    @Test
    public void test3408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3408");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type type0 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type.TYPE_BOOL;
        com.google.protobuf.Descriptors.EnumValueDescriptor enumValueDescriptor1 = type0.getValueDescriptor();
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto enumValueDescriptorProto2 = enumValueDescriptor1.toProto();
        boolean boolean3 = enumValueDescriptorProto2.isInitialized();
        int int4 = enumValueDescriptorProto2.getNumber();
        org.junit.Assert.assertTrue("'" + type0 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type.TYPE_BOOL + "'", type0.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type.TYPE_BOOL));
        org.junit.Assert.assertNotNull(enumValueDescriptor1);
        org.junit.Assert.assertNotNull(enumValueDescriptorProto2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 8 + "'", int4 == 8);
    }

    @Test
    public void test3409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3409");
        java.io.InputStream inputStream0 = null;
        java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite> priorityMap1 = new java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite>();
        java.lang.Object obj2 = priorityMap1.clone();
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.newBuilder();
        boolean boolean4 = priorityMap1.containsValue((java.lang.Object) builder3);
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder6 = builder3.setName("java.nio.ByteBufferAsDoubleBufferB[pos=0 lim=12 cap=12]");
        com.google.protobuf.ByteString byteString7 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder8 = builder3.mergeFrom(byteString7);
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions9 = com.google.protobuf.DescriptorProtos.EnumValueOptions.getDefaultInstance();
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder10 = com.google.protobuf.DescriptorProtos.EnumValueOptions.newBuilder(enumValueOptions9);
        java.io.InputStream inputStream11 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder12 = builder10.mergeFrom(inputStream11);
        com.google.protobuf.ByteString byteString13 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto14 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.parseFrom(byteString13);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite15 = null;
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto enumValueDescriptorProto16 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.parseFrom(byteString13, extensionRegistryLite15);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite17 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions18 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteString13, extensionRegistryLite17);
        java.io.InputStream inputStream19 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite20 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location21 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream19, extensionRegistryLite20);
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder22 = builder12.mergeFrom(byteString13, extensionRegistryLite20);
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto23 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.parseFrom(byteString7, extensionRegistryLite20);
        com.google.javascript.jscomp.FunctionInformationMap functionInformationMap24 = com.google.javascript.jscomp.FunctionInformationMap.parseFrom(inputStream0, extensionRegistryLite20);
        int int25 = functionInformationMap24.getModuleCount();
        com.google.javascript.jscomp.FunctionInformationMap.Builder builder26 = functionInformationMap24.toBuilder();
        java.io.InputStream inputStream27 = null;
        com.google.javascript.jscomp.FunctionInformationMap.Builder builder28 = builder26.mergeFrom(inputStream27);
        com.google.protobuf.UnknownFieldSet unknownFieldSet29 = builder28.getUnknownFields();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.FunctionInformationMap.Module module31 = builder28.getModule(55);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 55");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "{}");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(byteString7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(enumValueOptions9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(byteString13);
        org.junit.Assert.assertNotNull(methodDescriptorProto14);
        org.junit.Assert.assertNotNull(enumValueDescriptorProto16);
        org.junit.Assert.assertNotNull(methodOptions18);
        org.junit.Assert.assertNotNull(extensionRegistryLite20);
        org.junit.Assert.assertNotNull(location21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(serviceDescriptorProto23);
        org.junit.Assert.assertNotNull(functionInformationMap24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(unknownFieldSet29);
    }

    @Test
    public void test3410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3410");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean4 = node3.isTry();
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        int int10 = localDateTime9.getYear();
        java.time.LocalDate localDate11 = localDateTime9.toLocalDate();
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZoneOffset zoneOffset20 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset20);
        java.time.ZonedDateTime zonedDateTime22 = java.time.ZonedDateTime.of(localDateTime16, (java.time.ZoneId) zoneOffset20);
        java.time.temporal.ChronoField chronoField24 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit25 = chronoField24.getBaseUnit();
        java.time.LocalDateTime localDateTime26 = localDateTime16.plus((long) 1970, temporalUnit25);
        java.time.LocalTime localTime27 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localDateTime26);
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime32 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset31);
        java.time.OffsetDateTime offsetDateTime33 = java.time.OffsetDateTime.of(localDate11, localTime27, zoneOffset31);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean38 = node37.isFromExterns();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean43 = node42.isFromExterns();
        java.lang.String str44 = node42.toString();
        com.google.javascript.rhino.Node node45 = node37.copyInformationFrom(node42);
        boolean boolean46 = zoneOffset31.equals((java.lang.Object) node42);
        boolean boolean47 = node42.isVar();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean53 = node52.isStringKey();
        boolean boolean54 = node52.isThrow();
        boolean boolean55 = node52.isVarArgs();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean60 = node59.isFromExterns();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean65 = node64.isFromExterns();
        java.lang.String str66 = node64.toString();
        com.google.javascript.rhino.Node node67 = node59.copyInformationFrom(node64);
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean72 = node71.isStringKey();
        boolean boolean73 = node71.isThrow();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean78 = node77.isStringKey();
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node((-1), node52, node64, node71, node77, 16384, 16);
        com.google.javascript.rhino.Node node85 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean86 = node85.isStringKey();
        boolean boolean87 = node85.isThrow();
        boolean boolean88 = node85.isVarArgs();
        boolean boolean89 = node85.isHook();
        boolean boolean90 = node85.isAssign();
        boolean boolean91 = node85.isVar();
        com.google.javascript.jscomp.CodingConvention.Bind bind92 = new com.google.javascript.jscomp.CodingConvention.Bind(node42, node77, node85);
        boolean boolean93 = node42.isVar();
        com.google.javascript.rhino.Node node94 = node3.clonePropsFrom(node42);
        node94.setDouble((double) 8);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zoneOffset20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zonedDateTime22);
        org.junit.Assert.assertTrue("'" + chronoField24 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField24.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit25 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit25.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(offsetDateTime33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "NUMBER 52.0 0" + "'", str44, "NUMBER 52.0 0");
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "NUMBER 52.0 0" + "'", str66, "NUMBER 52.0 0");
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(node94);
    }

    @Test
    public void test3411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3411");
        com.google.javascript.rhino.Node.SideEffectFlags sideEffectFlags1 = new com.google.javascript.rhino.Node.SideEffectFlags(10);
        sideEffectFlags1.setMutatesThis();
        sideEffectFlags1.setMutatesGlobalState();
    }

    @Test
    public void test3412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3412");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label4 = builder3.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = builder0.addExtension(builder3);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder6 = builder3.clone();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + label4 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label4.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test3413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3413");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.of(localDateTime4, (java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime10.withHour(16);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime13 = zonedDateTime12.toLocalDateTime();
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset17);
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset22);
        java.time.ZonedDateTime zonedDateTime24 = java.time.ZonedDateTime.of(localDateTime18, (java.time.ZoneId) zoneOffset22);
        java.time.ZonedDateTime zonedDateTime26 = zonedDateTime24.withYear((int) (short) 1);
        java.time.temporal.ChronoField chronoField27 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit28 = chronoField27.getBaseUnit();
        java.time.ZonedDateTime zonedDateTime29 = zonedDateTime24.truncatedTo(temporalUnit28);
        java.time.Duration duration30 = temporalUnit28.getDuration();
        long long31 = duration30.toDays();
        java.time.Duration duration32 = duration30.abs();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime33 = localDateChronoLocalDateTime13.minus((java.time.temporal.TemporalAmount) duration32);
        java.time.Duration duration35 = duration32.plusDays(16L);
        java.time.ZoneOffset zoneOffset39 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime40 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset39);
        java.time.ZoneOffset zoneOffset44 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime45 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset44);
        java.time.ZonedDateTime zonedDateTime46 = java.time.ZonedDateTime.of(localDateTime40, (java.time.ZoneId) zoneOffset44);
        java.time.ZonedDateTime zonedDateTime48 = zonedDateTime46.withYear((int) (short) 1);
        java.time.temporal.ChronoField chronoField49 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit50 = chronoField49.getBaseUnit();
        java.time.ZonedDateTime zonedDateTime51 = zonedDateTime46.truncatedTo(temporalUnit50);
        java.time.Duration duration52 = temporalUnit50.getDuration();
        long long53 = duration52.toDays();
        java.time.Duration duration55 = duration52.minusDays(999L);
        boolean boolean56 = duration52.isZero();
        long long57 = duration52.toMillis();
        java.time.Duration duration59 = duration52.minusNanos((long) 7);
        java.time.Duration duration60 = duration32.plus(duration59);
        long long61 = duration59.toDays();
        java.time.Duration duration63 = duration59.plusMinutes((long) 1970);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime13);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zonedDateTime24);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertTrue("'" + chronoField27 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField27.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit28 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit28.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(zonedDateTime29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(zoneOffset39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(zoneOffset44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(zonedDateTime46);
        org.junit.Assert.assertNotNull(zonedDateTime48);
        org.junit.Assert.assertTrue("'" + chronoField49 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField49.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit50 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit50.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(zonedDateTime51);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 3600000L + "'", long57 == 3600000L);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(duration63);
    }

    @Test
    public void test3414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3414");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType4 = jSTypeRegistry2.createObjectType(objectType3);
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.jstype.ObjectType objectType8 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry7.createObjectType(objectType8);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair10 = objectType4.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType9);
        java.lang.String str11 = objectType9.getDisplayName();
        com.google.javascript.rhino.ErrorReporter errorReporter12 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter12, false);
        com.google.javascript.rhino.jstype.ObjectType objectType15 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType16 = jSTypeRegistry14.createObjectType(objectType15);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        com.google.javascript.rhino.jstype.ObjectType objectType20 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType21 = jSTypeRegistry19.createObjectType(objectType20);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair22 = objectType16.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType21);
        boolean boolean23 = objectType21.isTemplateType();
        com.google.javascript.rhino.jstype.JSType jSType24 = objectType9.getLeastSupertype((com.google.javascript.rhino.jstype.JSType) objectType21);
        com.google.javascript.rhino.jstype.ObjectType objectType26 = com.google.javascript.rhino.jstype.FunctionType.getTopDefiningInterface(objectType21, "1969-12-31T23:59:58.999Z");
        org.junit.Assert.assertNotNull(objectType4);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertNotNull(typePair10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(objectType16);
        org.junit.Assert.assertNotNull(objectType21);
        org.junit.Assert.assertNotNull(typePair22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertNull(objectType26);
    }

    @Test
    public void test3415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3415");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet5 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet5, strArray4);
        boolean boolean7 = strSet5.isEmpty();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocate(100);
        boolean boolean10 = strSet5.equals((java.lang.Object) byteBuffer9);
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        boolean boolean17 = strSet15.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream18 = strSet15.stream();
        boolean boolean19 = strSet5.retainAll((java.util.Collection<java.lang.String>) strSet15);
        compilerOptions0.setExtraAnnotationNames((java.util.Set<java.lang.String>) strSet15);
        compilerOptions0.setNameAnonymousFunctionsOnly(true);
        compilerOptions0.coalesceVariableNames = true;
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strStream18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test3416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3416");
        com.google.protobuf.Descriptors.Descriptor descriptor0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto1 = descriptor0.toProto();
        boolean boolean2 = descriptorProto1.isInitialized();
        com.google.protobuf.DescriptorProtos.MessageOptions messageOptions3 = descriptorProto1.getOptions();
        com.google.protobuf.DescriptorProtos.MessageOptions.Builder builder4 = messageOptions3.newBuilderForType();
        com.google.protobuf.Message message5 = builder4.buildPartial();
        com.google.protobuf.DescriptorProtos.MessageOptions.Builder builder6 = builder4.clear();
        java.io.InputStream inputStream7 = null;
        com.google.protobuf.DescriptorProtos.MessageOptions.Builder builder8 = builder6.mergeFrom(inputStream7);
        boolean boolean9 = builder6.isInitialized();
        org.junit.Assert.assertNotNull(descriptor0);
        org.junit.Assert.assertNotNull(descriptorProto1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(messageOptions3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(message5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test3417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3417");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasThisType();
        java.lang.String str2 = jSDocInfo0.toString();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.isImplicitCast();
        java.util.Collection<com.google.javascript.rhino.JSDocInfo.Marker> markerCollection5 = jSDocInfo0.getMarkers();
        boolean boolean6 = jSDocInfo0.isInterface();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "JSDocInfo" + "'", str2, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(markerCollection5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test3418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3418");
        java.util.LongSummaryStatistics longSummaryStatistics0 = new java.util.LongSummaryStatistics();
        longSummaryStatistics0.accept(5);
        org.junit.Assert.assertEquals(longSummaryStatistics0.toString(), "LongSummaryStatistics{count=1, sum=5, min=5, average=5.000000, max=5}");
    }

    @Test
    public void test3419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3419");
        java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite> priorityMap0 = new java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite>();
        java.lang.Object obj1 = priorityMap0.clone();
        java.util.Set<java.util.Map.Entry<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite>> priorityEntrySet2 = priorityMap0.entrySet();
        com.google.javascript.jscomp.WarningsGuard.Priority priority3 = com.google.javascript.jscomp.WarningsGuard.Priority.SUPPRESS_BY_WHITELIST;
        java.io.InputStream inputStream4 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite5 = null;
        com.google.javascript.jscomp.FunctionInformationMap functionInformationMap6 = com.google.javascript.jscomp.FunctionInformationMap.parseFrom(inputStream4, extensionRegistryLite5);
        com.google.javascript.jscomp.FunctionInformationMap functionInformationMap7 = functionInformationMap6.getDefaultInstanceForType();
        com.google.protobuf.MessageLite messageLite8 = priorityMap0.put(priority3, (com.google.protobuf.MessageLite) functionInformationMap6);
        int int9 = priority3.getValue();
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "{}");
        org.junit.Assert.assertNotNull(priorityEntrySet2);
        org.junit.Assert.assertTrue("'" + priority3 + "' != '" + com.google.javascript.jscomp.WarningsGuard.Priority.SUPPRESS_BY_WHITELIST + "'", priority3.equals(com.google.javascript.jscomp.WarningsGuard.Priority.SUPPRESS_BY_WHITELIST));
        org.junit.Assert.assertNotNull(functionInformationMap6);
        org.junit.Assert.assertNotNull(functionInformationMap7);
        org.junit.Assert.assertNull(messageLite8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 40 + "'", int9 == 40);
    }

    @Test
    public void test3420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3420");
        int int0 = com.google.protobuf.DescriptorProtos.MessageOptions.NO_STANDARD_DESCRIPTOR_ACCESSOR_FIELD_NUMBER;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 2 + "'", int0 == 2);
    }

    @Test
    public void test3421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3421");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy5 = null;
        compilerOptions0.variableRenaming = variableRenamingPolicy5;
        compilerOptions0.setSummaryDetailLevel(999);
        boolean boolean9 = compilerOptions0.getInferTypes();
        boolean boolean10 = compilerOptions0.ideMode;
        compilerOptions0.setGroupVariableDeclarations(true);
        java.util.Set<java.lang.String> strSet13 = java.time.ZoneId.getAvailableZoneIds();
        compilerOptions0.stripNamePrefixes = strSet13;
        boolean boolean15 = compilerOptions0.computeFunctionSideEffects;
        java.lang.String str16 = compilerOptions0.inputDelimiter;
        org.junit.Assert.assertNotNull(errorFormat3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "// Input %num%" + "'", str16, "// Input %num%");
    }

    @Test
    public void test3422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3422");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.time.LocalTime localTime2 = java.time.LocalTime.ofSecondOfDay((long) 8);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime8 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset7);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime13 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset12);
        java.time.ZonedDateTime zonedDateTime14 = java.time.ZonedDateTime.of(localDateTime8, (java.time.ZoneId) zoneOffset12);
        java.time.ZonedDateTime zonedDateTime16 = zonedDateTime14.minusSeconds((long) '#');
        java.time.ZonedDateTime zonedDateTime18 = zonedDateTime14.minusYears((long) ' ');
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset22);
        java.time.ZoneOffset zoneOffset27 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset27);
        java.time.ZonedDateTime zonedDateTime29 = java.time.ZonedDateTime.of(localDateTime23, (java.time.ZoneId) zoneOffset27);
        java.time.ZonedDateTime zonedDateTime31 = zonedDateTime29.minusSeconds((long) '#');
        java.time.temporal.ChronoField chronoField32 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit33 = chronoField32.getBaseUnit();
        boolean boolean34 = zonedDateTime31.isSupported(temporalUnit33);
        java.time.ZoneOffset zoneOffset38 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime39 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset38);
        int int40 = localDateTime39.getYear();
        java.time.Instant instant41 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset45 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime46 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset45);
        java.time.OffsetDateTime offsetDateTime47 = java.time.OffsetDateTime.ofInstant(instant41, (java.time.ZoneId) zoneOffset45);
        java.time.Instant instant48 = localDateTime39.toInstant(zoneOffset45);
        java.time.ZoneOffset zoneOffset53 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime54 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset53);
        java.time.ZoneOffset zoneOffset58 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime59 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset58);
        java.time.ZonedDateTime zonedDateTime60 = java.time.ZonedDateTime.of(localDateTime54, (java.time.ZoneId) zoneOffset58);
        java.time.temporal.ChronoField chronoField62 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit63 = chronoField62.getBaseUnit();
        java.time.LocalDateTime localDateTime64 = localDateTime54.plus((long) 1970, temporalUnit63);
        java.time.ZoneOffset zoneOffset69 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime70 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset69);
        java.time.ZoneOffset zoneOffset74 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime75 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset74);
        java.time.ZonedDateTime zonedDateTime76 = java.time.ZonedDateTime.of(localDateTime70, (java.time.ZoneId) zoneOffset74);
        java.time.temporal.ChronoField chronoField78 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit79 = chronoField78.getBaseUnit();
        java.time.LocalDateTime localDateTime80 = localDateTime70.plus((long) 1970, temporalUnit79);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime81 = localDateTime64.minus((long) 43, temporalUnit79);
        java.time.Instant instant82 = instant48.plus((long) 16384, temporalUnit79);
        java.time.Instant instant84 = temporalUnit33.addTo(instant48, (long) (-1));
        boolean boolean85 = zonedDateTime14.isSupported(temporalUnit33);
        java.time.LocalTime localTime86 = localTime2.minus((long) 31, temporalUnit33);
        java.time.chrono.ChronoLocalDateTime<?> wildcardChronoLocalDateTime87 = localDate0.atTime(localTime2);
        com.google.protobuf.DescriptorProtos.UninterpretedOption.NamePart namePart88 = com.google.protobuf.DescriptorProtos.UninterpretedOption.NamePart.getDefaultInstance();
        boolean boolean89 = namePart88.hasNamePart();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.NamePart.Builder builder90 = namePart88.newBuilderForType();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.NamePart.Builder builder92 = builder90.setIsExtension(true);
        boolean boolean93 = localDate0.equals((java.lang.Object) true);
        java.time.Month month94 = java.time.Month.from((java.time.temporal.TemporalAccessor) localDate0);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(zonedDateTime14);
        org.junit.Assert.assertNotNull(zonedDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime18);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zoneOffset27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zonedDateTime29);
        org.junit.Assert.assertNotNull(zonedDateTime31);
        org.junit.Assert.assertTrue("'" + chronoField32 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField32.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit33 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit33.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(zoneOffset38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1970 + "'", int40 == 1970);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(zoneOffset45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(offsetDateTime47);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(zoneOffset53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(zoneOffset58);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(zonedDateTime60);
        org.junit.Assert.assertTrue("'" + chronoField62 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField62.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit63 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit63.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(zoneOffset69);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(zoneOffset74);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(zonedDateTime76);
        org.junit.Assert.assertTrue("'" + chronoField78 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField78.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit79 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit79.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime81);
        org.junit.Assert.assertNotNull(instant82);
        org.junit.Assert.assertNotNull(instant84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(localTime86);
        org.junit.Assert.assertNotNull(wildcardChronoLocalDateTime87);
        org.junit.Assert.assertNotNull(namePart88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + month94 + "' != '" + java.time.Month.FEBRUARY + "'", month94.equals(java.time.Month.FEBRUARY));
    }

    @Test
    public void test3423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3423");
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output2 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream4 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output2, (int) 'a');
        byte[] byteArray5 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite6 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions7 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray5, extensionRegistryLite6);
        output2.write(byteArray5);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder9 = builder0.mergeFrom(byteArray5);
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions10 = builder0.buildPartial();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder11 = builder0.addUninterpretedOptionBuilder();
        boolean boolean12 = builder11.hasNegativeIntValue();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder13 = builder11.clearStringValue();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder15 = builder13.setDoubleValue(0.0d);
        long long16 = builder13.getPositiveIntValue();
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.UninterpretedOption.NamePart namePart18 = builder13.getName(16);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 16");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(output2);
        org.junit.Assert.assertNotNull(codedOutputStream4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(methodOptions7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(methodOptions10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test3424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3424");
        java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite> priorityMap0 = new java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite>();
        java.lang.Object obj1 = priorityMap0.clone();
        boolean boolean2 = priorityMap0.isEmpty();
        java.lang.String str3 = priorityMap0.toString();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder4 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder5 = builder4.clearCcGenericServices();
        boolean boolean6 = builder4.isInitialized();
        com.google.protobuf.MessageLite messageLite7 = priorityMap0.get((java.lang.Object) builder4);
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder9 = builder4.setPyGenericServices(false);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder10 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label11 = builder10.getLabel();
        com.google.protobuf.ByteString byteString12 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder13 = builder10.mergeFrom(byteString12);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite14 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location15 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(byteString12, extensionRegistryLite14);
        com.google.protobuf.MessageLite.Builder builder16 = builder4.mergeFrom(byteString12);
        boolean boolean17 = builder4.isInitialized();
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "{}" + "'", str3, "{}");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(messageLite7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + label11 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label11.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(byteString12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(location15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test3425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3425");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type type0 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type.TYPE_STRING;
        com.google.protobuf.Descriptors.EnumValueDescriptor enumValueDescriptor1 = type0.getValueDescriptor();
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto enumValueDescriptorProto2 = enumValueDescriptor1.toProto();
        java.lang.String str3 = enumValueDescriptorProto2.getName();
        org.junit.Assert.assertTrue("'" + type0 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type.TYPE_STRING + "'", type0.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type.TYPE_STRING));
        org.junit.Assert.assertNotNull(enumValueDescriptor1);
        org.junit.Assert.assertNotNull(enumValueDescriptorProto2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "TYPE_STRING" + "'", str3, "TYPE_STRING");
    }

    @Test
    public void test3426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3426");
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto0 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.getDefaultInstance();
        boolean boolean1 = serviceDescriptorProto0.hasOptions();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder2 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.newBuilder(serviceDescriptorProto0);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = builder3.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder6 = builder5.clearSourceCodeInfo();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder7 = builder5.getSourceCodeInfoBuilder();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo sourceCodeInfo8 = builder7.getDefaultInstanceForType();
        int int9 = sourceCodeInfo8.getSerializedSize();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo sourceCodeInfo10 = sourceCodeInfo8.getDefaultInstanceForType();
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder11 = builder2.mergeFrom((com.google.protobuf.Message) sourceCodeInfo8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: mergeFrom(Message) can only merge messages of the same type.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serviceDescriptorProto0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(sourceCodeInfo8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(sourceCodeInfo10);
    }

    @Test
    public void test3427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3427");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL1 = new java.net.URL("/tmp/hi!117357409022682367ISO");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: no protocol: /tmp/hi!117357409022682367ISO");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test3428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3428");
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.of((long) (-1));
        java.util.stream.LongStream longStream2 = longStream1.distinct();
        java.util.stream.DoubleStream doubleStream3 = longStream2.asDoubleStream();
        boolean boolean4 = doubleStream3.isParallel();
        java.util.stream.DoubleStream doubleStream5 = doubleStream3.unordered();
        java.util.stream.DoubleStream doubleStream6 = doubleStream5.sequential();
        java.util.stream.DoubleStream doubleStream7 = doubleStream6.parallel();
        doubleStream7.close();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream9 = doubleStream7.sorted();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(doubleStream3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(doubleStream5);
        org.junit.Assert.assertNotNull(doubleStream6);
        org.junit.Assert.assertNotNull(doubleStream7);
    }

    @Test
    public void test3429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3429");
        java.net.InetAddress inetAddress0 = java.net.InetAddress.getLocalHost();
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder1 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output3 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream5 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output3, (int) 'a');
        byte[] byteArray6 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite7 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions8 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray6, extensionRegistryLite7);
        output3.write(byteArray6);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder10 = builder1.mergeFrom(byteArray6);
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions11 = builder1.buildPartial();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder12 = builder1.addUninterpretedOptionBuilder();
        boolean boolean13 = builder12.hasNegativeIntValue();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder15 = builder12.setNegativeIntValue((long) 55);
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder17 = builder12.setIdentifierValue("MethodDescriptorProto");
        boolean boolean18 = inetAddress0.equals((java.lang.Object) builder12);
        byte[] byteArray19 = inetAddress0.getAddress();
        org.junit.Assert.assertNotNull(inetAddress0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(output3);
        org.junit.Assert.assertNotNull(codedOutputStream5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(methodOptions8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(methodOptions11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-84, 17, 0, 2]");
    }

    @Test
    public void test3430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3430");
        java.net.URISyntaxException uRISyntaxException3 = new java.net.URISyntaxException("MethodDescriptorProto", "goog.global", 15);
        java.util.Optional<java.net.URISyntaxException> uRISyntaxExceptionOptional4 = java.util.Optional.of(uRISyntaxException3);
        boolean boolean5 = uRISyntaxExceptionOptional4.isPresent();
        boolean boolean6 = uRISyntaxExceptionOptional4.isPresent();
        org.junit.Assert.assertNotNull(uRISyntaxExceptionOptional4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test3431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3431");
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.of((long) (-1));
        java.util.stream.LongStream longStream2 = longStream1.distinct();
        // The following exception was thrown during execution in test generation
        try {
            long long3 = longStream1.count();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
    }

    @Test
    public void test3432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3432");
        java.io.InputStream inputStream0 = null;
        java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite> priorityMap1 = new java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite>();
        java.lang.Object obj2 = priorityMap1.clone();
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.newBuilder();
        boolean boolean4 = priorityMap1.containsValue((java.lang.Object) builder3);
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder6 = builder3.setName("java.nio.ByteBufferAsDoubleBufferB[pos=0 lim=12 cap=12]");
        com.google.protobuf.ByteString byteString7 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder8 = builder3.mergeFrom(byteString7);
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions9 = com.google.protobuf.DescriptorProtos.EnumValueOptions.getDefaultInstance();
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder10 = com.google.protobuf.DescriptorProtos.EnumValueOptions.newBuilder(enumValueOptions9);
        java.io.InputStream inputStream11 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder12 = builder10.mergeFrom(inputStream11);
        com.google.protobuf.ByteString byteString13 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto14 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.parseFrom(byteString13);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite15 = null;
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto enumValueDescriptorProto16 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.parseFrom(byteString13, extensionRegistryLite15);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite17 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions18 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteString13, extensionRegistryLite17);
        java.io.InputStream inputStream19 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite20 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location21 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream19, extensionRegistryLite20);
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder22 = builder12.mergeFrom(byteString13, extensionRegistryLite20);
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto23 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.parseFrom(byteString7, extensionRegistryLite20);
        com.google.javascript.jscomp.FunctionInformationMap functionInformationMap24 = com.google.javascript.jscomp.FunctionInformationMap.parseFrom(inputStream0, extensionRegistryLite20);
        int int25 = functionInformationMap24.getModuleCount();
        com.google.javascript.jscomp.FunctionInformationMap.Builder builder26 = functionInformationMap24.toBuilder();
        java.io.InputStream inputStream27 = null;
        com.google.javascript.jscomp.FunctionInformationMap.Builder builder28 = builder26.mergeFrom(inputStream27);
        int int29 = builder26.getModuleCount();
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "{}");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(byteString7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(enumValueOptions9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(byteString13);
        org.junit.Assert.assertNotNull(methodDescriptorProto14);
        org.junit.Assert.assertNotNull(enumValueDescriptorProto16);
        org.junit.Assert.assertNotNull(methodOptions18);
        org.junit.Assert.assertNotNull(extensionRegistryLite20);
        org.junit.Assert.assertNotNull(location21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(serviceDescriptorProto23);
        org.junit.Assert.assertNotNull(functionInformationMap24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test3433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3433");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        com.google.javascript.rhino.jstype.ObjectType objectType6 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType7 = jSTypeRegistry5.createObjectType(objectType6);
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.jstype.ObjectType objectType11 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType12 = jSTypeRegistry10.createObjectType(objectType11);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair13 = objectType7.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType12);
        java.lang.String str14 = objectType12.getDisplayName();
        java.util.Collection<com.google.javascript.rhino.jstype.FunctionType> functionTypeCollection15 = jSTypeRegistry2.getDirectImplementors(objectType12);
        java.lang.String str16 = objectType12.toDebugHashCodeString();
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        com.google.javascript.rhino.jstype.ObjectType objectType20 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType21 = jSTypeRegistry19.createObjectType(objectType20);
        com.google.javascript.rhino.ErrorReporter errorReporter22 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry24 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter22, false);
        com.google.javascript.rhino.jstype.ObjectType objectType25 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType26 = jSTypeRegistry24.createObjectType(objectType25);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair27 = objectType21.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType26);
        com.google.javascript.rhino.ErrorReporter errorReporter29 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter29, false);
        com.google.javascript.rhino.jstype.ObjectType objectType32 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType33 = jSTypeRegistry31.createObjectType(objectType32);
        com.google.javascript.rhino.ErrorReporter errorReporter34 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry36 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter34, false);
        com.google.javascript.rhino.jstype.ObjectType objectType37 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType38 = jSTypeRegistry36.createObjectType(objectType37);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair39 = objectType33.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType38);
        com.google.javascript.rhino.Node node40 = objectType33.getRootNode();
        com.google.javascript.rhino.jstype.EnumType enumType41 = objectType33.toMaybeEnumType();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean46 = node45.isStringKey();
        boolean boolean47 = node45.isThrow();
        boolean boolean48 = node45.isVarArgs();
        boolean boolean49 = node45.isStringKey();
        boolean boolean50 = objectType26.defineInferredProperty("Unknown class name", (com.google.javascript.rhino.jstype.JSType) objectType33, node45);
        com.google.javascript.rhino.ErrorReporter errorReporter51 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry53 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter51, false);
        com.google.javascript.rhino.jstype.ObjectType objectType54 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType55 = jSTypeRegistry53.createObjectType(objectType54);
        com.google.javascript.rhino.ErrorReporter errorReporter56 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry58 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter56, false);
        com.google.javascript.rhino.jstype.ObjectType objectType59 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType60 = jSTypeRegistry58.createObjectType(objectType59);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair61 = objectType55.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType60);
        com.google.javascript.rhino.ErrorReporter errorReporter63 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry65 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter63, false);
        com.google.javascript.rhino.jstype.ObjectType objectType66 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType67 = jSTypeRegistry65.createObjectType(objectType66);
        com.google.javascript.rhino.ErrorReporter errorReporter68 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry70 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter68, false);
        com.google.javascript.rhino.jstype.ObjectType objectType71 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType72 = jSTypeRegistry70.createObjectType(objectType71);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair73 = objectType67.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType72);
        com.google.javascript.rhino.Node node74 = objectType67.getRootNode();
        com.google.javascript.rhino.jstype.EnumType enumType75 = objectType67.toMaybeEnumType();
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean80 = node79.isStringKey();
        boolean boolean81 = node79.isThrow();
        boolean boolean82 = node79.isVarArgs();
        boolean boolean83 = node79.isStringKey();
        boolean boolean84 = objectType60.defineInferredProperty("Unknown class name", (com.google.javascript.rhino.jstype.JSType) objectType67, node79);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair85 = objectType33.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType60);
        com.google.javascript.rhino.jstype.JSType jSType86 = objectType12.getLeastSupertype((com.google.javascript.rhino.jstype.JSType) objectType60);
        boolean boolean87 = objectType60.isNumber();
        org.junit.Assert.assertNotNull(objectType7);
        org.junit.Assert.assertNotNull(objectType12);
        org.junit.Assert.assertNotNull(typePair13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(functionTypeCollection15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "{1248524068}" + "'", str16, "{1248524068}");
        org.junit.Assert.assertNotNull(objectType21);
        org.junit.Assert.assertNotNull(objectType26);
        org.junit.Assert.assertNotNull(typePair27);
        org.junit.Assert.assertNotNull(objectType33);
        org.junit.Assert.assertNotNull(objectType38);
        org.junit.Assert.assertNotNull(typePair39);
        org.junit.Assert.assertNull(node40);
        org.junit.Assert.assertNull(enumType41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(objectType55);
        org.junit.Assert.assertNotNull(objectType60);
        org.junit.Assert.assertNotNull(typePair61);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertNotNull(objectType72);
        org.junit.Assert.assertNotNull(typePair73);
        org.junit.Assert.assertNull(node74);
        org.junit.Assert.assertNull(enumType75);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(typePair85);
        org.junit.Assert.assertNotNull(jSType86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test3434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3434");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset10);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.of(localDateTime11, (java.time.ZoneId) zoneOffset15);
        java.time.Clock clock18 = java.time.Clock.fixed(instant0, (java.time.ZoneId) zoneOffset15);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.now(clock18);
        java.time.LocalDate localDate20 = java.time.LocalDate.now(clock18);
        com.google.protobuf.Descriptors.Descriptor descriptor21 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto22 = descriptor21.toProto();
        boolean boolean23 = descriptorProto22.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList24 = descriptorProto22.getNestedTypeList();
        int int25 = descriptorProto22.getExtensionRangeCount();
        boolean boolean26 = localDate20.equals((java.lang.Object) descriptorProto22);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder27 = descriptorProto22.newBuilderForType();
        java.util.List<com.google.protobuf.DescriptorProtos.FieldDescriptorProto> fieldDescriptorProtoList28 = builder27.getExtensionList();
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder29 = builder27.addNestedTypeBuilder();
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder30 = builder27.clearExtension();
        java.time.Instant instant32 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset36 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime37 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset36);
        java.time.OffsetDateTime offsetDateTime38 = java.time.OffsetDateTime.ofInstant(instant32, (java.time.ZoneId) zoneOffset36);
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime43 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset42);
        java.time.ZoneOffset zoneOffset47 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime48 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset47);
        java.time.ZonedDateTime zonedDateTime49 = java.time.ZonedDateTime.of(localDateTime43, (java.time.ZoneId) zoneOffset47);
        java.time.Clock clock50 = java.time.Clock.fixed(instant32, (java.time.ZoneId) zoneOffset47);
        java.time.LocalDateTime localDateTime51 = java.time.LocalDateTime.now(clock50);
        java.time.LocalDate localDate52 = java.time.LocalDate.now(clock50);
        com.google.protobuf.Descriptors.Descriptor descriptor53 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto54 = descriptor53.toProto();
        boolean boolean55 = descriptorProto54.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList56 = descriptorProto54.getNestedTypeList();
        int int57 = descriptorProto54.getExtensionRangeCount();
        boolean boolean58 = localDate52.equals((java.lang.Object) descriptorProto54);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder59 = descriptorProto54.newBuilderForType();
        java.util.List<com.google.protobuf.DescriptorProtos.FieldDescriptorProto> fieldDescriptorProtoList60 = builder59.getExtensionList();
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.Builder builder61 = com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.newBuilder();
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder62 = builder59.addExtensionRange(builder61);
        com.google.protobuf.Descriptors.Descriptor descriptor63 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto64 = descriptor63.toProto();
        boolean boolean65 = descriptorProto64.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList66 = descriptorProto64.getNestedTypeList();
        int int67 = descriptorProto64.getExtensionCount();
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder68 = builder62.mergeFrom(descriptorProto64);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder69 = builder30.addNestedType(21, builder62);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 21, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(clock18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(descriptor21);
        org.junit.Assert.assertNotNull(descriptorProto22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(fieldDescriptorProtoList28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(zoneOffset36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(offsetDateTime38);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(zoneOffset47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(zonedDateTime49);
        org.junit.Assert.assertNotNull(clock50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(descriptor53);
        org.junit.Assert.assertNotNull(descriptorProto54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(fieldDescriptorProtoList60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(descriptor63);
        org.junit.Assert.assertNotNull(descriptorProto64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(builder68);
    }

    @Test
    public void test3435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3435");
        com.google.protobuf.Descriptors.FieldDescriptor.Type type0 = com.google.protobuf.Descriptors.FieldDescriptor.Type.UINT64;
        org.junit.Assert.assertTrue("'" + type0 + "' != '" + com.google.protobuf.Descriptors.FieldDescriptor.Type.UINT64 + "'", type0.equals(com.google.protobuf.Descriptors.FieldDescriptor.Type.UINT64));
    }

    @Test
    public void test3436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3436");
        char[] charArray4 = new char[] { '#', ' ', ':', ' ' };
        java.nio.CharBuffer charBuffer5 = java.nio.CharBuffer.wrap(charArray4);
        java.nio.CharBuffer charBuffer6 = charBuffer5.slice();
        java.nio.CharBuffer charBuffer8 = java.nio.CharBuffer.allocate((int) ' ');
        boolean boolean9 = charBuffer8.isDirect();
        int int10 = charBuffer8.arrayOffset();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.CharBuffer charBuffer11 = charBuffer6.put(charBuffer8);
            org.junit.Assert.fail("Expected exception of type java.nio.BufferOverflowException; message: null");
        } catch (java.nio.BufferOverflowException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "# : ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "# : ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[#,  , :,  ]");
        org.junit.Assert.assertNotNull(charBuffer5);
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(charBuffer8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test3437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3437");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy5 = null;
        compilerOptions0.variableRenaming = variableRenamingPolicy5;
        compilerOptions0.setSummaryDetailLevel(999);
        boolean boolean9 = compilerOptions0.getInferTypes();
        boolean boolean10 = compilerOptions0.ideMode;
        compilerOptions0.setGroupVariableDeclarations(true);
        compilerOptions0.setCheckCaja(false);
        java.util.Set<java.lang.String> strSet15 = compilerOptions0.stripNameSuffixes;
        java.util.stream.Stream<java.lang.String> strStream16 = strSet15.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream17 = strStream16.sequential();
        java.util.Iterator<java.lang.String> strItor18 = strStream16.iterator();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Stream<java.lang.String> strStream20 = strStream16.skip((long) 15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(errorFormat3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(strStream16);
        org.junit.Assert.assertNotNull(strStream17);
        org.junit.Assert.assertNotNull(strItor18);
    }

    @Test
    public void test3438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3438");
        java.io.File file2 = null;
        java.io.File file3 = java.io.File.createTempFile("hi!", "ISO", file2);
        boolean boolean6 = file3.setWritable(false, false);
        java.net.URI uRI7 = file3.toURI();
        com.google.javascript.jscomp.JSSourceFile jSSourceFile8 = com.google.javascript.jscomp.JSSourceFile.fromFile(file3);
        boolean boolean9 = file3.isHidden();
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file3.toString(), "/tmp/hi!130698300871389356ISO");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(uRI7);
        org.junit.Assert.assertNotNull(jSSourceFile8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test3439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3439");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange extensionRange2 = com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.parseFrom(inputStream0, extensionRegistryLite1);
        int int3 = extensionRange2.getEnd();
        boolean boolean4 = extensionRange2.hasEnd();
        byte[] byteArray5 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite6 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions7 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray5, extensionRegistryLite6);
        com.google.protobuf.CodedOutputStream codedOutputStream10 = com.google.protobuf.CodedOutputStream.newInstance(byteArray5, (int) (short) 0, 1);
        com.google.protobuf.CodedOutputStream codedOutputStream13 = com.google.protobuf.CodedOutputStream.newInstance(byteArray5, (int) ' ', 0);
        int int14 = codedOutputStream13.spaceLeft();
        extensionRange2.writeTo(codedOutputStream13);
        org.junit.Assert.assertNotNull(extensionRange2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(methodOptions7);
        org.junit.Assert.assertNotNull(codedOutputStream10);
        org.junit.Assert.assertNotNull(codedOutputStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test3440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3440");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.lang.String str1 = localDate0.toString();
        java.time.chrono.IsoChronology isoChronology2 = localDate0.getChronology();
        java.lang.String str3 = isoChronology2.getId();
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoLocalDate chronoLocalDate7 = isoChronology2.date(50, 9, 97);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for DayOfMonth (valid values 1 - 28/31): 97");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "2022-02-21" + "'", str1, "2022-02-21");
        org.junit.Assert.assertNotNull(isoChronology2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ISO" + "'", str3, "ISO");
    }

    @Test
    public void test3441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3441");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        byte[] byteArray5 = compilerOptions0.inputPropertyMapSerialized;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder6 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder8 = builder6.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder9 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label10 = builder9.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder11 = builder6.addExtension(builder9);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder12 = builder6.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder13 = builder12.getOptionsBuilder();
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder14 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output16 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream18 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output16, (int) 'a');
        byte[] byteArray19 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite20 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions21 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray19, extensionRegistryLite20);
        output16.write(byteArray19);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder23 = builder14.mergeFrom(byteArray19);
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder24 = builder13.mergeFrom(byteArray19);
        java.nio.ByteBuffer byteBuffer25 = java.nio.ByteBuffer.wrap(byteArray19);
        compilerOptions0.inputPropertyMapSerialized = byteArray19;
        com.google.javascript.jscomp.CompilerOptions compilerOptions27 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions27.optimizeCalls = false;
        compilerOptions27.preferLineBreakAtEndOfFile = false;
        boolean boolean32 = compilerOptions27.markNoSideEffectCalls;
        boolean boolean33 = compilerOptions27.labelRenaming;
        com.google.javascript.jscomp.DependencyOptions dependencyOptions34 = new com.google.javascript.jscomp.DependencyOptions();
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        boolean boolean41 = strSet39.isEmpty();
        java.nio.ByteBuffer byteBuffer43 = java.nio.ByteBuffer.allocate(100);
        boolean boolean44 = strSet39.equals((java.lang.Object) byteBuffer43);
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet49 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet49, strArray48);
        boolean boolean51 = strSet49.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream52 = strSet49.stream();
        boolean boolean53 = strSet39.retainAll((java.util.Collection<java.lang.String>) strSet49);
        com.google.javascript.jscomp.DependencyOptions dependencyOptions54 = dependencyOptions34.setEntryPoints((java.util.Collection<java.lang.String>) strSet39);
        compilerOptions27.setDependencyOptions(dependencyOptions34);
        com.google.javascript.jscomp.CheckLevel checkLevel56 = compilerOptions27.checkGlobalThisLevel;
        compilerOptions0.setReportUnknownTypes(checkLevel56);
        com.google.javascript.jscomp.CompilerOptions compilerOptions58 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions58.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat61 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions58.errorFormat = errorFormat61;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy63 = null;
        compilerOptions58.variableRenaming = variableRenamingPolicy63;
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode65 = compilerOptions58.getTracerMode();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder66 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder68 = builder66.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder69 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label70 = builder69.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder71 = builder66.addExtension(builder69);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder72 = builder66.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder73 = builder72.getOptionsBuilder();
        java.io.InputStream inputStream74 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions75 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream74);
        boolean boolean76 = enumOptions75.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder77 = builder73.mergeFrom(enumOptions75);
        byte[] byteArray78 = enumOptions75.toByteArray();
        compilerOptions58.setInputPropertyMapSerialized(byteArray78);
        compilerOptions0.setInputPropertyMapSerialized(byteArray78);
        com.google.protobuf.ByteString byteString81 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite82 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions83 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(byteString81, extensionRegistryLite82);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder84 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label85 = builder84.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto86 = builder84.buildPartial();
        int int87 = fieldDescriptorProto86.getSerializedSize();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder88 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto86);
        java.io.InputStream inputStream89 = null;
        java.io.InputStream inputStream90 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite91 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location92 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream90, extensionRegistryLite91);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder93 = builder88.mergeFrom(inputStream89, extensionRegistryLite91);
        com.google.javascript.jscomp.FunctionInformationMap functionInformationMap94 = com.google.javascript.jscomp.FunctionInformationMap.parseFrom(byteString81, extensionRegistryLite91);
        com.google.protobuf.DescriptorProtos.FieldOptions fieldOptions95 = com.google.protobuf.DescriptorProtos.FieldOptions.parseFrom(byteArray78, extensionRegistryLite91);
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor96 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj98 = fieldOptions95.getRepeatedField(fieldDescriptor96, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(errorFormat3);
        org.junit.Assert.assertNull(byteArray5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + label10 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label10.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(output16);
        org.junit.Assert.assertNotNull(codedOutputStream18);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(methodOptions21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strStream52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dependencyOptions54);
        org.junit.Assert.assertTrue("'" + checkLevel56 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel56.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(errorFormat61);
        org.junit.Assert.assertTrue("'" + tracerMode65 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode65.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertTrue("'" + label70 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label70.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(enumOptions75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[]");
        org.junit.Assert.assertNotNull(byteString81);
        org.junit.Assert.assertNotNull(enumOptions83);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertTrue("'" + label85 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label85.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(extensionRegistryLite91);
        org.junit.Assert.assertNotNull(location92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(functionInformationMap94);
        org.junit.Assert.assertNotNull(fieldOptions95);
    }

    @Test
    public void test3442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3442");
        com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder builder0 = com.google.javascript.jscomp.FunctionInformationMap.Entry.newBuilder();
        boolean boolean1 = builder0.hasSourceName();
        com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder builder2 = com.google.javascript.jscomp.FunctionInformationMap.Entry.newBuilder();
        boolean boolean3 = builder2.hasSourceName();
        com.google.javascript.jscomp.FunctionInformationMap.Entry entry4 = builder2.getDefaultInstanceForType();
        com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder builder5 = builder0.mergeFrom(entry4);
        java.lang.String str6 = entry4.getSourceName();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(entry4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test3443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3443");
        java.text.Format.Field field0 = null;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition(field0, (int) (byte) 1);
        int int3 = fieldPosition2.getField();
        int int4 = fieldPosition2.getBeginIndex();
        int int5 = fieldPosition2.getBeginIndex();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test3444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3444");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy5 = null;
        compilerOptions0.variableRenaming = variableRenamingPolicy5;
        compilerOptions0.optimizeReturns = true;
        compilerOptions0.enableRuntimeTypeCheck("/tmp/hi!7821877662710262577ISO");
        org.junit.Assert.assertNotNull(errorFormat3);
    }

    @Test
    public void test3445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3445");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions1 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream0);
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder2 = enumOptions1.toBuilder();
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder3 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output5 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream7 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output5, (int) 'a');
        byte[] byteArray8 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite9 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions10 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray8, extensionRegistryLite9);
        output5.write(byteArray8);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder12 = builder3.mergeFrom(byteArray8);
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions13 = builder3.buildPartial();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder14 = builder3.addUninterpretedOptionBuilder();
        com.google.protobuf.DescriptorProtos.UninterpretedOption uninterpretedOption15 = builder14.buildPartial();
        java.lang.String str16 = uninterpretedOption15.getIdentifierValue();
        int int17 = uninterpretedOption15.getNameCount();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder18 = builder2.addUninterpretedOption(uninterpretedOption15);
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions19 = builder2.buildPartial();
        boolean boolean20 = enumOptions19.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder21 = enumOptions19.newBuilderForType();
        org.junit.Assert.assertNotNull(enumOptions1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(output5);
        org.junit.Assert.assertNotNull(codedOutputStream7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(methodOptions10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(methodOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(uninterpretedOption15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(enumOptions19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test3446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3446");
        java.time.temporal.ChronoField chronoField0 = java.time.temporal.ChronoField.PROLEPTIC_MONTH;
        org.junit.Assert.assertTrue("'" + chronoField0 + "' != '" + java.time.temporal.ChronoField.PROLEPTIC_MONTH + "'", chronoField0.equals(java.time.temporal.ChronoField.PROLEPTIC_MONTH));
    }

    @Test
    public void test3447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3447");
        short[] shortArray1 = new short[] { (byte) 1 };
        java.nio.ShortBuffer shortBuffer2 = java.nio.ShortBuffer.wrap(shortArray1);
        short[] shortArray4 = new short[] { (byte) 1 };
        java.nio.ShortBuffer shortBuffer5 = java.nio.ShortBuffer.wrap(shortArray4);
        int int6 = shortBuffer2.compareTo(shortBuffer5);
        short short7 = shortBuffer5.get();
        java.nio.ShortBuffer shortBuffer8 = shortBuffer5.compact();
        java.nio.ShortBuffer shortBuffer10 = shortBuffer8.put((short) 100);
        short[] shortArray11 = shortBuffer8.array();
        java.nio.ShortBuffer shortBuffer12 = java.nio.ShortBuffer.wrap(shortArray11);
        short[] shortArray14 = new short[] { (byte) 1 };
        java.nio.ShortBuffer shortBuffer15 = java.nio.ShortBuffer.wrap(shortArray14);
        java.nio.ShortBuffer shortBuffer16 = java.nio.ShortBuffer.wrap(shortArray14);
        java.nio.ShortBuffer shortBuffer17 = shortBuffer12.put(shortArray14);
        java.nio.ShortBuffer shortBuffer18 = shortBuffer12.compact();
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray1), "[1]");
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[1]");
        org.junit.Assert.assertNotNull(shortBuffer5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + short7 + "' != '" + (short) 1 + "'", short7 == (short) 1);
        org.junit.Assert.assertNotNull(shortBuffer8);
        org.junit.Assert.assertNotNull(shortBuffer10);
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[1]");
        org.junit.Assert.assertNotNull(shortBuffer12);
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray14), "[1]");
        org.junit.Assert.assertNotNull(shortBuffer15);
        org.junit.Assert.assertNotNull(shortBuffer16);
        org.junit.Assert.assertNotNull(shortBuffer17);
        org.junit.Assert.assertNotNull(shortBuffer18);
    }

    @Test
    public void test3448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3448");
        java.net.URL uRL0 = null;
        java.security.cert.Certificate certificate1 = null;
        java.security.cert.Certificate[] certificateArray2 = new java.security.cert.Certificate[] { certificate1 };
        java.security.CodeSource codeSource3 = new java.security.CodeSource(uRL0, certificateArray2);
        org.junit.Assert.assertNotNull(certificateArray2);
    }

    @Test
    public void test3449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3449");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean4 = node3.isStringKey();
        boolean boolean5 = node3.isTrue();
        com.google.javascript.rhino.InputId inputId7 = new com.google.javascript.rhino.InputId("NUMBER 52.0 0");
        node3.setInputId(inputId7);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder9 = node3.getJsDocBuilderForNode();
        fileLevelJsDocBuilder9.append("WARNING");
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder9);
    }

    @Test
    public void test3450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3450");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset10);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.of(localDateTime11, (java.time.ZoneId) zoneOffset15);
        java.time.Clock clock18 = java.time.Clock.fixed(instant0, (java.time.ZoneId) zoneOffset15);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.now(clock18);
        java.time.LocalDate localDate20 = java.time.LocalDate.now(clock18);
        com.google.protobuf.Descriptors.Descriptor descriptor21 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto22 = descriptor21.toProto();
        boolean boolean23 = descriptorProto22.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList24 = descriptorProto22.getNestedTypeList();
        int int25 = descriptorProto22.getExtensionRangeCount();
        boolean boolean26 = localDate20.equals((java.lang.Object) descriptorProto22);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder27 = descriptorProto22.newBuilderForType();
        java.util.List<com.google.protobuf.DescriptorProtos.FieldDescriptorProto> fieldDescriptorProtoList28 = builder27.getExtensionList();
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.Builder builder29 = com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.newBuilder();
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder30 = builder27.addExtensionRange(builder29);
        com.google.protobuf.Descriptors.Descriptor descriptor31 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto32 = descriptor31.toProto();
        boolean boolean33 = descriptorProto32.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList34 = descriptorProto32.getNestedTypeList();
        int int35 = descriptorProto32.getExtensionCount();
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder36 = builder30.mergeFrom(descriptorProto32);
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList37 = builder36.getNestedTypeList();
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto39 = builder36.getNestedType(31);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 31");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(clock18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(descriptor21);
        org.junit.Assert.assertNotNull(descriptorProto22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(fieldDescriptorProtoList28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(descriptor31);
        org.junit.Assert.assertNotNull(descriptorProto32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(descriptorProtoList37);
    }

    @Test
    public void test3451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3451");
        com.google.protobuf.ByteString.Output output1 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream3 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output1, (int) 'a');
        codedOutputStream3.writeSFixed64((int) 'a', (long) 10);
        codedOutputStream3.writeUInt64(32, (long) ':');
        codedOutputStream3.writeUInt64NoTag((long) (-1));
        codedOutputStream3.writeTag(82000000, (int) (short) 1);
        org.junit.Assert.assertNotNull(output1);
        org.junit.Assert.assertNotNull(codedOutputStream3);
    }

    @Test
    public void test3452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3452");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto2 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.parseFrom(inputStream0, extensionRegistryLite1);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto3 = fieldDescriptorProto2.getDefaultInstanceForType();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type type4 = fieldDescriptorProto3.getType();
        boolean boolean5 = fieldDescriptorProto3.hasTypeName();
        org.junit.Assert.assertNotNull(fieldDescriptorProto2);
        org.junit.Assert.assertNotNull(fieldDescriptorProto3);
        org.junit.Assert.assertTrue("'" + type4 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type.TYPE_DOUBLE + "'", type4.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type.TYPE_DOUBLE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test3453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3453");
        com.google.javascript.jscomp.JsMessage.Builder builder1 = new com.google.javascript.jscomp.JsMessage.Builder("2022-02-21");
        com.google.javascript.jscomp.JsMessage.Builder builder3 = builder1.appendStringPart("16:00:52+00:00:52");
        com.google.javascript.jscomp.JsMessage.Builder builder5 = builder1.setSourceName("{}");
        com.google.javascript.jscomp.JsMessage jsMessage6 = builder1.build();
        boolean boolean7 = jsMessage6.isHidden();
        boolean boolean8 = jsMessage6.isExternal();
        boolean boolean9 = jsMessage6.isHidden();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(jsMessage6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test3454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3454");
        com.google.protobuf.DescriptorProtos.UninterpretedOption.NamePart namePart0 = com.google.protobuf.DescriptorProtos.UninterpretedOption.NamePart.getDefaultInstance();
        boolean boolean1 = namePart0.hasNamePart();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.NamePart.Builder builder2 = namePart0.newBuilderForType();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder3 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder4 = builder3.clearCcGenericServices();
        boolean boolean5 = builder3.isInitialized();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder7 = builder3.setCcGenericServices(true);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder8 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label9 = builder8.getLabel();
        com.google.protobuf.ByteString byteString10 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder11 = builder8.mergeFrom(byteString10);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite12 = null;
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder13 = builder7.mergeFrom(byteString10, extensionRegistryLite12);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite14 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions15 = com.google.protobuf.DescriptorProtos.EnumValueOptions.parseFrom(byteString10, extensionRegistryLite14);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite16 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto17 = com.google.protobuf.DescriptorProtos.DescriptorProto.parseFrom(byteString10, extensionRegistryLite16);
        com.google.protobuf.DescriptorProtos.UninterpretedOption.NamePart.Builder builder18 = builder2.mergeFrom(byteString10);
        boolean boolean19 = builder18.isInitialized();
        org.junit.Assert.assertNotNull(namePart0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + label9 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label9.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(byteString10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(enumValueOptions15);
        org.junit.Assert.assertNotNull(extensionRegistryLite16);
        org.junit.Assert.assertNotNull(descriptorProto17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test3455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3455");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label1 = builder0.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder2 = builder0.clearOptions();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto3 = builder0.buildPartial();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder4 = fieldDescriptorProto3.toBuilder();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + label1 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label1.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(fieldDescriptorProto3);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test3456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3456");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        java.nio.charset.CodingErrorAction codingErrorAction2 = charsetDecoder1.malformedInputAction();
        java.nio.charset.CodingErrorAction codingErrorAction3 = charsetDecoder1.unmappableCharacterAction();
        boolean boolean4 = charsetDecoder1.isAutoDetecting();
        java.nio.charset.CodingErrorAction codingErrorAction5 = charsetDecoder1.malformedInputAction();
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertNotNull(codingErrorAction2);
        org.junit.Assert.assertNotNull(codingErrorAction3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(codingErrorAction5);
    }

    @Test
    public void test3457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3457");
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder1 = builder0.clearCcGenericServices();
        boolean boolean2 = builder0.isInitialized();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder4 = builder0.setJavaOuterClassname("hi!");
        com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode optimizeMode5 = com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.SPEED;
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder6 = builder4.setOptimizeFor(optimizeMode5);
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor7 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.Message.Builder builder8 = builder4.newBuilderForField(fieldDescriptor7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + optimizeMode5 + "' != '" + com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.SPEED + "'", optimizeMode5.equals(com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.SPEED));
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test3458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3458");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("1970-03-24T02:02:32");
        char[] charArray7 = new char[] { '4', ' ', 'a', 'a', ':' };
        printWriter1.println(charArray7);
        java.security.SignatureException signatureException10 = new java.security.SignatureException();
        java.security.SignatureException signatureException11 = new java.security.SignatureException();
        java.security.SignatureException signatureException12 = new java.security.SignatureException();
        java.security.SignatureException signatureException13 = new java.security.SignatureException();
        java.security.SignatureException signatureException14 = new java.security.SignatureException();
        java.security.SignatureException[] signatureExceptionArray15 = new java.security.SignatureException[] { signatureException10, signatureException11, signatureException12, signatureException13, signatureException14 };
        com.google.common.collect.ImmutableSet<java.security.SignatureException> signatureExceptionSet16 = com.google.common.collect.ImmutableSet.of(signatureExceptionArray15);
        java.io.PrintWriter printWriter17 = printWriter1.format("ISO", (java.lang.Object[]) signatureExceptionArray15);
        char[] charArray22 = new char[] { '#', ' ', ':', ' ' };
        java.nio.CharBuffer charBuffer23 = java.nio.CharBuffer.wrap(charArray22);
        printWriter1.println(charArray22);
        printWriter1.println();
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "4 aa:");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "4 aa:");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[4,  , a, a, :]");
        org.junit.Assert.assertNotNull(signatureExceptionArray15);
        org.junit.Assert.assertNotNull(signatureExceptionSet16);
        org.junit.Assert.assertNotNull(printWriter17);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "# : ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "# : ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[#,  , :,  ]");
        org.junit.Assert.assertNotNull(charBuffer23);
    }

    @Test
    public void test3459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3459");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        com.google.javascript.rhino.jstype.ObjectType objectType6 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType7 = jSTypeRegistry5.createObjectType(objectType6);
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.jstype.ObjectType objectType11 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType12 = jSTypeRegistry10.createObjectType(objectType11);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair13 = objectType7.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType12);
        java.lang.String str14 = objectType12.getDisplayName();
        java.util.Collection<com.google.javascript.rhino.jstype.FunctionType> functionTypeCollection15 = jSTypeRegistry2.getDirectImplementors(objectType12);
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable17 = jSTypeRegistry2.getEachReferenceTypeWithProperty("+00:00:52");
        jSTypeRegistry2.resetForTypeCheck();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean24 = node23.isStringKey();
        boolean boolean25 = node23.isThrow();
        boolean boolean26 = node23.isVarArgs();
        boolean boolean27 = node23.isHook();
        com.google.javascript.rhino.Node node28 = node23.cloneNode();
        com.google.javascript.rhino.ErrorReporter errorReporter29 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter29, false);
        com.google.javascript.rhino.ErrorReporter errorReporter32 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter32, false);
        com.google.javascript.rhino.jstype.ObjectType objectType35 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType36 = jSTypeRegistry34.createObjectType(objectType35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        com.google.javascript.rhino.jstype.ObjectType objectType40 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType41 = jSTypeRegistry39.createObjectType(objectType40);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair42 = objectType36.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType41);
        java.lang.String str43 = objectType41.getDisplayName();
        java.util.Collection<com.google.javascript.rhino.jstype.FunctionType> functionTypeCollection44 = jSTypeRegistry31.getDirectImplementors(objectType41);
        boolean boolean45 = objectType41.isAllType();
        com.google.javascript.rhino.jstype.ObjectType objectType46 = jSTypeRegistry2.createObjectType("+00:00:52", node28, objectType41);
        com.google.javascript.rhino.ErrorReporter errorReporter47 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry49 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter47, false);
        com.google.javascript.rhino.jstype.ObjectType objectType50 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType51 = jSTypeRegistry49.createObjectType(objectType50);
        jSTypeRegistry49.forwardDeclareType("");
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        com.google.javascript.rhino.jstype.ObjectType objectType57 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType58 = jSTypeRegistry56.createObjectType(objectType57);
        com.google.javascript.rhino.ErrorReporter errorReporter59 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry61 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter59, false);
        com.google.javascript.rhino.jstype.ObjectType objectType62 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType63 = jSTypeRegistry61.createObjectType(objectType62);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair64 = objectType58.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType63);
        com.google.javascript.rhino.Node node65 = objectType58.getRootNode();
        com.google.javascript.rhino.ErrorReporter errorReporter66 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry68 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter66, false);
        com.google.javascript.rhino.jstype.ObjectType objectType69 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType70 = jSTypeRegistry68.createObjectType(objectType69);
        com.google.javascript.rhino.ErrorReporter errorReporter71 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry73 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter71, false);
        com.google.javascript.rhino.jstype.ObjectType objectType74 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType75 = jSTypeRegistry73.createObjectType(objectType74);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair76 = objectType70.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType75);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue77 = objectType58.testForEquality((com.google.javascript.rhino.jstype.JSType) objectType70);
        com.google.javascript.rhino.jstype.JSType jSType78 = jSTypeRegistry49.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType58);
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString("java.nio.ByteBufferAsDoubleBufferB[pos=0 lim=12 cap=12]");
        com.google.javascript.rhino.jstype.FunctionType functionType81 = jSTypeRegistry2.createFunctionType((com.google.javascript.rhino.jstype.JSType) objectType58, node80);
        boolean boolean83 = functionType81.hasOwnProperty("1970-01-01T00:00:00Z");
        boolean boolean84 = functionType81.isOrdinaryFunction();
        org.junit.Assert.assertNotNull(objectType7);
        org.junit.Assert.assertNotNull(objectType12);
        org.junit.Assert.assertNotNull(typePair13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(functionTypeCollection15);
        org.junit.Assert.assertNotNull(objectTypeIterable17);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(objectType36);
        org.junit.Assert.assertNotNull(objectType41);
        org.junit.Assert.assertNotNull(typePair42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(functionTypeCollection44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(objectType46);
        org.junit.Assert.assertNotNull(objectType51);
        org.junit.Assert.assertNotNull(objectType58);
        org.junit.Assert.assertNotNull(objectType63);
        org.junit.Assert.assertNotNull(typePair64);
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertNotNull(objectType70);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertNotNull(typePair76);
        org.junit.Assert.assertNotNull(ternaryValue77);
        org.junit.Assert.assertNotNull(jSType78);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(functionType81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }

    @Test
    public void test3460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3460");
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.newBuilder();
        java.io.InputStream inputStream1 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite2 = null;
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder3 = builder0.mergeFrom(inputStream1, extensionRegistryLite2);
        com.google.protobuf.DescriptorProtos.EnumValueOptionsOrBuilder enumValueOptionsOrBuilder4 = builder0.getOptionsOrBuilder();
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder5 = builder0.clear();
        com.google.javascript.jscomp.CompilerOptions compilerOptions6 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions6.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat9 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions6.errorFormat = errorFormat9;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy11 = null;
        compilerOptions6.variableRenaming = variableRenamingPolicy11;
        compilerOptions6.setSummaryDetailLevel(999);
        compilerOptions6.setInlineVariables(true);
        byte[] byteArray17 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite18 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions19 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray17, extensionRegistryLite18);
        com.google.protobuf.CodedOutputStream codedOutputStream22 = com.google.protobuf.CodedOutputStream.newInstance(byteArray17, (int) (short) 0, 1);
        com.google.protobuf.CodedOutputStream codedOutputStream25 = com.google.protobuf.CodedOutputStream.newInstance(byteArray17, (int) ' ', 0);
        compilerOptions6.inputVariableMapSerialized = byteArray17;
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder27 = builder5.mergeFrom(byteArray17);
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor28 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.Message.Builder builder29 = builder27.newBuilderForField(fieldDescriptor28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(enumValueOptionsOrBuilder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(errorFormat9);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(methodOptions19);
        org.junit.Assert.assertNotNull(codedOutputStream22);
        org.junit.Assert.assertNotNull(codedOutputStream25);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test3461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3461");
        java.security.KeyException keyException0 = new java.security.KeyException();
        java.security.GeneralSecurityException generalSecurityException2 = new java.security.GeneralSecurityException();
        java.security.KeyException keyException3 = new java.security.KeyException("1970-01-01+00:00:52", (java.lang.Throwable) generalSecurityException2);
        keyException0.addSuppressed((java.lang.Throwable) keyException3);
        java.io.InvalidObjectException invalidObjectException6 = new java.io.InvalidObjectException("hi!");
        keyException3.addSuppressed((java.lang.Throwable) invalidObjectException6);
    }

    @Test
    public void test3462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3462");
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.Builder builder0 = com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.newBuilder();
        java.io.InputStream inputStream1 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite2 = null;
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.Builder builder3 = builder0.mergeFrom(inputStream1, extensionRegistryLite2);
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.Builder builder4 = builder3.clear();
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange extensionRange5 = builder4.buildPartial();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(extensionRange5);
    }

    @Test
    public void test3463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3463");
        java.io.PrintStream printStream0 = null;
        com.google.javascript.jscomp.Compiler compiler1 = new com.google.javascript.jscomp.Compiler(printStream0);
        com.google.javascript.jscomp.SourceMap sourceMap2 = compiler1.getSourceMap();
        java.util.stream.LongStream longStream4 = java.util.stream.LongStream.of((long) (-1));
        com.google.common.collect.ImmutableMap<com.google.javascript.jscomp.Compiler, java.util.stream.LongStream> compilerMap5 = com.google.common.collect.ImmutableMap.of(compiler1, longStream4);
        java.util.stream.DoubleStream doubleStream6 = longStream4.asDoubleStream();
        java.util.stream.DoubleStream doubleStream7 = doubleStream6.unordered();
        java.util.OptionalDouble optionalDouble8 = doubleStream7.findFirst();
        org.junit.Assert.assertNull(sourceMap2);
        org.junit.Assert.assertNotNull(longStream4);
        org.junit.Assert.assertNotNull(compilerMap5);
        org.junit.Assert.assertNotNull(doubleStream6);
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertNotNull(optionalDouble8);
    }

    @Test
    public void test3464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3464");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.of(localDateTime4, (java.time.ZoneId) zoneOffset8);
        java.time.temporal.ChronoField chronoField12 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit13 = chronoField12.getBaseUnit();
        java.time.LocalDateTime localDateTime14 = localDateTime4.plus((long) 1970, temporalUnit13);
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset19);
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset24);
        java.time.ZonedDateTime zonedDateTime26 = java.time.ZonedDateTime.of(localDateTime20, (java.time.ZoneId) zoneOffset24);
        java.time.temporal.ChronoField chronoField28 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit29 = chronoField28.getBaseUnit();
        java.time.LocalDateTime localDateTime30 = localDateTime20.plus((long) 1970, temporalUnit29);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime31 = localDateTime14.minus((long) 43, temporalUnit29);
        java.time.LocalDateTime localDateTime33 = localDateTime14.minusHours((long) 1024);
        java.time.LocalDateTime localDateTime35 = localDateTime33.plusHours((long) 0);
        java.time.Instant instant36 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset40 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime41 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset40);
        java.time.OffsetDateTime offsetDateTime42 = java.time.OffsetDateTime.ofInstant(instant36, (java.time.ZoneId) zoneOffset40);
        java.time.OffsetDateTime offsetDateTime44 = offsetDateTime42.minusDays((long) (short) 100);
        java.lang.String str45 = offsetDateTime42.toString();
        java.time.ZoneOffset zoneOffset46 = offsetDateTime42.getOffset();
        java.time.Instant instant47 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset51 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime52 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset51);
        java.time.OffsetDateTime offsetDateTime53 = java.time.OffsetDateTime.ofInstant(instant47, (java.time.ZoneId) zoneOffset51);
        java.time.ZonedDateTime zonedDateTime54 = java.time.ZonedDateTime.ofLocal(localDateTime33, (java.time.ZoneId) zoneOffset46, zoneOffset51);
        java.time.chrono.Chronology chronology55 = localDateTime33.getChronology();
        java.time.ZoneOffset zoneOffset59 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime60 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset59);
        int int61 = localDateTime60.getYear();
        java.time.Instant instant62 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset66 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime67 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset66);
        java.time.OffsetDateTime offsetDateTime68 = java.time.OffsetDateTime.ofInstant(instant62, (java.time.ZoneId) zoneOffset66);
        java.time.Instant instant69 = localDateTime60.toInstant(zoneOffset66);
        java.time.LocalTime localTime70 = localDateTime60.toLocalTime();
        java.time.Instant instant71 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset75 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime76 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset75);
        java.time.ZoneOffset zoneOffset80 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime81 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset80);
        java.time.ZonedDateTime zonedDateTime82 = java.time.ZonedDateTime.of(localDateTime76, (java.time.ZoneId) zoneOffset80);
        java.time.temporal.ChronoField chronoField84 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit85 = chronoField84.getBaseUnit();
        java.time.LocalDateTime localDateTime86 = localDateTime76.plus((long) 1970, temporalUnit85);
        java.time.LocalDateTime localDateTime88 = localDateTime76.withHour((int) (short) 1);
        java.time.ZoneOffset zoneOffset90 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.OffsetDateTime offsetDateTime91 = java.time.OffsetDateTime.of(localDateTime76, zoneOffset90);
        java.time.OffsetTime offsetTime92 = java.time.OffsetTime.ofInstant(instant71, (java.time.ZoneId) zoneOffset90);
        java.time.OffsetTime offsetTime93 = java.time.OffsetTime.of(localTime70, zoneOffset90);
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoZonedDateTime<? extends java.time.chrono.ChronoLocalDate> wildcardChronoZonedDateTime94 = chronology55.zonedDateTime((java.time.temporal.TemporalAccessor) localTime70);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unable to obtain ZonedDateTime from TemporalAccessor: 00:02:32 of type java.time.LocalTime");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertTrue("'" + chronoField12 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField12.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit13 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit13.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertTrue("'" + chronoField28 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField28.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit29 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit29.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(zoneOffset40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(offsetDateTime42);
        org.junit.Assert.assertNotNull(offsetDateTime44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1970-01-01T00:00:52+00:00:52" + "'", str45, "1970-01-01T00:00:52+00:00:52");
        org.junit.Assert.assertNotNull(zoneOffset46);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertNotNull(zoneOffset51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(offsetDateTime53);
        org.junit.Assert.assertNotNull(zonedDateTime54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(zoneOffset59);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1970 + "'", int61 == 1970);
        org.junit.Assert.assertNotNull(instant62);
        org.junit.Assert.assertNotNull(zoneOffset66);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(offsetDateTime68);
        org.junit.Assert.assertNotNull(instant69);
        org.junit.Assert.assertNotNull(localTime70);
        org.junit.Assert.assertNotNull(instant71);
        org.junit.Assert.assertNotNull(zoneOffset75);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(zoneOffset80);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(zonedDateTime82);
        org.junit.Assert.assertTrue("'" + chronoField84 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField84.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit85 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit85.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(localDateTime88);
        org.junit.Assert.assertNotNull(zoneOffset90);
        org.junit.Assert.assertNotNull(offsetDateTime91);
        org.junit.Assert.assertNotNull(offsetTime92);
        org.junit.Assert.assertNotNull(offsetTime93);
    }

    @Test
    public void test3465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3465");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset9);
        java.time.ZonedDateTime zonedDateTime11 = java.time.ZonedDateTime.of(localDateTime5, (java.time.ZoneId) zoneOffset9);
        java.time.temporal.ChronoField chronoField13 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit14 = chronoField13.getBaseUnit();
        java.time.LocalDateTime localDateTime15 = localDateTime5.plus((long) 1970, temporalUnit14);
        java.time.LocalDateTime localDateTime17 = localDateTime5.withHour((int) (short) 1);
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.OffsetDateTime offsetDateTime20 = java.time.OffsetDateTime.of(localDateTime5, zoneOffset19);
        java.time.OffsetTime offsetTime21 = java.time.OffsetTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset19);
        java.text.Format.Field field22 = null;
        java.text.FieldPosition fieldPosition24 = new java.text.FieldPosition(field22, (int) (byte) 1);
        java.text.Format.Field field25 = fieldPosition24.getFieldAttribute();
        boolean boolean26 = offsetTime21.equals((java.lang.Object) field25);
        java.time.ZoneOffset zoneOffset27 = offsetTime21.getOffset();
        java.time.OffsetTime offsetTime29 = offsetTime21.plusSeconds((long) (byte) -1);
        java.time.OffsetTime offsetTime31 = offsetTime21.minusMinutes(0L);
        java.time.ZoneOffset zoneOffset35 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime36 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset35);
        java.time.OffsetTime offsetTime37 = offsetTime21.withOffsetSameLocal(zoneOffset35);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + chronoField13 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField13.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit14 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit14.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(offsetTime21);
        org.junit.Assert.assertNull(field25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(zoneOffset27);
        org.junit.Assert.assertNotNull(offsetTime29);
        org.junit.Assert.assertNotNull(offsetTime31);
        org.junit.Assert.assertNotNull(zoneOffset35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(offsetTime37);
    }

    @Test
    public void test3466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3466");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        typePosition0.setPositionInformation((int) ':', 50, 64, (int) (short) 10);
        typePosition0.setPositionInformation(12, (int) (byte) 100, 4095, (int) (short) 0);
        typePosition0.setPositionInformation(50, (int) (byte) -1, 97, 28);
    }

    @Test
    public void test3467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3467");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        java.lang.String[] strArray11 = new java.lang.String[] { "South Korea", "Unknown class name", "ISO", "OffsetSeconds", ":" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        compilerOptions0.setReplaceStringsConfiguration("1970-01-01+00:00:52", (java.util.List<java.lang.String>) strList12);
        compilerOptions0.lineBreak = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions17 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions17.setRecordFunctionInformation(true);
        compilerOptions17.setMoveFunctionDeclarations(true);
        com.google.javascript.jscomp.CheckLevel checkLevel22 = compilerOptions17.checkMissingGetCssNameLevel;
        compilerOptions0.setCheckProvides(checkLevel22);
        boolean boolean24 = compilerOptions0.removeUnusedPrototypePropertiesInExterns;
        boolean boolean25 = compilerOptions0.generatePseudoNames;
        com.google.javascript.jscomp.PropertyRenamingPolicy propertyRenamingPolicy26 = null;
        compilerOptions0.propertyRenaming = propertyRenamingPolicy26;
        boolean boolean28 = compilerOptions0.crossModuleCodeMotion;
        compilerOptions0.setSyntheticBlockStartMarker("/");
        org.junit.Assert.assertNotNull(errorFormat3);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + checkLevel22 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel22.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test3468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3468");
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        boolean boolean6 = strSet4.isEmpty();
        java.nio.ByteBuffer byteBuffer8 = java.nio.ByteBuffer.allocate(100);
        boolean boolean9 = strSet4.equals((java.lang.Object) byteBuffer8);
        java.nio.IntBuffer intBuffer10 = byteBuffer8.asIntBuffer();
        double double11 = byteBuffer8.getDouble();
        java.nio.ByteBuffer byteBuffer12 = byteBuffer8.asReadOnlyBuffer();
        short short14 = byteBuffer8.getShort((int) (byte) 10);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer8.asReadOnlyBuffer();
        int int17 = byteBuffer15.getInt(31);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray18 = byteBuffer15.array();
            org.junit.Assert.fail("Expected exception of type java.nio.ReadOnlyBufferException; message: null");
        } catch (java.nio.ReadOnlyBufferException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(intBuffer10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertTrue("'" + short14 + "' != '" + (short) 0 + "'", short14 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test3469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3469");
        byte[] byteArray0 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions2 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray0, extensionRegistryLite1);
        com.google.protobuf.CodedInputStream codedInputStream5 = com.google.protobuf.CodedInputStream.newInstance(byteArray0, 16, (int) 'a');
        com.google.protobuf.CodedInputStream codedInputStream8 = com.google.protobuf.CodedInputStream.newInstance(byteArray0, 0, (int) (short) 10);
        int int10 = codedInputStream8.setRecursionLimit((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            int int12 = codedInputStream8.pushLimit((int) '#');
            org.junit.Assert.fail("Expected exception of type com.google.protobuf.InvalidProtocolBufferException; message: While parsing a protocol message, the input ended unexpectedly in the middle of a field.  This could mean either than the input has been truncated or that an embedded message misreported its own length.");
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(methodOptions2);
        org.junit.Assert.assertNotNull(codedInputStream5);
        org.junit.Assert.assertNotNull(codedInputStream8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 64 + "'", int10 == 64);
    }

    @Test
    public void test3470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3470");
        java.text.MessageFormat messageFormat1 = new java.text.MessageFormat("hi!");
        java.util.Locale locale2 = messageFormat1.getLocale();
        java.util.Locale locale3 = messageFormat1.getLocale();
        java.text.MessageFormat messageFormat5 = new java.text.MessageFormat("hi!");
        java.text.Format[] formatArray6 = messageFormat5.getFormatsByArgumentIndex();
        java.text.Format[] formatArray7 = messageFormat5.getFormats();
        messageFormat1.setFormats(formatArray7);
        org.junit.Assert.assertNotNull(locale2);
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(formatArray6);
        org.junit.Assert.assertNotNull(formatArray7);
    }

    @Test
    public void test3471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3471");
        java.time.Period period0 = java.time.Period.ZERO;
        java.time.chrono.ChronoPeriod chronoPeriod1 = period0.normalized();
        java.time.temporal.ChronoField chronoField2 = java.time.temporal.ChronoField.EPOCH_DAY;
        java.time.Instant instant3 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime8 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset7);
        java.time.OffsetDateTime offsetDateTime9 = java.time.OffsetDateTime.ofInstant(instant3, (java.time.ZoneId) zoneOffset7);
        java.time.temporal.ValueRange valueRange10 = chronoField2.rangeRefinedBy((java.time.temporal.TemporalAccessor) offsetDateTime9);
        java.time.temporal.Temporal temporal11 = period0.subtractFrom((java.time.temporal.Temporal) offsetDateTime9);
        int int12 = period0.getMonths();
        int int13 = period0.getDays();
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(chronoPeriod1);
        org.junit.Assert.assertTrue("'" + chronoField2 + "' != '" + java.time.temporal.ChronoField.EPOCH_DAY + "'", chronoField2.equals(java.time.temporal.ChronoField.EPOCH_DAY));
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(valueRange10);
        org.junit.Assert.assertNotNull(temporal11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test3472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3472");
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder1 = builder0.clearCcGenericServices();
        boolean boolean2 = builder0.isInitialized();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder4 = builder0.setJavaOuterClassname("hi!");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder7 = builder5.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder8 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label9 = builder8.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder10 = builder5.addExtension(builder8);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder11 = builder5.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder12 = builder11.getOptionsBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder13 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder15 = builder13.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder16 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label17 = builder16.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder18 = builder13.addExtension(builder16);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder19 = builder13.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder20 = builder19.getOptionsBuilder();
        java.io.InputStream inputStream21 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions22 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream21);
        boolean boolean23 = enumOptions22.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder24 = builder20.mergeFrom(enumOptions22);
        com.google.protobuf.UnknownFieldSet unknownFieldSet25 = builder20.getUnknownFields();
        com.google.protobuf.CodedOutputStream codedOutputStream26 = null;
        unknownFieldSet25.writeTo(codedOutputStream26);
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder28 = builder12.setUnknownFields(unknownFieldSet25);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto29 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.getDefaultInstance();
        boolean boolean30 = methodDescriptorProto29.hasOutputType();
        byte[] byteArray31 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite32 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions33 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray31, extensionRegistryLite32);
        com.google.protobuf.CodedOutputStream codedOutputStream36 = com.google.protobuf.CodedOutputStream.newInstance(byteArray31, (int) (short) 0, 1);
        methodDescriptorProto29.writeTo(codedOutputStream36);
        unknownFieldSet25.writeTo(codedOutputStream36);
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder39 = builder0.mergeUnknownFields(unknownFieldSet25);
        boolean boolean40 = builder39.getPyGenericServices();
        boolean boolean41 = builder39.hasOptimizeFor();
        com.google.protobuf.DescriptorProtos.FileOptions fileOptions42 = builder39.getDefaultInstanceForType();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + label9 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label9.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + label17 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label17.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(enumOptions22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(unknownFieldSet25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(methodDescriptorProto29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(methodOptions33);
        org.junit.Assert.assertNotNull(codedOutputStream36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(fileOptions42);
    }

    @Test
    public void test3473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3473");
        java.io.PrintStream printStream0 = null;
        com.google.javascript.jscomp.Compiler compiler1 = new com.google.javascript.jscomp.Compiler(printStream0);
        com.google.javascript.jscomp.SourceMap sourceMap2 = compiler1.getSourceMap();
        java.util.stream.LongStream longStream4 = java.util.stream.LongStream.of((long) (-1));
        com.google.common.collect.ImmutableMap<com.google.javascript.jscomp.Compiler, java.util.stream.LongStream> compilerMap5 = com.google.common.collect.ImmutableMap.of(compiler1, longStream4);
        java.util.stream.DoubleStream doubleStream6 = longStream4.asDoubleStream();
        java.util.stream.DoubleStream doubleStream7 = doubleStream6.unordered();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream9 = doubleStream6.skip(1L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(sourceMap2);
        org.junit.Assert.assertNotNull(longStream4);
        org.junit.Assert.assertNotNull(compilerMap5);
        org.junit.Assert.assertNotNull(doubleStream6);
        org.junit.Assert.assertNotNull(doubleStream7);
    }

    @Test
    public void test3474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3474");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy5 = null;
        compilerOptions0.variableRenaming = variableRenamingPolicy5;
        compilerOptions0.setSummaryDetailLevel(999);
        compilerOptions0.setInlineVariables(true);
        compilerOptions0.removeUnusedVars = true;
        boolean boolean13 = compilerOptions0.removeUnusedLocalVars;
        compilerOptions0.inlineVariables = true;
        com.google.javascript.jscomp.CompilerOptions compilerOptions16 = new com.google.javascript.jscomp.CompilerOptions();
        java.lang.String[] strArray20 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet21 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet21, strArray20);
        boolean boolean23 = strSet21.isEmpty();
        java.nio.ByteBuffer byteBuffer25 = java.nio.ByteBuffer.allocate(100);
        boolean boolean26 = strSet21.equals((java.lang.Object) byteBuffer25);
        java.lang.String[] strArray30 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet31 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet31, strArray30);
        boolean boolean33 = strSet31.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream34 = strSet31.stream();
        boolean boolean35 = strSet21.retainAll((java.util.Collection<java.lang.String>) strSet31);
        compilerOptions16.setExtraAnnotationNames((java.util.Set<java.lang.String>) strSet31);
        compilerOptions16.setTweakToDoubleLiteral("ISO", (double) (short) 1);
        compilerOptions16.setUnaliasableGlobals("{1572375491}");
        compilerOptions16.setRemoveAbstractMethods(false);
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet48 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet48, strArray47);
        boolean boolean50 = strSet48.isEmpty();
        java.nio.ByteBuffer byteBuffer52 = java.nio.ByteBuffer.allocate(100);
        boolean boolean53 = strSet48.equals((java.lang.Object) byteBuffer52);
        int int54 = strSet48.size();
        compilerOptions16.aliasableStrings = strSet48;
        compilerOptions0.setReplaceStringsReservedStrings((java.util.Set<java.lang.String>) strSet48);
        compilerOptions0.setGatherCssNames(true);
        org.junit.Assert.assertNotNull(errorFormat3);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(byteBuffer25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(strStream34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 3 + "'", int54 == 3);
    }

    @Test
    public void test3475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3475");
        int[] intArray4 = new int[] { 16, ':', 43, (short) 100 };
        java.util.stream.IntStream intStream5 = java.util.stream.IntStream.of(intArray4);
        java.util.stream.IntStream intStream6 = intStream5.parallel();
        java.util.function.IntPredicate intPredicate7 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean8 = intStream5.noneMatch(intPredicate7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[16, 58, 43, 100]");
        org.junit.Assert.assertNotNull(intStream5);
        org.junit.Assert.assertNotNull(intStream6);
    }

    @Test
    public void test3476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3476");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) ' ');
        boolean boolean2 = charBuffer1.isDirect();
        java.nio.CharBuffer charBuffer4 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer6 = charBuffer4.put('a');
        char[] charArray8 = new char[] { '4' };
        java.nio.CharBuffer charBuffer9 = charBuffer6.get(charArray8);
        java.nio.CharBuffer charBuffer10 = charBuffer6.compact();
        java.nio.CharBuffer charBuffer12 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer14 = charBuffer12.put('a');
        java.nio.CharBuffer charBuffer16 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer18 = charBuffer16.put('a');
        char[] charArray20 = new char[] { '4' };
        java.nio.CharBuffer charBuffer21 = charBuffer18.get(charArray20);
        java.nio.CharBuffer charBuffer22 = charBuffer18.compact();
        com.google.common.collect.ImmutableSet<java.lang.Appendable> appendableSet23 = com.google.common.collect.ImmutableSet.of((java.lang.Appendable) charBuffer1, (java.lang.Appendable) charBuffer6, (java.lang.Appendable) charBuffer12, (java.lang.Appendable) charBuffer22);
        java.nio.CharBuffer charBuffer24 = java.nio.CharBuffer.wrap((java.lang.CharSequence) charBuffer1);
        char[] charArray25 = charBuffer1.array();
        java.nio.charset.Charset charset26 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder27 = charset26.newDecoder();
        java.nio.charset.CodingErrorAction codingErrorAction28 = charsetDecoder27.malformedInputAction();
        java.nio.charset.CodingErrorAction codingErrorAction29 = charsetDecoder27.unmappableCharacterAction();
        java.nio.charset.CodingErrorAction codingErrorAction30 = java.nio.charset.CodingErrorAction.REPORT;
        java.nio.charset.CharsetDecoder charsetDecoder31 = charsetDecoder27.onMalformedInput(codingErrorAction30);
        boolean boolean32 = charBuffer1.equals((java.lang.Object) charsetDecoder31);
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charBuffer4);
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer9);
        org.junit.Assert.assertNotNull(charBuffer10);
        org.junit.Assert.assertNotNull(charBuffer12);
        org.junit.Assert.assertNotNull(charBuffer14);
        org.junit.Assert.assertNotNull(charBuffer16);
        org.junit.Assert.assertNotNull(charBuffer18);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer21);
        org.junit.Assert.assertNotNull(charBuffer22);
        org.junit.Assert.assertNotNull(appendableSet23);
        org.junit.Assert.assertNotNull(charBuffer24);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[\000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(charset26);
        org.junit.Assert.assertNotNull(charsetDecoder27);
        org.junit.Assert.assertNotNull(codingErrorAction28);
        org.junit.Assert.assertNotNull(codingErrorAction29);
        org.junit.Assert.assertNotNull(codingErrorAction30);
        org.junit.Assert.assertNotNull(charsetDecoder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test3477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3477");
        com.google.protobuf.UnknownFieldSet.Field.Builder builder0 = com.google.protobuf.UnknownFieldSet.Field.newBuilder();
        com.google.protobuf.UnknownFieldSet.Field.Builder builder2 = builder0.addFixed64(999L);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test3478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3478");
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions fileOptions1 = builder0.getDefaultInstanceForType();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder3 = builder0.setPyGenericServices(false);
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder4 = builder3.clearJavaMultipleFiles();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder6 = builder4.setJavaGenerateEqualsAndHash(false);
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder7 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions fileOptions8 = builder7.getDefaultInstanceForType();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder9 = builder6.mergeFrom(fileOptions8);
        com.google.protobuf.Descriptors.Descriptor descriptor10 = fileOptions8.getDescriptorForType();
        boolean boolean11 = fileOptions8.hasJavaGenericServices();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(fileOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(fileOptions8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(descriptor10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test3479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3479");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.of(localDateTime4, (java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime10.minusSeconds((long) '#');
        java.time.temporal.ChronoField chronoField13 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit14 = chronoField13.getBaseUnit();
        boolean boolean15 = zonedDateTime12.isSupported(temporalUnit14);
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset19);
        int int21 = localDateTime20.getYear();
        java.time.Instant instant22 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset26);
        java.time.OffsetDateTime offsetDateTime28 = java.time.OffsetDateTime.ofInstant(instant22, (java.time.ZoneId) zoneOffset26);
        java.time.Instant instant29 = localDateTime20.toInstant(zoneOffset26);
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset34);
        java.time.ZoneOffset zoneOffset39 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime40 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset39);
        java.time.ZonedDateTime zonedDateTime41 = java.time.ZonedDateTime.of(localDateTime35, (java.time.ZoneId) zoneOffset39);
        java.time.temporal.ChronoField chronoField43 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit44 = chronoField43.getBaseUnit();
        java.time.LocalDateTime localDateTime45 = localDateTime35.plus((long) 1970, temporalUnit44);
        java.time.ZoneOffset zoneOffset50 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime51 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset50);
        java.time.ZoneOffset zoneOffset55 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime56 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset55);
        java.time.ZonedDateTime zonedDateTime57 = java.time.ZonedDateTime.of(localDateTime51, (java.time.ZoneId) zoneOffset55);
        java.time.temporal.ChronoField chronoField59 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit60 = chronoField59.getBaseUnit();
        java.time.LocalDateTime localDateTime61 = localDateTime51.plus((long) 1970, temporalUnit60);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime62 = localDateTime45.minus((long) 43, temporalUnit60);
        java.time.Instant instant63 = instant29.plus((long) 16384, temporalUnit60);
        java.time.Instant instant65 = temporalUnit14.addTo(instant29, (long) (-1));
        java.nio.file.attribute.FileTime fileTime66 = java.nio.file.attribute.FileTime.from(instant29);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertTrue("'" + chronoField13 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField13.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit14 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit14.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1970 + "'", int21 == 1970);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(offsetDateTime28);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(zoneOffset39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(zonedDateTime41);
        org.junit.Assert.assertTrue("'" + chronoField43 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField43.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit44 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit44.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(zoneOffset50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(zoneOffset55);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(zonedDateTime57);
        org.junit.Assert.assertTrue("'" + chronoField59 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField59.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit60 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit60.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime62);
        org.junit.Assert.assertNotNull(instant63);
        org.junit.Assert.assertNotNull(instant65);
        org.junit.Assert.assertNotNull(fileTime66);
    }

    @Test
    public void test3480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3480");
        java.time.OffsetTime offsetTime0 = java.time.OffsetTime.MAX;
        int int1 = offsetTime0.getHour();
        java.time.OffsetTime offsetTime3 = offsetTime0.minusSeconds((long) '\000');
        java.time.OffsetTime offsetTime5 = offsetTime3.minusHours((long) (byte) 10);
        org.junit.Assert.assertNotNull(offsetTime0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 23 + "'", int1 == 23);
        org.junit.Assert.assertNotNull(offsetTime3);
        org.junit.Assert.assertNotNull(offsetTime5);
    }

    @Test
    public void test3481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3481");
        int int1 = com.google.protobuf.CodedOutputStream.computeFixed64SizeNoTag((long) 3);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 8 + "'", int1 == 8);
    }

    @Test
    public void test3482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3482");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder3 = builder2.clearSourceCodeInfo();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder4 = builder2.getSourceCodeInfoBuilder();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo sourceCodeInfo5 = builder4.getDefaultInstanceForType();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder6 = sourceCodeInfo5.newBuilderForType();
        java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite> priorityMap7 = new java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite>();
        java.lang.Object obj8 = priorityMap7.clone();
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder9 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.newBuilder();
        boolean boolean10 = priorityMap7.containsValue((java.lang.Object) builder9);
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder12 = builder9.setName("java.nio.ByteBufferAsDoubleBufferB[pos=0 lim=12 cap=12]");
        com.google.protobuf.ByteString byteString13 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder14 = builder9.mergeFrom(byteString13);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite15 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder16 = builder6.mergeFrom(byteString13, extensionRegistryLite15);
        com.google.protobuf.Descriptors.Descriptor descriptor17 = builder16.getDescriptorForType();
        com.google.protobuf.Descriptors.Descriptor descriptor19 = descriptor17.findNestedTypeByName("google.protobuf");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(sourceCodeInfo5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "{}");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(byteString13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(descriptor17);
        org.junit.Assert.assertNull(descriptor19);
    }

    @Test
    public void test3483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3483");
        java.io.PrintStream printStream0 = null;
        com.google.javascript.jscomp.Compiler compiler1 = new com.google.javascript.jscomp.Compiler(printStream0);
        com.google.javascript.jscomp.ErrorManager errorManager2 = compiler1.getErrorManager();
        double double3 = errorManager2.getTypedPercent();
        double double4 = errorManager2.getTypedPercent();
        org.junit.Assert.assertNotNull(errorManager2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
    }

    @Test
    public void test3484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3484");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset10);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.of(localDateTime11, (java.time.ZoneId) zoneOffset15);
        java.time.Clock clock18 = java.time.Clock.fixed(instant0, (java.time.ZoneId) zoneOffset15);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.now(clock18);
        java.time.LocalDate localDate20 = java.time.LocalDate.now(clock18);
        com.google.protobuf.Descriptors.Descriptor descriptor21 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto22 = descriptor21.toProto();
        boolean boolean23 = descriptorProto22.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList24 = descriptorProto22.getNestedTypeList();
        int int25 = descriptorProto22.getExtensionRangeCount();
        boolean boolean26 = localDate20.equals((java.lang.Object) descriptorProto22);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder27 = descriptorProto22.newBuilderForType();
        java.util.List<com.google.protobuf.DescriptorProtos.FieldDescriptorProto> fieldDescriptorProtoList28 = builder27.getExtensionList();
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder29 = builder27.addNestedTypeBuilder();
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder30 = builder27.clearExtension();
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder31 = builder27.clearName();
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.Builder builder33 = builder31.addExtensionRangeBuilder(0);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(clock18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(descriptor21);
        org.junit.Assert.assertNotNull(descriptorProto22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(fieldDescriptorProtoList28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test3485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3485");
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap0 = java.nio.charset.Charset.availableCharsets();
        java.util.Set<java.lang.String> strSet1 = strMap0.keySet();
        java.util.stream.Stream<java.lang.String> strStream2 = strSet1.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream4 = strStream2.limit((long) 171);
        long long5 = strStream4.count();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Stream<java.lang.String> strStream6 = strStream4.sorted();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap0);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(strStream2);
        org.junit.Assert.assertNotNull(strStream4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 171L + "'", long5 == 171L);
    }

    @Test
    public void test3486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3486");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRecordFunctionInformation(true);
        boolean boolean3 = compilerOptions0.checkControlStructures;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setAssumeStrictThis(true);
        com.google.javascript.jscomp.CheckLevel checkLevel8 = null;
        compilerOptions0.setAggressiveVarCheck(checkLevel8);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test3487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3487");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label4 = builder3.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = builder0.addExtension(builder3);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder6 = builder0.addExtensionBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder7 = builder0.clearOptions();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + label4 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label4.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test3488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3488");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.CONSTANT_PROPERTY;
        com.google.javascript.jscomp.DiagnosticGroups.ACCESS_CONTROLS = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.FILEOVERVIEW_JSDOC = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.INVALID_CASTS = diagnosticGroup0;
        org.junit.Assert.assertNotNull(diagnosticGroup0);
    }

    @Test
    public void test3489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3489");
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        boolean boolean6 = strSet4.isEmpty();
        java.nio.ByteBuffer byteBuffer8 = java.nio.ByteBuffer.allocate(100);
        boolean boolean9 = strSet4.equals((java.lang.Object) byteBuffer8);
        java.nio.IntBuffer intBuffer10 = byteBuffer8.asIntBuffer();
        java.nio.ByteBuffer byteBuffer13 = byteBuffer8.put((int) (short) 1, (byte) 100);
        java.nio.FloatBuffer floatBuffer14 = byteBuffer13.asFloatBuffer();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(intBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertNotNull(floatBuffer14);
    }

    @Test
    public void test3490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3490");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean4 = node3.isFromExterns();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean9 = node8.isFromExterns();
        java.lang.String str10 = node8.toString();
        com.google.javascript.rhino.Node node11 = node3.copyInformationFrom(node8);
        boolean boolean12 = node3.isGetProp();
        boolean boolean13 = node3.isEmpty();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER 52.0 0" + "'", str10, "NUMBER 52.0 0");
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test3491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3491");
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.of((long) (-1));
        java.util.stream.LongStream longStream2 = longStream1.distinct();
        java.util.stream.DoubleStream doubleStream3 = longStream2.asDoubleStream();
        boolean boolean4 = doubleStream3.isParallel();
        java.util.stream.DoubleStream doubleStream5 = doubleStream3.unordered();
        java.util.stream.DoubleStream doubleStream6 = doubleStream5.sequential();
        java.util.stream.DoubleStream doubleStream7 = doubleStream6.parallel();
        java.util.DoubleSummaryStatistics doubleSummaryStatistics8 = doubleStream7.summaryStatistics();
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(doubleStream3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(doubleStream5);
        org.junit.Assert.assertNotNull(doubleStream6);
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertNotNull(doubleSummaryStatistics8);
        org.junit.Assert.assertEquals(doubleSummaryStatistics8.toString(), "DoubleSummaryStatistics{count=1, sum=-1.000000, min=-1.000000, average=-1.000000, max=-1.000000}");
    }

    @Test
    public void test3492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3492");
        java.nio.FloatBuffer floatBuffer1 = java.nio.FloatBuffer.allocate(6);
        float[] floatArray2 = floatBuffer1.array();
        java.nio.FloatBuffer floatBuffer3 = java.nio.FloatBuffer.wrap(floatArray2);
        float float4 = floatBuffer3.get();
        org.junit.Assert.assertNotNull(floatBuffer1);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(floatBuffer3);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 0.0f + "'", float4 == 0.0f);
    }

    @Test
    public void test3493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3493");
        java.time.LocalTime localTime0 = null;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset9);
        java.time.ZonedDateTime zonedDateTime11 = java.time.ZonedDateTime.of(localDateTime5, (java.time.ZoneId) zoneOffset9);
        java.time.temporal.ChronoField chronoField13 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit14 = chronoField13.getBaseUnit();
        java.time.LocalDateTime localDateTime15 = localDateTime5.plus((long) 1970, temporalUnit14);
        java.time.LocalDateTime localDateTime17 = localDateTime5.withHour((int) (short) 1);
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset21);
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset26);
        java.time.ZonedDateTime zonedDateTime28 = java.time.ZonedDateTime.of(localDateTime22, (java.time.ZoneId) zoneOffset26);
        java.time.temporal.ChronoField chronoField30 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit31 = chronoField30.getBaseUnit();
        java.time.LocalDateTime localDateTime32 = localDateTime22.plus((long) 1970, temporalUnit31);
        java.time.ZoneOffset zoneOffset36 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime37 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset36);
        java.time.ZoneOffset zoneOffset41 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime42 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset41);
        java.time.ZonedDateTime zonedDateTime43 = java.time.ZonedDateTime.of(localDateTime37, (java.time.ZoneId) zoneOffset41);
        java.time.temporal.ChronoField chronoField45 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit46 = chronoField45.getBaseUnit();
        java.time.LocalDateTime localDateTime47 = localDateTime37.plus((long) 1970, temporalUnit46);
        java.time.LocalDateTime localDateTime49 = localDateTime37.withHour((int) (short) 1);
        java.time.ZoneOffset zoneOffset51 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.OffsetDateTime offsetDateTime52 = java.time.OffsetDateTime.of(localDateTime37, zoneOffset51);
        long long53 = localDateTime22.toEpochSecond(zoneOffset51);
        java.time.ZoneOffset zoneOffset57 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime58 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset57);
        java.time.ZoneOffset zoneOffset62 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime63 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset62);
        java.time.ZonedDateTime zonedDateTime64 = java.time.ZonedDateTime.of(localDateTime58, (java.time.ZoneId) zoneOffset62);
        java.time.ZonedDateTime zonedDateTime66 = zonedDateTime64.minusSeconds((long) '#');
        java.time.ZonedDateTime zonedDateTime68 = zonedDateTime64.minusYears((long) ' ');
        java.time.temporal.Temporal temporal69 = zoneOffset51.adjustInto((java.time.temporal.Temporal) zonedDateTime68);
        java.time.ZonedDateTime zonedDateTime70 = java.time.ZonedDateTime.of(localDateTime17, (java.time.ZoneId) zoneOffset51);
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetTime offsetTime71 = java.time.OffsetTime.of(localTime0, zoneOffset51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: time");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + chronoField13 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField13.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit14 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit14.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(zonedDateTime28);
        org.junit.Assert.assertTrue("'" + chronoField30 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField30.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit31 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit31.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(zoneOffset36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(zoneOffset41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(zonedDateTime43);
        org.junit.Assert.assertTrue("'" + chronoField45 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField45.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit46 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit46.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(zoneOffset51);
        org.junit.Assert.assertNotNull(offsetDateTime52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 100L + "'", long53 == 100L);
        org.junit.Assert.assertNotNull(zoneOffset57);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(zoneOffset62);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(zonedDateTime64);
        org.junit.Assert.assertNotNull(zonedDateTime66);
        org.junit.Assert.assertNotNull(zonedDateTime68);
        org.junit.Assert.assertNotNull(temporal69);
        org.junit.Assert.assertNotNull(zonedDateTime70);
    }

    @Test
    public void test3494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3494");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType4 = jSTypeRegistry2.createObjectType(objectType3);
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.jstype.ObjectType objectType8 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry7.createObjectType(objectType8);
        jSTypeRegistry7.identifyNonNullableName("/");
        boolean boolean13 = jSTypeRegistry7.isForwardDeclaredType("java.nio.ByteBufferAsDoubleBufferB[pos=0 lim=12 cap=12]");
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray14 = new com.google.javascript.rhino.jstype.JSType[] {};
        com.google.javascript.rhino.Node node15 = jSTypeRegistry7.createParametersWithVarArgs(jSTypeArray14);
        com.google.javascript.rhino.Node node16 = jSTypeRegistry2.createParametersWithVarArgs(jSTypeArray14);
        org.junit.Assert.assertNotNull(objectType4);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(jSTypeArray14);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(node16);
    }

    @Test
    public void test3495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3495");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer3 = charBuffer1.put('a');
        char[] charArray5 = new char[] { '4' };
        java.nio.CharBuffer charBuffer6 = charBuffer3.get(charArray5);
        java.nio.CharBuffer charBuffer8 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer10 = charBuffer8.put('a');
        char[] charArray12 = new char[] { '4' };
        java.nio.CharBuffer charBuffer13 = charBuffer10.get(charArray12);
        java.nio.CharBuffer charBuffer14 = charBuffer3.put(charArray12);
        java.nio.CharBuffer charBuffer15 = charBuffer3.slice();
        char[] charArray20 = new char[] { '#', ' ', ':', ' ' };
        java.nio.CharBuffer charBuffer21 = java.nio.CharBuffer.wrap(charArray20);
        java.nio.CharBuffer charBuffer22 = charBuffer15.get(charArray20);
        java.nio.CharBuffer charBuffer24 = charBuffer15.put('a');
        java.nio.CharBuffer charBuffer26 = java.nio.CharBuffer.allocate((int) ' ');
        boolean boolean27 = charBuffer26.isDirect();
        java.nio.CharBuffer charBuffer29 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer31 = charBuffer29.put('a');
        char[] charArray33 = new char[] { '4' };
        java.nio.CharBuffer charBuffer34 = charBuffer31.get(charArray33);
        java.nio.CharBuffer charBuffer35 = charBuffer31.compact();
        java.nio.CharBuffer charBuffer37 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer39 = charBuffer37.put('a');
        java.nio.CharBuffer charBuffer41 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer43 = charBuffer41.put('a');
        char[] charArray45 = new char[] { '4' };
        java.nio.CharBuffer charBuffer46 = charBuffer43.get(charArray45);
        java.nio.CharBuffer charBuffer47 = charBuffer43.compact();
        com.google.common.collect.ImmutableSet<java.lang.Appendable> appendableSet48 = com.google.common.collect.ImmutableSet.of((java.lang.Appendable) charBuffer26, (java.lang.Appendable) charBuffer31, (java.lang.Appendable) charBuffer37, (java.lang.Appendable) charBuffer47);
        boolean boolean49 = charBuffer47.isDirect();
        char[] charArray50 = charBuffer47.array();
        java.nio.CharBuffer charBuffer52 = java.nio.CharBuffer.allocate((int) ' ');
        boolean boolean53 = charBuffer52.isDirect();
        java.nio.CharBuffer charBuffer55 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer57 = charBuffer55.put('a');
        char[] charArray59 = new char[] { '4' };
        java.nio.CharBuffer charBuffer60 = charBuffer57.get(charArray59);
        java.nio.CharBuffer charBuffer61 = charBuffer57.compact();
        java.nio.CharBuffer charBuffer63 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer65 = charBuffer63.put('a');
        java.nio.CharBuffer charBuffer67 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer69 = charBuffer67.put('a');
        char[] charArray71 = new char[] { '4' };
        java.nio.CharBuffer charBuffer72 = charBuffer69.get(charArray71);
        java.nio.CharBuffer charBuffer73 = charBuffer69.compact();
        com.google.common.collect.ImmutableSet<java.lang.Appendable> appendableSet74 = com.google.common.collect.ImmutableSet.of((java.lang.Appendable) charBuffer52, (java.lang.Appendable) charBuffer57, (java.lang.Appendable) charBuffer63, (java.lang.Appendable) charBuffer73);
        boolean boolean75 = charBuffer73.isDirect();
        int int76 = charBuffer47.read(charBuffer73);
        char[] charArray77 = new char[] {};
        java.nio.CharBuffer charBuffer78 = charBuffer47.get(charArray77);
        java.nio.ByteOrder byteOrder79 = charBuffer47.order();
        java.nio.CharBuffer charBuffer80 = charBuffer15.append((java.lang.CharSequence) charBuffer47);
        java.util.stream.IntStream intStream81 = charBuffer80.codePoints();
        java.util.Spliterator.OfInt ofInt82 = intStream81.spliterator();
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(charBuffer3);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(charBuffer8);
        org.junit.Assert.assertNotNull(charBuffer10);
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer13);
        org.junit.Assert.assertNotNull(charBuffer14);
        org.junit.Assert.assertNotNull(charBuffer15);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[\000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(charBuffer21);
        org.junit.Assert.assertNotNull(charBuffer22);
        org.junit.Assert.assertNotNull(charBuffer24);
        org.junit.Assert.assertNotNull(charBuffer26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(charBuffer29);
        org.junit.Assert.assertNotNull(charBuffer31);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer34);
        org.junit.Assert.assertNotNull(charBuffer35);
        org.junit.Assert.assertNotNull(charBuffer37);
        org.junit.Assert.assertNotNull(charBuffer39);
        org.junit.Assert.assertNotNull(charBuffer41);
        org.junit.Assert.assertNotNull(charBuffer43);
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray45), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray45), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray45), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer46);
        org.junit.Assert.assertNotNull(charBuffer47);
        org.junit.Assert.assertNotNull(appendableSet48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray50), "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray50), "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray50), "[\000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(charBuffer52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(charBuffer55);
        org.junit.Assert.assertNotNull(charBuffer57);
        org.junit.Assert.assertNotNull(charArray59);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray59), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray59), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray59), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer60);
        org.junit.Assert.assertNotNull(charBuffer61);
        org.junit.Assert.assertNotNull(charBuffer63);
        org.junit.Assert.assertNotNull(charBuffer65);
        org.junit.Assert.assertNotNull(charBuffer67);
        org.junit.Assert.assertNotNull(charBuffer69);
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray71), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray71), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray71), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer72);
        org.junit.Assert.assertNotNull(charBuffer73);
        org.junit.Assert.assertNotNull(appendableSet74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertNotNull(charBuffer78);
        org.junit.Assert.assertNotNull(byteOrder79);
        org.junit.Assert.assertNotNull(charBuffer80);
        org.junit.Assert.assertNotNull(intStream81);
        org.junit.Assert.assertNotNull(ofInt82);
    }

    @Test
    public void test3496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3496");
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto0 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.getDefaultInstance();
        boolean boolean1 = serviceDescriptorProto0.hasOptions();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder2 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.newBuilder(serviceDescriptorProto0);
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto3 = builder2.buildPartial();
        byte[] byteArray4 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite5 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions6 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray4, extensionRegistryLite5);
        com.google.protobuf.CodedOutputStream codedOutputStream9 = com.google.protobuf.CodedOutputStream.newInstance(byteArray4, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite10 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto11 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray4, extensionRegistryLite10);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite12 = null;
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto13 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.parseFrom(byteArray4, extensionRegistryLite12);
        com.google.protobuf.UnknownFieldSet unknownFieldSet14 = com.google.protobuf.UnknownFieldSet.parseFrom(byteArray4);
        com.google.protobuf.ByteString byteString15 = unknownFieldSet14.toByteString();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder16 = builder2.setUnknownFields(unknownFieldSet14);
        org.junit.Assert.assertNotNull(serviceDescriptorProto0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(serviceDescriptorProto3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(methodOptions6);
        org.junit.Assert.assertNotNull(codedOutputStream9);
        org.junit.Assert.assertNotNull(fileDescriptorProto11);
        org.junit.Assert.assertNotNull(serviceDescriptorProto13);
        org.junit.Assert.assertNotNull(unknownFieldSet14);
        org.junit.Assert.assertNotNull(byteString15);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test3497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3497");
        java.time.LocalTime localTime0 = java.time.LocalTime.MIN;
        java.time.temporal.ChronoField chronoField1 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit2 = chronoField1.getBaseUnit();
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset6);
        java.time.ZoneOffset zoneOffset11 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset11);
        java.time.ZonedDateTime zonedDateTime13 = java.time.ZonedDateTime.of(localDateTime7, (java.time.ZoneId) zoneOffset11);
        java.time.ZonedDateTime zonedDateTime15 = zonedDateTime13.withYear((int) (short) 1);
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset19);
        int int21 = localDateTime20.getYear();
        java.time.LocalDate localDate22 = localDateTime20.toLocalDate();
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset26);
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime32 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset31);
        java.time.ZonedDateTime zonedDateTime33 = java.time.ZonedDateTime.of(localDateTime27, (java.time.ZoneId) zoneOffset31);
        java.time.temporal.ChronoField chronoField35 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit36 = chronoField35.getBaseUnit();
        java.time.LocalDateTime localDateTime37 = localDateTime27.plus((long) 1970, temporalUnit36);
        java.time.LocalTime localTime38 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localDateTime37);
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime43 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset42);
        java.time.OffsetDateTime offsetDateTime44 = java.time.OffsetDateTime.of(localDate22, localTime38, zoneOffset42);
        java.time.ZonedDateTime zonedDateTime45 = zonedDateTime13.withZoneSameInstant((java.time.ZoneId) zoneOffset42);
        boolean boolean46 = temporalUnit2.isSupportedBy((java.time.temporal.Temporal) zonedDateTime13);
        java.time.LocalTime localTime47 = zonedDateTime13.toLocalTime();
        int int48 = localTime47.toSecondOfDay();
        java.time.Period period49 = java.time.Period.ZERO;
        java.time.chrono.ChronoPeriod chronoPeriod50 = period49.normalized();
        java.time.chrono.ChronoPeriod chronoPeriod51 = chronoPeriod50.normalized();
        java.time.LocalTime localTime52 = localTime47.minus((java.time.temporal.TemporalAmount) chronoPeriod51);
        int int53 = localTime0.compareTo(localTime52);
        int int54 = localTime0.getHour();
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertTrue("'" + chronoField1 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField1.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit2 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit2.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zonedDateTime13);
        org.junit.Assert.assertNotNull(zonedDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1970 + "'", int21 == 1970);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(zonedDateTime33);
        org.junit.Assert.assertTrue("'" + chronoField35 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField35.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit36 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit36.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(offsetDateTime44);
        org.junit.Assert.assertNotNull(zonedDateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 152 + "'", int48 == 152);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(chronoPeriod50);
        org.junit.Assert.assertNotNull(chronoPeriod51);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
    }

    @Test
    public void test3498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3498");
        java.time.Period period0 = java.time.Period.ZERO;
        java.time.chrono.ChronoPeriod chronoPeriod1 = period0.normalized();
        java.time.temporal.ChronoField chronoField2 = java.time.temporal.ChronoField.EPOCH_DAY;
        java.time.Instant instant3 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime8 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset7);
        java.time.OffsetDateTime offsetDateTime9 = java.time.OffsetDateTime.ofInstant(instant3, (java.time.ZoneId) zoneOffset7);
        java.time.temporal.ValueRange valueRange10 = chronoField2.rangeRefinedBy((java.time.temporal.TemporalAccessor) offsetDateTime9);
        java.time.temporal.Temporal temporal11 = period0.subtractFrom((java.time.temporal.Temporal) offsetDateTime9);
        int int12 = offsetDateTime9.getMonthValue();
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset16);
        int int18 = localDateTime17.getYear();
        java.time.LocalDate localDate19 = localDateTime17.toLocalDate();
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset23);
        java.time.ZoneOffset zoneOffset28 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset28);
        java.time.ZonedDateTime zonedDateTime30 = java.time.ZonedDateTime.of(localDateTime24, (java.time.ZoneId) zoneOffset28);
        java.time.temporal.ChronoField chronoField32 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit33 = chronoField32.getBaseUnit();
        java.time.LocalDateTime localDateTime34 = localDateTime24.plus((long) 1970, temporalUnit33);
        java.time.LocalTime localTime35 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localDateTime34);
        java.time.ZoneOffset zoneOffset39 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime40 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset39);
        java.time.OffsetDateTime offsetDateTime41 = java.time.OffsetDateTime.of(localDate19, localTime35, zoneOffset39);
        boolean boolean42 = offsetDateTime9.isBefore(offsetDateTime41);
        com.google.javascript.jscomp.CompilerOptions compilerOptions43 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions43.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat46 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions43.errorFormat = errorFormat46;
        byte[] byteArray48 = compilerOptions43.inputPropertyMapSerialized;
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode49 = compilerOptions43.getTracerMode();
        compilerOptions43.collapseProperties = false;
        java.io.File file54 = null;
        java.io.File file55 = java.io.File.createTempFile("hi!", "ISO", file54);
        boolean boolean58 = file55.setWritable(false, false);
        java.net.URI uRI59 = file55.toURI();
        java.io.PrintStream printStream60 = new java.io.PrintStream(file55);
        printStream60.print((int) (byte) 0);
        printStream60.print(10.0d);
        printStream60.close();
        com.google.javascript.jscomp.CompilerOptions compilerOptions66 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions66.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat69 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions66.errorFormat = errorFormat69;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy71 = null;
        compilerOptions66.variableRenaming = variableRenamingPolicy71;
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode73 = compilerOptions66.getTracerMode();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder74 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder76 = builder74.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder77 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label78 = builder77.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder79 = builder74.addExtension(builder77);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder80 = builder74.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder81 = builder80.getOptionsBuilder();
        java.io.InputStream inputStream82 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions83 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream82);
        boolean boolean84 = enumOptions83.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder85 = builder81.mergeFrom(enumOptions83);
        byte[] byteArray86 = enumOptions83.toByteArray();
        compilerOptions66.setInputPropertyMapSerialized(byteArray86);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite88 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location89 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(byteArray86, extensionRegistryLite88);
        printStream60.write(byteArray86, 1970, 152);
        compilerOptions43.inputVariableMapSerialized = byteArray86;
        boolean boolean94 = offsetDateTime9.equals((java.lang.Object) compilerOptions43);
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(chronoPeriod1);
        org.junit.Assert.assertTrue("'" + chronoField2 + "' != '" + java.time.temporal.ChronoField.EPOCH_DAY + "'", chronoField2.equals(java.time.temporal.ChronoField.EPOCH_DAY));
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(valueRange10);
        org.junit.Assert.assertNotNull(temporal11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zonedDateTime30);
        org.junit.Assert.assertTrue("'" + chronoField32 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField32.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit33 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit33.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(zoneOffset39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(offsetDateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(errorFormat46);
        org.junit.Assert.assertNull(byteArray48);
        org.junit.Assert.assertTrue("'" + tracerMode49 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode49.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertNotNull(file55);
        org.junit.Assert.assertEquals(file55.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file55.toString(), "/tmp/hi!7010833568179401421ISO");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(uRI59);
        org.junit.Assert.assertNotNull(errorFormat69);
        org.junit.Assert.assertTrue("'" + tracerMode73 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode73.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertTrue("'" + label78 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label78.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(enumOptions83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[]");
        org.junit.Assert.assertNotNull(location89);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test3499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3499");
        byte[] byteArray0 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions2 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray0, extensionRegistryLite1);
        com.google.protobuf.CodedOutputStream codedOutputStream5 = com.google.protobuf.CodedOutputStream.newInstance(byteArray0, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite6 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto7 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray0, extensionRegistryLite6);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite8 = null;
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto9 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.parseFrom(byteArray0, extensionRegistryLite8);
        com.google.protobuf.UnknownFieldSet unknownFieldSet10 = com.google.protobuf.UnknownFieldSet.parseFrom(byteArray0);
        com.google.javascript.jscomp.FunctionInformationMap.Module.Builder builder11 = com.google.javascript.jscomp.FunctionInformationMap.Module.newBuilder();
        java.lang.String str12 = builder11.getCompiledSource();
        java.io.InputStream inputStream13 = null;
        byte[] byteArray14 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite15 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions16 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray14, extensionRegistryLite15);
        com.google.protobuf.DescriptorProtos.UninterpretedOption uninterpretedOption17 = com.google.protobuf.DescriptorProtos.UninterpretedOption.parseFrom(byteArray14);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder18 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label19 = builder18.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto20 = builder18.buildPartial();
        int int21 = fieldDescriptorProto20.getSerializedSize();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder22 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto20);
        java.io.InputStream inputStream23 = null;
        java.io.InputStream inputStream24 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite25 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location26 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream24, extensionRegistryLite25);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder27 = builder22.mergeFrom(inputStream23, extensionRegistryLite25);
        com.google.javascript.jscomp.FunctionInformationMap functionInformationMap28 = com.google.javascript.jscomp.FunctionInformationMap.parseFrom(byteArray14, extensionRegistryLite25);
        com.google.javascript.jscomp.FunctionInformationMap.Module.Builder builder29 = builder11.mergeFrom(inputStream13, extensionRegistryLite25);
        com.google.protobuf.DescriptorProtos.SourceCodeInfo sourceCodeInfo30 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.parseFrom(byteArray0, extensionRegistryLite25);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(methodOptions2);
        org.junit.Assert.assertNotNull(codedOutputStream5);
        org.junit.Assert.assertNotNull(fileDescriptorProto7);
        org.junit.Assert.assertNotNull(serviceDescriptorProto9);
        org.junit.Assert.assertNotNull(unknownFieldSet10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(methodOptions16);
        org.junit.Assert.assertNotNull(uninterpretedOption17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + label19 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label19.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(extensionRegistryLite25);
        org.junit.Assert.assertNotNull(location26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(functionInformationMap28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(sourceCodeInfo30);
    }

    @Test
    public void test3500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest6.test3500");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto enumValueDescriptorProto2 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.parseFrom(inputStream0, extensionRegistryLite1);
        com.google.protobuf.DescriptorProtos.EnumValueOptionsOrBuilder enumValueOptionsOrBuilder3 = enumValueDescriptorProto2.getOptionsOrBuilder();
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder4 = enumValueDescriptorProto2.newBuilderForType();
        com.google.protobuf.Descriptors.Descriptor descriptor5 = builder4.getDescriptorForType();
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder6 = builder4.clear();
        org.junit.Assert.assertNotNull(enumValueDescriptorProto2);
        org.junit.Assert.assertNotNull(enumValueOptionsOrBuilder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(descriptor5);
        org.junit.Assert.assertNotNull(builder6);
    }
}

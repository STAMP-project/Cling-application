import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest3 {

    public static boolean debug = false;

    @Test
    public void test1501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1501");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy5 = null;
        compilerOptions0.variableRenaming = variableRenamingPolicy5;
        compilerOptions0.setSummaryDetailLevel(999);
        compilerOptions0.setInlineVariables(true);
        byte[] byteArray11 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite12 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions13 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray11, extensionRegistryLite12);
        com.google.protobuf.CodedOutputStream codedOutputStream16 = com.google.protobuf.CodedOutputStream.newInstance(byteArray11, (int) (short) 0, 1);
        com.google.protobuf.CodedOutputStream codedOutputStream19 = com.google.protobuf.CodedOutputStream.newInstance(byteArray11, (int) ' ', 0);
        compilerOptions0.inputVariableMapSerialized = byteArray11;
        compilerOptions0.instrumentationTemplate = "/tmp/hi!8954773585912884685ISO";
        org.junit.Assert.assertNotNull(errorFormat3);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(methodOptions13);
        org.junit.Assert.assertNotNull(codedOutputStream16);
        org.junit.Assert.assertNotNull(codedOutputStream19);
    }

    @Test
    public void test1502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1502");
        java.time.zone.ZoneOffsetTransitionRule.TimeDefinition timeDefinition0 = java.time.zone.ZoneOffsetTransitionRule.TimeDefinition.WALL;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        int int6 = localDateTime5.getYear();
        java.time.LocalDate localDate7 = localDateTime5.toLocalDate();
        int int8 = localDateTime5.getNano();
        java.time.Instant instant9 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset13);
        java.time.OffsetDateTime offsetDateTime15 = java.time.OffsetDateTime.ofInstant(instant9, (java.time.ZoneId) zoneOffset13);
        java.time.OffsetDateTime offsetDateTime17 = offsetDateTime15.minusDays((long) (short) 100);
        java.lang.String str18 = offsetDateTime15.toString();
        java.time.ZoneOffset zoneOffset19 = offsetDateTime15.getOffset();
        java.lang.String str20 = zoneOffset19.toString();
        java.time.Instant instant21 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime26 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset25);
        java.time.OffsetDateTime offsetDateTime27 = java.time.OffsetDateTime.ofInstant(instant21, (java.time.ZoneId) zoneOffset25);
        java.time.OffsetDateTime offsetDateTime29 = offsetDateTime27.minusDays((long) (short) 100);
        java.lang.String str30 = offsetDateTime27.toString();
        java.time.ZoneOffset zoneOffset31 = offsetDateTime27.getOffset();
        java.lang.String str32 = zoneOffset31.toString();
        java.time.LocalDateTime localDateTime33 = timeDefinition0.createDateTime(localDateTime5, zoneOffset19, zoneOffset31);
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset37);
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime43 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset42);
        java.time.ZonedDateTime zonedDateTime44 = java.time.ZonedDateTime.of(localDateTime38, (java.time.ZoneId) zoneOffset42);
        java.time.temporal.ChronoField chronoField46 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit47 = chronoField46.getBaseUnit();
        java.time.LocalDateTime localDateTime48 = localDateTime38.plus((long) 1970, temporalUnit47);
        java.time.LocalTime localTime49 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localDateTime48);
        java.time.Period period50 = java.time.Period.ZERO;
        java.time.chrono.ChronoPeriod chronoPeriod51 = period50.normalized();
        java.time.Period period53 = period50.plusMonths((long) ' ');
        java.time.LocalDateTime localDateTime54 = localDateTime48.minus((java.time.temporal.TemporalAmount) period50);
        java.time.Period period56 = period50.withMonths(999);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime57 = localDateTime33.plus((java.time.temporal.TemporalAmount) period56);
        java.time.LocalDateTime localDateTime59 = localDateTime33.withYear((int) '4');
        org.junit.Assert.assertTrue("'" + timeDefinition0 + "' != '" + java.time.zone.ZoneOffsetTransitionRule.TimeDefinition.WALL + "'", timeDefinition0.equals(java.time.zone.ZoneOffsetTransitionRule.TimeDefinition.WALL));
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertNotNull(offsetDateTime17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1970-01-01T00:00:52+00:00:52" + "'", str18, "1970-01-01T00:00:52+00:00:52");
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:52" + "'", str20, "+00:00:52");
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertNotNull(offsetDateTime29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1970-01-01T00:00:52+00:00:52" + "'", str30, "1970-01-01T00:00:52+00:00:52");
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00:52" + "'", str32, "+00:00:52");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(zonedDateTime44);
        org.junit.Assert.assertTrue("'" + chronoField46 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField46.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit47 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit47.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(chronoPeriod51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
    }

    @Test
    public void test1503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1503");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType4 = jSTypeRegistry2.createObjectType(objectType3);
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.jstype.ObjectType objectType8 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry7.createObjectType(objectType8);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair10 = objectType4.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType9);
        boolean boolean11 = objectType9.isNullable();
        com.google.javascript.rhino.Node node13 = objectType9.getPropertyNode("OptionalLong.empty");
        org.junit.Assert.assertNotNull(objectType4);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertNotNull(typePair10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(node13);
    }

    @Test
    public void test1504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1504");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.UNDEFINED_NAMES;
        java.lang.Iterable<com.google.javascript.jscomp.DiagnosticType> diagnosticTypeIterable1 = diagnosticGroup0.getTypes();
        java.lang.String str2 = diagnosticGroup0.toString();
        org.junit.Assert.assertNotNull(diagnosticGroup0);
        org.junit.Assert.assertNotNull(diagnosticTypeIterable1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "DiagnosticGroup<undefinedNames>" + "'", str2, "DiagnosticGroup<undefinedNames>");
    }

    @Test
    public void test1505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1505");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset10);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.of(localDateTime11, (java.time.ZoneId) zoneOffset15);
        java.time.Clock clock18 = java.time.Clock.fixed(instant0, (java.time.ZoneId) zoneOffset15);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.now(clock18);
        java.time.LocalDate localDate20 = java.time.LocalDate.now(clock18);
        com.google.protobuf.Descriptors.Descriptor descriptor21 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto22 = descriptor21.toProto();
        boolean boolean23 = descriptorProto22.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList24 = descriptorProto22.getNestedTypeList();
        int int25 = descriptorProto22.getExtensionRangeCount();
        boolean boolean26 = localDate20.equals((java.lang.Object) descriptorProto22);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder27 = descriptorProto22.newBuilderForType();
        java.util.List<com.google.protobuf.DescriptorProtos.FieldDescriptorProto> fieldDescriptorProtoList28 = builder27.getExtensionList();
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.Builder builder29 = com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.newBuilder();
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder30 = builder27.addExtensionRange(builder29);
        com.google.protobuf.Descriptors.Descriptor descriptor31 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto32 = descriptor31.toProto();
        boolean boolean33 = descriptorProto32.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList34 = descriptorProto32.getNestedTypeList();
        int int35 = descriptorProto32.getExtensionCount();
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder36 = builder30.mergeFrom(descriptorProto32);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder38 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder39 = builder36.addEnumType(1970, builder38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(clock18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(descriptor21);
        org.junit.Assert.assertNotNull(descriptorProto22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(fieldDescriptorProtoList28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(descriptor31);
        org.junit.Assert.assertNotNull(descriptorProto32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test1506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1506");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        int int5 = localDateTime4.getYear();
        java.time.LocalDate localDate6 = localDateTime4.toLocalDate();
        java.time.chrono.Chronology chronology7 = java.time.chrono.Chronology.from((java.time.temporal.TemporalAccessor) localDate6);
        boolean boolean8 = localDate6.isLeapYear();
        java.time.OffsetTime offsetTime9 = java.time.OffsetTime.MAX;
        java.time.Instant instant10 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset14);
        java.time.OffsetDateTime offsetDateTime16 = java.time.OffsetDateTime.ofInstant(instant10, (java.time.ZoneId) zoneOffset14);
        java.time.OffsetDateTime offsetDateTime18 = offsetDateTime16.minusDays((long) (short) 100);
        java.lang.String str19 = offsetDateTime16.toString();
        java.time.LocalTime localTime20 = offsetDateTime16.toLocalTime();
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime26 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset25);
        int int27 = localDateTime26.getYear();
        java.time.Instant instant28 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime33 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset32);
        java.time.OffsetDateTime offsetDateTime34 = java.time.OffsetDateTime.ofInstant(instant28, (java.time.ZoneId) zoneOffset32);
        java.time.Instant instant35 = localDateTime26.toInstant(zoneOffset32);
        java.time.ZoneOffset zoneOffset40 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime41 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset40);
        java.time.ZoneOffset zoneOffset45 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime46 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset45);
        java.time.ZonedDateTime zonedDateTime47 = java.time.ZonedDateTime.of(localDateTime41, (java.time.ZoneId) zoneOffset45);
        java.time.temporal.ChronoField chronoField49 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit50 = chronoField49.getBaseUnit();
        java.time.LocalDateTime localDateTime51 = localDateTime41.plus((long) 1970, temporalUnit50);
        java.time.ZoneOffset zoneOffset56 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime57 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset56);
        java.time.ZoneOffset zoneOffset61 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime62 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset61);
        java.time.ZonedDateTime zonedDateTime63 = java.time.ZonedDateTime.of(localDateTime57, (java.time.ZoneId) zoneOffset61);
        java.time.temporal.ChronoField chronoField65 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit66 = chronoField65.getBaseUnit();
        java.time.LocalDateTime localDateTime67 = localDateTime57.plus((long) 1970, temporalUnit66);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime68 = localDateTime51.minus((long) 43, temporalUnit66);
        java.time.Instant instant69 = instant35.plus((long) 16384, temporalUnit66);
        java.time.LocalTime localTime70 = localTime20.plus((long) 64, temporalUnit66);
        java.time.ZoneOffset zoneOffset75 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime76 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset75);
        java.time.ZoneOffset zoneOffset80 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime81 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset80);
        java.time.ZonedDateTime zonedDateTime82 = java.time.ZonedDateTime.of(localDateTime76, (java.time.ZoneId) zoneOffset80);
        java.time.temporal.ChronoField chronoField84 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit85 = chronoField84.getBaseUnit();
        java.time.LocalDateTime localDateTime86 = localDateTime76.plus((long) 1970, temporalUnit85);
        java.time.LocalTime localTime87 = localTime20.plus(4L, temporalUnit85);
        java.time.OffsetTime offsetTime88 = offsetTime9.truncatedTo(temporalUnit85);
        boolean boolean89 = localDate6.isSupported(temporalUnit85);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(offsetTime9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(offsetDateTime16);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1970-01-01T00:00:52+00:00:52" + "'", str19, "1970-01-01T00:00:52+00:00:52");
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1970 + "'", int27 == 1970);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(zoneOffset40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(zoneOffset45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(zonedDateTime47);
        org.junit.Assert.assertTrue("'" + chronoField49 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField49.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit50 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit50.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(zoneOffset56);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(zoneOffset61);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(zonedDateTime63);
        org.junit.Assert.assertTrue("'" + chronoField65 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField65.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit66 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit66.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime68);
        org.junit.Assert.assertNotNull(instant69);
        org.junit.Assert.assertNotNull(localTime70);
        org.junit.Assert.assertNotNull(zoneOffset75);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(zoneOffset80);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(zonedDateTime82);
        org.junit.Assert.assertTrue("'" + chronoField84 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField84.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit85 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit85.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(localTime87);
        org.junit.Assert.assertNotNull(offsetTime88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test1507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1507");
        com.google.protobuf.Descriptors.Descriptor descriptor0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto1 = descriptor0.toProto();
        boolean boolean2 = descriptorProto1.isInitialized();
        com.google.protobuf.DescriptorProtos.MessageOptions messageOptions3 = descriptorProto1.getOptions();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProtoOrBuilder fieldDescriptorProtoOrBuilder5 = descriptorProto1.getFieldOrBuilder(3);
        org.junit.Assert.assertNotNull(descriptor0);
        org.junit.Assert.assertNotNull(descriptorProto1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(messageOptions3);
        org.junit.Assert.assertNotNull(fieldDescriptorProtoOrBuilder5);
    }

    @Test
    public void test1508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1508");
        java.util.Locale locale0 = java.util.Locale.GERMANY;
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de_DE");
    }

    @Test
    public void test1509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1509");
        com.google.javascript.jscomp.SourceFile.Generator generator1 = null;
        com.google.javascript.jscomp.JSSourceFile jSSourceFile2 = com.google.javascript.jscomp.JSSourceFile.fromGenerator("{}", generator1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = jSSourceFile2.getLine(21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(jSSourceFile2);
    }

    @Test
    public void test1510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1510");
        java.time.Period period0 = java.time.Period.ZERO;
        java.time.chrono.ChronoPeriod chronoPeriod1 = period0.normalized();
        java.time.temporal.ChronoField chronoField2 = java.time.temporal.ChronoField.EPOCH_DAY;
        java.time.Instant instant3 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime8 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset7);
        java.time.OffsetDateTime offsetDateTime9 = java.time.OffsetDateTime.ofInstant(instant3, (java.time.ZoneId) zoneOffset7);
        java.time.temporal.ValueRange valueRange10 = chronoField2.rangeRefinedBy((java.time.temporal.TemporalAccessor) offsetDateTime9);
        java.time.temporal.Temporal temporal11 = period0.subtractFrom((java.time.temporal.Temporal) offsetDateTime9);
        java.time.Period period12 = java.time.Period.ZERO;
        java.time.chrono.ChronoPeriod chronoPeriod13 = period12.normalized();
        java.time.OffsetDateTime offsetDateTime14 = offsetDateTime9.plus((java.time.temporal.TemporalAmount) chronoPeriod13);
        java.time.temporal.ChronoField chronoField15 = java.time.temporal.ChronoField.DAY_OF_YEAR;
        java.time.OffsetDateTime offsetDateTime17 = offsetDateTime14.with((java.time.temporal.TemporalField) chronoField15, 4L);
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(chronoPeriod1);
        org.junit.Assert.assertTrue("'" + chronoField2 + "' != '" + java.time.temporal.ChronoField.EPOCH_DAY + "'", chronoField2.equals(java.time.temporal.ChronoField.EPOCH_DAY));
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(valueRange10);
        org.junit.Assert.assertNotNull(temporal11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(chronoPeriod13);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertTrue("'" + chronoField15 + "' != '" + java.time.temporal.ChronoField.DAY_OF_YEAR + "'", chronoField15.equals(java.time.temporal.ChronoField.DAY_OF_YEAR));
        org.junit.Assert.assertNotNull(offsetDateTime17);
    }

    @Test
    public void test1511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1511");
        java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite> priorityMap0 = new java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite>();
        java.lang.Object obj1 = priorityMap0.clone();
        boolean boolean2 = priorityMap0.isEmpty();
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions3 = com.google.protobuf.DescriptorProtos.EnumValueOptions.getDefaultInstance();
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder4 = com.google.protobuf.DescriptorProtos.EnumValueOptions.newBuilder(enumValueOptions3);
        boolean boolean5 = priorityMap0.contains((java.lang.Object) enumValueOptions3);
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor6 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean7 = enumValueOptions3.hasField(fieldDescriptor6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(enumValueOptions3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1512");
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output2 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream4 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output2, (int) 'a');
        byte[] byteArray5 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite6 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions7 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray5, extensionRegistryLite6);
        output2.write(byteArray5);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder9 = builder0.mergeFrom(byteArray5);
        java.util.List<com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder> builderList10 = builder9.getUninterpretedOptionBuilderList();
        java.util.List<com.google.protobuf.DescriptorProtos.UninterpretedOption> uninterpretedOptionList11 = builder9.getUninterpretedOptionList();
        com.google.protobuf.ByteString.Output output13 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream15 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output13, (int) 'a');
        byte[] byteArray16 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite17 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions18 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray16, extensionRegistryLite17);
        output13.write(byteArray16);
        com.google.protobuf.CodedInputStream codedInputStream22 = com.google.protobuf.CodedInputStream.newInstance(byteArray16, 21, 4);
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions23 = com.google.protobuf.DescriptorProtos.EnumValueOptions.getDefaultInstance();
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder24 = com.google.protobuf.DescriptorProtos.EnumValueOptions.newBuilder(enumValueOptions23);
        java.io.InputStream inputStream25 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder26 = builder24.mergeFrom(inputStream25);
        com.google.protobuf.ByteString byteString27 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto28 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.parseFrom(byteString27);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite29 = null;
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto enumValueDescriptorProto30 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.parseFrom(byteString27, extensionRegistryLite29);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite31 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions32 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteString27, extensionRegistryLite31);
        java.io.InputStream inputStream33 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite34 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location35 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream33, extensionRegistryLite34);
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder36 = builder26.mergeFrom(byteString27, extensionRegistryLite34);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder37 = builder9.mergeFrom(codedInputStream22, extensionRegistryLite34);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 21");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(output2);
        org.junit.Assert.assertNotNull(codedOutputStream4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(methodOptions7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builderList10);
        org.junit.Assert.assertNotNull(uninterpretedOptionList11);
        org.junit.Assert.assertNotNull(output13);
        org.junit.Assert.assertNotNull(codedOutputStream15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[]");
        org.junit.Assert.assertNotNull(methodOptions18);
        org.junit.Assert.assertNotNull(codedInputStream22);
        org.junit.Assert.assertNotNull(enumValueOptions23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(byteString27);
        org.junit.Assert.assertNotNull(methodDescriptorProto28);
        org.junit.Assert.assertNotNull(enumValueDescriptorProto30);
        org.junit.Assert.assertNotNull(methodOptions32);
        org.junit.Assert.assertNotNull(extensionRegistryLite34);
        org.junit.Assert.assertNotNull(location35);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test1513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1513");
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        boolean boolean6 = strSet4.isEmpty();
        java.nio.ByteBuffer byteBuffer8 = java.nio.ByteBuffer.allocate(100);
        boolean boolean9 = strSet4.equals((java.lang.Object) byteBuffer8);
        java.nio.IntBuffer intBuffer10 = byteBuffer8.asIntBuffer();
        double double11 = byteBuffer8.getDouble();
        java.nio.ByteBuffer byteBuffer12 = byteBuffer8.asReadOnlyBuffer();
        boolean boolean13 = byteBuffer8.hasArray();
        short short14 = byteBuffer8.getShort();
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        boolean boolean21 = strSet19.isEmpty();
        java.nio.ByteBuffer byteBuffer23 = java.nio.ByteBuffer.allocate(100);
        boolean boolean24 = strSet19.equals((java.lang.Object) byteBuffer23);
        java.nio.IntBuffer intBuffer25 = byteBuffer23.asIntBuffer();
        double double26 = byteBuffer23.getDouble();
        java.nio.ByteBuffer byteBuffer27 = byteBuffer23.asReadOnlyBuffer();
        boolean boolean28 = byteBuffer23.hasArray();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer29 = byteBuffer8.put(byteBuffer23);
            org.junit.Assert.fail("Expected exception of type java.nio.BufferOverflowException; message: null");
        } catch (java.nio.BufferOverflowException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(intBuffer10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + short14 + "' != '" + (short) 0 + "'", short14 == (short) 0);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intBuffer25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.0d + "'", double26 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test1514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1514");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasThisType();
        java.lang.String str2 = jSDocInfo0.toString();
        boolean boolean3 = jSDocInfo0.isInterface();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getBaseType();
        int int5 = jSDocInfo0.getParameterCount();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "JSDocInfo" + "'", str2, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test1515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1515");
        com.google.javascript.jscomp.FunctionInformationMap.Module.Builder builder0 = com.google.javascript.jscomp.FunctionInformationMap.Module.newBuilder();
        boolean boolean1 = builder0.hasName();
        java.lang.String str2 = builder0.getName();
        java.io.InputStream inputStream3 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean4 = builder0.mergeDelimitedFrom(inputStream3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test1516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1516");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder3 = builder2.clearSourceCodeInfo();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder4 = builder2.getSourceCodeInfoBuilder();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo sourceCodeInfo5 = builder4.getDefaultInstanceForType();
        int int6 = sourceCodeInfo5.getSerializedSize();
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.SourceCodeInfo.LocationOrBuilder locationOrBuilder8 = sourceCodeInfo5.getLocationOrBuilder(42);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 42");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(sourceCodeInfo5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test1517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1517");
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.of((long) (-1));
        java.util.stream.LongStream longStream2 = longStream1.distinct();
        java.util.stream.DoubleStream doubleStream3 = longStream2.asDoubleStream();
        boolean boolean4 = doubleStream3.isParallel();
        java.util.function.DoublePredicate doublePredicate5 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean6 = doubleStream3.allMatch(doublePredicate5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(doubleStream3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1518");
        java.util.Locale locale4 = new java.util.Locale("", "NUMBER 52.0 0", "hi!");
        java.util.Locale locale8 = new java.util.Locale("", "NUMBER 52.0 0", "hi!");
        java.lang.String str9 = locale4.getDisplayLanguage(locale8);
        java.text.MessageFormat messageFormat10 = new java.text.MessageFormat("Named type with empty name component", locale8);
        java.lang.String str11 = locale8.toLanguageTag();
        org.junit.Assert.assertEquals(locale4.toString(), "_NUMBER 52.0 0_hi!");
        org.junit.Assert.assertEquals(locale8.toString(), "_NUMBER 52.0 0_hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "und" + "'", str11, "und");
    }

    @Test
    public void test1519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1519");
        java.io.File file2 = null;
        java.io.File file3 = java.io.File.createTempFile("hi!", "ISO", file2);
        boolean boolean6 = file3.setWritable(false, false);
        java.net.URI uRI7 = file3.toURI();
        java.io.PrintStream printStream8 = new java.io.PrintStream(file3);
        printStream8.print((int) (byte) 0);
        printStream8.print(10.0d);
        printStream8.close();
        printStream8.println("JSC_OPTIMIZE_LOOP_ERROR");
        printStream8.println((double) 55);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file3.toString(), "/tmp/hi!2246260503225759124ISO");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(uRI7);
    }

    @Test
    public void test1520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1520");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label1 = builder0.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto2 = builder0.buildPartial();
        int int3 = fieldDescriptorProto2.getSerializedSize();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder4 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto2);
        com.google.protobuf.DescriptorProtos.FieldOptions fieldOptions5 = builder4.getOptions();
        java.lang.String str6 = fieldOptions5.getExperimentalMapKey();
        boolean boolean7 = fieldOptions5.getDeprecated();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + label1 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label1.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(fieldOptions5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1521");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean4 = node3.isStringKey();
        boolean boolean5 = node3.isThrow();
        boolean boolean6 = node3.isVarArgs();
        boolean boolean7 = node3.isHook();
        com.google.javascript.rhino.Node node8 = node3.cloneNode();
        boolean boolean9 = node8.isAssignAdd();
        boolean boolean10 = node8.isAssign();
        boolean boolean11 = node8.isAdd();
        boolean boolean12 = node8.isBlock();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1522");
        java.io.File file2 = null;
        java.io.File file3 = java.io.File.createTempFile("hi!", "ISO", file2);
        boolean boolean6 = file3.setWritable(false, false);
        java.net.URI uRI7 = file3.toURI();
        java.io.PrintStream printStream8 = new java.io.PrintStream(file3);
        com.google.javascript.jscomp.Compiler compiler9 = new com.google.javascript.jscomp.Compiler(printStream8);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.type.ReverseAbstractInterpreter reverseAbstractInterpreter10 = compiler9.getReverseAbstractInterpreter();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file3.toString(), "/tmp/hi!2737091590658313427ISO");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(uRI7);
    }

    @Test
    public void test1523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1523");
        int int0 = java.util.Spliterator.SORTED;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 4 + "'", int0 == 4);
    }

    @Test
    public void test1524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1524");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        java.nio.charset.CodingErrorAction codingErrorAction2 = charsetDecoder1.malformedInputAction();
        java.nio.charset.CodingErrorAction codingErrorAction3 = charsetDecoder1.unmappableCharacterAction();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet8 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet8, strArray7);
        boolean boolean10 = strSet8.isEmpty();
        java.nio.ByteBuffer byteBuffer12 = java.nio.ByteBuffer.allocate(100);
        boolean boolean13 = strSet8.equals((java.lang.Object) byteBuffer12);
        java.nio.IntBuffer intBuffer14 = byteBuffer12.asIntBuffer();
        double double15 = byteBuffer12.getDouble();
        java.nio.ByteBuffer byteBuffer16 = byteBuffer12.asReadOnlyBuffer();
        java.nio.CharBuffer charBuffer17 = charsetDecoder1.decode(byteBuffer16);
        char char19 = charBuffer17.get(6);
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertNotNull(codingErrorAction2);
        org.junit.Assert.assertNotNull(codingErrorAction3);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intBuffer14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(charBuffer17);
        org.junit.Assert.assertTrue("'" + char19 + "' != '" + '\000' + "'", char19 == '\000');
    }

    @Test
    public void test1525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1525");
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder1 = builder0.clearCcGenericServices();
        boolean boolean2 = builder0.isInitialized();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder4 = builder0.setCcGenericServices(true);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder5 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label6 = builder5.getLabel();
        com.google.protobuf.ByteString byteString7 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder8 = builder5.mergeFrom(byteString7);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite9 = null;
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder10 = builder4.mergeFrom(byteString7, extensionRegistryLite9);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite11 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions12 = com.google.protobuf.DescriptorProtos.EnumValueOptions.parseFrom(byteString7, extensionRegistryLite11);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite13 = null;
        com.google.protobuf.DescriptorProtos.MessageOptions messageOptions14 = com.google.protobuf.DescriptorProtos.MessageOptions.parseFrom(byteString7, extensionRegistryLite13);
        int int15 = byteString7.size();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + label6 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label6.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(byteString7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(enumValueOptions12);
        org.junit.Assert.assertNotNull(messageOptions14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test1526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1526");
        java.util.logging.Level level0 = java.util.logging.Level.WARNING;
        java.lang.String str1 = level0.toString();
        java.lang.String str2 = level0.toString();
        org.junit.Assert.assertNotNull(level0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "WARNING" + "'", str1, "WARNING");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "WARNING" + "'", str2, "WARNING");
    }

    @Test
    public void test1527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1527");
        java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite> priorityMap0 = new java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite>();
        java.lang.Object obj1 = priorityMap0.clone();
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder2 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.newBuilder();
        boolean boolean3 = priorityMap0.containsValue((java.lang.Object) builder2);
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder5 = builder2.setName("java.nio.ByteBufferAsDoubleBufferB[pos=0 lim=12 cap=12]");
        boolean boolean6 = builder5.hasOptions();
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "{}");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1528");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset10);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.of(localDateTime11, (java.time.ZoneId) zoneOffset15);
        java.time.Clock clock18 = java.time.Clock.fixed(instant0, (java.time.ZoneId) zoneOffset15);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.now(clock18);
        java.time.LocalDate localDate20 = java.time.LocalDate.now(clock18);
        com.google.protobuf.Descriptors.Descriptor descriptor21 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto22 = descriptor21.toProto();
        boolean boolean23 = descriptorProto22.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList24 = descriptorProto22.getNestedTypeList();
        int int25 = descriptorProto22.getExtensionRangeCount();
        boolean boolean26 = localDate20.equals((java.lang.Object) descriptorProto22);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder27 = descriptorProto22.newBuilderForType();
        java.util.List<com.google.protobuf.DescriptorProtos.FieldDescriptorProto> fieldDescriptorProtoList28 = builder27.getExtensionList();
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder29 = builder27.addNestedTypeBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder30 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder32 = builder30.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder33 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label34 = builder33.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder35 = builder30.addExtension(builder33);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder36 = builder30.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder37 = builder36.getOptionsBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder38 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder40 = builder38.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder41 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label42 = builder41.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder43 = builder38.addExtension(builder41);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder44 = builder38.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder45 = builder44.getOptionsBuilder();
        java.io.InputStream inputStream46 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions47 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream46);
        boolean boolean48 = enumOptions47.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder49 = builder45.mergeFrom(enumOptions47);
        com.google.protobuf.UnknownFieldSet unknownFieldSet50 = builder45.getUnknownFields();
        com.google.protobuf.CodedOutputStream codedOutputStream51 = null;
        unknownFieldSet50.writeTo(codedOutputStream51);
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder53 = builder37.setUnknownFields(unknownFieldSet50);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder54 = builder27.setUnknownFields(unknownFieldSet50);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder55 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder57 = builder55.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder58 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label59 = builder58.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder60 = builder55.addExtension(builder58);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder61 = builder55.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder62 = builder61.getOptionsBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder63 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder65 = builder63.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder66 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label67 = builder66.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder68 = builder63.addExtension(builder66);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder69 = builder63.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder70 = builder69.getOptionsBuilder();
        java.io.InputStream inputStream71 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions72 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream71);
        boolean boolean73 = enumOptions72.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder74 = builder70.mergeFrom(enumOptions72);
        com.google.protobuf.UnknownFieldSet unknownFieldSet75 = builder70.getUnknownFields();
        com.google.protobuf.CodedOutputStream codedOutputStream76 = null;
        unknownFieldSet75.writeTo(codedOutputStream76);
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder78 = builder62.setUnknownFields(unknownFieldSet75);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto79 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.getDefaultInstance();
        boolean boolean80 = methodDescriptorProto79.hasOutputType();
        byte[] byteArray81 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite82 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions83 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray81, extensionRegistryLite82);
        com.google.protobuf.CodedOutputStream codedOutputStream86 = com.google.protobuf.CodedOutputStream.newInstance(byteArray81, (int) (short) 0, 1);
        methodDescriptorProto79.writeTo(codedOutputStream86);
        unknownFieldSet75.writeTo(codedOutputStream86);
        unknownFieldSet50.writeAsMessageSetTo(codedOutputStream86);
        com.google.protobuf.UnknownFieldSet.Builder builder90 = unknownFieldSet50.newBuilderForType();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(clock18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(descriptor21);
        org.junit.Assert.assertNotNull(descriptorProto22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(fieldDescriptorProtoList28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + label34 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label34.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + label42 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label42.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(enumOptions47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(unknownFieldSet50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + label59 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label59.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertTrue("'" + label67 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label67.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(enumOptions72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(unknownFieldSet75);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(methodDescriptorProto79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertNotNull(methodOptions83);
        org.junit.Assert.assertNotNull(codedOutputStream86);
        org.junit.Assert.assertNotNull(builder90);
    }

    @Test
    public void test1529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1529");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("1970-03-24T02:02:32");
        java.util.Locale locale2 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.text.MessageFormat messageFormat5 = new java.text.MessageFormat("hi!");
        java.text.Format[] formatArray6 = messageFormat5.getFormatsByArgumentIndex();
        java.io.PrintWriter printWriter7 = printWriter1.format(locale2, "file", (java.lang.Object[]) formatArray6);
        printWriter1.println(999);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(formatArray6);
        org.junit.Assert.assertNotNull(printWriter7);
    }

    @Test
    public void test1530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1530");
        java.io.InputStream inputStream1 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int2 = com.google.protobuf.CodedInputStream.readRawVarint32(1970, inputStream1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1531");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto2 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.parseFrom(inputStream0, extensionRegistryLite1);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto3 = fieldDescriptorProto2.getDefaultInstanceForType();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type type4 = fieldDescriptorProto3.getType();
        java.lang.String str5 = fieldDescriptorProto3.getTypeName();
        org.junit.Assert.assertNotNull(fieldDescriptorProto2);
        org.junit.Assert.assertNotNull(fieldDescriptorProto3);
        org.junit.Assert.assertTrue("'" + type4 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type.TYPE_DOUBLE + "'", type4.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type.TYPE_DOUBLE));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test1532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1532");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.of(localDateTime4, (java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime10.plusDays((long) '4');
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset16);
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset21);
        java.time.ZonedDateTime zonedDateTime23 = java.time.ZonedDateTime.of(localDateTime17, (java.time.ZoneId) zoneOffset21);
        java.time.temporal.ChronoField chronoField24 = java.time.temporal.ChronoField.OFFSET_SECONDS;
        java.time.temporal.TemporalUnit temporalUnit25 = chronoField24.getRangeUnit();
        long long27 = chronoField24.checkValidValue((long) 2);
        long long28 = zonedDateTime23.getLong((java.time.temporal.TemporalField) chronoField24);
        java.time.temporal.ValueRange valueRange29 = zonedDateTime12.range((java.time.temporal.TemporalField) chronoField24);
        long long30 = valueRange29.getMinimum();
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zonedDateTime23);
        org.junit.Assert.assertTrue("'" + chronoField24 + "' != '" + java.time.temporal.ChronoField.OFFSET_SECONDS + "'", chronoField24.equals(java.time.temporal.ChronoField.OFFSET_SECONDS));
        org.junit.Assert.assertTrue("'" + temporalUnit25 + "' != '" + java.time.temporal.ChronoUnit.FOREVER + "'", temporalUnit25.equals(java.time.temporal.ChronoUnit.FOREVER));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 2L + "'", long27 == 2L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 52L + "'", long28 == 52L);
        org.junit.Assert.assertNotNull(valueRange29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-64800L) + "'", long30 == (-64800L));
    }

    @Test
    public void test1533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1533");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy5 = null;
        compilerOptions0.variableRenaming = variableRenamingPolicy5;
        compilerOptions0.setSummaryDetailLevel(999);
        boolean boolean9 = compilerOptions0.getInferTypes();
        compilerOptions0.resetWarningsGuard();
        boolean boolean11 = compilerOptions0.collapseVariableDeclarations;
        compilerOptions0.setDefineToNumberLiteral("x-windows-iso2022jp", 8);
        org.junit.Assert.assertNotNull(errorFormat3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1534");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType4 = jSTypeRegistry2.createObjectType(objectType3);
        com.google.javascript.rhino.jstype.JSType jSType5 = objectType4.unboxesTo();
        org.junit.Assert.assertNotNull(objectType4);
        org.junit.Assert.assertNull(jSType5);
    }

    @Test
    public void test1535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1535");
        com.google.protobuf.Descriptors.Descriptor descriptor0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto1 = descriptor0.toProto();
        boolean boolean2 = descriptorProto1.isInitialized();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto3 = descriptorProto1.getDefaultInstanceForType();
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.EnumDescriptorProtoOrBuilder enumDescriptorProtoOrBuilder5 = descriptorProto1.getEnumTypeOrBuilder(152);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 152");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptor0);
        org.junit.Assert.assertNotNull(descriptorProto1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(descriptorProto3);
    }

    @Test
    public void test1536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1536");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) ' ');
        boolean boolean2 = charBuffer1.isDirect();
        int int3 = charBuffer1.arrayOffset();
        java.nio.Buffer buffer4 = charBuffer1.rewind();
        java.lang.String str5 = charBuffer1.toString();
        boolean boolean6 = charBuffer1.hasArray();
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(buffer4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + "'", str5, "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test1537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1537");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        int int5 = localDateTime4.getYear();
        java.time.LocalDate localDate6 = localDateTime4.toLocalDate();
        java.time.LocalDateTime localDateTime8 = localDateTime4.plusHours((long) (short) 10);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test1538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1538");
        com.google.protobuf.Descriptors.Descriptor descriptor0 = com.google.protobuf.DescriptorProtos.FileOptions.Builder.getDescriptor();
        org.junit.Assert.assertNotNull(descriptor0);
    }

    @Test
    public void test1539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1539");
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative0 = com.google.javascript.rhino.jstype.JSTypeNative.TYPE_ERROR_FUNCTION_TYPE;
        org.junit.Assert.assertTrue("'" + jSTypeNative0 + "' != '" + com.google.javascript.rhino.jstype.JSTypeNative.TYPE_ERROR_FUNCTION_TYPE + "'", jSTypeNative0.equals(com.google.javascript.rhino.jstype.JSTypeNative.TYPE_ERROR_FUNCTION_TYPE));
    }

    @Test
    public void test1540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1540");
        java.time.Month month0 = java.time.Month.AUGUST;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset9);
        java.time.ZonedDateTime zonedDateTime11 = java.time.ZonedDateTime.of(localDateTime5, (java.time.ZoneId) zoneOffset9);
        java.time.ZonedDateTime zonedDateTime13 = zonedDateTime11.minusSeconds((long) '#');
        java.time.OffsetDateTime offsetDateTime14 = zonedDateTime11.toOffsetDateTime();
        java.time.OffsetDateTime offsetDateTime16 = offsetDateTime14.plusNanos(3600000L);
        java.time.Instant instant17 = java.time.Instant.from((java.time.temporal.TemporalAccessor) offsetDateTime14);
        java.time.temporal.Temporal temporal18 = month0.adjustInto((java.time.temporal.Temporal) offsetDateTime14);
        java.time.format.TextStyle textStyle19 = java.time.format.TextStyle.FULL;
        java.util.Locale locale23 = new java.util.Locale("", "NUMBER 52.0 0", "hi!");
        java.time.format.DecimalStyle decimalStyle24 = java.time.format.DecimalStyle.of(locale23);
        java.lang.String str25 = month0.getDisplayName(textStyle19, locale23);
        java.time.format.TextStyle textStyle26 = textStyle19.asStandalone();
        boolean boolean27 = textStyle19.isStandalone();
        org.junit.Assert.assertTrue("'" + month0 + "' != '" + java.time.Month.AUGUST + "'", month0.equals(java.time.Month.AUGUST));
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(zonedDateTime13);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertNotNull(offsetDateTime16);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(temporal18);
        org.junit.Assert.assertTrue("'" + textStyle19 + "' != '" + java.time.format.TextStyle.FULL + "'", textStyle19.equals(java.time.format.TextStyle.FULL));
        org.junit.Assert.assertEquals(locale23.toString(), "_NUMBER 52.0 0_hi!");
        org.junit.Assert.assertNotNull(decimalStyle24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "August" + "'", str25, "August");
        org.junit.Assert.assertTrue("'" + textStyle26 + "' != '" + java.time.format.TextStyle.FULL_STANDALONE + "'", textStyle26.equals(java.time.format.TextStyle.FULL_STANDALONE));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test1541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1541");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder3 = builder2.clearSourceCodeInfo();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder4 = builder3.clearService();
        int int5 = builder4.getMessageTypeCount();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test1542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1542");
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        boolean boolean6 = strSet4.isEmpty();
        java.nio.ByteBuffer byteBuffer8 = java.nio.ByteBuffer.allocate(100);
        boolean boolean9 = strSet4.equals((java.lang.Object) byteBuffer8);
        java.nio.IntBuffer intBuffer10 = byteBuffer8.asIntBuffer();
        double double11 = byteBuffer8.getDouble();
        java.nio.ByteBuffer byteBuffer12 = byteBuffer8.asReadOnlyBuffer();
        boolean boolean13 = byteBuffer8.hasArray();
        short short14 = byteBuffer8.getShort();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder15 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder17 = builder15.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder18 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label19 = builder18.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder20 = builder15.addExtension(builder18);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder21 = builder15.addEnumTypeBuilder();
        com.google.protobuf.ByteString.Output output23 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream25 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output23, (int) 'a');
        byte[] byteArray26 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite27 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions28 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray26, extensionRegistryLite27);
        output23.write(byteArray26);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder30 = builder15.mergeFrom(byteArray26);
        byte[] byteArray31 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite32 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions33 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray31, extensionRegistryLite32);
        com.google.protobuf.CodedOutputStream codedOutputStream36 = com.google.protobuf.CodedOutputStream.newInstance(byteArray31, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite37 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto38 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray31, extensionRegistryLite37);
        com.google.protobuf.CodedOutputStream codedOutputStream39 = com.google.protobuf.CodedOutputStream.newInstance(byteArray31);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder40 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label41 = builder40.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto42 = builder40.buildPartial();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder43 = fieldDescriptorProto42.newBuilderForType();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder44 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto42);
        java.io.File file47 = null;
        java.io.File file48 = java.io.File.createTempFile("hi!", "ISO", file47);
        boolean boolean51 = file48.setWritable(false, false);
        java.net.URI uRI52 = file48.toURI();
        java.io.PrintStream printStream53 = new java.io.PrintStream(file48);
        printStream53.print((int) (byte) 0);
        printStream53.print(10.0d);
        printStream53.close();
        java.lang.String[] strArray62 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet63 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet63, strArray62);
        boolean boolean65 = strSet63.isEmpty();
        java.nio.ByteBuffer byteBuffer67 = java.nio.ByteBuffer.allocate(100);
        boolean boolean68 = strSet63.equals((java.lang.Object) byteBuffer67);
        java.nio.IntBuffer intBuffer69 = byteBuffer67.asIntBuffer();
        double double70 = byteBuffer67.getDouble();
        java.nio.ByteBuffer byteBuffer73 = byteBuffer67.put((int) (short) 1, (byte) 1);
        byte[] byteArray74 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite75 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions76 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray74, extensionRegistryLite75);
        com.google.protobuf.CodedOutputStream codedOutputStream79 = com.google.protobuf.CodedOutputStream.newInstance(byteArray74, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite80 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto81 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray74, extensionRegistryLite80);
        com.google.protobuf.CodedOutputStream codedOutputStream82 = com.google.protobuf.CodedOutputStream.newInstance(byteArray74);
        java.nio.ByteBuffer byteBuffer83 = byteBuffer67.get(byteArray74);
        printStream53.write(byteArray74, (int) '/', (int) (byte) 1);
        java.io.InputStream inputStream87 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite88 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location89 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream87, extensionRegistryLite88);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder90 = builder44.mergeFrom(byteArray74, extensionRegistryLite88);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto91 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray31, extensionRegistryLite88);
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto enumValueDescriptorProto92 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.parseFrom(byteArray26, extensionRegistryLite88);
        java.nio.ByteBuffer byteBuffer93 = byteBuffer8.get(byteArray26);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(intBuffer10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + short14 + "' != '" + (short) 0 + "'", short14 == (short) 0);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + label19 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label19.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(output23);
        org.junit.Assert.assertNotNull(codedOutputStream25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[]");
        org.junit.Assert.assertNotNull(methodOptions28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(methodOptions33);
        org.junit.Assert.assertNotNull(codedOutputStream36);
        org.junit.Assert.assertNotNull(fileDescriptorProto38);
        org.junit.Assert.assertNotNull(codedOutputStream39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + label41 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label41.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(file48);
        org.junit.Assert.assertEquals(file48.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file48.toString(), "/tmp/hi!4554016379830398987ISO");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(uRI52);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(byteBuffer67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(intBuffer69);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer73);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[]");
        org.junit.Assert.assertNotNull(methodOptions76);
        org.junit.Assert.assertNotNull(codedOutputStream79);
        org.junit.Assert.assertNotNull(fileDescriptorProto81);
        org.junit.Assert.assertNotNull(codedOutputStream82);
        org.junit.Assert.assertNotNull(byteBuffer83);
        org.junit.Assert.assertNotNull(extensionRegistryLite88);
        org.junit.Assert.assertNotNull(location89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(fileDescriptorProto91);
        org.junit.Assert.assertNotNull(enumValueDescriptorProto92);
        org.junit.Assert.assertNotNull(byteBuffer93);
    }

    @Test
    public void test1543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1543");
        java.io.InputStream inputStream0 = null;
        java.io.InputStream inputStream1 = null;
        byte[] byteArray2 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite3 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions4 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray2, extensionRegistryLite3);
        com.google.protobuf.CodedOutputStream codedOutputStream7 = com.google.protobuf.CodedOutputStream.newInstance(byteArray2, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite8 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto9 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray2, extensionRegistryLite8);
        com.google.protobuf.CodedOutputStream codedOutputStream10 = com.google.protobuf.CodedOutputStream.newInstance(byteArray2);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder11 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label12 = builder11.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto13 = builder11.buildPartial();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder14 = fieldDescriptorProto13.newBuilderForType();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder15 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto13);
        java.io.File file18 = null;
        java.io.File file19 = java.io.File.createTempFile("hi!", "ISO", file18);
        boolean boolean22 = file19.setWritable(false, false);
        java.net.URI uRI23 = file19.toURI();
        java.io.PrintStream printStream24 = new java.io.PrintStream(file19);
        printStream24.print((int) (byte) 0);
        printStream24.print(10.0d);
        printStream24.close();
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        boolean boolean36 = strSet34.isEmpty();
        java.nio.ByteBuffer byteBuffer38 = java.nio.ByteBuffer.allocate(100);
        boolean boolean39 = strSet34.equals((java.lang.Object) byteBuffer38);
        java.nio.IntBuffer intBuffer40 = byteBuffer38.asIntBuffer();
        double double41 = byteBuffer38.getDouble();
        java.nio.ByteBuffer byteBuffer44 = byteBuffer38.put((int) (short) 1, (byte) 1);
        byte[] byteArray45 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite46 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions47 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray45, extensionRegistryLite46);
        com.google.protobuf.CodedOutputStream codedOutputStream50 = com.google.protobuf.CodedOutputStream.newInstance(byteArray45, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite51 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto52 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray45, extensionRegistryLite51);
        com.google.protobuf.CodedOutputStream codedOutputStream53 = com.google.protobuf.CodedOutputStream.newInstance(byteArray45);
        java.nio.ByteBuffer byteBuffer54 = byteBuffer38.get(byteArray45);
        printStream24.write(byteArray45, (int) '/', (int) (byte) 1);
        java.io.InputStream inputStream58 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite59 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location60 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream58, extensionRegistryLite59);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder61 = builder15.mergeFrom(byteArray45, extensionRegistryLite59);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto62 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray2, extensionRegistryLite59);
        com.google.protobuf.DescriptorProtos.UninterpretedOption uninterpretedOption63 = com.google.protobuf.DescriptorProtos.UninterpretedOption.parseFrom(inputStream1, extensionRegistryLite59);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location64 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseDelimitedFrom(inputStream0, extensionRegistryLite59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(methodOptions4);
        org.junit.Assert.assertNotNull(codedOutputStream7);
        org.junit.Assert.assertNotNull(fileDescriptorProto9);
        org.junit.Assert.assertNotNull(codedOutputStream10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + label12 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label12.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(file19);
        org.junit.Assert.assertEquals(file19.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file19.toString(), "/tmp/hi!3424112102468412318ISO");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(uRI23);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(byteBuffer38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(intBuffer40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[]");
        org.junit.Assert.assertNotNull(methodOptions47);
        org.junit.Assert.assertNotNull(codedOutputStream50);
        org.junit.Assert.assertNotNull(fileDescriptorProto52);
        org.junit.Assert.assertNotNull(codedOutputStream53);
        org.junit.Assert.assertNotNull(byteBuffer54);
        org.junit.Assert.assertNotNull(extensionRegistryLite59);
        org.junit.Assert.assertNotNull(location60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(fileDescriptorProto62);
        org.junit.Assert.assertNotNull(uninterpretedOption63);
    }

    @Test
    public void test1544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1544");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType4 = jSTypeRegistry2.createObjectType(objectType3);
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.jstype.ObjectType objectType8 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry7.createObjectType(objectType8);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair10 = objectType4.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType9);
        boolean boolean11 = objectType9.isTemplateType();
        com.google.javascript.rhino.jstype.EnumType enumType12 = objectType9.toMaybeEnumType();
        com.google.common.base.Predicate<com.google.javascript.rhino.jstype.JSType> jSTypePredicate13 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean14 = enumType12.setValidator(jSTypePredicate13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectType4);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertNotNull(typePair10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(enumType12);
    }

    @Test
    public void test1545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1545");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        java.lang.String[] strArray11 = new java.lang.String[] { "South Korea", "Unknown class name", "ISO", "OffsetSeconds", ":" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        compilerOptions0.setReplaceStringsConfiguration("1970-01-01+00:00:52", (java.util.List<java.lang.String>) strList12);
        compilerOptions0.lineBreak = false;
        compilerOptions0.lineBreak = false;
        com.google.javascript.jscomp.AnonymousFunctionNamingPolicy anonymousFunctionNamingPolicy19 = com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF;
        compilerOptions0.setAnonymousFunctionNaming(anonymousFunctionNamingPolicy19);
        compilerOptions0.setIgnoreCajaProperties(true);
        org.junit.Assert.assertNotNull(errorFormat3);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + anonymousFunctionNamingPolicy19 + "' != '" + com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF + "'", anonymousFunctionNamingPolicy19.equals(com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF));
    }

    @Test
    public void test1546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1546");
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        boolean boolean6 = strSet4.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream7 = strSet4.stream();
        java.util.stream.Stream<java.lang.String> strStream8 = strStream7.distinct();
        java.lang.Runnable runnable9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Stream<java.lang.String> strStream10 = strStream8.onClose(runnable9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strStream7);
        org.junit.Assert.assertNotNull(strStream8);
    }

    @Test
    public void test1547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1547");
        long[] longArray5 = new long[] { 97, 57600000000000L, 28147497671065600L, 52, 37 };
        java.nio.LongBuffer longBuffer6 = java.nio.LongBuffer.wrap(longArray5);
        java.nio.LongBuffer longBuffer7 = longBuffer6.asReadOnlyBuffer();
        int int8 = longBuffer6.arrayOffset();
        long[] longArray14 = new long[] { 97, 57600000000000L, 28147497671065600L, 52, 37 };
        java.nio.LongBuffer longBuffer15 = java.nio.LongBuffer.wrap(longArray14);
        int int16 = longBuffer15.arrayOffset();
        int int17 = longBuffer6.compareTo(longBuffer15);
        long[] longArray23 = new long[] { 97, 57600000000000L, 28147497671065600L, 52, 37 };
        java.nio.LongBuffer longBuffer24 = java.nio.LongBuffer.wrap(longArray23);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.LongBuffer longBuffer27 = longBuffer6.put(longArray23, 256, 16384);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[97, 57600000000000, 28147497671065600, 52, 37]");
        org.junit.Assert.assertNotNull(longBuffer6);
        org.junit.Assert.assertNotNull(longBuffer7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[97, 57600000000000, 28147497671065600, 52, 37]");
        org.junit.Assert.assertNotNull(longBuffer15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(longArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray23), "[97, 57600000000000, 28147497671065600, 52, 37]");
        org.junit.Assert.assertNotNull(longBuffer24);
    }

    @Test
    public void test1548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1548");
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions0 = com.google.protobuf.DescriptorProtos.EnumValueOptions.getDefaultInstance();
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder1 = com.google.protobuf.DescriptorProtos.EnumValueOptions.newBuilder(enumValueOptions0);
        com.google.javascript.jscomp.CompilerOptions compilerOptions2 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions2.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat5 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions2.errorFormat = errorFormat5;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy7 = null;
        compilerOptions2.variableRenaming = variableRenamingPolicy7;
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode9 = compilerOptions2.getTracerMode();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder10 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder12 = builder10.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder13 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label14 = builder13.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder15 = builder10.addExtension(builder13);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder16 = builder10.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder17 = builder16.getOptionsBuilder();
        java.io.InputStream inputStream18 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions19 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream18);
        boolean boolean20 = enumOptions19.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder21 = builder17.mergeFrom(enumOptions19);
        byte[] byteArray22 = enumOptions19.toByteArray();
        compilerOptions2.setInputPropertyMapSerialized(byteArray22);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite24 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo sourceCodeInfo25 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.parseFrom(byteArray22, extensionRegistryLite24);
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder26 = builder1.mergeFrom(byteArray22);
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder27 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder28 = builder27.clearCcGenericServices();
        boolean boolean29 = builder27.isInitialized();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder31 = builder27.setCcGenericServices(true);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder32 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label33 = builder32.getLabel();
        com.google.protobuf.ByteString byteString34 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder35 = builder32.mergeFrom(byteString34);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite36 = null;
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder37 = builder31.mergeFrom(byteString34, extensionRegistryLite36);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite38 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions39 = com.google.protobuf.DescriptorProtos.EnumValueOptions.parseFrom(byteString34, extensionRegistryLite38);
        java.util.List<com.google.protobuf.DescriptorProtos.UninterpretedOption> uninterpretedOptionList40 = enumValueOptions39.getUninterpretedOptionList();
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder41 = builder26.mergeFrom(enumValueOptions39);
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor42 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int43 = enumValueOptions39.getRepeatedFieldCount(fieldDescriptor42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(enumValueOptions0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(errorFormat5);
        org.junit.Assert.assertTrue("'" + tracerMode9 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode9.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + label14 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label14.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(enumOptions19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(sourceCodeInfo25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + label33 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label33.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(byteString34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(enumValueOptions39);
        org.junit.Assert.assertNotNull(uninterpretedOptionList40);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test1549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1549");
        com.google.protobuf.DescriptorProtos.MessageOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.MessageOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.MessageOptions messageOptions1 = builder0.getDefaultInstanceForType();
        com.google.protobuf.DescriptorProtos.MessageOptions.Builder builder2 = messageOptions1.newBuilderForType();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(messageOptions1);
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test1550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1550");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean4 = node3.isStringKey();
        boolean boolean5 = node3.isTrue();
        com.google.javascript.rhino.InputId inputId7 = new com.google.javascript.rhino.InputId("NUMBER 52.0 0");
        node3.setInputId(inputId7);
        com.google.javascript.jscomp.SourceAst sourceAst9 = null;
        com.google.javascript.rhino.InputId inputId10 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput12 = new com.google.javascript.jscomp.CompilerInput(sourceAst9, inputId10, true);
        java.io.PrintStream printStream13 = null;
        com.google.javascript.jscomp.Compiler compiler14 = new com.google.javascript.jscomp.Compiler(printStream13);
        com.google.javascript.jscomp.ErrorManager errorManager15 = compiler14.getErrorManager();
        compilerInput12.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler14);
        com.google.javascript.jscomp.CodingConvention codingConvention17 = compiler14.getCodingConvention();
        boolean boolean18 = inputId7.equals((java.lang.Object) compiler14);
        compiler14.reportCodeChange();
        int int20 = compiler14.getWarningCount();
        compiler14.disableThreads();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(errorManager15);
        org.junit.Assert.assertNotNull(codingConvention17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test1551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1551");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.INVALID_CASTS;
        com.google.javascript.jscomp.DiagnosticGroups.DUPLICATE_MESSAGE = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticType diagnosticType2 = com.google.javascript.jscomp.Compiler.MOTION_ITERATIONS_ERROR;
        com.google.javascript.jscomp.CheckLevel checkLevel3 = diagnosticType2.defaultLevel;
        java.util.Date date7 = new java.util.Date((int) (short) 100, (int) (short) 0, (int) (byte) 0);
        date7.setSeconds((int) ':');
        boolean boolean10 = diagnosticType2.equals((java.lang.Object) date7);
        boolean boolean11 = diagnosticGroup0.matches(diagnosticType2);
        org.junit.Assert.assertNotNull(diagnosticGroup0);
        org.junit.Assert.assertNotNull(diagnosticType2);
        org.junit.Assert.assertTrue("'" + checkLevel3 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel3.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
        org.junit.Assert.assertEquals(date7.toString(), "Fri Dec 31 00:00:58 UTC 1999");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1552");
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto0 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.getDefaultInstance();
        boolean boolean1 = methodDescriptorProto0.hasOutputType();
        com.google.protobuf.CodedOutputStream codedOutputStream2 = null;
        methodDescriptorProto0.writeTo(codedOutputStream2);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder4 = methodDescriptorProto0.toBuilder();
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder6 = builder4.setOutputType("java.nio.HeapFloatBuffer[pos=0 lim=6 cap=6]");
        java.lang.String str7 = builder6.getName();
        org.junit.Assert.assertNotNull(methodDescriptorProto0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test1553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1553");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProtoOrBuilder[] fieldDescriptorProtoOrBuilderArray0 = new com.google.protobuf.DescriptorProtos.FieldDescriptorProtoOrBuilder[] {};
        com.google.common.collect.ImmutableSet<com.google.protobuf.DescriptorProtos.FieldDescriptorProtoOrBuilder> fieldDescriptorProtoOrBuilderSet1 = com.google.common.collect.ImmutableSet.of(fieldDescriptorProtoOrBuilderArray0);
        org.junit.Assert.assertNotNull(fieldDescriptorProtoOrBuilderArray0);
        org.junit.Assert.assertNotNull(fieldDescriptorProtoOrBuilderSet1);
    }

    @Test
    public void test1554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1554");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto enumValueDescriptorProto1 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.parseFrom(inputStream0);
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder2 = enumValueDescriptorProto1.toBuilder();
        boolean boolean3 = builder2.hasName();
        org.junit.Assert.assertNotNull(enumValueDescriptorProto1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1555");
        java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite> priorityMap0 = new java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite>();
        java.lang.Object obj1 = priorityMap0.clone();
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder2 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.newBuilder();
        boolean boolean3 = priorityMap0.containsValue((java.lang.Object) builder2);
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder5 = builder2.setName("java.nio.ByteBufferAsDoubleBufferB[pos=0 lim=12 cap=12]");
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj8 = builder2.getRepeatedField(fieldDescriptor6, (int) '/');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "{}");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test1556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1556");
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto0 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.getDefaultInstance();
        java.io.File file3 = null;
        java.io.File file4 = java.io.File.createTempFile("hi!", "ISO", file3);
        boolean boolean7 = file4.setWritable(false, false);
        java.net.URI uRI8 = file4.toURI();
        java.io.PrintStream printStream9 = new java.io.PrintStream(file4);
        printStream9.print((int) (byte) 0);
        printStream9.print(10.0d);
        printStream9.close();
        methodDescriptorProto0.writeTo((java.io.OutputStream) printStream9);
        org.junit.Assert.assertNotNull(methodDescriptorProto0);
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/tmp/hi!1237820222600343215ISO");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(uRI8);
    }

    @Test
    public void test1557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1557");
        com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec assertionFunctionSpec1 = new com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec("(1970-01-01+00:00:52)");
        java.lang.String str2 = assertionFunctionSpec1.getFunctionName();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "(1970-01-01+00:00:52)" + "'", str2, "(1970-01-01+00:00:52)");
    }

    @Test
    public void test1558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1558");
        java.text.MessageFormat messageFormat1 = new java.text.MessageFormat("hi!");
        java.lang.Object obj2 = messageFormat1.clone();
        org.junit.Assert.assertNotNull(obj2);
    }

    @Test
    public void test1559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1559");
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto0 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.getDefaultInstance();
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions1 = methodDescriptorProto0.getOptions();
        java.lang.String str2 = methodDescriptorProto0.getName();
        org.junit.Assert.assertNotNull(methodDescriptorProto0);
        org.junit.Assert.assertNotNull(methodOptions1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test1560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1560");
        java.text.Format.Field field0 = null;
        java.text.FieldPosition fieldPosition2 = new java.text.FieldPosition(field0, 8);
        int int3 = fieldPosition2.getBeginIndex();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test1561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1561");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.of(localDateTime4, (java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime10.minusSeconds((long) '#');
        java.time.OffsetDateTime offsetDateTime13 = zonedDateTime10.toOffsetDateTime();
        java.time.ZonedDateTime zonedDateTime15 = zonedDateTime10.withMinute(10);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(offsetDateTime13);
        org.junit.Assert.assertNotNull(zonedDateTime15);
    }

    @Test
    public void test1562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1562");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean5 = node4.isFromExterns();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean10 = node9.isFromExterns();
        java.lang.String str11 = node9.toString();
        com.google.javascript.rhino.Node node12 = node4.copyInformationFrom(node9);
        int int13 = node4.getLineno();
        boolean boolean14 = node4.isLabel();
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean19 = node18.isStringKey();
        boolean boolean20 = node18.isTrue();
        com.google.javascript.rhino.InputId inputId22 = new com.google.javascript.rhino.InputId("NUMBER 52.0 0");
        node18.setInputId(inputId22);
        node4.setInputId(inputId22);
        com.google.javascript.jscomp.CompilerOptions compilerOptions25 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions25.setRecordFunctionInformation(true);
        boolean boolean28 = compilerOptions25.checkControlStructures;
        compilerOptions25.setCollapseProperties(false);
        compilerOptions25.setAssumeStrictThis(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions33 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions33.optimizeCalls = false;
        compilerOptions33.preferLineBreakAtEndOfFile = false;
        boolean boolean38 = compilerOptions33.markNoSideEffectCalls;
        boolean boolean39 = compilerOptions33.labelRenaming;
        com.google.javascript.jscomp.DependencyOptions dependencyOptions40 = new com.google.javascript.jscomp.DependencyOptions();
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        boolean boolean47 = strSet45.isEmpty();
        java.nio.ByteBuffer byteBuffer49 = java.nio.ByteBuffer.allocate(100);
        boolean boolean50 = strSet45.equals((java.lang.Object) byteBuffer49);
        java.lang.String[] strArray54 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet55 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet55, strArray54);
        boolean boolean57 = strSet55.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream58 = strSet55.stream();
        boolean boolean59 = strSet45.retainAll((java.util.Collection<java.lang.String>) strSet55);
        com.google.javascript.jscomp.DependencyOptions dependencyOptions60 = dependencyOptions40.setEntryPoints((java.util.Collection<java.lang.String>) strSet45);
        compilerOptions33.setDependencyOptions(dependencyOptions40);
        com.google.javascript.jscomp.CheckLevel checkLevel62 = compilerOptions33.checkGlobalThisLevel;
        compilerOptions25.reportMissingOverride = checkLevel62;
        com.google.javascript.jscomp.DiagnosticType diagnosticType66 = com.google.javascript.jscomp.DiagnosticType.warning("", "Unknown class name");
        java.lang.String[] strArray71 = new java.lang.String[] { "2022-02-21", "2022-02-21", "hi!", "/tmp/hi!4516073975838273390ISO" };
        com.google.javascript.jscomp.JSError jSError72 = com.google.javascript.jscomp.JSError.make("{}", node4, checkLevel62, diagnosticType66, strArray71);
        java.time.temporal.ChronoField chronoField73 = java.time.temporal.ChronoField.EPOCH_DAY;
        java.time.Instant instant74 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset78 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime79 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset78);
        java.time.OffsetDateTime offsetDateTime80 = java.time.OffsetDateTime.ofInstant(instant74, (java.time.ZoneId) zoneOffset78);
        java.time.temporal.ValueRange valueRange81 = chronoField73.rangeRefinedBy((java.time.temporal.TemporalAccessor) offsetDateTime80);
        java.time.format.DateTimeFormatter dateTimeFormatter82 = java.time.format.DateTimeFormatter.ISO_DATE;
        java.lang.String str83 = offsetDateTime80.format(dateTimeFormatter82);
        boolean boolean84 = jSError72.equals((java.lang.Object) dateTimeFormatter82);
        java.text.MessageFormat messageFormat87 = new java.text.MessageFormat("hi!");
        java.text.ParsePosition parsePosition90 = new java.text.ParsePosition(42);
        java.lang.Object obj91 = messageFormat87.parseObject("+00:00:52", parsePosition90);
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.TemporalAccessor temporalAccessor92 = dateTimeFormatter82.parseUnresolved((java.lang.CharSequence) "", parsePosition90);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 42");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "NUMBER 52.0 0" + "'", str11, "NUMBER 52.0 0");
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strStream58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(dependencyOptions60);
        org.junit.Assert.assertTrue("'" + checkLevel62 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel62.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(diagnosticType66);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(jSError72);
        org.junit.Assert.assertTrue("'" + chronoField73 + "' != '" + java.time.temporal.ChronoField.EPOCH_DAY + "'", chronoField73.equals(java.time.temporal.ChronoField.EPOCH_DAY));
        org.junit.Assert.assertNotNull(instant74);
        org.junit.Assert.assertNotNull(zoneOffset78);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(offsetDateTime80);
        org.junit.Assert.assertNotNull(valueRange81);
        org.junit.Assert.assertNotNull(dateTimeFormatter82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "1970-01-01+00:00:52" + "'", str83, "1970-01-01+00:00:52");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(obj91);
    }

    @Test
    public void test1563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1563");
        int int0 = com.google.protobuf.CodedOutputStream.DEFAULT_BUFFER_SIZE;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 4096 + "'", int0 == 4096);
    }

    @Test
    public void test1564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1564");
        com.google.javascript.jscomp.SourceFile sourceFile2 = com.google.javascript.jscomp.SourceFile.fromCode("OptionalDouble[-1.0]", "1970-01-01T00:02:32+00:00:52");
        org.junit.Assert.assertNotNull(sourceFile2);
    }

    @Test
    public void test1565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1565");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode3 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry2.setResolveMode(resolveMode3);
        com.google.javascript.rhino.jstype.FunctionType functionType5 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter6 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry8 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter6, false);
        com.google.javascript.rhino.jstype.ObjectType objectType9 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType10 = jSTypeRegistry8.createObjectType(objectType9);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        com.google.javascript.rhino.jstype.ObjectType objectType14 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType15 = jSTypeRegistry13.createObjectType(objectType14);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair16 = objectType10.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType15);
        boolean boolean17 = objectType15.isTemplateType();
        boolean boolean18 = objectType15.isNativeObjectType();
        boolean boolean19 = objectType15.isNumberValueType();
        com.google.javascript.rhino.ErrorReporter errorReporter21 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter21, false);
        com.google.javascript.rhino.jstype.ObjectType objectType24 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType25 = jSTypeRegistry23.createObjectType(objectType24);
        com.google.javascript.rhino.ErrorReporter errorReporter26 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter26, false);
        com.google.javascript.rhino.jstype.ObjectType objectType29 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType30 = jSTypeRegistry28.createObjectType(objectType29);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair31 = objectType25.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType30);
        java.lang.String str32 = objectType30.getDisplayName();
        com.google.javascript.rhino.ErrorReporter errorReporter33 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter33, false);
        com.google.javascript.rhino.jstype.ObjectType objectType36 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType37 = jSTypeRegistry35.createObjectType(objectType36);
        com.google.javascript.rhino.ErrorReporter errorReporter38 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry40 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter38, false);
        com.google.javascript.rhino.jstype.ObjectType objectType41 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType42 = jSTypeRegistry40.createObjectType(objectType41);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair43 = objectType37.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType42);
        boolean boolean44 = objectType42.isTemplateType();
        com.google.javascript.rhino.jstype.JSType jSType45 = objectType30.getLeastSupertype((com.google.javascript.rhino.jstype.JSType) objectType42);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean50 = node49.isFromExterns();
        java.lang.String str51 = node49.toString();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable52 = node49.siblings();
        boolean boolean53 = objectType15.defineDeclaredProperty("", (com.google.javascript.rhino.jstype.JSType) objectType42, node49);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.FunctionType functionType54 = jSTypeRegistry2.createFunctionTypeWithNewReturnType(functionType5, (com.google.javascript.rhino.jstype.JSType) objectType42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + resolveMode3 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode3.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType10);
        org.junit.Assert.assertNotNull(objectType15);
        org.junit.Assert.assertNotNull(typePair16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objectType25);
        org.junit.Assert.assertNotNull(objectType30);
        org.junit.Assert.assertNotNull(typePair31);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(objectType37);
        org.junit.Assert.assertNotNull(objectType42);
        org.junit.Assert.assertNotNull(typePair43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(jSType45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "NUMBER 52.0 0" + "'", str51, "NUMBER 52.0 0");
        org.junit.Assert.assertNotNull(nodeIterable52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
    }

    @Test
    public void test1566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1566");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.of(localDateTime4, (java.time.ZoneId) zoneOffset8);
        java.time.temporal.ChronoField chronoField12 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit13 = chronoField12.getBaseUnit();
        java.time.LocalDateTime localDateTime14 = localDateTime4.plus((long) 1970, temporalUnit13);
        java.time.LocalTime localTime15 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localDateTime14);
        java.time.Period period16 = java.time.Period.ZERO;
        java.time.chrono.ChronoPeriod chronoPeriod17 = period16.normalized();
        java.time.Period period19 = period16.plusMonths((long) ' ');
        java.time.LocalDateTime localDateTime20 = localDateTime14.minus((java.time.temporal.TemporalAmount) period16);
        java.time.temporal.ChronoField chronoField21 = java.time.temporal.ChronoField.OFFSET_SECONDS;
        java.time.temporal.TemporalUnit temporalUnit22 = chronoField21.getRangeUnit();
        long long24 = chronoField21.checkValidValue((long) 2);
        // The following exception was thrown during execution in test generation
        try {
            long long25 = localDateTime14.getLong((java.time.temporal.TemporalField) chronoField21);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: OffsetSeconds");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertTrue("'" + chronoField12 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField12.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit13 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit13.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(chronoPeriod17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + chronoField21 + "' != '" + java.time.temporal.ChronoField.OFFSET_SECONDS + "'", chronoField21.equals(java.time.temporal.ChronoField.OFFSET_SECONDS));
        org.junit.Assert.assertTrue("'" + temporalUnit22 + "' != '" + java.time.temporal.ChronoUnit.FOREVER + "'", temporalUnit22.equals(java.time.temporal.ChronoUnit.FOREVER));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 2L + "'", long24 == 2L);
    }

    @Test
    public void test1567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1567");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType4 = jSTypeRegistry2.createObjectType(objectType3);
        jSTypeRegistry2.forwardDeclareType("");
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7, false);
        com.google.javascript.rhino.jstype.ObjectType objectType10 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType11 = jSTypeRegistry9.createObjectType(objectType10);
        com.google.javascript.rhino.ErrorReporter errorReporter12 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter12, false);
        com.google.javascript.rhino.jstype.ObjectType objectType15 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType16 = jSTypeRegistry14.createObjectType(objectType15);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair17 = objectType11.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType16);
        boolean boolean18 = objectType11.isInterface();
        com.google.javascript.rhino.jstype.JSType jSType23 = jSTypeRegistry2.getType((com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>) objectType11, "NUMBER 52.0 0", "OffsetSeconds", 256, (int) (short) 10);
        com.google.javascript.rhino.jstype.JSType jSType24 = jSType23.autobox();
        org.junit.Assert.assertNotNull(objectType4);
        org.junit.Assert.assertNotNull(objectType11);
        org.junit.Assert.assertNotNull(objectType16);
        org.junit.Assert.assertNotNull(typePair17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jSType23);
        org.junit.Assert.assertNotNull(jSType24);
    }

    @Test
    public void test1568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1568");
        com.google.javascript.jscomp.SourceMap.Format format0 = com.google.javascript.jscomp.SourceMap.Format.V3;
        org.junit.Assert.assertNotNull(format0);
    }

    @Test
    public void test1569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1569");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder3 = builder2.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions fileOptions4 = builder2.getOptions();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto6 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.getDefaultInstance();
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder7 = builder2.addExtension(52, fieldDescriptorProto6);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(fileOptions4);
        org.junit.Assert.assertNotNull(fieldDescriptorProto6);
    }

    @Test
    public void test1570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1570");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.lang.String str1 = localDate0.toString();
        java.time.chrono.IsoChronology isoChronology2 = localDate0.getChronology();
        java.lang.String str3 = isoChronology2.getCalendarType();
        java.util.List<java.time.chrono.Era> eraList4 = isoChronology2.eras();
        java.util.List<java.time.chrono.Era> eraList5 = isoChronology2.eras();
        java.time.chrono.IsoEra isoEra6 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate10 = isoChronology2.date((java.time.chrono.Era) isoEra6, 1024, 2, 5);
        java.time.temporal.ChronoField chronoField11 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit12 = chronoField11.getBaseUnit();
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset16);
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset21);
        java.time.ZonedDateTime zonedDateTime23 = java.time.ZonedDateTime.of(localDateTime17, (java.time.ZoneId) zoneOffset21);
        java.time.ZonedDateTime zonedDateTime25 = zonedDateTime23.withYear((int) (short) 1);
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset29);
        int int31 = localDateTime30.getYear();
        java.time.LocalDate localDate32 = localDateTime30.toLocalDate();
        java.time.ZoneOffset zoneOffset36 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime37 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset36);
        java.time.ZoneOffset zoneOffset41 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime42 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset41);
        java.time.ZonedDateTime zonedDateTime43 = java.time.ZonedDateTime.of(localDateTime37, (java.time.ZoneId) zoneOffset41);
        java.time.temporal.ChronoField chronoField45 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit46 = chronoField45.getBaseUnit();
        java.time.LocalDateTime localDateTime47 = localDateTime37.plus((long) 1970, temporalUnit46);
        java.time.LocalTime localTime48 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localDateTime47);
        java.time.ZoneOffset zoneOffset52 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime53 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset52);
        java.time.OffsetDateTime offsetDateTime54 = java.time.OffsetDateTime.of(localDate32, localTime48, zoneOffset52);
        java.time.ZonedDateTime zonedDateTime55 = zonedDateTime23.withZoneSameInstant((java.time.ZoneId) zoneOffset52);
        boolean boolean56 = temporalUnit12.isSupportedBy((java.time.temporal.Temporal) zonedDateTime23);
        java.time.LocalTime localTime57 = zonedDateTime23.toLocalTime();
        int int58 = localTime57.getMinute();
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoLocalDateTime<? extends java.time.chrono.ChronoLocalDate> wildcardChronoLocalDateTime59 = isoChronology2.localDateTime((java.time.temporal.TemporalAccessor) localTime57);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unable to obtain LocalDateTime from TemporalAccessor: 00:02:32 of type java.time.LocalTime");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "2022-02-21" + "'", str1, "2022-02-21");
        org.junit.Assert.assertNotNull(isoChronology2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "iso8601" + "'", str3, "iso8601");
        org.junit.Assert.assertNotNull(eraList4);
        org.junit.Assert.assertNotNull(eraList5);
        org.junit.Assert.assertTrue("'" + isoEra6 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra6.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + chronoField11 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField11.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit12 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit12.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zonedDateTime23);
        org.junit.Assert.assertNotNull(zonedDateTime25);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1970 + "'", int31 == 1970);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(zoneOffset36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(zoneOffset41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(zonedDateTime43);
        org.junit.Assert.assertTrue("'" + chronoField45 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField45.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit46 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit46.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(zoneOffset52);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(offsetDateTime54);
        org.junit.Assert.assertNotNull(zonedDateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
    }

    @Test
    public void test1571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1571");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType4 = jSTypeRegistry2.createObjectType(objectType3);
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.jstype.ObjectType objectType8 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry7.createObjectType(objectType8);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair10 = objectType4.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType9);
        com.google.javascript.rhino.ErrorReporter errorReporter12 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter12, false);
        com.google.javascript.rhino.jstype.ObjectType objectType15 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType16 = jSTypeRegistry14.createObjectType(objectType15);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        com.google.javascript.rhino.jstype.ObjectType objectType20 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType21 = jSTypeRegistry19.createObjectType(objectType20);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair22 = objectType16.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType21);
        com.google.javascript.rhino.Node node23 = objectType16.getRootNode();
        com.google.javascript.rhino.jstype.EnumType enumType24 = objectType16.toMaybeEnumType();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean29 = node28.isStringKey();
        boolean boolean30 = node28.isThrow();
        boolean boolean31 = node28.isVarArgs();
        boolean boolean32 = node28.isStringKey();
        boolean boolean33 = objectType9.defineInferredProperty("Unknown class name", (com.google.javascript.rhino.jstype.JSType) objectType16, node28);
        objectType16.clearResolved();
        boolean boolean35 = objectType16.isInterface();
        boolean boolean36 = objectType16.isNumber();
        org.junit.Assert.assertNotNull(objectType4);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertNotNull(typePair10);
        org.junit.Assert.assertNotNull(objectType16);
        org.junit.Assert.assertNotNull(objectType21);
        org.junit.Assert.assertNotNull(typePair22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNull(enumType24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1572");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        java.lang.String[] strArray11 = new java.lang.String[] { "South Korea", "Unknown class name", "ISO", "OffsetSeconds", ":" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        compilerOptions0.setReplaceStringsConfiguration("1970-01-01+00:00:52", (java.util.List<java.lang.String>) strList12);
        compilerOptions0.lineBreak = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions17 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions17.setRecordFunctionInformation(true);
        compilerOptions17.setMoveFunctionDeclarations(true);
        com.google.javascript.jscomp.CheckLevel checkLevel22 = compilerOptions17.checkMissingGetCssNameLevel;
        compilerOptions0.setCheckProvides(checkLevel22);
        boolean boolean24 = compilerOptions0.removeUnusedPrototypePropertiesInExterns;
        com.google.javascript.jscomp.MessageBundle messageBundle25 = null;
        compilerOptions0.setMessageBundle(messageBundle25);
        org.junit.Assert.assertNotNull(errorFormat3);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + checkLevel22 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel22.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1573");
        java.net.URI uRI1 = new java.net.URI("ClockHourOfAmPm");
    }

    @Test
    public void test1574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1574");
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder1 = builder0.clearCcGenericServices();
        boolean boolean2 = builder0.isInitialized();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder4 = builder0.setCcGenericServices(true);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder5 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label6 = builder5.getLabel();
        com.google.protobuf.ByteString byteString7 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder8 = builder5.mergeFrom(byteString7);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite9 = null;
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder10 = builder4.mergeFrom(byteString7, extensionRegistryLite9);
        com.google.protobuf.DescriptorProtos.FileOptions fileOptions11 = builder10.getDefaultInstanceForType();
        boolean boolean12 = fileOptions11.hasJavaPackage();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + label6 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label6.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(byteString7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(fileOptions11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1575");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label4 = builder3.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = builder0.addExtension(builder3);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder6 = builder0.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder7 = builder6.getOptionsBuilder();
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder8 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output10 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream12 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output10, (int) 'a');
        byte[] byteArray13 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite14 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions15 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray13, extensionRegistryLite14);
        output10.write(byteArray13);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder17 = builder8.mergeFrom(byteArray13);
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder18 = builder7.mergeFrom(byteArray13);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder19 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder21 = builder19.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder22 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label23 = builder22.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder24 = builder19.addExtension(builder22);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder25 = builder19.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder26 = builder25.getOptionsBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions27 = builder26.getDefaultInstanceForType();
        int int28 = enumOptions27.getSerializedSize();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder29 = builder7.mergeFrom(enumOptions27);
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor30 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int31 = enumOptions27.getRepeatedFieldCount(fieldDescriptor30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + label4 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label4.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(output10);
        org.junit.Assert.assertNotNull(codedOutputStream12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(methodOptions15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + label23 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label23.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(enumOptions27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test1576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1576");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset10);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.of(localDateTime11, (java.time.ZoneId) zoneOffset15);
        java.time.Clock clock18 = java.time.Clock.fixed(instant0, (java.time.ZoneId) zoneOffset15);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.now(clock18);
        java.time.LocalDate localDate20 = java.time.LocalDate.now(clock18);
        com.google.protobuf.Descriptors.Descriptor descriptor21 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto22 = descriptor21.toProto();
        boolean boolean23 = descriptorProto22.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList24 = descriptorProto22.getNestedTypeList();
        int int25 = descriptorProto22.getExtensionRangeCount();
        boolean boolean26 = localDate20.equals((java.lang.Object) descriptorProto22);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder27 = descriptorProto22.newBuilderForType();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList28 = builder27.getNestedTypeList();
        com.google.protobuf.UnknownFieldSet unknownFieldSet29 = builder27.getUnknownFields();
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder30 = builder27.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder31 = builder30.addValueBuilder();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(clock18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(descriptor21);
        org.junit.Assert.assertNotNull(descriptorProto22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(descriptorProtoList28);
        org.junit.Assert.assertNotNull(unknownFieldSet29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test1577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1577");
        java.util.Date date3 = new java.util.Date((int) (short) 100, (int) (short) 0, (int) (byte) 0);
        int int4 = date3.getHours();
        long long5 = date3.getTime();
        int int6 = date3.getYear();
        org.junit.Assert.assertEquals(date3.toString(), "Fri Dec 31 00:00:00 UTC 1999");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 946598400000L + "'", long5 == 946598400000L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 99 + "'", int6 == 99);
    }

    @Test
    public void test1578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1578");
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.Chronology chronology1 = java.time.chrono.Chronology.of("Unknown class name");
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unknown chronology: Unknown class name");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1579");
        java.io.PrintStream printStream0 = null;
        com.google.javascript.jscomp.Compiler compiler1 = new com.google.javascript.jscomp.Compiler(printStream0);
        com.google.javascript.jscomp.ErrorManager errorManager2 = compiler1.getErrorManager();
        com.google.javascript.jscomp.ErrorManager errorManager3 = compiler1.getErrorManager();
        java.lang.String str4 = compiler1.getAstDotGraph();
        org.junit.Assert.assertNotNull(errorManager2);
        org.junit.Assert.assertNotNull(errorManager3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test1580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1580");
        java.time.temporal.ChronoField chronoField0 = java.time.temporal.ChronoField.OFFSET_SECONDS;
        java.time.Instant instant1 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset5);
        java.time.OffsetDateTime offsetDateTime7 = java.time.OffsetDateTime.ofInstant(instant1, (java.time.ZoneId) zoneOffset5);
        java.time.OffsetDateTime offsetDateTime9 = offsetDateTime7.minusDays((long) (short) 100);
        java.lang.String str10 = offsetDateTime7.toString();
        java.time.temporal.ChronoField chronoField11 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        int int12 = offsetDateTime7.get((java.time.temporal.TemporalField) chronoField11);
        java.time.OffsetDateTime offsetDateTime14 = offsetDateTime7.withDayOfMonth((int) (short) 10);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.MAX;
        java.time.OffsetDateTime offsetDateTime16 = offsetDateTime14.withOffsetSameLocal(zoneOffset15);
        boolean boolean17 = chronoField0.isSupportedBy((java.time.temporal.TemporalAccessor) zoneOffset15);
        java.lang.String str18 = chronoField0.toString();
        org.junit.Assert.assertTrue("'" + chronoField0 + "' != '" + java.time.temporal.ChronoField.OFFSET_SECONDS + "'", chronoField0.equals(java.time.temporal.ChronoField.OFFSET_SECONDS));
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-01T00:00:52+00:00:52" + "'", str10, "1970-01-01T00:00:52+00:00:52");
        org.junit.Assert.assertTrue("'" + chronoField11 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField11.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 12 + "'", int12 == 12);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(offsetDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "OffsetSeconds" + "'", str18, "OffsetSeconds");
    }

    @Test
    public void test1581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1581");
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap0 = java.nio.charset.Charset.availableCharsets();
        java.net.URISyntaxException uRISyntaxException3 = new java.net.URISyntaxException("hi!", "");
        boolean boolean4 = strMap0.containsKey((java.lang.Object) "");
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap5 = java.nio.charset.Charset.availableCharsets();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean10 = strMap5.containsValue((java.lang.Object) '4');
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap11 = java.nio.charset.Charset.availableCharsets();
        java.net.URISyntaxException uRISyntaxException14 = new java.net.URISyntaxException("hi!", "");
        boolean boolean15 = strMap11.containsKey((java.lang.Object) "");
        int int16 = strMap11.size();
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap17 = java.nio.charset.Charset.availableCharsets();
        java.util.Set<java.lang.String> strSet18 = strMap17.keySet();
        java.util.Set<java.lang.String> strSet19 = strMap17.keySet();
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap20 = java.nio.charset.Charset.availableCharsets();
        java.net.URISyntaxException uRISyntaxException23 = new java.net.URISyntaxException("hi!", "");
        boolean boolean24 = strMap20.containsKey((java.lang.Object) "");
        int int25 = strMap20.size();
        com.google.common.collect.ImmutableList<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>> strMapList26 = com.google.common.collect.ImmutableList.of(strMap0, strMap5, strMap11, strMap17, strMap20);
        com.google.javascript.jscomp.CompilerOptions compilerOptions27 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions27.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat30 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions27.errorFormat = errorFormat30;
        java.lang.String[] strArray35 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        boolean boolean38 = strSet36.isEmpty();
        java.nio.ByteBuffer byteBuffer40 = java.nio.ByteBuffer.allocate(100);
        boolean boolean41 = strSet36.equals((java.lang.Object) byteBuffer40);
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        boolean boolean48 = strSet46.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream49 = strSet46.stream();
        boolean boolean50 = strSet36.retainAll((java.util.Collection<java.lang.String>) strSet46);
        compilerOptions27.aliasableStrings = strSet36;
        com.google.javascript.jscomp.CompilerOptions.Reach reach52 = com.google.javascript.jscomp.CompilerOptions.Reach.LOCAL_ONLY;
        compilerOptions27.setRemoveUnusedVariable(reach52);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean54 = strMap5.containsKey((java.lang.Object) reach52);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 171 + "'", int16 == 171);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 171 + "'", int25 == 171);
        org.junit.Assert.assertNotNull(strMapList26);
        org.junit.Assert.assertNotNull(errorFormat30);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteBuffer40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(strStream49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + reach52 + "' != '" + com.google.javascript.jscomp.CompilerOptions.Reach.LOCAL_ONLY + "'", reach52.equals(com.google.javascript.jscomp.CompilerOptions.Reach.LOCAL_ONLY));
    }

    @Test
    public void test1582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1582");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean4 = node3.isFromExterns();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean9 = node8.isFromExterns();
        java.lang.String str10 = node8.toString();
        com.google.javascript.rhino.Node node11 = node3.copyInformationFrom(node8);
        com.google.javascript.rhino.Node node12 = node8.getNext();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER 52.0 0" + "'", str10, "NUMBER 52.0 0");
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertNull(node12);
    }

    @Test
    public void test1583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1583");
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        boolean boolean6 = strSet4.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream7 = strSet4.stream();
        java.util.stream.Stream<java.lang.String> strStream8 = strStream7.distinct();
        java.util.stream.Stream<java.lang.String> strStream9 = strStream7.sequential();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strStream7);
        org.junit.Assert.assertNotNull(strStream8);
        org.junit.Assert.assertNotNull(strStream9);
    }

    @Test
    public void test1584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1584");
        java.io.File file1 = new java.io.File("");
        boolean boolean2 = file1.isAbsolute();
        org.junit.Assert.assertNull("file1.getParent() == null", file1.getParent());
        org.junit.Assert.assertEquals(file1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1585");
        com.google.protobuf.Descriptors.Descriptor descriptor0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto1 = descriptor0.toProto();
        boolean boolean2 = descriptorProto1.isInitialized();
        com.google.protobuf.DescriptorProtos.MessageOptions messageOptions3 = descriptorProto1.getOptions();
        com.google.protobuf.DescriptorProtos.MessageOptions.Builder builder4 = messageOptions3.newBuilderForType();
        com.google.protobuf.Message message5 = builder4.buildPartial();
        com.google.protobuf.DescriptorProtos.MessageOptions messageOptions6 = builder4.build();
        org.junit.Assert.assertNotNull(descriptor0);
        org.junit.Assert.assertNotNull(descriptorProto1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(messageOptions3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(message5);
        org.junit.Assert.assertNotNull(messageOptions6);
    }

    @Test
    public void test1586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1586");
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue0 = com.google.javascript.rhino.jstype.TernaryValue.UNKNOWN;
        org.junit.Assert.assertNotNull(ternaryValue0);
    }

    @Test
    public void test1587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1587");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        int int5 = localDateTime4.getYear();
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset9);
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset14);
        java.time.ZonedDateTime zonedDateTime16 = java.time.ZonedDateTime.of(localDateTime10, (java.time.ZoneId) zoneOffset14);
        boolean boolean17 = localDateTime4.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime10);
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset21);
        int int23 = localDateTime22.getYear();
        java.time.LocalDate localDate24 = localDateTime22.toLocalDate();
        int int25 = localDateTime4.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime22);
        java.time.temporal.ChronoField chronoField26 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit27 = chronoField26.getBaseUnit();
        long long28 = localDateTime4.getLong((java.time.temporal.TemporalField) chronoField26);
        java.time.LocalTime localTime29 = localDateTime4.toLocalTime();
        int int30 = localTime29.getMinute();
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zonedDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1970 + "'", int23 == 1970);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + chronoField26 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField26.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit27 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit27.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 12L + "'", long28 == 12L);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
    }

    @Test
    public void test1588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1588");
        java.io.File file2 = null;
        java.io.File file3 = java.io.File.createTempFile("hi!", "ISO", file2);
        boolean boolean6 = file3.setWritable(false, false);
        java.net.URI uRI7 = file3.toURI();
        java.lang.String str8 = uRI7.getSchemeSpecificPart();
        java.lang.String str9 = uRI7.getRawQuery();
        java.net.URI uRI10 = uRI7.normalize();
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file3.toString(), "/tmp/hi!4308965599218662450ISO");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(uRI7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "/tmp/hi!4308965599218662450ISO" + "'", str8, "/tmp/hi!4308965599218662450ISO");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(uRI10);
    }

    @Test
    public void test1589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1589");
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto0 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.getDefaultInstance();
        boolean boolean1 = serviceDescriptorProto0.hasOptions();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder2 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.newBuilder(serviceDescriptorProto0);
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto3 = builder2.buildPartial();
        com.google.protobuf.DescriptorProtos.ServiceOptions serviceOptions4 = builder2.getOptions();
        com.google.protobuf.DescriptorProtos.ServiceOptions.Builder builder5 = serviceOptions4.toBuilder();
        java.io.InputStream inputStream6 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean7 = builder5.mergeDelimitedFrom(inputStream6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serviceDescriptorProto0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(serviceDescriptorProto3);
        org.junit.Assert.assertNotNull(serviceOptions4);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test1590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1590");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset10);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.of(localDateTime11, (java.time.ZoneId) zoneOffset15);
        java.time.Clock clock18 = java.time.Clock.fixed(instant0, (java.time.ZoneId) zoneOffset15);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.now(clock18);
        java.time.LocalDate localDate20 = java.time.LocalDate.now(clock18);
        com.google.protobuf.Descriptors.Descriptor descriptor21 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto22 = descriptor21.toProto();
        boolean boolean23 = descriptorProto22.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList24 = descriptorProto22.getNestedTypeList();
        int int25 = descriptorProto22.getExtensionRangeCount();
        boolean boolean26 = localDate20.equals((java.lang.Object) descriptorProto22);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder27 = descriptorProto22.newBuilderForType();
        java.util.List<com.google.protobuf.DescriptorProtos.FieldDescriptorProto> fieldDescriptorProtoList28 = builder27.getExtensionList();
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.Builder builder29 = com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.newBuilder();
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder30 = builder27.addExtensionRange(builder29);
        com.google.protobuf.Descriptors.Descriptor descriptor31 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto32 = descriptor31.toProto();
        boolean boolean33 = descriptorProto32.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList34 = descriptorProto32.getNestedTypeList();
        int int35 = descriptorProto32.getExtensionCount();
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder36 = builder30.mergeFrom(descriptorProto32);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder38 = builder36.removeNestedType(171);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 171, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(clock18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(descriptor21);
        org.junit.Assert.assertNotNull(descriptorProto22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(fieldDescriptorProtoList28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(descriptor31);
        org.junit.Assert.assertNotNull(descriptorProto32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test1591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1591");
        java.time.LocalDate localDate1 = java.time.LocalDate.ofEpochDay(52L);
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset5);
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset10);
        java.time.ZonedDateTime zonedDateTime12 = java.time.ZonedDateTime.of(localDateTime6, (java.time.ZoneId) zoneOffset10);
        java.time.ZonedDateTime zonedDateTime14 = zonedDateTime12.withYear((int) (short) 1);
        java.time.temporal.ChronoField chronoField15 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit16 = chronoField15.getBaseUnit();
        java.time.ZonedDateTime zonedDateTime17 = zonedDateTime12.truncatedTo(temporalUnit16);
        java.time.Duration duration18 = temporalUnit16.getDuration();
        long long19 = duration18.toDays();
        java.time.Duration duration21 = duration18.minusDays(999L);
        boolean boolean22 = duration18.isZero();
        long long23 = duration18.toMillis();
        java.time.Duration duration25 = duration18.minusNanos((long) 7);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDate localDate26 = localDate1.minus((java.time.temporal.TemporalAmount) duration18);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported unit: Seconds");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(zonedDateTime14);
        org.junit.Assert.assertTrue("'" + chronoField15 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField15.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit16 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit16.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 3600000L + "'", long23 == 3600000L);
        org.junit.Assert.assertNotNull(duration25);
    }

    @Test
    public void test1592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1592");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.DUPLICATE_MESSAGE;
        com.google.javascript.jscomp.DiagnosticGroups.INTERNET_EXPLORER_CHECKS = diagnosticGroup0;
        org.junit.Assert.assertNotNull(diagnosticGroup0);
    }

    @Test
    public void test1593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1593");
        com.google.protobuf.Descriptors.Descriptor descriptor0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto1 = descriptor0.toProto();
        boolean boolean2 = descriptorProto1.isInitialized();
        com.google.protobuf.DescriptorProtos.MessageOptions messageOptions3 = descriptorProto1.getOptions();
        com.google.protobuf.DescriptorProtos.MessageOptions.Builder builder4 = messageOptions3.newBuilderForType();
        com.google.protobuf.Message message5 = builder4.buildPartial();
        com.google.protobuf.DescriptorProtos.MessageOptions.Builder builder6 = builder4.clear();
        com.google.protobuf.DescriptorProtos.MessageOptions.Builder builder8 = builder6.setNoStandardDescriptorAccessor(true);
        boolean boolean9 = builder8.hasNoStandardDescriptorAccessor();
        boolean boolean10 = builder8.isInitialized();
        byte[] byteArray11 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite12 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions13 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray11, extensionRegistryLite12);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite14 = null;
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto enumDescriptorProto15 = com.google.protobuf.DescriptorProtos.EnumDescriptorProto.parseFrom(byteArray11, extensionRegistryLite14);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder18 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label19 = builder18.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto20 = builder18.buildPartial();
        int int21 = fieldDescriptorProto20.getSerializedSize();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder22 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto20);
        java.io.InputStream inputStream23 = null;
        java.io.InputStream inputStream24 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite25 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location26 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream24, extensionRegistryLite25);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder27 = builder22.mergeFrom(inputStream23, extensionRegistryLite25);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.MessageOptions.Builder builder28 = builder8.mergeFrom(byteArray11, (int) ' ', 1024, extensionRegistryLite25);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptor0);
        org.junit.Assert.assertNotNull(descriptorProto1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(messageOptions3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(message5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(methodOptions13);
        org.junit.Assert.assertNotNull(enumDescriptorProto15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + label19 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label19.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(extensionRegistryLite25);
        org.junit.Assert.assertNotNull(location26);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test1594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1594");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.of(localDateTime4, (java.time.ZoneId) zoneOffset8);
        java.time.temporal.ChronoField chronoField12 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit13 = chronoField12.getBaseUnit();
        java.time.LocalDateTime localDateTime14 = localDateTime4.plus((long) 1970, temporalUnit13);
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset19);
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset24);
        java.time.ZonedDateTime zonedDateTime26 = java.time.ZonedDateTime.of(localDateTime20, (java.time.ZoneId) zoneOffset24);
        java.time.temporal.ChronoField chronoField28 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit29 = chronoField28.getBaseUnit();
        java.time.LocalDateTime localDateTime30 = localDateTime20.plus((long) 1970, temporalUnit29);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime31 = localDateTime14.minus((long) 43, temporalUnit29);
        java.time.LocalDateTime localDateTime33 = localDateTime14.minusHours((long) 1024);
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset37);
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime43 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset42);
        java.time.ZonedDateTime zonedDateTime44 = java.time.ZonedDateTime.of(localDateTime38, (java.time.ZoneId) zoneOffset42);
        java.time.temporal.ChronoField chronoField45 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        boolean boolean46 = localDateTime38.isSupported((java.time.temporal.TemporalField) chronoField45);
        int int47 = localDateTime33.get((java.time.temporal.TemporalField) chronoField45);
        java.time.Instant instant48 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset52 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime53 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset52);
        java.time.OffsetDateTime offsetDateTime54 = java.time.OffsetDateTime.ofInstant(instant48, (java.time.ZoneId) zoneOffset52);
        java.time.OffsetDateTime offsetDateTime56 = offsetDateTime54.minusDays((long) (short) 100);
        java.lang.String str57 = offsetDateTime54.toString();
        java.time.ZoneOffset zoneOffset58 = offsetDateTime54.getOffset();
        java.time.LocalTime localTime59 = offsetDateTime54.toLocalTime();
        java.time.LocalDateTime localDateTime60 = offsetDateTime54.toLocalDateTime();
        boolean boolean61 = localDateTime33.isBefore((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime60);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertTrue("'" + chronoField12 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField12.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit13 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit13.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertTrue("'" + chronoField28 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField28.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit29 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit29.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(zonedDateTime44);
        org.junit.Assert.assertTrue("'" + chronoField45 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField45.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(zoneOffset52);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(offsetDateTime54);
        org.junit.Assert.assertNotNull(offsetDateTime56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "1970-01-01T00:00:52+00:00:52" + "'", str57, "1970-01-01T00:00:52+00:00:52");
        org.junit.Assert.assertNotNull(zoneOffset58);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test1595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1595");
        java.time.temporal.ChronoField chronoField0 = java.time.temporal.ChronoField.OFFSET_SECONDS;
        java.time.temporal.TemporalUnit temporalUnit1 = chronoField0.getRangeUnit();
        long long3 = chronoField0.checkValidValue((long) 2);
        java.util.Locale locale7 = new java.util.Locale("", "NUMBER 52.0 0", "hi!");
        java.lang.String str8 = chronoField0.getDisplayName(locale7);
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.lang.String str10 = locale7.getDisplayVariant(locale9);
        java.util.Locale.setDefault(locale9);
        java.lang.String str12 = locale9.getDisplayScript();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = locale9.getUnicodeLocaleType("{2106658412}");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: {2106658412}");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + chronoField0 + "' != '" + java.time.temporal.ChronoField.OFFSET_SECONDS + "'", chronoField0.equals(java.time.temporal.ChronoField.OFFSET_SECONDS));
        org.junit.Assert.assertTrue("'" + temporalUnit1 + "' != '" + java.time.temporal.ChronoUnit.FOREVER + "'", temporalUnit1.equals(java.time.temporal.ChronoUnit.FOREVER));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 2L + "'", long3 == 2L);
        org.junit.Assert.assertEquals(locale7.toString(), "_NUMBER 52.0 0_hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "OffsetSeconds" + "'", str8, "OffsetSeconds");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test1596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1596");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean4 = node3.isStringKey();
        boolean boolean5 = node3.isTrue();
        com.google.javascript.rhino.InputId inputId7 = new com.google.javascript.rhino.InputId("NUMBER 52.0 0");
        node3.setInputId(inputId7);
        com.google.javascript.jscomp.SourceAst sourceAst9 = null;
        com.google.javascript.rhino.InputId inputId10 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput12 = new com.google.javascript.jscomp.CompilerInput(sourceAst9, inputId10, true);
        java.io.PrintStream printStream13 = null;
        com.google.javascript.jscomp.Compiler compiler14 = new com.google.javascript.jscomp.Compiler(printStream13);
        com.google.javascript.jscomp.ErrorManager errorManager15 = compiler14.getErrorManager();
        compilerInput12.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler14);
        com.google.javascript.jscomp.CodingConvention codingConvention17 = compiler14.getCodingConvention();
        boolean boolean18 = inputId7.equals((java.lang.Object) compiler14);
        com.google.javascript.jscomp.CompilerOptions compilerOptions19 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions19.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat22 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions19.errorFormat = errorFormat22;
        java.lang.String[] strArray30 = new java.lang.String[] { "South Korea", "Unknown class name", "ISO", "OffsetSeconds", ":" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        compilerOptions19.setReplaceStringsConfiguration("1970-01-01+00:00:52", (java.util.List<java.lang.String>) strList31);
        compilerOptions19.lineBreak = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions36 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions36.setRecordFunctionInformation(true);
        compilerOptions36.setMoveFunctionDeclarations(true);
        com.google.javascript.jscomp.CheckLevel checkLevel41 = compilerOptions36.checkMissingGetCssNameLevel;
        compilerOptions19.setCheckProvides(checkLevel41);
        boolean boolean43 = compilerOptions19.removeUnusedPrototypePropertiesInExterns;
        boolean boolean44 = compilerOptions19.generatePseudoNames;
        compiler14.initOptions(compilerOptions19);
        boolean boolean46 = compiler14.acceptEcmaScript5();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(errorManager15);
        org.junit.Assert.assertNotNull(codingConvention17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(errorFormat22);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + checkLevel41 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel41.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test1597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1597");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset10);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.of(localDateTime11, (java.time.ZoneId) zoneOffset15);
        java.time.Clock clock18 = java.time.Clock.fixed(instant0, (java.time.ZoneId) zoneOffset15);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.now(clock18);
        java.time.LocalDate localDate20 = java.time.LocalDate.now(clock18);
        com.google.protobuf.Descriptors.Descriptor descriptor21 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto22 = descriptor21.toProto();
        boolean boolean23 = descriptorProto22.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList24 = descriptorProto22.getNestedTypeList();
        int int25 = descriptorProto22.getExtensionRangeCount();
        boolean boolean26 = localDate20.equals((java.lang.Object) descriptorProto22);
        java.lang.String str27 = descriptorProto22.getName();
        java.lang.String str28 = descriptorProto22.getName();
        int int29 = descriptorProto22.getSerializedSize();
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange extensionRange31 = descriptorProto22.getExtensionRange(43);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 43");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(clock18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(descriptor21);
        org.junit.Assert.assertNotNull(descriptorProto22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "FileDescriptorProto" + "'", str27, "FileDescriptorProto");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "FileDescriptorProto" + "'", str28, "FileDescriptorProto");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 407 + "'", int29 == 407);
    }

    @Test
    public void test1598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1598");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        compilerOptions0.setTightenTypes(true);
        com.google.javascript.jscomp.CompilerOptions.LanguageMode languageMode5 = com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT3;
        compilerOptions0.setLanguageIn(languageMode5);
        org.junit.Assert.assertTrue("'" + languageMode5 + "' != '" + com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT3 + "'", languageMode5.equals(com.google.javascript.jscomp.CompilerOptions.LanguageMode.ECMASCRIPT3));
    }

    @Test
    public void test1599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1599");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility1 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        jSDocInfo0.setVisibility(visibility1);
        boolean boolean3 = jSDocInfo0.isConstant();
        boolean boolean5 = jSDocInfo0.hasDescriptionForParameter("1970-01-01+00:00:52");
        org.junit.Assert.assertTrue("'" + visibility1 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility1.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1600");
        com.google.protobuf.DescriptorProtos.UninterpretedOption.NamePart namePart0 = com.google.protobuf.DescriptorProtos.UninterpretedOption.NamePart.getDefaultInstance();
        boolean boolean1 = namePart0.hasNamePart();
        boolean boolean2 = namePart0.getIsExtension();
        org.junit.Assert.assertNotNull(namePart0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1601");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.lang.String str1 = localDate0.toString();
        java.time.chrono.IsoChronology isoChronology2 = localDate0.getChronology();
        java.lang.String str3 = isoChronology2.getId();
        java.time.Instant instant4 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        java.time.OffsetDateTime offsetDateTime10 = java.time.OffsetDateTime.ofInstant(instant4, (java.time.ZoneId) zoneOffset8);
        java.time.OffsetDateTime offsetDateTime12 = offsetDateTime10.minusDays((long) (short) 100);
        java.lang.String str13 = offsetDateTime10.toString();
        java.time.LocalTime localTime14 = offsetDateTime10.toLocalTime();
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset19);
        int int21 = localDateTime20.getYear();
        java.time.Instant instant22 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset26);
        java.time.OffsetDateTime offsetDateTime28 = java.time.OffsetDateTime.ofInstant(instant22, (java.time.ZoneId) zoneOffset26);
        java.time.Instant instant29 = localDateTime20.toInstant(zoneOffset26);
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset34);
        java.time.ZoneOffset zoneOffset39 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime40 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset39);
        java.time.ZonedDateTime zonedDateTime41 = java.time.ZonedDateTime.of(localDateTime35, (java.time.ZoneId) zoneOffset39);
        java.time.temporal.ChronoField chronoField43 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit44 = chronoField43.getBaseUnit();
        java.time.LocalDateTime localDateTime45 = localDateTime35.plus((long) 1970, temporalUnit44);
        java.time.ZoneOffset zoneOffset50 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime51 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset50);
        java.time.ZoneOffset zoneOffset55 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime56 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset55);
        java.time.ZonedDateTime zonedDateTime57 = java.time.ZonedDateTime.of(localDateTime51, (java.time.ZoneId) zoneOffset55);
        java.time.temporal.ChronoField chronoField59 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit60 = chronoField59.getBaseUnit();
        java.time.LocalDateTime localDateTime61 = localDateTime51.plus((long) 1970, temporalUnit60);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime62 = localDateTime45.minus((long) 43, temporalUnit60);
        java.time.Instant instant63 = instant29.plus((long) 16384, temporalUnit60);
        java.time.LocalTime localTime64 = localTime14.plus((long) 64, temporalUnit60);
        java.time.ZoneOffset zoneOffset68 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime69 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset68);
        java.time.ZoneOffset zoneOffset73 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime74 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset73);
        java.time.ZonedDateTime zonedDateTime75 = java.time.ZonedDateTime.of(localDateTime69, (java.time.ZoneId) zoneOffset73);
        java.time.OffsetTime offsetTime76 = java.time.OffsetTime.of(localTime64, zoneOffset73);
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoZonedDateTime<? extends java.time.chrono.ChronoLocalDate> wildcardChronoZonedDateTime77 = isoChronology2.zonedDateTime((java.time.temporal.TemporalAccessor) offsetTime76);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unable to obtain ZonedDateTime from TemporalAccessor: 16:00:52+00:00:52 of type java.time.OffsetTime");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "2022-02-21" + "'", str1, "2022-02-21");
        org.junit.Assert.assertNotNull(isoChronology2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ISO" + "'", str3, "ISO");
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(offsetDateTime12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-01-01T00:00:52+00:00:52" + "'", str13, "1970-01-01T00:00:52+00:00:52");
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1970 + "'", int21 == 1970);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(offsetDateTime28);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(zoneOffset39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(zonedDateTime41);
        org.junit.Assert.assertTrue("'" + chronoField43 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField43.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit44 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit44.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(zoneOffset50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(zoneOffset55);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(zonedDateTime57);
        org.junit.Assert.assertTrue("'" + chronoField59 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField59.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit60 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit60.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime62);
        org.junit.Assert.assertNotNull(instant63);
        org.junit.Assert.assertNotNull(localTime64);
        org.junit.Assert.assertNotNull(zoneOffset68);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(zoneOffset73);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(zonedDateTime75);
        org.junit.Assert.assertNotNull(offsetTime76);
    }

    @Test
    public void test1602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1602");
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto0 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.getDefaultInstance();
        boolean boolean1 = serviceDescriptorProto0.hasOptions();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder2 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.newBuilder(serviceDescriptorProto0);
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto3 = builder2.buildPartial();
        com.google.protobuf.DescriptorProtos.ServiceOptions serviceOptions4 = builder2.getOptions();
        int int5 = serviceOptions4.getUninterpretedOptionCount();
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.UninterpretedOption uninterpretedOption7 = serviceOptions4.getUninterpretedOption(31);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 31");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serviceDescriptorProto0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(serviceDescriptorProto3);
        org.junit.Assert.assertNotNull(serviceOptions4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test1603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1603");
        com.google.javascript.jscomp.SourceFile.Builder builder0 = new com.google.javascript.jscomp.SourceFile.Builder();
        java.io.Reader reader2 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.SourceFile sourceFile3 = builder0.buildFromReader("1970-01-01T00:00:00Z", reader2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1604");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset10);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.of(localDateTime11, (java.time.ZoneId) zoneOffset15);
        java.time.Clock clock18 = java.time.Clock.fixed(instant0, (java.time.ZoneId) zoneOffset15);
        java.time.temporal.TemporalField temporalField19 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int20 = instant0.get(temporalField19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: field");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(clock18);
    }

    @Test
    public void test1605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1605");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType4 = jSTypeRegistry2.createObjectType(objectType3);
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.jstype.ObjectType objectType8 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry7.createObjectType(objectType8);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair10 = objectType4.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType9);
        java.lang.String str11 = objectType9.getDisplayName();
        com.google.javascript.rhino.jstype.FunctionType functionType12 = objectType9.getConstructor();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = functionType12.getDisplayName();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectType4);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertNotNull(typePair10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNull(functionType12);
    }

    @Test
    public void test1606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1606");
        java.time.Period period0 = java.time.Period.ZERO;
        java.time.chrono.ChronoPeriod chronoPeriod1 = period0.normalized();
        java.time.temporal.ChronoField chronoField2 = java.time.temporal.ChronoField.EPOCH_DAY;
        java.time.Instant instant3 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime8 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset7);
        java.time.OffsetDateTime offsetDateTime9 = java.time.OffsetDateTime.ofInstant(instant3, (java.time.ZoneId) zoneOffset7);
        java.time.temporal.ValueRange valueRange10 = chronoField2.rangeRefinedBy((java.time.temporal.TemporalAccessor) offsetDateTime9);
        java.time.temporal.Temporal temporal11 = period0.subtractFrom((java.time.temporal.Temporal) offsetDateTime9);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZoneOffset zoneOffset20 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset20);
        java.time.ZonedDateTime zonedDateTime22 = java.time.ZonedDateTime.of(localDateTime16, (java.time.ZoneId) zoneOffset20);
        java.time.ZonedDateTime zonedDateTime24 = zonedDateTime22.withYear((int) (short) 1);
        java.time.OffsetDateTime offsetDateTime25 = zonedDateTime22.toOffsetDateTime();
        java.time.ZonedDateTime zonedDateTime27 = zonedDateTime22.plusDays((long) (byte) -1);
        boolean boolean28 = offsetDateTime9.equals((java.lang.Object) zonedDateTime22);
        java.time.ZonedDateTime zonedDateTime30 = zonedDateTime22.plusSeconds((long) 1024);
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(chronoPeriod1);
        org.junit.Assert.assertTrue("'" + chronoField2 + "' != '" + java.time.temporal.ChronoField.EPOCH_DAY + "'", chronoField2.equals(java.time.temporal.ChronoField.EPOCH_DAY));
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(valueRange10);
        org.junit.Assert.assertNotNull(temporal11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zoneOffset20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zonedDateTime22);
        org.junit.Assert.assertNotNull(zonedDateTime24);
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertNotNull(zonedDateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(zonedDateTime30);
    }

    @Test
    public void test1607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1607");
        long[] longArray5 = new long[] { 97, 57600000000000L, 28147497671065600L, 52, 37 };
        java.nio.LongBuffer longBuffer6 = java.nio.LongBuffer.wrap(longArray5);
        long[] longArray7 = longBuffer6.array();
        java.nio.ByteOrder byteOrder8 = longBuffer6.order();
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[97, 57600000000000, 28147497671065600, 52, 37]");
        org.junit.Assert.assertNotNull(longBuffer6);
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[97, 57600000000000, 28147497671065600, 52, 37]");
        org.junit.Assert.assertNotNull(byteOrder8);
    }

    @Test
    public void test1608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1608");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        boolean boolean1 = charset0.canEncode();
        java.nio.charset.CharsetEncoder charsetEncoder2 = charset0.newEncoder();
        float float3 = charsetEncoder2.maxBytesPerChar();
        java.nio.charset.CharsetEncoder charsetEncoder4 = charsetEncoder2.reset();
        java.nio.CharBuffer charBuffer6 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer8 = charBuffer6.put('a');
        char[] charArray10 = new char[] { '4' };
        java.nio.CharBuffer charBuffer11 = charBuffer8.get(charArray10);
        boolean boolean12 = charsetEncoder2.canEncode((java.lang.CharSequence) charBuffer11);
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(charsetEncoder2);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 1.0f + "'", float3 == 1.0f);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(charBuffer8);
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test1609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1609");
        java.time.Period period0 = java.time.Period.ZERO;
        java.time.chrono.ChronoPeriod chronoPeriod1 = period0.normalized();
        int int2 = period0.getYears();
        boolean boolean3 = period0.isNegative();
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime8 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset7);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime13 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset12);
        java.time.ZonedDateTime zonedDateTime14 = java.time.ZonedDateTime.of(localDateTime8, (java.time.ZoneId) zoneOffset12);
        java.time.ZonedDateTime zonedDateTime16 = zonedDateTime14.withYear((int) (short) 1);
        java.time.LocalTime localTime17 = zonedDateTime14.toLocalTime();
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset22);
        java.time.ZoneOffset zoneOffset27 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset27);
        java.time.ZonedDateTime zonedDateTime29 = java.time.ZonedDateTime.of(localDateTime23, (java.time.ZoneId) zoneOffset27);
        java.time.temporal.ChronoField chronoField31 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit32 = chronoField31.getBaseUnit();
        java.time.LocalDateTime localDateTime33 = localDateTime23.plus((long) 1970, temporalUnit32);
        java.time.ZoneOffset zoneOffset38 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime39 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset38);
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime44 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset43);
        java.time.ZonedDateTime zonedDateTime45 = java.time.ZonedDateTime.of(localDateTime39, (java.time.ZoneId) zoneOffset43);
        java.time.temporal.ChronoField chronoField47 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit48 = chronoField47.getBaseUnit();
        java.time.LocalDateTime localDateTime49 = localDateTime39.plus((long) 1970, temporalUnit48);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime50 = localDateTime33.minus((long) 43, temporalUnit48);
        java.time.LocalDateTime localDateTime52 = localDateTime33.minusHours((long) 1024);
        java.time.LocalDateTime localDateTime54 = localDateTime52.plusHours((long) 0);
        java.time.ZoneOffset zoneOffset58 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime59 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset58);
        java.time.ZoneOffset zoneOffset63 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime64 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset63);
        java.time.ZonedDateTime zonedDateTime65 = java.time.ZonedDateTime.of(localDateTime59, (java.time.ZoneId) zoneOffset63);
        java.time.ZonedDateTime zonedDateTime67 = zonedDateTime65.minusSeconds((long) '#');
        java.time.temporal.ChronoField chronoField68 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit69 = chronoField68.getBaseUnit();
        boolean boolean70 = zonedDateTime67.isSupported(temporalUnit69);
        java.time.LocalDate localDate71 = java.time.LocalDate.now();
        java.lang.String str72 = localDate71.toString();
        boolean boolean73 = temporalUnit69.isSupportedBy((java.time.temporal.Temporal) localDate71);
        java.time.LocalDateTime localDateTime74 = localDateTime52.truncatedTo(temporalUnit69);
        boolean boolean75 = temporalUnit69.isTimeBased();
        java.time.LocalTime localTime76 = localTime17.plus((long) 50, temporalUnit69);
        // The following exception was thrown during execution in test generation
        try {
            long long77 = period0.get(temporalUnit69);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported unit: Hours");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(chronoPeriod1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(zonedDateTime14);
        org.junit.Assert.assertNotNull(zonedDateTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zoneOffset27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zonedDateTime29);
        org.junit.Assert.assertTrue("'" + chronoField31 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField31.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit32 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit32.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(zoneOffset38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(zonedDateTime45);
        org.junit.Assert.assertTrue("'" + chronoField47 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField47.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit48 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit48.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(zoneOffset58);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(zoneOffset63);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(zonedDateTime65);
        org.junit.Assert.assertNotNull(zonedDateTime67);
        org.junit.Assert.assertTrue("'" + chronoField68 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField68.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit69 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit69.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "2022-02-21" + "'", str72, "2022-02-21");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(localTime76);
    }

    @Test
    public void test1610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1610");
        com.google.protobuf.Descriptors.Descriptor descriptor0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto1 = descriptor0.toProto();
        boolean boolean2 = descriptorProto1.isInitialized();
        com.google.protobuf.DescriptorProtos.MessageOptions messageOptions3 = descriptorProto1.getOptions();
        com.google.protobuf.DescriptorProtos.MessageOptions.Builder builder4 = messageOptions3.newBuilderForType();
        com.google.protobuf.DescriptorProtos.MessageOptions.Builder builder6 = builder4.setMessageSetWireFormat(false);
        com.google.protobuf.DescriptorProtos.MessageOptions.Builder builder7 = builder6.clone();
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder9 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output11 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream13 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output11, (int) 'a');
        byte[] byteArray14 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite15 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions16 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray14, extensionRegistryLite15);
        output11.write(byteArray14);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder18 = builder9.mergeFrom(byteArray14);
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions19 = builder9.buildPartial();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder20 = builder9.addUninterpretedOptionBuilder();
        boolean boolean21 = builder20.hasNegativeIntValue();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder22 = builder20.clearStringValue();
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.MessageOptions.Builder builder23 = builder6.setUninterpretedOption((int) (byte) 1, builder20);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptor0);
        org.junit.Assert.assertNotNull(descriptorProto1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(messageOptions3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(output11);
        org.junit.Assert.assertNotNull(codedOutputStream13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(methodOptions16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(methodOptions19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test1611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1611");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto2 = com.google.protobuf.DescriptorProtos.DescriptorProto.parseFrom(inputStream0, extensionRegistryLite1);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto4 = descriptorProto2.getExtension(102);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 102");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptorProto2);
    }

    @Test
    public void test1612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1612");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer3 = charBuffer1.put('a');
        char[] charArray5 = new char[] { '4' };
        java.nio.CharBuffer charBuffer6 = charBuffer3.get(charArray5);
        java.nio.CharBuffer charBuffer8 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer10 = charBuffer8.put('a');
        char[] charArray12 = new char[] { '4' };
        java.nio.CharBuffer charBuffer13 = charBuffer10.get(charArray12);
        java.nio.CharBuffer charBuffer14 = charBuffer3.put(charArray12);
        java.nio.CharBuffer charBuffer15 = charBuffer3.slice();
        java.nio.CharBuffer charBuffer17 = charBuffer3.append('#');
        int int18 = charBuffer17.length();
        java.nio.CharBuffer charBuffer19 = charBuffer17.slice();
        java.nio.CharBuffer charBuffer21 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer23 = charBuffer21.put('a');
        char[] charArray25 = new char[] { '4' };
        java.nio.CharBuffer charBuffer26 = charBuffer23.get(charArray25);
        java.nio.CharBuffer charBuffer28 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer30 = charBuffer28.put('a');
        char[] charArray32 = new char[] { '4' };
        java.nio.CharBuffer charBuffer33 = charBuffer30.get(charArray32);
        java.nio.CharBuffer charBuffer34 = charBuffer23.put(charArray32);
        java.nio.CharBuffer charBuffer35 = charBuffer23.slice();
        char[] charArray40 = new char[] { '#', ' ', ':', ' ' };
        java.nio.CharBuffer charBuffer41 = java.nio.CharBuffer.wrap(charArray40);
        java.nio.CharBuffer charBuffer42 = charBuffer35.get(charArray40);
        java.nio.CharBuffer charBuffer43 = charBuffer19.get(charArray40);
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(charBuffer3);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(charBuffer8);
        org.junit.Assert.assertNotNull(charBuffer10);
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer13);
        org.junit.Assert.assertNotNull(charBuffer14);
        org.junit.Assert.assertNotNull(charBuffer15);
        org.junit.Assert.assertNotNull(charBuffer17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 28 + "'", int18 == 28);
        org.junit.Assert.assertNotNull(charBuffer19);
        org.junit.Assert.assertNotNull(charBuffer21);
        org.junit.Assert.assertNotNull(charBuffer23);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer26);
        org.junit.Assert.assertNotNull(charBuffer28);
        org.junit.Assert.assertNotNull(charBuffer30);
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer33);
        org.junit.Assert.assertNotNull(charBuffer34);
        org.junit.Assert.assertNotNull(charBuffer35);
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[\000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(charBuffer41);
        org.junit.Assert.assertNotNull(charBuffer42);
        org.junit.Assert.assertNotNull(charBuffer43);
    }

    @Test
    public void test1613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1613");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.OffsetDateTime offsetDateTime8 = offsetDateTime6.minusDays((long) (short) 100);
        java.lang.String str9 = offsetDateTime6.toString();
        java.time.ZoneOffset zoneOffset10 = offsetDateTime6.getOffset();
        java.time.LocalTime localTime11 = offsetDateTime6.toLocalTime();
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap12 = java.nio.charset.Charset.availableCharsets();
        java.net.URISyntaxException uRISyntaxException15 = new java.net.URISyntaxException("hi!", "");
        boolean boolean16 = strMap12.containsKey((java.lang.Object) "");
        java.util.Set<java.lang.String> strSet17 = strMap12.keySet();
        boolean boolean18 = offsetDateTime6.equals((java.lang.Object) strMap12);
        java.util.Comparator<? super java.lang.String> wildcardComparator19 = strMap12.comparator();
        java.util.Comparator<? super java.lang.String> wildcardComparator20 = strMap12.comparator();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(offsetDateTime8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-01T00:00:52+00:00:52" + "'", str9, "1970-01-01T00:00:52+00:00:52");
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(strMap12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(wildcardComparator19);
        org.junit.Assert.assertNotNull(wildcardComparator20);
    }

    @Test
    public void test1614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1614");
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap0 = java.nio.charset.Charset.availableCharsets();
        java.net.URISyntaxException uRISyntaxException3 = new java.net.URISyntaxException("hi!", "");
        boolean boolean4 = strMap0.containsKey((java.lang.Object) "");
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap5 = java.nio.charset.Charset.availableCharsets();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean10 = strMap5.containsValue((java.lang.Object) '4');
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap11 = java.nio.charset.Charset.availableCharsets();
        java.net.URISyntaxException uRISyntaxException14 = new java.net.URISyntaxException("hi!", "");
        boolean boolean15 = strMap11.containsKey((java.lang.Object) "");
        int int16 = strMap11.size();
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap17 = java.nio.charset.Charset.availableCharsets();
        java.util.Set<java.lang.String> strSet18 = strMap17.keySet();
        java.util.Set<java.lang.String> strSet19 = strMap17.keySet();
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap20 = java.nio.charset.Charset.availableCharsets();
        java.net.URISyntaxException uRISyntaxException23 = new java.net.URISyntaxException("hi!", "");
        boolean boolean24 = strMap20.containsKey((java.lang.Object) "");
        int int25 = strMap20.size();
        com.google.common.collect.ImmutableList<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>> strMapList26 = com.google.common.collect.ImmutableList.of(strMap0, strMap5, strMap11, strMap17, strMap20);
        java.lang.String str27 = strMap17.lastKey();
        java.util.Collection<java.nio.charset.Charset> charsetCollection28 = strMap17.values();
        org.junit.Assert.assertNotNull(strMap0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 171 + "'", int16 == 171);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 171 + "'", int25 == 171);
        org.junit.Assert.assertNotNull(strMapList26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "x-windows-iso2022jp" + "'", str27, "x-windows-iso2022jp");
        org.junit.Assert.assertNotNull(charsetCollection28);
    }

    @Test
    public void test1615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1615");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode3 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry2.setResolveMode(resolveMode3);
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.jstype.ObjectType objectType8 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry7.createObjectType(objectType8);
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10, false);
        com.google.javascript.rhino.jstype.ObjectType objectType13 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType14 = jSTypeRegistry12.createObjectType(objectType13);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair15 = objectType9.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType14);
        java.lang.String str16 = objectType14.getDisplayName();
        objectType14.clearResolved();
        com.google.javascript.rhino.jstype.JSType jSType18 = jSTypeRegistry2.createNullableType((com.google.javascript.rhino.jstype.JSType) objectType14);
        boolean boolean19 = jSType18.isEmptyType();
        com.google.javascript.rhino.ErrorReporter errorReporter20 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter20, false);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        com.google.javascript.rhino.jstype.ObjectType objectType26 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType27 = jSTypeRegistry25.createObjectType(objectType26);
        com.google.javascript.rhino.ErrorReporter errorReporter28 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter28, false);
        com.google.javascript.rhino.jstype.ObjectType objectType31 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType32 = jSTypeRegistry30.createObjectType(objectType31);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair33 = objectType27.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType32);
        java.lang.String str34 = objectType32.getDisplayName();
        java.util.Collection<com.google.javascript.rhino.jstype.FunctionType> functionTypeCollection35 = jSTypeRegistry22.getDirectImplementors(objectType32);
        java.lang.String str36 = objectType32.toDebugHashCodeString();
        com.google.javascript.rhino.jstype.JSType jSType37 = jSType18.getGreatestSubtype((com.google.javascript.rhino.jstype.JSType) objectType32);
        boolean boolean38 = objectType32.isVoidType();
        org.junit.Assert.assertTrue("'" + resolveMode3 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode3.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertNotNull(objectType14);
        org.junit.Assert.assertNotNull(typePair15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(jSType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objectType27);
        org.junit.Assert.assertNotNull(objectType32);
        org.junit.Assert.assertNotNull(typePair33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(functionTypeCollection35);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "{1276638193}" + "'", str36, "{1276638193}");
        org.junit.Assert.assertNotNull(jSType37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test1616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1616");
        byte[] byteArray0 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions2 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray0, extensionRegistryLite1);
        com.google.protobuf.CodedOutputStream codedOutputStream5 = com.google.protobuf.CodedOutputStream.newInstance(byteArray0, (int) (short) 0, 1);
        com.google.protobuf.CodedOutputStream codedOutputStream8 = com.google.protobuf.CodedOutputStream.newInstance(byteArray0, (int) ' ', 0);
        java.io.InputStream inputStream9 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location10 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream9);
        boolean boolean11 = location10.isInitialized();
        codedOutputStream8.writeGroupNoTag((com.google.protobuf.MessageLite) location10);
        // The following exception was thrown during execution in test generation
        try {
            codedOutputStream8.writeRawVarint64(100L);
            org.junit.Assert.fail("Expected exception of type com.google.protobuf.CodedOutputStream.OutOfSpaceException; message: CodedOutputStream was writing to a flat byte array and ran out of space.");
        } catch (com.google.protobuf.CodedOutputStream.OutOfSpaceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(methodOptions2);
        org.junit.Assert.assertNotNull(codedOutputStream5);
        org.junit.Assert.assertNotNull(codedOutputStream8);
        org.junit.Assert.assertNotNull(location10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test1617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1617");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder3 = builder2.clearSourceCodeInfo();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder4 = builder2.getSourceCodeInfoBuilder();
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor5 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.Message.Builder builder6 = builder2.newBuilderForField(fieldDescriptor5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test1618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1618");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean4 = node3.isFromExterns();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean9 = node8.isFromExterns();
        java.lang.String str10 = node8.toString();
        com.google.javascript.rhino.Node node11 = node3.copyInformationFrom(node8);
        int int12 = node3.getLineno();
        com.google.javascript.rhino.JSDocInfo jSDocInfo13 = node3.getJSDocInfo();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER 52.0 0" + "'", str10, "NUMBER 52.0 0");
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(jSDocInfo13);
    }

    @Test
    public void test1619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1619");
        byte[] byteArray0 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions2 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray0, extensionRegistryLite1);
        com.google.protobuf.CodedInputStream codedInputStream5 = com.google.protobuf.CodedInputStream.newInstance(byteArray0, 16, (int) 'a');
        com.google.javascript.jscomp.CompilerOptions compilerOptions6 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions6.setRecordFunctionInformation(true);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder9 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder11 = builder9.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder12 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label13 = builder12.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder14 = builder9.addExtension(builder12);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder15 = builder9.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions16 = builder15.getOptions();
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder17 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output19 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream21 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output19, (int) 'a');
        byte[] byteArray22 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite23 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions24 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray22, extensionRegistryLite23);
        output19.write(byteArray22);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder26 = builder17.mergeFrom(byteArray22);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder27 = builder15.mergeFrom(byteArray22);
        compilerOptions6.setInputVariableMapSerialized(byteArray22);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite29 = null;
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto enumDescriptorProto30 = com.google.protobuf.DescriptorProtos.EnumDescriptorProto.parseFrom(byteArray22, extensionRegistryLite29);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder31 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder33 = builder31.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder34 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label35 = builder34.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder36 = builder31.addExtension(builder34);
        boolean boolean37 = builder34.hasDefaultValue();
        java.io.InputStream inputStream38 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite39 = null;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder40 = builder34.mergeFrom(inputStream38, extensionRegistryLite39);
        java.io.InputStream inputStream41 = null;
        java.io.InputStream inputStream42 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite43 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location44 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream42, extensionRegistryLite43);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder45 = builder40.mergeFrom(inputStream41, extensionRegistryLite43);
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location46 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(byteArray22, extensionRegistryLite43);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.FunctionInformationMap functionInformationMap47 = com.google.javascript.jscomp.FunctionInformationMap.parseFrom(codedInputStream5, extensionRegistryLite43);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 16");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(methodOptions2);
        org.junit.Assert.assertNotNull(codedInputStream5);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + label13 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label13.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(enumOptions16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(output19);
        org.junit.Assert.assertNotNull(codedOutputStream21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(methodOptions24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(enumDescriptorProto30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + label35 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label35.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(extensionRegistryLite43);
        org.junit.Assert.assertNotNull(location44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(location46);
    }

    @Test
    public void test1620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1620");
        java.util.function.LongUnaryOperator longUnaryOperator0 = java.util.function.LongUnaryOperator.identity();
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.of((long) (-1));
        java.util.stream.LongStream longStream3 = longStream2.distinct();
        java.util.function.LongUnaryOperator longUnaryOperator4 = java.util.function.LongUnaryOperator.identity();
        java.util.stream.LongStream longStream5 = longStream3.map(longUnaryOperator4);
        java.util.function.LongUnaryOperator longUnaryOperator6 = longUnaryOperator0.andThen(longUnaryOperator4);
        org.junit.Assert.assertNotNull(longUnaryOperator0);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longStream3);
        org.junit.Assert.assertNotNull(longUnaryOperator4);
        org.junit.Assert.assertNotNull(longStream5);
        org.junit.Assert.assertNotNull(longUnaryOperator6);
    }

    @Test
    public void test1621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1621");
        com.google.javascript.jscomp.ErrorFormat errorFormat0 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        java.io.PrintStream printStream1 = null;
        com.google.javascript.jscomp.Compiler compiler2 = new com.google.javascript.jscomp.Compiler(printStream1);
        com.google.javascript.jscomp.ErrorManager errorManager3 = compiler2.getErrorManager();
        com.google.javascript.jscomp.MessageFormatter messageFormatter5 = errorFormat0.toFormatter((com.google.javascript.jscomp.SourceExcerptProvider) compiler2, false);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean11 = node10.isFromExterns();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean16 = node15.isFromExterns();
        java.lang.String str17 = node15.toString();
        com.google.javascript.rhino.Node node18 = node10.copyInformationFrom(node15);
        int int19 = node10.getLineno();
        boolean boolean20 = node10.isLabel();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean25 = node24.isStringKey();
        boolean boolean26 = node24.isTrue();
        com.google.javascript.rhino.InputId inputId28 = new com.google.javascript.rhino.InputId("NUMBER 52.0 0");
        node24.setInputId(inputId28);
        node10.setInputId(inputId28);
        com.google.javascript.jscomp.CompilerOptions compilerOptions31 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions31.setRecordFunctionInformation(true);
        boolean boolean34 = compilerOptions31.checkControlStructures;
        compilerOptions31.setCollapseProperties(false);
        compilerOptions31.setAssumeStrictThis(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions39 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions39.optimizeCalls = false;
        compilerOptions39.preferLineBreakAtEndOfFile = false;
        boolean boolean44 = compilerOptions39.markNoSideEffectCalls;
        boolean boolean45 = compilerOptions39.labelRenaming;
        com.google.javascript.jscomp.DependencyOptions dependencyOptions46 = new com.google.javascript.jscomp.DependencyOptions();
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet51 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet51, strArray50);
        boolean boolean53 = strSet51.isEmpty();
        java.nio.ByteBuffer byteBuffer55 = java.nio.ByteBuffer.allocate(100);
        boolean boolean56 = strSet51.equals((java.lang.Object) byteBuffer55);
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet61 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet61, strArray60);
        boolean boolean63 = strSet61.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream64 = strSet61.stream();
        boolean boolean65 = strSet51.retainAll((java.util.Collection<java.lang.String>) strSet61);
        com.google.javascript.jscomp.DependencyOptions dependencyOptions66 = dependencyOptions46.setEntryPoints((java.util.Collection<java.lang.String>) strSet51);
        compilerOptions39.setDependencyOptions(dependencyOptions46);
        com.google.javascript.jscomp.CheckLevel checkLevel68 = compilerOptions39.checkGlobalThisLevel;
        compilerOptions31.reportMissingOverride = checkLevel68;
        com.google.javascript.jscomp.DiagnosticType diagnosticType72 = com.google.javascript.jscomp.DiagnosticType.warning("", "Unknown class name");
        java.lang.String[] strArray77 = new java.lang.String[] { "2022-02-21", "2022-02-21", "hi!", "/tmp/hi!4516073975838273390ISO" };
        com.google.javascript.jscomp.JSError jSError78 = com.google.javascript.jscomp.JSError.make("{}", node10, checkLevel68, diagnosticType72, strArray77);
        java.lang.String str79 = messageFormatter5.formatError(jSError78);
        int int80 = jSError78.getNodeLength();
        org.junit.Assert.assertNotNull(errorFormat0);
        org.junit.Assert.assertNotNull(errorManager3);
        org.junit.Assert.assertNotNull(messageFormatter5);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "NUMBER 52.0 0" + "'", str17, "NUMBER 52.0 0");
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strStream64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(dependencyOptions66);
        org.junit.Assert.assertTrue("'" + checkLevel68 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel68.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(diagnosticType72);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(jSError78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "{}: ERROR - Unknown class name\n" + "'", str79, "{}: ERROR - Unknown class name\n");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
    }

    @Test
    public void test1622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1622");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
    }

    @Test
    public void test1623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1623");
        com.google.protobuf.Descriptors.EnumDescriptor enumDescriptor1 = com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.getDescriptor();
        com.google.protobuf.Descriptors.EnumDescriptor enumDescriptor2 = com.google.protobuf.DescriptorProtos.FieldOptions.CType.getDescriptor();
        com.google.protobuf.Descriptors.EnumDescriptor enumDescriptor3 = com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.getDescriptor();
        com.google.protobuf.Descriptors.EnumValueDescriptor enumValueDescriptor5 = enumDescriptor3.findValueByNumber((int) (byte) 10);
        java.io.PrintStream printStream6 = null;
        com.google.javascript.jscomp.Compiler compiler7 = new com.google.javascript.jscomp.Compiler(printStream6);
        com.google.javascript.jscomp.SourceMap sourceMap8 = compiler7.getSourceMap();
        java.util.stream.LongStream longStream10 = java.util.stream.LongStream.of((long) (-1));
        com.google.common.collect.ImmutableMap<com.google.javascript.jscomp.Compiler, java.util.stream.LongStream> compilerMap11 = com.google.common.collect.ImmutableMap.of(compiler7, longStream10);
        com.google.common.collect.Ordering<com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode> optimizeModeOrdering12 = com.google.common.collect.Ordering.natural();
        com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode optimizeMode13 = com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE;
        com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode optimizeMode14 = com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE;
        com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode optimizeMode15 = optimizeModeOrdering12.min(optimizeMode13, optimizeMode14);
        com.google.protobuf.Descriptors.EnumDescriptor enumDescriptor16 = optimizeMode15.getDescriptorForType();
        boolean boolean17 = compilerMap11.equals((java.lang.Object) enumDescriptor16);
        com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode optimizeMode18 = com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE;
        com.google.protobuf.Descriptors.EnumDescriptor enumDescriptor19 = optimizeMode18.getDescriptorForType();
        com.google.protobuf.Descriptors.EnumDescriptor enumDescriptor20 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type.getDescriptor();
        com.google.protobuf.Internal.EnumLiteMap[] enumLiteMapArray22 = new com.google.protobuf.Internal.EnumLiteMap[6];
        @SuppressWarnings("unchecked")
        com.google.protobuf.Internal.EnumLiteMap<com.google.protobuf.Descriptors.EnumValueDescriptor>[] enumValueDescriptorEnumLiteMapArray23 = (com.google.protobuf.Internal.EnumLiteMap<com.google.protobuf.Descriptors.EnumValueDescriptor>[]) enumLiteMapArray22;
        enumValueDescriptorEnumLiteMapArray23[0] = enumDescriptor1;
        enumValueDescriptorEnumLiteMapArray23[1] = enumDescriptor2;
        enumValueDescriptorEnumLiteMapArray23[2] = enumDescriptor3;
        enumValueDescriptorEnumLiteMapArray23[3] = enumDescriptor16;
        enumValueDescriptorEnumLiteMapArray23[4] = enumDescriptor19;
        enumValueDescriptorEnumLiteMapArray23[5] = enumDescriptor20;
        com.google.common.collect.ImmutableSet<com.google.protobuf.Internal.EnumLiteMap<com.google.protobuf.Descriptors.EnumValueDescriptor>> enumValueDescriptorEnumLiteMapSet36 = com.google.common.collect.ImmutableSet.of(enumValueDescriptorEnumLiteMapArray23);
        java.lang.String str37 = java.text.MessageFormat.format("NUMBER 52.0 0", (java.lang.Object[]) enumValueDescriptorEnumLiteMapArray23);
        org.junit.Assert.assertNotNull(enumDescriptor1);
        org.junit.Assert.assertNotNull(enumDescriptor2);
        org.junit.Assert.assertNotNull(enumDescriptor3);
        org.junit.Assert.assertNull(enumValueDescriptor5);
        org.junit.Assert.assertNull(sourceMap8);
        org.junit.Assert.assertNotNull(longStream10);
        org.junit.Assert.assertNotNull(compilerMap11);
        org.junit.Assert.assertNotNull(optimizeModeOrdering12);
        org.junit.Assert.assertTrue("'" + optimizeMode13 + "' != '" + com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE + "'", optimizeMode13.equals(com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE));
        org.junit.Assert.assertTrue("'" + optimizeMode14 + "' != '" + com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE + "'", optimizeMode14.equals(com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE));
        org.junit.Assert.assertTrue("'" + optimizeMode15 + "' != '" + com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE + "'", optimizeMode15.equals(com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE));
        org.junit.Assert.assertNotNull(enumDescriptor16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + optimizeMode18 + "' != '" + com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE + "'", optimizeMode18.equals(com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE));
        org.junit.Assert.assertNotNull(enumDescriptor19);
        org.junit.Assert.assertNotNull(enumDescriptor20);
        org.junit.Assert.assertNotNull(enumLiteMapArray22);
        org.junit.Assert.assertNotNull(enumValueDescriptorEnumLiteMapArray23);
        org.junit.Assert.assertNotNull(enumValueDescriptorEnumLiteMapSet36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "NUMBER 52.0 0" + "'", str37, "NUMBER 52.0 0");
    }

    @Test
    public void test1624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1624");
        java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite> priorityMap0 = new java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite>();
        java.lang.Object obj1 = priorityMap0.clone();
        java.util.Enumeration<com.google.javascript.jscomp.WarningsGuard.Priority> priorityEnumeration2 = priorityMap0.keys();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.WarningsGuard.Priority priority3 = priorityEnumeration2.nextElement();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "{}");
        org.junit.Assert.assertNotNull(priorityEnumeration2);
    }

    @Test
    public void test1625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1625");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet5 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet5, strArray4);
        boolean boolean7 = strSet5.isEmpty();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocate(100);
        boolean boolean10 = strSet5.equals((java.lang.Object) byteBuffer9);
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        boolean boolean17 = strSet15.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream18 = strSet15.stream();
        boolean boolean19 = strSet5.retainAll((java.util.Collection<java.lang.String>) strSet15);
        compilerOptions0.setExtraAnnotationNames((java.util.Set<java.lang.String>) strSet15);
        compilerOptions0.setTweakToDoubleLiteral("ISO", (double) (short) 1);
        compilerOptions0.setUnaliasableGlobals("{1572375491}");
        compilerOptions0.setRemoveAbstractMethods(false);
        boolean boolean28 = compilerOptions0.optimizeParameters;
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strStream18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test1626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1626");
        com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode optimizeMode0 = com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.SPEED;
        com.google.protobuf.Descriptors.EnumDescriptor enumDescriptor1 = optimizeMode0.getDescriptorForType();
        com.google.protobuf.Descriptors.EnumValueDescriptor enumValueDescriptor3 = enumDescriptor1.findValueByNumber((int) '\000');
        org.junit.Assert.assertTrue("'" + optimizeMode0 + "' != '" + com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.SPEED + "'", optimizeMode0.equals(com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.SPEED));
        org.junit.Assert.assertNotNull(enumDescriptor1);
        org.junit.Assert.assertNull(enumValueDescriptor3);
    }

    @Test
    public void test1627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1627");
        java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite> priorityMap0 = new java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite>();
        java.lang.Object obj1 = priorityMap0.clone();
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder2 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.newBuilder();
        boolean boolean3 = priorityMap0.containsValue((java.lang.Object) builder2);
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder5 = builder2.setName("java.nio.ByteBufferAsDoubleBufferB[pos=0 lim=12 cap=12]");
        com.google.protobuf.ByteString byteString6 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder7 = builder2.mergeFrom(byteString6);
        com.google.protobuf.DescriptorProtos.ServiceOptions serviceOptions8 = com.google.protobuf.DescriptorProtos.ServiceOptions.parseFrom(byteString6);
        boolean boolean9 = serviceOptions8.isInitialized();
        int int10 = serviceOptions8.getUninterpretedOptionCount();
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "{}");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(byteString6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(serviceOptions8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test1628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1628");
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto0 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.getDefaultInstance();
        boolean boolean1 = methodDescriptorProto0.hasOutputType();
        com.google.protobuf.CodedOutputStream codedOutputStream2 = null;
        methodDescriptorProto0.writeTo(codedOutputStream2);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder4 = methodDescriptorProto0.toBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder5 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder6 = builder5.clearCcGenericServices();
        boolean boolean7 = builder5.isInitialized();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder9 = builder5.setCcGenericServices(true);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder10 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label11 = builder10.getLabel();
        com.google.protobuf.ByteString byteString12 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder13 = builder10.mergeFrom(byteString12);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite14 = null;
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder15 = builder9.mergeFrom(byteString12, extensionRegistryLite14);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite16 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions17 = com.google.protobuf.DescriptorProtos.EnumValueOptions.parseFrom(byteString12, extensionRegistryLite16);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite18 = null;
        com.google.protobuf.DescriptorProtos.MessageOptions messageOptions19 = com.google.protobuf.DescriptorProtos.MessageOptions.parseFrom(byteString12, extensionRegistryLite18);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite20 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder21 = builder4.mergeFrom(byteString12, extensionRegistryLite20);
        java.lang.String str22 = builder21.getInputType();
        org.junit.Assert.assertNotNull(methodDescriptorProto0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + label11 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label11.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(byteString12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(enumValueOptions17);
        org.junit.Assert.assertNotNull(messageOptions19);
        org.junit.Assert.assertNotNull(extensionRegistryLite20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
    }

    @Test
    public void test1629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1629");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto2 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.parseFrom(inputStream0, extensionRegistryLite1);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto3 = fieldDescriptorProto2.getDefaultInstanceForType();
        boolean boolean4 = fieldDescriptorProto3.hasExtendee();
        int int5 = fieldDescriptorProto3.getSerializedSize();
        java.lang.String str6 = fieldDescriptorProto3.getDefaultValue();
        org.junit.Assert.assertNotNull(fieldDescriptorProto2);
        org.junit.Assert.assertNotNull(fieldDescriptorProto3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test1630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1630");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset10);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.of(localDateTime11, (java.time.ZoneId) zoneOffset15);
        java.time.Clock clock18 = java.time.Clock.fixed(instant0, (java.time.ZoneId) zoneOffset15);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.now(clock18);
        java.time.LocalDate localDate20 = java.time.LocalDate.now(clock18);
        com.google.protobuf.Descriptors.Descriptor descriptor21 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto22 = descriptor21.toProto();
        boolean boolean23 = descriptorProto22.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList24 = descriptorProto22.getNestedTypeList();
        int int25 = descriptorProto22.getExtensionRangeCount();
        boolean boolean26 = localDate20.equals((java.lang.Object) descriptorProto22);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder27 = descriptorProto22.newBuilderForType();
        java.util.List<com.google.protobuf.DescriptorProtos.FieldDescriptorProto> fieldDescriptorProtoList28 = builder27.getExtensionList();
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.Builder builder29 = com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.newBuilder();
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder30 = builder27.addExtensionRange(builder29);
        com.google.protobuf.Descriptors.Descriptor descriptor31 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto32 = descriptor31.toProto();
        boolean boolean33 = descriptorProto32.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList34 = descriptorProto32.getNestedTypeList();
        int int35 = descriptorProto32.getExtensionCount();
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder36 = builder30.mergeFrom(descriptorProto32);
        boolean boolean37 = builder30.hasOptions();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(clock18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(descriptor21);
        org.junit.Assert.assertNotNull(descriptorProto22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(fieldDescriptorProtoList28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(descriptor31);
        org.junit.Assert.assertNotNull(descriptorProto32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test1631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1631");
        java.time.chrono.IsoEra isoEra0 = java.time.chrono.IsoEra.CE;
        java.time.Instant instant1 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset5);
        java.time.OffsetDateTime offsetDateTime7 = java.time.OffsetDateTime.ofInstant(instant1, (java.time.ZoneId) zoneOffset5);
        java.time.ZoneOffset zoneOffset11 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset11);
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset16);
        java.time.ZonedDateTime zonedDateTime18 = java.time.ZonedDateTime.of(localDateTime12, (java.time.ZoneId) zoneOffset16);
        java.time.Clock clock19 = java.time.Clock.fixed(instant1, (java.time.ZoneId) zoneOffset16);
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.now(clock19);
        java.time.LocalDate localDate21 = java.time.LocalDate.now(clock19);
        com.google.protobuf.Descriptors.Descriptor descriptor22 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto23 = descriptor22.toProto();
        boolean boolean24 = descriptorProto23.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList25 = descriptorProto23.getNestedTypeList();
        int int26 = descriptorProto23.getExtensionRangeCount();
        boolean boolean27 = localDate21.equals((java.lang.Object) descriptorProto23);
        java.time.temporal.ChronoField chronoField28 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_MONTH;
        java.time.temporal.ValueRange valueRange29 = localDate21.range((java.time.temporal.TemporalField) chronoField28);
        // The following exception was thrown during execution in test generation
        try {
            int int30 = isoEra0.get((java.time.temporal.TemporalField) chronoField28);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: AlignedWeekOfMonth");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + isoEra0 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra0.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zonedDateTime18);
        org.junit.Assert.assertNotNull(clock19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(descriptor22);
        org.junit.Assert.assertNotNull(descriptorProto23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + chronoField28 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_MONTH + "'", chronoField28.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_MONTH));
        org.junit.Assert.assertNotNull(valueRange29);
    }

    @Test
    public void test1632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1632");
        java.nio.file.LinkOption linkOption0 = java.nio.file.LinkOption.NOFOLLOW_LINKS;
        org.junit.Assert.assertTrue("'" + linkOption0 + "' != '" + java.nio.file.LinkOption.NOFOLLOW_LINKS + "'", linkOption0.equals(java.nio.file.LinkOption.NOFOLLOW_LINKS));
    }

    @Test
    public void test1633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1633");
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder1 = builder0.clearCcGenericServices();
        boolean boolean2 = builder0.isInitialized();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder4 = builder0.setJavaOuterClassname("hi!");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder7 = builder5.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder8 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label9 = builder8.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder10 = builder5.addExtension(builder8);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder11 = builder5.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder12 = builder11.getOptionsBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder13 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder15 = builder13.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder16 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label17 = builder16.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder18 = builder13.addExtension(builder16);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder19 = builder13.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder20 = builder19.getOptionsBuilder();
        java.io.InputStream inputStream21 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions22 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream21);
        boolean boolean23 = enumOptions22.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder24 = builder20.mergeFrom(enumOptions22);
        com.google.protobuf.UnknownFieldSet unknownFieldSet25 = builder20.getUnknownFields();
        com.google.protobuf.CodedOutputStream codedOutputStream26 = null;
        unknownFieldSet25.writeTo(codedOutputStream26);
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder28 = builder12.setUnknownFields(unknownFieldSet25);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto29 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.getDefaultInstance();
        boolean boolean30 = methodDescriptorProto29.hasOutputType();
        byte[] byteArray31 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite32 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions33 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray31, extensionRegistryLite32);
        com.google.protobuf.CodedOutputStream codedOutputStream36 = com.google.protobuf.CodedOutputStream.newInstance(byteArray31, (int) (short) 0, 1);
        methodDescriptorProto29.writeTo(codedOutputStream36);
        unknownFieldSet25.writeTo(codedOutputStream36);
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder39 = builder0.mergeUnknownFields(unknownFieldSet25);
        java.util.List<com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder> builderList40 = builder39.getUninterpretedOptionBuilderList();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + label9 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label9.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + label17 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label17.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(enumOptions22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(unknownFieldSet25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(methodDescriptorProto29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(methodOptions33);
        org.junit.Assert.assertNotNull(codedOutputStream36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builderList40);
    }

    @Test
    public void test1634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1634");
        byte[] byteArray0 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions2 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray0, extensionRegistryLite1);
        com.google.protobuf.CodedInputStream codedInputStream5 = com.google.protobuf.CodedInputStream.newInstance(byteArray0, 16, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.MessageOptions messageOptions6 = com.google.protobuf.DescriptorProtos.MessageOptions.parseFrom(codedInputStream5);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 16");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(methodOptions2);
        org.junit.Assert.assertNotNull(codedInputStream5);
    }

    @Test
    public void test1635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1635");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset10);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.of(localDateTime11, (java.time.ZoneId) zoneOffset15);
        java.time.Clock clock18 = java.time.Clock.fixed(instant0, (java.time.ZoneId) zoneOffset15);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.now(clock18);
        java.time.LocalDate localDate20 = java.time.LocalDate.now(clock18);
        com.google.protobuf.Descriptors.Descriptor descriptor21 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto22 = descriptor21.toProto();
        boolean boolean23 = descriptorProto22.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList24 = descriptorProto22.getNestedTypeList();
        int int25 = descriptorProto22.getExtensionRangeCount();
        boolean boolean26 = localDate20.equals((java.lang.Object) descriptorProto22);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder27 = descriptorProto22.newBuilderForType();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList28 = builder27.getNestedTypeList();
        com.google.protobuf.DescriptorProtos.MessageOptions messageOptions29 = builder27.getOptions();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto30 = builder27.getDefaultInstanceForType();
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange extensionRange32 = descriptorProto30.getExtensionRange(23);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 23");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(clock18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(descriptor21);
        org.junit.Assert.assertNotNull(descriptorProto22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(descriptorProtoList28);
        org.junit.Assert.assertNotNull(messageOptions29);
        org.junit.Assert.assertNotNull(descriptorProto30);
    }

    @Test
    public void test1636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1636");
        java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite> priorityMap0 = new java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite>();
        int int1 = priorityMap0.size();
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset5);
        int int7 = localDateTime6.getYear();
        java.time.LocalDate localDate8 = localDateTime6.toLocalDate();
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime13 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset12);
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset17);
        java.time.ZonedDateTime zonedDateTime19 = java.time.ZonedDateTime.of(localDateTime13, (java.time.ZoneId) zoneOffset17);
        java.time.temporal.ChronoField chronoField21 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit22 = chronoField21.getBaseUnit();
        java.time.LocalDateTime localDateTime23 = localDateTime13.plus((long) 1970, temporalUnit22);
        java.time.LocalTime localTime24 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localDateTime23);
        java.time.ZoneOffset zoneOffset28 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset28);
        java.time.OffsetDateTime offsetDateTime30 = java.time.OffsetDateTime.of(localDate8, localTime24, zoneOffset28);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean35 = node34.isFromExterns();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean40 = node39.isFromExterns();
        java.lang.String str41 = node39.toString();
        com.google.javascript.rhino.Node node42 = node34.copyInformationFrom(node39);
        boolean boolean43 = zoneOffset28.equals((java.lang.Object) node39);
        boolean boolean44 = node39.isVar();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean50 = node49.isStringKey();
        boolean boolean51 = node49.isThrow();
        boolean boolean52 = node49.isVarArgs();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean57 = node56.isFromExterns();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean62 = node61.isFromExterns();
        java.lang.String str63 = node61.toString();
        com.google.javascript.rhino.Node node64 = node56.copyInformationFrom(node61);
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean69 = node68.isStringKey();
        boolean boolean70 = node68.isThrow();
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean75 = node74.isStringKey();
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node((-1), node49, node61, node68, node74, 16384, 16);
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean83 = node82.isStringKey();
        boolean boolean84 = node82.isThrow();
        boolean boolean85 = node82.isVarArgs();
        boolean boolean86 = node82.isHook();
        boolean boolean87 = node82.isAssign();
        boolean boolean88 = node82.isVar();
        com.google.javascript.jscomp.CodingConvention.Bind bind89 = new com.google.javascript.jscomp.CodingConvention.Bind(node39, node74, node82);
        boolean boolean90 = priorityMap0.containsValue((java.lang.Object) node74);
        boolean boolean91 = node74.isThis();
        boolean boolean92 = node74.isDefaultCase();
        com.google.javascript.rhino.JSDocInfo jSDocInfo93 = node74.getJSDocInfo();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1970 + "'", int7 == 1970);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(zonedDateTime19);
        org.junit.Assert.assertTrue("'" + chronoField21 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField21.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit22 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit22.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(zoneOffset28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(offsetDateTime30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "NUMBER 52.0 0" + "'", str41, "NUMBER 52.0 0");
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "NUMBER 52.0 0" + "'", str63, "NUMBER 52.0 0");
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNull(jSDocInfo93);
    }

    @Test
    public void test1637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1637");
        java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite> priorityMap0 = new java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite>();
        int int1 = priorityMap0.size();
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset5);
        int int7 = localDateTime6.getYear();
        java.time.LocalDate localDate8 = localDateTime6.toLocalDate();
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime13 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset12);
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset17);
        java.time.ZonedDateTime zonedDateTime19 = java.time.ZonedDateTime.of(localDateTime13, (java.time.ZoneId) zoneOffset17);
        java.time.temporal.ChronoField chronoField21 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit22 = chronoField21.getBaseUnit();
        java.time.LocalDateTime localDateTime23 = localDateTime13.plus((long) 1970, temporalUnit22);
        java.time.LocalTime localTime24 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localDateTime23);
        java.time.ZoneOffset zoneOffset28 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset28);
        java.time.OffsetDateTime offsetDateTime30 = java.time.OffsetDateTime.of(localDate8, localTime24, zoneOffset28);
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean35 = node34.isFromExterns();
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean40 = node39.isFromExterns();
        java.lang.String str41 = node39.toString();
        com.google.javascript.rhino.Node node42 = node34.copyInformationFrom(node39);
        boolean boolean43 = zoneOffset28.equals((java.lang.Object) node39);
        boolean boolean44 = node39.isVar();
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean50 = node49.isStringKey();
        boolean boolean51 = node49.isThrow();
        boolean boolean52 = node49.isVarArgs();
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean57 = node56.isFromExterns();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean62 = node61.isFromExterns();
        java.lang.String str63 = node61.toString();
        com.google.javascript.rhino.Node node64 = node56.copyInformationFrom(node61);
        com.google.javascript.rhino.Node node68 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean69 = node68.isStringKey();
        boolean boolean70 = node68.isThrow();
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean75 = node74.isStringKey();
        com.google.javascript.rhino.Node node78 = new com.google.javascript.rhino.Node((-1), node49, node61, node68, node74, 16384, 16);
        com.google.javascript.rhino.Node node82 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean83 = node82.isStringKey();
        boolean boolean84 = node82.isThrow();
        boolean boolean85 = node82.isVarArgs();
        boolean boolean86 = node82.isHook();
        boolean boolean87 = node82.isAssign();
        boolean boolean88 = node82.isVar();
        com.google.javascript.jscomp.CodingConvention.Bind bind89 = new com.google.javascript.jscomp.CodingConvention.Bind(node39, node74, node82);
        boolean boolean90 = priorityMap0.containsValue((java.lang.Object) node74);
        int int91 = priorityMap0.size();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1970 + "'", int7 == 1970);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(zonedDateTime19);
        org.junit.Assert.assertTrue("'" + chronoField21 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField21.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit22 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit22.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(zoneOffset28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(offsetDateTime30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "NUMBER 52.0 0" + "'", str41, "NUMBER 52.0 0");
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "NUMBER 52.0 0" + "'", str63, "NUMBER 52.0 0");
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(node82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
    }

    @Test
    public void test1638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1638");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label4 = builder3.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = builder0.addExtension(builder3);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder6 = builder0.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder7 = builder6.getOptionsBuilder();
        java.io.InputStream inputStream8 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions9 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream8);
        boolean boolean10 = enumOptions9.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder11 = builder7.mergeFrom(enumOptions9);
        com.google.protobuf.UnknownFieldSet unknownFieldSet12 = builder7.getUnknownFields();
        byte[] byteArray13 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite14 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions15 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray13, extensionRegistryLite14);
        com.google.protobuf.CodedOutputStream codedOutputStream18 = com.google.protobuf.CodedOutputStream.newInstance(byteArray13, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite19 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto20 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray13, extensionRegistryLite19);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite21 = null;
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto22 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.parseFrom(byteArray13, extensionRegistryLite21);
        com.google.protobuf.UnknownFieldSet unknownFieldSet23 = com.google.protobuf.UnknownFieldSet.parseFrom(byteArray13);
        com.google.protobuf.ByteString byteString24 = unknownFieldSet23.toByteString();
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite25 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder26 = builder7.mergeFrom(byteString24, extensionRegistryLite25);
        com.google.protobuf.DescriptorProtos.FieldOptions fieldOptions27 = com.google.protobuf.DescriptorProtos.FieldOptions.parseFrom(byteString24);
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor28 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj29 = fieldOptions27.getField(fieldDescriptor28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + label4 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label4.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(enumOptions9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(unknownFieldSet12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(methodOptions15);
        org.junit.Assert.assertNotNull(codedOutputStream18);
        org.junit.Assert.assertNotNull(fileDescriptorProto20);
        org.junit.Assert.assertNotNull(serviceDescriptorProto22);
        org.junit.Assert.assertNotNull(unknownFieldSet23);
        org.junit.Assert.assertNotNull(byteString24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(fieldOptions27);
    }

    @Test
    public void test1639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1639");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        compilerOptions0.setNameAnonymousFunctionsOnly(true);
        compilerOptions0.setCheckSuspiciousCode(false);
        org.junit.Assert.assertNotNull(errorFormat3);
    }

    @Test
    public void test1640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1640");
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        boolean boolean6 = strSet4.isEmpty();
        java.nio.ByteBuffer byteBuffer8 = java.nio.ByteBuffer.allocate(100);
        boolean boolean9 = strSet4.equals((java.lang.Object) byteBuffer8);
        java.nio.IntBuffer intBuffer10 = byteBuffer8.asIntBuffer();
        java.nio.ByteOrder byteOrder11 = intBuffer10.order();
        com.google.javascript.jscomp.SourceAst sourceAst12 = null;
        com.google.javascript.rhino.InputId inputId13 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput15 = new com.google.javascript.jscomp.CompilerInput(sourceAst12, inputId13, true);
        java.io.PrintStream printStream16 = null;
        com.google.javascript.jscomp.Compiler compiler17 = new com.google.javascript.jscomp.Compiler(printStream16);
        com.google.javascript.jscomp.ErrorManager errorManager18 = compiler17.getErrorManager();
        compilerInput15.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler17);
        boolean boolean20 = intBuffer10.equals((java.lang.Object) compiler17);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(intBuffer10);
        org.junit.Assert.assertNotNull(byteOrder11);
        org.junit.Assert.assertNotNull(errorManager18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test1641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1641");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        java.lang.String[] strArray8 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8);
        boolean boolean11 = strSet9.isEmpty();
        java.nio.ByteBuffer byteBuffer13 = java.nio.ByteBuffer.allocate(100);
        boolean boolean14 = strSet9.equals((java.lang.Object) byteBuffer13);
        java.lang.String[] strArray18 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet19 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet19, strArray18);
        boolean boolean21 = strSet19.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream22 = strSet19.stream();
        boolean boolean23 = strSet9.retainAll((java.util.Collection<java.lang.String>) strSet19);
        compilerOptions0.aliasableStrings = strSet9;
        compilerOptions0.setClosurePass(false);
        org.junit.Assert.assertNotNull(errorFormat3);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strStream22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1642");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy5 = null;
        compilerOptions0.variableRenaming = variableRenamingPolicy5;
        compilerOptions0.setSummaryDetailLevel(999);
        boolean boolean9 = compilerOptions0.getInferTypes();
        boolean boolean10 = compilerOptions0.ideMode;
        compilerOptions0.setGroupVariableDeclarations(true);
        boolean boolean13 = compilerOptions0.deadAssignmentElimination;
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap14 = java.nio.charset.Charset.availableCharsets();
        java.net.URISyntaxException uRISyntaxException17 = new java.net.URISyntaxException("hi!", "");
        boolean boolean18 = strMap14.containsKey((java.lang.Object) "");
        java.util.Set<java.lang.String> strSet19 = strMap14.keySet();
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        boolean boolean26 = strSet24.isEmpty();
        java.nio.ByteBuffer byteBuffer28 = java.nio.ByteBuffer.allocate(100);
        boolean boolean29 = strSet24.equals((java.lang.Object) byteBuffer28);
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        boolean boolean36 = strSet34.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream37 = strSet34.stream();
        boolean boolean38 = strSet24.retainAll((java.util.Collection<java.lang.String>) strSet34);
        boolean boolean39 = strSet19.containsAll((java.util.Collection<java.lang.String>) strSet24);
        compilerOptions0.setStripTypes(strSet19);
        compilerOptions0.setInputDelimiter("NUMBER 52.0");
        org.junit.Assert.assertNotNull(errorFormat3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strStream37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test1643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1643");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) ' ');
        boolean boolean2 = charBuffer1.isDirect();
        int int3 = charBuffer1.arrayOffset();
        java.nio.Buffer buffer4 = charBuffer1.rewind();
        java.lang.String str5 = charBuffer1.toString();
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset9);
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset14);
        java.time.ZonedDateTime zonedDateTime16 = java.time.ZonedDateTime.of(localDateTime10, (java.time.ZoneId) zoneOffset14);
        java.time.ZonedDateTime zonedDateTime18 = zonedDateTime16.withYear((int) (short) 1);
        java.time.OffsetDateTime offsetDateTime19 = zonedDateTime16.toOffsetDateTime();
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset23);
        java.time.ZoneOffset zoneOffset28 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset28);
        java.time.ZonedDateTime zonedDateTime30 = java.time.ZonedDateTime.of(localDateTime24, (java.time.ZoneId) zoneOffset28);
        java.time.temporal.ChronoField chronoField31 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        boolean boolean32 = localDateTime24.isSupported((java.time.temporal.TemporalField) chronoField31);
        java.time.LocalDateTime localDateTime34 = localDateTime24.plusHours((long) 9);
        java.time.format.DateTimeFormatter dateTimeFormatter35 = java.time.format.DateTimeFormatter.ISO_DATE;
        java.lang.String str36 = localDateTime24.format(dateTimeFormatter35);
        java.lang.String str37 = offsetDateTime19.format(dateTimeFormatter35);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.parse((java.lang.CharSequence) charBuffer1, dateTimeFormatter35);
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text '????????????????????????????????' could not be parsed at index 0");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(buffer4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + "'", str5, "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zonedDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime18);
        org.junit.Assert.assertNotNull(offsetDateTime19);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zonedDateTime30);
        org.junit.Assert.assertTrue("'" + chronoField31 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField31.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1970-01-01" + "'", str36, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1970-01-01+00:00:52" + "'", str37, "1970-01-01+00:00:52");
    }

    @Test
    public void test1644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1644");
        byte[] byteArray2 = new byte[] { (byte) 1, (byte) 1 };
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.ServiceOptions serviceOptions3 = com.google.protobuf.DescriptorProtos.ServiceOptions.parseFrom(byteArray2);
            org.junit.Assert.fail("Expected exception of type com.google.protobuf.InvalidProtocolBufferException; message: Protocol message contained an invalid tag (zero).");
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1, 1]");
    }

    @Test
    public void test1645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1645");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.of(localDateTime4, (java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime10.minusSeconds((long) '#');
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset16);
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset21);
        java.time.ZonedDateTime zonedDateTime23 = java.time.ZonedDateTime.of(localDateTime17, (java.time.ZoneId) zoneOffset21);
        boolean boolean24 = zonedDateTime10.isBefore((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime23);
        java.time.ZoneOffset zoneOffset25 = zonedDateTime10.getOffset();
        java.time.temporal.ChronoField chronoField26 = java.time.temporal.ChronoField.MONTH_OF_YEAR;
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime28 = zonedDateTime10.with((java.time.temporal.TemporalField) chronoField26, (long) '\000');
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MonthOfYear (valid values 1 - 12): 0");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zonedDateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertTrue("'" + chronoField26 + "' != '" + java.time.temporal.ChronoField.MONTH_OF_YEAR + "'", chronoField26.equals(java.time.temporal.ChronoField.MONTH_OF_YEAR));
    }

    @Test
    public void test1646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1646");
        byte[] byteArray0 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions2 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray0, extensionRegistryLite1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite3 = null;
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto enumDescriptorProto4 = com.google.protobuf.DescriptorProtos.EnumDescriptorProto.parseFrom(byteArray0, extensionRegistryLite3);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder5 = enumDescriptorProto4.newBuilderForType();
        com.google.protobuf.Descriptors.Descriptor descriptor6 = builder5.getDescriptorForType();
        boolean boolean7 = builder5.hasName();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder8 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder9 = builder8.clearCcGenericServices();
        boolean boolean10 = builder8.isInitialized();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder12 = builder8.setCcGenericServices(true);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder13 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label14 = builder13.getLabel();
        com.google.protobuf.ByteString byteString15 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder16 = builder13.mergeFrom(byteString15);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite17 = null;
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder18 = builder12.mergeFrom(byteString15, extensionRegistryLite17);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite19 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions20 = com.google.protobuf.DescriptorProtos.EnumValueOptions.parseFrom(byteString15, extensionRegistryLite19);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite21 = null;
        com.google.protobuf.DescriptorProtos.MessageOptions messageOptions22 = com.google.protobuf.DescriptorProtos.MessageOptions.parseFrom(byteString15, extensionRegistryLite21);
        com.google.protobuf.ByteString byteString23 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite24 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions25 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(byteString23, extensionRegistryLite24);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder26 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label27 = builder26.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto28 = builder26.buildPartial();
        int int29 = fieldDescriptorProto28.getSerializedSize();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder30 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto28);
        java.io.InputStream inputStream31 = null;
        java.io.InputStream inputStream32 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite33 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location34 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream32, extensionRegistryLite33);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder35 = builder30.mergeFrom(inputStream31, extensionRegistryLite33);
        com.google.javascript.jscomp.FunctionInformationMap functionInformationMap36 = com.google.javascript.jscomp.FunctionInformationMap.parseFrom(byteString23, extensionRegistryLite33);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder37 = builder5.mergeFrom(byteString15, extensionRegistryLite33);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto enumValueDescriptorProto39 = builder37.getValue((int) ':');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 58");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(methodOptions2);
        org.junit.Assert.assertNotNull(enumDescriptorProto4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(descriptor6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + label14 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label14.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(byteString15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(enumValueOptions20);
        org.junit.Assert.assertNotNull(messageOptions22);
        org.junit.Assert.assertNotNull(byteString23);
        org.junit.Assert.assertNotNull(enumOptions25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + label27 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label27.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(extensionRegistryLite33);
        org.junit.Assert.assertNotNull(location34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(functionInformationMap36);
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test1647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1647");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset10);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.of(localDateTime11, (java.time.ZoneId) zoneOffset15);
        java.time.Clock clock18 = java.time.Clock.fixed(instant0, (java.time.ZoneId) zoneOffset15);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.now(clock18);
        java.time.LocalDate localDate20 = java.time.LocalDate.now(clock18);
        com.google.protobuf.Descriptors.Descriptor descriptor21 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto22 = descriptor21.toProto();
        boolean boolean23 = descriptorProto22.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList24 = descriptorProto22.getNestedTypeList();
        int int25 = descriptorProto22.getExtensionRangeCount();
        boolean boolean26 = localDate20.equals((java.lang.Object) descriptorProto22);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder27 = descriptorProto22.newBuilderForType();
        java.util.List<com.google.protobuf.DescriptorProtos.FieldDescriptorProto> fieldDescriptorProtoList28 = builder27.getExtensionList();
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.Builder builder29 = com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.newBuilder();
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder30 = builder27.addExtensionRange(builder29);
        com.google.protobuf.Descriptors.Descriptor descriptor31 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto32 = descriptor31.toProto();
        boolean boolean33 = descriptorProto32.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList34 = descriptorProto32.getNestedTypeList();
        int int35 = descriptorProto32.getExtensionCount();
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder36 = builder30.mergeFrom(descriptorProto32);
        java.io.InputStream inputStream37 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite38 = null;
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange extensionRange39 = com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.parseFrom(inputStream37, extensionRegistryLite38);
        int int40 = extensionRange39.getEnd();
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange extensionRange41 = extensionRange39.getDefaultInstanceForType();
        int int42 = extensionRange41.getEnd();
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder43 = builder36.addExtensionRange(extensionRange41);
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor44 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder46 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder48 = builder46.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder49 = builder48.clearSourceCodeInfo();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder50 = builder48.getSourceCodeInfoBuilder();
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder51 = builder36.setRepeatedField(fieldDescriptor44, 7, (java.lang.Object) builder50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(clock18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(descriptor21);
        org.junit.Assert.assertNotNull(descriptorProto22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(fieldDescriptorProtoList28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(descriptor31);
        org.junit.Assert.assertNotNull(descriptorProto32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(extensionRange39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(extensionRange41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test1648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1648");
        com.google.javascript.jscomp.ErrorFormat errorFormat0 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        java.io.PrintStream printStream1 = null;
        com.google.javascript.jscomp.Compiler compiler2 = new com.google.javascript.jscomp.Compiler(printStream1);
        com.google.javascript.jscomp.ErrorManager errorManager3 = compiler2.getErrorManager();
        com.google.javascript.jscomp.MessageFormatter messageFormatter5 = errorFormat0.toFormatter((com.google.javascript.jscomp.SourceExcerptProvider) compiler2, false);
        com.google.javascript.jscomp.CodingConvention codingConvention6 = compiler2.getCodingConvention();
        org.junit.Assert.assertNotNull(errorFormat0);
        org.junit.Assert.assertNotNull(errorManager3);
        org.junit.Assert.assertNotNull(messageFormatter5);
        org.junit.Assert.assertNotNull(codingConvention6);
    }

    @Test
    public void test1649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1649");
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto0 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.getDefaultInstance();
        boolean boolean1 = serviceDescriptorProto0.hasOptions();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder2 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.newBuilder(serviceDescriptorProto0);
        byte[] byteArray3 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite4 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions5 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray3, extensionRegistryLite4);
        com.google.protobuf.CodedInputStream codedInputStream8 = com.google.protobuf.CodedInputStream.newInstance(byteArray3, 16, (int) 'a');
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder9 = builder2.mergeFrom(byteArray3);
        java.util.List<com.google.protobuf.DescriptorProtos.MethodDescriptorProto> methodDescriptorProtoList10 = builder9.getMethodList();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder11 = builder9.clearMethod();
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto12 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.getDefaultInstance();
        boolean boolean13 = methodDescriptorProto12.hasOutputType();
        com.google.protobuf.CodedOutputStream codedOutputStream14 = null;
        methodDescriptorProto12.writeTo(codedOutputStream14);
        boolean boolean16 = methodDescriptorProto12.hasOutputType();
        boolean boolean17 = methodDescriptorProto12.hasOutputType();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder18 = builder11.addMethod(methodDescriptorProto12);
        boolean boolean19 = methodDescriptorProto12.hasOptions();
        org.junit.Assert.assertNotNull(serviceDescriptorProto0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(methodOptions5);
        org.junit.Assert.assertNotNull(codedInputStream8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(methodDescriptorProtoList10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(methodDescriptorProto12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test1650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1650");
        java.io.InputStream inputStream0 = null;
        com.google.javascript.jscomp.CompilerOptions compilerOptions1 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions1.setRecordFunctionInformation(true);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder4 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder6 = builder4.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder7 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label8 = builder7.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder9 = builder4.addExtension(builder7);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder10 = builder4.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions11 = builder10.getOptions();
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder12 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output14 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream16 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output14, (int) 'a');
        byte[] byteArray17 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite18 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions19 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray17, extensionRegistryLite18);
        output14.write(byteArray17);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder21 = builder12.mergeFrom(byteArray17);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder22 = builder10.mergeFrom(byteArray17);
        compilerOptions1.setInputVariableMapSerialized(byteArray17);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite24 = null;
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto enumDescriptorProto25 = com.google.protobuf.DescriptorProtos.EnumDescriptorProto.parseFrom(byteArray17, extensionRegistryLite24);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder26 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder28 = builder26.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder29 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label30 = builder29.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder31 = builder26.addExtension(builder29);
        boolean boolean32 = builder29.hasDefaultValue();
        java.io.InputStream inputStream33 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite34 = null;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder35 = builder29.mergeFrom(inputStream33, extensionRegistryLite34);
        java.io.InputStream inputStream36 = null;
        java.io.InputStream inputStream37 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite38 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location39 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream37, extensionRegistryLite38);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder40 = builder35.mergeFrom(inputStream36, extensionRegistryLite38);
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location41 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(byteArray17, extensionRegistryLite38);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.UninterpretedOption uninterpretedOption42 = com.google.protobuf.DescriptorProtos.UninterpretedOption.parseDelimitedFrom(inputStream0, extensionRegistryLite38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + label8 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label8.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(enumOptions11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(output14);
        org.junit.Assert.assertNotNull(codedOutputStream16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(methodOptions19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(enumDescriptorProto25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + label30 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label30.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(extensionRegistryLite38);
        org.junit.Assert.assertNotNull(location39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(location41);
    }

    @Test
    public void test1651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1651");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode3 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry2.setResolveMode(resolveMode3);
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.jstype.ObjectType objectType8 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry7.createObjectType(objectType8);
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10, false);
        com.google.javascript.rhino.jstype.ObjectType objectType13 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType14 = jSTypeRegistry12.createObjectType(objectType13);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair15 = objectType9.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType14);
        java.lang.String str16 = objectType14.getDisplayName();
        objectType14.clearResolved();
        com.google.javascript.rhino.jstype.JSType jSType18 = jSTypeRegistry2.createNullableType((com.google.javascript.rhino.jstype.JSType) objectType14);
        boolean boolean19 = jSType18.isEmptyType();
        com.google.javascript.rhino.ErrorReporter errorReporter20 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter20, false);
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        com.google.javascript.rhino.jstype.ObjectType objectType26 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType27 = jSTypeRegistry25.createObjectType(objectType26);
        com.google.javascript.rhino.ErrorReporter errorReporter28 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter28, false);
        com.google.javascript.rhino.jstype.ObjectType objectType31 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType32 = jSTypeRegistry30.createObjectType(objectType31);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair33 = objectType27.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType32);
        java.lang.String str34 = objectType32.getDisplayName();
        java.util.Collection<com.google.javascript.rhino.jstype.FunctionType> functionTypeCollection35 = jSTypeRegistry22.getDirectImplementors(objectType32);
        java.lang.String str36 = objectType32.toDebugHashCodeString();
        com.google.javascript.rhino.jstype.JSType jSType37 = jSType18.getGreatestSubtype((com.google.javascript.rhino.jstype.JSType) objectType32);
        com.google.javascript.rhino.JSDocInfo jSDocInfo38 = jSType37.getJSDocInfo();
        org.junit.Assert.assertTrue("'" + resolveMode3 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode3.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertNotNull(objectType14);
        org.junit.Assert.assertNotNull(typePair15);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertNotNull(jSType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(objectType27);
        org.junit.Assert.assertNotNull(objectType32);
        org.junit.Assert.assertNotNull(typePair33);
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(functionTypeCollection35);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "{634185401}" + "'", str36, "{634185401}");
        org.junit.Assert.assertNotNull(jSType37);
        org.junit.Assert.assertNull(jSDocInfo38);
    }

    @Test
    public void test1652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1652");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRecordFunctionInformation(true);
        boolean boolean3 = compilerOptions0.checkControlStructures;
        compilerOptions0.setCollapseProperties(false);
        boolean boolean6 = compilerOptions0.markAsCompiled;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1653");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo sourceCodeInfo2 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.parseFrom(inputStream0, extensionRegistryLite1);
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder3 = sourceCodeInfo2.newBuilderForType();
        com.google.protobuf.UnknownFieldSet unknownFieldSet4 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder5 = builder3.setUnknownFields(unknownFieldSet4);
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.Builder builder7 = builder3.addLocationBuilder(0);
        java.io.File file10 = null;
        java.io.File file11 = java.io.File.createTempFile("hi!", "ISO", file10);
        boolean boolean14 = file11.setWritable(false, false);
        java.net.URI uRI15 = file11.toURI();
        java.io.PrintStream printStream16 = new java.io.PrintStream(file11);
        printStream16.print((int) (byte) 0);
        printStream16.print(10.0d);
        printStream16.close();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        boolean boolean28 = strSet26.isEmpty();
        java.nio.ByteBuffer byteBuffer30 = java.nio.ByteBuffer.allocate(100);
        boolean boolean31 = strSet26.equals((java.lang.Object) byteBuffer30);
        java.nio.IntBuffer intBuffer32 = byteBuffer30.asIntBuffer();
        double double33 = byteBuffer30.getDouble();
        java.nio.ByteBuffer byteBuffer36 = byteBuffer30.put((int) (short) 1, (byte) 1);
        byte[] byteArray37 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite38 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions39 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray37, extensionRegistryLite38);
        com.google.protobuf.CodedOutputStream codedOutputStream42 = com.google.protobuf.CodedOutputStream.newInstance(byteArray37, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite43 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto44 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray37, extensionRegistryLite43);
        com.google.protobuf.CodedOutputStream codedOutputStream45 = com.google.protobuf.CodedOutputStream.newInstance(byteArray37);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer30.get(byteArray37);
        printStream16.write(byteArray37, (int) '/', (int) (byte) 1);
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.Builder builder50 = builder7.mergeFrom(byteArray37);
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor51 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int52 = builder50.getRepeatedFieldCount(fieldDescriptor51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(sourceCodeInfo2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(file11);
        org.junit.Assert.assertEquals(file11.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file11.toString(), "/tmp/hi!8039156428747024990ISO");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(uRI15);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(intBuffer32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(methodOptions39);
        org.junit.Assert.assertNotNull(codedOutputStream42);
        org.junit.Assert.assertNotNull(fileDescriptorProto44);
        org.junit.Assert.assertNotNull(codedOutputStream45);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test1654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1654");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label1 = builder0.getLabel();
        java.io.InputStream inputStream2 = null;
        com.google.protobuf.MessageLite.Builder builder3 = builder0.mergeFrom(inputStream2);
        java.io.InputStream inputStream4 = null;
        byte[] byteArray5 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite6 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions7 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray5, extensionRegistryLite6);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite8 = null;
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto enumDescriptorProto9 = com.google.protobuf.DescriptorProtos.EnumDescriptorProto.parseFrom(byteArray5, extensionRegistryLite8);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder10 = enumDescriptorProto9.newBuilderForType();
        com.google.protobuf.Descriptors.Descriptor descriptor11 = builder10.getDescriptorForType();
        boolean boolean12 = builder10.hasName();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder13 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder14 = builder13.clearCcGenericServices();
        boolean boolean15 = builder13.isInitialized();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder17 = builder13.setCcGenericServices(true);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder18 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label19 = builder18.getLabel();
        com.google.protobuf.ByteString byteString20 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder21 = builder18.mergeFrom(byteString20);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite22 = null;
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder23 = builder17.mergeFrom(byteString20, extensionRegistryLite22);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite24 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions25 = com.google.protobuf.DescriptorProtos.EnumValueOptions.parseFrom(byteString20, extensionRegistryLite24);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite26 = null;
        com.google.protobuf.DescriptorProtos.MessageOptions messageOptions27 = com.google.protobuf.DescriptorProtos.MessageOptions.parseFrom(byteString20, extensionRegistryLite26);
        com.google.protobuf.ByteString byteString28 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite29 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions30 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(byteString28, extensionRegistryLite29);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder31 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label32 = builder31.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto33 = builder31.buildPartial();
        int int34 = fieldDescriptorProto33.getSerializedSize();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder35 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto33);
        java.io.InputStream inputStream36 = null;
        java.io.InputStream inputStream37 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite38 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location39 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream37, extensionRegistryLite38);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder40 = builder35.mergeFrom(inputStream36, extensionRegistryLite38);
        com.google.javascript.jscomp.FunctionInformationMap functionInformationMap41 = com.google.javascript.jscomp.FunctionInformationMap.parseFrom(byteString28, extensionRegistryLite38);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder42 = builder10.mergeFrom(byteString20, extensionRegistryLite38);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean43 = builder0.mergeDelimitedFrom(inputStream4, extensionRegistryLite38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + label1 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label1.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(methodOptions7);
        org.junit.Assert.assertNotNull(enumDescriptorProto9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(descriptor11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + label19 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label19.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(byteString20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(enumValueOptions25);
        org.junit.Assert.assertNotNull(messageOptions27);
        org.junit.Assert.assertNotNull(byteString28);
        org.junit.Assert.assertNotNull(enumOptions30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + label32 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label32.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(extensionRegistryLite38);
        org.junit.Assert.assertNotNull(location39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(functionInformationMap41);
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test1655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1655");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("Not declared as a type name");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test1656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1656");
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto0 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.getDefaultInstance();
        boolean boolean1 = serviceDescriptorProto0.hasOptions();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder2 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.newBuilder(serviceDescriptorProto0);
        byte[] byteArray3 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite4 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions5 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray3, extensionRegistryLite4);
        com.google.protobuf.CodedInputStream codedInputStream8 = com.google.protobuf.CodedInputStream.newInstance(byteArray3, 16, (int) 'a');
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder9 = builder2.mergeFrom(byteArray3);
        java.util.List<com.google.protobuf.DescriptorProtos.MethodDescriptorProto> methodDescriptorProtoList10 = builder9.getMethodList();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder11 = builder9.clearMethod();
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto12 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.getDefaultInstance();
        boolean boolean13 = methodDescriptorProto12.hasOutputType();
        com.google.protobuf.CodedOutputStream codedOutputStream14 = null;
        methodDescriptorProto12.writeTo(codedOutputStream14);
        boolean boolean16 = methodDescriptorProto12.hasOutputType();
        boolean boolean17 = methodDescriptorProto12.hasOutputType();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder18 = builder11.addMethod(methodDescriptorProto12);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder19 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder21 = builder19.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder22 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label23 = builder22.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder24 = builder19.addExtension(builder22);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder25 = builder19.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder26 = builder25.getOptionsBuilder();
        java.io.InputStream inputStream27 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions28 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream27);
        boolean boolean29 = enumOptions28.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder30 = builder26.mergeFrom(enumOptions28);
        com.google.protobuf.UnknownFieldSet unknownFieldSet31 = builder26.getUnknownFields();
        byte[] byteArray32 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite33 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions34 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray32, extensionRegistryLite33);
        com.google.protobuf.CodedOutputStream codedOutputStream37 = com.google.protobuf.CodedOutputStream.newInstance(byteArray32, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite38 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto39 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray32, extensionRegistryLite38);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite40 = null;
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto41 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.parseFrom(byteArray32, extensionRegistryLite40);
        com.google.protobuf.UnknownFieldSet unknownFieldSet42 = com.google.protobuf.UnknownFieldSet.parseFrom(byteArray32);
        com.google.protobuf.ByteString byteString43 = unknownFieldSet42.toByteString();
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite44 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder45 = builder26.mergeFrom(byteString43, extensionRegistryLite44);
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder46 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder47 = builder46.clearCcGenericServices();
        boolean boolean48 = builder46.isInitialized();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder50 = builder46.setCcGenericServices(true);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder51 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label52 = builder51.getLabel();
        com.google.protobuf.ByteString byteString53 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder54 = builder51.mergeFrom(byteString53);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite55 = null;
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder56 = builder50.mergeFrom(byteString53, extensionRegistryLite55);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite57 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions58 = com.google.protobuf.DescriptorProtos.EnumValueOptions.parseFrom(byteString53, extensionRegistryLite57);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite59 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto60 = com.google.protobuf.DescriptorProtos.DescriptorProto.parseFrom(byteString53, extensionRegistryLite59);
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder61 = builder18.mergeFrom(byteString43, extensionRegistryLite59);
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor62 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj64 = builder61.getRepeatedField(fieldDescriptor62, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serviceDescriptorProto0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(methodOptions5);
        org.junit.Assert.assertNotNull(codedInputStream8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(methodDescriptorProtoList10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(methodDescriptorProto12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + label23 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label23.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(enumOptions28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(unknownFieldSet31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(methodOptions34);
        org.junit.Assert.assertNotNull(codedOutputStream37);
        org.junit.Assert.assertNotNull(fileDescriptorProto39);
        org.junit.Assert.assertNotNull(serviceDescriptorProto41);
        org.junit.Assert.assertNotNull(unknownFieldSet42);
        org.junit.Assert.assertNotNull(byteString43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertTrue("'" + label52 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label52.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(byteString53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(enumValueOptions58);
        org.junit.Assert.assertNotNull(extensionRegistryLite59);
        org.junit.Assert.assertNotNull(descriptorProto60);
        org.junit.Assert.assertNotNull(builder61);
    }

    @Test
    public void test1657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1657");
        com.google.protobuf.Descriptors.Descriptor descriptor0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto1 = descriptor0.toProto();
        boolean boolean2 = descriptorProto1.isInitialized();
        com.google.protobuf.DescriptorProtos.MessageOptionsOrBuilder messageOptionsOrBuilder3 = descriptorProto1.getOptionsOrBuilder();
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.DescriptorProtoOrBuilder descriptorProtoOrBuilder5 = descriptorProto1.getNestedTypeOrBuilder(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptor0);
        org.junit.Assert.assertNotNull(descriptorProto1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(messageOptionsOrBuilder3);
    }

    @Test
    public void test1658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1658");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) ' ');
        boolean boolean2 = charBuffer1.isDirect();
        java.nio.CharBuffer charBuffer4 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer6 = charBuffer4.put('a');
        char[] charArray8 = new char[] { '4' };
        java.nio.CharBuffer charBuffer9 = charBuffer6.get(charArray8);
        java.nio.CharBuffer charBuffer10 = charBuffer6.compact();
        java.nio.CharBuffer charBuffer12 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer14 = charBuffer12.put('a');
        java.nio.CharBuffer charBuffer16 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer18 = charBuffer16.put('a');
        char[] charArray20 = new char[] { '4' };
        java.nio.CharBuffer charBuffer21 = charBuffer18.get(charArray20);
        java.nio.CharBuffer charBuffer22 = charBuffer18.compact();
        com.google.common.collect.ImmutableSet<java.lang.Appendable> appendableSet23 = com.google.common.collect.ImmutableSet.of((java.lang.Appendable) charBuffer1, (java.lang.Appendable) charBuffer6, (java.lang.Appendable) charBuffer12, (java.lang.Appendable) charBuffer22);
        java.time.ZoneOffset zoneOffset27 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset27);
        int int29 = localDateTime28.getYear();
        java.time.Instant instant30 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset34);
        java.time.OffsetDateTime offsetDateTime36 = java.time.OffsetDateTime.ofInstant(instant30, (java.time.ZoneId) zoneOffset34);
        java.time.Instant instant37 = localDateTime28.toInstant(zoneOffset34);
        boolean boolean38 = appendableSet23.equals((java.lang.Object) zoneOffset34);
        java.lang.Object[] objArray39 = appendableSet23.toArray();
        java.util.concurrent.TimeUnit timeUnit40 = java.util.concurrent.TimeUnit.HOURS;
        boolean boolean41 = appendableSet23.contains((java.lang.Object) timeUnit40);
        com.google.common.collect.ImmutableList<java.lang.Appendable> appendableList42 = appendableSet23.asList();
        java.time.ZoneOffset zoneOffset46 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime47 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset46);
        int int48 = localDateTime47.getYear();
        java.time.Instant instant49 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset53 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime54 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset53);
        java.time.OffsetDateTime offsetDateTime55 = java.time.OffsetDateTime.ofInstant(instant49, (java.time.ZoneId) zoneOffset53);
        java.time.Instant instant56 = localDateTime47.toInstant(zoneOffset53);
        int int57 = appendableList42.lastIndexOf((java.lang.Object) instant56);
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean62 = node61.isVar();
        com.google.javascript.rhino.Node node66 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean67 = node66.isStringKey();
        boolean boolean68 = node66.isThrow();
        boolean boolean69 = node66.isVarArgs();
        boolean boolean70 = node66.isHook();
        com.google.javascript.rhino.Node node71 = node66.cloneNode();
        com.google.javascript.rhino.Node node72 = node61.useSourceInfoIfMissingFromForTree(node71);
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean77 = node76.isFromExterns();
        com.google.javascript.rhino.Node node81 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean82 = node81.isFromExterns();
        java.lang.String str83 = node81.toString();
        com.google.javascript.rhino.Node node84 = node76.copyInformationFrom(node81);
        int int85 = node76.getLineno();
        boolean boolean86 = node76.isLabel();
        java.lang.String str87 = node76.getSourceFileName();
        boolean boolean88 = node76.isDec();
        com.google.javascript.rhino.Node node89 = node71.useSourceInfoFrom(node76);
        boolean boolean90 = appendableList42.equals((java.lang.Object) node89);
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.UnmodifiableListIterator<java.lang.Appendable> appendableItor92 = appendableList42.listIterator(28);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: index (28) must not be greater than size (3)");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charBuffer4);
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer9);
        org.junit.Assert.assertNotNull(charBuffer10);
        org.junit.Assert.assertNotNull(charBuffer12);
        org.junit.Assert.assertNotNull(charBuffer14);
        org.junit.Assert.assertNotNull(charBuffer16);
        org.junit.Assert.assertNotNull(charBuffer18);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer21);
        org.junit.Assert.assertNotNull(charBuffer22);
        org.junit.Assert.assertNotNull(appendableSet23);
        org.junit.Assert.assertNotNull(zoneOffset27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1970 + "'", int29 == 1970);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(offsetDateTime36);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000, \000\000, \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000, \000\000, \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000]");
        org.junit.Assert.assertNotNull(timeUnit40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(appendableList42);
        org.junit.Assert.assertNotNull(zoneOffset46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1970 + "'", int48 == 1970);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertNotNull(zoneOffset53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(offsetDateTime55);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(node81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "NUMBER 52.0 0" + "'", str83, "NUMBER 52.0 0");
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(node89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
    }

    @Test
    public void test1659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1659");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.lang.String str1 = localDate0.toString();
        java.time.chrono.IsoChronology isoChronology2 = localDate0.getChronology();
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset6);
        int int8 = localDateTime7.getYear();
        java.time.LocalDate localDate9 = localDateTime7.toLocalDate();
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset13);
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset18);
        java.time.ZonedDateTime zonedDateTime20 = java.time.ZonedDateTime.of(localDateTime14, (java.time.ZoneId) zoneOffset18);
        java.time.temporal.ChronoField chronoField22 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit23 = chronoField22.getBaseUnit();
        java.time.LocalDateTime localDateTime24 = localDateTime14.plus((long) 1970, temporalUnit23);
        java.time.LocalTime localTime25 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localDateTime24);
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset29);
        java.time.OffsetDateTime offsetDateTime31 = java.time.OffsetDateTime.of(localDate9, localTime25, zoneOffset29);
        int int32 = localDate0.compareTo((java.time.chrono.ChronoLocalDate) localDate9);
        java.time.Instant instant33 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset37);
        java.time.OffsetDateTime offsetDateTime39 = java.time.OffsetDateTime.ofInstant(instant33, (java.time.ZoneId) zoneOffset37);
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime44 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset43);
        java.time.ZoneOffset zoneOffset48 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime49 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset48);
        java.time.ZonedDateTime zonedDateTime50 = java.time.ZonedDateTime.of(localDateTime44, (java.time.ZoneId) zoneOffset48);
        java.time.Clock clock51 = java.time.Clock.fixed(instant33, (java.time.ZoneId) zoneOffset48);
        java.time.LocalDateTime localDateTime52 = java.time.LocalDateTime.now(clock51);
        java.time.LocalDate localDate53 = java.time.LocalDate.now(clock51);
        com.google.protobuf.Descriptors.Descriptor descriptor54 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto55 = descriptor54.toProto();
        boolean boolean56 = descriptorProto55.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList57 = descriptorProto55.getNestedTypeList();
        int int58 = descriptorProto55.getExtensionRangeCount();
        boolean boolean59 = localDate53.equals((java.lang.Object) descriptorProto55);
        java.time.ZoneOffset zoneOffset63 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime64 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset63);
        int int65 = localDateTime64.getYear();
        java.time.LocalDate localDate66 = localDateTime64.toLocalDate();
        java.time.LocalDate localDate68 = localDate66.plusDays((long) '#');
        java.time.LocalDate localDate69 = java.time.LocalDate.now();
        java.time.chrono.ChronoPeriod chronoPeriod70 = localDate66.until((java.time.chrono.ChronoLocalDate) localDate69);
        boolean boolean71 = localDate53.isBefore((java.time.chrono.ChronoLocalDate) localDate66);
        boolean boolean72 = localDate9.isBefore((java.time.chrono.ChronoLocalDate) localDate66);
        java.time.LocalDate localDate74 = localDate66.minusWeeks((long) '/');
        java.time.DayOfWeek dayOfWeek75 = java.time.DayOfWeek.FRIDAY;
        java.time.temporal.ChronoField chronoField76 = java.time.temporal.ChronoField.OFFSET_SECONDS;
        java.time.temporal.TemporalUnit temporalUnit77 = chronoField76.getRangeUnit();
        long long79 = chronoField76.checkValidValue((long) 2);
        boolean boolean80 = dayOfWeek75.isSupported((java.time.temporal.TemporalField) chronoField76);
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.ValueRange valueRange81 = localDate66.range((java.time.temporal.TemporalField) chronoField76);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: OffsetSeconds");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "2022-02-21" + "'", str1, "2022-02-21");
        org.junit.Assert.assertNotNull(isoChronology2);
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1970 + "'", int8 == 1970);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(zonedDateTime20);
        org.junit.Assert.assertTrue("'" + chronoField22 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField22.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit23 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit23.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(offsetDateTime39);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(zoneOffset48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(zonedDateTime50);
        org.junit.Assert.assertNotNull(clock51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(descriptor54);
        org.junit.Assert.assertNotNull(descriptorProto55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(zoneOffset63);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1970 + "'", int65 == 1970);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertNotNull(chronoPeriod70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertTrue("'" + dayOfWeek75 + "' != '" + java.time.DayOfWeek.FRIDAY + "'", dayOfWeek75.equals(java.time.DayOfWeek.FRIDAY));
        org.junit.Assert.assertTrue("'" + chronoField76 + "' != '" + java.time.temporal.ChronoField.OFFSET_SECONDS + "'", chronoField76.equals(java.time.temporal.ChronoField.OFFSET_SECONDS));
        org.junit.Assert.assertTrue("'" + temporalUnit77 + "' != '" + java.time.temporal.ChronoUnit.FOREVER + "'", temporalUnit77.equals(java.time.temporal.ChronoUnit.FOREVER));
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 2L + "'", long79 == 2L);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test1660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1660");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType4 = jSTypeRegistry2.createObjectType(objectType3);
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.jstype.ObjectType objectType8 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry7.createObjectType(objectType8);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair10 = objectType4.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType9);
        com.google.javascript.rhino.Node node11 = objectType4.getRootNode();
        objectType4.clearCachedValues();
        com.google.javascript.rhino.jstype.TemplateType templateType13 = objectType4.toMaybeTemplateType();
        boolean boolean14 = objectType4.hasDisplayName();
        org.junit.Assert.assertNotNull(objectType4);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertNotNull(typePair10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNull(templateType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test1661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1661");
        java.io.File file2 = java.io.File.createTempFile("South Korea", "OptionalDouble[-1.0]");
        long long3 = file2.lastModified();
        java.io.File file6 = null;
        java.io.File file7 = java.io.File.createTempFile("hi!", "ISO", file6);
        boolean boolean10 = file7.setWritable(false, false);
        java.net.URI uRI11 = file7.toURI();
        java.io.PrintStream printStream12 = new java.io.PrintStream(file7);
        boolean boolean13 = file2.renameTo(file7);
        long long14 = file7.getTotalSpace();
        org.junit.Assert.assertNotNull(file2);
        org.junit.Assert.assertEquals(file2.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file2.toString(), "/tmp/South Korea8034640999055573409OptionalDouble[-1.0]");
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1645437726000L + "'", long3 == 1645437726000L);
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file7.toString(), "/tmp/hi!3789362910410718578ISO");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(uRI11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 364740218880L + "'", long14 == 364740218880L);
    }

    @Test
    public void test1662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1662");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label1 = builder0.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto2 = builder0.buildPartial();
        int int3 = fieldDescriptorProto2.getSerializedSize();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder4 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto2);
        com.google.protobuf.DescriptorProtos.FieldOptions fieldOptions5 = builder4.getOptions();
        boolean boolean6 = fieldOptions5.hasExperimentalMapKey();
        com.google.protobuf.DescriptorProtos.FieldOptions.CType cType7 = fieldOptions5.getCtype();
        int int8 = cType7.getNumber();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + label1 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label1.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(fieldOptions5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + cType7 + "' != '" + com.google.protobuf.DescriptorProtos.FieldOptions.CType.STRING + "'", cType7.equals(com.google.protobuf.DescriptorProtos.FieldOptions.CType.STRING));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test1663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1663");
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output2 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream4 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output2, (int) 'a');
        byte[] byteArray5 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite6 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions7 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray5, extensionRegistryLite6);
        output2.write(byteArray5);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder9 = builder0.mergeFrom(byteArray5);
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions10 = builder0.buildPartial();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder11 = builder0.addUninterpretedOptionBuilder();
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor12 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.Message.Builder builder13 = builder0.newBuilderForField(fieldDescriptor12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(output2);
        org.junit.Assert.assertNotNull(codedOutputStream4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(methodOptions7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(methodOptions10);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test1664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1664");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        byte[] byteArray5 = compilerOptions0.inputPropertyMapSerialized;
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode6 = compilerOptions0.getTracerMode();
        compilerOptions0.collapseProperties = false;
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap9 = java.nio.charset.Charset.availableCharsets();
        java.util.Set<java.lang.String> strSet10 = strMap9.keySet();
        compilerOptions0.setStripTypePrefixes(strSet10);
        compilerOptions0.aliasAllStrings = true;
        org.junit.Assert.assertNotNull(errorFormat3);
        org.junit.Assert.assertNull(byteArray5);
        org.junit.Assert.assertTrue("'" + tracerMode6 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode6.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertNotNull(strMap9);
        org.junit.Assert.assertNotNull(strSet10);
    }

    @Test
    public void test1665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1665");
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto0 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.getDefaultInstance();
        boolean boolean1 = methodDescriptorProto0.hasOutputType();
        com.google.protobuf.CodedOutputStream codedOutputStream2 = null;
        methodDescriptorProto0.writeTo(codedOutputStream2);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder4 = methodDescriptorProto0.toBuilder();
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder6 = builder4.setOutputType("java.nio.HeapFloatBuffer[pos=0 lim=6 cap=6]");
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder7 = builder4.clearInputType();
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor8 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.Message.Builder builder9 = builder7.newBuilderForField(fieldDescriptor8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(methodDescriptorProto0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test1666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1666");
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output2 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream4 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output2, (int) 'a');
        byte[] byteArray5 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite6 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions7 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray5, extensionRegistryLite6);
        output2.write(byteArray5);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder9 = builder0.mergeFrom(byteArray5);
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions10 = builder0.buildPartial();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder11 = builder0.addUninterpretedOptionBuilder();
        boolean boolean12 = builder11.hasNegativeIntValue();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder13 = builder11.clearStringValue();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder15 = builder13.setDoubleValue(0.0d);
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor16 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj17 = builder13.getField(fieldDescriptor16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(output2);
        org.junit.Assert.assertNotNull(codedOutputStream4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(methodOptions7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(methodOptions10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test1667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1667");
        com.google.protobuf.Descriptors.FieldDescriptor.Type type0 = com.google.protobuf.Descriptors.FieldDescriptor.Type.SINT64;
        org.junit.Assert.assertTrue("'" + type0 + "' != '" + com.google.protobuf.Descriptors.FieldDescriptor.Type.SINT64 + "'", type0.equals(com.google.protobuf.Descriptors.FieldDescriptor.Type.SINT64));
    }

    @Test
    public void test1668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1668");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type type0 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type.TYPE_BYTES;
        com.google.protobuf.Descriptors.EnumDescriptor enumDescriptor1 = type0.getDescriptorForType();
        com.google.protobuf.Descriptors.Descriptor descriptor2 = enumDescriptor1.getContainingType();
        java.util.List<com.google.protobuf.Descriptors.FieldDescriptor> fieldDescriptorList3 = descriptor2.getFields();
        org.junit.Assert.assertTrue("'" + type0 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type.TYPE_BYTES + "'", type0.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type.TYPE_BYTES));
        org.junit.Assert.assertNotNull(enumDescriptor1);
        org.junit.Assert.assertNotNull(descriptor2);
        org.junit.Assert.assertNotNull(fieldDescriptorList3);
    }

    @Test
    public void test1669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1669");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions1 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream0);
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder2 = enumOptions1.toBuilder();
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder3 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output5 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream7 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output5, (int) 'a');
        byte[] byteArray8 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite9 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions10 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray8, extensionRegistryLite9);
        output5.write(byteArray8);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder12 = builder3.mergeFrom(byteArray8);
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions13 = builder3.buildPartial();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder14 = builder3.addUninterpretedOptionBuilder();
        com.google.protobuf.DescriptorProtos.UninterpretedOption uninterpretedOption15 = builder14.buildPartial();
        java.lang.String str16 = uninterpretedOption15.getIdentifierValue();
        int int17 = uninterpretedOption15.getNameCount();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder18 = builder2.addUninterpretedOption(uninterpretedOption15);
        java.util.List<com.google.protobuf.DescriptorProtos.UninterpretedOption> uninterpretedOptionList19 = builder18.getUninterpretedOptionList();
        org.junit.Assert.assertNotNull(enumOptions1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(output5);
        org.junit.Assert.assertNotNull(codedOutputStream7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(methodOptions10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(methodOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(uninterpretedOption15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(uninterpretedOptionList19);
    }

    @Test
    public void test1670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1670");
        java.time.Month month0 = java.time.Month.APRIL;
        java.time.chrono.Chronology chronology1 = java.time.chrono.Chronology.from((java.time.temporal.TemporalAccessor) month0);
        java.lang.String str2 = chronology1.toString();
        java.time.Instant instant3 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime8 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset7);
        java.time.OffsetDateTime offsetDateTime9 = java.time.OffsetDateTime.ofInstant(instant3, (java.time.ZoneId) zoneOffset7);
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset13);
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset18);
        java.time.ZonedDateTime zonedDateTime20 = java.time.ZonedDateTime.of(localDateTime14, (java.time.ZoneId) zoneOffset18);
        java.time.Clock clock21 = java.time.Clock.fixed(instant3, (java.time.ZoneId) zoneOffset18);
        java.time.chrono.ChronoLocalDate chronoLocalDate22 = chronology1.dateNow(clock21);
        long long23 = clock21.millis();
        java.time.Instant instant24 = java.time.Instant.now(clock21);
        java.time.LocalDate localDate25 = java.time.LocalDate.now(clock21);
        org.junit.Assert.assertTrue("'" + month0 + "' != '" + java.time.Month.APRIL + "'", month0.equals(java.time.Month.APRIL));
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISO" + "'", str2, "ISO");
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(zonedDateTime20);
        org.junit.Assert.assertNotNull(clock21);
        org.junit.Assert.assertNotNull(chronoLocalDate22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(localDate25);
    }

    @Test
    public void test1671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1671");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset10);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.of(localDateTime11, (java.time.ZoneId) zoneOffset15);
        java.time.Clock clock18 = java.time.Clock.fixed(instant0, (java.time.ZoneId) zoneOffset15);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.now(clock18);
        java.time.LocalDate localDate20 = java.time.LocalDate.now(clock18);
        com.google.protobuf.Descriptors.Descriptor descriptor21 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto22 = descriptor21.toProto();
        boolean boolean23 = descriptorProto22.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList24 = descriptorProto22.getNestedTypeList();
        int int25 = descriptorProto22.getExtensionRangeCount();
        boolean boolean26 = localDate20.equals((java.lang.Object) descriptorProto22);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder27 = descriptorProto22.newBuilderForType();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList28 = builder27.getNestedTypeList();
        com.google.protobuf.UnknownFieldSet unknownFieldSet29 = builder27.getUnknownFields();
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder30 = builder27.addEnumTypeBuilder();
        byte[] byteArray31 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite32 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions33 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray31, extensionRegistryLite32);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite34 = null;
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto enumDescriptorProto35 = com.google.protobuf.DescriptorProtos.EnumDescriptorProto.parseFrom(byteArray31, extensionRegistryLite34);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto enumDescriptorProto36 = enumDescriptorProto35.getDefaultInstanceForType();
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder37 = builder27.addEnumType(enumDescriptorProto36);
        com.google.javascript.jscomp.CompilerOptions compilerOptions39 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions39.setRecordFunctionInformation(true);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder42 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder44 = builder42.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder45 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label46 = builder45.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder47 = builder42.addExtension(builder45);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder48 = builder42.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions49 = builder48.getOptions();
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder50 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output52 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream54 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output52, (int) 'a');
        byte[] byteArray55 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite56 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions57 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray55, extensionRegistryLite56);
        output52.write(byteArray55);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder59 = builder50.mergeFrom(byteArray55);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder60 = builder48.mergeFrom(byteArray55);
        compilerOptions39.setInputVariableMapSerialized(byteArray55);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite62 = null;
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto enumDescriptorProto63 = com.google.protobuf.DescriptorProtos.EnumDescriptorProto.parseFrom(byteArray55, extensionRegistryLite62);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder64 = builder27.addEnumType(99, enumDescriptorProto63);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 99, Size: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(clock18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(descriptor21);
        org.junit.Assert.assertNotNull(descriptorProto22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(descriptorProtoList28);
        org.junit.Assert.assertNotNull(unknownFieldSet29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(methodOptions33);
        org.junit.Assert.assertNotNull(enumDescriptorProto35);
        org.junit.Assert.assertNotNull(enumDescriptorProto36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + label46 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label46.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(enumOptions49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(output52);
        org.junit.Assert.assertNotNull(codedOutputStream54);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
        org.junit.Assert.assertNotNull(methodOptions57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(enumDescriptorProto63);
    }

    @Test
    public void test1672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1672");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRecordFunctionInformation(true);
        com.google.common.collect.Multimap<com.google.javascript.jscomp.CustomPassExecutionTime, com.google.javascript.jscomp.CompilerPass> customPassExecutionTimeMultimap3 = null;
        compilerOptions0.setCustomPasses(customPassExecutionTimeMultimap3);
        boolean boolean5 = compilerOptions0.jqueryPass;
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1673");
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.of(4096, 152, (int) '#', 7, 407);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MonthOfYear (valid values 1 - 12): 152");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1674");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URI uRI5 = new java.net.URI("MessageOptions", "OffsetSeconds", "{1572375491}", "Exceeded max number of code motion iterations: {0}", "2022-02-21");
            org.junit.Assert.fail("Expected exception of type java.net.URISyntaxException; message: Relative path in absolute URI: MessageOptions://OffsetSeconds%7B1572375491%7D?Exceeded%20max%20number%20of%20code%20motion%20iterations:%20%7B0%7D#2022-02-21");
        } catch (java.net.URISyntaxException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1675");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label1 = builder0.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto2 = builder0.buildPartial();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder3 = builder0.clear();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder5 = builder3.setNumber((int) (short) 100);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder6 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder8 = builder6.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FileOptionsOrBuilder fileOptionsOrBuilder9 = builder8.getOptionsOrBuilder();
        byte[] byteArray10 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite11 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions12 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray10, extensionRegistryLite11);
        com.google.protobuf.CodedOutputStream codedOutputStream15 = com.google.protobuf.CodedOutputStream.newInstance(byteArray10, (int) (short) 0, 1);
        com.google.protobuf.CodedOutputStream codedOutputStream18 = com.google.protobuf.CodedOutputStream.newInstance(byteArray10, (int) ' ', 0);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder19 = builder8.mergeFrom(byteArray10);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder20 = builder3.mergeFrom(byteArray10);
        boolean boolean21 = builder20.hasName();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + label1 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label1.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(fileOptionsOrBuilder9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(methodOptions12);
        org.junit.Assert.assertNotNull(codedOutputStream15);
        org.junit.Assert.assertNotNull(codedOutputStream18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1676");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_ZONED_DATE_TIME;
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
    }

    @Test
    public void test1677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1677");
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto0 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.getDefaultInstance();
        boolean boolean1 = serviceDescriptorProto0.hasOptions();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder2 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.newBuilder(serviceDescriptorProto0);
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto3 = builder2.buildPartial();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto4 = builder2.build();
        boolean boolean5 = serviceDescriptorProto4.hasName();
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.MethodDescriptorProtoOrBuilder methodDescriptorProtoOrBuilder7 = serviceDescriptorProto4.getMethodOrBuilder((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serviceDescriptorProto0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(serviceDescriptorProto3);
        org.junit.Assert.assertNotNull(serviceDescriptorProto4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1678");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        int int5 = localDateTime4.getYear();
        java.time.LocalDate localDate6 = localDateTime4.toLocalDate();
        java.time.chrono.Chronology chronology7 = java.time.chrono.Chronology.from((java.time.temporal.TemporalAccessor) localDate6);
        boolean boolean8 = localDate6.isLeapYear();
        java.time.LocalDate localDate10 = localDate6.plusDays((long) 12);
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset14);
        int int16 = localDateTime15.getYear();
        java.time.ZoneOffset zoneOffset20 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset20);
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime26 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset25);
        java.time.ZonedDateTime zonedDateTime27 = java.time.ZonedDateTime.of(localDateTime21, (java.time.ZoneId) zoneOffset25);
        boolean boolean28 = localDateTime15.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime21);
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime33 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset32);
        int int34 = localDateTime33.getYear();
        java.time.LocalDate localDate35 = localDateTime33.toLocalDate();
        int int36 = localDateTime15.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime33);
        java.time.temporal.ChronoField chronoField37 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit38 = chronoField37.getBaseUnit();
        long long39 = localDateTime15.getLong((java.time.temporal.TemporalField) chronoField37);
        java.time.LocalTime localTime40 = localDateTime15.toLocalTime();
        java.time.chrono.ChronoLocalDateTime<?> wildcardChronoLocalDateTime41 = localDate6.atTime(localTime40);
        java.time.LocalDate localDate43 = localDate6.plusMonths((long) 1024);
        long long44 = localDate6.toEpochDay();
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(zoneOffset20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(zonedDateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1970 + "'", int34 == 1970);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + chronoField37 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField37.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit38 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit38.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 12L + "'", long39 == 12L);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(wildcardChronoLocalDateTime41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
    }

    @Test
    public void test1679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1679");
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions0 = com.google.protobuf.DescriptorProtos.EnumValueOptions.getDefaultInstance();
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder1 = com.google.protobuf.DescriptorProtos.EnumValueOptions.newBuilder(enumValueOptions0);
        java.util.Map<com.google.protobuf.Descriptors.FieldDescriptor, java.lang.Object> fieldDescriptorMap2 = enumValueOptions0.getAllFields();
        org.junit.Assert.assertNotNull(enumValueOptions0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(fieldDescriptorMap2);
    }

    @Test
    public void test1680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1680");
        com.google.protobuf.DescriptorProtos.FileOptions fileOptions0 = com.google.protobuf.DescriptorProtos.FileOptions.getDefaultInstance();
        java.util.List<com.google.protobuf.DescriptorProtos.UninterpretedOption> uninterpretedOptionList1 = fileOptions0.getUninterpretedOptionList();
        boolean boolean2 = fileOptions0.getCcGenericServices();
        int int3 = fileOptions0.getSerializedSize();
        boolean boolean4 = fileOptions0.getJavaGenerateEqualsAndHash();
        org.junit.Assert.assertNotNull(fileOptions0);
        org.junit.Assert.assertNotNull(uninterpretedOptionList1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1681");
        int int0 = java.util.Spliterator.SUBSIZED;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 16384 + "'", int0 == 16384);
    }

    @Test
    public void test1682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1682");
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.of((long) (-1));
        java.util.function.LongPredicate longPredicate2 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean3 = longStream1.noneMatch(longPredicate2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream1);
    }

    @Test
    public void test1683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1683");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder3 = builder2.clearSourceCodeInfo();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder4 = builder2.getSourceCodeInfoBuilder();
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.Builder builder6 = builder4.addLocationBuilder(18);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 18, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test1684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1684");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label4 = builder3.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = builder0.addExtension(builder3);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder6 = builder0.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder7 = builder6.getOptionsBuilder();
        java.lang.String str8 = builder6.getName();
        com.google.protobuf.Message message9 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder10 = builder6.mergeFrom(message9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + label4 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label4.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test1685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1685");
        java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite> priorityMap0 = new java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite>();
        java.lang.Object obj1 = priorityMap0.clone();
        boolean boolean2 = priorityMap0.isEmpty();
        java.lang.String str3 = priorityMap0.toString();
        com.google.javascript.jscomp.WarningsGuard.Priority priority4 = null;
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto5 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.getDefaultInstance();
        boolean boolean6 = serviceDescriptorProto5.hasOptions();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder7 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.newBuilder(serviceDescriptorProto5);
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto8 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.getDefaultInstance();
        boolean boolean9 = serviceDescriptorProto8.hasOptions();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder10 = builder7.mergeFrom(serviceDescriptorProto8);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto12 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.getDefaultInstance();
        boolean boolean13 = methodDescriptorProto12.hasOutputType();
        com.google.protobuf.CodedOutputStream codedOutputStream14 = null;
        methodDescriptorProto12.writeTo(codedOutputStream14);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder16 = methodDescriptorProto12.toBuilder();
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder18 = builder16.setOutputType("java.nio.HeapFloatBuffer[pos=0 lim=6 cap=6]");
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder19 = builder16.clearInputType();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder20 = builder7.addMethod(0, builder19);
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder21 = builder7.clearOptions();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto22 = builder21.getDefaultInstanceForType();
        com.google.protobuf.Descriptors.Descriptor descriptor23 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto24 = descriptor23.toProto();
        boolean boolean25 = descriptorProto24.isInitialized();
        com.google.protobuf.DescriptorProtos.MessageOptions messageOptions26 = descriptorProto24.getOptions();
        com.google.protobuf.DescriptorProtos.MessageOptions.Builder builder27 = messageOptions26.newBuilderForType();
        boolean boolean28 = messageOptions26.hasNoStandardDescriptorAccessor();
        byte[] byteArray29 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite30 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions31 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray29, extensionRegistryLite30);
        com.google.protobuf.CodedOutputStream codedOutputStream34 = com.google.protobuf.CodedOutputStream.newInstance(byteArray29, (int) (short) 0, 1);
        com.google.protobuf.CodedOutputStream codedOutputStream37 = com.google.protobuf.CodedOutputStream.newInstance(byteArray29, (int) ' ', 0);
        messageOptions26.writeTo(codedOutputStream37);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean39 = priorityMap0.replace(priority4, (com.google.protobuf.MessageLite) serviceDescriptorProto22, (com.google.protobuf.MessageLite) messageOptions26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "{}" + "'", str3, "{}");
        org.junit.Assert.assertNotNull(serviceDescriptorProto5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(serviceDescriptorProto8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(methodDescriptorProto12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(serviceDescriptorProto22);
        org.junit.Assert.assertNotNull(descriptor23);
        org.junit.Assert.assertNotNull(descriptorProto24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(messageOptions26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(methodOptions31);
        org.junit.Assert.assertNotNull(codedOutputStream34);
        org.junit.Assert.assertNotNull(codedOutputStream37);
    }

    @Test
    public void test1686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1686");
        java.net.InetAddress inetAddress0 = java.net.InetAddress.getLocalHost();
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder1 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output3 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream5 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output3, (int) 'a');
        byte[] byteArray6 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite7 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions8 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray6, extensionRegistryLite7);
        output3.write(byteArray6);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder10 = builder1.mergeFrom(byteArray6);
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions11 = builder1.buildPartial();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder12 = builder1.addUninterpretedOptionBuilder();
        boolean boolean13 = builder12.hasNegativeIntValue();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder15 = builder12.setNegativeIntValue((long) 55);
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder17 = builder12.setIdentifierValue("MethodDescriptorProto");
        boolean boolean18 = inetAddress0.equals((java.lang.Object) builder12);
        boolean boolean20 = inetAddress0.isReachable(39);
        org.junit.Assert.assertNotNull(inetAddress0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(output3);
        org.junit.Assert.assertNotNull(codedOutputStream5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(methodOptions8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(methodOptions11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test1687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1687");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label4 = builder3.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = builder0.addExtension(builder3);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder6 = builder0.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder7 = builder6.getOptionsBuilder();
        java.io.InputStream inputStream8 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions9 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream8);
        boolean boolean10 = enumOptions9.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder11 = builder7.mergeFrom(enumOptions9);
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder12 = builder11.clear();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder13 = builder11.clearUninterpretedOption();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + label4 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label4.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(enumOptions9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test1688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1688");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_TIME;
        java.time.format.ResolverStyle resolverStyle1 = java.time.format.ResolverStyle.SMART;
        java.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withResolverStyle(resolverStyle1);
        java.time.temporal.TemporalQuery<?> wildcardTemporalQuery4 = null;
        java.time.temporal.TemporalQuery[] temporalQueryArray6 = new java.time.temporal.TemporalQuery[1];
        @SuppressWarnings("unchecked")
        java.time.temporal.TemporalQuery<?>[] wildcardTemporalQueryArray7 = (java.time.temporal.TemporalQuery<?>[]) temporalQueryArray6;
        wildcardTemporalQueryArray7[0] = wildcardTemporalQuery4;
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.TemporalAccessor temporalAccessor10 = dateTimeFormatter0.parseBest((java.lang.CharSequence) "java.nio.ByteBufferAsDoubleBufferB[pos=0 lim=12 cap=12]", wildcardTemporalQueryArray7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: At least two queries must be specified");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + resolverStyle1 + "' != '" + java.time.format.ResolverStyle.SMART + "'", resolverStyle1.equals(java.time.format.ResolverStyle.SMART));
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(temporalQueryArray6);
        org.junit.Assert.assertNotNull(wildcardTemporalQueryArray7);
    }

    @Test
    public void test1689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1689");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) ' ');
        boolean boolean2 = charBuffer1.isDirect();
        int int3 = charBuffer1.arrayOffset();
        java.nio.Buffer buffer4 = charBuffer1.flip();
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(buffer4);
    }

    @Test
    public void test1690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1690");
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output2 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream4 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output2, (int) 'a');
        byte[] byteArray5 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite6 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions7 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray5, extensionRegistryLite6);
        output2.write(byteArray5);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder9 = builder0.mergeFrom(byteArray5);
        java.util.List<com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder> builderList10 = builder9.getUninterpretedOptionBuilderList();
        java.io.InputStream inputStream11 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean12 = builder9.mergeDelimitedFrom(inputStream11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(output2);
        org.junit.Assert.assertNotNull(codedOutputStream4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(methodOptions7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builderList10);
    }

    @Test
    public void test1691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1691");
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto0 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.getDefaultInstance();
        boolean boolean1 = serviceDescriptorProto0.hasOptions();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder2 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.newBuilder(serviceDescriptorProto0);
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto3 = builder2.buildPartial();
        com.google.protobuf.DescriptorProtos.ServiceOptions serviceOptions4 = builder2.getOptions();
        com.google.protobuf.DescriptorProtos.ServiceOptions.Builder builder5 = serviceOptions4.toBuilder();
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor6 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean7 = builder5.hasField(fieldDescriptor6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serviceDescriptorProto0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(serviceDescriptorProto3);
        org.junit.Assert.assertNotNull(serviceOptions4);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test1692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1692");
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.of("");
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid ID for ZoneOffset, invalid format: ");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1693");
        byte[] byteArray0 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions2 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray0, extensionRegistryLite1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite3 = null;
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto enumDescriptorProto4 = com.google.protobuf.DescriptorProtos.EnumDescriptorProto.parseFrom(byteArray0, extensionRegistryLite3);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder5 = com.google.protobuf.DescriptorProtos.EnumDescriptorProto.newBuilder(enumDescriptorProto4);
        java.io.InputStream inputStream7 = null;
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto enumValueDescriptorProto8 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.parseFrom(inputStream7);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder9 = builder5.addValue(16, enumValueDescriptorProto8);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 16, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(methodOptions2);
        org.junit.Assert.assertNotNull(enumDescriptorProto4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(enumValueDescriptorProto8);
    }

    @Test
    public void test1694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1694");
        java.io.PrintStream printStream0 = null;
        com.google.javascript.jscomp.Compiler compiler1 = new com.google.javascript.jscomp.Compiler(printStream0);
        com.google.javascript.jscomp.SourceMap sourceMap2 = compiler1.getSourceMap();
        java.util.stream.LongStream longStream4 = java.util.stream.LongStream.of((long) (-1));
        com.google.common.collect.ImmutableMap<com.google.javascript.jscomp.Compiler, java.util.stream.LongStream> compilerMap5 = com.google.common.collect.ImmutableMap.of(compiler1, longStream4);
        java.util.stream.DoubleStream doubleStream6 = longStream4.asDoubleStream();
        double[] doubleArray7 = doubleStream6.toArray();
        java.util.stream.DoubleStream doubleStream8 = java.util.stream.DoubleStream.of(doubleArray7);
        boolean boolean9 = doubleStream8.isParallel();
        org.junit.Assert.assertNull(sourceMap2);
        org.junit.Assert.assertNotNull(longStream4);
        org.junit.Assert.assertNotNull(compilerMap5);
        org.junit.Assert.assertNotNull(doubleStream6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0]");
        org.junit.Assert.assertNotNull(doubleStream8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1695");
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap0 = java.nio.charset.Charset.availableCharsets();
        java.util.Set<java.lang.String> strSet1 = strMap0.keySet();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        boolean boolean3 = strMap0.containsValue((java.lang.Object) stringPosition2);
        java.lang.String str4 = stringPosition2.getItem();
        stringPosition2.setItem("und");
        org.junit.Assert.assertNotNull(strMap0);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test1696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1696");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType4 = jSTypeRegistry2.createObjectType(objectType3);
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.jstype.ObjectType objectType8 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry7.createObjectType(objectType8);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair10 = objectType4.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType9);
        boolean boolean12 = objectType4.isPropertyInExterns("hi!");
        com.google.javascript.rhino.jstype.JSType jSType13 = objectType4.getTypeOfThis();
        com.google.javascript.rhino.Node node14 = objectType4.getRootNode();
        org.junit.Assert.assertNotNull(objectType4);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertNotNull(typePair10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(jSType13);
        org.junit.Assert.assertNull(node14);
    }

    @Test
    public void test1697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1697");
        com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder builder0 = com.google.javascript.jscomp.FunctionInformationMap.Entry.newBuilder();
        boolean boolean1 = builder0.hasSourceName();
        java.io.InputStream inputStream2 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean3 = builder0.mergeDelimitedFrom(inputStream2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test1698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1698");
        byte[] byteArray0 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions2 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray0, extensionRegistryLite1);
        com.google.protobuf.CodedInputStream codedInputStream5 = com.google.protobuf.CodedInputStream.newInstance(byteArray0, 16, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            int int6 = codedInputStream5.readEnum();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 16");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(methodOptions2);
        org.junit.Assert.assertNotNull(codedInputStream5);
    }

    @Test
    public void test1699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1699");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.nio.file.attribute.FileTime fileTime1 = java.nio.file.attribute.FileTime.from(instant0);
        java.time.Instant instant2 = java.time.Instant.EPOCH;
        java.nio.file.attribute.FileTime fileTime3 = java.nio.file.attribute.FileTime.from(instant2);
        java.time.Instant instant5 = instant2.plusNanos((long) 32);
        int int6 = instant0.compareTo(instant2);
        java.util.Date date7 = java.util.Date.from(instant2);
        date7.setDate((int) (short) 10);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(fileTime1);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(fileTime3);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Sat Jan 10 00:00:00 UTC 1970");
    }

    @Test
    public void test1700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1700");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange extensionRange2 = com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.parseFrom(inputStream0, extensionRegistryLite1);
        int int3 = extensionRange2.getEnd();
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange extensionRange4 = extensionRange2.getDefaultInstanceForType();
        int int5 = extensionRange4.getEnd();
        boolean boolean6 = extensionRange4.hasStart();
        boolean boolean7 = extensionRange4.hasEnd();
        org.junit.Assert.assertNotNull(extensionRange2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(extensionRange4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1701");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        java.nio.charset.CodingErrorAction codingErrorAction2 = charsetDecoder1.malformedInputAction();
        java.nio.charset.CodingErrorAction codingErrorAction3 = charsetDecoder1.unmappableCharacterAction();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet8 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet8, strArray7);
        boolean boolean10 = strSet8.isEmpty();
        java.nio.ByteBuffer byteBuffer12 = java.nio.ByteBuffer.allocate(100);
        boolean boolean13 = strSet8.equals((java.lang.Object) byteBuffer12);
        java.nio.IntBuffer intBuffer14 = byteBuffer12.asIntBuffer();
        double double15 = byteBuffer12.getDouble();
        java.nio.ByteBuffer byteBuffer16 = byteBuffer12.asReadOnlyBuffer();
        java.nio.CharBuffer charBuffer17 = charsetDecoder1.decode(byteBuffer16);
        int int19 = byteBuffer16.getInt((int) '/');
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertNotNull(codingErrorAction2);
        org.junit.Assert.assertNotNull(codingErrorAction3);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intBuffer14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(charBuffer17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test1702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1702");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto enumValueDescriptorProto1 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.parseFrom(inputStream0);
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder2 = enumValueDescriptorProto1.toBuilder();
        boolean boolean3 = enumValueDescriptorProto1.hasOptions();
        java.lang.String str4 = enumValueDescriptorProto1.getName();
        org.junit.Assert.assertNotNull(enumValueDescriptorProto1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test1703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1703");
        com.google.protobuf.DescriptorProtos.FieldOptions.CType cType0 = com.google.protobuf.DescriptorProtos.FieldOptions.CType.CORD;
        org.junit.Assert.assertTrue("'" + cType0 + "' != '" + com.google.protobuf.DescriptorProtos.FieldOptions.CType.CORD + "'", cType0.equals(com.google.protobuf.DescriptorProtos.FieldOptions.CType.CORD));
    }

    @Test
    public void test1704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1704");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRecordFunctionInformation(true);
        compilerOptions0.setCheckCaja(true);
    }

    @Test
    public void test1705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1705");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.of(localDateTime4, (java.time.ZoneId) zoneOffset8);
        java.time.temporal.ChronoField chronoField12 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit13 = chronoField12.getBaseUnit();
        java.time.LocalDateTime localDateTime14 = localDateTime4.plus((long) 1970, temporalUnit13);
        java.time.LocalTime localTime15 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localDateTime14);
        java.time.LocalTime localTime17 = localTime15.minusHours((long) 3);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertTrue("'" + chronoField12 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField12.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit13 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit13.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
    }

    @Test
    public void test1706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1706");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.of(localDateTime4, (java.time.ZoneId) zoneOffset8);
        java.time.temporal.ChronoField chronoField12 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit13 = chronoField12.getBaseUnit();
        java.time.LocalDateTime localDateTime14 = localDateTime4.plus((long) 1970, temporalUnit13);
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset19);
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset24);
        java.time.ZonedDateTime zonedDateTime26 = java.time.ZonedDateTime.of(localDateTime20, (java.time.ZoneId) zoneOffset24);
        java.time.temporal.ChronoField chronoField28 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit29 = chronoField28.getBaseUnit();
        java.time.LocalDateTime localDateTime30 = localDateTime20.plus((long) 1970, temporalUnit29);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime31 = localDateTime14.minus((long) 43, temporalUnit29);
        java.time.LocalDateTime localDateTime33 = localDateTime14.minusHours((long) 1024);
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset37);
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime43 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset42);
        java.time.ZonedDateTime zonedDateTime44 = java.time.ZonedDateTime.of(localDateTime38, (java.time.ZoneId) zoneOffset42);
        java.time.temporal.ChronoField chronoField45 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        boolean boolean46 = localDateTime38.isSupported((java.time.temporal.TemporalField) chronoField45);
        int int47 = localDateTime33.get((java.time.temporal.TemporalField) chronoField45);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime49 = localDateTime33.plusMonths(4320000000000000L);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for Year (valid values -999999999 - 999999999): 360000000001970");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertTrue("'" + chronoField12 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField12.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit13 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit13.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertTrue("'" + chronoField28 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField28.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit29 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit29.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(zonedDateTime44);
        org.junit.Assert.assertTrue("'" + chronoField45 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField45.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 10 + "'", int47 == 10);
    }

    @Test
    public void test1707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1707");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label1 = builder0.getLabel();
        java.io.InputStream inputStream2 = null;
        com.google.protobuf.MessageLite.Builder builder3 = builder0.mergeFrom(inputStream2);
        com.google.protobuf.UnknownFieldSet unknownFieldSet4 = null;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder5 = builder0.setUnknownFields(unknownFieldSet4);
        com.google.protobuf.DescriptorProtos.FieldOptionsOrBuilder fieldOptionsOrBuilder6 = builder0.getOptionsOrBuilder();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + label1 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label1.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(fieldOptionsOrBuilder6);
    }

    @Test
    public void test1708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1708");
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap0 = java.nio.charset.Charset.availableCharsets();
        java.net.URISyntaxException uRISyntaxException3 = new java.net.URISyntaxException("hi!", "");
        boolean boolean4 = strMap0.containsKey((java.lang.Object) "");
        java.util.Set<java.lang.String> strSet5 = strMap0.keySet();
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap8 = strMap0.subMap("OffsetSeconds", "{2106658412}");
        org.junit.Assert.assertNotNull(strMap0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(strMap8);
    }

    @Test
    public void test1709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1709");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.of(localDateTime4, (java.time.ZoneId) zoneOffset8);
        java.time.temporal.ChronoField chronoField12 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit13 = chronoField12.getBaseUnit();
        java.time.LocalDateTime localDateTime14 = localDateTime4.plus((long) 1970, temporalUnit13);
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset19);
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset24);
        java.time.ZonedDateTime zonedDateTime26 = java.time.ZonedDateTime.of(localDateTime20, (java.time.ZoneId) zoneOffset24);
        java.time.temporal.ChronoField chronoField28 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit29 = chronoField28.getBaseUnit();
        java.time.LocalDateTime localDateTime30 = localDateTime20.plus((long) 1970, temporalUnit29);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime31 = localDateTime14.minus((long) 43, temporalUnit29);
        java.time.LocalDateTime localDateTime33 = localDateTime14.minusHours((long) 1024);
        java.time.LocalDateTime localDateTime35 = localDateTime33.plusHours((long) 0);
        java.time.ZoneOffset zoneOffset39 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime40 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset39);
        java.time.ZoneOffset zoneOffset44 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime45 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset44);
        java.time.ZonedDateTime zonedDateTime46 = java.time.ZonedDateTime.of(localDateTime40, (java.time.ZoneId) zoneOffset44);
        java.time.ZoneOffset zoneOffset51 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime52 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset51);
        java.time.ZoneOffset zoneOffset56 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime57 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset56);
        java.time.ZonedDateTime zonedDateTime58 = java.time.ZonedDateTime.of(localDateTime52, (java.time.ZoneId) zoneOffset56);
        java.time.ZonedDateTime zonedDateTime60 = zonedDateTime58.withYear((int) (short) 1);
        java.time.temporal.ChronoField chronoField61 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit62 = chronoField61.getBaseUnit();
        java.time.ZonedDateTime zonedDateTime63 = zonedDateTime58.truncatedTo(temporalUnit62);
        java.time.LocalDateTime localDateTime64 = localDateTime40.plus(999L, temporalUnit62);
        java.time.chrono.Chronology chronology65 = localDateTime64.getChronology();
        int int66 = localDateTime33.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime64);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertTrue("'" + chronoField12 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField12.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit13 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit13.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertTrue("'" + chronoField28 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField28.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit29 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit29.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(zoneOffset39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(zoneOffset44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(zonedDateTime46);
        org.junit.Assert.assertNotNull(zoneOffset51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(zoneOffset56);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(zonedDateTime58);
        org.junit.Assert.assertNotNull(zonedDateTime60);
        org.junit.Assert.assertTrue("'" + chronoField61 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField61.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit62 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit62.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(zonedDateTime63);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-2) + "'", int66 == (-2));
    }

    @Test
    public void test1710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1710");
        java.util.Date date3 = new java.util.Date((int) (byte) -1, 43, 16384);
        java.time.Instant instant4 = date3.toInstant();
        java.time.zone.ZoneOffsetTransitionRule.TimeDefinition timeDefinition5 = java.time.zone.ZoneOffsetTransitionRule.TimeDefinition.WALL;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset9);
        int int11 = localDateTime10.getYear();
        java.time.Instant instant12 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset16);
        java.time.OffsetDateTime offsetDateTime18 = java.time.OffsetDateTime.ofInstant(instant12, (java.time.ZoneId) zoneOffset16);
        java.time.Instant instant19 = localDateTime10.toInstant(zoneOffset16);
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.ofHours(9);
        java.time.temporal.ChronoField chronoField24 = java.time.temporal.ChronoField.OFFSET_SECONDS;
        java.time.Instant instant25 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset29);
        java.time.OffsetDateTime offsetDateTime31 = java.time.OffsetDateTime.ofInstant(instant25, (java.time.ZoneId) zoneOffset29);
        java.time.OffsetDateTime offsetDateTime33 = offsetDateTime31.minusDays((long) (short) 100);
        java.lang.String str34 = offsetDateTime31.toString();
        java.time.temporal.ChronoField chronoField35 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        int int36 = offsetDateTime31.get((java.time.temporal.TemporalField) chronoField35);
        java.time.OffsetDateTime offsetDateTime38 = offsetDateTime31.withDayOfMonth((int) (short) 10);
        java.time.ZoneOffset zoneOffset39 = java.time.ZoneOffset.MAX;
        java.time.OffsetDateTime offsetDateTime40 = offsetDateTime38.withOffsetSameLocal(zoneOffset39);
        boolean boolean41 = chronoField24.isSupportedBy((java.time.temporal.TemporalAccessor) zoneOffset39);
        java.time.LocalDateTime localDateTime42 = java.time.LocalDateTime.ofEpochSecond((long) 8, 10, zoneOffset39);
        java.time.LocalDateTime localDateTime43 = timeDefinition5.createDateTime(localDateTime10, zoneOffset21, zoneOffset39);
        java.time.ZonedDateTime zonedDateTime44 = java.time.ZonedDateTime.ofInstant(instant4, (java.time.ZoneId) zoneOffset39);
        java.lang.String str45 = zonedDateTime44.toString();
        org.junit.Assert.assertEquals(date3.toString(), "Mon Jun 09 00:00:00 UTC 1947");
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertTrue("'" + timeDefinition5 + "' != '" + java.time.zone.ZoneOffsetTransitionRule.TimeDefinition.WALL + "'", timeDefinition5.equals(java.time.zone.ZoneOffsetTransitionRule.TimeDefinition.WALL));
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertTrue("'" + chronoField24 + "' != '" + java.time.temporal.ChronoField.OFFSET_SECONDS + "'", chronoField24.equals(java.time.temporal.ChronoField.OFFSET_SECONDS));
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertNotNull(offsetDateTime33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1970-01-01T00:00:52+00:00:52" + "'", str34, "1970-01-01T00:00:52+00:00:52");
        org.junit.Assert.assertTrue("'" + chronoField35 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField35.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 12 + "'", int36 == 12);
        org.junit.Assert.assertNotNull(offsetDateTime38);
        org.junit.Assert.assertNotNull(zoneOffset39);
        org.junit.Assert.assertNotNull(offsetDateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(zonedDateTime44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1947-06-09T18:00+18:00" + "'", str45, "1947-06-09T18:00+18:00");
    }

    @Test
    public void test1711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1711");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.INTERNET_EXPLORER_CHECKS;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_REGEXP = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROPERTIES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.GLOBAL_THIS = diagnosticGroup0;
        org.junit.Assert.assertNotNull(diagnosticGroup0);
    }

    @Test
    public void test1712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1712");
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder1 = builder0.clearCcGenericServices();
        boolean boolean2 = builder0.isInitialized();
        boolean boolean3 = builder0.getJavaGenericServices();
        java.util.List<com.google.protobuf.DescriptorProtos.UninterpretedOption> uninterpretedOptionList4 = builder0.getUninterpretedOptionList();
        boolean boolean5 = builder0.hasJavaGenericServices();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder6 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder8 = builder6.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder9 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label10 = builder9.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder11 = builder6.addExtension(builder9);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder12 = builder6.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder13 = builder12.getOptionsBuilder();
        java.io.InputStream inputStream14 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions15 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream14);
        boolean boolean16 = enumOptions15.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder17 = builder13.mergeFrom(enumOptions15);
        com.google.protobuf.UnknownFieldSet unknownFieldSet18 = builder13.getUnknownFields();
        com.google.protobuf.CodedOutputStream codedOutputStream19 = null;
        unknownFieldSet18.writeTo(codedOutputStream19);
        byte[] byteArray21 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite22 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions23 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray21, extensionRegistryLite22);
        com.google.protobuf.CodedOutputStream codedOutputStream26 = com.google.protobuf.CodedOutputStream.newInstance(byteArray21, (int) (short) 0, 1);
        com.google.protobuf.CodedOutputStream codedOutputStream29 = com.google.protobuf.CodedOutputStream.newInstance(byteArray21, (int) ' ', 0);
        java.io.InputStream inputStream30 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location31 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream30);
        boolean boolean32 = location31.isInitialized();
        codedOutputStream29.writeGroupNoTag((com.google.protobuf.MessageLite) location31);
        unknownFieldSet18.writeAsMessageSetTo(codedOutputStream29);
        java.util.Map<java.lang.Integer, com.google.protobuf.UnknownFieldSet.Field> intMap35 = unknownFieldSet18.asMap();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder36 = builder0.setUnknownFields(unknownFieldSet18);
        boolean boolean37 = builder36.hasJavaPackage();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(uninterpretedOptionList4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + label10 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label10.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(enumOptions15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(unknownFieldSet18);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(methodOptions23);
        org.junit.Assert.assertNotNull(codedOutputStream26);
        org.junit.Assert.assertNotNull(codedOutputStream29);
        org.junit.Assert.assertNotNull(location31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(intMap35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test1713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1713");
        java.nio.FloatBuffer floatBuffer1 = java.nio.FloatBuffer.allocate(6);
        java.nio.FloatBuffer floatBuffer2 = floatBuffer1.asReadOnlyBuffer();
        java.nio.FloatBuffer floatBuffer3 = floatBuffer1.duplicate();
        java.nio.FloatBuffer floatBuffer5 = java.nio.FloatBuffer.allocate(6);
        java.nio.FloatBuffer floatBuffer6 = floatBuffer5.asReadOnlyBuffer();
        java.nio.FloatBuffer floatBuffer7 = floatBuffer5.asReadOnlyBuffer();
        java.nio.ByteOrder byteOrder8 = floatBuffer7.order();
        boolean boolean9 = floatBuffer7.hasArray();
        java.nio.FloatBuffer floatBuffer10 = floatBuffer3.put(floatBuffer7);
        // The following exception was thrown during execution in test generation
        try {
            float float11 = floatBuffer10.get();
            org.junit.Assert.fail("Expected exception of type java.nio.BufferUnderflowException; message: null");
        } catch (java.nio.BufferUnderflowException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatBuffer1);
        org.junit.Assert.assertNotNull(floatBuffer2);
        org.junit.Assert.assertNotNull(floatBuffer3);
        org.junit.Assert.assertNotNull(floatBuffer5);
        org.junit.Assert.assertNotNull(floatBuffer6);
        org.junit.Assert.assertNotNull(floatBuffer7);
        org.junit.Assert.assertNotNull(byteOrder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(floatBuffer10);
    }

    @Test
    public void test1714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1714");
        com.google.javascript.jscomp.ErrorFormat errorFormat0 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        java.io.PrintStream printStream1 = null;
        com.google.javascript.jscomp.Compiler compiler2 = new com.google.javascript.jscomp.Compiler(printStream1);
        com.google.javascript.jscomp.ErrorManager errorManager3 = compiler2.getErrorManager();
        com.google.javascript.jscomp.MessageFormatter messageFormatter5 = errorFormat0.toFormatter((com.google.javascript.jscomp.SourceExcerptProvider) compiler2, false);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean11 = node10.isFromExterns();
        com.google.javascript.rhino.Node node15 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean16 = node15.isFromExterns();
        java.lang.String str17 = node15.toString();
        com.google.javascript.rhino.Node node18 = node10.copyInformationFrom(node15);
        int int19 = node10.getLineno();
        boolean boolean20 = node10.isLabel();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean25 = node24.isStringKey();
        boolean boolean26 = node24.isTrue();
        com.google.javascript.rhino.InputId inputId28 = new com.google.javascript.rhino.InputId("NUMBER 52.0 0");
        node24.setInputId(inputId28);
        node10.setInputId(inputId28);
        com.google.javascript.jscomp.CompilerOptions compilerOptions31 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions31.setRecordFunctionInformation(true);
        boolean boolean34 = compilerOptions31.checkControlStructures;
        compilerOptions31.setCollapseProperties(false);
        compilerOptions31.setAssumeStrictThis(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions39 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions39.optimizeCalls = false;
        compilerOptions39.preferLineBreakAtEndOfFile = false;
        boolean boolean44 = compilerOptions39.markNoSideEffectCalls;
        boolean boolean45 = compilerOptions39.labelRenaming;
        com.google.javascript.jscomp.DependencyOptions dependencyOptions46 = new com.google.javascript.jscomp.DependencyOptions();
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet51 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet51, strArray50);
        boolean boolean53 = strSet51.isEmpty();
        java.nio.ByteBuffer byteBuffer55 = java.nio.ByteBuffer.allocate(100);
        boolean boolean56 = strSet51.equals((java.lang.Object) byteBuffer55);
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet61 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet61, strArray60);
        boolean boolean63 = strSet61.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream64 = strSet61.stream();
        boolean boolean65 = strSet51.retainAll((java.util.Collection<java.lang.String>) strSet61);
        com.google.javascript.jscomp.DependencyOptions dependencyOptions66 = dependencyOptions46.setEntryPoints((java.util.Collection<java.lang.String>) strSet51);
        compilerOptions39.setDependencyOptions(dependencyOptions46);
        com.google.javascript.jscomp.CheckLevel checkLevel68 = compilerOptions39.checkGlobalThisLevel;
        compilerOptions31.reportMissingOverride = checkLevel68;
        com.google.javascript.jscomp.DiagnosticType diagnosticType72 = com.google.javascript.jscomp.DiagnosticType.warning("", "Unknown class name");
        java.lang.String[] strArray77 = new java.lang.String[] { "2022-02-21", "2022-02-21", "hi!", "/tmp/hi!4516073975838273390ISO" };
        com.google.javascript.jscomp.JSError jSError78 = com.google.javascript.jscomp.JSError.make("{}", node10, checkLevel68, diagnosticType72, strArray77);
        java.time.temporal.ChronoField chronoField79 = java.time.temporal.ChronoField.EPOCH_DAY;
        java.time.Instant instant80 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset84 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime85 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset84);
        java.time.OffsetDateTime offsetDateTime86 = java.time.OffsetDateTime.ofInstant(instant80, (java.time.ZoneId) zoneOffset84);
        java.time.temporal.ValueRange valueRange87 = chronoField79.rangeRefinedBy((java.time.temporal.TemporalAccessor) offsetDateTime86);
        java.time.format.DateTimeFormatter dateTimeFormatter88 = java.time.format.DateTimeFormatter.ISO_DATE;
        java.lang.String str89 = offsetDateTime86.format(dateTimeFormatter88);
        boolean boolean90 = jSError78.equals((java.lang.Object) dateTimeFormatter88);
        java.lang.String str91 = messageFormatter5.formatError(jSError78);
        int int92 = jSError78.lineNumber;
        org.junit.Assert.assertNotNull(errorFormat0);
        org.junit.Assert.assertNotNull(errorManager3);
        org.junit.Assert.assertNotNull(messageFormatter5);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "NUMBER 52.0 0" + "'", str17, "NUMBER 52.0 0");
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strStream64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(dependencyOptions66);
        org.junit.Assert.assertTrue("'" + checkLevel68 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel68.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(diagnosticType72);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(jSError78);
        org.junit.Assert.assertTrue("'" + chronoField79 + "' != '" + java.time.temporal.ChronoField.EPOCH_DAY + "'", chronoField79.equals(java.time.temporal.ChronoField.EPOCH_DAY));
        org.junit.Assert.assertNotNull(instant80);
        org.junit.Assert.assertNotNull(zoneOffset84);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(offsetDateTime86);
        org.junit.Assert.assertNotNull(valueRange87);
        org.junit.Assert.assertNotNull(dateTimeFormatter88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "1970-01-01+00:00:52" + "'", str89, "1970-01-01+00:00:52");
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "{}: ERROR - Unknown class name\n" + "'", str91, "{}: ERROR - Unknown class name\n");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
    }

    @Test
    public void test1715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1715");
        java.nio.FloatBuffer floatBuffer1 = java.nio.FloatBuffer.allocate(6);
        float[] floatArray2 = floatBuffer1.array();
        java.nio.FloatBuffer floatBuffer3 = java.nio.FloatBuffer.wrap(floatArray2);
        java.nio.FloatBuffer floatBuffer4 = floatBuffer3.duplicate();
        java.nio.FloatBuffer floatBuffer6 = java.nio.FloatBuffer.allocate(6);
        float[] floatArray7 = floatBuffer6.array();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.FloatBuffer floatBuffer10 = floatBuffer4.put(floatArray7, 23, 16384);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatBuffer1);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(floatBuffer3);
        org.junit.Assert.assertNotNull(floatBuffer4);
        org.junit.Assert.assertNotNull(floatBuffer6);
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test1716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1716");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL3 = new java.net.URL("August", "/", "1970-01-01T00:00:00.000000032Z");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: unknown protocol: august");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1717");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        int int5 = localDateTime4.getYear();
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset9);
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset14);
        java.time.ZonedDateTime zonedDateTime16 = java.time.ZonedDateTime.of(localDateTime10, (java.time.ZoneId) zoneOffset14);
        boolean boolean17 = localDateTime4.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime10);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder18 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder20 = builder18.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder21 = builder20.clearSourceCodeInfo();
        boolean boolean22 = builder20.hasOptions();
        boolean boolean23 = localDateTime4.equals((java.lang.Object) builder20);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime25 = localDateTime4.withHour(52);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for HourOfDay (valid values 0 - 23): 52");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zonedDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1718");
        int[] intArray4 = new int[] { 16, ':', 43, (short) 100 };
        java.util.stream.IntStream intStream5 = java.util.stream.IntStream.of(intArray4);
        java.util.stream.IntStream intStream6 = intStream5.parallel();
        java.util.stream.Stream<java.lang.Integer> intStream7 = intStream5.boxed();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream8 = intStream5.unordered();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[16, 58, 43, 100]");
        org.junit.Assert.assertNotNull(intStream5);
        org.junit.Assert.assertNotNull(intStream6);
        org.junit.Assert.assertNotNull(intStream7);
    }

    @Test
    public void test1719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1719");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder3 = builder2.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder4 = builder2.clearEnumType();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder6 = builder2.setName("/tmp/hi!4516073975838273390ISO");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test1720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1720");
        java.time.chrono.IsoChronology isoChronology0 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset9);
        java.time.ZonedDateTime zonedDateTime11 = java.time.ZonedDateTime.of(localDateTime5, (java.time.ZoneId) zoneOffset9);
        java.time.ZonedDateTime zonedDateTime13 = zonedDateTime11.withHour(16);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime14 = zonedDateTime13.toLocalDateTime();
        java.time.chrono.Chronology chronology15 = localDateChronoLocalDateTime14.getChronology();
        int int16 = isoChronology0.compareTo(chronology15);
        java.lang.String str17 = isoChronology0.getCalendarType();
        java.time.LocalDate localDate18 = java.time.LocalDate.now();
        boolean boolean19 = localDate18.isLeapYear();
        java.time.chrono.Era era20 = localDate18.getEra();
        int int22 = isoChronology0.prolepticYear(era20, 9);
        java.time.Instant instant23 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset27 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset27);
        java.time.OffsetDateTime offsetDateTime29 = java.time.OffsetDateTime.ofInstant(instant23, (java.time.ZoneId) zoneOffset27);
        java.time.ZoneOffset zoneOffset33 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime34 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset33);
        java.time.ZoneOffset zoneOffset38 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime39 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset38);
        java.time.ZonedDateTime zonedDateTime40 = java.time.ZonedDateTime.of(localDateTime34, (java.time.ZoneId) zoneOffset38);
        java.time.Clock clock41 = java.time.Clock.fixed(instant23, (java.time.ZoneId) zoneOffset38);
        java.time.LocalDateTime localDateTime42 = java.time.LocalDateTime.now(clock41);
        java.time.LocalDate localDate43 = java.time.LocalDate.now(clock41);
        com.google.protobuf.Descriptors.Descriptor descriptor44 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto45 = descriptor44.toProto();
        boolean boolean46 = descriptorProto45.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList47 = descriptorProto45.getNestedTypeList();
        int int48 = descriptorProto45.getExtensionRangeCount();
        boolean boolean49 = localDate43.equals((java.lang.Object) descriptorProto45);
        java.time.temporal.ChronoField chronoField50 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_MONTH;
        java.time.temporal.ValueRange valueRange51 = localDate43.range((java.time.temporal.TemporalField) chronoField50);
        // The following exception was thrown during execution in test generation
        try {
            long long52 = era20.getLong((java.time.temporal.TemporalField) chronoField50);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: AlignedWeekOfMonth");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(isoChronology0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(zonedDateTime13);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "iso8601" + "'", str17, "iso8601");
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + era20 + "' != '" + java.time.chrono.IsoEra.CE + "'", era20.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 9 + "'", int22 == 9);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(zoneOffset27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(offsetDateTime29);
        org.junit.Assert.assertNotNull(zoneOffset33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(zoneOffset38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(zonedDateTime40);
        org.junit.Assert.assertNotNull(clock41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(descriptor44);
        org.junit.Assert.assertNotNull(descriptorProto45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + chronoField50 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_MONTH + "'", chronoField50.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_MONTH));
        org.junit.Assert.assertNotNull(valueRange51);
    }

    @Test
    public void test1721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1721");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        int int5 = localDateTime4.getYear();
        java.time.LocalDate localDate6 = localDateTime4.toLocalDate();
        java.time.chrono.Chronology chronology7 = java.time.chrono.Chronology.from((java.time.temporal.TemporalAccessor) localDate6);
        java.time.ZoneOffset zoneOffset11 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset11);
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset16);
        java.time.ZonedDateTime zonedDateTime18 = java.time.ZonedDateTime.of(localDateTime12, (java.time.ZoneId) zoneOffset16);
        java.time.ZonedDateTime zonedDateTime20 = zonedDateTime18.withHour(16);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime21 = zonedDateTime20.toLocalDateTime();
        int int22 = zonedDateTime20.getDayOfMonth();
        java.time.chrono.ChronoLocalDate chronoLocalDate23 = chronology7.date((java.time.temporal.TemporalAccessor) zonedDateTime20);
        java.time.ZoneId zoneId24 = zonedDateTime20.getZone();
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(zoneOffset11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zonedDateTime18);
        org.junit.Assert.assertNotNull(zonedDateTime20);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(chronoLocalDate23);
        org.junit.Assert.assertNotNull(zoneId24);
    }

    @Test
    public void test1722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1722");
        java.time.temporal.ChronoField chronoField0 = java.time.temporal.ChronoField.SECOND_OF_MINUTE;
        org.junit.Assert.assertTrue("'" + chronoField0 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_MINUTE + "'", chronoField0.equals(java.time.temporal.ChronoField.SECOND_OF_MINUTE));
    }

    @Test
    public void test1723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1723");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions2 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(inputStream0, extensionRegistryLite1);
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor3 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj5 = methodOptions2.getRepeatedField(fieldDescriptor3, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(methodOptions2);
    }

    @Test
    public void test1724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1724");
        java.util.Locale locale3 = new java.util.Locale("", "NUMBER 52.0 0", "hi!");
        java.time.format.DecimalStyle decimalStyle4 = java.time.format.DecimalStyle.of(locale3);
        java.lang.String str5 = locale3.getDisplayName();
        org.junit.Assert.assertEquals(locale3.toString(), "_NUMBER 52.0 0_hi!");
        org.junit.Assert.assertNotNull(decimalStyle4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "NUMBER 52.0 0 (hi!)" + "'", str5, "NUMBER 52.0 0 (hi!)");
    }

    @Test
    public void test1725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1725");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.of(localDateTime4, (java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime10.withYear((int) (short) 1);
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset16);
        int int18 = localDateTime17.getYear();
        java.time.LocalDate localDate19 = localDateTime17.toLocalDate();
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset23);
        java.time.ZoneOffset zoneOffset28 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset28);
        java.time.ZonedDateTime zonedDateTime30 = java.time.ZonedDateTime.of(localDateTime24, (java.time.ZoneId) zoneOffset28);
        java.time.temporal.ChronoField chronoField32 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit33 = chronoField32.getBaseUnit();
        java.time.LocalDateTime localDateTime34 = localDateTime24.plus((long) 1970, temporalUnit33);
        java.time.LocalTime localTime35 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localDateTime34);
        java.time.ZoneOffset zoneOffset39 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime40 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset39);
        java.time.OffsetDateTime offsetDateTime41 = java.time.OffsetDateTime.of(localDate19, localTime35, zoneOffset39);
        java.time.ZonedDateTime zonedDateTime42 = zonedDateTime10.withZoneSameInstant((java.time.ZoneId) zoneOffset39);
        java.lang.String str43 = zonedDateTime42.toString();
        java.time.ZonedDateTime zonedDateTime45 = zonedDateTime42.minusMinutes((long) 4095);
        java.time.chrono.IsoChronology isoChronology46 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.ZoneOffset zoneOffset50 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime51 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset50);
        java.time.ZoneOffset zoneOffset55 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime56 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset55);
        java.time.ZonedDateTime zonedDateTime57 = java.time.ZonedDateTime.of(localDateTime51, (java.time.ZoneId) zoneOffset55);
        java.time.ZonedDateTime zonedDateTime59 = zonedDateTime57.withHour(16);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime60 = zonedDateTime59.toLocalDateTime();
        java.time.chrono.Chronology chronology61 = localDateChronoLocalDateTime60.getChronology();
        int int62 = isoChronology46.compareTo(chronology61);
        java.lang.String str63 = isoChronology46.getCalendarType();
        java.time.LocalDate localDate64 = java.time.LocalDate.now();
        boolean boolean65 = localDate64.isLeapYear();
        java.time.chrono.Era era66 = localDate64.getEra();
        int int68 = isoChronology46.prolepticYear(era66, 9);
        java.time.temporal.ChronoField chronoField69 = java.time.temporal.ChronoField.MICRO_OF_DAY;
        boolean boolean70 = era66.isSupported((java.time.temporal.TemporalField) chronoField69);
        java.time.temporal.ValueRange valueRange71 = zonedDateTime42.range((java.time.temporal.TemporalField) chronoField69);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zonedDateTime30);
        org.junit.Assert.assertTrue("'" + chronoField32 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField32.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit33 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit33.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(zoneOffset39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(offsetDateTime41);
        org.junit.Assert.assertNotNull(zonedDateTime42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1970-01-01T00:02:32+00:00:52" + "'", str43, "1970-01-01T00:02:32+00:00:52");
        org.junit.Assert.assertNotNull(zonedDateTime45);
        org.junit.Assert.assertNotNull(isoChronology46);
        org.junit.Assert.assertNotNull(zoneOffset50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(zoneOffset55);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(zonedDateTime57);
        org.junit.Assert.assertNotNull(zonedDateTime59);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "iso8601" + "'", str63, "iso8601");
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + era66 + "' != '" + java.time.chrono.IsoEra.CE + "'", era66.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 9 + "'", int68 == 9);
        org.junit.Assert.assertTrue("'" + chronoField69 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_DAY + "'", chronoField69.equals(java.time.temporal.ChronoField.MICRO_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(valueRange71);
    }

    @Test
    public void test1726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1726");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        com.google.javascript.rhino.JSDocInfo.Visibility visibility1 = com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED;
        jSDocInfo0.setVisibility(visibility1);
        boolean boolean3 = jSDocInfo0.isConstant();
        java.lang.String str4 = jSDocInfo0.getDescription();
        com.google.common.collect.ImmutableList<java.lang.String> strList5 = jSDocInfo0.getTemplateTypeNames();
        boolean boolean6 = jSDocInfo0.hasThisType();
        org.junit.Assert.assertTrue("'" + visibility1 + "' != '" + com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED + "'", visibility1.equals(com.google.javascript.rhino.JSDocInfo.Visibility.PROTECTED));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1727");
        java.io.PrintStream printStream0 = null;
        com.google.javascript.jscomp.Compiler compiler1 = new com.google.javascript.jscomp.Compiler(printStream0);
        com.google.javascript.jscomp.ErrorManager errorManager2 = compiler1.getErrorManager();
        com.google.javascript.jscomp.SourceFile sourceFile4 = com.google.javascript.jscomp.SourceFile.fromFile("/");
        com.google.javascript.jscomp.SourceFile.Generator generator6 = null;
        com.google.javascript.jscomp.SourceFile sourceFile7 = com.google.javascript.jscomp.SourceFile.fromGenerator("hi!", generator6);
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions8.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat11 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions8.errorFormat = errorFormat11;
        compilerOptions8.setRemoveDeadCode(false);
        com.google.javascript.jscomp.Result result15 = compiler1.compile(sourceFile4, sourceFile7, compilerOptions8);
        com.google.common.collect.Multimap<com.google.javascript.jscomp.CustomPassExecutionTime, com.google.javascript.jscomp.CompilerPass> customPassExecutionTimeMultimap16 = compilerOptions8.customPasses;
        org.junit.Assert.assertNotNull(errorManager2);
        org.junit.Assert.assertNotNull(sourceFile4);
        org.junit.Assert.assertNotNull(sourceFile7);
        org.junit.Assert.assertNotNull(errorFormat11);
        org.junit.Assert.assertNotNull(result15);
        org.junit.Assert.assertNull(customPassExecutionTimeMultimap16);
    }

    @Test
    public void test1728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1728");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasThisType();
        java.lang.String str2 = jSDocInfo0.toString();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.isImplicitCast();
        boolean boolean5 = jSDocInfo0.isHidden();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "JSDocInfo" + "'", str2, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1729");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.of(localDateTime4, (java.time.ZoneId) zoneOffset8);
        java.time.temporal.ChronoField chronoField12 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit13 = chronoField12.getBaseUnit();
        java.time.LocalDateTime localDateTime14 = localDateTime4.plus((long) 1970, temporalUnit13);
        java.time.LocalTime localTime15 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localDateTime14);
        java.time.Period period16 = java.time.Period.ZERO;
        java.time.chrono.ChronoPeriod chronoPeriod17 = period16.normalized();
        java.time.Period period19 = period16.plusMonths((long) ' ');
        java.time.LocalDateTime localDateTime20 = localDateTime14.minus((java.time.temporal.TemporalAmount) period16);
        java.lang.String str21 = localDateTime14.toString();
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime26 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset25);
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset30);
        java.time.ZonedDateTime zonedDateTime32 = java.time.ZonedDateTime.of(localDateTime26, (java.time.ZoneId) zoneOffset30);
        java.time.temporal.ChronoField chronoField33 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        boolean boolean34 = localDateTime26.isSupported((java.time.temporal.TemporalField) chronoField33);
        java.time.LocalDateTime localDateTime36 = localDateTime26.plusHours((long) 9);
        java.time.temporal.Temporal temporal37 = localDateTime14.adjustInto((java.time.temporal.Temporal) localDateTime26);
        java.time.LocalTime localTime38 = localDateTime14.toLocalTime();
        java.time.ZoneOffset zoneOffset44 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime45 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset44);
        java.time.ZoneOffset zoneOffset49 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime50 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset49);
        java.time.ZonedDateTime zonedDateTime51 = java.time.ZonedDateTime.of(localDateTime45, (java.time.ZoneId) zoneOffset49);
        java.time.chrono.Chronology chronology52 = java.time.chrono.Chronology.from((java.time.temporal.TemporalAccessor) zoneOffset49);
        java.time.LocalDateTime localDateTime53 = java.time.LocalDateTime.ofEpochSecond((long) 6, (int) 'a', zoneOffset49);
        boolean boolean54 = localDateTime14.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime53);
        java.time.Instant instant55 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset59 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime60 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset59);
        java.time.OffsetDateTime offsetDateTime61 = java.time.OffsetDateTime.ofInstant(instant55, (java.time.ZoneId) zoneOffset59);
        java.time.OffsetDateTime offsetDateTime63 = offsetDateTime61.minusDays((long) (short) 100);
        java.lang.String str64 = offsetDateTime61.toString();
        java.time.temporal.ChronoField chronoField65 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        int int66 = offsetDateTime61.get((java.time.temporal.TemporalField) chronoField65);
        java.time.OffsetDateTime offsetDateTime68 = offsetDateTime61.withDayOfMonth((int) (short) 10);
        java.time.ZoneOffset zoneOffset69 = java.time.ZoneOffset.MAX;
        java.time.OffsetDateTime offsetDateTime70 = offsetDateTime68.withOffsetSameLocal(zoneOffset69);
        java.time.ZoneOffset zoneOffset71 = java.time.ZoneOffset.from((java.time.temporal.TemporalAccessor) zoneOffset69);
        java.time.ZonedDateTime zonedDateTime72 = localDateTime53.atZone((java.time.ZoneId) zoneOffset69);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertTrue("'" + chronoField12 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField12.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit13 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit13.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(chronoPeriod17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1970-03-24T02:02:32" + "'", str21, "1970-03-24T02:02:32");
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(zonedDateTime32);
        org.junit.Assert.assertTrue("'" + chronoField33 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField33.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(temporal37);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(zoneOffset44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(zoneOffset49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(zonedDateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertNotNull(zoneOffset59);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(offsetDateTime61);
        org.junit.Assert.assertNotNull(offsetDateTime63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "1970-01-01T00:00:52+00:00:52" + "'", str64, "1970-01-01T00:00:52+00:00:52");
        org.junit.Assert.assertTrue("'" + chronoField65 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField65.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 12 + "'", int66 == 12);
        org.junit.Assert.assertNotNull(offsetDateTime68);
        org.junit.Assert.assertNotNull(zoneOffset69);
        org.junit.Assert.assertNotNull(offsetDateTime70);
        org.junit.Assert.assertNotNull(zoneOffset71);
        org.junit.Assert.assertNotNull(zonedDateTime72);
    }

    @Test
    public void test1730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1730");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label1 = builder0.getLabel();
        java.io.InputStream inputStream2 = null;
        com.google.protobuf.MessageLite.Builder builder3 = builder0.mergeFrom(inputStream2);
        com.google.protobuf.UnknownFieldSet unknownFieldSet4 = null;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder5 = builder0.setUnknownFields(unknownFieldSet4);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder7 = builder5.setNumber((int) (short) 100);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder8 = builder7.clear();
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor9 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int10 = builder7.getRepeatedFieldCount(fieldDescriptor9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + label1 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label1.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test1731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1731");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition2 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        typePosition2.setPositionInformation((int) ':', 50, 64, (int) (short) 10);
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean12 = node11.isFromExterns();
        java.lang.String str13 = node11.toString();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable14 = node11.siblings();
        typePosition2.setItem(node11);
        com.google.javascript.rhino.Node node16 = node11.cloneNode();
        com.google.javascript.jscomp.SourceAst sourceAst17 = null;
        com.google.javascript.rhino.InputId inputId18 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput20 = new com.google.javascript.jscomp.CompilerInput(sourceAst17, inputId18, true);
        java.io.PrintStream printStream21 = null;
        com.google.javascript.jscomp.Compiler compiler22 = new com.google.javascript.jscomp.Compiler(printStream21);
        com.google.javascript.jscomp.ErrorManager errorManager23 = compiler22.getErrorManager();
        compilerInput20.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler22);
        com.google.javascript.jscomp.CodingConvention codingConvention25 = compiler22.getCodingConvention();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection26 = codingConvention25.getAssertionFunctions();
        java.lang.String str27 = codingConvention25.getAbstractMethodName();
        com.google.javascript.rhino.Node node29 = new com.google.javascript.rhino.Node(1);
        com.google.javascript.rhino.Node node30 = node29.cloneNode();
        com.google.javascript.rhino.Node node34 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean35 = node34.isStringKey();
        boolean boolean36 = node34.isTrue();
        boolean boolean37 = node34.isNot();
        java.lang.String str38 = codingConvention25.extractClassNameIfProvide(node30, node34);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        com.google.javascript.rhino.jstype.ObjectType objectType42 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType43 = jSTypeRegistry41.createObjectType(objectType42);
        com.google.javascript.rhino.ErrorReporter errorReporter44 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry46 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter44, false);
        com.google.javascript.rhino.jstype.ObjectType objectType47 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType48 = jSTypeRegistry46.createObjectType(objectType47);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair49 = objectType43.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType48);
        com.google.javascript.rhino.JSDocInfo jSDocInfo50 = objectType43.getJSDocInfo();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean55 = node54.isFromExterns();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean60 = node59.isFromExterns();
        java.lang.String str61 = node59.toString();
        com.google.javascript.rhino.Node node62 = node54.copyInformationFrom(node59);
        int int63 = node54.getLineno();
        boolean boolean64 = objectType43.equals((java.lang.Object) node54);
        boolean boolean65 = node54.isThis();
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node(1);
        com.google.javascript.rhino.Node node68 = new com.google.javascript.rhino.Node(15, node11, node34, node54, node67);
        com.google.javascript.rhino.Node node72 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean73 = node72.isFromExterns();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean78 = node77.isFromExterns();
        java.lang.String str79 = node77.toString();
        com.google.javascript.rhino.Node node80 = node72.copyInformationFrom(node77);
        int int81 = node72.getLineno();
        boolean boolean82 = node72.isLabel();
        java.lang.String str83 = node72.getSourceFileName();
        boolean boolean84 = node72.isDec();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node87 = new com.google.javascript.rhino.Node(0, node54, node72, 21, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: first new child has existing parent");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "NUMBER 52.0 0" + "'", str13, "NUMBER 52.0 0");
        org.junit.Assert.assertNotNull(nodeIterable14);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertNotNull(errorManager23);
        org.junit.Assert.assertNotNull(codingConvention25);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "goog.abstractMethod" + "'", str27, "goog.abstractMethod");
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertNotNull(node34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(objectType43);
        org.junit.Assert.assertNotNull(objectType48);
        org.junit.Assert.assertNotNull(typePair49);
        org.junit.Assert.assertNull(jSDocInfo50);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "NUMBER 52.0 0" + "'", str61, "NUMBER 52.0 0");
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "NUMBER 52.0 0" + "'", str79, "NUMBER 52.0 0");
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
    }

    @Test
    public void test1732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1732");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean4 = node3.isStringKey();
        boolean boolean5 = node3.isTrue();
        com.google.javascript.rhino.InputId inputId7 = new com.google.javascript.rhino.InputId("NUMBER 52.0 0");
        node3.setInputId(inputId7);
        com.google.javascript.jscomp.SourceAst sourceAst9 = null;
        com.google.javascript.rhino.InputId inputId10 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput12 = new com.google.javascript.jscomp.CompilerInput(sourceAst9, inputId10, true);
        java.io.PrintStream printStream13 = null;
        com.google.javascript.jscomp.Compiler compiler14 = new com.google.javascript.jscomp.Compiler(printStream13);
        com.google.javascript.jscomp.ErrorManager errorManager15 = compiler14.getErrorManager();
        compilerInput12.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler14);
        com.google.javascript.jscomp.CodingConvention codingConvention17 = compiler14.getCodingConvention();
        boolean boolean18 = inputId7.equals((java.lang.Object) compiler14);
        com.google.javascript.jscomp.Region region21 = compiler14.getSourceRegion("java.nio.HeapFloatBuffer[pos=0 lim=6 cap=6]", 0);
        com.google.javascript.jscomp.JSError[] jSErrorArray22 = compiler14.getWarnings();
        compiler14.reportCodeChange();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(errorManager15);
        org.junit.Assert.assertNotNull(codingConvention17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(region21);
        org.junit.Assert.assertNotNull(jSErrorArray22);
    }

    @Test
    public void test1733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1733");
        com.google.javascript.jscomp.SourceAst sourceAst0 = null;
        com.google.javascript.rhino.InputId inputId1 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput3 = new com.google.javascript.jscomp.CompilerInput(sourceAst0, inputId1, true);
        java.io.PrintStream printStream4 = null;
        com.google.javascript.jscomp.Compiler compiler5 = new com.google.javascript.jscomp.Compiler(printStream4);
        com.google.javascript.jscomp.ErrorManager errorManager6 = compiler5.getErrorManager();
        compilerInput3.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler5);
        com.google.javascript.jscomp.CodingConvention codingConvention8 = compiler5.getCodingConvention();
        boolean boolean9 = compiler5.isTypeCheckingEnabled();
        com.google.javascript.jscomp.type.ReverseAbstractInterpreter reverseAbstractInterpreter10 = compiler5.getReverseAbstractInterpreter();
        org.junit.Assert.assertNotNull(errorManager6);
        org.junit.Assert.assertNotNull(codingConvention8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(reverseAbstractInterpreter10);
    }

    @Test
    public void test1734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1734");
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        boolean boolean1 = builder0.hasOptimizeFor();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder2 = builder0.clone();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test1735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1735");
        java.io.PrintStream printStream0 = null;
        com.google.javascript.jscomp.Compiler compiler1 = new com.google.javascript.jscomp.Compiler(printStream0);
        com.google.javascript.jscomp.SourceMap sourceMap2 = compiler1.getSourceMap();
        java.util.stream.LongStream longStream4 = java.util.stream.LongStream.of((long) (-1));
        com.google.common.collect.ImmutableMap<com.google.javascript.jscomp.Compiler, java.util.stream.LongStream> compilerMap5 = com.google.common.collect.ImmutableMap.of(compiler1, longStream4);
        java.util.stream.DoubleStream doubleStream6 = longStream4.asDoubleStream();
        boolean boolean7 = longStream4.isParallel();
        org.junit.Assert.assertNull(sourceMap2);
        org.junit.Assert.assertNotNull(longStream4);
        org.junit.Assert.assertNotNull(compilerMap5);
        org.junit.Assert.assertNotNull(doubleStream6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1736");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label1 = builder0.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto2 = builder0.buildPartial();
        boolean boolean3 = builder0.hasLabel();
        boolean boolean4 = builder0.hasTypeName();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + label1 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label1.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1737");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label4 = builder3.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = builder0.addExtension(builder3);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder6 = builder0.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder7 = builder6.getOptionsBuilder();
        java.io.InputStream inputStream8 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions9 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream8);
        boolean boolean10 = enumOptions9.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder11 = builder7.mergeFrom(enumOptions9);
        com.google.protobuf.UnknownFieldSet unknownFieldSet12 = builder7.getUnknownFields();
        com.google.protobuf.CodedOutputStream codedOutputStream13 = null;
        unknownFieldSet12.writeTo(codedOutputStream13);
        byte[] byteArray15 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite16 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions17 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray15, extensionRegistryLite16);
        com.google.protobuf.CodedOutputStream codedOutputStream20 = com.google.protobuf.CodedOutputStream.newInstance(byteArray15, (int) (short) 0, 1);
        com.google.protobuf.CodedOutputStream codedOutputStream23 = com.google.protobuf.CodedOutputStream.newInstance(byteArray15, (int) ' ', 0);
        java.io.InputStream inputStream24 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location25 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream24);
        boolean boolean26 = location25.isInitialized();
        codedOutputStream23.writeGroupNoTag((com.google.protobuf.MessageLite) location25);
        unknownFieldSet12.writeAsMessageSetTo(codedOutputStream23);
        byte[] byteArray29 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite30 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions31 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray29, extensionRegistryLite30);
        com.google.protobuf.CodedOutputStream codedOutputStream34 = com.google.protobuf.CodedOutputStream.newInstance(byteArray29, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite35 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto36 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray29, extensionRegistryLite35);
        com.google.protobuf.CodedOutputStream codedOutputStream37 = com.google.protobuf.CodedOutputStream.newInstance(byteArray29);
        unknownFieldSet12.writeAsMessageSetTo(codedOutputStream37);
        com.google.protobuf.UninitializedMessageException uninitializedMessageException39 = new com.google.protobuf.UninitializedMessageException((com.google.protobuf.MessageLite) unknownFieldSet12);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList40 = uninitializedMessageException39.getMissingFields();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + label4 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label4.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(enumOptions9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(unknownFieldSet12);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(methodOptions17);
        org.junit.Assert.assertNotNull(codedOutputStream20);
        org.junit.Assert.assertNotNull(codedOutputStream23);
        org.junit.Assert.assertNotNull(location25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(methodOptions31);
        org.junit.Assert.assertNotNull(codedOutputStream34);
        org.junit.Assert.assertNotNull(fileDescriptorProto36);
        org.junit.Assert.assertNotNull(codedOutputStream37);
    }

    @Test
    public void test1738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1738");
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto0 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.getDefaultInstance();
        boolean boolean1 = methodDescriptorProto0.hasOutputType();
        com.google.protobuf.CodedOutputStream codedOutputStream2 = null;
        methodDescriptorProto0.writeTo(codedOutputStream2);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder4 = methodDescriptorProto0.toBuilder();
        java.time.Instant instant5 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset9);
        java.time.OffsetDateTime offsetDateTime11 = java.time.OffsetDateTime.ofInstant(instant5, (java.time.ZoneId) zoneOffset9);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZoneOffset zoneOffset20 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset20);
        java.time.ZonedDateTime zonedDateTime22 = java.time.ZonedDateTime.of(localDateTime16, (java.time.ZoneId) zoneOffset20);
        java.time.Clock clock23 = java.time.Clock.fixed(instant5, (java.time.ZoneId) zoneOffset20);
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.now(clock23);
        java.time.LocalDate localDate25 = java.time.LocalDate.now(clock23);
        com.google.protobuf.Descriptors.Descriptor descriptor26 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto27 = descriptor26.toProto();
        boolean boolean28 = descriptorProto27.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList29 = descriptorProto27.getNestedTypeList();
        int int30 = descriptorProto27.getExtensionRangeCount();
        boolean boolean31 = localDate25.equals((java.lang.Object) descriptorProto27);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder32 = descriptorProto27.newBuilderForType();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList33 = builder32.getNestedTypeList();
        com.google.protobuf.UnknownFieldSet unknownFieldSet34 = builder32.getUnknownFields();
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder35 = builder32.addEnumTypeBuilder();
        com.google.protobuf.ByteString byteString36 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite37 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto38 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteString36, extensionRegistryLite37);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder39 = builder35.mergeFrom(byteString36);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder40 = builder4.mergeFrom(byteString36);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto41 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.parseFrom(byteString36);
        org.junit.Assert.assertNotNull(methodDescriptorProto0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(offsetDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zoneOffset20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zonedDateTime22);
        org.junit.Assert.assertNotNull(clock23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(descriptor26);
        org.junit.Assert.assertNotNull(descriptorProto27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(descriptorProtoList33);
        org.junit.Assert.assertNotNull(unknownFieldSet34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(byteString36);
        org.junit.Assert.assertNotNull(fileDescriptorProto38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(methodDescriptorProto41);
    }

    @Test
    public void test1739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1739");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean5 = node4.isStringKey();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(0, node4);
        node4.setIsSyntheticBlock(false);
        boolean boolean9 = node4.isThrow();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1740");
        byte[] byteArray0 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions2 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray0, extensionRegistryLite1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite3 = null;
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto enumDescriptorProto4 = com.google.protobuf.DescriptorProtos.EnumDescriptorProto.parseFrom(byteArray0, extensionRegistryLite3);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder5 = enumDescriptorProto4.newBuilderForType();
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto enumDescriptorProto6 = builder5.build();
        java.lang.String str7 = builder5.getName();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(methodOptions2);
        org.junit.Assert.assertNotNull(enumDescriptorProto4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(enumDescriptorProto6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test1741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1741");
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder1 = builder0.clearCcGenericServices();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder2 = builder0.clearJavaOuterClassname();
        com.google.protobuf.Descriptors.Descriptor descriptor3 = builder0.getDescriptorForType();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(descriptor3);
    }

    @Test
    public void test1742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1742");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label4 = builder3.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = builder0.addExtension(builder3);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder6 = builder0.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder7 = builder6.getOptionsBuilder();
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder8 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output10 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream12 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output10, (int) 'a');
        byte[] byteArray13 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite14 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions15 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray13, extensionRegistryLite14);
        output10.write(byteArray13);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder17 = builder8.mergeFrom(byteArray13);
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder18 = builder7.mergeFrom(byteArray13);
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor19 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj21 = builder7.getRepeatedField(fieldDescriptor19, (-2));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + label4 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label4.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(output10);
        org.junit.Assert.assertNotNull(codedOutputStream12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(methodOptions15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test1743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1743");
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap0 = java.nio.charset.Charset.availableCharsets();
        java.net.URISyntaxException uRISyntaxException3 = new java.net.URISyntaxException("hi!", "");
        boolean boolean4 = strMap0.containsKey((java.lang.Object) "");
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap5 = java.nio.charset.Charset.availableCharsets();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean10 = strMap5.containsValue((java.lang.Object) '4');
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap11 = java.nio.charset.Charset.availableCharsets();
        java.net.URISyntaxException uRISyntaxException14 = new java.net.URISyntaxException("hi!", "");
        boolean boolean15 = strMap11.containsKey((java.lang.Object) "");
        int int16 = strMap11.size();
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap17 = java.nio.charset.Charset.availableCharsets();
        java.util.Set<java.lang.String> strSet18 = strMap17.keySet();
        java.util.Set<java.lang.String> strSet19 = strMap17.keySet();
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap20 = java.nio.charset.Charset.availableCharsets();
        java.net.URISyntaxException uRISyntaxException23 = new java.net.URISyntaxException("hi!", "");
        boolean boolean24 = strMap20.containsKey((java.lang.Object) "");
        int int25 = strMap20.size();
        com.google.common.collect.ImmutableList<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>> strMapList26 = com.google.common.collect.ImmutableList.of(strMap0, strMap5, strMap11, strMap17, strMap20);
        java.lang.String str27 = strMap0.firstKey();
        org.junit.Assert.assertNotNull(strMap0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 171 + "'", int16 == 171);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 171 + "'", int25 == 171);
        org.junit.Assert.assertNotNull(strMapList26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Big5" + "'", str27, "Big5");
    }

    @Test
    public void test1744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1744");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo sourceCodeInfo2 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.parseFrom(inputStream0, extensionRegistryLite1);
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder3 = sourceCodeInfo2.newBuilderForType();
        com.google.protobuf.UnknownFieldSet unknownFieldSet4 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder5 = builder3.setUnknownFields(unknownFieldSet4);
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.Builder builder7 = builder3.addLocationBuilder(0);
        java.io.File file10 = null;
        java.io.File file11 = java.io.File.createTempFile("hi!", "ISO", file10);
        boolean boolean14 = file11.setWritable(false, false);
        java.net.URI uRI15 = file11.toURI();
        java.io.PrintStream printStream16 = new java.io.PrintStream(file11);
        printStream16.print((int) (byte) 0);
        printStream16.print(10.0d);
        printStream16.close();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        boolean boolean28 = strSet26.isEmpty();
        java.nio.ByteBuffer byteBuffer30 = java.nio.ByteBuffer.allocate(100);
        boolean boolean31 = strSet26.equals((java.lang.Object) byteBuffer30);
        java.nio.IntBuffer intBuffer32 = byteBuffer30.asIntBuffer();
        double double33 = byteBuffer30.getDouble();
        java.nio.ByteBuffer byteBuffer36 = byteBuffer30.put((int) (short) 1, (byte) 1);
        byte[] byteArray37 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite38 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions39 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray37, extensionRegistryLite38);
        com.google.protobuf.CodedOutputStream codedOutputStream42 = com.google.protobuf.CodedOutputStream.newInstance(byteArray37, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite43 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto44 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray37, extensionRegistryLite43);
        com.google.protobuf.CodedOutputStream codedOutputStream45 = com.google.protobuf.CodedOutputStream.newInstance(byteArray37);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer30.get(byteArray37);
        printStream16.write(byteArray37, (int) '/', (int) (byte) 1);
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.Builder builder50 = builder7.mergeFrom(byteArray37);
        int int51 = builder50.getPathCount();
        java.time.Instant instant52 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset56 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime57 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset56);
        java.time.OffsetDateTime offsetDateTime58 = java.time.OffsetDateTime.ofInstant(instant52, (java.time.ZoneId) zoneOffset56);
        java.time.ZoneOffset zoneOffset62 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime63 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset62);
        java.time.ZoneOffset zoneOffset67 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime68 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset67);
        java.time.ZonedDateTime zonedDateTime69 = java.time.ZonedDateTime.of(localDateTime63, (java.time.ZoneId) zoneOffset67);
        java.time.Clock clock70 = java.time.Clock.fixed(instant52, (java.time.ZoneId) zoneOffset67);
        java.time.LocalDateTime localDateTime71 = java.time.LocalDateTime.now(clock70);
        java.time.LocalDate localDate72 = java.time.LocalDate.now(clock70);
        com.google.protobuf.Descriptors.Descriptor descriptor73 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto74 = descriptor73.toProto();
        boolean boolean75 = descriptorProto74.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList76 = descriptorProto74.getNestedTypeList();
        int int77 = descriptorProto74.getExtensionRangeCount();
        boolean boolean78 = localDate72.equals((java.lang.Object) descriptorProto74);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder79 = descriptorProto74.newBuilderForType();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList80 = builder79.getNestedTypeList();
        com.google.protobuf.UnknownFieldSet unknownFieldSet81 = builder79.getUnknownFields();
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder82 = builder79.addEnumTypeBuilder();
        byte[] byteArray83 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite84 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions85 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray83, extensionRegistryLite84);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite86 = null;
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto enumDescriptorProto87 = com.google.protobuf.DescriptorProtos.EnumDescriptorProto.parseFrom(byteArray83, extensionRegistryLite86);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto enumDescriptorProto88 = enumDescriptorProto87.getDefaultInstanceForType();
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder89 = builder79.addEnumType(enumDescriptorProto88);
        com.google.protobuf.ByteString byteString90 = enumDescriptorProto88.toByteString();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.Builder builder91 = builder50.mergeFrom(byteString90);
        com.google.protobuf.UnknownFieldSet unknownFieldSet92 = builder91.getUnknownFields();
        org.junit.Assert.assertNotNull(sourceCodeInfo2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(file11);
        org.junit.Assert.assertEquals(file11.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file11.toString(), "/tmp/hi!7680394068189461130ISO");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(uRI15);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(intBuffer32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(methodOptions39);
        org.junit.Assert.assertNotNull(codedOutputStream42);
        org.junit.Assert.assertNotNull(fileDescriptorProto44);
        org.junit.Assert.assertNotNull(codedOutputStream45);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertNotNull(zoneOffset56);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(offsetDateTime58);
        org.junit.Assert.assertNotNull(zoneOffset62);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(zoneOffset67);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(zonedDateTime69);
        org.junit.Assert.assertNotNull(clock70);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertNotNull(descriptor73);
        org.junit.Assert.assertNotNull(descriptorProto74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(descriptorProtoList80);
        org.junit.Assert.assertNotNull(unknownFieldSet81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(byteArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray83), "[]");
        org.junit.Assert.assertNotNull(methodOptions85);
        org.junit.Assert.assertNotNull(enumDescriptorProto87);
        org.junit.Assert.assertNotNull(enumDescriptorProto88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(byteString90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(unknownFieldSet92);
    }

    @Test
    public void test1745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1745");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label0 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL;
        int int1 = label0.getNumber();
        int int2 = label0.getNumber();
        org.junit.Assert.assertTrue("'" + label0 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label0.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    }

    @Test
    public void test1746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1746");
        com.google.protobuf.Descriptors.Descriptor descriptor0 = com.google.protobuf.DescriptorProtos.UninterpretedOption.NamePart.Builder.getDescriptor();
        org.junit.Assert.assertNotNull(descriptor0);
    }

    @Test
    public void test1747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1747");
        java.util.Date date3 = new java.util.Date((int) (byte) -1, 43, 16384);
        date3.setMinutes(256);
        int int6 = date3.getHours();
        org.junit.Assert.assertEquals(date3.toString(), "Mon Jun 09 04:16:00 UTC 1947");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
    }

    @Test
    public void test1748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1748");
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative0 = com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE;
        org.junit.Assert.assertTrue("'" + jSTypeNative0 + "' != '" + com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE + "'", jSTypeNative0.equals(com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_OBJECT_FUNCTION_TYPE));
    }

    @Test
    public void test1749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1749");
        int int0 = com.google.protobuf.DescriptorProtos.EnumOptions.UNINTERPRETED_OPTION_FIELD_NUMBER;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 999 + "'", int0 == 999);
    }

    @Test
    public void test1750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1750");
        java.lang.CharSequence charSequence0 = null;
        java.time.format.DateTimeFormatter dateTimeFormatter1 = java.time.format.DateTimeFormatter.ISO_DATE;
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDate localDate2 = java.time.LocalDate.parse(charSequence0, dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: text");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
    }

    @Test
    public void test1751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1751");
        java.time.Period period0 = java.time.Period.ZERO;
        java.time.chrono.ChronoPeriod chronoPeriod1 = period0.normalized();
        int int2 = period0.getYears();
        java.time.Period period3 = period0.negated();
        boolean boolean4 = period3.isNegative();
        long long5 = period3.toTotalMonths();
        java.time.Period period6 = java.time.Period.from((java.time.temporal.TemporalAmount) period3);
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(chronoPeriod1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(period6);
    }

    @Test
    public void test1752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1752");
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions0 = com.google.protobuf.DescriptorProtos.EnumValueOptions.getDefaultInstance();
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder1 = com.google.protobuf.DescriptorProtos.EnumValueOptions.newBuilder(enumValueOptions0);
        java.io.InputStream inputStream2 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder3 = builder1.mergeFrom(inputStream2);
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder4 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder5 = builder4.clearCcGenericServices();
        boolean boolean6 = builder4.isInitialized();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder8 = builder4.setCcGenericServices(true);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder9 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label10 = builder9.getLabel();
        com.google.protobuf.ByteString byteString11 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder12 = builder9.mergeFrom(byteString11);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite13 = null;
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder14 = builder8.mergeFrom(byteString11, extensionRegistryLite13);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite15 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions16 = com.google.protobuf.DescriptorProtos.EnumValueOptions.parseFrom(byteString11, extensionRegistryLite15);
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder17 = builder3.mergeFrom(enumValueOptions16);
        java.io.InputStream inputStream18 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder19 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output21 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream23 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output21, (int) 'a');
        byte[] byteArray24 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite25 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions26 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray24, extensionRegistryLite25);
        output21.write(byteArray24);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder28 = builder19.mergeFrom(byteArray24);
        java.util.List<com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder> builderList29 = builder28.getUninterpretedOptionBuilderList();
        java.util.List<com.google.protobuf.DescriptorProtos.UninterpretedOption> uninterpretedOptionList30 = builder28.getUninterpretedOptionList();
        java.io.InputStream inputStream31 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions32 = com.google.protobuf.DescriptorProtos.EnumValueOptions.getDefaultInstance();
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder33 = com.google.protobuf.DescriptorProtos.EnumValueOptions.newBuilder(enumValueOptions32);
        java.io.InputStream inputStream34 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder35 = builder33.mergeFrom(inputStream34);
        com.google.protobuf.ByteString byteString36 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto37 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.parseFrom(byteString36);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite38 = null;
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto enumValueDescriptorProto39 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.parseFrom(byteString36, extensionRegistryLite38);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite40 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions41 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteString36, extensionRegistryLite40);
        java.io.InputStream inputStream42 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite43 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location44 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream42, extensionRegistryLite43);
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder45 = builder35.mergeFrom(byteString36, extensionRegistryLite43);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder46 = builder28.mergeFrom(inputStream31, extensionRegistryLite43);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean47 = builder3.mergeDelimitedFrom(inputStream18, extensionRegistryLite43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(enumValueOptions0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + label10 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label10.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(byteString11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(enumValueOptions16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(output21);
        org.junit.Assert.assertNotNull(codedOutputStream23);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[]");
        org.junit.Assert.assertNotNull(methodOptions26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builderList29);
        org.junit.Assert.assertNotNull(uninterpretedOptionList30);
        org.junit.Assert.assertNotNull(enumValueOptions32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(byteString36);
        org.junit.Assert.assertNotNull(methodDescriptorProto37);
        org.junit.Assert.assertNotNull(enumValueDescriptorProto39);
        org.junit.Assert.assertNotNull(methodOptions41);
        org.junit.Assert.assertNotNull(extensionRegistryLite43);
        org.junit.Assert.assertNotNull(location44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test1753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1753");
        int int1 = com.google.protobuf.CodedOutputStream.computeRawVarint64Size((long) (byte) 0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
    }

    @Test
    public void test1754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1754");
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder1 = builder0.clearCcGenericServices();
        boolean boolean2 = builder0.isInitialized();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder4 = builder0.setCcGenericServices(true);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder5 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label6 = builder5.getLabel();
        com.google.protobuf.ByteString byteString7 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder8 = builder5.mergeFrom(byteString7);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite9 = null;
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder10 = builder4.mergeFrom(byteString7, extensionRegistryLite9);
        com.google.protobuf.DescriptorProtos.FileOptions fileOptions11 = builder10.getDefaultInstanceForType();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder12 = fileOptions11.newBuilderForType();
        java.io.InputStream inputStream13 = null;
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder14 = builder12.mergeFrom(inputStream13);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + label6 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label6.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(byteString7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(fileOptions11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test1755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1755");
        int int1 = com.google.protobuf.CodedOutputStream.computeInt64SizeNoTag(1645437268288L);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 6 + "'", int1 == 6);
    }

    @Test
    public void test1756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1756");
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto1 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.getDefaultInstance();
        int int2 = com.google.protobuf.CodedOutputStream.computeMessageSetExtensionSize((int) (byte) -1, (com.google.protobuf.MessageLite) methodDescriptorProto1);
        com.google.protobuf.CodedOutputStream codedOutputStream3 = null;
        methodDescriptorProto1.writeTo(codedOutputStream3);
        boolean boolean5 = methodDescriptorProto1.hasInputType();
        org.junit.Assert.assertNotNull(methodDescriptorProto1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1757");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean5 = node4.isStringKey();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(0, node4);
        node4.setIsSyntheticBlock(false);
        boolean boolean9 = node4.isDec();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1758");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset10);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.of(localDateTime11, (java.time.ZoneId) zoneOffset15);
        java.time.Clock clock18 = java.time.Clock.fixed(instant0, (java.time.ZoneId) zoneOffset15);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.now(clock18);
        java.time.LocalDate localDate20 = java.time.LocalDate.now(clock18);
        com.google.protobuf.Descriptors.Descriptor descriptor21 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto22 = descriptor21.toProto();
        boolean boolean23 = descriptorProto22.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList24 = descriptorProto22.getNestedTypeList();
        int int25 = descriptorProto22.getExtensionRangeCount();
        boolean boolean26 = localDate20.equals((java.lang.Object) descriptorProto22);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder27 = descriptorProto22.newBuilderForType();
        java.util.List<com.google.protobuf.DescriptorProtos.FieldDescriptorProto> fieldDescriptorProtoList28 = builder27.getExtensionList();
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.Builder builder29 = com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.newBuilder();
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder30 = builder27.addExtensionRange(builder29);
        com.google.protobuf.Descriptors.Descriptor descriptor31 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto32 = descriptor31.toProto();
        boolean boolean33 = descriptorProto32.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList34 = descriptorProto32.getNestedTypeList();
        int int35 = descriptorProto32.getExtensionCount();
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder36 = builder30.mergeFrom(descriptorProto32);
        boolean boolean37 = builder30.hasName();
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto39 = builder30.getNestedType((int) '+');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 43");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(clock18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(descriptor21);
        org.junit.Assert.assertNotNull(descriptorProto22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(fieldDescriptorProtoList28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(descriptor31);
        org.junit.Assert.assertNotNull(descriptorProto32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test1759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1759");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean8 = strSet6.isEmpty();
        java.nio.ByteBuffer byteBuffer10 = java.nio.ByteBuffer.allocate(100);
        boolean boolean11 = strSet6.equals((java.lang.Object) byteBuffer10);
        java.nio.IntBuffer intBuffer12 = byteBuffer10.asIntBuffer();
        java.nio.CharBuffer charBuffer14 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer16 = charBuffer14.put('a');
        char[] charArray18 = new char[] { '4' };
        java.nio.CharBuffer charBuffer19 = charBuffer16.get(charArray18);
        java.nio.charset.CoderResult coderResult21 = charsetDecoder1.decode(byteBuffer10, charBuffer16, true);
        boolean boolean22 = coderResult21.isOverflow();
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intBuffer12);
        org.junit.Assert.assertNotNull(charBuffer14);
        org.junit.Assert.assertNotNull(charBuffer16);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer19);
        org.junit.Assert.assertNotNull(coderResult21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test1760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1760");
        java.time.Duration duration1 = java.time.Duration.ofDays(52L);
        java.time.Duration duration3 = duration1.minusHours((long) 97);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime8 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset7);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime13 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset12);
        java.time.ZonedDateTime zonedDateTime14 = java.time.ZonedDateTime.of(localDateTime8, (java.time.ZoneId) zoneOffset12);
        java.time.ZonedDateTime zonedDateTime16 = zonedDateTime14.withYear((int) (short) 1);
        java.time.temporal.ChronoField chronoField17 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit18 = chronoField17.getBaseUnit();
        java.time.ZonedDateTime zonedDateTime19 = zonedDateTime14.truncatedTo(temporalUnit18);
        java.time.Duration duration20 = temporalUnit18.getDuration();
        long long21 = duration20.toDays();
        java.time.Duration duration22 = duration20.negated();
        java.time.Instant instant23 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset27 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset27);
        java.time.OffsetDateTime offsetDateTime29 = java.time.OffsetDateTime.ofInstant(instant23, (java.time.ZoneId) zoneOffset27);
        java.time.ZoneOffset zoneOffset33 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime34 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset33);
        java.time.ZoneOffset zoneOffset38 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime39 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset38);
        java.time.ZonedDateTime zonedDateTime40 = java.time.ZonedDateTime.of(localDateTime34, (java.time.ZoneId) zoneOffset38);
        java.time.Clock clock41 = java.time.Clock.fixed(instant23, (java.time.ZoneId) zoneOffset38);
        java.time.ZoneOffset zoneOffset45 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime46 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset45);
        java.time.ZoneOffset zoneOffset50 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime51 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset50);
        java.time.ZonedDateTime zonedDateTime52 = java.time.ZonedDateTime.of(localDateTime46, (java.time.ZoneId) zoneOffset50);
        java.time.ZonedDateTime zonedDateTime54 = zonedDateTime52.withYear((int) (short) 1);
        java.time.temporal.ChronoField chronoField55 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit56 = chronoField55.getBaseUnit();
        java.time.ZonedDateTime zonedDateTime57 = zonedDateTime52.truncatedTo(temporalUnit56);
        java.time.Duration duration58 = temporalUnit56.getDuration();
        long long59 = duration58.toDays();
        java.time.Duration duration61 = duration58.minusDays(999L);
        java.time.Clock clock62 = java.time.Clock.tick(clock41, duration58);
        int int63 = duration20.compareTo(duration58);
        java.time.Duration duration64 = duration1.minus(duration58);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(zonedDateTime14);
        org.junit.Assert.assertNotNull(zonedDateTime16);
        org.junit.Assert.assertTrue("'" + chronoField17 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField17.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit18 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit18.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(zonedDateTime19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(zoneOffset27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(offsetDateTime29);
        org.junit.Assert.assertNotNull(zoneOffset33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(zoneOffset38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(zonedDateTime40);
        org.junit.Assert.assertNotNull(clock41);
        org.junit.Assert.assertNotNull(zoneOffset45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(zoneOffset50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(zonedDateTime52);
        org.junit.Assert.assertNotNull(zonedDateTime54);
        org.junit.Assert.assertTrue("'" + chronoField55 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField55.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit56 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit56.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(zonedDateTime57);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(clock62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(duration64);
    }

    @Test
    public void test1761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1761");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.of(localDateTime4, (java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime10.withYear((int) (short) 1);
        java.time.OffsetDateTime offsetDateTime13 = zonedDateTime10.toOffsetDateTime();
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset17);
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset22);
        java.time.ZonedDateTime zonedDateTime24 = java.time.ZonedDateTime.of(localDateTime18, (java.time.ZoneId) zoneOffset22);
        java.time.temporal.ChronoField chronoField25 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        boolean boolean26 = localDateTime18.isSupported((java.time.temporal.TemporalField) chronoField25);
        java.time.LocalDateTime localDateTime28 = localDateTime18.plusHours((long) 9);
        java.time.format.DateTimeFormatter dateTimeFormatter29 = java.time.format.DateTimeFormatter.ISO_DATE;
        java.lang.String str30 = localDateTime18.format(dateTimeFormatter29);
        java.lang.String str31 = offsetDateTime13.format(dateTimeFormatter29);
        java.util.Locale locale35 = new java.util.Locale("", "NUMBER 52.0 0", "hi!");
        java.time.format.DecimalStyle decimalStyle36 = java.time.format.DecimalStyle.of(locale35);
        java.time.ZoneOffset zoneOffset40 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime41 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset40);
        java.time.ZoneOffset zoneOffset45 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime46 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset45);
        java.time.ZonedDateTime zonedDateTime47 = java.time.ZonedDateTime.of(localDateTime41, (java.time.ZoneId) zoneOffset45);
        java.time.ZonedDateTime zonedDateTime49 = zonedDateTime47.withYear((int) (short) 1);
        boolean boolean50 = decimalStyle36.equals((java.lang.Object) (short) 1);
        java.time.format.DecimalStyle decimalStyle52 = decimalStyle36.withNegativeSign('#');
        char char53 = decimalStyle52.getPositiveSign();
        java.time.format.DateTimeFormatter dateTimeFormatter54 = dateTimeFormatter29.withDecimalStyle(decimalStyle52);
        java.time.temporal.ChronoField chronoField55 = java.time.temporal.ChronoField.OFFSET_SECONDS;
        java.time.Instant instant56 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset60 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime61 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset60);
        java.time.OffsetDateTime offsetDateTime62 = java.time.OffsetDateTime.ofInstant(instant56, (java.time.ZoneId) zoneOffset60);
        java.time.OffsetDateTime offsetDateTime64 = offsetDateTime62.minusDays((long) (short) 100);
        java.lang.String str65 = offsetDateTime62.toString();
        java.time.temporal.ChronoField chronoField66 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        int int67 = offsetDateTime62.get((java.time.temporal.TemporalField) chronoField66);
        java.time.OffsetDateTime offsetDateTime69 = offsetDateTime62.withDayOfMonth((int) (short) 10);
        java.time.ZoneOffset zoneOffset70 = java.time.ZoneOffset.MAX;
        java.time.OffsetDateTime offsetDateTime71 = offsetDateTime69.withOffsetSameLocal(zoneOffset70);
        boolean boolean72 = chronoField55.isSupportedBy((java.time.temporal.TemporalAccessor) zoneOffset70);
        java.time.format.DateTimeFormatter dateTimeFormatter73 = dateTimeFormatter29.withZone((java.time.ZoneId) zoneOffset70);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(offsetDateTime13);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zonedDateTime24);
        org.junit.Assert.assertTrue("'" + chronoField25 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField25.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1970-01-01" + "'", str30, "1970-01-01");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1970-01-01+00:00:52" + "'", str31, "1970-01-01+00:00:52");
        org.junit.Assert.assertEquals(locale35.toString(), "_NUMBER 52.0 0_hi!");
        org.junit.Assert.assertNotNull(decimalStyle36);
        org.junit.Assert.assertNotNull(zoneOffset40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(zoneOffset45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(zonedDateTime47);
        org.junit.Assert.assertNotNull(zonedDateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(decimalStyle52);
        org.junit.Assert.assertTrue("'" + char53 + "' != '" + '+' + "'", char53 == '+');
        org.junit.Assert.assertNotNull(dateTimeFormatter54);
        org.junit.Assert.assertTrue("'" + chronoField55 + "' != '" + java.time.temporal.ChronoField.OFFSET_SECONDS + "'", chronoField55.equals(java.time.temporal.ChronoField.OFFSET_SECONDS));
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertNotNull(zoneOffset60);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(offsetDateTime62);
        org.junit.Assert.assertNotNull(offsetDateTime64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "1970-01-01T00:00:52+00:00:52" + "'", str65, "1970-01-01T00:00:52+00:00:52");
        org.junit.Assert.assertTrue("'" + chronoField66 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField66.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 12 + "'", int67 == 12);
        org.junit.Assert.assertNotNull(offsetDateTime69);
        org.junit.Assert.assertNotNull(zoneOffset70);
        org.junit.Assert.assertNotNull(offsetDateTime71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter73);
    }

    @Test
    public void test1762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1762");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MIN;
        int int1 = localDateTime0.getSecond();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
    }

    @Test
    public void test1763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1763");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        boolean boolean3 = builder0.hasPackage();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder4 = builder0.clearOptions();
        com.google.protobuf.DescriptorProtos.FileOptions fileOptions5 = builder4.getOptions();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(fileOptions5);
    }

    @Test
    public void test1764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1764");
        java.util.logging.Level level0 = java.util.logging.Level.WARNING;
        java.lang.String str1 = level0.toString();
        java.util.logging.Level level2 = java.util.logging.Level.SEVERE;
        boolean boolean3 = level0.equals((java.lang.Object) level2);
        org.junit.Assert.assertNotNull(level0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "WARNING" + "'", str1, "WARNING");
        org.junit.Assert.assertNotNull(level2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1765");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) (-1));
        java.time.Instant instant3 = instant1.plusMillis((long) (byte) -1);
        java.time.temporal.ChronoField chronoField4 = java.time.temporal.ChronoField.NANO_OF_DAY;
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.ValueRange valueRange5 = instant3.range((java.time.temporal.TemporalField) chronoField4);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: NanoOfDay");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertTrue("'" + chronoField4 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField4.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
    }

    @Test
    public void test1766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1766");
        java.io.File file2 = null;
        java.io.File file3 = java.io.File.createTempFile("hi!", "ISO", file2);
        boolean boolean6 = file3.setWritable(false, false);
        java.net.URI uRI7 = file3.toURI();
        java.io.File file8 = file3.getCanonicalFile();
        boolean boolean9 = file8.canRead();
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file3.toString(), "/tmp/hi!5091164355091418014ISO");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(uRI7);
        org.junit.Assert.assertNotNull(file8);
        org.junit.Assert.assertEquals(file8.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file8.toString(), "/tmp/hi!5091164355091418014ISO");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test1767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1767");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        typePosition0.setPositionInformation((int) ':', 50, 64, (int) (short) 10);
        typePosition0.setPositionInformation(12, (int) (byte) 100, 4095, (int) (short) 0);
        int int11 = typePosition0.getEndLine();
        // The following exception was thrown during execution in test generation
        try {
            typePosition0.setPositionInformation(6, (int) (byte) -1, (int) (byte) 1, (int) '\000');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Recorded bad position information?start-line: 6?end-line: 1");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4095 + "'", int11 == 4095);
    }

    @Test
    public void test1768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1768");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType4 = jSTypeRegistry2.createObjectType(objectType3);
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.jstype.ObjectType objectType8 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry7.createObjectType(objectType8);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair10 = objectType4.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType9);
        boolean boolean11 = objectType9.isNoResolvedType();
        com.google.javascript.rhino.ErrorReporter errorReporter12 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter12, false);
        com.google.javascript.rhino.jstype.ObjectType objectType15 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType16 = jSTypeRegistry14.createObjectType(objectType15);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        com.google.javascript.rhino.jstype.ObjectType objectType20 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType21 = jSTypeRegistry19.createObjectType(objectType20);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair22 = objectType16.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType21);
        com.google.javascript.rhino.Node node23 = objectType16.getRootNode();
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24, false);
        com.google.javascript.rhino.jstype.ObjectType objectType27 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType28 = jSTypeRegistry26.createObjectType(objectType27);
        com.google.javascript.rhino.ErrorReporter errorReporter29 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter29, false);
        com.google.javascript.rhino.jstype.ObjectType objectType32 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType33 = jSTypeRegistry31.createObjectType(objectType32);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair34 = objectType28.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType33);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue35 = objectType16.testForEquality((com.google.javascript.rhino.jstype.JSType) objectType28);
        boolean boolean36 = objectType9.isSubtype((com.google.javascript.rhino.jstype.JSType) objectType16);
        com.google.javascript.rhino.jstype.ObjectType objectType37 = null;
        // The following exception was thrown during execution in test generation
        try {
            objectType9.matchConstraint(objectType37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectType4);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertNotNull(typePair10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objectType16);
        org.junit.Assert.assertNotNull(objectType21);
        org.junit.Assert.assertNotNull(typePair22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(objectType28);
        org.junit.Assert.assertNotNull(objectType33);
        org.junit.Assert.assertNotNull(typePair34);
        org.junit.Assert.assertNotNull(ternaryValue35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test1769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1769");
        byte[] byteArray0 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions2 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray0, extensionRegistryLite1);
        com.google.protobuf.CodedInputStream codedInputStream5 = com.google.protobuf.CodedInputStream.newInstance(byteArray0, 16, (int) 'a');
        int int7 = codedInputStream5.pushLimit((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.ByteString byteString8 = codedInputStream5.readBytes();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 16");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(methodOptions2);
        org.junit.Assert.assertNotNull(codedInputStream5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 97 + "'", int7 == 97);
    }

    @Test
    public void test1770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1770");
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap0 = java.nio.charset.Charset.availableCharsets();
        java.net.URISyntaxException uRISyntaxException3 = new java.net.URISyntaxException("hi!", "");
        boolean boolean4 = strMap0.containsKey((java.lang.Object) "");
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap5 = java.nio.charset.Charset.availableCharsets();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean10 = strMap5.containsValue((java.lang.Object) '4');
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap11 = java.nio.charset.Charset.availableCharsets();
        java.net.URISyntaxException uRISyntaxException14 = new java.net.URISyntaxException("hi!", "");
        boolean boolean15 = strMap11.containsKey((java.lang.Object) "");
        int int16 = strMap11.size();
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap17 = java.nio.charset.Charset.availableCharsets();
        java.util.Set<java.lang.String> strSet18 = strMap17.keySet();
        java.util.Set<java.lang.String> strSet19 = strMap17.keySet();
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap20 = java.nio.charset.Charset.availableCharsets();
        java.net.URISyntaxException uRISyntaxException23 = new java.net.URISyntaxException("hi!", "");
        boolean boolean24 = strMap20.containsKey((java.lang.Object) "");
        int int25 = strMap20.size();
        com.google.common.collect.ImmutableList<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>> strMapList26 = com.google.common.collect.ImmutableList.of(strMap0, strMap5, strMap11, strMap17, strMap20);
        // The following exception was thrown during execution in test generation
        try {
            java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap29 = strMap20.subMap("MessageOptions", "java.nio.HeapFloatBuffer[pos=6 lim=6 cap=6]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromKey > toKey");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 171 + "'", int16 == 171);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 171 + "'", int25 == 171);
        org.junit.Assert.assertNotNull(strMapList26);
    }

    @Test
    public void test1771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1771");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.BASIC_ISO_DATE;
        java.time.ZoneId zoneId1 = dateTimeFormatter0.getZone();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(zoneId1);
    }

    @Test
    public void test1772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1772");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.of(localDateTime4, (java.time.ZoneId) zoneOffset8);
        java.time.temporal.ChronoField chronoField12 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit13 = chronoField12.getBaseUnit();
        java.time.LocalDateTime localDateTime14 = localDateTime4.plus((long) 1970, temporalUnit13);
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset18);
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset23);
        java.time.ZonedDateTime zonedDateTime25 = java.time.ZonedDateTime.of(localDateTime19, (java.time.ZoneId) zoneOffset23);
        java.time.temporal.ChronoField chronoField27 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit28 = chronoField27.getBaseUnit();
        java.time.LocalDateTime localDateTime29 = localDateTime19.plus((long) 1970, temporalUnit28);
        java.time.LocalDateTime localDateTime31 = localDateTime19.withHour((int) (short) 1);
        java.time.ZoneOffset zoneOffset33 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.OffsetDateTime offsetDateTime34 = java.time.OffsetDateTime.of(localDateTime19, zoneOffset33);
        long long35 = localDateTime4.toEpochSecond(zoneOffset33);
        java.time.ZoneOffset zoneOffset39 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime40 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset39);
        java.time.ZoneOffset zoneOffset44 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime45 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset44);
        java.time.ZonedDateTime zonedDateTime46 = java.time.ZonedDateTime.of(localDateTime40, (java.time.ZoneId) zoneOffset44);
        java.time.ZonedDateTime zonedDateTime48 = zonedDateTime46.minusSeconds((long) '#');
        java.time.ZonedDateTime zonedDateTime50 = zonedDateTime46.minusYears((long) ' ');
        java.time.temporal.Temporal temporal51 = zoneOffset33.adjustInto((java.time.temporal.Temporal) zonedDateTime50);
        int int52 = zoneOffset33.getTotalSeconds();
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertTrue("'" + chronoField12 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField12.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit13 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit13.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zonedDateTime25);
        org.junit.Assert.assertTrue("'" + chronoField27 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField27.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit28 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit28.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(zoneOffset33);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 100L + "'", long35 == 100L);
        org.junit.Assert.assertNotNull(zoneOffset39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(zoneOffset44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(zonedDateTime46);
        org.junit.Assert.assertNotNull(zonedDateTime48);
        org.junit.Assert.assertNotNull(zonedDateTime50);
        org.junit.Assert.assertNotNull(temporal51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 52 + "'", int52 == 52);
    }

    @Test
    public void test1773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1773");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        int int5 = localDateTime4.getYear();
        java.time.Instant instant6 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset10);
        java.time.OffsetDateTime offsetDateTime12 = java.time.OffsetDateTime.ofInstant(instant6, (java.time.ZoneId) zoneOffset10);
        java.time.Instant instant13 = localDateTime4.toInstant(zoneOffset10);
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset17);
        int int19 = localDateTime18.getYear();
        java.time.Instant instant20 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset24);
        java.time.OffsetDateTime offsetDateTime26 = java.time.OffsetDateTime.ofInstant(instant20, (java.time.ZoneId) zoneOffset24);
        java.time.Instant instant27 = localDateTime18.toInstant(zoneOffset24);
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime33 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset32);
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset37);
        java.time.ZonedDateTime zonedDateTime39 = java.time.ZonedDateTime.of(localDateTime33, (java.time.ZoneId) zoneOffset37);
        java.time.temporal.ChronoField chronoField41 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit42 = chronoField41.getBaseUnit();
        java.time.LocalDateTime localDateTime43 = localDateTime33.plus((long) 1970, temporalUnit42);
        java.time.ZoneOffset zoneOffset48 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime49 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset48);
        java.time.ZoneOffset zoneOffset53 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime54 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset53);
        java.time.ZonedDateTime zonedDateTime55 = java.time.ZonedDateTime.of(localDateTime49, (java.time.ZoneId) zoneOffset53);
        java.time.temporal.ChronoField chronoField57 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit58 = chronoField57.getBaseUnit();
        java.time.LocalDateTime localDateTime59 = localDateTime49.plus((long) 1970, temporalUnit58);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime60 = localDateTime43.minus((long) 43, temporalUnit58);
        java.time.Instant instant61 = instant27.plus((long) 16384, temporalUnit58);
        java.time.LocalDateTime localDateTime62 = localDateTime4.truncatedTo(temporalUnit58);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(offsetDateTime12);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1970 + "'", int19 == 1970);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(offsetDateTime26);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(zonedDateTime39);
        org.junit.Assert.assertTrue("'" + chronoField41 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField41.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit42 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit42.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(zoneOffset48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(zoneOffset53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(zonedDateTime55);
        org.junit.Assert.assertTrue("'" + chronoField57 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField57.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit58 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit58.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime60);
        org.junit.Assert.assertNotNull(instant61);
        org.junit.Assert.assertNotNull(localDateTime62);
    }

    @Test
    public void test1774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1774");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("1970-03-24T02:02:32");
        char[] charArray7 = new char[] { '4', ' ', 'a', 'a', ':' };
        printWriter1.println(charArray7);
        java.security.SignatureException signatureException10 = new java.security.SignatureException();
        java.security.SignatureException signatureException11 = new java.security.SignatureException();
        java.security.SignatureException signatureException12 = new java.security.SignatureException();
        java.security.SignatureException signatureException13 = new java.security.SignatureException();
        java.security.SignatureException signatureException14 = new java.security.SignatureException();
        java.security.SignatureException[] signatureExceptionArray15 = new java.security.SignatureException[] { signatureException10, signatureException11, signatureException12, signatureException13, signatureException14 };
        com.google.common.collect.ImmutableSet<java.security.SignatureException> signatureExceptionSet16 = com.google.common.collect.ImmutableSet.of(signatureExceptionArray15);
        java.io.PrintWriter printWriter17 = printWriter1.format("ISO", (java.lang.Object[]) signatureExceptionArray15);
        char[] charArray22 = new char[] { '#', ' ', ':', ' ' };
        java.nio.CharBuffer charBuffer23 = java.nio.CharBuffer.wrap(charArray22);
        printWriter1.println(charArray22);
        printWriter1.print('4');
        // The following exception was thrown during execution in test generation
        try {
            java.io.Writer writer30 = printWriter1.append((java.lang.CharSequence) "{2106658412}", 8, 42);
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 42");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "4 aa:");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "4 aa:");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[4,  , a, a, :]");
        org.junit.Assert.assertNotNull(signatureExceptionArray15);
        org.junit.Assert.assertNotNull(signatureExceptionSet16);
        org.junit.Assert.assertNotNull(printWriter17);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "# : ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "# : ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[#,  , :,  ]");
        org.junit.Assert.assertNotNull(charBuffer23);
    }

    @Test
    public void test1775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1775");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto enumValueDescriptorProto1 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.parseFrom(inputStream0);
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder2 = enumValueDescriptorProto1.toBuilder();
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor3 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int4 = builder2.getRepeatedFieldCount(fieldDescriptor3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(enumValueDescriptorProto1);
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test1776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1776");
        byte[] byteArray0 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions2 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray0, extensionRegistryLite1);
        com.google.protobuf.CodedOutputStream codedOutputStream5 = com.google.protobuf.CodedOutputStream.newInstance(byteArray0, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite6 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto7 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray0, extensionRegistryLite6);
        com.google.protobuf.CodedOutputStream codedOutputStream8 = com.google.protobuf.CodedOutputStream.newInstance(byteArray0);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder9 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label10 = builder9.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto11 = builder9.buildPartial();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder12 = fieldDescriptorProto11.newBuilderForType();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder13 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto11);
        java.io.File file16 = null;
        java.io.File file17 = java.io.File.createTempFile("hi!", "ISO", file16);
        boolean boolean20 = file17.setWritable(false, false);
        java.net.URI uRI21 = file17.toURI();
        java.io.PrintStream printStream22 = new java.io.PrintStream(file17);
        printStream22.print((int) (byte) 0);
        printStream22.print(10.0d);
        printStream22.close();
        java.lang.String[] strArray31 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet32 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet32, strArray31);
        boolean boolean34 = strSet32.isEmpty();
        java.nio.ByteBuffer byteBuffer36 = java.nio.ByteBuffer.allocate(100);
        boolean boolean37 = strSet32.equals((java.lang.Object) byteBuffer36);
        java.nio.IntBuffer intBuffer38 = byteBuffer36.asIntBuffer();
        double double39 = byteBuffer36.getDouble();
        java.nio.ByteBuffer byteBuffer42 = byteBuffer36.put((int) (short) 1, (byte) 1);
        byte[] byteArray43 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite44 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions45 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray43, extensionRegistryLite44);
        com.google.protobuf.CodedOutputStream codedOutputStream48 = com.google.protobuf.CodedOutputStream.newInstance(byteArray43, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite49 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto50 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray43, extensionRegistryLite49);
        com.google.protobuf.CodedOutputStream codedOutputStream51 = com.google.protobuf.CodedOutputStream.newInstance(byteArray43);
        java.nio.ByteBuffer byteBuffer52 = byteBuffer36.get(byteArray43);
        printStream22.write(byteArray43, (int) '/', (int) (byte) 1);
        java.io.InputStream inputStream56 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite57 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location58 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream56, extensionRegistryLite57);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder59 = builder13.mergeFrom(byteArray43, extensionRegistryLite57);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto60 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray0, extensionRegistryLite57);
        com.google.protobuf.ByteString byteString61 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite62 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions63 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(byteString61, extensionRegistryLite62);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder64 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label65 = builder64.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto66 = builder64.buildPartial();
        int int67 = fieldDescriptorProto66.getSerializedSize();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder68 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto66);
        java.io.InputStream inputStream69 = null;
        java.io.InputStream inputStream70 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite71 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location72 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream70, extensionRegistryLite71);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder73 = builder68.mergeFrom(inputStream69, extensionRegistryLite71);
        com.google.javascript.jscomp.FunctionInformationMap functionInformationMap74 = com.google.javascript.jscomp.FunctionInformationMap.parseFrom(byteString61, extensionRegistryLite71);
        com.google.protobuf.DescriptorProtos.SourceCodeInfo sourceCodeInfo75 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.parseFrom(byteArray0, extensionRegistryLite71);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(methodOptions2);
        org.junit.Assert.assertNotNull(codedOutputStream5);
        org.junit.Assert.assertNotNull(fileDescriptorProto7);
        org.junit.Assert.assertNotNull(codedOutputStream8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + label10 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label10.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(file17);
        org.junit.Assert.assertEquals(file17.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file17.toString(), "/tmp/hi!4964892125406328379ISO");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(uRI21);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(intBuffer38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 0.0d + "'", double39 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(methodOptions45);
        org.junit.Assert.assertNotNull(codedOutputStream48);
        org.junit.Assert.assertNotNull(fileDescriptorProto50);
        org.junit.Assert.assertNotNull(codedOutputStream51);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertNotNull(extensionRegistryLite57);
        org.junit.Assert.assertNotNull(location58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(fileDescriptorProto60);
        org.junit.Assert.assertNotNull(byteString61);
        org.junit.Assert.assertNotNull(enumOptions63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertTrue("'" + label65 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label65.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(extensionRegistryLite71);
        org.junit.Assert.assertNotNull(location72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(functionInformationMap74);
        org.junit.Assert.assertNotNull(sourceCodeInfo75);
    }

    @Test
    public void test1777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1777");
        int int0 = com.google.javascript.jscomp.FunctionInformationMap.MODULE_FIELD_NUMBER;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 101 + "'", int0 == 101);
    }

    @Test
    public void test1778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1778");
        java.time.Duration duration1 = java.time.Duration.ofMillis((long) 3);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test1779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1779");
        java.util.stream.Stream.Builder<com.google.common.collect.ImmutableSet<java.lang.Appendable>> appendableSetBuilder0 = java.util.stream.Stream.builder();
        org.junit.Assert.assertNotNull(appendableSetBuilder0);
    }

    @Test
    public void test1780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1780");
        com.google.javascript.jscomp.SourceFile.Builder builder0 = new com.google.javascript.jscomp.SourceFile.Builder();
        java.nio.charset.Charset charset1 = java.nio.charset.Charset.defaultCharset();
        boolean boolean2 = charset1.canEncode();
        java.nio.charset.CharsetEncoder charsetEncoder3 = charset1.newEncoder();
        com.google.javascript.jscomp.SourceFile.Builder builder4 = builder0.withCharset(charset1);
        com.google.javascript.jscomp.SourceFile.Builder builder6 = builder4.withOriginalPath("Mon Jun 09 00:00:00 UTC 1947");
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(charsetEncoder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test1781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1781");
        java.time.Period period0 = java.time.Period.ZERO;
        java.time.chrono.ChronoPeriod chronoPeriod1 = period0.normalized();
        java.time.temporal.ChronoField chronoField2 = java.time.temporal.ChronoField.EPOCH_DAY;
        java.time.Instant instant3 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime8 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset7);
        java.time.OffsetDateTime offsetDateTime9 = java.time.OffsetDateTime.ofInstant(instant3, (java.time.ZoneId) zoneOffset7);
        java.time.temporal.ValueRange valueRange10 = chronoField2.rangeRefinedBy((java.time.temporal.TemporalAccessor) offsetDateTime9);
        java.time.temporal.Temporal temporal11 = period0.subtractFrom((java.time.temporal.Temporal) offsetDateTime9);
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetDateTime offsetDateTime13 = offsetDateTime9.minusHours(28147497671065600L);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for Year (valid values -999999999 - 999999999): -3211051293981");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(chronoPeriod1);
        org.junit.Assert.assertTrue("'" + chronoField2 + "' != '" + java.time.temporal.ChronoField.EPOCH_DAY + "'", chronoField2.equals(java.time.temporal.ChronoField.EPOCH_DAY));
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(valueRange10);
        org.junit.Assert.assertNotNull(temporal11);
    }

    @Test
    public void test1782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1782");
        java.io.PrintStream printStream0 = null;
        com.google.javascript.jscomp.Compiler compiler1 = new com.google.javascript.jscomp.Compiler(printStream0);
        com.google.javascript.jscomp.SourceMap sourceMap2 = compiler1.getSourceMap();
        java.util.stream.LongStream longStream4 = java.util.stream.LongStream.of((long) (-1));
        com.google.common.collect.ImmutableMap<com.google.javascript.jscomp.Compiler, java.util.stream.LongStream> compilerMap5 = com.google.common.collect.ImmutableMap.of(compiler1, longStream4);
        java.util.stream.DoubleStream doubleStream6 = longStream4.asDoubleStream();
        java.util.OptionalDouble optionalDouble7 = doubleStream6.findAny();
        java.lang.String str8 = optionalDouble7.toString();
        com.google.javascript.rhino.ErrorReporter errorReporter9 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry11 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter9, false);
        com.google.javascript.rhino.jstype.ObjectType objectType12 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType13 = jSTypeRegistry11.createObjectType(objectType12);
        com.google.javascript.rhino.ErrorReporter errorReporter14 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry16 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter14, false);
        com.google.javascript.rhino.jstype.ObjectType objectType17 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType18 = jSTypeRegistry16.createObjectType(objectType17);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair19 = objectType13.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType18);
        java.lang.String str20 = objectType18.getDisplayName();
        com.google.javascript.rhino.ErrorReporter errorReporter21 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter21, false);
        com.google.javascript.rhino.jstype.ObjectType objectType24 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType25 = jSTypeRegistry23.createObjectType(objectType24);
        com.google.javascript.rhino.ErrorReporter errorReporter26 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter26, false);
        com.google.javascript.rhino.jstype.ObjectType objectType29 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType30 = jSTypeRegistry28.createObjectType(objectType29);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair31 = objectType25.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType30);
        boolean boolean32 = objectType30.isTemplateType();
        com.google.javascript.rhino.jstype.JSType jSType33 = objectType18.getLeastSupertype((com.google.javascript.rhino.jstype.JSType) objectType30);
        boolean boolean34 = optionalDouble7.equals((java.lang.Object) jSType33);
        org.junit.Assert.assertNull(sourceMap2);
        org.junit.Assert.assertNotNull(longStream4);
        org.junit.Assert.assertNotNull(compilerMap5);
        org.junit.Assert.assertNotNull(doubleStream6);
        org.junit.Assert.assertNotNull(optionalDouble7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "OptionalDouble[-1.0]" + "'", str8, "OptionalDouble[-1.0]");
        org.junit.Assert.assertNotNull(objectType13);
        org.junit.Assert.assertNotNull(objectType18);
        org.junit.Assert.assertNotNull(typePair19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(objectType25);
        org.junit.Assert.assertNotNull(objectType30);
        org.junit.Assert.assertNotNull(typePair31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(jSType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test1783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1783");
        java.time.ZonedDateTime zonedDateTime0 = java.time.ZonedDateTime.now();
        org.junit.Assert.assertNotNull(zonedDateTime0);
    }

    @Test
    public void test1784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1784");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MAX;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset9);
        java.time.ZonedDateTime zonedDateTime11 = java.time.ZonedDateTime.of(localDateTime5, (java.time.ZoneId) zoneOffset9);
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset16);
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset21);
        java.time.ZonedDateTime zonedDateTime23 = java.time.ZonedDateTime.of(localDateTime17, (java.time.ZoneId) zoneOffset21);
        java.time.ZonedDateTime zonedDateTime25 = zonedDateTime23.withYear((int) (short) 1);
        java.time.temporal.ChronoField chronoField26 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit27 = chronoField26.getBaseUnit();
        java.time.ZonedDateTime zonedDateTime28 = zonedDateTime23.truncatedTo(temporalUnit27);
        java.time.LocalDateTime localDateTime29 = localDateTime5.plus(999L, temporalUnit27);
        java.time.LocalDateTime localDateTime30 = localDateTime0.truncatedTo(temporalUnit27);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zonedDateTime23);
        org.junit.Assert.assertNotNull(zonedDateTime25);
        org.junit.Assert.assertTrue("'" + chronoField26 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField26.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit27 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit27.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(zonedDateTime28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
    }

    @Test
    public void test1785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1785");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.of(localDateTime4, (java.time.ZoneId) zoneOffset8);
        java.time.temporal.ChronoField chronoField12 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit13 = chronoField12.getBaseUnit();
        java.time.LocalDateTime localDateTime14 = localDateTime4.plus((long) 1970, temporalUnit13);
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset19);
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset24);
        java.time.ZonedDateTime zonedDateTime26 = java.time.ZonedDateTime.of(localDateTime20, (java.time.ZoneId) zoneOffset24);
        java.time.temporal.ChronoField chronoField28 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit29 = chronoField28.getBaseUnit();
        java.time.LocalDateTime localDateTime30 = localDateTime20.plus((long) 1970, temporalUnit29);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime31 = localDateTime14.minus((long) 43, temporalUnit29);
        java.time.LocalDateTime localDateTime33 = localDateTime14.minusHours((long) 1024);
        java.time.LocalDateTime localDateTime35 = localDateTime33.plusHours((long) 0);
        java.time.Month month37 = java.time.Month.APRIL;
        java.time.LocalDateTime localDateTime43 = java.time.LocalDateTime.of(37, month37, 10, (int) (short) 10, 4, 37, 1);
        boolean boolean44 = localDateTime35.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime43);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertTrue("'" + chronoField12 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField12.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit13 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit13.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertTrue("'" + chronoField28 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField28.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit29 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit29.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + month37 + "' != '" + java.time.Month.APRIL + "'", month37.equals(java.time.Month.APRIL));
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test1786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1786");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        int int5 = localDateTime4.getYear();
        java.time.LocalDate localDate6 = localDateTime4.toLocalDate();
        java.time.temporal.ChronoField chronoField7 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_MONTH;
        long long8 = localDateTime4.getLong((java.time.temporal.TemporalField) chronoField7);
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset13);
        int int15 = localDateTime14.getYear();
        java.time.Instant instant16 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset20 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset20);
        java.time.OffsetDateTime offsetDateTime22 = java.time.OffsetDateTime.ofInstant(instant16, (java.time.ZoneId) zoneOffset20);
        java.time.Instant instant23 = localDateTime14.toInstant(zoneOffset20);
        java.time.ZoneOffset zoneOffset28 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset28);
        java.time.ZoneOffset zoneOffset33 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime34 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset33);
        java.time.ZonedDateTime zonedDateTime35 = java.time.ZonedDateTime.of(localDateTime29, (java.time.ZoneId) zoneOffset33);
        java.time.temporal.ChronoField chronoField37 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit38 = chronoField37.getBaseUnit();
        java.time.LocalDateTime localDateTime39 = localDateTime29.plus((long) 1970, temporalUnit38);
        java.time.ZoneOffset zoneOffset44 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime45 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset44);
        java.time.ZoneOffset zoneOffset49 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime50 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset49);
        java.time.ZonedDateTime zonedDateTime51 = java.time.ZonedDateTime.of(localDateTime45, (java.time.ZoneId) zoneOffset49);
        java.time.temporal.ChronoField chronoField53 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit54 = chronoField53.getBaseUnit();
        java.time.LocalDateTime localDateTime55 = localDateTime45.plus((long) 1970, temporalUnit54);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime56 = localDateTime39.minus((long) 43, temporalUnit54);
        java.time.Instant instant57 = instant23.plus((long) 16384, temporalUnit54);
        java.time.ZoneOffset zoneOffset61 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime62 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset61);
        java.time.ZoneOffset zoneOffset66 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime67 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset66);
        java.time.ZonedDateTime zonedDateTime68 = java.time.ZonedDateTime.of(localDateTime62, (java.time.ZoneId) zoneOffset66);
        java.time.ZonedDateTime zonedDateTime70 = zonedDateTime68.withHour(16);
        java.time.ZoneOffset zoneOffset74 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime75 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset74);
        java.time.ZoneOffset zoneOffset79 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime80 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset79);
        java.time.ZonedDateTime zonedDateTime81 = java.time.ZonedDateTime.of(localDateTime75, (java.time.ZoneId) zoneOffset79);
        java.time.ZonedDateTime zonedDateTime83 = zonedDateTime81.withYear((int) (short) 1);
        java.time.temporal.ChronoField chronoField84 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit85 = chronoField84.getBaseUnit();
        java.time.ZonedDateTime zonedDateTime86 = zonedDateTime81.truncatedTo(temporalUnit85);
        long long87 = instant23.until((java.time.temporal.Temporal) zonedDateTime70, temporalUnit85);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime88 = localDateTime4.plus(57700L, temporalUnit85);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + chronoField7 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_MONTH + "'", chronoField7.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_MONTH));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(zoneOffset20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(offsetDateTime22);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(zoneOffset28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zoneOffset33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(zonedDateTime35);
        org.junit.Assert.assertTrue("'" + chronoField37 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField37.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit38 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit38.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(zoneOffset44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(zoneOffset49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(zonedDateTime51);
        org.junit.Assert.assertTrue("'" + chronoField53 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField53.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit54 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit54.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime56);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertNotNull(zoneOffset61);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(zoneOffset66);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(zonedDateTime68);
        org.junit.Assert.assertNotNull(zonedDateTime70);
        org.junit.Assert.assertNotNull(zoneOffset74);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(zoneOffset79);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(zonedDateTime81);
        org.junit.Assert.assertNotNull(zonedDateTime83);
        org.junit.Assert.assertTrue("'" + chronoField84 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField84.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit85 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit85.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(zonedDateTime86);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 16L + "'", long87 == 16L);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime88);
    }

    @Test
    public void test1787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1787");
        com.google.protobuf.Descriptors.Descriptor descriptor0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto1 = descriptor0.toProto();
        boolean boolean2 = descriptorProto1.isInitialized();
        com.google.protobuf.DescriptorProtos.MessageOptions messageOptions3 = descriptorProto1.getOptions();
        com.google.protobuf.DescriptorProtos.MessageOptions.Builder builder4 = messageOptions3.newBuilderForType();
        com.google.protobuf.DescriptorProtos.MessageOptions.Builder builder6 = builder4.setMessageSetWireFormat(false);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder7 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output9 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream11 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output9, (int) 'a');
        byte[] byteArray12 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite13 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions14 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray12, extensionRegistryLite13);
        output9.write(byteArray12);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder16 = builder7.mergeFrom(byteArray12);
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions17 = builder7.buildPartial();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder18 = builder7.addUninterpretedOptionBuilder();
        com.google.protobuf.DescriptorProtos.UninterpretedOption uninterpretedOption19 = builder18.buildPartial();
        java.lang.String str20 = uninterpretedOption19.getIdentifierValue();
        int int21 = uninterpretedOption19.getNameCount();
        com.google.protobuf.DescriptorProtos.MessageOptions.Builder builder22 = builder6.addUninterpretedOption(uninterpretedOption19);
        com.google.protobuf.DescriptorProtos.UninterpretedOption uninterpretedOption23 = uninterpretedOption19.getDefaultInstanceForType();
        boolean boolean24 = uninterpretedOption19.hasDoubleValue();
        org.junit.Assert.assertNotNull(descriptor0);
        org.junit.Assert.assertNotNull(descriptorProto1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(messageOptions3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(output9);
        org.junit.Assert.assertNotNull(codedOutputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(methodOptions14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(methodOptions17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(uninterpretedOption19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(uninterpretedOption23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1788");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label1 = builder0.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto2 = builder0.buildPartial();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder3 = builder0.clear();
        com.google.protobuf.ByteString.Output output5 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream7 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output5, (int) 'a');
        byte[] byteArray8 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite9 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions10 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray8, extensionRegistryLite9);
        output5.write(byteArray8);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite14 = null;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder15 = builder3.mergeFrom(byteArray8, 97, (int) (short) 0, extensionRegistryLite14);
        boolean boolean16 = builder3.hasType();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + label1 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label1.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(output5);
        org.junit.Assert.assertNotNull(codedOutputStream7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(methodOptions10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1789");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions1 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream0);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.UninterpretedOptionOrBuilder uninterpretedOptionOrBuilder3 = enumOptions1.getUninterpretedOptionOrBuilder(2);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(enumOptions1);
    }

    @Test
    public void test1790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1790");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("1970-03-24T02:02:32");
        char[] charArray7 = new char[] { '4', ' ', 'a', 'a', ':' };
        printWriter1.println(charArray7);
        java.security.SignatureException signatureException10 = new java.security.SignatureException();
        java.security.SignatureException signatureException11 = new java.security.SignatureException();
        java.security.SignatureException signatureException12 = new java.security.SignatureException();
        java.security.SignatureException signatureException13 = new java.security.SignatureException();
        java.security.SignatureException signatureException14 = new java.security.SignatureException();
        java.security.SignatureException[] signatureExceptionArray15 = new java.security.SignatureException[] { signatureException10, signatureException11, signatureException12, signatureException13, signatureException14 };
        com.google.common.collect.ImmutableSet<java.security.SignatureException> signatureExceptionSet16 = com.google.common.collect.ImmutableSet.of(signatureExceptionArray15);
        java.io.PrintWriter printWriter17 = printWriter1.format("ISO", (java.lang.Object[]) signatureExceptionArray15);
        char[] charArray22 = new char[] { '#', ' ', ':', ' ' };
        java.nio.CharBuffer charBuffer23 = java.nio.CharBuffer.wrap(charArray22);
        printWriter1.println(charArray22);
        printWriter1.print('4');
        printWriter1.println((float) 86399999L);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "4 aa:");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "4 aa:");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[4,  , a, a, :]");
        org.junit.Assert.assertNotNull(signatureExceptionArray15);
        org.junit.Assert.assertNotNull(signatureExceptionSet16);
        org.junit.Assert.assertNotNull(printWriter17);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "# : ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "# : ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[#,  , :,  ]");
        org.junit.Assert.assertNotNull(charBuffer23);
    }

    @Test
    public void test1791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1791");
        com.google.protobuf.Descriptors.Descriptor descriptor0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto1 = descriptor0.toProto();
        boolean boolean2 = descriptorProto1.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList3 = descriptorProto1.getNestedTypeList();
        int int4 = descriptorProto1.getFieldCount();
        org.junit.Assert.assertNotNull(descriptor0);
        org.junit.Assert.assertNotNull(descriptorProto1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
    }

    @Test
    public void test1792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1792");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy5 = null;
        compilerOptions0.variableRenaming = variableRenamingPolicy5;
        compilerOptions0.setSummaryDetailLevel(999);
        boolean boolean9 = compilerOptions0.getInferTypes();
        boolean boolean10 = compilerOptions0.ideMode;
        compilerOptions0.setGroupVariableDeclarations(true);
        compilerOptions0.setCheckCaja(false);
        compilerOptions0.setDefineToBooleanLiteral("/tmp/hi!4516073975838273390ISO", false);
        compilerOptions0.setRecordFunctionInformation(false);
        compilerOptions0.setTweakToDoubleLiteral("Unknown class name", (double) 3);
        org.junit.Assert.assertNotNull(errorFormat3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1793");
        int int0 = com.google.protobuf.DescriptorProtos.UninterpretedOption.NAME_FIELD_NUMBER;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 2 + "'", int0 == 2);
    }

    @Test
    public void test1794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1794");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset9);
        java.time.ZonedDateTime zonedDateTime11 = java.time.ZonedDateTime.of(localDateTime5, (java.time.ZoneId) zoneOffset9);
        java.time.temporal.ChronoField chronoField13 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit14 = chronoField13.getBaseUnit();
        java.time.LocalDateTime localDateTime15 = localDateTime5.plus((long) 1970, temporalUnit14);
        java.time.LocalDateTime localDateTime17 = localDateTime5.withHour((int) (short) 1);
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.OffsetDateTime offsetDateTime20 = java.time.OffsetDateTime.of(localDateTime5, zoneOffset19);
        java.time.OffsetTime offsetTime21 = java.time.OffsetTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset19);
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime26 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset25);
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset30);
        java.time.ZonedDateTime zonedDateTime32 = java.time.ZonedDateTime.of(localDateTime26, (java.time.ZoneId) zoneOffset30);
        java.time.temporal.ChronoField chronoField34 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit35 = chronoField34.getBaseUnit();
        java.time.LocalDateTime localDateTime36 = localDateTime26.plus((long) 1970, temporalUnit35);
        java.time.ZoneOffset zoneOffset41 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime42 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset41);
        java.time.ZoneOffset zoneOffset46 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime47 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset46);
        java.time.ZonedDateTime zonedDateTime48 = java.time.ZonedDateTime.of(localDateTime42, (java.time.ZoneId) zoneOffset46);
        java.time.temporal.ChronoField chronoField50 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit51 = chronoField50.getBaseUnit();
        java.time.LocalDateTime localDateTime52 = localDateTime42.plus((long) 1970, temporalUnit51);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime53 = localDateTime36.minus((long) 43, temporalUnit51);
        java.time.LocalDateTime localDateTime55 = localDateTime36.minusHours((long) 1024);
        java.time.ZoneOffset zoneOffset59 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime60 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset59);
        java.time.ZoneOffset zoneOffset64 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime65 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset64);
        java.time.ZonedDateTime zonedDateTime66 = java.time.ZonedDateTime.of(localDateTime60, (java.time.ZoneId) zoneOffset64);
        java.time.temporal.ChronoField chronoField67 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        boolean boolean68 = localDateTime60.isSupported((java.time.temporal.TemporalField) chronoField67);
        int int69 = localDateTime55.get((java.time.temporal.TemporalField) chronoField67);
        int int70 = offsetTime21.get((java.time.temporal.TemporalField) chronoField67);
        boolean boolean71 = chronoField67.isDateBased();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + chronoField13 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField13.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit14 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit14.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(offsetTime21);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(zonedDateTime32);
        org.junit.Assert.assertTrue("'" + chronoField34 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField34.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit35 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit35.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(zoneOffset41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(zoneOffset46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(zonedDateTime48);
        org.junit.Assert.assertTrue("'" + chronoField50 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField50.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit51 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit51.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(zoneOffset59);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(zoneOffset64);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(zonedDateTime66);
        org.junit.Assert.assertTrue("'" + chronoField67 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField67.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 10 + "'", int69 == 10);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 12 + "'", int70 == 12);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test1795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1795");
        com.google.protobuf.Descriptors.Descriptor descriptor0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto1 = descriptor0.toProto();
        boolean boolean2 = descriptorProto1.isInitialized();
        com.google.protobuf.DescriptorProtos.MessageOptions messageOptions3 = descriptorProto1.getOptions();
        com.google.protobuf.DescriptorProtos.MessageOptions.Builder builder4 = messageOptions3.newBuilderForType();
        com.google.protobuf.DescriptorProtos.MessageOptions.Builder builder6 = builder4.setMessageSetWireFormat(false);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder7 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output9 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream11 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output9, (int) 'a');
        byte[] byteArray12 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite13 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions14 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray12, extensionRegistryLite13);
        output9.write(byteArray12);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder16 = builder7.mergeFrom(byteArray12);
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions17 = builder7.buildPartial();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder18 = builder7.addUninterpretedOptionBuilder();
        com.google.protobuf.DescriptorProtos.UninterpretedOption uninterpretedOption19 = builder18.buildPartial();
        java.lang.String str20 = uninterpretedOption19.getIdentifierValue();
        int int21 = uninterpretedOption19.getNameCount();
        com.google.protobuf.DescriptorProtos.MessageOptions.Builder builder22 = builder6.addUninterpretedOption(uninterpretedOption19);
        com.google.protobuf.DescriptorProtos.UninterpretedOption uninterpretedOption23 = uninterpretedOption19.getDefaultInstanceForType();
        boolean boolean24 = uninterpretedOption19.hasAggregateValue();
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.UninterpretedOption.NamePartOrBuilder namePartOrBuilder26 = uninterpretedOption19.getNameOrBuilder(18);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 18");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptor0);
        org.junit.Assert.assertNotNull(descriptorProto1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(messageOptions3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(output9);
        org.junit.Assert.assertNotNull(codedOutputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(methodOptions14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(methodOptions17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(uninterpretedOption19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(uninterpretedOption23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1796");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label1 = builder0.getLabel();
        com.google.protobuf.ByteString byteString2 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder3 = builder0.mergeFrom(byteString2);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite4 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location5 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(byteString2, extensionRegistryLite4);
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto6 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.parseFrom(byteString2);
        com.google.javascript.jscomp.CompilerOptions compilerOptions7 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions7.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat10 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions7.errorFormat = errorFormat10;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy12 = null;
        compilerOptions7.variableRenaming = variableRenamingPolicy12;
        compilerOptions7.setSummaryDetailLevel(999);
        boolean boolean16 = compilerOptions7.getInferTypes();
        boolean boolean17 = compilerOptions7.ideMode;
        compilerOptions7.setGroupVariableDeclarations(true);
        compilerOptions7.setCheckCaja(false);
        boolean boolean22 = byteString2.equals((java.lang.Object) compilerOptions7);
        compilerOptions7.removeUnusedLocalVars = false;
        compilerOptions7.inlineFunctions = true;
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + label1 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label1.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(byteString2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(location5);
        org.junit.Assert.assertNotNull(serviceDescriptorProto6);
        org.junit.Assert.assertNotNull(errorFormat10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1797");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset10);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.of(localDateTime11, (java.time.ZoneId) zoneOffset15);
        java.time.Clock clock18 = java.time.Clock.fixed(instant0, (java.time.ZoneId) zoneOffset15);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.now(clock18);
        java.time.LocalDate localDate20 = java.time.LocalDate.now(clock18);
        com.google.protobuf.Descriptors.Descriptor descriptor21 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto22 = descriptor21.toProto();
        boolean boolean23 = descriptorProto22.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList24 = descriptorProto22.getNestedTypeList();
        int int25 = descriptorProto22.getExtensionRangeCount();
        boolean boolean26 = localDate20.equals((java.lang.Object) descriptorProto22);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder27 = descriptorProto22.newBuilderForType();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList28 = builder27.getNestedTypeList();
        com.google.protobuf.DescriptorProtos.MessageOptions messageOptions29 = builder27.getOptions();
        int int30 = messageOptions29.getSerializedSize();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(clock18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(descriptor21);
        org.junit.Assert.assertNotNull(descriptorProto22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(descriptorProtoList28);
        org.junit.Assert.assertNotNull(messageOptions29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test1798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1798");
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative0 = com.google.javascript.rhino.jstype.JSTypeNative.ERROR_TYPE;
        org.junit.Assert.assertTrue("'" + jSTypeNative0 + "' != '" + com.google.javascript.rhino.jstype.JSTypeNative.ERROR_TYPE + "'", jSTypeNative0.equals(com.google.javascript.rhino.jstype.JSTypeNative.ERROR_TYPE));
    }

    @Test
    public void test1799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1799");
        com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder builder0 = com.google.javascript.jscomp.FunctionInformationMap.Entry.newBuilder();
        com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder builder1 = builder0.clearModuleName();
        boolean boolean2 = builder1.hasModuleName();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1800");
        com.google.javascript.jscomp.FunctionInformationMap.Module.Builder builder0 = com.google.javascript.jscomp.FunctionInformationMap.Module.newBuilder();
        java.lang.String str1 = builder0.getCompiledSource();
        com.google.javascript.jscomp.CompilerOptions compilerOptions2 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions2.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat5 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions2.errorFormat = errorFormat5;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy7 = null;
        compilerOptions2.variableRenaming = variableRenamingPolicy7;
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode9 = compilerOptions2.getTracerMode();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder10 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder12 = builder10.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder13 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label14 = builder13.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder15 = builder10.addExtension(builder13);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder16 = builder10.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder17 = builder16.getOptionsBuilder();
        java.io.InputStream inputStream18 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions19 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream18);
        boolean boolean20 = enumOptions19.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder21 = builder17.mergeFrom(enumOptions19);
        byte[] byteArray22 = enumOptions19.toByteArray();
        compilerOptions2.setInputPropertyMapSerialized(byteArray22);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite24 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location25 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(byteArray22, extensionRegistryLite24);
        com.google.javascript.jscomp.FunctionInformationMap.Module.Builder builder28 = builder0.mergeFrom(byteArray22, 0, 0);
        boolean boolean29 = builder28.hasName();
        com.google.javascript.jscomp.FunctionInformationMap.Module.Builder builder31 = builder28.setCompiledSource("\ub300\ud55c\ubbfc\uad6d");
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor32 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj33 = builder31.getField(fieldDescriptor32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(errorFormat5);
        org.junit.Assert.assertTrue("'" + tracerMode9 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode9.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + label14 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label14.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(enumOptions19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(location25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test1801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1801");
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.Builder builder0 = com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.newBuilder();
        java.io.InputStream inputStream1 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite2 = null;
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.Builder builder3 = builder0.mergeFrom(inputStream1, extensionRegistryLite2);
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.Builder builder4 = builder0.clearEnd();
        java.util.Map<com.google.protobuf.Descriptors.FieldDescriptor, java.lang.Object> fieldDescriptorMap5 = builder0.getAllFields();
        int int6 = builder0.getEnd();
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange extensionRange7 = builder0.getDefaultInstanceForType();
        boolean boolean8 = extensionRange7.isInitialized();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(fieldDescriptorMap5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(extensionRange7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test1802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1802");
        com.google.javascript.jscomp.FunctionInformationMap.Module.Builder builder0 = com.google.javascript.jscomp.FunctionInformationMap.Module.newBuilder();
        java.lang.String str1 = builder0.getCompiledSource();
        com.google.javascript.jscomp.CompilerOptions compilerOptions2 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions2.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat5 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions2.errorFormat = errorFormat5;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy7 = null;
        compilerOptions2.variableRenaming = variableRenamingPolicy7;
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode9 = compilerOptions2.getTracerMode();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder10 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder12 = builder10.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder13 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label14 = builder13.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder15 = builder10.addExtension(builder13);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder16 = builder10.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder17 = builder16.getOptionsBuilder();
        java.io.InputStream inputStream18 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions19 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream18);
        boolean boolean20 = enumOptions19.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder21 = builder17.mergeFrom(enumOptions19);
        byte[] byteArray22 = enumOptions19.toByteArray();
        compilerOptions2.setInputPropertyMapSerialized(byteArray22);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite24 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location25 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(byteArray22, extensionRegistryLite24);
        com.google.javascript.jscomp.FunctionInformationMap.Module.Builder builder28 = builder0.mergeFrom(byteArray22, 0, 0);
        boolean boolean29 = builder28.hasName();
        com.google.javascript.jscomp.FunctionInformationMap.Module.Builder builder31 = builder28.setCompiledSource("\ub300\ud55c\ubbfc\uad6d");
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor32 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.Message.Builder builder33 = builder31.newBuilderForField(fieldDescriptor32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(errorFormat5);
        org.junit.Assert.assertTrue("'" + tracerMode9 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode9.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + label14 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label14.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(enumOptions19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(location25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test1803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1803");
        com.google.protobuf.ByteString.Output output1 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream3 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output1, (int) 'a');
        byte[] byteArray4 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite5 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions6 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray4, extensionRegistryLite5);
        output1.write(byteArray4);
        com.google.protobuf.CodedInputStream codedInputStream10 = com.google.protobuf.CodedInputStream.newInstance(byteArray4, 21, 4);
        // The following exception was thrown during execution in test generation
        try {
            int int11 = codedInputStream10.readFixed32();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 21");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(output1);
        org.junit.Assert.assertNotNull(codedOutputStream3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(methodOptions6);
        org.junit.Assert.assertNotNull(codedInputStream10);
    }

    @Test
    public void test1804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1804");
        java.time.temporal.ChronoField chronoField0 = java.time.temporal.ChronoField.ALIGNED_DAY_OF_WEEK_IN_YEAR;
        org.junit.Assert.assertTrue("'" + chronoField0 + "' != '" + java.time.temporal.ChronoField.ALIGNED_DAY_OF_WEEK_IN_YEAR + "'", chronoField0.equals(java.time.temporal.ChronoField.ALIGNED_DAY_OF_WEEK_IN_YEAR));
    }

    @Test
    public void test1805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1805");
        com.google.protobuf.Descriptors.Descriptor descriptor0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto1 = descriptor0.toProto();
        boolean boolean2 = descriptorProto1.isInitialized();
        int int3 = descriptorProto1.getExtensionCount();
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto5 = descriptorProto1.getNestedType((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptor0);
        org.junit.Assert.assertNotNull(descriptorProto1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test1806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1806");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate(100);
        java.nio.DoubleBuffer doubleBuffer2 = byteBuffer1.asDoubleBuffer();
        java.lang.String str3 = doubleBuffer2.toString();
        java.lang.Object obj4 = null;
        boolean boolean5 = doubleBuffer2.equals(obj4);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(doubleBuffer2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.nio.ByteBufferAsDoubleBufferB[pos=0 lim=12 cap=12]" + "'", str3, "java.nio.ByteBufferAsDoubleBufferB[pos=0 lim=12 cap=12]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1807");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location2 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream0, extensionRegistryLite1);
        java.lang.Class class4 = null;
        com.google.protobuf.Message message5 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.GeneratedMessage.GeneratedExtension<com.google.protobuf.DescriptorProtos.ServiceDescriptorProto, com.google.javascript.jscomp.JSError[]> serviceDescriptorProtoGeneratedExtension6 = com.google.protobuf.GeneratedMessage.newMessageScopedGeneratedExtension((com.google.protobuf.Message) location2, 99, class4, message5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(location2);
    }

    @Test
    public void test1808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1808");
        com.google.javascript.jscomp.PerformanceTracker.Stats stats1 = new com.google.javascript.jscomp.PerformanceTracker.Stats("goog.global");
        java.lang.String str2 = stats1.pass;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "goog.global" + "'", str2, "goog.global");
    }

    @Test
    public void test1809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1809");
        com.google.javascript.jscomp.FunctionInformationMap.Module.Builder builder0 = com.google.javascript.jscomp.FunctionInformationMap.Module.newBuilder();
        java.io.InputStream inputStream1 = null;
        java.io.InputStream inputStream2 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite3 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location4 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream2, extensionRegistryLite3);
        com.google.javascript.jscomp.FunctionInformationMap.Module.Builder builder5 = builder0.mergeFrom(inputStream1, extensionRegistryLite3);
        com.google.javascript.jscomp.FunctionInformationMap.Module.Builder builder7 = builder5.setCompiledSource("{}: ERROR - Unknown class name\n");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(extensionRegistryLite3);
        org.junit.Assert.assertNotNull(location4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test1810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1810");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType4 = jSTypeRegistry2.createObjectType(objectType3);
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.jstype.ObjectType objectType8 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry7.createObjectType(objectType8);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair10 = objectType4.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType9);
        boolean boolean11 = objectType9.isNoResolvedType();
        com.google.javascript.rhino.ErrorReporter errorReporter12 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter12, false);
        com.google.javascript.rhino.jstype.ObjectType objectType15 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType16 = jSTypeRegistry14.createObjectType(objectType15);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        com.google.javascript.rhino.jstype.ObjectType objectType20 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType21 = jSTypeRegistry19.createObjectType(objectType20);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair22 = objectType16.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType21);
        com.google.javascript.rhino.Node node23 = objectType16.getRootNode();
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24, false);
        com.google.javascript.rhino.jstype.ObjectType objectType27 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType28 = jSTypeRegistry26.createObjectType(objectType27);
        com.google.javascript.rhino.ErrorReporter errorReporter29 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter29, false);
        com.google.javascript.rhino.jstype.ObjectType objectType32 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType33 = jSTypeRegistry31.createObjectType(objectType32);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair34 = objectType28.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType33);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue35 = objectType16.testForEquality((com.google.javascript.rhino.jstype.JSType) objectType28);
        boolean boolean36 = objectType9.isSubtype((com.google.javascript.rhino.jstype.JSType) objectType16);
        boolean boolean37 = objectType9.matchesNumberContext();
        org.junit.Assert.assertNotNull(objectType4);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertNotNull(typePair10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objectType16);
        org.junit.Assert.assertNotNull(objectType21);
        org.junit.Assert.assertNotNull(typePair22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNotNull(objectType28);
        org.junit.Assert.assertNotNull(objectType33);
        org.junit.Assert.assertNotNull(typePair34);
        org.junit.Assert.assertNotNull(ternaryValue35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test1811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1811");
        java.time.Period period0 = java.time.Period.ZERO;
        java.time.chrono.ChronoPeriod chronoPeriod1 = period0.normalized();
        java.time.temporal.ChronoField chronoField2 = java.time.temporal.ChronoField.EPOCH_DAY;
        java.time.Instant instant3 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime8 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset7);
        java.time.OffsetDateTime offsetDateTime9 = java.time.OffsetDateTime.ofInstant(instant3, (java.time.ZoneId) zoneOffset7);
        java.time.temporal.ValueRange valueRange10 = chronoField2.rangeRefinedBy((java.time.temporal.TemporalAccessor) offsetDateTime9);
        java.time.temporal.Temporal temporal11 = period0.subtractFrom((java.time.temporal.Temporal) offsetDateTime9);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZoneOffset zoneOffset20 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset20);
        java.time.ZonedDateTime zonedDateTime22 = java.time.ZonedDateTime.of(localDateTime16, (java.time.ZoneId) zoneOffset20);
        java.time.ZonedDateTime zonedDateTime24 = zonedDateTime22.withYear((int) (short) 1);
        java.time.OffsetDateTime offsetDateTime25 = zonedDateTime22.toOffsetDateTime();
        java.time.ZonedDateTime zonedDateTime27 = zonedDateTime22.plusDays((long) (byte) -1);
        boolean boolean28 = offsetDateTime9.equals((java.lang.Object) zonedDateTime22);
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetDateTime offsetDateTime30 = offsetDateTime9.withMonth(31);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MonthOfYear (valid values 1 - 12): 31");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(chronoPeriod1);
        org.junit.Assert.assertTrue("'" + chronoField2 + "' != '" + java.time.temporal.ChronoField.EPOCH_DAY + "'", chronoField2.equals(java.time.temporal.ChronoField.EPOCH_DAY));
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(valueRange10);
        org.junit.Assert.assertNotNull(temporal11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zoneOffset20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zonedDateTime22);
        org.junit.Assert.assertNotNull(zonedDateTime24);
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertNotNull(zonedDateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test1812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1812");
        byte[] byteArray0 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions2 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray0, extensionRegistryLite1);
        com.google.protobuf.CodedOutputStream codedOutputStream5 = com.google.protobuf.CodedOutputStream.newInstance(byteArray0, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite6 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto7 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray0, extensionRegistryLite6);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite8 = null;
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto9 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.parseFrom(byteArray0, extensionRegistryLite8);
        com.google.protobuf.UnknownFieldSet unknownFieldSet10 = com.google.protobuf.UnknownFieldSet.parseFrom(byteArray0);
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto11 = com.google.protobuf.DescriptorProtos.DescriptorProto.parseFrom(byteArray0);
        java.util.List<com.google.protobuf.DescriptorProtos.FieldDescriptorProto> fieldDescriptorProtoList12 = descriptorProto11.getExtensionList();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(methodOptions2);
        org.junit.Assert.assertNotNull(codedOutputStream5);
        org.junit.Assert.assertNotNull(fileDescriptorProto7);
        org.junit.Assert.assertNotNull(serviceDescriptorProto9);
        org.junit.Assert.assertNotNull(unknownFieldSet10);
        org.junit.Assert.assertNotNull(descriptorProto11);
        org.junit.Assert.assertNotNull(fieldDescriptorProtoList12);
    }

    @Test
    public void test1813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1813");
        int int2 = com.google.protobuf.CodedOutputStream.computeInt32Size((int) (byte) 100, 3);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3 + "'", int2 == 3);
    }

    @Test
    public void test1814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1814");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label1 = builder0.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto2 = builder0.buildPartial();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder3 = builder0.clear();
        boolean boolean4 = builder3.hasExtendee();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto5 = builder3.buildPartial();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder6 = builder3.clone();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + label1 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label1.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(fieldDescriptorProto5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test1815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1815");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto enumValueDescriptorProto2 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.parseFrom(inputStream0, extensionRegistryLite1);
        com.google.protobuf.DescriptorProtos.EnumValueOptionsOrBuilder enumValueOptionsOrBuilder3 = enumValueDescriptorProto2.getOptionsOrBuilder();
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder4 = enumValueDescriptorProto2.newBuilderForType();
        com.google.protobuf.Descriptors.Descriptor descriptor5 = builder4.getDescriptorForType();
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor6 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int7 = builder4.getRepeatedFieldCount(fieldDescriptor6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(enumValueDescriptorProto2);
        org.junit.Assert.assertNotNull(enumValueOptionsOrBuilder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(descriptor5);
    }

    @Test
    public void test1816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1816");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType4 = jSTypeRegistry2.createObjectType(objectType3);
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.jstype.ObjectType objectType8 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry7.createObjectType(objectType8);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair10 = objectType4.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType9);
        com.google.javascript.rhino.Node node11 = objectType4.getRootNode();
        com.google.javascript.rhino.ErrorReporter errorReporter12 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter12, false);
        com.google.javascript.rhino.jstype.ObjectType objectType15 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType16 = jSTypeRegistry14.createObjectType(objectType15);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        com.google.javascript.rhino.jstype.ObjectType objectType20 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType21 = jSTypeRegistry19.createObjectType(objectType20);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair22 = objectType16.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType21);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue23 = objectType4.testForEquality((com.google.javascript.rhino.jstype.JSType) objectType16);
        boolean boolean24 = objectType4.isNullType();
        org.junit.Assert.assertNotNull(objectType4);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertNotNull(typePair10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(objectType16);
        org.junit.Assert.assertNotNull(objectType21);
        org.junit.Assert.assertNotNull(typePair22);
        org.junit.Assert.assertNotNull(ternaryValue23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1817");
        java.util.Date date1 = new java.util.Date((long) 10);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 UTC 1970");
    }

    @Test
    public void test1818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1818");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        java.lang.String str2 = jSDocInfo0.getDescriptionForParameter("iso8601");
        java.lang.String str3 = jSDocInfo0.getLicense();
        java.lang.String str4 = jSDocInfo0.toString();
        int int5 = jSDocInfo0.getExtendedInterfacesCount();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "JSDocInfo" + "'", str4, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test1819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1819");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRecordFunctionInformation(true);
        compilerOptions0.resetWarningsGuard();
        boolean boolean4 = compilerOptions0.removeUnusedPrototypeProperties;
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test1820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1820");
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap0 = java.nio.charset.Charset.availableCharsets();
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean5 = strMap0.containsValue((java.lang.Object) '4');
        java.lang.String str6 = strMap0.firstKey();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder7 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label8 = builder7.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder9 = builder7.clearOptions();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type type10 = builder9.getType();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.charset.Charset charset11 = strMap0.remove((java.lang.Object) type10);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap0);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Big5" + "'", str6, "Big5");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + label8 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label8.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + type10 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type.TYPE_DOUBLE + "'", type10.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type.TYPE_DOUBLE));
    }

    @Test
    public void test1821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1821");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        int int5 = localDateTime4.getYear();
        java.time.Instant instant6 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset10);
        java.time.OffsetDateTime offsetDateTime12 = java.time.OffsetDateTime.ofInstant(instant6, (java.time.ZoneId) zoneOffset10);
        java.time.Instant instant13 = localDateTime4.toInstant(zoneOffset10);
        java.time.LocalTime localTime14 = localDateTime4.toLocalTime();
        java.time.Instant instant15 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset19);
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset24);
        java.time.ZonedDateTime zonedDateTime26 = java.time.ZonedDateTime.of(localDateTime20, (java.time.ZoneId) zoneOffset24);
        java.time.temporal.ChronoField chronoField28 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit29 = chronoField28.getBaseUnit();
        java.time.LocalDateTime localDateTime30 = localDateTime20.plus((long) 1970, temporalUnit29);
        java.time.LocalDateTime localDateTime32 = localDateTime20.withHour((int) (short) 1);
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.OffsetDateTime offsetDateTime35 = java.time.OffsetDateTime.of(localDateTime20, zoneOffset34);
        java.time.OffsetTime offsetTime36 = java.time.OffsetTime.ofInstant(instant15, (java.time.ZoneId) zoneOffset34);
        java.time.OffsetTime offsetTime37 = java.time.OffsetTime.of(localTime14, zoneOffset34);
        java.time.temporal.ChronoField chronoField38 = java.time.temporal.ChronoField.OFFSET_SECONDS;
        boolean boolean39 = offsetTime37.isSupported((java.time.temporal.TemporalField) chronoField38);
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime44 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset43);
        java.time.ZoneOffset zoneOffset48 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime49 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset48);
        java.time.ZonedDateTime zonedDateTime50 = java.time.ZonedDateTime.of(localDateTime44, (java.time.ZoneId) zoneOffset48);
        java.time.ZonedDateTime zonedDateTime52 = zonedDateTime50.minusSeconds((long) '#');
        java.time.OffsetDateTime offsetDateTime53 = zonedDateTime50.toOffsetDateTime();
        java.time.OffsetDateTime offsetDateTime55 = offsetDateTime53.plusNanos(3600000L);
        java.time.temporal.Temporal temporal56 = offsetTime37.adjustInto((java.time.temporal.Temporal) offsetDateTime53);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(offsetDateTime12);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertTrue("'" + chronoField28 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField28.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit29 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit29.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(offsetDateTime35);
        org.junit.Assert.assertNotNull(offsetTime36);
        org.junit.Assert.assertNotNull(offsetTime37);
        org.junit.Assert.assertTrue("'" + chronoField38 + "' != '" + java.time.temporal.ChronoField.OFFSET_SECONDS + "'", chronoField38.equals(java.time.temporal.ChronoField.OFFSET_SECONDS));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(zoneOffset48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(zonedDateTime50);
        org.junit.Assert.assertNotNull(zonedDateTime52);
        org.junit.Assert.assertNotNull(offsetDateTime53);
        org.junit.Assert.assertNotNull(offsetDateTime55);
        org.junit.Assert.assertNotNull(temporal56);
    }

    @Test
    public void test1822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1822");
        com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder builder0 = com.google.javascript.jscomp.FunctionInformationMap.Entry.newBuilder();
        java.io.InputStream inputStream1 = null;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder2 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label3 = builder2.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto4 = builder2.buildPartial();
        int int5 = fieldDescriptorProto4.getSerializedSize();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder6 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto4);
        java.io.InputStream inputStream7 = null;
        java.io.InputStream inputStream8 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite9 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location10 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream8, extensionRegistryLite9);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder11 = builder6.mergeFrom(inputStream7, extensionRegistryLite9);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean12 = builder0.mergeDelimitedFrom(inputStream1, extensionRegistryLite9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + label3 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label3.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(extensionRegistryLite9);
        org.junit.Assert.assertNotNull(location10);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test1823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1823");
        java.util.Locale locale3 = new java.util.Locale("", "NUMBER 52.0 0", "hi!");
        java.time.format.DecimalStyle decimalStyle4 = java.time.format.DecimalStyle.of(locale3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset13);
        java.time.ZonedDateTime zonedDateTime15 = java.time.ZonedDateTime.of(localDateTime9, (java.time.ZoneId) zoneOffset13);
        java.time.ZonedDateTime zonedDateTime17 = zonedDateTime15.withYear((int) (short) 1);
        boolean boolean18 = decimalStyle4.equals((java.lang.Object) (short) 1);
        java.time.format.DecimalStyle decimalStyle20 = decimalStyle4.withNegativeSign('#');
        java.time.format.DecimalStyle decimalStyle22 = decimalStyle4.withPositiveSign('+');
        char char23 = decimalStyle22.getZeroDigit();
        org.junit.Assert.assertEquals(locale3.toString(), "_NUMBER 52.0 0_hi!");
        org.junit.Assert.assertNotNull(decimalStyle4);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zonedDateTime15);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(decimalStyle20);
        org.junit.Assert.assertNotNull(decimalStyle22);
        org.junit.Assert.assertTrue("'" + char23 + "' != '" + '0' + "'", char23 == '0');
    }

    @Test
    public void test1824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1824");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label1 = builder0.getLabel();
        com.google.protobuf.ByteString byteString2 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder3 = builder0.mergeFrom(byteString2);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite4 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location5 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(byteString2, extensionRegistryLite4);
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto6 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.parseFrom(byteString2);
        com.google.javascript.jscomp.CompilerOptions compilerOptions7 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions7.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat10 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions7.errorFormat = errorFormat10;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy12 = null;
        compilerOptions7.variableRenaming = variableRenamingPolicy12;
        compilerOptions7.setSummaryDetailLevel(999);
        boolean boolean16 = compilerOptions7.getInferTypes();
        boolean boolean17 = compilerOptions7.ideMode;
        compilerOptions7.setGroupVariableDeclarations(true);
        compilerOptions7.setCheckCaja(false);
        boolean boolean22 = byteString2.equals((java.lang.Object) compilerOptions7);
        compilerOptions7.setGroupVariableDeclarations(false);
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel25 = compilerOptions7.sourceMapDetailLevel;
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean31 = node30.isStringKey();
        boolean boolean32 = node30.isThrow();
        boolean boolean33 = node30.isVarArgs();
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean38 = node37.isFromExterns();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean43 = node42.isFromExterns();
        java.lang.String str44 = node42.toString();
        com.google.javascript.rhino.Node node45 = node37.copyInformationFrom(node42);
        com.google.javascript.rhino.Node node49 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean50 = node49.isStringKey();
        boolean boolean51 = node49.isThrow();
        com.google.javascript.rhino.Node node55 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean56 = node55.isStringKey();
        com.google.javascript.rhino.Node node59 = new com.google.javascript.rhino.Node((-1), node30, node42, node49, node55, 16384, 16);
        boolean boolean60 = node42.isVar();
        boolean boolean61 = detailLevel25.apply(node42);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + label1 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label1.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(byteString2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(location5);
        org.junit.Assert.assertNotNull(serviceDescriptorProto6);
        org.junit.Assert.assertNotNull(errorFormat10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(detailLevel25);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "NUMBER 52.0 0" + "'", str44, "NUMBER 52.0 0");
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(node55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test1825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1825");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions1 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream0);
        boolean boolean2 = enumOptions1.isInitialized();
        int int3 = enumOptions1.getUninterpretedOptionCount();
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor4 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean5 = enumOptions1.hasField(fieldDescriptor4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(enumOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test1826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1826");
        java.net.URISyntaxException uRISyntaxException2 = new java.net.URISyntaxException("hi!", "");
        java.security.NoSuchAlgorithmException noSuchAlgorithmException3 = new java.security.NoSuchAlgorithmException((java.lang.Throwable) uRISyntaxException2);
        java.net.URISyntaxException uRISyntaxException6 = new java.net.URISyntaxException("hi!", "");
        java.security.NoSuchAlgorithmException noSuchAlgorithmException7 = new java.security.NoSuchAlgorithmException((java.lang.Throwable) uRISyntaxException6);
        noSuchAlgorithmException3.addSuppressed((java.lang.Throwable) noSuchAlgorithmException7);
    }

    @Test
    public void test1827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1827");
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto0 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.getDefaultInstance();
        java.util.List<com.google.protobuf.DescriptorProtos.MethodDescriptorProto> methodDescriptorProtoList1 = serviceDescriptorProto0.getMethodList();
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.MethodDescriptorProtoOrBuilder methodDescriptorProtoOrBuilder3 = serviceDescriptorProto0.getMethodOrBuilder(37);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 37");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serviceDescriptorProto0);
        org.junit.Assert.assertNotNull(methodDescriptorProtoList1);
    }

    @Test
    public void test1828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1828");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.of(localDateTime4, (java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime10.withYear((int) (short) 1);
        java.time.LocalTime localTime13 = zonedDateTime10.toLocalTime();
        java.time.Period period14 = java.time.Period.ZERO;
        java.time.Period period16 = period14.plusMonths(0L);
        int int17 = period14.getMonths();
        java.time.Period period19 = period14.multipliedBy(6);
        java.time.temporal.ChronoField chronoField20 = java.time.temporal.ChronoField.EPOCH_DAY;
        java.time.Instant instant21 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime26 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset25);
        java.time.OffsetDateTime offsetDateTime27 = java.time.OffsetDateTime.ofInstant(instant21, (java.time.ZoneId) zoneOffset25);
        java.time.temporal.ValueRange valueRange28 = chronoField20.rangeRefinedBy((java.time.temporal.TemporalAccessor) offsetDateTime27);
        java.time.format.DateTimeFormatter dateTimeFormatter29 = java.time.format.DateTimeFormatter.ISO_DATE;
        java.lang.String str30 = offsetDateTime27.format(dateTimeFormatter29);
        java.time.temporal.Temporal temporal31 = period14.addTo((java.time.temporal.Temporal) offsetDateTime27);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime32 = zonedDateTime10.plus((java.time.temporal.TemporalAmount) period14);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertTrue("'" + chronoField20 + "' != '" + java.time.temporal.ChronoField.EPOCH_DAY + "'", chronoField20.equals(java.time.temporal.ChronoField.EPOCH_DAY));
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertNotNull(valueRange28);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1970-01-01+00:00:52" + "'", str30, "1970-01-01+00:00:52");
        org.junit.Assert.assertNotNull(temporal31);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime32);
    }

    @Test
    public void test1829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1829");
        byte[] byteArray0 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions2 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray0, extensionRegistryLite1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite3 = null;
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto enumDescriptorProto4 = com.google.protobuf.DescriptorProtos.EnumDescriptorProto.parseFrom(byteArray0, extensionRegistryLite3);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder5 = enumDescriptorProto4.newBuilderForType();
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto enumDescriptorProto6 = builder5.build();
        com.google.protobuf.MessageLite messageLite7 = enumDescriptorProto6.getDefaultInstanceForType();
        com.google.protobuf.DescriptorProtos.EnumOptionsOrBuilder enumOptionsOrBuilder8 = enumDescriptorProto6.getOptionsOrBuilder();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(methodOptions2);
        org.junit.Assert.assertNotNull(enumDescriptorProto4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(enumDescriptorProto6);
        org.junit.Assert.assertNotNull(messageLite7);
        org.junit.Assert.assertNotNull(enumOptionsOrBuilder8);
    }

    @Test
    public void test1830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1830");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType4 = jSTypeRegistry2.createObjectType(objectType3);
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.jstype.ObjectType objectType8 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry7.createObjectType(objectType8);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair10 = objectType4.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType9);
        com.google.javascript.rhino.ErrorReporter errorReporter12 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter12, false);
        com.google.javascript.rhino.jstype.ObjectType objectType15 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType16 = jSTypeRegistry14.createObjectType(objectType15);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        com.google.javascript.rhino.jstype.ObjectType objectType20 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType21 = jSTypeRegistry19.createObjectType(objectType20);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair22 = objectType16.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType21);
        com.google.javascript.rhino.Node node23 = objectType16.getRootNode();
        com.google.javascript.rhino.jstype.EnumType enumType24 = objectType16.toMaybeEnumType();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean29 = node28.isStringKey();
        boolean boolean30 = node28.isThrow();
        boolean boolean31 = node28.isVarArgs();
        boolean boolean32 = node28.isStringKey();
        boolean boolean33 = objectType9.defineInferredProperty("Unknown class name", (com.google.javascript.rhino.jstype.JSType) objectType16, node28);
        com.google.javascript.rhino.ErrorReporter errorReporter34 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry36 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter34, false);
        com.google.javascript.rhino.jstype.ObjectType objectType37 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType38 = jSTypeRegistry36.createObjectType(objectType37);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        com.google.javascript.rhino.jstype.ObjectType objectType42 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType43 = jSTypeRegistry41.createObjectType(objectType42);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair44 = objectType38.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType43);
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        com.google.javascript.rhino.jstype.ObjectType objectType49 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType50 = jSTypeRegistry48.createObjectType(objectType49);
        com.google.javascript.rhino.ErrorReporter errorReporter51 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry53 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter51, false);
        com.google.javascript.rhino.jstype.ObjectType objectType54 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType55 = jSTypeRegistry53.createObjectType(objectType54);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair56 = objectType50.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType55);
        com.google.javascript.rhino.Node node57 = objectType50.getRootNode();
        com.google.javascript.rhino.jstype.EnumType enumType58 = objectType50.toMaybeEnumType();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean63 = node62.isStringKey();
        boolean boolean64 = node62.isThrow();
        boolean boolean65 = node62.isVarArgs();
        boolean boolean66 = node62.isStringKey();
        boolean boolean67 = objectType43.defineInferredProperty("Unknown class name", (com.google.javascript.rhino.jstype.JSType) objectType50, node62);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair68 = objectType16.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType43);
        int int69 = objectType43.getPropertiesCount();
        org.junit.Assert.assertNotNull(objectType4);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertNotNull(typePair10);
        org.junit.Assert.assertNotNull(objectType16);
        org.junit.Assert.assertNotNull(objectType21);
        org.junit.Assert.assertNotNull(typePair22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNull(enumType24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(objectType38);
        org.junit.Assert.assertNotNull(objectType43);
        org.junit.Assert.assertNotNull(typePair44);
        org.junit.Assert.assertNotNull(objectType50);
        org.junit.Assert.assertNotNull(objectType55);
        org.junit.Assert.assertNotNull(typePair56);
        org.junit.Assert.assertNull(node57);
        org.junit.Assert.assertNull(enumType58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(typePair68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
    }

    @Test
    public void test1831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1831");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange extensionRange2 = com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.parseFrom(inputStream0, extensionRegistryLite1);
        int int3 = extensionRange2.getEnd();
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange extensionRange4 = extensionRange2.getDefaultInstanceForType();
        int int5 = extensionRange4.getEnd();
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.Builder builder6 = com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.newBuilder(extensionRange4);
        org.junit.Assert.assertNotNull(extensionRange2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(extensionRange4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test1832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1832");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition1 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        typePosition1.setPositionInformation((int) ':', 50, 64, (int) (short) 10);
        com.google.javascript.rhino.Node node10 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean11 = node10.isFromExterns();
        java.lang.String str12 = node10.toString();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable13 = node10.siblings();
        typePosition1.setItem(node10);
        com.google.javascript.rhino.Node node15 = node10.cloneNode();
        com.google.javascript.jscomp.SourceAst sourceAst16 = null;
        com.google.javascript.rhino.InputId inputId17 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput19 = new com.google.javascript.jscomp.CompilerInput(sourceAst16, inputId17, true);
        java.io.PrintStream printStream20 = null;
        com.google.javascript.jscomp.Compiler compiler21 = new com.google.javascript.jscomp.Compiler(printStream20);
        com.google.javascript.jscomp.ErrorManager errorManager22 = compiler21.getErrorManager();
        compilerInput19.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler21);
        com.google.javascript.jscomp.CodingConvention codingConvention24 = compiler21.getCodingConvention();
        java.util.Collection<com.google.javascript.jscomp.CodingConvention.AssertionFunctionSpec> assertionFunctionSpecCollection25 = codingConvention24.getAssertionFunctions();
        java.lang.String str26 = codingConvention24.getAbstractMethodName();
        com.google.javascript.rhino.Node node28 = new com.google.javascript.rhino.Node(1);
        com.google.javascript.rhino.Node node29 = node28.cloneNode();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean34 = node33.isStringKey();
        boolean boolean35 = node33.isTrue();
        boolean boolean36 = node33.isNot();
        java.lang.String str37 = codingConvention24.extractClassNameIfProvide(node29, node33);
        com.google.javascript.rhino.ErrorReporter errorReporter38 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry40 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter38, false);
        com.google.javascript.rhino.jstype.ObjectType objectType41 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType42 = jSTypeRegistry40.createObjectType(objectType41);
        com.google.javascript.rhino.ErrorReporter errorReporter43 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry45 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter43, false);
        com.google.javascript.rhino.jstype.ObjectType objectType46 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType47 = jSTypeRegistry45.createObjectType(objectType46);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair48 = objectType42.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType47);
        com.google.javascript.rhino.JSDocInfo jSDocInfo49 = objectType42.getJSDocInfo();
        com.google.javascript.rhino.Node node53 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean54 = node53.isFromExterns();
        com.google.javascript.rhino.Node node58 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean59 = node58.isFromExterns();
        java.lang.String str60 = node58.toString();
        com.google.javascript.rhino.Node node61 = node53.copyInformationFrom(node58);
        int int62 = node53.getLineno();
        boolean boolean63 = objectType42.equals((java.lang.Object) node53);
        boolean boolean64 = node53.isThis();
        com.google.javascript.rhino.Node node66 = new com.google.javascript.rhino.Node(1);
        com.google.javascript.rhino.Node node67 = new com.google.javascript.rhino.Node(15, node10, node33, node53, node66);
        java.io.File file70 = null;
        java.io.File file71 = java.io.File.createTempFile("hi!", "ISO", file70);
        boolean boolean74 = file71.setWritable(false, false);
        java.net.URI uRI75 = file71.toURI();
        com.google.javascript.jscomp.JSSourceFile jSSourceFile76 = com.google.javascript.jscomp.JSSourceFile.fromFile(file71);
        node33.setStaticSourceFile((com.google.javascript.rhino.jstype.StaticSourceFile) jSSourceFile76);
        org.junit.Assert.assertNotNull(node10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "NUMBER 52.0 0" + "'", str12, "NUMBER 52.0 0");
        org.junit.Assert.assertNotNull(nodeIterable13);
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertNotNull(errorManager22);
        org.junit.Assert.assertNotNull(codingConvention24);
        org.junit.Assert.assertNotNull(assertionFunctionSpecCollection25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "goog.abstractMethod" + "'", str26, "goog.abstractMethod");
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(objectType42);
        org.junit.Assert.assertNotNull(objectType47);
        org.junit.Assert.assertNotNull(typePair48);
        org.junit.Assert.assertNull(jSDocInfo49);
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(node58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "NUMBER 52.0 0" + "'", str60, "NUMBER 52.0 0");
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(file71);
        org.junit.Assert.assertEquals(file71.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file71.toString(), "/tmp/hi!738263140515424289ISO");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(uRI75);
        org.junit.Assert.assertNotNull(jSSourceFile76);
    }

    @Test
    public void test1833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1833");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.of(localDateTime4, (java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime10.withHour(16);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime13 = zonedDateTime12.toLocalDateTime();
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset17);
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset22);
        java.time.ZonedDateTime zonedDateTime24 = java.time.ZonedDateTime.of(localDateTime18, (java.time.ZoneId) zoneOffset22);
        java.time.ZonedDateTime zonedDateTime26 = zonedDateTime24.minusSeconds((long) '#');
        java.time.OffsetDateTime offsetDateTime27 = zonedDateTime24.toOffsetDateTime();
        int int28 = zonedDateTime12.compareTo((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime24);
        java.time.Instant instant29 = java.time.Instant.EPOCH;
        java.nio.file.attribute.FileTime fileTime30 = java.nio.file.attribute.FileTime.from(instant29);
        java.time.Instant instant32 = java.time.Instant.ofEpochSecond((long) (-1));
        java.time.Instant instant34 = instant32.plusMillis((long) (byte) -1);
        boolean boolean35 = instant29.isBefore(instant34);
        java.time.ZoneOffset zoneOffset41 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime42 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset41);
        java.time.ZoneOffset zoneOffset46 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime47 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset46);
        java.time.ZonedDateTime zonedDateTime48 = java.time.ZonedDateTime.of(localDateTime42, (java.time.ZoneId) zoneOffset46);
        java.time.chrono.Chronology chronology49 = java.time.chrono.Chronology.from((java.time.temporal.TemporalAccessor) zoneOffset46);
        java.time.LocalDateTime localDateTime50 = java.time.LocalDateTime.ofEpochSecond((long) 6, (int) 'a', zoneOffset46);
        java.time.OffsetTime offsetTime51 = java.time.OffsetTime.ofInstant(instant34, (java.time.ZoneId) zoneOffset46);
        java.time.ZonedDateTime zonedDateTime52 = zonedDateTime12.with((java.time.temporal.TemporalAdjuster) instant34);
        java.time.Month month53 = zonedDateTime52.getMonth();
        java.time.Month month55 = month53.minus((long) 9);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime13);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zonedDateTime24);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(fileTime30);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(zoneOffset41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(zoneOffset46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(zonedDateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(offsetTime51);
        org.junit.Assert.assertNotNull(zonedDateTime52);
        org.junit.Assert.assertTrue("'" + month53 + "' != '" + java.time.Month.JANUARY + "'", month53.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + month55 + "' != '" + java.time.Month.APRIL + "'", month55.equals(java.time.Month.APRIL));
    }

    @Test
    public void test1834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1834");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label4 = builder3.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = builder0.addExtension(builder3);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder6 = builder0.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder7 = builder6.getOptionsBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions8 = builder7.getDefaultInstanceForType();
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor9 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder10 = builder7.clearField(fieldDescriptor9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + label4 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label4.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(enumOptions8);
    }

    @Test
    public void test1835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1835");
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap0 = java.nio.charset.Charset.availableCharsets();
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap2 = strMap0.tailMap("goog.exportProperty");
        org.junit.Assert.assertNotNull(strMap0);
        org.junit.Assert.assertNotNull(strMap2);
    }

    @Test
    public void test1836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1836");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.optimizeCalls = false;
        compilerOptions0.setMarkNoSideEffectCalls(false);
        compilerOptions0.ambiguateProperties = true;
    }

    @Test
    public void test1837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1837");
        java.time.temporal.ChronoField chronoField0 = java.time.temporal.ChronoField.MILLI_OF_DAY;
        java.time.temporal.ValueRange valueRange1 = chronoField0.range();
        long long2 = valueRange1.getSmallestMaximum();
        boolean boolean3 = valueRange1.isIntValue();
        long long4 = valueRange1.getMaximum();
        org.junit.Assert.assertTrue("'" + chronoField0 + "' != '" + java.time.temporal.ChronoField.MILLI_OF_DAY + "'", chronoField0.equals(java.time.temporal.ChronoField.MILLI_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 86399999L + "'", long2 == 86399999L);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 86399999L + "'", long4 == 86399999L);
    }

    @Test
    public void test1838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1838");
        int int0 = com.google.protobuf.DescriptorProtos.FileOptions.UNINTERPRETED_OPTION_FIELD_NUMBER;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 999 + "'", int0 == 999);
    }

    @Test
    public void test1839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1839");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.DescriptorProtos.FieldOptions fieldOptions1 = com.google.protobuf.DescriptorProtos.FieldOptions.parseFrom(inputStream0);
        boolean boolean2 = fieldOptions1.hasExperimentalMapKey();
        com.google.protobuf.DescriptorProtos.FieldOptions.Builder builder3 = com.google.protobuf.DescriptorProtos.FieldOptions.newBuilder(fieldOptions1);
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions5 = com.google.protobuf.DescriptorProtos.EnumValueOptions.getDefaultInstance();
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder6 = com.google.protobuf.DescriptorProtos.EnumValueOptions.newBuilder(enumValueOptions5);
        java.io.InputStream inputStream7 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder8 = builder6.mergeFrom(inputStream7);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder9 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output11 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream13 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output11, (int) 'a');
        byte[] byteArray14 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite15 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions16 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray14, extensionRegistryLite15);
        output11.write(byteArray14);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder18 = builder9.mergeFrom(byteArray14);
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions19 = builder9.buildPartial();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder20 = builder9.addUninterpretedOptionBuilder();
        com.google.protobuf.DescriptorProtos.UninterpretedOption uninterpretedOption21 = builder20.buildPartial();
        java.lang.String str22 = uninterpretedOption21.getIdentifierValue();
        int int23 = uninterpretedOption21.getNameCount();
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder24 = builder6.addUninterpretedOption(uninterpretedOption21);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.FieldOptions.Builder builder25 = builder3.addUninterpretedOption((int) (short) -1, uninterpretedOption21);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fieldOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(enumValueOptions5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(output11);
        org.junit.Assert.assertNotNull(codedOutputStream13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(methodOptions16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(methodOptions19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(uninterpretedOption21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test1840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1840");
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.of((long) (-1));
        java.util.stream.LongStream longStream2 = longStream1.distinct();
        java.util.stream.DoubleStream doubleStream3 = longStream2.asDoubleStream();
        boolean boolean4 = doubleStream3.isParallel();
        java.util.stream.DoubleStream doubleStream5 = doubleStream3.unordered();
        java.util.function.DoubleUnaryOperator doubleUnaryOperator6 = java.util.function.DoubleUnaryOperator.identity();
        java.util.function.DoubleUnaryOperator doubleUnaryOperator7 = java.util.function.DoubleUnaryOperator.identity();
        java.util.function.DoubleUnaryOperator doubleUnaryOperator8 = doubleUnaryOperator6.andThen(doubleUnaryOperator7);
        java.util.function.DoubleUnaryOperator doubleUnaryOperator9 = java.util.function.DoubleUnaryOperator.identity();
        java.util.function.DoubleUnaryOperator doubleUnaryOperator10 = doubleUnaryOperator8.andThen(doubleUnaryOperator9);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream11 = doubleStream3.map(doubleUnaryOperator8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(doubleStream3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(doubleStream5);
        org.junit.Assert.assertNotNull(doubleUnaryOperator6);
        org.junit.Assert.assertNotNull(doubleUnaryOperator7);
        org.junit.Assert.assertNotNull(doubleUnaryOperator8);
        org.junit.Assert.assertNotNull(doubleUnaryOperator9);
        org.junit.Assert.assertNotNull(doubleUnaryOperator10);
    }

    @Test
    public void test1841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1841");
        java.util.Locale locale4 = new java.util.Locale("", "NUMBER 52.0 0", "hi!");
        java.util.Locale locale8 = new java.util.Locale("", "NUMBER 52.0 0", "hi!");
        java.lang.String str9 = locale4.getDisplayLanguage(locale8);
        java.text.MessageFormat messageFormat10 = new java.text.MessageFormat("Named type with empty name component", locale8);
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        boolean boolean17 = strSet15.isEmpty();
        java.nio.ByteBuffer byteBuffer19 = java.nio.ByteBuffer.allocate(100);
        boolean boolean20 = strSet15.equals((java.lang.Object) byteBuffer19);
        java.nio.IntBuffer intBuffer21 = byteBuffer19.asIntBuffer();
        java.nio.IntBuffer intBuffer22 = intBuffer21.duplicate();
        java.nio.IntBuffer intBuffer23 = intBuffer22.duplicate();
        int[] intArray28 = new int[] { 16, ':', 43, (short) 100 };
        java.util.stream.IntStream intStream29 = java.util.stream.IntStream.of(intArray28);
        int[] intArray30 = intStream29.toArray();
        java.nio.IntBuffer intBuffer31 = java.nio.IntBuffer.wrap(intArray30);
        java.nio.IntBuffer intBuffer33 = java.nio.IntBuffer.allocate(256);
        java.nio.IntBuffer intBuffer35 = intBuffer33.put(55);
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet40 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet40, strArray39);
        boolean boolean42 = strSet40.isEmpty();
        java.nio.ByteBuffer byteBuffer44 = java.nio.ByteBuffer.allocate(100);
        boolean boolean45 = strSet40.equals((java.lang.Object) byteBuffer44);
        java.nio.IntBuffer intBuffer46 = byteBuffer44.asIntBuffer();
        java.nio.IntBuffer intBuffer47 = intBuffer46.duplicate();
        java.nio.IntBuffer intBuffer48 = intBuffer47.duplicate();
        java.nio.IntBuffer intBuffer50 = java.nio.IntBuffer.allocate(256);
        int[] intArray55 = new int[] { 16, ':', 43, (short) 100 };
        java.util.stream.IntStream intStream56 = java.util.stream.IntStream.of(intArray55);
        int[] intArray57 = intStream56.toArray();
        java.nio.IntBuffer intBuffer58 = intBuffer50.put(intArray57);
        java.nio.IntBuffer[] intBufferArray59 = new java.nio.IntBuffer[] { intBuffer23, intBuffer31, intBuffer35, intBuffer48, intBuffer58 };
        com.google.common.collect.ImmutableSet<java.nio.IntBuffer> intBufferSet60 = com.google.common.collect.ImmutableSet.copyOf(intBufferArray59);
        java.lang.StringBuffer stringBuffer61 = null;
        java.text.Format.Field field62 = null;
        java.text.FieldPosition fieldPosition64 = new java.text.FieldPosition(field62, (int) (byte) 1);
        java.text.Format.Field field65 = fieldPosition64.getFieldAttribute();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer66 = messageFormat10.format((java.lang.Object[]) intBufferArray59, stringBuffer61, fieldPosition64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale4.toString(), "_NUMBER 52.0 0_hi!");
        org.junit.Assert.assertEquals(locale8.toString(), "_NUMBER 52.0 0_hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(intBuffer21);
        org.junit.Assert.assertNotNull(intBuffer22);
        org.junit.Assert.assertNotNull(intBuffer23);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[16, 58, 43, 100]");
        org.junit.Assert.assertNotNull(intStream29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[16, 58, 43, 100]");
        org.junit.Assert.assertNotNull(intBuffer31);
        org.junit.Assert.assertNotNull(intBuffer33);
        org.junit.Assert.assertNotNull(intBuffer35);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(intBuffer46);
        org.junit.Assert.assertNotNull(intBuffer47);
        org.junit.Assert.assertNotNull(intBuffer48);
        org.junit.Assert.assertNotNull(intBuffer50);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[16, 58, 43, 100]");
        org.junit.Assert.assertNotNull(intStream56);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[16, 58, 43, 100]");
        org.junit.Assert.assertNotNull(intBuffer58);
        org.junit.Assert.assertNotNull(intBufferArray59);
        org.junit.Assert.assertNotNull(intBufferSet60);
        org.junit.Assert.assertNull(field65);
    }

    @Test
    public void test1842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1842");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.of(localDateTime4, (java.time.ZoneId) zoneOffset8);
        java.time.temporal.ChronoField chronoField12 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit13 = chronoField12.getBaseUnit();
        java.time.LocalDateTime localDateTime14 = localDateTime4.plus((long) 1970, temporalUnit13);
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset19);
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset24);
        java.time.ZonedDateTime zonedDateTime26 = java.time.ZonedDateTime.of(localDateTime20, (java.time.ZoneId) zoneOffset24);
        java.time.temporal.ChronoField chronoField28 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit29 = chronoField28.getBaseUnit();
        java.time.LocalDateTime localDateTime30 = localDateTime20.plus((long) 1970, temporalUnit29);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime31 = localDateTime14.minus((long) 43, temporalUnit29);
        java.time.ZoneOffset zoneOffset35 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime36 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset35);
        java.time.ZoneOffset zoneOffset40 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime41 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset40);
        java.time.ZonedDateTime zonedDateTime42 = java.time.ZonedDateTime.of(localDateTime36, (java.time.ZoneId) zoneOffset40);
        java.time.temporal.ChronoField chronoField43 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        boolean boolean44 = localDateTime36.isSupported((java.time.temporal.TemporalField) chronoField43);
        java.time.LocalDateTime localDateTime46 = localDateTime36.plusHours((long) 9);
        boolean boolean47 = localDateTime14.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime36);
        java.time.ZoneOffset zoneOffset48 = null;
        // The following exception was thrown during execution in test generation
        try {
            long long49 = localDateTime36.toEpochSecond(zoneOffset48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: offset");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertTrue("'" + chronoField12 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField12.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit13 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit13.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertTrue("'" + chronoField28 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField28.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit29 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit29.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime31);
        org.junit.Assert.assertNotNull(zoneOffset35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(zoneOffset40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(zonedDateTime42);
        org.junit.Assert.assertTrue("'" + chronoField43 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField43.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test1843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1843");
        java.io.PrintStream printStream1 = new java.io.PrintStream("1970-01-01");
        printStream1.print((-1));
        printStream1.write((int) (byte) 100);
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter("1970-03-24T02:02:32");
        char[] charArray13 = new char[] { '4', ' ', 'a', 'a', ':' };
        printWriter7.println(charArray13);
        printStream1.println(charArray13);
        printStream1.close();
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "4 aa:");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "4 aa:");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[4,  , a, a, :]");
    }

    @Test
    public void test1844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1844");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.OffsetDateTime offsetDateTime8 = offsetDateTime6.minusDays((long) (short) 100);
        java.lang.String str9 = offsetDateTime6.toString();
        java.time.ZoneOffset zoneOffset10 = offsetDateTime6.getOffset();
        java.time.LocalTime localTime11 = offsetDateTime6.toLocalTime();
        java.time.Period period12 = java.time.Period.ZERO;
        java.time.Period period14 = period12.plusMonths(0L);
        java.time.LocalTime localTime15 = localTime11.plus((java.time.temporal.TemporalAmount) period14);
        java.time.Period period17 = period14.minusMonths(0L);
        java.time.Instant instant18 = java.time.Instant.EPOCH;
        java.nio.file.attribute.FileTime fileTime19 = java.nio.file.attribute.FileTime.from(instant18);
        java.time.Instant instant21 = instant18.plusNanos((long) 32);
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime26 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset25);
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset30);
        java.time.ZonedDateTime zonedDateTime32 = java.time.ZonedDateTime.of(localDateTime26, (java.time.ZoneId) zoneOffset30);
        java.time.chrono.Chronology chronology33 = java.time.chrono.Chronology.from((java.time.temporal.TemporalAccessor) zoneOffset30);
        java.time.OffsetDateTime offsetDateTime34 = java.time.OffsetDateTime.ofInstant(instant21, (java.time.ZoneId) zoneOffset30);
        java.time.temporal.Temporal temporal35 = period17.subtractFrom((java.time.temporal.Temporal) instant21);
        java.time.Period period36 = java.time.Period.ZERO;
        java.time.chrono.ChronoPeriod chronoPeriod37 = period36.normalized();
        java.time.temporal.ChronoField chronoField38 = java.time.temporal.ChronoField.EPOCH_DAY;
        java.time.Instant instant39 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime44 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset43);
        java.time.OffsetDateTime offsetDateTime45 = java.time.OffsetDateTime.ofInstant(instant39, (java.time.ZoneId) zoneOffset43);
        java.time.temporal.ValueRange valueRange46 = chronoField38.rangeRefinedBy((java.time.temporal.TemporalAccessor) offsetDateTime45);
        java.time.temporal.Temporal temporal47 = period36.subtractFrom((java.time.temporal.Temporal) offsetDateTime45);
        java.time.Period period48 = java.time.Period.ZERO;
        java.time.chrono.ChronoPeriod chronoPeriod49 = period48.normalized();
        java.time.OffsetDateTime offsetDateTime50 = offsetDateTime45.plus((java.time.temporal.TemporalAmount) chronoPeriod49);
        // The following exception was thrown during execution in test generation
        try {
            java.time.Instant instant51 = instant21.with((java.time.temporal.TemporalAdjuster) offsetDateTime50);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: EpochDay");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(offsetDateTime8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-01T00:00:52+00:00:52" + "'", str9, "1970-01-01T00:00:52+00:00:52");
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(fileTime19);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(zonedDateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertNotNull(temporal35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(chronoPeriod37);
        org.junit.Assert.assertTrue("'" + chronoField38 + "' != '" + java.time.temporal.ChronoField.EPOCH_DAY + "'", chronoField38.equals(java.time.temporal.ChronoField.EPOCH_DAY));
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(offsetDateTime45);
        org.junit.Assert.assertNotNull(valueRange46);
        org.junit.Assert.assertNotNull(temporal47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(chronoPeriod49);
        org.junit.Assert.assertNotNull(offsetDateTime50);
    }

    @Test
    public void test1845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1845");
        byte[] byteArray0 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions2 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray0, extensionRegistryLite1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite3 = null;
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto enumDescriptorProto4 = com.google.protobuf.DescriptorProtos.EnumDescriptorProto.parseFrom(byteArray0, extensionRegistryLite3);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder5 = enumDescriptorProto4.newBuilderForType();
        com.google.protobuf.Descriptors.Descriptor descriptor6 = builder5.getDescriptorForType();
        boolean boolean7 = builder5.hasName();
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor8 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int9 = builder5.getRepeatedFieldCount(fieldDescriptor8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(methodOptions2);
        org.junit.Assert.assertNotNull(enumDescriptorProto4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(descriptor6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test1846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1846");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean5 = node4.isStringKey();
        boolean boolean6 = node4.isThrow();
        boolean boolean7 = node4.isVarArgs();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean12 = node11.isFromExterns();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean17 = node16.isFromExterns();
        java.lang.String str18 = node16.toString();
        com.google.javascript.rhino.Node node19 = node11.copyInformationFrom(node16);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean24 = node23.isStringKey();
        boolean boolean25 = node23.isThrow();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean30 = node29.isStringKey();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((-1), node4, node16, node23, node29, 16384, 16);
        boolean boolean34 = node16.isWhile();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        com.google.javascript.rhino.Node node39 = node38.getLastChild();
        com.google.javascript.rhino.Node node40 = node16.copyInformationFromForTree(node38);
        com.google.javascript.jscomp.JSModule jSModule42 = new com.google.javascript.jscomp.JSModule("/");
        com.google.javascript.jscomp.SourceFile sourceFile44 = com.google.javascript.jscomp.SourceFile.fromFile("/");
        java.lang.String str45 = sourceFile44.getOriginalPath();
        jSModule42.add(sourceFile44);
        node38.setStaticSourceFile((com.google.javascript.rhino.jstype.StaticSourceFile) sourceFile44);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "NUMBER 52.0 0" + "'", str18, "NUMBER 52.0 0");
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(sourceFile44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "/" + "'", str45, "/");
    }

    @Test
    public void test1847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1847");
        java.time.LocalDate localDate1 = java.time.LocalDate.ofEpochDay(52L);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime6 = localDate1.atTime(12, 152, 8, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MinuteOfHour (valid values 0 - 59): 152");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate1);
    }

    @Test
    public void test1848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1848");
        int[] intArray4 = new int[] { 16, ':', 43, (short) 100 };
        java.util.stream.IntStream intStream5 = java.util.stream.IntStream.of(intArray4);
        int[] intArray6 = intStream5.toArray();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream7 = intStream5.asDoubleStream();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[16, 58, 43, 100]");
        org.junit.Assert.assertNotNull(intStream5);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[16, 58, 43, 100]");
    }

    @Test
    public void test1849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1849");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy5 = null;
        compilerOptions0.variableRenaming = variableRenamingPolicy5;
        compilerOptions0.setSummaryDetailLevel(999);
        boolean boolean9 = compilerOptions0.getInferTypes();
        compilerOptions0.setDefineToStringLiteral("java.nio.ByteBufferAsDoubleBufferB[pos=0 lim=12 cap=12]", "1970-01-01");
        compilerOptions0.optimizeParameters = false;
        boolean boolean15 = compilerOptions0.shouldColorizeErrorOutput();
        compilerOptions0.setLineBreak(false);
        org.junit.Assert.assertNotNull(errorFormat3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test1850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1850");
        java.io.File file2 = null;
        java.io.File file3 = java.io.File.createTempFile("hi!", "ISO", file2);
        boolean boolean6 = file3.setWritable(false, false);
        java.net.URI uRI7 = file3.toURI();
        java.lang.String str8 = uRI7.getSchemeSpecificPart();
        java.lang.String str9 = uRI7.getRawQuery();
        java.lang.String str10 = uRI7.getSchemeSpecificPart();
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file3.toString(), "/tmp/hi!7360725204196022199ISO");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(uRI7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "/tmp/hi!7360725204196022199ISO" + "'", str8, "/tmp/hi!7360725204196022199ISO");
        org.junit.Assert.assertNull(str9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/tmp/hi!7360725204196022199ISO" + "'", str10, "/tmp/hi!7360725204196022199ISO");
    }

    @Test
    public void test1851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1851");
        com.google.javascript.jscomp.SourceMap.LocationMapping locationMapping2 = new com.google.javascript.jscomp.SourceMap.LocationMapping("hi!", "(1970-01-01+00:00:52)");
    }

    @Test
    public void test1852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1852");
        com.google.protobuf.ByteString.Output output1 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream3 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output1, (int) 'a');
        byte[] byteArray4 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite5 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions6 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray4, extensionRegistryLite5);
        output1.write(byteArray4);
        com.google.protobuf.CodedInputStream codedInputStream10 = com.google.protobuf.CodedInputStream.newInstance(byteArray4, 21, 4);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange extensionRange11 = com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.parseFrom(codedInputStream10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 21");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(output1);
        org.junit.Assert.assertNotNull(codedOutputStream3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(methodOptions6);
        org.junit.Assert.assertNotNull(codedInputStream10);
    }

    @Test
    public void test1853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1853");
        java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite> priorityMap0 = new java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite>();
        com.google.protobuf.DescriptorProtos.FileOptions fileOptions1 = com.google.protobuf.DescriptorProtos.FileOptions.getDefaultInstance();
        java.util.List<com.google.protobuf.DescriptorProtos.UninterpretedOption> uninterpretedOptionList2 = fileOptions1.getUninterpretedOptionList();
        com.google.protobuf.MessageLite messageLite3 = priorityMap0.remove((java.lang.Object) fileOptions1);
        org.junit.Assert.assertNotNull(fileOptions1);
        org.junit.Assert.assertNotNull(uninterpretedOptionList2);
        org.junit.Assert.assertNull(messageLite3);
    }

    @Test
    public void test1854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1854");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy5 = null;
        compilerOptions0.variableRenaming = variableRenamingPolicy5;
        compilerOptions0.setSummaryDetailLevel(999);
        compilerOptions0.setRemoveClosureAsserts(false);
        boolean boolean11 = compilerOptions0.reserveRawExports;
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel12 = com.google.javascript.jscomp.SourceMap.DetailLevel.ALL;
        compilerOptions0.setSourceMapDetailLevel(detailLevel12);
        org.junit.Assert.assertNotNull(errorFormat3);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(detailLevel12);
    }

    @Test
    public void test1855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1855");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasThisType();
        java.lang.String str2 = jSDocInfo0.toString();
        boolean boolean3 = jSDocInfo0.isInterface();
        boolean boolean4 = jSDocInfo0.hasBaseType();
        java.lang.String str5 = jSDocInfo0.getLendsName();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "JSDocInfo" + "'", str2, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str5);
    }

    @Test
    public void test1856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1856");
        int int0 = com.google.protobuf.DescriptorProtos.DescriptorProto.OPTIONS_FIELD_NUMBER;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 7 + "'", int0 == 7);
    }

    @Test
    public void test1857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1857");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.of(localDateTime4, (java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime10.withYear((int) (short) 1);
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset16);
        int int18 = localDateTime17.getYear();
        java.time.Instant instant19 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset23);
        java.time.OffsetDateTime offsetDateTime25 = java.time.OffsetDateTime.ofInstant(instant19, (java.time.ZoneId) zoneOffset23);
        java.time.Instant instant26 = localDateTime17.toInstant(zoneOffset23);
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime32 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset31);
        java.time.ZoneOffset zoneOffset36 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime37 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset36);
        java.time.ZonedDateTime zonedDateTime38 = java.time.ZonedDateTime.of(localDateTime32, (java.time.ZoneId) zoneOffset36);
        java.time.temporal.ChronoField chronoField40 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit41 = chronoField40.getBaseUnit();
        java.time.LocalDateTime localDateTime42 = localDateTime32.plus((long) 1970, temporalUnit41);
        java.time.ZoneOffset zoneOffset47 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime48 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset47);
        java.time.ZoneOffset zoneOffset52 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime53 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset52);
        java.time.ZonedDateTime zonedDateTime54 = java.time.ZonedDateTime.of(localDateTime48, (java.time.ZoneId) zoneOffset52);
        java.time.temporal.ChronoField chronoField56 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit57 = chronoField56.getBaseUnit();
        java.time.LocalDateTime localDateTime58 = localDateTime48.plus((long) 1970, temporalUnit57);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime59 = localDateTime42.minus((long) 43, temporalUnit57);
        java.time.Instant instant60 = instant26.plus((long) 16384, temporalUnit57);
        java.time.ZoneOffset zoneOffset64 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime65 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset64);
        java.time.ZoneOffset zoneOffset69 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime70 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset69);
        java.time.ZonedDateTime zonedDateTime71 = java.time.ZonedDateTime.of(localDateTime65, (java.time.ZoneId) zoneOffset69);
        java.time.ZonedDateTime zonedDateTime73 = zonedDateTime71.withHour(16);
        java.time.ZoneOffset zoneOffset77 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime78 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset77);
        java.time.ZoneOffset zoneOffset82 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime83 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset82);
        java.time.ZonedDateTime zonedDateTime84 = java.time.ZonedDateTime.of(localDateTime78, (java.time.ZoneId) zoneOffset82);
        java.time.ZonedDateTime zonedDateTime86 = zonedDateTime84.withYear((int) (short) 1);
        java.time.temporal.ChronoField chronoField87 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit88 = chronoField87.getBaseUnit();
        java.time.ZonedDateTime zonedDateTime89 = zonedDateTime84.truncatedTo(temporalUnit88);
        long long90 = instant26.until((java.time.temporal.Temporal) zonedDateTime73, temporalUnit88);
        java.time.ZonedDateTime zonedDateTime91 = zonedDateTime10.with((java.time.temporal.TemporalAdjuster) instant26);
        java.time.ZonedDateTime zonedDateTime92 = zonedDateTime91.withFixedOffsetZone();
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(zoneOffset36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(zonedDateTime38);
        org.junit.Assert.assertTrue("'" + chronoField40 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField40.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit41 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit41.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(zoneOffset47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(zoneOffset52);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(zonedDateTime54);
        org.junit.Assert.assertTrue("'" + chronoField56 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField56.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit57 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit57.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime59);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertNotNull(zoneOffset64);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(zoneOffset69);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(zonedDateTime71);
        org.junit.Assert.assertNotNull(zonedDateTime73);
        org.junit.Assert.assertNotNull(zoneOffset77);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(zoneOffset82);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(zonedDateTime84);
        org.junit.Assert.assertNotNull(zonedDateTime86);
        org.junit.Assert.assertTrue("'" + chronoField87 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField87.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit88 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit88.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(zonedDateTime89);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 16L + "'", long90 == 16L);
        org.junit.Assert.assertNotNull(zonedDateTime91);
        org.junit.Assert.assertNotNull(zonedDateTime92);
    }

    @Test
    public void test1858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1858");
        com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder builder0 = com.google.javascript.jscomp.FunctionInformationMap.Entry.newBuilder();
        com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder builder1 = builder0.clearModuleName();
        java.lang.String str2 = builder0.getModuleName();
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor3 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.Message.Builder builder4 = builder0.newBuilderForField(fieldDescriptor3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test1859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1859");
        java.time.Period period0 = java.time.Period.ZERO;
        java.time.chrono.ChronoPeriod chronoPeriod1 = period0.normalized();
        int int2 = period0.getYears();
        java.time.Period period3 = period0.negated();
        int int4 = period3.getYears();
        boolean boolean5 = period3.isNegative();
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(chronoPeriod1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test1860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1860");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.nio.file.attribute.FileTime fileTime1 = java.nio.file.attribute.FileTime.from(instant0);
        java.time.Instant instant3 = instant0.plusNanos((long) 32);
        java.lang.String str4 = instant3.toString();
        java.time.temporal.ChronoField chronoField5 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit6 = chronoField5.getBaseUnit();
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset10);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.of(localDateTime11, (java.time.ZoneId) zoneOffset15);
        java.time.ZonedDateTime zonedDateTime19 = zonedDateTime17.withYear((int) (short) 1);
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset23);
        int int25 = localDateTime24.getYear();
        java.time.LocalDate localDate26 = localDateTime24.toLocalDate();
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset30);
        java.time.ZoneOffset zoneOffset35 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime36 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset35);
        java.time.ZonedDateTime zonedDateTime37 = java.time.ZonedDateTime.of(localDateTime31, (java.time.ZoneId) zoneOffset35);
        java.time.temporal.ChronoField chronoField39 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit40 = chronoField39.getBaseUnit();
        java.time.LocalDateTime localDateTime41 = localDateTime31.plus((long) 1970, temporalUnit40);
        java.time.LocalTime localTime42 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localDateTime41);
        java.time.ZoneOffset zoneOffset46 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime47 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset46);
        java.time.OffsetDateTime offsetDateTime48 = java.time.OffsetDateTime.of(localDate26, localTime42, zoneOffset46);
        java.time.ZonedDateTime zonedDateTime49 = zonedDateTime17.withZoneSameInstant((java.time.ZoneId) zoneOffset46);
        boolean boolean50 = temporalUnit6.isSupportedBy((java.time.temporal.Temporal) zonedDateTime17);
        java.time.LocalTime localTime51 = zonedDateTime17.toLocalTime();
        java.time.ZonedDateTime zonedDateTime53 = zonedDateTime17.withDayOfYear(152);
        java.time.Month month55 = java.time.Month.APRIL;
        java.time.LocalDateTime localDateTime61 = java.time.LocalDateTime.of(37, month55, 10, (int) (short) 10, 4, 37, 1);
        java.time.ZoneOffset zoneOffset65 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime66 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset65);
        java.time.ZoneOffset zoneOffset70 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime71 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset70);
        java.time.ZonedDateTime zonedDateTime72 = java.time.ZonedDateTime.of(localDateTime66, (java.time.ZoneId) zoneOffset70);
        java.time.ZonedDateTime zonedDateTime74 = zonedDateTime72.minusSeconds((long) '#');
        java.time.ZoneOffset zoneOffset78 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime79 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset78);
        java.time.ZoneOffset zoneOffset83 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime84 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset83);
        java.time.ZonedDateTime zonedDateTime85 = java.time.ZonedDateTime.of(localDateTime79, (java.time.ZoneId) zoneOffset83);
        boolean boolean86 = zonedDateTime72.isBefore((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime85);
        java.time.ZoneOffset zoneOffset87 = zonedDateTime72.getOffset();
        java.time.Instant instant88 = localDateTime61.toInstant(zoneOffset87);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime89 = zonedDateTime53.withZoneSameInstant((java.time.ZoneId) zoneOffset87);
        java.time.Clock clock90 = java.time.Clock.fixed(instant3, (java.time.ZoneId) zoneOffset87);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(fileTime1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01T00:00:00.000000032Z" + "'", str4, "1970-01-01T00:00:00.000000032Z");
        org.junit.Assert.assertTrue("'" + chronoField5 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField5.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit6 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit6.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(zonedDateTime19);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1970 + "'", int25 == 1970);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(zoneOffset35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(zonedDateTime37);
        org.junit.Assert.assertTrue("'" + chronoField39 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField39.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit40 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit40.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(zoneOffset46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(offsetDateTime48);
        org.junit.Assert.assertNotNull(zonedDateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(zonedDateTime53);
        org.junit.Assert.assertTrue("'" + month55 + "' != '" + java.time.Month.APRIL + "'", month55.equals(java.time.Month.APRIL));
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(zoneOffset65);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(zoneOffset70);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(zonedDateTime72);
        org.junit.Assert.assertNotNull(zonedDateTime74);
        org.junit.Assert.assertNotNull(zoneOffset78);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(zoneOffset83);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(zonedDateTime85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(zoneOffset87);
        org.junit.Assert.assertNotNull(instant88);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime89);
        org.junit.Assert.assertNotNull(clock90);
    }

    @Test
    public void test1861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1861");
        java.net.SocketException socketException1 = new java.net.SocketException("Named type with empty name component");
        java.security.cert.CertificateEncodingException certificateEncodingException2 = new java.security.cert.CertificateEncodingException((java.lang.Throwable) socketException1);
    }

    @Test
    public void test1862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1862");
        java.time.chrono.IsoChronology isoChronology0 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.temporal.ChronoField chronoField1 = java.time.temporal.ChronoField.OFFSET_SECONDS;
        java.time.Instant instant2 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset6);
        java.time.OffsetDateTime offsetDateTime8 = java.time.OffsetDateTime.ofInstant(instant2, (java.time.ZoneId) zoneOffset6);
        java.time.OffsetDateTime offsetDateTime10 = offsetDateTime8.minusDays((long) (short) 100);
        java.lang.String str11 = offsetDateTime8.toString();
        java.time.temporal.ChronoField chronoField12 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        int int13 = offsetDateTime8.get((java.time.temporal.TemporalField) chronoField12);
        java.time.OffsetDateTime offsetDateTime15 = offsetDateTime8.withDayOfMonth((int) (short) 10);
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.MAX;
        java.time.OffsetDateTime offsetDateTime17 = offsetDateTime15.withOffsetSameLocal(zoneOffset16);
        boolean boolean18 = chronoField1.isSupportedBy((java.time.temporal.TemporalAccessor) zoneOffset16);
        java.time.temporal.ValueRange valueRange19 = isoChronology0.range(chronoField1);
        org.junit.Assert.assertNotNull(isoChronology0);
        org.junit.Assert.assertTrue("'" + chronoField1 + "' != '" + java.time.temporal.ChronoField.OFFSET_SECONDS + "'", chronoField1.equals(java.time.temporal.ChronoField.OFFSET_SECONDS));
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(offsetDateTime8);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-01T00:00:52+00:00:52" + "'", str11, "1970-01-01T00:00:52+00:00:52");
        org.junit.Assert.assertTrue("'" + chronoField12 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField12.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 12 + "'", int13 == 12);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(offsetDateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(valueRange19);
    }

    @Test
    public void test1863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1863");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) ' ');
        boolean boolean2 = charBuffer1.isDirect();
        java.nio.CharBuffer charBuffer4 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer6 = charBuffer4.put('a');
        char[] charArray8 = new char[] { '4' };
        java.nio.CharBuffer charBuffer9 = charBuffer6.get(charArray8);
        java.nio.CharBuffer charBuffer10 = charBuffer6.compact();
        java.nio.CharBuffer charBuffer12 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer14 = charBuffer12.put('a');
        java.nio.CharBuffer charBuffer16 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer18 = charBuffer16.put('a');
        char[] charArray20 = new char[] { '4' };
        java.nio.CharBuffer charBuffer21 = charBuffer18.get(charArray20);
        java.nio.CharBuffer charBuffer22 = charBuffer18.compact();
        com.google.common.collect.ImmutableSet<java.lang.Appendable> appendableSet23 = com.google.common.collect.ImmutableSet.of((java.lang.Appendable) charBuffer1, (java.lang.Appendable) charBuffer6, (java.lang.Appendable) charBuffer12, (java.lang.Appendable) charBuffer22);
        java.nio.CharBuffer charBuffer24 = java.nio.CharBuffer.wrap((java.lang.CharSequence) charBuffer6);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.CharBuffer charBuffer26 = charBuffer24.append('+');
            org.junit.Assert.fail("Expected exception of type java.nio.ReadOnlyBufferException; message: null");
        } catch (java.nio.ReadOnlyBufferException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charBuffer4);
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer9);
        org.junit.Assert.assertNotNull(charBuffer10);
        org.junit.Assert.assertNotNull(charBuffer12);
        org.junit.Assert.assertNotNull(charBuffer14);
        org.junit.Assert.assertNotNull(charBuffer16);
        org.junit.Assert.assertNotNull(charBuffer18);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer21);
        org.junit.Assert.assertNotNull(charBuffer22);
        org.junit.Assert.assertNotNull(appendableSet23);
        org.junit.Assert.assertNotNull(charBuffer24);
    }

    @Test
    public void test1864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1864");
        java.time.Period period0 = java.time.Period.ZERO;
        java.time.chrono.ChronoPeriod chronoPeriod1 = period0.normalized();
        java.time.temporal.ChronoField chronoField2 = java.time.temporal.ChronoField.EPOCH_DAY;
        java.time.Instant instant3 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime8 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset7);
        java.time.OffsetDateTime offsetDateTime9 = java.time.OffsetDateTime.ofInstant(instant3, (java.time.ZoneId) zoneOffset7);
        java.time.temporal.ValueRange valueRange10 = chronoField2.rangeRefinedBy((java.time.temporal.TemporalAccessor) offsetDateTime9);
        java.time.temporal.Temporal temporal11 = period0.subtractFrom((java.time.temporal.Temporal) offsetDateTime9);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZoneOffset zoneOffset20 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset20);
        java.time.ZonedDateTime zonedDateTime22 = java.time.ZonedDateTime.of(localDateTime16, (java.time.ZoneId) zoneOffset20);
        java.time.ZonedDateTime zonedDateTime24 = zonedDateTime22.withYear((int) (short) 1);
        java.time.OffsetDateTime offsetDateTime25 = zonedDateTime22.toOffsetDateTime();
        java.time.ZonedDateTime zonedDateTime27 = zonedDateTime22.plusDays((long) (byte) -1);
        boolean boolean28 = offsetDateTime9.equals((java.lang.Object) zonedDateTime22);
        java.time.OffsetDateTime offsetDateTime30 = offsetDateTime9.plusDays((long) '0');
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(chronoPeriod1);
        org.junit.Assert.assertTrue("'" + chronoField2 + "' != '" + java.time.temporal.ChronoField.EPOCH_DAY + "'", chronoField2.equals(java.time.temporal.ChronoField.EPOCH_DAY));
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(valueRange10);
        org.junit.Assert.assertNotNull(temporal11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zoneOffset20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zonedDateTime22);
        org.junit.Assert.assertNotNull(zonedDateTime24);
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertNotNull(zonedDateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(offsetDateTime30);
    }

    @Test
    public void test1865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1865");
        java.text.ParseException parseException2 = new java.text.ParseException("(1970-01-01+00:00:52)", (int) '#');
        int int3 = parseException2.getErrorOffset();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 35 + "'", int3 == 35);
    }

    @Test
    public void test1866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1866");
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder1 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder3 = builder1.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder4 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label5 = builder4.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder6 = builder1.addExtension(builder4);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder7 = builder1.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder8 = builder7.getOptionsBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder9 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder11 = builder9.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder12 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label13 = builder12.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder14 = builder9.addExtension(builder12);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder15 = builder9.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder16 = builder15.getOptionsBuilder();
        java.io.InputStream inputStream17 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions18 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream17);
        boolean boolean19 = enumOptions18.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder20 = builder16.mergeFrom(enumOptions18);
        com.google.protobuf.UnknownFieldSet unknownFieldSet21 = builder16.getUnknownFields();
        com.google.protobuf.CodedOutputStream codedOutputStream22 = null;
        unknownFieldSet21.writeTo(codedOutputStream22);
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder24 = builder8.setUnknownFields(unknownFieldSet21);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder25 = builder0.mergeUnknownFields(unknownFieldSet21);
        com.google.protobuf.Descriptors.Descriptor descriptor27 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto28 = descriptor27.toProto();
        boolean boolean29 = descriptorProto28.isInitialized();
        com.google.protobuf.DescriptorProtos.MessageOptions messageOptions30 = descriptorProto28.getOptions();
        com.google.protobuf.DescriptorProtos.MessageOptions.Builder builder31 = messageOptions30.newBuilderForType();
        com.google.protobuf.DescriptorProtos.MessageOptions.Builder builder33 = builder31.setMessageSetWireFormat(false);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder34 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output36 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream38 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output36, (int) 'a');
        byte[] byteArray39 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite40 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions41 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray39, extensionRegistryLite40);
        output36.write(byteArray39);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder43 = builder34.mergeFrom(byteArray39);
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions44 = builder34.buildPartial();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder45 = builder34.addUninterpretedOptionBuilder();
        com.google.protobuf.DescriptorProtos.UninterpretedOption uninterpretedOption46 = builder45.buildPartial();
        java.lang.String str47 = uninterpretedOption46.getIdentifierValue();
        int int48 = uninterpretedOption46.getNameCount();
        com.google.protobuf.DescriptorProtos.MessageOptions.Builder builder49 = builder33.addUninterpretedOption(uninterpretedOption46);
        com.google.protobuf.DescriptorProtos.UninterpretedOption uninterpretedOption50 = uninterpretedOption46.getDefaultInstanceForType();
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder51 = builder0.addUninterpretedOption(16384, uninterpretedOption46);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 16384, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + label5 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label5.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + label13 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label13.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(enumOptions18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(unknownFieldSet21);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(descriptor27);
        org.junit.Assert.assertNotNull(descriptorProto28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(messageOptions30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(output36);
        org.junit.Assert.assertNotNull(codedOutputStream38);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(methodOptions41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(methodOptions44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(uninterpretedOption46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(uninterpretedOption50);
    }

    @Test
    public void test1867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1867");
        // The following exception was thrown during execution in test generation
        try {
            long long1 = java.util.Date.parse("// Input %num%");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1868");
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        boolean boolean6 = strSet4.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream7 = strSet4.stream();
        java.util.stream.Stream<java.lang.String> strStream8 = strStream7.distinct();
        java.util.Spliterator<java.lang.String> strSpliterator9 = strStream8.spliterator();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strStream7);
        org.junit.Assert.assertNotNull(strStream8);
        org.junit.Assert.assertNotNull(strSpliterator9);
    }

    @Test
    public void test1869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1869");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean4 = node3.isStringKey();
        boolean boolean5 = node3.isTrue();
        com.google.javascript.rhino.InputId inputId7 = new com.google.javascript.rhino.InputId("NUMBER 52.0 0");
        node3.setInputId(inputId7);
        boolean boolean9 = node3.isThis();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean15 = node14.isStringKey();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(0, node14);
        boolean boolean17 = node16.isFor();
        node16.setLineno(0);
        com.google.javascript.rhino.Node node20 = node3.copyInformationFromForTree(node16);
        java.lang.String str21 = node20.getSourceFileName();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertNull(str21);
    }

    @Test
    public void test1870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1870");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        int int5 = localDateTime4.getYear();
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset9);
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset14);
        java.time.ZonedDateTime zonedDateTime16 = java.time.ZonedDateTime.of(localDateTime10, (java.time.ZoneId) zoneOffset14);
        boolean boolean17 = localDateTime4.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime10);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder18 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder20 = builder18.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder21 = builder20.clearSourceCodeInfo();
        boolean boolean22 = builder20.hasOptions();
        boolean boolean23 = localDateTime4.equals((java.lang.Object) builder20);
        int int24 = builder20.getDependencyCount();
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zonedDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
    }

    @Test
    public void test1871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1871");
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto0 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.getDefaultInstance();
        boolean boolean1 = serviceDescriptorProto0.hasOptions();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder2 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.newBuilder(serviceDescriptorProto0);
        byte[] byteArray3 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite4 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions5 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray3, extensionRegistryLite4);
        com.google.protobuf.CodedInputStream codedInputStream8 = com.google.protobuf.CodedInputStream.newInstance(byteArray3, 16, (int) 'a');
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder9 = builder2.mergeFrom(byteArray3);
        java.util.List<com.google.protobuf.DescriptorProtos.MethodDescriptorProto> methodDescriptorProtoList10 = builder9.getMethodList();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder11 = builder9.clearMethod();
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto12 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.getDefaultInstance();
        boolean boolean13 = methodDescriptorProto12.hasOutputType();
        com.google.protobuf.CodedOutputStream codedOutputStream14 = null;
        methodDescriptorProto12.writeTo(codedOutputStream14);
        boolean boolean16 = methodDescriptorProto12.hasOutputType();
        boolean boolean17 = methodDescriptorProto12.hasOutputType();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder18 = builder11.addMethod(methodDescriptorProto12);
        com.google.protobuf.Descriptors.Descriptor descriptor19 = builder11.getDescriptorForType();
        org.junit.Assert.assertNotNull(serviceDescriptorProto0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(methodOptions5);
        org.junit.Assert.assertNotNull(codedInputStream8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(methodDescriptorProtoList10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(methodDescriptorProto12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(descriptor19);
    }

    @Test
    public void test1872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1872");
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions0 = com.google.protobuf.DescriptorProtos.EnumValueOptions.getDefaultInstance();
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder1 = com.google.protobuf.DescriptorProtos.EnumValueOptions.newBuilder(enumValueOptions0);
        java.io.InputStream inputStream2 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder3 = builder1.mergeFrom(inputStream2);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder4 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output6 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream8 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output6, (int) 'a');
        byte[] byteArray9 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite10 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions11 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray9, extensionRegistryLite10);
        output6.write(byteArray9);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder13 = builder4.mergeFrom(byteArray9);
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions14 = builder4.buildPartial();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder15 = builder4.addUninterpretedOptionBuilder();
        com.google.protobuf.DescriptorProtos.UninterpretedOption uninterpretedOption16 = builder15.buildPartial();
        java.lang.String str17 = uninterpretedOption16.getIdentifierValue();
        int int18 = uninterpretedOption16.getNameCount();
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder19 = builder1.addUninterpretedOption(uninterpretedOption16);
        java.lang.String str20 = uninterpretedOption16.getIdentifierValue();
        org.junit.Assert.assertNotNull(enumValueOptions0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(output6);
        org.junit.Assert.assertNotNull(codedOutputStream8);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(methodOptions11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(methodOptions14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(uninterpretedOption16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test1873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1873");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.lang.String str1 = localDate0.toString();
        java.time.chrono.IsoChronology isoChronology2 = localDate0.getChronology();
        java.lang.String str3 = isoChronology2.getCalendarType();
        java.lang.String str4 = isoChronology2.getCalendarType();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "2022-02-21" + "'", str1, "2022-02-21");
        org.junit.Assert.assertNotNull(isoChronology2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "iso8601" + "'", str3, "iso8601");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "iso8601" + "'", str4, "iso8601");
    }

    @Test
    public void test1874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1874");
        java.nio.FloatBuffer floatBuffer1 = java.nio.FloatBuffer.allocate(6);
        java.nio.FloatBuffer floatBuffer2 = floatBuffer1.asReadOnlyBuffer();
        java.nio.FloatBuffer floatBuffer3 = floatBuffer1.duplicate();
        java.nio.FloatBuffer floatBuffer5 = java.nio.FloatBuffer.allocate(6);
        java.nio.FloatBuffer floatBuffer6 = floatBuffer5.asReadOnlyBuffer();
        java.nio.FloatBuffer floatBuffer7 = floatBuffer5.asReadOnlyBuffer();
        java.nio.ByteOrder byteOrder8 = floatBuffer7.order();
        boolean boolean9 = floatBuffer7.hasArray();
        java.nio.FloatBuffer floatBuffer10 = floatBuffer3.put(floatBuffer7);
        // The following exception was thrown during execution in test generation
        try {
            int int11 = floatBuffer7.arrayOffset();
            org.junit.Assert.fail("Expected exception of type java.nio.ReadOnlyBufferException; message: null");
        } catch (java.nio.ReadOnlyBufferException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatBuffer1);
        org.junit.Assert.assertNotNull(floatBuffer2);
        org.junit.Assert.assertNotNull(floatBuffer3);
        org.junit.Assert.assertNotNull(floatBuffer5);
        org.junit.Assert.assertNotNull(floatBuffer6);
        org.junit.Assert.assertNotNull(floatBuffer7);
        org.junit.Assert.assertNotNull(byteOrder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(floatBuffer10);
    }

    @Test
    public void test1875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1875");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.of(localDateTime4, (java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime10.plusDays((long) '4');
        java.time.ZonedDateTime zonedDateTime14 = zonedDateTime10.withMinute((int) '#');
        java.time.format.DateTimeFormatter dateTimeFormatter15 = java.time.format.DateTimeFormatter.BASIC_ISO_DATE;
        java.lang.String str16 = zonedDateTime10.format(dateTimeFormatter15);
        java.time.ZonedDateTime zonedDateTime18 = zonedDateTime10.plusWeeks(2L);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(zonedDateTime14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "19700101+000052" + "'", str16, "19700101+000052");
        org.junit.Assert.assertNotNull(zonedDateTime18);
    }

    @Test
    public void test1876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1876");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset10);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.of(localDateTime11, (java.time.ZoneId) zoneOffset15);
        java.time.Clock clock18 = java.time.Clock.fixed(instant0, (java.time.ZoneId) zoneOffset15);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.now(clock18);
        java.time.LocalDate localDate20 = java.time.LocalDate.now(clock18);
        com.google.protobuf.Descriptors.Descriptor descriptor21 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto22 = descriptor21.toProto();
        boolean boolean23 = descriptorProto22.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList24 = descriptorProto22.getNestedTypeList();
        int int25 = descriptorProto22.getExtensionRangeCount();
        boolean boolean26 = localDate20.equals((java.lang.Object) descriptorProto22);
        java.time.LocalDateTime localDateTime31 = localDate20.atTime(2, (int) '+', (int) (short) 0, 4096);
        java.time.chrono.Era era32 = localDate20.getEra();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(clock18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(descriptor21);
        org.junit.Assert.assertNotNull(descriptorProto22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + era32 + "' != '" + java.time.chrono.IsoEra.CE + "'", era32.equals(java.time.chrono.IsoEra.CE));
    }

    @Test
    public void test1877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1877");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder3 = builder2.clearSourceCodeInfo();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder4 = builder2.getSourceCodeInfoBuilder();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo sourceCodeInfo5 = builder4.getDefaultInstanceForType();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder6 = sourceCodeInfo5.newBuilderForType();
        java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite> priorityMap7 = new java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite>();
        java.lang.Object obj8 = priorityMap7.clone();
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder9 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.newBuilder();
        boolean boolean10 = priorityMap7.containsValue((java.lang.Object) builder9);
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder12 = builder9.setName("java.nio.ByteBufferAsDoubleBufferB[pos=0 lim=12 cap=12]");
        com.google.protobuf.ByteString byteString13 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder14 = builder9.mergeFrom(byteString13);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite15 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder16 = builder6.mergeFrom(byteString13, extensionRegistryLite15);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite17 = null;
        com.google.protobuf.DescriptorProtos.ServiceOptions serviceOptions18 = com.google.protobuf.DescriptorProtos.ServiceOptions.parseFrom(byteString13, extensionRegistryLite17);
        java.util.Map<com.google.protobuf.Descriptors.FieldDescriptor, java.lang.Object> fieldDescriptorMap19 = serviceOptions18.getAllFields();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder20 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder22 = builder20.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder23 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label24 = builder23.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder25 = builder20.addExtension(builder23);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder26 = builder20.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder27 = builder26.getOptionsBuilder();
        java.io.InputStream inputStream28 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions29 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream28);
        boolean boolean30 = enumOptions29.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder31 = builder27.mergeFrom(enumOptions29);
        com.google.protobuf.UnknownFieldSet unknownFieldSet32 = builder27.getUnknownFields();
        com.google.protobuf.CodedOutputStream codedOutputStream33 = null;
        unknownFieldSet32.writeTo(codedOutputStream33);
        byte[] byteArray35 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite36 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions37 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray35, extensionRegistryLite36);
        com.google.protobuf.CodedOutputStream codedOutputStream40 = com.google.protobuf.CodedOutputStream.newInstance(byteArray35, (int) (short) 0, 1);
        com.google.protobuf.CodedOutputStream codedOutputStream43 = com.google.protobuf.CodedOutputStream.newInstance(byteArray35, (int) ' ', 0);
        java.io.InputStream inputStream44 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location45 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream44);
        boolean boolean46 = location45.isInitialized();
        codedOutputStream43.writeGroupNoTag((com.google.protobuf.MessageLite) location45);
        unknownFieldSet32.writeAsMessageSetTo(codedOutputStream43);
        java.util.Map<java.lang.Integer, com.google.protobuf.UnknownFieldSet.Field> intMap49 = unknownFieldSet32.asMap();
        byte[] byteArray50 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite51 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions52 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray50, extensionRegistryLite51);
        com.google.protobuf.CodedOutputStream codedOutputStream55 = com.google.protobuf.CodedOutputStream.newInstance(byteArray50, (int) (short) 0, 1);
        com.google.protobuf.CodedOutputStream codedOutputStream58 = com.google.protobuf.CodedOutputStream.newInstance(byteArray50, (int) ' ', 0);
        int int59 = codedOutputStream58.spaceLeft();
        unknownFieldSet32.writeTo(codedOutputStream58);
        serviceOptions18.writeTo(codedOutputStream58);
        // The following exception was thrown during execution in test generation
        try {
            codedOutputStream58.writeStringNoTag("NUMBER 52.0");
            org.junit.Assert.fail("Expected exception of type com.google.protobuf.CodedOutputStream.OutOfSpaceException; message: CodedOutputStream was writing to a flat byte array and ran out of space.");
        } catch (com.google.protobuf.CodedOutputStream.OutOfSpaceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(sourceCodeInfo5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "{}");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(byteString13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(serviceOptions18);
        org.junit.Assert.assertNotNull(fieldDescriptorMap19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + label24 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label24.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(enumOptions29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(unknownFieldSet32);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(methodOptions37);
        org.junit.Assert.assertNotNull(codedOutputStream40);
        org.junit.Assert.assertNotNull(codedOutputStream43);
        org.junit.Assert.assertNotNull(location45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(intMap49);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(methodOptions52);
        org.junit.Assert.assertNotNull(codedOutputStream55);
        org.junit.Assert.assertNotNull(codedOutputStream58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
    }

    @Test
    public void test1878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1878");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType4 = jSTypeRegistry2.createObjectType(objectType3);
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.jstype.ObjectType objectType8 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry7.createObjectType(objectType8);
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10, false);
        com.google.javascript.rhino.jstype.ObjectType objectType13 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType14 = jSTypeRegistry12.createObjectType(objectType13);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair15 = objectType9.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType14);
        com.google.javascript.rhino.Node node16 = objectType9.getRootNode();
        com.google.javascript.rhino.jstype.EnumType enumType17 = objectType9.toMaybeEnumType();
        boolean boolean18 = objectType9.isParameterizedType();
        com.google.javascript.rhino.jstype.JSType jSType19 = jSTypeRegistry2.createNullableType((com.google.javascript.rhino.jstype.JSType) objectType9);
        com.google.javascript.rhino.ErrorReporter errorReporter21 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter21, false);
        com.google.javascript.rhino.jstype.ObjectType objectType24 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType25 = jSTypeRegistry23.createObjectType(objectType24);
        com.google.javascript.rhino.ErrorReporter errorReporter26 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter26, false);
        com.google.javascript.rhino.jstype.ObjectType objectType29 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType30 = jSTypeRegistry28.createObjectType(objectType29);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair31 = objectType25.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType30);
        boolean boolean32 = objectType30.isTemplateType();
        boolean boolean33 = objectType30.isNativeObjectType();
        boolean boolean34 = objectType30.isNumberValueType();
        jSTypeRegistry2.unregisterPropertyOnType("goog.exportSymbol", (com.google.javascript.rhino.jstype.JSType) objectType30);
        com.google.javascript.rhino.ErrorReporter errorReporter36 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry38 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter36, false);
        com.google.javascript.rhino.jstype.ObjectType objectType39 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType40 = jSTypeRegistry38.createObjectType(objectType39);
        com.google.javascript.rhino.ErrorReporter errorReporter41 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry43 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter41, false);
        com.google.javascript.rhino.jstype.ObjectType objectType44 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType45 = jSTypeRegistry43.createObjectType(objectType44);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair46 = objectType40.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType45);
        boolean boolean47 = objectType45.isTemplateType();
        boolean boolean48 = objectType45.isNativeObjectType();
        boolean boolean49 = objectType45.isNumberValueType();
        com.google.javascript.rhino.ErrorReporter errorReporter51 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry53 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter51, false);
        com.google.javascript.rhino.jstype.ObjectType objectType54 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType55 = jSTypeRegistry53.createObjectType(objectType54);
        com.google.javascript.rhino.ErrorReporter errorReporter56 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry58 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter56, false);
        com.google.javascript.rhino.jstype.ObjectType objectType59 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType60 = jSTypeRegistry58.createObjectType(objectType59);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair61 = objectType55.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType60);
        java.lang.String str62 = objectType60.getDisplayName();
        com.google.javascript.rhino.ErrorReporter errorReporter63 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry65 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter63, false);
        com.google.javascript.rhino.jstype.ObjectType objectType66 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType67 = jSTypeRegistry65.createObjectType(objectType66);
        com.google.javascript.rhino.ErrorReporter errorReporter68 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry70 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter68, false);
        com.google.javascript.rhino.jstype.ObjectType objectType71 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType72 = jSTypeRegistry70.createObjectType(objectType71);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair73 = objectType67.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType72);
        boolean boolean74 = objectType72.isTemplateType();
        com.google.javascript.rhino.jstype.JSType jSType75 = objectType60.getLeastSupertype((com.google.javascript.rhino.jstype.JSType) objectType72);
        com.google.javascript.rhino.Node node79 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean80 = node79.isFromExterns();
        java.lang.String str81 = node79.toString();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable82 = node79.siblings();
        boolean boolean83 = objectType45.defineDeclaredProperty("", (com.google.javascript.rhino.jstype.JSType) objectType72, node79);
        com.google.javascript.rhino.jstype.JSType jSType85 = jSTypeRegistry2.getGreatestSubtypeWithProperty((com.google.javascript.rhino.jstype.JSType) objectType72, "{1572375491}");
        boolean boolean86 = objectType72.isObject();
        org.junit.Assert.assertNotNull(objectType4);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertNotNull(objectType14);
        org.junit.Assert.assertNotNull(typePair15);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNull(enumType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jSType19);
        org.junit.Assert.assertNotNull(objectType25);
        org.junit.Assert.assertNotNull(objectType30);
        org.junit.Assert.assertNotNull(typePair31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(objectType40);
        org.junit.Assert.assertNotNull(objectType45);
        org.junit.Assert.assertNotNull(typePair46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(objectType55);
        org.junit.Assert.assertNotNull(objectType60);
        org.junit.Assert.assertNotNull(typePair61);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertNotNull(objectType72);
        org.junit.Assert.assertNotNull(typePair73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(jSType75);
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "NUMBER 52.0 0" + "'", str81, "NUMBER 52.0 0");
        org.junit.Assert.assertNotNull(nodeIterable82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(jSType85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test1879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1879");
        java.io.File file2 = null;
        java.io.File file3 = java.io.File.createTempFile("hi!", "ISO", file2);
        boolean boolean6 = file3.setWritable(false, false);
        java.net.URI uRI7 = file3.toURI();
        java.io.PrintStream printStream8 = new java.io.PrintStream(file3);
        boolean boolean10 = file3.setReadable(true);
        boolean boolean11 = file3.setReadOnly();
        boolean boolean12 = file3.createNewFile();
        com.google.javascript.jscomp.JSSourceFile jSSourceFile13 = com.google.javascript.jscomp.JSSourceFile.fromFile(file3);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file3.toString(), "/tmp/hi!4599265101006688076ISO");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(uRI7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(jSSourceFile13);
    }

    @Test
    public void test1880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1880");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.OffsetDateTime offsetDateTime8 = offsetDateTime6.minusDays((long) (short) 100);
        java.lang.String str9 = offsetDateTime6.toString();
        java.time.LocalTime localTime10 = offsetDateTime6.toLocalTime();
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        int int17 = localDateTime16.getYear();
        java.time.Instant instant18 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset22);
        java.time.OffsetDateTime offsetDateTime24 = java.time.OffsetDateTime.ofInstant(instant18, (java.time.ZoneId) zoneOffset22);
        java.time.Instant instant25 = localDateTime16.toInstant(zoneOffset22);
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset30);
        java.time.ZoneOffset zoneOffset35 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime36 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset35);
        java.time.ZonedDateTime zonedDateTime37 = java.time.ZonedDateTime.of(localDateTime31, (java.time.ZoneId) zoneOffset35);
        java.time.temporal.ChronoField chronoField39 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit40 = chronoField39.getBaseUnit();
        java.time.LocalDateTime localDateTime41 = localDateTime31.plus((long) 1970, temporalUnit40);
        java.time.ZoneOffset zoneOffset46 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime47 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset46);
        java.time.ZoneOffset zoneOffset51 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime52 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset51);
        java.time.ZonedDateTime zonedDateTime53 = java.time.ZonedDateTime.of(localDateTime47, (java.time.ZoneId) zoneOffset51);
        java.time.temporal.ChronoField chronoField55 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit56 = chronoField55.getBaseUnit();
        java.time.LocalDateTime localDateTime57 = localDateTime47.plus((long) 1970, temporalUnit56);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime58 = localDateTime41.minus((long) 43, temporalUnit56);
        java.time.Instant instant59 = instant25.plus((long) 16384, temporalUnit56);
        java.time.LocalTime localTime60 = localTime10.plus((long) 64, temporalUnit56);
        java.time.ZoneOffset zoneOffset64 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime65 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset64);
        java.time.ZoneOffset zoneOffset69 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime70 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset69);
        java.time.ZonedDateTime zonedDateTime71 = java.time.ZonedDateTime.of(localDateTime65, (java.time.ZoneId) zoneOffset69);
        java.time.OffsetTime offsetTime72 = java.time.OffsetTime.of(localTime60, zoneOffset69);
        java.time.LocalTime localTime74 = localTime60.plusHours(57600000000000L);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(offsetDateTime8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-01T00:00:52+00:00:52" + "'", str9, "1970-01-01T00:00:52+00:00:52");
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1970 + "'", int17 == 1970);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(offsetDateTime24);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(zoneOffset35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(zonedDateTime37);
        org.junit.Assert.assertTrue("'" + chronoField39 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField39.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit40 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit40.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(zoneOffset46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(zoneOffset51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(zonedDateTime53);
        org.junit.Assert.assertTrue("'" + chronoField55 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField55.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit56 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit56.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime58);
        org.junit.Assert.assertNotNull(instant59);
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertNotNull(zoneOffset64);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(zoneOffset69);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(zonedDateTime71);
        org.junit.Assert.assertNotNull(offsetTime72);
        org.junit.Assert.assertNotNull(localTime74);
    }

    @Test
    public void test1881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1881");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        java.lang.String[] strArray11 = new java.lang.String[] { "South Korea", "Unknown class name", "ISO", "OffsetSeconds", ":" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        compilerOptions0.setReplaceStringsConfiguration("1970-01-01+00:00:52", (java.util.List<java.lang.String>) strList12);
        compilerOptions0.lineBreak = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions17 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions17.setRecordFunctionInformation(true);
        compilerOptions17.setMoveFunctionDeclarations(true);
        com.google.javascript.jscomp.CheckLevel checkLevel22 = compilerOptions17.checkMissingGetCssNameLevel;
        compilerOptions0.setCheckProvides(checkLevel22);
        boolean boolean24 = compilerOptions0.removeUnusedPrototypePropertiesInExterns;
        compilerOptions0.disambiguateProperties = false;
        org.junit.Assert.assertNotNull(errorFormat3);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + checkLevel22 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel22.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test1882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1882");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) ' ');
        boolean boolean2 = charBuffer1.isDirect();
        java.nio.CharBuffer charBuffer4 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer6 = charBuffer4.put('a');
        char[] charArray8 = new char[] { '4' };
        java.nio.CharBuffer charBuffer9 = charBuffer6.get(charArray8);
        java.nio.CharBuffer charBuffer10 = charBuffer6.compact();
        java.nio.CharBuffer charBuffer12 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer14 = charBuffer12.put('a');
        java.nio.CharBuffer charBuffer16 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer18 = charBuffer16.put('a');
        char[] charArray20 = new char[] { '4' };
        java.nio.CharBuffer charBuffer21 = charBuffer18.get(charArray20);
        java.nio.CharBuffer charBuffer22 = charBuffer18.compact();
        com.google.common.collect.ImmutableSet<java.lang.Appendable> appendableSet23 = com.google.common.collect.ImmutableSet.of((java.lang.Appendable) charBuffer1, (java.lang.Appendable) charBuffer6, (java.lang.Appendable) charBuffer12, (java.lang.Appendable) charBuffer22);
        java.time.ZoneOffset zoneOffset27 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset27);
        int int29 = localDateTime28.getYear();
        java.time.Instant instant30 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset34);
        java.time.OffsetDateTime offsetDateTime36 = java.time.OffsetDateTime.ofInstant(instant30, (java.time.ZoneId) zoneOffset34);
        java.time.Instant instant37 = localDateTime28.toInstant(zoneOffset34);
        boolean boolean38 = appendableSet23.equals((java.lang.Object) zoneOffset34);
        java.lang.Object[] objArray39 = appendableSet23.toArray();
        java.util.concurrent.TimeUnit timeUnit40 = java.util.concurrent.TimeUnit.HOURS;
        boolean boolean41 = appendableSet23.contains((java.lang.Object) timeUnit40);
        com.google.common.collect.UnmodifiableIterator<java.lang.Appendable> appendableItor42 = appendableSet23.iterator();
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charBuffer4);
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer9);
        org.junit.Assert.assertNotNull(charBuffer10);
        org.junit.Assert.assertNotNull(charBuffer12);
        org.junit.Assert.assertNotNull(charBuffer14);
        org.junit.Assert.assertNotNull(charBuffer16);
        org.junit.Assert.assertNotNull(charBuffer18);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer21);
        org.junit.Assert.assertNotNull(charBuffer22);
        org.junit.Assert.assertNotNull(appendableSet23);
        org.junit.Assert.assertNotNull(zoneOffset27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1970 + "'", int29 == 1970);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(offsetDateTime36);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000, \000\000, \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000, \000\000, \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000]");
        org.junit.Assert.assertNotNull(timeUnit40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(appendableItor42);
    }

    @Test
    public void test1883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1883");
        java.nio.channels.FileChannel.MapMode mapMode0 = java.nio.channels.FileChannel.MapMode.READ_ONLY;
        java.lang.String str1 = mapMode0.toString();
        org.junit.Assert.assertNotNull(mapMode0);
        org.junit.Assert.assertEquals(mapMode0.toString(), "READ_ONLY");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "READ_ONLY" + "'", str1, "READ_ONLY");
    }

    @Test
    public void test1884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1884");
        com.google.javascript.jscomp.SourceMap.DetailLevel detailLevel0 = com.google.javascript.jscomp.SourceMap.DetailLevel.SYMBOLS;
        org.junit.Assert.assertNotNull(detailLevel0);
    }

    @Test
    public void test1885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1885");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        int int5 = localDateTime4.getYear();
        java.time.LocalDate localDate6 = localDateTime4.toLocalDate();
        java.time.LocalDate localDate8 = localDate6.plusDays((long) '#');
        java.time.LocalDate localDate9 = java.time.LocalDate.now();
        java.time.chrono.ChronoPeriod chronoPeriod10 = localDate6.until((java.time.chrono.ChronoLocalDate) localDate9);
        java.time.chrono.Chronology chronology11 = java.time.chrono.Chronology.from((java.time.temporal.TemporalAccessor) localDate9);
        java.time.Instant instant12 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset16);
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset21);
        java.time.ZonedDateTime zonedDateTime23 = java.time.ZonedDateTime.of(localDateTime17, (java.time.ZoneId) zoneOffset21);
        java.time.temporal.ChronoField chronoField25 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit26 = chronoField25.getBaseUnit();
        java.time.LocalDateTime localDateTime27 = localDateTime17.plus((long) 1970, temporalUnit26);
        java.time.LocalDateTime localDateTime29 = localDateTime17.withHour((int) (short) 1);
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.OffsetDateTime offsetDateTime32 = java.time.OffsetDateTime.of(localDateTime17, zoneOffset31);
        java.time.OffsetTime offsetTime33 = java.time.OffsetTime.ofInstant(instant12, (java.time.ZoneId) zoneOffset31);
        java.time.Instant instant34 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset38 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime39 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset38);
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime44 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset43);
        java.time.ZonedDateTime zonedDateTime45 = java.time.ZonedDateTime.of(localDateTime39, (java.time.ZoneId) zoneOffset43);
        java.time.temporal.ChronoField chronoField47 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit48 = chronoField47.getBaseUnit();
        java.time.LocalDateTime localDateTime49 = localDateTime39.plus((long) 1970, temporalUnit48);
        java.time.LocalDateTime localDateTime51 = localDateTime39.withHour((int) (short) 1);
        java.time.ZoneOffset zoneOffset53 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.OffsetDateTime offsetDateTime54 = java.time.OffsetDateTime.of(localDateTime39, zoneOffset53);
        java.time.OffsetTime offsetTime55 = java.time.OffsetTime.ofInstant(instant34, (java.time.ZoneId) zoneOffset53);
        boolean boolean56 = offsetTime33.isAfter(offsetTime55);
        java.time.OffsetDateTime offsetDateTime57 = localDate9.atTime(offsetTime33);
        int int58 = offsetTime33.getHour();
        java.time.temporal.Temporal temporal59 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.Temporal temporal60 = offsetTime33.adjustInto(temporal59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronoPeriod10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zonedDateTime23);
        org.junit.Assert.assertTrue("'" + chronoField25 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField25.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit26 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit26.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertNotNull(offsetTime33);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(zoneOffset38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(zonedDateTime45);
        org.junit.Assert.assertTrue("'" + chronoField47 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField47.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit48 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit48.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(zoneOffset53);
        org.junit.Assert.assertNotNull(offsetDateTime54);
        org.junit.Assert.assertNotNull(offsetTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(offsetDateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
    }

    @Test
    public void test1886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1886");
        java.net.URISyntaxException uRISyntaxException2 = new java.net.URISyntaxException("hi!", "");
        int int3 = uRISyntaxException2.getIndex();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test1887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1887");
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.Builder builder0 = com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.newBuilder();
        java.io.InputStream inputStream1 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite2 = null;
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.Builder builder3 = builder0.mergeFrom(inputStream1, extensionRegistryLite2);
        java.io.InputStream inputStream4 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite5 = null;
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.Builder builder6 = builder0.mergeFrom(inputStream4, extensionRegistryLite5);
        com.google.protobuf.DescriptorProtos.UninterpretedOption.NamePart namePart7 = com.google.protobuf.DescriptorProtos.UninterpretedOption.NamePart.getDefaultInstance();
        boolean boolean8 = namePart7.hasIsExtension();
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.Builder builder9 = builder0.mergeFrom((com.google.protobuf.Message) namePart7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: mergeFrom(Message) can only merge messages of the same type.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(namePart7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1888");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean4 = node3.isStringKey();
        com.google.javascript.rhino.JSDocInfo jSDocInfo5 = node3.getJSDocInfo();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(jSDocInfo5);
    }

    @Test
    public void test1889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1889");
        com.google.javascript.jscomp.SourceAst sourceAst0 = null;
        com.google.javascript.rhino.InputId inputId1 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput3 = new com.google.javascript.jscomp.CompilerInput(sourceAst0, inputId1, true);
        com.google.javascript.rhino.InputId inputId4 = compilerInput3.getInputId();
        com.google.javascript.jscomp.SourceAst sourceAst5 = null;
        com.google.javascript.rhino.InputId inputId6 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput8 = new com.google.javascript.jscomp.CompilerInput(sourceAst5, inputId6, true);
        java.io.PrintStream printStream9 = null;
        com.google.javascript.jscomp.Compiler compiler10 = new com.google.javascript.jscomp.Compiler(printStream9);
        com.google.javascript.jscomp.ErrorManager errorManager11 = compiler10.getErrorManager();
        compilerInput8.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler10);
        com.google.javascript.jscomp.Scope scope13 = compiler10.getTopScope();
        compilerInput3.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler10);
        java.io.PrintStream printStream15 = null;
        com.google.javascript.jscomp.Compiler compiler16 = new com.google.javascript.jscomp.Compiler(printStream15);
        com.google.javascript.jscomp.ErrorManager errorManager17 = compiler16.getErrorManager();
        com.google.javascript.jscomp.JSError[] jSErrorArray18 = compiler16.getErrors();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node19 = compilerInput3.getAstRoot((com.google.javascript.jscomp.AbstractCompiler) compiler16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(inputId4);
        org.junit.Assert.assertNotNull(errorManager11);
        org.junit.Assert.assertNull(scope13);
        org.junit.Assert.assertNotNull(errorManager17);
        org.junit.Assert.assertNotNull(jSErrorArray18);
    }

    @Test
    public void test1890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1890");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        compilerOptions0.setRemoveDeadCode(false);
        compilerOptions0.optimizeCalls = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions9 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions9.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat12 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions9.errorFormat = errorFormat12;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy14 = null;
        compilerOptions9.variableRenaming = variableRenamingPolicy14;
        compilerOptions9.setSummaryDetailLevel(999);
        boolean boolean18 = compilerOptions9.getInferTypes();
        com.google.javascript.jscomp.CompilerOptions compilerOptions19 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions19.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat22 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions19.errorFormat = errorFormat22;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy24 = null;
        compilerOptions19.variableRenaming = variableRenamingPolicy24;
        compilerOptions19.setSummaryDetailLevel(999);
        boolean boolean28 = compilerOptions19.getInferTypes();
        compilerOptions19.setDefineToStringLiteral("java.nio.ByteBufferAsDoubleBufferB[pos=0 lim=12 cap=12]", "1970-01-01");
        java.lang.String str32 = compilerOptions19.renamePrefixNamespace;
        com.google.javascript.jscomp.CompilerOptions compilerOptions33 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions33.setRecordFunctionInformation(true);
        boolean boolean36 = compilerOptions33.checkControlStructures;
        compilerOptions33.setCollapseProperties(false);
        compilerOptions33.setAssumeStrictThis(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions41 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions41.optimizeCalls = false;
        compilerOptions41.preferLineBreakAtEndOfFile = false;
        boolean boolean46 = compilerOptions41.markNoSideEffectCalls;
        boolean boolean47 = compilerOptions41.labelRenaming;
        com.google.javascript.jscomp.DependencyOptions dependencyOptions48 = new com.google.javascript.jscomp.DependencyOptions();
        java.lang.String[] strArray52 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet53 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet53, strArray52);
        boolean boolean55 = strSet53.isEmpty();
        java.nio.ByteBuffer byteBuffer57 = java.nio.ByteBuffer.allocate(100);
        boolean boolean58 = strSet53.equals((java.lang.Object) byteBuffer57);
        java.lang.String[] strArray62 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet63 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet63, strArray62);
        boolean boolean65 = strSet63.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream66 = strSet63.stream();
        boolean boolean67 = strSet53.retainAll((java.util.Collection<java.lang.String>) strSet63);
        com.google.javascript.jscomp.DependencyOptions dependencyOptions68 = dependencyOptions48.setEntryPoints((java.util.Collection<java.lang.String>) strSet53);
        compilerOptions41.setDependencyOptions(dependencyOptions48);
        com.google.javascript.jscomp.CheckLevel checkLevel70 = compilerOptions41.checkGlobalThisLevel;
        compilerOptions33.reportMissingOverride = checkLevel70;
        compilerOptions19.setCheckUnreachableCode(checkLevel70);
        compilerOptions9.setCheckProvides(checkLevel70);
        com.google.javascript.jscomp.CheckLevel checkLevel74 = compilerOptions9.checkUnreachableCode;
        compilerOptions0.setCheckProvides(checkLevel74);
        org.junit.Assert.assertNotNull(errorFormat3);
        org.junit.Assert.assertNotNull(errorFormat12);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(errorFormat22);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(strStream66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(dependencyOptions68);
        org.junit.Assert.assertTrue("'" + checkLevel70 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel70.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + checkLevel74 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel74.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test1891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1891");
        com.google.protobuf.Descriptors.Descriptor descriptor0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto1 = descriptor0.toProto();
        boolean boolean2 = descriptorProto1.isInitialized();
        com.google.protobuf.DescriptorProtos.MessageOptions messageOptions3 = descriptorProto1.getOptions();
        com.google.protobuf.DescriptorProtos.MessageOptions.Builder builder4 = messageOptions3.newBuilderForType();
        com.google.protobuf.DescriptorProtos.MessageOptions.Builder builder6 = builder4.setMessageSetWireFormat(false);
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor7 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.Message.Builder builder8 = builder6.newBuilderForField(fieldDescriptor7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptor0);
        org.junit.Assert.assertNotNull(descriptorProto1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(messageOptions3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test1892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1892");
        int int2 = com.google.protobuf.CodedOutputStream.computeSInt32Size(12, 52);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
    }

    @Test
    public void test1893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1893");
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder1 = builder0.clearCcGenericServices();
        boolean boolean2 = builder0.isInitialized();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder4 = builder0.setCcGenericServices(true);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder5 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label6 = builder5.getLabel();
        com.google.protobuf.ByteString byteString7 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder8 = builder5.mergeFrom(byteString7);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite9 = null;
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder10 = builder4.mergeFrom(byteString7, extensionRegistryLite9);
        com.google.protobuf.DescriptorProtos.FileOptions fileOptions11 = builder10.getDefaultInstanceForType();
        boolean boolean12 = fileOptions11.hasJavaMultipleFiles();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + label6 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label6.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(byteString7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(fileOptions11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1894");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType4 = jSTypeRegistry2.createObjectType(objectType3);
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.jstype.ObjectType objectType8 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry7.createObjectType(objectType8);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair10 = objectType4.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType9);
        com.google.javascript.rhino.ErrorReporter errorReporter12 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter12, false);
        com.google.javascript.rhino.jstype.ObjectType objectType15 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType16 = jSTypeRegistry14.createObjectType(objectType15);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        com.google.javascript.rhino.jstype.ObjectType objectType20 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType21 = jSTypeRegistry19.createObjectType(objectType20);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair22 = objectType16.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType21);
        com.google.javascript.rhino.Node node23 = objectType16.getRootNode();
        com.google.javascript.rhino.jstype.EnumType enumType24 = objectType16.toMaybeEnumType();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean29 = node28.isStringKey();
        boolean boolean30 = node28.isThrow();
        boolean boolean31 = node28.isVarArgs();
        boolean boolean32 = node28.isStringKey();
        boolean boolean33 = objectType9.defineInferredProperty("Unknown class name", (com.google.javascript.rhino.jstype.JSType) objectType16, node28);
        objectType16.clearResolved();
        boolean boolean35 = objectType16.isInterface();
        boolean boolean37 = objectType16.isPropertyTypeInferred("16:00:52+00:00:52");
        com.google.javascript.rhino.jstype.ObjectType.Property property39 = objectType16.getSlot("/tmp/hi!4308965599218662450ISO");
        org.junit.Assert.assertNotNull(objectType4);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertNotNull(typePair10);
        org.junit.Assert.assertNotNull(objectType16);
        org.junit.Assert.assertNotNull(objectType21);
        org.junit.Assert.assertNotNull(typePair22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNull(enumType24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(property39);
    }

    @Test
    public void test1895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1895");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = new java.util.Date("DiagnosticGroup<undefinedNames>");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1896");
        byte[] byteArray0 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions2 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray0, extensionRegistryLite1);
        com.google.protobuf.DescriptorProtos.UninterpretedOption uninterpretedOption3 = com.google.protobuf.DescriptorProtos.UninterpretedOption.parseFrom(byteArray0);
        java.lang.String str4 = uninterpretedOption3.getIdentifierValue();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(methodOptions2);
        org.junit.Assert.assertNotNull(uninterpretedOption3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test1897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1897");
        com.google.javascript.jscomp.JsMessage.Builder builder1 = new com.google.javascript.jscomp.JsMessage.Builder("2022-02-21");
        com.google.javascript.jscomp.JsMessage.Builder builder3 = builder1.appendStringPart("16:00:52+00:00:52");
        com.google.javascript.jscomp.JsMessage.Builder builder5 = builder1.setSourceName("{}");
        com.google.javascript.jscomp.JsMessage jsMessage6 = builder1.build();
        java.util.List<java.lang.CharSequence> charSequenceList7 = builder1.getParts();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(jsMessage6);
        org.junit.Assert.assertNotNull(charSequenceList7);
    }

    @Test
    public void test1898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1898");
        java.nio.file.AccessMode accessMode0 = java.nio.file.AccessMode.WRITE;
        org.junit.Assert.assertTrue("'" + accessMode0 + "' != '" + java.nio.file.AccessMode.WRITE + "'", accessMode0.equals(java.nio.file.AccessMode.WRITE));
    }

    @Test
    public void test1899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1899");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean5 = node4.isStringKey();
        boolean boolean6 = node4.isThrow();
        boolean boolean7 = node4.isVarArgs();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean12 = node11.isFromExterns();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean17 = node16.isFromExterns();
        java.lang.String str18 = node16.toString();
        com.google.javascript.rhino.Node node19 = node11.copyInformationFrom(node16);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean24 = node23.isStringKey();
        boolean boolean25 = node23.isThrow();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean30 = node29.isStringKey();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((-1), node4, node16, node23, node29, 16384, 16);
        boolean boolean34 = node16.isWhile();
        com.google.javascript.rhino.Node node38 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        com.google.javascript.rhino.Node node39 = node38.getLastChild();
        com.google.javascript.rhino.Node node40 = node16.copyInformationFromForTree(node38);
        com.google.javascript.rhino.Node node44 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean45 = node44.isStringKey();
        boolean boolean46 = node44.isThrow();
        boolean boolean47 = node44.isVarArgs();
        boolean boolean48 = node44.isHook();
        com.google.javascript.rhino.Node node49 = node44.cloneNode();
        boolean boolean50 = node49.isAssignAdd();
        boolean boolean51 = node49.isAssign();
        boolean boolean52 = node16.isEquivalentTo(node49);
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "NUMBER 52.0 0" + "'", str18, "NUMBER 52.0 0");
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(node38);
        org.junit.Assert.assertNull(node39);
        org.junit.Assert.assertNotNull(node40);
        org.junit.Assert.assertNotNull(node44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(node49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test1900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1900");
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto0 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.getDefaultInstance();
        boolean boolean1 = serviceDescriptorProto0.hasOptions();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder2 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.newBuilder(serviceDescriptorProto0);
        java.util.List<com.google.protobuf.DescriptorProtos.MethodDescriptorProto> methodDescriptorProtoList3 = serviceDescriptorProto0.getMethodList();
        org.junit.Assert.assertNotNull(serviceDescriptorProto0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(methodDescriptorProtoList3);
    }

    @Test
    public void test1901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1901");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label4 = builder3.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = builder0.addExtension(builder3);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder6 = builder0.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder7 = builder6.getOptionsBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions8 = builder7.getDefaultInstanceForType();
        com.google.protobuf.Descriptors.Descriptor descriptor9 = builder7.getDescriptorForType();
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder10 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output12 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream14 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output12, (int) 'a');
        byte[] byteArray15 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite16 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions17 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray15, extensionRegistryLite16);
        output12.write(byteArray15);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder19 = builder10.mergeFrom(byteArray15);
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions20 = builder10.buildPartial();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder21 = builder10.addUninterpretedOptionBuilder();
        com.google.protobuf.DescriptorProtos.UninterpretedOption uninterpretedOption22 = builder21.buildPartial();
        java.lang.String str23 = uninterpretedOption22.getIdentifierValue();
        int int24 = uninterpretedOption22.getNameCount();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder25 = builder7.addUninterpretedOption(uninterpretedOption22);
        java.io.InputStream inputStream26 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions27 = com.google.protobuf.DescriptorProtos.EnumValueOptions.getDefaultInstance();
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder28 = com.google.protobuf.DescriptorProtos.EnumValueOptions.newBuilder(enumValueOptions27);
        java.io.InputStream inputStream29 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder30 = builder28.mergeFrom(inputStream29);
        com.google.protobuf.ByteString byteString31 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto32 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.parseFrom(byteString31);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite33 = null;
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto enumValueDescriptorProto34 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.parseFrom(byteString31, extensionRegistryLite33);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite35 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions36 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteString31, extensionRegistryLite35);
        java.io.InputStream inputStream37 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite38 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location39 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream37, extensionRegistryLite38);
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder40 = builder30.mergeFrom(byteString31, extensionRegistryLite38);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean41 = builder7.mergeDelimitedFrom(inputStream26, extensionRegistryLite38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + label4 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label4.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(enumOptions8);
        org.junit.Assert.assertNotNull(descriptor9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(output12);
        org.junit.Assert.assertNotNull(codedOutputStream14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(methodOptions17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(methodOptions20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(uninterpretedOption22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(enumValueOptions27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(byteString31);
        org.junit.Assert.assertNotNull(methodDescriptorProto32);
        org.junit.Assert.assertNotNull(enumValueDescriptorProto34);
        org.junit.Assert.assertNotNull(methodOptions36);
        org.junit.Assert.assertNotNull(extensionRegistryLite38);
        org.junit.Assert.assertNotNull(location39);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test1902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1902");
        byte[] byteArray0 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions2 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray0, extensionRegistryLite1);
        com.google.protobuf.CodedInputStream codedInputStream5 = com.google.protobuf.CodedInputStream.newInstance(byteArray0, 16, (int) 'a');
        int int7 = codedInputStream5.pushLimit((int) 'a');
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder8 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder10 = builder8.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder11 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label12 = builder11.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder13 = builder8.addExtension(builder11);
        boolean boolean14 = builder11.hasDefaultValue();
        java.io.InputStream inputStream15 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite16 = null;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder17 = builder11.mergeFrom(inputStream15, extensionRegistryLite16);
        java.io.InputStream inputStream18 = null;
        java.io.InputStream inputStream19 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite20 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location21 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream19, extensionRegistryLite20);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder22 = builder17.mergeFrom(inputStream18, extensionRegistryLite20);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions23 = com.google.protobuf.DescriptorProtos.EnumValueOptions.parseFrom(codedInputStream5, extensionRegistryLite20);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 16");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(methodOptions2);
        org.junit.Assert.assertNotNull(codedInputStream5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 97 + "'", int7 == 97);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + label12 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label12.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(extensionRegistryLite20);
        org.junit.Assert.assertNotNull(location21);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test1903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1903");
        int int0 = com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 38 + "'", int0 == 38);
    }

    @Test
    public void test1904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1904");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        boolean boolean1 = localDate0.isLeapYear();
        java.time.chrono.Era era2 = localDate0.getEra();
        java.time.format.TextStyle textStyle3 = java.time.format.TextStyle.FULL;
        java.time.temporal.ChronoField chronoField4 = java.time.temporal.ChronoField.OFFSET_SECONDS;
        java.time.temporal.TemporalUnit temporalUnit5 = chronoField4.getRangeUnit();
        long long7 = chronoField4.checkValidValue((long) 2);
        java.util.Locale locale11 = new java.util.Locale("", "NUMBER 52.0 0", "hi!");
        java.lang.String str12 = chronoField4.getDisplayName(locale11);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.lang.String str14 = locale11.getDisplayVariant(locale13);
        java.util.Locale.setDefault(locale13);
        java.lang.String str16 = locale13.getDisplayScript();
        java.lang.String str17 = era2.getDisplayName(textStyle3, locale13);
        java.time.temporal.Temporal temporal18 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.Temporal temporal19 = era2.adjustInto(temporal18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + era2 + "' != '" + java.time.chrono.IsoEra.CE + "'", era2.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + textStyle3 + "' != '" + java.time.format.TextStyle.FULL + "'", textStyle3.equals(java.time.format.TextStyle.FULL));
        org.junit.Assert.assertTrue("'" + chronoField4 + "' != '" + java.time.temporal.ChronoField.OFFSET_SECONDS + "'", chronoField4.equals(java.time.temporal.ChronoField.OFFSET_SECONDS));
        org.junit.Assert.assertTrue("'" + temporalUnit5 + "' != '" + java.time.temporal.ChronoUnit.FOREVER + "'", temporalUnit5.equals(java.time.temporal.ChronoUnit.FOREVER));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 2L + "'", long7 == 2L);
        org.junit.Assert.assertEquals(locale11.toString(), "_NUMBER 52.0 0_hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "OffsetSeconds" + "'", str12, "OffsetSeconds");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\uc11c\ub825\uae30\uc6d0" + "'", str17, "\uc11c\ub825\uae30\uc6d0");
    }

    @Test
    public void test1905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1905");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto enumValueDescriptorProto1 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.parseFrom(inputStream0);
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder2 = enumValueDescriptorProto1.toBuilder();
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder4 = builder2.setName("ISO");
        java.io.InputStream inputStream5 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean6 = builder2.mergeDelimitedFrom(inputStream5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(enumValueDescriptorProto1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test1906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1906");
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.newBuilder();
        java.io.InputStream inputStream1 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite2 = null;
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder3 = builder0.mergeFrom(inputStream1, extensionRegistryLite2);
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder4 = builder3.clone();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test1907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1907");
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto0 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.getDefaultInstance();
        boolean boolean1 = methodDescriptorProto0.hasOutputType();
        com.google.protobuf.CodedOutputStream codedOutputStream2 = null;
        methodDescriptorProto0.writeTo(codedOutputStream2);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder4 = methodDescriptorProto0.toBuilder();
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder6 = builder4.setOutputType("java.nio.HeapFloatBuffer[pos=0 lim=6 cap=6]");
        java.io.InputStream inputStream7 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite8 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions9 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(inputStream7, extensionRegistryLite8);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder10 = builder6.mergeOptions(methodOptions9);
        java.util.Map<com.google.protobuf.Descriptors.FieldDescriptor, java.lang.Object> fieldDescriptorMap11 = builder10.getAllFields();
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder12 = builder10.clearName();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder13 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label14 = builder13.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto15 = builder13.buildPartial();
        int int16 = fieldDescriptorProto15.getSerializedSize();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder17 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto15);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder18 = builder10.mergeFrom((com.google.protobuf.Message) fieldDescriptorProto15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: mergeFrom(Message) can only merge messages of the same type.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(methodDescriptorProto0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(methodOptions9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(fieldDescriptorMap11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + label14 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label14.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test1908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1908");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean4 = node3.isStringKey();
        boolean boolean5 = node3.isThrow();
        boolean boolean6 = node3.isReturn();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1909");
        int int0 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.OPTIONS_FIELD_NUMBER;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 3 + "'", int0 == 3);
    }

    @Test
    public void test1910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1910");
        com.google.protobuf.Descriptors.Descriptor descriptor0 = com.google.protobuf.DescriptorProtos.FieldOptions.getDescriptor();
        com.google.protobuf.Descriptors.FileDescriptor fileDescriptor1 = descriptor0.getFile();
        java.util.List<com.google.protobuf.Descriptors.FieldDescriptor> fieldDescriptorList2 = descriptor0.getExtensions();
        org.junit.Assert.assertNotNull(descriptor0);
        org.junit.Assert.assertNotNull(fileDescriptor1);
        org.junit.Assert.assertNotNull(fieldDescriptorList2);
    }

    @Test
    public void test1911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1911");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label1 = builder0.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder2 = builder0.clearOptions();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder3 = builder2.clone();
        byte[] byteArray4 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite5 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions6 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray4, extensionRegistryLite5);
        com.google.protobuf.CodedInputStream codedInputStream9 = com.google.protobuf.CodedInputStream.newInstance(byteArray4, 16, (int) 'a');
        com.google.javascript.jscomp.VariableMap variableMap10 = com.google.javascript.jscomp.VariableMap.fromBytes(byteArray4);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder13 = builder3.mergeFrom(byteArray4, 152, 36);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 152");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + label1 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label1.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(methodOptions6);
        org.junit.Assert.assertNotNull(codedInputStream9);
        org.junit.Assert.assertNotNull(variableMap10);
    }

    @Test
    public void test1912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1912");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label4 = builder3.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = builder0.addExtension(builder3);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder6 = builder0.addExtensionBuilder();
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor7 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder8 = builder0.clearField(fieldDescriptor7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + label4 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label4.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test1913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1913");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRecordFunctionInformation(true);
        boolean boolean3 = compilerOptions0.checkControlStructures;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setAssumeStrictThis(true);
        compilerOptions0.renamePrefixNamespace = "google.protobuf";
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test1914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1914");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label4 = builder3.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = builder0.addExtension(builder3);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder6 = builder0.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder7 = builder6.getOptionsBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions8 = builder7.getDefaultInstanceForType();
        com.google.protobuf.Descriptors.Descriptor descriptor9 = builder7.getDescriptorForType();
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder10 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output12 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream14 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output12, (int) 'a');
        byte[] byteArray15 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite16 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions17 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray15, extensionRegistryLite16);
        output12.write(byteArray15);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder19 = builder10.mergeFrom(byteArray15);
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions20 = builder10.buildPartial();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder21 = builder10.addUninterpretedOptionBuilder();
        com.google.protobuf.DescriptorProtos.UninterpretedOption uninterpretedOption22 = builder21.buildPartial();
        java.lang.String str23 = uninterpretedOption22.getIdentifierValue();
        int int24 = uninterpretedOption22.getNameCount();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder25 = builder7.addUninterpretedOption(uninterpretedOption22);
        boolean boolean26 = uninterpretedOption22.hasIdentifierValue();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + label4 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label4.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(enumOptions8);
        org.junit.Assert.assertNotNull(descriptor9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(output12);
        org.junit.Assert.assertNotNull(codedOutputStream14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(methodOptions17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(methodOptions20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(uninterpretedOption22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1915");
        com.google.javascript.jscomp.SourceAst sourceAst0 = null;
        com.google.javascript.rhino.InputId inputId1 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput3 = new com.google.javascript.jscomp.CompilerInput(sourceAst0, inputId1, true);
        java.io.PrintStream printStream4 = null;
        com.google.javascript.jscomp.Compiler compiler5 = new com.google.javascript.jscomp.Compiler(printStream4);
        com.google.javascript.jscomp.ErrorManager errorManager6 = compiler5.getErrorManager();
        compilerInput3.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler5);
        com.google.javascript.jscomp.Scope scope8 = compiler5.getTopScope();
        java.lang.String str11 = compiler5.getSourceLine("US-ASCII", 0);
        com.google.javascript.jscomp.CodingConvention codingConvention12 = compiler5.getCodingConvention();
        java.lang.String str13 = codingConvention12.getGlobalObject();
        org.junit.Assert.assertNotNull(errorManager6);
        org.junit.Assert.assertNull(scope8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(codingConvention12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "goog.global" + "'", str13, "goog.global");
    }

    @Test
    public void test1916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1916");
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto0 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.getDefaultInstance();
        boolean boolean1 = serviceDescriptorProto0.hasOptions();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder2 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.newBuilder(serviceDescriptorProto0);
        byte[] byteArray3 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite4 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions5 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray3, extensionRegistryLite4);
        com.google.protobuf.CodedInputStream codedInputStream8 = com.google.protobuf.CodedInputStream.newInstance(byteArray3, 16, (int) 'a');
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder9 = builder2.mergeFrom(byteArray3);
        java.util.List<com.google.protobuf.DescriptorProtos.MethodDescriptorProto> methodDescriptorProtoList10 = builder9.getMethodList();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder11 = builder9.clearMethod();
        boolean boolean12 = builder9.isInitialized();
        org.junit.Assert.assertNotNull(serviceDescriptorProto0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(methodOptions5);
        org.junit.Assert.assertNotNull(codedInputStream8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(methodDescriptorProtoList10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test1917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1917");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder1 = builder0.getSourceCodeInfoBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.clearService();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder5 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label6 = builder5.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto7 = builder5.buildPartial();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder8 = fieldDescriptorProto7.newBuilderForType();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder9 = fieldDescriptorProto7.newBuilderForType();
        int int10 = com.google.protobuf.CodedOutputStream.computeMessageSize((int) (byte) 10, (com.google.protobuf.MessageLite) fieldDescriptorProto7);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder11 = fieldDescriptorProto7.toBuilder();
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder12 = builder0.setExtension(43, fieldDescriptorProto7);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 43, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + label6 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label6.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test1918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1918");
        com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder builder0 = com.google.javascript.jscomp.FunctionInformationMap.Entry.newBuilder();
        com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder builder1 = builder0.clearModuleName();
        java.lang.String str2 = builder0.getModuleName();
        byte[] byteArray3 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite4 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions5 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray3, extensionRegistryLite4);
        com.google.protobuf.CodedOutputStream codedOutputStream8 = com.google.protobuf.CodedOutputStream.newInstance(byteArray3, (int) (short) 0, 1);
        java.io.InputStream inputStream11 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite12 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location13 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream11, extensionRegistryLite12);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder builder14 = builder0.mergeFrom(byteArray3, 7, 99, extensionRegistryLite12);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 7");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(methodOptions5);
        org.junit.Assert.assertNotNull(codedOutputStream8);
        org.junit.Assert.assertNotNull(extensionRegistryLite12);
        org.junit.Assert.assertNotNull(location13);
    }

    @Test
    public void test1919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1919");
        java.io.File file2 = null;
        java.io.File file3 = java.io.File.createTempFile("hi!", "ISO", file2);
        boolean boolean6 = file3.setWritable(false, false);
        java.net.URI uRI7 = file3.toURI();
        java.lang.String str8 = uRI7.getSchemeSpecificPart();
        java.lang.String str9 = uRI7.getRawQuery();
        boolean boolean10 = uRI7.isOpaque();
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file3.toString(), "/tmp/hi!621184218720979027ISO");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(uRI7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "/tmp/hi!621184218720979027ISO" + "'", str8, "/tmp/hi!621184218720979027ISO");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1920");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.lang.String str1 = localDate0.toString();
        java.time.chrono.IsoChronology isoChronology2 = localDate0.getChronology();
        java.lang.String str3 = isoChronology2.getCalendarType();
        java.util.List<java.time.chrono.Era> eraList4 = isoChronology2.eras();
        java.util.List<java.time.chrono.Era> eraList5 = isoChronology2.eras();
        java.time.chrono.IsoEra isoEra6 = java.time.chrono.IsoEra.BCE;
        java.time.LocalDate localDate10 = isoChronology2.date((java.time.chrono.Era) isoEra6, 1024, 2, 5);
        java.time.DayOfWeek dayOfWeek11 = java.time.DayOfWeek.FRIDAY;
        java.time.temporal.ChronoField chronoField12 = java.time.temporal.ChronoField.OFFSET_SECONDS;
        java.time.temporal.TemporalUnit temporalUnit13 = chronoField12.getRangeUnit();
        long long15 = chronoField12.checkValidValue((long) 2);
        boolean boolean16 = dayOfWeek11.isSupported((java.time.temporal.TemporalField) chronoField12);
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoLocalDate chronoLocalDate18 = localDate10.with((java.time.temporal.TemporalField) chronoField12, (long) 28);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: OffsetSeconds");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "2022-02-21" + "'", str1, "2022-02-21");
        org.junit.Assert.assertNotNull(isoChronology2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "iso8601" + "'", str3, "iso8601");
        org.junit.Assert.assertNotNull(eraList4);
        org.junit.Assert.assertNotNull(eraList5);
        org.junit.Assert.assertTrue("'" + isoEra6 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra6.equals(java.time.chrono.IsoEra.BCE));
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + dayOfWeek11 + "' != '" + java.time.DayOfWeek.FRIDAY + "'", dayOfWeek11.equals(java.time.DayOfWeek.FRIDAY));
        org.junit.Assert.assertTrue("'" + chronoField12 + "' != '" + java.time.temporal.ChronoField.OFFSET_SECONDS + "'", chronoField12.equals(java.time.temporal.ChronoField.OFFSET_SECONDS));
        org.junit.Assert.assertTrue("'" + temporalUnit13 + "' != '" + java.time.temporal.ChronoUnit.FOREVER + "'", temporalUnit13.equals(java.time.temporal.ChronoUnit.FOREVER));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 2L + "'", long15 == 2L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1921");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        int int5 = localDateTime4.getYear();
        java.time.LocalDate localDate6 = localDateTime4.toLocalDate();
        java.time.LocalDate localDate8 = localDate6.plusDays((long) '#');
        java.lang.Object obj9 = null;
        boolean boolean10 = localDate8.equals(obj9);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test1922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1922");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        java.util.List<com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder> builderList3 = builder0.getServiceBuilderList();
        com.google.protobuf.DescriptorProtos.SourceCodeInfoOrBuilder sourceCodeInfoOrBuilder4 = builder0.getSourceCodeInfoOrBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = builder0.clearDependency();
        boolean boolean6 = builder0.hasName();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builderList3);
        org.junit.Assert.assertNotNull(sourceCodeInfoOrBuilder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1923");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder3 = builder2.clearSourceCodeInfo();
        boolean boolean4 = builder2.hasOptions();
        int int5 = builder2.getMessageTypeCount();
        com.google.protobuf.UnknownFieldSet unknownFieldSet6 = builder2.getUnknownFields();
        boolean boolean7 = builder2.hasOptions();
        java.util.List<java.lang.String> strList8 = builder2.getDependencyList();
        com.google.protobuf.UninitializedMessageException uninitializedMessageException9 = new com.google.protobuf.UninitializedMessageException(strList8);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(unknownFieldSet6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strList8);
    }

    @Test
    public void test1924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1924");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType4 = jSTypeRegistry2.createObjectType(objectType3);
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.jstype.ObjectType objectType8 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry7.createObjectType(objectType8);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair10 = objectType4.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType9);
        boolean boolean11 = objectType9.isTemplateType();
        boolean boolean12 = objectType9.isNativeObjectType();
        boolean boolean13 = objectType9.isNumberValueType();
        com.google.javascript.rhino.ErrorReporter errorReporter15 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter15, false);
        com.google.javascript.rhino.jstype.ObjectType objectType18 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType19 = jSTypeRegistry17.createObjectType(objectType18);
        com.google.javascript.rhino.ErrorReporter errorReporter20 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry22 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter20, false);
        com.google.javascript.rhino.jstype.ObjectType objectType23 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType24 = jSTypeRegistry22.createObjectType(objectType23);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair25 = objectType19.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType24);
        java.lang.String str26 = objectType24.getDisplayName();
        com.google.javascript.rhino.ErrorReporter errorReporter27 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry29 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter27, false);
        com.google.javascript.rhino.jstype.ObjectType objectType30 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType31 = jSTypeRegistry29.createObjectType(objectType30);
        com.google.javascript.rhino.ErrorReporter errorReporter32 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter32, false);
        com.google.javascript.rhino.jstype.ObjectType objectType35 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType36 = jSTypeRegistry34.createObjectType(objectType35);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair37 = objectType31.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType36);
        boolean boolean38 = objectType36.isTemplateType();
        com.google.javascript.rhino.jstype.JSType jSType39 = objectType24.getLeastSupertype((com.google.javascript.rhino.jstype.JSType) objectType36);
        com.google.javascript.rhino.Node node43 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean44 = node43.isFromExterns();
        java.lang.String str45 = node43.toString();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable46 = node43.siblings();
        boolean boolean47 = objectType9.defineDeclaredProperty("", (com.google.javascript.rhino.jstype.JSType) objectType36, node43);
        com.google.javascript.rhino.JSDocInfo jSDocInfo49 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean50 = jSDocInfo49.hasThisType();
        java.lang.String str51 = jSDocInfo49.toString();
        boolean boolean52 = jSDocInfo49.isInterface();
        objectType36.setPropertyJSDocInfo("{1758850361}", jSDocInfo49);
        boolean boolean54 = objectType36.isRegexpType();
        org.junit.Assert.assertNotNull(objectType4);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertNotNull(typePair10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(objectType19);
        org.junit.Assert.assertNotNull(objectType24);
        org.junit.Assert.assertNotNull(typePair25);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(objectType31);
        org.junit.Assert.assertNotNull(objectType36);
        org.junit.Assert.assertNotNull(typePair37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(jSType39);
        org.junit.Assert.assertNotNull(node43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "NUMBER 52.0 0" + "'", str45, "NUMBER 52.0 0");
        org.junit.Assert.assertNotNull(nodeIterable46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "JSDocInfo" + "'", str51, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test1925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1925");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate(100);
        java.nio.DoubleBuffer doubleBuffer2 = byteBuffer1.asDoubleBuffer();
        java.io.PrintStream printStream3 = null;
        com.google.javascript.jscomp.Compiler compiler4 = new com.google.javascript.jscomp.Compiler(printStream3);
        com.google.javascript.jscomp.SourceMap sourceMap5 = compiler4.getSourceMap();
        java.util.stream.LongStream longStream7 = java.util.stream.LongStream.of((long) (-1));
        com.google.common.collect.ImmutableMap<com.google.javascript.jscomp.Compiler, java.util.stream.LongStream> compilerMap8 = com.google.common.collect.ImmutableMap.of(compiler4, longStream7);
        java.util.stream.DoubleStream doubleStream9 = longStream7.asDoubleStream();
        double[] doubleArray10 = doubleStream9.toArray();
        java.nio.DoubleBuffer doubleBuffer11 = doubleBuffer2.put(doubleArray10);
        double[] doubleArray17 = new double[] { 256, (-1.0d), 1, 1.0d, 9 };
        java.nio.DoubleBuffer doubleBuffer18 = java.nio.DoubleBuffer.wrap(doubleArray17);
        java.nio.DoubleBuffer doubleBuffer19 = doubleBuffer2.get(doubleArray17);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(doubleBuffer2);
        org.junit.Assert.assertNull(sourceMap5);
        org.junit.Assert.assertNotNull(longStream7);
        org.junit.Assert.assertNotNull(compilerMap8);
        org.junit.Assert.assertNotNull(doubleStream9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0]");
        org.junit.Assert.assertNotNull(doubleBuffer11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleBuffer18);
        org.junit.Assert.assertNotNull(doubleBuffer19);
    }

    @Test
    public void test1926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1926");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label1 = builder0.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder2 = builder0.clearOptions();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type type3 = builder2.getType();
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor4 = null;
        com.google.javascript.jscomp.CompilerOptions compilerOptions6 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions6.setRecordFunctionInformation(true);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder9 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder11 = builder9.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder12 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label13 = builder12.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder14 = builder9.addExtension(builder12);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder15 = builder9.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions16 = builder15.getOptions();
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder17 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output19 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream21 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output19, (int) 'a');
        byte[] byteArray22 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite23 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions24 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray22, extensionRegistryLite23);
        output19.write(byteArray22);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder26 = builder17.mergeFrom(byteArray22);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder27 = builder15.mergeFrom(byteArray22);
        compilerOptions6.setInputVariableMapSerialized(byteArray22);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder29 = builder2.setRepeatedField(fieldDescriptor4, 99, (java.lang.Object) byteArray22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + label1 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label1.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + type3 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type.TYPE_DOUBLE + "'", type3.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type.TYPE_DOUBLE));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + label13 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label13.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(enumOptions16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(output19);
        org.junit.Assert.assertNotNull(codedOutputStream21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(methodOptions24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test1927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1927");
        int int0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.ENUM_TYPE_FIELD_NUMBER;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 5 + "'", int0 == 5);
    }

    @Test
    public void test1928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1928");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.nio.file.attribute.FileTime fileTime1 = java.nio.file.attribute.FileTime.from(instant0);
        java.time.Instant instant3 = java.time.Instant.ofEpochSecond((long) (-1));
        java.time.Instant instant5 = instant3.plusMillis((long) (byte) -1);
        boolean boolean6 = instant0.isBefore(instant5);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime13 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset12);
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset17);
        java.time.ZonedDateTime zonedDateTime19 = java.time.ZonedDateTime.of(localDateTime13, (java.time.ZoneId) zoneOffset17);
        java.time.chrono.Chronology chronology20 = java.time.chrono.Chronology.from((java.time.temporal.TemporalAccessor) zoneOffset17);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.ofEpochSecond((long) 6, (int) 'a', zoneOffset17);
        java.time.OffsetTime offsetTime22 = java.time.OffsetTime.ofInstant(instant5, (java.time.ZoneId) zoneOffset17);
        java.time.OffsetTime offsetTime24 = offsetTime22.plusSeconds((-1L));
        java.time.temporal.ChronoField chronoField25 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit26 = chronoField25.getBaseUnit();
        int int27 = offsetTime24.get((java.time.temporal.TemporalField) chronoField25);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(fileTime1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(zonedDateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(offsetTime22);
        org.junit.Assert.assertNotNull(offsetTime24);
        org.junit.Assert.assertTrue("'" + chronoField25 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField25.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit26 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit26.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 12 + "'", int27 == 12);
    }

    @Test
    public void test1929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1929");
        com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder builder0 = com.google.javascript.jscomp.FunctionInformationMap.Entry.newBuilder();
        boolean boolean1 = builder0.hasSourceName();
        com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder builder2 = com.google.javascript.jscomp.FunctionInformationMap.Entry.newBuilder();
        boolean boolean3 = builder2.hasSourceName();
        com.google.javascript.jscomp.FunctionInformationMap.Entry entry4 = builder2.getDefaultInstanceForType();
        com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder builder5 = builder0.mergeFrom(entry4);
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor6 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.Message.Builder builder7 = builder5.newBuilderForField(fieldDescriptor6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(entry4);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test1930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1930");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer3 = charBuffer1.put('a');
        char[] charArray5 = new char[] { '4' };
        java.nio.CharBuffer charBuffer6 = charBuffer3.get(charArray5);
        java.nio.CharBuffer charBuffer8 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer10 = charBuffer8.put('a');
        char[] charArray12 = new char[] { '4' };
        java.nio.CharBuffer charBuffer13 = charBuffer10.get(charArray12);
        java.nio.CharBuffer charBuffer14 = charBuffer3.put(charArray12);
        java.nio.CharBuffer charBuffer15 = charBuffer3.slice();
        char[] charArray20 = new char[] { '#', ' ', ':', ' ' };
        java.nio.CharBuffer charBuffer21 = java.nio.CharBuffer.wrap(charArray20);
        java.nio.CharBuffer charBuffer22 = charBuffer15.get(charArray20);
        java.nio.CharBuffer charBuffer24 = charBuffer15.put('a');
        java.nio.CharBuffer charBuffer26 = java.nio.CharBuffer.allocate((int) ' ');
        boolean boolean27 = charBuffer26.isDirect();
        java.nio.CharBuffer charBuffer29 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer31 = charBuffer29.put('a');
        char[] charArray33 = new char[] { '4' };
        java.nio.CharBuffer charBuffer34 = charBuffer31.get(charArray33);
        java.nio.CharBuffer charBuffer35 = charBuffer31.compact();
        java.nio.CharBuffer charBuffer37 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer39 = charBuffer37.put('a');
        java.nio.CharBuffer charBuffer41 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer43 = charBuffer41.put('a');
        char[] charArray45 = new char[] { '4' };
        java.nio.CharBuffer charBuffer46 = charBuffer43.get(charArray45);
        java.nio.CharBuffer charBuffer47 = charBuffer43.compact();
        com.google.common.collect.ImmutableSet<java.lang.Appendable> appendableSet48 = com.google.common.collect.ImmutableSet.of((java.lang.Appendable) charBuffer26, (java.lang.Appendable) charBuffer31, (java.lang.Appendable) charBuffer37, (java.lang.Appendable) charBuffer47);
        boolean boolean49 = charBuffer47.isDirect();
        char[] charArray50 = charBuffer47.array();
        java.nio.CharBuffer charBuffer52 = java.nio.CharBuffer.allocate((int) ' ');
        boolean boolean53 = charBuffer52.isDirect();
        java.nio.CharBuffer charBuffer55 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer57 = charBuffer55.put('a');
        char[] charArray59 = new char[] { '4' };
        java.nio.CharBuffer charBuffer60 = charBuffer57.get(charArray59);
        java.nio.CharBuffer charBuffer61 = charBuffer57.compact();
        java.nio.CharBuffer charBuffer63 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer65 = charBuffer63.put('a');
        java.nio.CharBuffer charBuffer67 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer69 = charBuffer67.put('a');
        char[] charArray71 = new char[] { '4' };
        java.nio.CharBuffer charBuffer72 = charBuffer69.get(charArray71);
        java.nio.CharBuffer charBuffer73 = charBuffer69.compact();
        com.google.common.collect.ImmutableSet<java.lang.Appendable> appendableSet74 = com.google.common.collect.ImmutableSet.of((java.lang.Appendable) charBuffer52, (java.lang.Appendable) charBuffer57, (java.lang.Appendable) charBuffer63, (java.lang.Appendable) charBuffer73);
        boolean boolean75 = charBuffer73.isDirect();
        int int76 = charBuffer47.read(charBuffer73);
        char[] charArray77 = new char[] {};
        java.nio.CharBuffer charBuffer78 = charBuffer47.get(charArray77);
        java.nio.ByteOrder byteOrder79 = charBuffer47.order();
        java.nio.CharBuffer charBuffer80 = charBuffer15.append((java.lang.CharSequence) charBuffer47);
        java.nio.CharBuffer charBuffer82 = charBuffer80.append('/');
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(charBuffer3);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(charBuffer8);
        org.junit.Assert.assertNotNull(charBuffer10);
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer13);
        org.junit.Assert.assertNotNull(charBuffer14);
        org.junit.Assert.assertNotNull(charBuffer15);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[\000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(charBuffer21);
        org.junit.Assert.assertNotNull(charBuffer22);
        org.junit.Assert.assertNotNull(charBuffer24);
        org.junit.Assert.assertNotNull(charBuffer26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(charBuffer29);
        org.junit.Assert.assertNotNull(charBuffer31);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer34);
        org.junit.Assert.assertNotNull(charBuffer35);
        org.junit.Assert.assertNotNull(charBuffer37);
        org.junit.Assert.assertNotNull(charBuffer39);
        org.junit.Assert.assertNotNull(charBuffer41);
        org.junit.Assert.assertNotNull(charBuffer43);
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray45), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray45), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray45), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer46);
        org.junit.Assert.assertNotNull(charBuffer47);
        org.junit.Assert.assertNotNull(appendableSet48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray50), "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray50), "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray50), "[\000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(charBuffer52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(charBuffer55);
        org.junit.Assert.assertNotNull(charBuffer57);
        org.junit.Assert.assertNotNull(charArray59);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray59), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray59), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray59), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer60);
        org.junit.Assert.assertNotNull(charBuffer61);
        org.junit.Assert.assertNotNull(charBuffer63);
        org.junit.Assert.assertNotNull(charBuffer65);
        org.junit.Assert.assertNotNull(charBuffer67);
        org.junit.Assert.assertNotNull(charBuffer69);
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray71), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray71), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray71), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer72);
        org.junit.Assert.assertNotNull(charBuffer73);
        org.junit.Assert.assertNotNull(appendableSet74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[]");
        org.junit.Assert.assertNotNull(charBuffer78);
        org.junit.Assert.assertNotNull(byteOrder79);
        org.junit.Assert.assertNotNull(charBuffer80);
        org.junit.Assert.assertNotNull(charBuffer82);
    }

    @Test
    public void test1931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1931");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy5 = null;
        compilerOptions0.variableRenaming = variableRenamingPolicy5;
        compilerOptions0.setSummaryDetailLevel(999);
        boolean boolean9 = compilerOptions0.getInferTypes();
        compilerOptions0.resetWarningsGuard();
        compilerOptions0.setGeneratePseudoNames(false);
        org.junit.Assert.assertNotNull(errorFormat3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1932");
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto0 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.getDefaultInstance();
        boolean boolean1 = serviceDescriptorProto0.hasOptions();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder2 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.newBuilder(serviceDescriptorProto0);
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto3 = builder2.buildPartial();
        com.google.protobuf.DescriptorProtos.ServiceOptions serviceOptions4 = builder2.getOptions();
        com.google.protobuf.DescriptorProtos.ServiceOptions.Builder builder5 = serviceOptions4.toBuilder();
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.UninterpretedOption uninterpretedOption7 = builder5.getUninterpretedOption(31);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 31");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serviceDescriptorProto0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(serviceDescriptorProto3);
        org.junit.Assert.assertNotNull(serviceOptions4);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test1933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1933");
        int int0 = com.google.protobuf.DescriptorProtos.MessageOptions.UNINTERPRETED_OPTION_FIELD_NUMBER;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 999 + "'", int0 == 999);
    }

    @Test
    public void test1934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1934");
        java.time.LocalDate localDate0 = java.time.LocalDate.MAX;
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime1 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localDate0);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unable to obtain LocalTime from TemporalAccessor: +999999999-12-31 of type java.time.LocalDate");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
    }

    @Test
    public void test1935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1935");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean4 = node3.isStringKey();
        boolean boolean5 = node3.isTrue();
        com.google.javascript.rhino.InputId inputId7 = new com.google.javascript.rhino.InputId("NUMBER 52.0 0");
        node3.setInputId(inputId7);
        com.google.javascript.jscomp.SourceAst sourceAst9 = null;
        com.google.javascript.rhino.InputId inputId10 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput12 = new com.google.javascript.jscomp.CompilerInput(sourceAst9, inputId10, true);
        java.io.PrintStream printStream13 = null;
        com.google.javascript.jscomp.Compiler compiler14 = new com.google.javascript.jscomp.Compiler(printStream13);
        com.google.javascript.jscomp.ErrorManager errorManager15 = compiler14.getErrorManager();
        compilerInput12.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler14);
        com.google.javascript.jscomp.CodingConvention codingConvention17 = compiler14.getCodingConvention();
        boolean boolean18 = inputId7.equals((java.lang.Object) compiler14);
        com.google.javascript.jscomp.CompilerOptions compilerOptions19 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions19.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat22 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions19.errorFormat = errorFormat22;
        java.lang.String[] strArray30 = new java.lang.String[] { "South Korea", "Unknown class name", "ISO", "OffsetSeconds", ":" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        compilerOptions19.setReplaceStringsConfiguration("1970-01-01+00:00:52", (java.util.List<java.lang.String>) strList31);
        compilerOptions19.lineBreak = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions36 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions36.setRecordFunctionInformation(true);
        compilerOptions36.setMoveFunctionDeclarations(true);
        com.google.javascript.jscomp.CheckLevel checkLevel41 = compilerOptions36.checkMissingGetCssNameLevel;
        compilerOptions19.setCheckProvides(checkLevel41);
        boolean boolean43 = compilerOptions19.removeUnusedPrototypePropertiesInExterns;
        boolean boolean44 = compilerOptions19.generatePseudoNames;
        compiler14.initOptions(compilerOptions19);
        boolean boolean46 = compiler14.isTypeCheckingEnabled();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(errorManager15);
        org.junit.Assert.assertNotNull(codingConvention17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(errorFormat22);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + checkLevel41 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel41.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test1936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1936");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        typePosition0.setPositionInformation((int) ':', 50, 64, (int) (short) 10);
        boolean boolean6 = typePosition0.hasBrackets();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1937");
        java.io.InputStream inputStream0 = null;
        byte[] byteArray1 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite2 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions3 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray1, extensionRegistryLite2);
        com.google.protobuf.DescriptorProtos.UninterpretedOption uninterpretedOption4 = com.google.protobuf.DescriptorProtos.UninterpretedOption.parseFrom(byteArray1);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder5 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label6 = builder5.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto7 = builder5.buildPartial();
        int int8 = fieldDescriptorProto7.getSerializedSize();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder9 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto7);
        java.io.InputStream inputStream10 = null;
        java.io.InputStream inputStream11 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite12 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location13 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream11, extensionRegistryLite12);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder14 = builder9.mergeFrom(inputStream10, extensionRegistryLite12);
        com.google.javascript.jscomp.FunctionInformationMap functionInformationMap15 = com.google.javascript.jscomp.FunctionInformationMap.parseFrom(byteArray1, extensionRegistryLite12);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.UninterpretedOption uninterpretedOption16 = com.google.protobuf.DescriptorProtos.UninterpretedOption.parseDelimitedFrom(inputStream0, extensionRegistryLite12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertNotNull(methodOptions3);
        org.junit.Assert.assertNotNull(uninterpretedOption4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + label6 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label6.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(extensionRegistryLite12);
        org.junit.Assert.assertNotNull(location13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(functionInformationMap15);
    }

    @Test
    public void test1938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1938");
        // The following exception was thrown during execution in test generation
        try {
            java.nio.charset.Charset charset1 = java.nio.charset.Charset.forName("2022-02-21");
            org.junit.Assert.fail("Expected exception of type java.nio.charset.UnsupportedCharsetException; message: 2022-02-21");
        } catch (java.nio.charset.UnsupportedCharsetException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1939");
        java.io.File file2 = null;
        java.io.File file3 = java.io.File.createTempFile("hi!", "ISO", file2);
        boolean boolean6 = file3.setWritable(false, false);
        java.net.URI uRI7 = file3.toURI();
        java.lang.String str8 = uRI7.getUserInfo();
        java.lang.String str9 = uRI7.getQuery();
        java.io.File file10 = new java.io.File(uRI7);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file3.toString(), "/tmp/hi!4808113637420909107ISO");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(uRI7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals(file10.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file10.toString(), "/tmp/hi!4808113637420909107ISO");
    }

    @Test
    public void test1940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1940");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType4 = jSTypeRegistry2.createObjectType(objectType3);
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.jstype.ObjectType objectType8 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry7.createObjectType(objectType8);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair10 = objectType4.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType9);
        com.google.javascript.rhino.Node node11 = objectType4.getRootNode();
        com.google.javascript.rhino.jstype.JSType jSType13 = objectType4.getPropertyType("java.text.MessageFormat$Field(message argument field)");
        com.google.javascript.rhino.jstype.JSType jSType15 = jSType13.findPropertyType("1970-01-01T00:01:40Z");
        org.junit.Assert.assertNotNull(objectType4);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertNotNull(typePair10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNotNull(jSType13);
        org.junit.Assert.assertNotNull(jSType15);
    }

    @Test
    public void test1941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1941");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        boolean boolean3 = builder0.hasPackage();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder4 = builder0.clearOptions();
        java.lang.String str5 = builder4.getName();
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor6 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean7 = builder4.hasField(fieldDescriptor6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test1942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1942");
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto0 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.getDefaultInstance();
        boolean boolean1 = serviceDescriptorProto0.hasOptions();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder2 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.newBuilder(serviceDescriptorProto0);
        byte[] byteArray3 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite4 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions5 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray3, extensionRegistryLite4);
        com.google.protobuf.CodedInputStream codedInputStream8 = com.google.protobuf.CodedInputStream.newInstance(byteArray3, 16, (int) 'a');
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder9 = builder2.mergeFrom(byteArray3);
        java.util.List<com.google.protobuf.DescriptorProtos.MethodDescriptorProto> methodDescriptorProtoList10 = builder9.getMethodList();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder11 = builder9.clearMethod();
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto12 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.getDefaultInstance();
        boolean boolean13 = methodDescriptorProto12.hasOutputType();
        com.google.protobuf.CodedOutputStream codedOutputStream14 = null;
        methodDescriptorProto12.writeTo(codedOutputStream14);
        boolean boolean16 = methodDescriptorProto12.hasOutputType();
        boolean boolean17 = methodDescriptorProto12.hasOutputType();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder18 = builder11.addMethod(methodDescriptorProto12);
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder19 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder20 = builder19.clearCcGenericServices();
        boolean boolean21 = builder19.isInitialized();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder23 = builder19.setCcGenericServices(true);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder24 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label25 = builder24.getLabel();
        com.google.protobuf.ByteString byteString26 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder27 = builder24.mergeFrom(byteString26);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite28 = null;
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder29 = builder23.mergeFrom(byteString26, extensionRegistryLite28);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite30 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions31 = com.google.protobuf.DescriptorProtos.EnumValueOptions.parseFrom(byteString26, extensionRegistryLite30);
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder32 = builder18.mergeFrom(byteString26);
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder33 = builder32.clearMethod();
        org.junit.Assert.assertNotNull(serviceDescriptorProto0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(methodOptions5);
        org.junit.Assert.assertNotNull(codedInputStream8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(methodDescriptorProtoList10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(methodDescriptorProto12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + label25 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label25.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(byteString26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(enumValueOptions31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test1943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1943");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder3 = builder2.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions fileOptions4 = builder2.getOptions();
        int int5 = fileOptions4.getUninterpretedOptionCount();
        com.google.protobuf.DescriptorProtos.FileOptions fileOptions6 = fileOptions4.getDefaultInstanceForType();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(fileOptions4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(fileOptions6);
    }

    @Test
    public void test1944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1944");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.of(localDateTime4, (java.time.ZoneId) zoneOffset8);
        java.time.temporal.ChronoField chronoField12 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit13 = chronoField12.getBaseUnit();
        java.time.LocalDateTime localDateTime14 = localDateTime4.plus((long) 1970, temporalUnit13);
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset18);
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset23);
        java.time.ZonedDateTime zonedDateTime25 = java.time.ZonedDateTime.of(localDateTime19, (java.time.ZoneId) zoneOffset23);
        java.time.temporal.ChronoField chronoField27 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit28 = chronoField27.getBaseUnit();
        java.time.LocalDateTime localDateTime29 = localDateTime19.plus((long) 1970, temporalUnit28);
        java.time.LocalDateTime localDateTime31 = localDateTime19.withHour((int) (short) 1);
        java.time.ZoneOffset zoneOffset33 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.OffsetDateTime offsetDateTime34 = java.time.OffsetDateTime.of(localDateTime19, zoneOffset33);
        long long35 = localDateTime4.toEpochSecond(zoneOffset33);
        java.time.DayOfWeek dayOfWeek36 = localDateTime4.getDayOfWeek();
        java.time.ZoneOffset zoneOffset40 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime41 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset40);
        java.time.ZoneOffset zoneOffset45 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime46 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset45);
        java.time.ZonedDateTime zonedDateTime47 = java.time.ZonedDateTime.of(localDateTime41, (java.time.ZoneId) zoneOffset45);
        java.time.temporal.ChronoField chronoField49 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit50 = chronoField49.getBaseUnit();
        java.time.LocalDateTime localDateTime51 = localDateTime41.plus((long) 1970, temporalUnit50);
        java.time.ZoneOffset zoneOffset56 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime57 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset56);
        java.time.ZoneOffset zoneOffset61 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime62 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset61);
        java.time.ZonedDateTime zonedDateTime63 = java.time.ZonedDateTime.of(localDateTime57, (java.time.ZoneId) zoneOffset61);
        java.time.temporal.ChronoField chronoField65 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit66 = chronoField65.getBaseUnit();
        java.time.LocalDateTime localDateTime67 = localDateTime57.plus((long) 1970, temporalUnit66);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime68 = localDateTime51.minus((long) 43, temporalUnit66);
        java.time.LocalDateTime localDateTime70 = localDateTime51.minusHours((long) 1024);
        java.time.LocalDateTime localDateTime72 = localDateTime70.plusHours((long) 0);
        java.time.Instant instant73 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset77 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime78 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset77);
        java.time.OffsetDateTime offsetDateTime79 = java.time.OffsetDateTime.ofInstant(instant73, (java.time.ZoneId) zoneOffset77);
        java.time.OffsetDateTime offsetDateTime81 = offsetDateTime79.minusDays((long) (short) 100);
        java.lang.String str82 = offsetDateTime79.toString();
        java.time.ZoneOffset zoneOffset83 = offsetDateTime79.getOffset();
        java.time.Instant instant84 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset88 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime89 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset88);
        java.time.OffsetDateTime offsetDateTime90 = java.time.OffsetDateTime.ofInstant(instant84, (java.time.ZoneId) zoneOffset88);
        java.time.ZonedDateTime zonedDateTime91 = java.time.ZonedDateTime.ofLocal(localDateTime70, (java.time.ZoneId) zoneOffset83, zoneOffset88);
        java.lang.String str92 = zoneOffset88.toString();
        long long93 = localDateTime4.toEpochSecond(zoneOffset88);
        java.time.LocalDateTime localDateTime95 = localDateTime4.withNano(43);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertTrue("'" + chronoField12 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField12.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit13 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit13.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zonedDateTime25);
        org.junit.Assert.assertTrue("'" + chronoField27 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField27.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit28 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit28.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(zoneOffset33);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 100L + "'", long35 == 100L);
        org.junit.Assert.assertTrue("'" + dayOfWeek36 + "' != '" + java.time.DayOfWeek.THURSDAY + "'", dayOfWeek36.equals(java.time.DayOfWeek.THURSDAY));
        org.junit.Assert.assertNotNull(zoneOffset40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(zoneOffset45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(zonedDateTime47);
        org.junit.Assert.assertTrue("'" + chronoField49 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField49.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit50 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit50.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(zoneOffset56);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(zoneOffset61);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(zonedDateTime63);
        org.junit.Assert.assertTrue("'" + chronoField65 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField65.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit66 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit66.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(instant73);
        org.junit.Assert.assertNotNull(zoneOffset77);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(offsetDateTime79);
        org.junit.Assert.assertNotNull(offsetDateTime81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "1970-01-01T00:00:52+00:00:52" + "'", str82, "1970-01-01T00:00:52+00:00:52");
        org.junit.Assert.assertNotNull(zoneOffset83);
        org.junit.Assert.assertNotNull(instant84);
        org.junit.Assert.assertNotNull(zoneOffset88);
        org.junit.Assert.assertNotNull(localDateTime89);
        org.junit.Assert.assertNotNull(offsetDateTime90);
        org.junit.Assert.assertNotNull(zonedDateTime91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "+00:00:52" + "'", str92, "+00:00:52");
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 100L + "'", long93 == 100L);
        org.junit.Assert.assertNotNull(localDateTime95);
    }

    @Test
    public void test1945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1945");
        byte[] byteArray0 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions2 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray0, extensionRegistryLite1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite3 = null;
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto enumDescriptorProto4 = com.google.protobuf.DescriptorProtos.EnumDescriptorProto.parseFrom(byteArray0, extensionRegistryLite3);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder5 = enumDescriptorProto4.newBuilderForType();
        boolean boolean6 = builder5.hasOptions();
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.EnumValueDescriptorProtoOrBuilder enumValueDescriptorProtoOrBuilder8 = builder5.getValueOrBuilder(999);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 999");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(methodOptions2);
        org.junit.Assert.assertNotNull(enumDescriptorProto4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1946");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) ' ');
        boolean boolean2 = charBuffer1.isDirect();
        java.nio.CharBuffer charBuffer4 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer6 = charBuffer4.put('a');
        char[] charArray8 = new char[] { '4' };
        java.nio.CharBuffer charBuffer9 = charBuffer6.get(charArray8);
        java.nio.CharBuffer charBuffer10 = charBuffer6.compact();
        java.nio.CharBuffer charBuffer12 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer14 = charBuffer12.put('a');
        java.nio.CharBuffer charBuffer16 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer18 = charBuffer16.put('a');
        char[] charArray20 = new char[] { '4' };
        java.nio.CharBuffer charBuffer21 = charBuffer18.get(charArray20);
        java.nio.CharBuffer charBuffer22 = charBuffer18.compact();
        com.google.common.collect.ImmutableSet<java.lang.Appendable> appendableSet23 = com.google.common.collect.ImmutableSet.of((java.lang.Appendable) charBuffer1, (java.lang.Appendable) charBuffer6, (java.lang.Appendable) charBuffer12, (java.lang.Appendable) charBuffer22);
        java.time.ZoneOffset zoneOffset27 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset27);
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime33 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset32);
        java.time.ZonedDateTime zonedDateTime34 = java.time.ZonedDateTime.of(localDateTime28, (java.time.ZoneId) zoneOffset32);
        java.time.ZonedDateTime zonedDateTime36 = zonedDateTime34.withYear((int) (short) 1);
        java.time.temporal.ChronoField chronoField37 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit38 = chronoField37.getBaseUnit();
        java.time.ZonedDateTime zonedDateTime39 = zonedDateTime34.truncatedTo(temporalUnit38);
        java.time.Duration duration40 = temporalUnit38.getDuration();
        boolean boolean41 = charBuffer12.equals((java.lang.Object) duration40);
        java.time.Duration duration42 = duration40.negated();
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charBuffer4);
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer9);
        org.junit.Assert.assertNotNull(charBuffer10);
        org.junit.Assert.assertNotNull(charBuffer12);
        org.junit.Assert.assertNotNull(charBuffer14);
        org.junit.Assert.assertNotNull(charBuffer16);
        org.junit.Assert.assertNotNull(charBuffer18);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer21);
        org.junit.Assert.assertNotNull(charBuffer22);
        org.junit.Assert.assertNotNull(appendableSet23);
        org.junit.Assert.assertNotNull(zoneOffset27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(zonedDateTime34);
        org.junit.Assert.assertNotNull(zonedDateTime36);
        org.junit.Assert.assertTrue("'" + chronoField37 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField37.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit38 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit38.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(zonedDateTime39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(duration42);
    }

    @Test
    public void test1947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1947");
        com.google.protobuf.Descriptors.Descriptor descriptor0 = com.google.protobuf.DescriptorProtos.FieldOptions.getDescriptor();
        com.google.protobuf.Descriptors.FileDescriptor fileDescriptor1 = descriptor0.getFile();
        java.lang.String str2 = fileDescriptor1.getPackage();
        com.google.protobuf.Descriptors.ServiceDescriptor serviceDescriptor4 = fileDescriptor1.findServiceByName("{634185401}");
        org.junit.Assert.assertNotNull(descriptor0);
        org.junit.Assert.assertNotNull(fileDescriptor1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "google.protobuf" + "'", str2, "google.protobuf");
        org.junit.Assert.assertNull(serviceDescriptor4);
    }

    @Test
    public void test1948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1948");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean5 = node4.isStringKey();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(0, node4);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node4.getStaticSourceFile();
        node4.setCharno((int) (byte) 100);
        boolean boolean10 = node4.isName();
        boolean boolean11 = node4.isFor();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test1949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1949");
        com.google.protobuf.ByteString.Output output1 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream3 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output1, (int) 'a');
        byte[] byteArray4 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite5 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions6 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray4, extensionRegistryLite5);
        output1.write(byteArray4);
        com.google.protobuf.CodedInputStream codedInputStream10 = com.google.protobuf.CodedInputStream.newInstance(byteArray4, 21, 4);
        // The following exception was thrown during execution in test generation
        try {
            codedInputStream10.skipRawBytes(15);
            org.junit.Assert.fail("Expected exception of type com.google.protobuf.InvalidProtocolBufferException; message: While parsing a protocol message, the input ended unexpectedly in the middle of a field.  This could mean either than the input has been truncated or that an embedded message misreported its own length.");
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(output1);
        org.junit.Assert.assertNotNull(codedOutputStream3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(methodOptions6);
        org.junit.Assert.assertNotNull(codedInputStream10);
    }

    @Test
    public void test1950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1950");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MIN;
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime2 = localDateTime0.minusSeconds((long) 999);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for Year (valid values -999999999 - 999999999): -1000000000");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
    }

    @Test
    public void test1951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1951");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset10);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.of(localDateTime11, (java.time.ZoneId) zoneOffset15);
        java.time.Clock clock18 = java.time.Clock.fixed(instant0, (java.time.ZoneId) zoneOffset15);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.now(clock18);
        java.time.LocalDate localDate20 = java.time.LocalDate.now(clock18);
        com.google.protobuf.Descriptors.Descriptor descriptor21 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto22 = descriptor21.toProto();
        boolean boolean23 = descriptorProto22.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList24 = descriptorProto22.getNestedTypeList();
        int int25 = descriptorProto22.getExtensionRangeCount();
        boolean boolean26 = localDate20.equals((java.lang.Object) descriptorProto22);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder27 = descriptorProto22.newBuilderForType();
        java.util.List<com.google.protobuf.DescriptorProtos.FieldDescriptorProto> fieldDescriptorProtoList28 = builder27.getExtensionList();
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.Builder builder29 = com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.newBuilder();
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder30 = builder27.addExtensionRange(builder29);
        com.google.protobuf.Descriptors.Descriptor descriptor31 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto32 = descriptor31.toProto();
        boolean boolean33 = descriptorProto32.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList34 = descriptorProto32.getNestedTypeList();
        int int35 = descriptorProto32.getExtensionCount();
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder36 = builder30.mergeFrom(descriptorProto32);
        boolean boolean37 = builder30.hasName();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder39 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder41 = builder39.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder42 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label43 = builder42.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder44 = builder39.addExtension(builder42);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder45 = builder39.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder46 = builder45.getOptionsBuilder();
        com.google.protobuf.Descriptors.Descriptor descriptor47 = builder45.getDescriptorForType();
        java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite> priorityMap48 = new java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite>();
        java.lang.Object obj49 = priorityMap48.clone();
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder50 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.newBuilder();
        boolean boolean51 = priorityMap48.containsValue((java.lang.Object) builder50);
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder53 = builder50.setName("java.nio.ByteBufferAsDoubleBufferB[pos=0 lim=12 cap=12]");
        com.google.protobuf.ByteString byteString54 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder55 = builder50.mergeFrom(byteString54);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder56 = builder45.addValue(builder50);
        com.google.protobuf.DescriptorProtos.EnumOptionsOrBuilder enumOptionsOrBuilder57 = builder56.getOptionsOrBuilder();
        int int58 = builder56.getValueCount();
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder59 = builder30.setEnumType(36, builder56);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 36, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(clock18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(descriptor21);
        org.junit.Assert.assertNotNull(descriptorProto22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(fieldDescriptorProtoList28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(descriptor31);
        org.junit.Assert.assertNotNull(descriptorProto32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + label43 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label43.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(descriptor47);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "{}");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(byteString54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(enumOptionsOrBuilder57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
    }

    @Test
    public void test1952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1952");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.javascript.jscomp.FunctionInformationMap functionInformationMap2 = com.google.javascript.jscomp.FunctionInformationMap.parseFrom(inputStream0, extensionRegistryLite1);
        int int3 = functionInformationMap2.getModuleCount();
        org.junit.Assert.assertNotNull(functionInformationMap2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test1953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1953");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        typePosition0.setPositionInformation((int) ':', 50, 64, (int) (short) 10);
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean10 = node9.isFromExterns();
        java.lang.String str11 = node9.toString();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable12 = node9.siblings();
        typePosition0.setItem(node9);
        int int14 = typePosition0.getPositionOnStartLine();
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "NUMBER 52.0 0" + "'", str11, "NUMBER 52.0 0");
        org.junit.Assert.assertNotNull(nodeIterable12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 50 + "'", int14 == 50);
    }

    @Test
    public void test1954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1954");
        com.google.javascript.jscomp.JsMessage.Builder builder1 = new com.google.javascript.jscomp.JsMessage.Builder("2022-02-21");
        com.google.javascript.jscomp.JsMessage.Builder builder3 = builder1.appendStringPart("16:00:52+00:00:52");
        com.google.javascript.jscomp.JsMessage.Builder builder5 = builder1.setSourceName("{}");
        com.google.javascript.jscomp.JsMessage jsMessage6 = builder1.build();
        com.google.javascript.jscomp.JsMessage.Builder builder8 = builder1.setIsHidden(true);
        com.google.javascript.jscomp.JsMessage.Builder builder10 = builder8.appendPlaceholderReference("/tmp/hi!4516073975838273390ISO");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(jsMessage6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test1955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1955");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        com.google.javascript.rhino.jstype.JSType jSType4 = node3.getJSType();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertNull(jSType4);
    }

    @Test
    public void test1956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1956");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label4 = builder3.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = builder0.addExtension(builder3);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder6 = builder0.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder7 = builder6.getOptionsBuilder();
        java.lang.String str8 = builder6.getName();
        byte[] byteArray9 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite10 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions11 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray9, extensionRegistryLite10);
        com.google.protobuf.CodedOutputStream codedOutputStream14 = com.google.protobuf.CodedOutputStream.newInstance(byteArray9, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite15 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto16 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray9, extensionRegistryLite15);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite17 = null;
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto18 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.parseFrom(byteArray9, extensionRegistryLite17);
        com.google.protobuf.UnknownFieldSet unknownFieldSet19 = com.google.protobuf.UnknownFieldSet.parseFrom(byteArray9);
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto20 = com.google.protobuf.DescriptorProtos.DescriptorProto.parseFrom(byteArray9);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder21 = builder6.mergeFrom(byteArray9);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder22 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder24 = builder22.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder25 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label26 = builder25.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder27 = builder22.addExtension(builder25);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder28 = builder22.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder29 = builder28.getOptionsBuilder();
        java.io.InputStream inputStream30 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions31 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream30);
        boolean boolean32 = enumOptions31.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder33 = builder29.mergeFrom(enumOptions31);
        com.google.protobuf.UnknownFieldSet unknownFieldSet34 = builder29.getUnknownFields();
        com.google.protobuf.CodedOutputStream codedOutputStream35 = null;
        unknownFieldSet34.writeTo(codedOutputStream35);
        byte[] byteArray37 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite38 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions39 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray37, extensionRegistryLite38);
        com.google.protobuf.CodedOutputStream codedOutputStream42 = com.google.protobuf.CodedOutputStream.newInstance(byteArray37, (int) (short) 0, 1);
        com.google.protobuf.CodedOutputStream codedOutputStream45 = com.google.protobuf.CodedOutputStream.newInstance(byteArray37, (int) ' ', 0);
        java.io.InputStream inputStream46 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location47 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream46);
        boolean boolean48 = location47.isInitialized();
        codedOutputStream45.writeGroupNoTag((com.google.protobuf.MessageLite) location47);
        unknownFieldSet34.writeAsMessageSetTo(codedOutputStream45);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder51 = builder6.setUnknownFields(unknownFieldSet34);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + label4 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label4.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(methodOptions11);
        org.junit.Assert.assertNotNull(codedOutputStream14);
        org.junit.Assert.assertNotNull(fileDescriptorProto16);
        org.junit.Assert.assertNotNull(serviceDescriptorProto18);
        org.junit.Assert.assertNotNull(unknownFieldSet19);
        org.junit.Assert.assertNotNull(descriptorProto20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + label26 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label26.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(enumOptions31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(unknownFieldSet34);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(methodOptions39);
        org.junit.Assert.assertNotNull(codedOutputStream42);
        org.junit.Assert.assertNotNull(codedOutputStream45);
        org.junit.Assert.assertNotNull(location47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(builder51);
    }

    @Test
    public void test1957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1957");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset10);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.of(localDateTime11, (java.time.ZoneId) zoneOffset15);
        java.time.Clock clock18 = java.time.Clock.fixed(instant0, (java.time.ZoneId) zoneOffset15);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.now(clock18);
        java.time.LocalDate localDate20 = java.time.LocalDate.now(clock18);
        com.google.protobuf.Descriptors.Descriptor descriptor21 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto22 = descriptor21.toProto();
        boolean boolean23 = descriptorProto22.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList24 = descriptorProto22.getNestedTypeList();
        int int25 = descriptorProto22.getExtensionRangeCount();
        boolean boolean26 = localDate20.equals((java.lang.Object) descriptorProto22);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder27 = descriptorProto22.newBuilderForType();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList28 = builder27.getNestedTypeList();
        com.google.protobuf.UnknownFieldSet unknownFieldSet29 = builder27.getUnknownFields();
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder30 = builder27.addEnumTypeBuilder();
        com.google.protobuf.ByteString byteString31 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite32 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto33 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteString31, extensionRegistryLite32);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder34 = builder30.mergeFrom(byteString31);
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions35 = builder30.getOptions();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(clock18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(descriptor21);
        org.junit.Assert.assertNotNull(descriptorProto22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(descriptorProtoList28);
        org.junit.Assert.assertNotNull(unknownFieldSet29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(byteString31);
        org.junit.Assert.assertNotNull(fileDescriptorProto33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(enumOptions35);
    }

    @Test
    public void test1958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1958");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.CHECK_PROVIDES;
        org.junit.Assert.assertNotNull(diagnosticGroup0);
    }

    @Test
    public void test1959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1959");
        com.google.protobuf.Descriptors.Descriptor descriptor0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto1 = descriptor0.toProto();
        boolean boolean2 = descriptorProto1.isInitialized();
        com.google.protobuf.DescriptorProtos.MessageOptions messageOptions3 = descriptorProto1.getOptions();
        com.google.protobuf.DescriptorProtos.MessageOptions.Builder builder4 = messageOptions3.newBuilderForType();
        com.google.protobuf.Message message5 = builder4.buildPartial();
        com.google.protobuf.DescriptorProtos.MessageOptions.Builder builder6 = builder4.clear();
        com.google.protobuf.DescriptorProtos.MessageOptions.Builder builder8 = builder6.setNoStandardDescriptorAccessor(true);
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor9 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int10 = builder8.getRepeatedFieldCount(fieldDescriptor9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptor0);
        org.junit.Assert.assertNotNull(descriptorProto1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(messageOptions3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(message5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test1960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1960");
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions0 = com.google.protobuf.DescriptorProtos.EnumValueOptions.getDefaultInstance();
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder1 = com.google.protobuf.DescriptorProtos.EnumValueOptions.newBuilder(enumValueOptions0);
        com.google.javascript.jscomp.CompilerOptions compilerOptions2 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions2.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat5 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions2.errorFormat = errorFormat5;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy7 = null;
        compilerOptions2.variableRenaming = variableRenamingPolicy7;
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode9 = compilerOptions2.getTracerMode();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder10 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder12 = builder10.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder13 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label14 = builder13.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder15 = builder10.addExtension(builder13);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder16 = builder10.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder17 = builder16.getOptionsBuilder();
        java.io.InputStream inputStream18 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions19 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream18);
        boolean boolean20 = enumOptions19.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder21 = builder17.mergeFrom(enumOptions19);
        byte[] byteArray22 = enumOptions19.toByteArray();
        compilerOptions2.setInputPropertyMapSerialized(byteArray22);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite24 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo sourceCodeInfo25 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.parseFrom(byteArray22, extensionRegistryLite24);
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder26 = builder1.mergeFrom(byteArray22);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder27 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder29 = builder27.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder30 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label31 = builder30.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder32 = builder27.addExtension(builder30);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder33 = builder27.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder34 = builder33.getOptionsBuilder();
        java.io.InputStream inputStream35 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions36 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream35);
        boolean boolean37 = enumOptions36.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder38 = builder34.mergeFrom(enumOptions36);
        com.google.protobuf.UnknownFieldSet unknownFieldSet39 = builder34.getUnknownFields();
        byte[] byteArray40 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite41 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions42 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray40, extensionRegistryLite41);
        com.google.protobuf.CodedOutputStream codedOutputStream45 = com.google.protobuf.CodedOutputStream.newInstance(byteArray40, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite46 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto47 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray40, extensionRegistryLite46);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite48 = null;
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto49 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.parseFrom(byteArray40, extensionRegistryLite48);
        com.google.protobuf.UnknownFieldSet unknownFieldSet50 = com.google.protobuf.UnknownFieldSet.parseFrom(byteArray40);
        com.google.protobuf.ByteString byteString51 = unknownFieldSet50.toByteString();
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite52 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder53 = builder34.mergeFrom(byteString51, extensionRegistryLite52);
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder54 = builder1.mergeFrom(byteString51);
        java.io.InputStream inputStream55 = null;
        com.google.protobuf.UnknownFieldSet unknownFieldSet56 = com.google.protobuf.UnknownFieldSet.parseFrom(inputStream55);
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder57 = builder54.setUnknownFields(unknownFieldSet56);
        org.junit.Assert.assertNotNull(enumValueOptions0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(errorFormat5);
        org.junit.Assert.assertTrue("'" + tracerMode9 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode9.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + label14 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label14.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(enumOptions19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(sourceCodeInfo25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + label31 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label31.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(enumOptions36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(unknownFieldSet39);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(methodOptions42);
        org.junit.Assert.assertNotNull(codedOutputStream45);
        org.junit.Assert.assertNotNull(fileDescriptorProto47);
        org.junit.Assert.assertNotNull(serviceDescriptorProto49);
        org.junit.Assert.assertNotNull(unknownFieldSet50);
        org.junit.Assert.assertNotNull(byteString51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(unknownFieldSet56);
        org.junit.Assert.assertNotNull(builder57);
    }

    @Test
    public void test1961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1961");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto2 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.parseFrom(inputStream0, extensionRegistryLite1);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto3 = fieldDescriptorProto2.getDefaultInstanceForType();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type type4 = fieldDescriptorProto3.getType();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder5 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto3);
        org.junit.Assert.assertNotNull(fieldDescriptorProto2);
        org.junit.Assert.assertNotNull(fieldDescriptorProto3);
        org.junit.Assert.assertTrue("'" + type4 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type.TYPE_DOUBLE + "'", type4.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type.TYPE_DOUBLE));
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test1962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1962");
        com.google.protobuf.ByteString.Output output1 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream3 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output1, (int) 'a');
        byte[] byteArray4 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite5 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions6 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray4, extensionRegistryLite5);
        output1.write(byteArray4);
        com.google.protobuf.CodedInputStream codedInputStream10 = com.google.protobuf.CodedInputStream.newInstance(byteArray4, 21, 4);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder11 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder13 = builder11.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder14 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label15 = builder14.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder16 = builder11.addExtension(builder14);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder17 = builder11.addEnumTypeBuilder();
        com.google.protobuf.ByteString.Output output19 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream21 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output19, (int) 'a');
        byte[] byteArray22 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite23 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions24 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray22, extensionRegistryLite23);
        output19.write(byteArray22);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder26 = builder11.mergeFrom(byteArray22);
        byte[] byteArray27 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite28 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions29 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray27, extensionRegistryLite28);
        com.google.protobuf.CodedOutputStream codedOutputStream32 = com.google.protobuf.CodedOutputStream.newInstance(byteArray27, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite33 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto34 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray27, extensionRegistryLite33);
        com.google.protobuf.CodedOutputStream codedOutputStream35 = com.google.protobuf.CodedOutputStream.newInstance(byteArray27);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder36 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label37 = builder36.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto38 = builder36.buildPartial();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder39 = fieldDescriptorProto38.newBuilderForType();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder40 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto38);
        java.io.File file43 = null;
        java.io.File file44 = java.io.File.createTempFile("hi!", "ISO", file43);
        boolean boolean47 = file44.setWritable(false, false);
        java.net.URI uRI48 = file44.toURI();
        java.io.PrintStream printStream49 = new java.io.PrintStream(file44);
        printStream49.print((int) (byte) 0);
        printStream49.print(10.0d);
        printStream49.close();
        java.lang.String[] strArray58 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet59 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet59, strArray58);
        boolean boolean61 = strSet59.isEmpty();
        java.nio.ByteBuffer byteBuffer63 = java.nio.ByteBuffer.allocate(100);
        boolean boolean64 = strSet59.equals((java.lang.Object) byteBuffer63);
        java.nio.IntBuffer intBuffer65 = byteBuffer63.asIntBuffer();
        double double66 = byteBuffer63.getDouble();
        java.nio.ByteBuffer byteBuffer69 = byteBuffer63.put((int) (short) 1, (byte) 1);
        byte[] byteArray70 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite71 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions72 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray70, extensionRegistryLite71);
        com.google.protobuf.CodedOutputStream codedOutputStream75 = com.google.protobuf.CodedOutputStream.newInstance(byteArray70, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite76 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto77 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray70, extensionRegistryLite76);
        com.google.protobuf.CodedOutputStream codedOutputStream78 = com.google.protobuf.CodedOutputStream.newInstance(byteArray70);
        java.nio.ByteBuffer byteBuffer79 = byteBuffer63.get(byteArray70);
        printStream49.write(byteArray70, (int) '/', (int) (byte) 1);
        java.io.InputStream inputStream83 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite84 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location85 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream83, extensionRegistryLite84);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder86 = builder40.mergeFrom(byteArray70, extensionRegistryLite84);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto87 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray27, extensionRegistryLite84);
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto enumValueDescriptorProto88 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.parseFrom(byteArray22, extensionRegistryLite84);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.EnumDescriptorProto enumDescriptorProto89 = com.google.protobuf.DescriptorProtos.EnumDescriptorProto.parseFrom(codedInputStream10, extensionRegistryLite84);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 21");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(output1);
        org.junit.Assert.assertNotNull(codedOutputStream3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(methodOptions6);
        org.junit.Assert.assertNotNull(codedInputStream10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + label15 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label15.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(output19);
        org.junit.Assert.assertNotNull(codedOutputStream21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(methodOptions24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(methodOptions29);
        org.junit.Assert.assertNotNull(codedOutputStream32);
        org.junit.Assert.assertNotNull(fileDescriptorProto34);
        org.junit.Assert.assertNotNull(codedOutputStream35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + label37 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label37.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(file44);
        org.junit.Assert.assertEquals(file44.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file44.toString(), "/tmp/hi!4729588986046358728ISO");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(uRI48);
        org.junit.Assert.assertNotNull(strArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(byteBuffer63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(intBuffer65);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 0.0d + "'", double66 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[]");
        org.junit.Assert.assertNotNull(methodOptions72);
        org.junit.Assert.assertNotNull(codedOutputStream75);
        org.junit.Assert.assertNotNull(fileDescriptorProto77);
        org.junit.Assert.assertNotNull(codedOutputStream78);
        org.junit.Assert.assertNotNull(byteBuffer79);
        org.junit.Assert.assertNotNull(extensionRegistryLite84);
        org.junit.Assert.assertNotNull(location85);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(fileDescriptorProto87);
        org.junit.Assert.assertNotNull(enumValueDescriptorProto88);
    }

    @Test
    public void test1963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1963");
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder1 = builder0.clearCcGenericServices();
        boolean boolean2 = builder0.isInitialized();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder4 = builder0.setCcGenericServices(true);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder5 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label6 = builder5.getLabel();
        com.google.protobuf.ByteString byteString7 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder8 = builder5.mergeFrom(byteString7);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite9 = null;
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder10 = builder4.mergeFrom(byteString7, extensionRegistryLite9);
        com.google.protobuf.DescriptorProtos.FileOptions fileOptions11 = builder10.getDefaultInstanceForType();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder12 = fileOptions11.newBuilderForType();
        boolean boolean13 = fileOptions11.hasJavaGenericServices();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + label6 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label6.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(byteString7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(fileOptions11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test1964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1964");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("1970-03-24T02:02:32");
        char[] charArray7 = new char[] { '4', ' ', 'a', 'a', ':' };
        printWriter1.println(charArray7);
        java.security.SignatureException signatureException10 = new java.security.SignatureException();
        java.security.SignatureException signatureException11 = new java.security.SignatureException();
        java.security.SignatureException signatureException12 = new java.security.SignatureException();
        java.security.SignatureException signatureException13 = new java.security.SignatureException();
        java.security.SignatureException signatureException14 = new java.security.SignatureException();
        java.security.SignatureException[] signatureExceptionArray15 = new java.security.SignatureException[] { signatureException10, signatureException11, signatureException12, signatureException13, signatureException14 };
        com.google.common.collect.ImmutableSet<java.security.SignatureException> signatureExceptionSet16 = com.google.common.collect.ImmutableSet.of(signatureExceptionArray15);
        java.io.PrintWriter printWriter17 = printWriter1.format("ISO", (java.lang.Object[]) signatureExceptionArray15);
        char[] charArray22 = new char[] { '#', ' ', ':', ' ' };
        java.nio.CharBuffer charBuffer23 = java.nio.CharBuffer.wrap(charArray22);
        printWriter1.println(charArray22);
        printWriter1.print('4');
        printWriter1.println(true);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "4 aa:");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "4 aa:");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[4,  , a, a, :]");
        org.junit.Assert.assertNotNull(signatureExceptionArray15);
        org.junit.Assert.assertNotNull(signatureExceptionSet16);
        org.junit.Assert.assertNotNull(printWriter17);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "# : ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "# : ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[#,  , :,  ]");
        org.junit.Assert.assertNotNull(charBuffer23);
    }

    @Test
    public void test1965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1965");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean4 = node3.isFromExterns();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean9 = node8.isFromExterns();
        java.lang.String str10 = node8.toString();
        com.google.javascript.rhino.Node node11 = node3.copyInformationFrom(node8);
        java.lang.String str15 = node3.toString(true, false, false);
        com.google.javascript.rhino.Node node20 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean21 = node20.isStringKey();
        boolean boolean22 = node20.isThrow();
        boolean boolean23 = node20.isVarArgs();
        com.google.javascript.rhino.Node node27 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean28 = node27.isFromExterns();
        com.google.javascript.rhino.Node node32 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean33 = node32.isFromExterns();
        java.lang.String str34 = node32.toString();
        com.google.javascript.rhino.Node node35 = node27.copyInformationFrom(node32);
        com.google.javascript.rhino.Node node39 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean40 = node39.isStringKey();
        boolean boolean41 = node39.isThrow();
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean46 = node45.isStringKey();
        com.google.javascript.rhino.Node node49 = new com.google.javascript.rhino.Node((-1), node20, node32, node39, node45, 16384, 16);
        boolean boolean50 = node32.isWhile();
        com.google.javascript.rhino.Node node54 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        com.google.javascript.rhino.Node node55 = node54.getLastChild();
        com.google.javascript.rhino.Node node56 = node32.copyInformationFromForTree(node54);
        com.google.javascript.rhino.Node node60 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean61 = node60.isFromExterns();
        com.google.javascript.rhino.Node node65 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean66 = node65.isFromExterns();
        java.lang.String str67 = node65.toString();
        com.google.javascript.rhino.Node node68 = node60.copyInformationFrom(node65);
        int int69 = node60.getLineno();
        boolean boolean70 = node60.isLabel();
        com.google.javascript.rhino.Node node74 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean75 = node74.isStringKey();
        boolean boolean76 = node74.isTrue();
        com.google.javascript.rhino.InputId inputId78 = new com.google.javascript.rhino.InputId("NUMBER 52.0 0");
        node74.setInputId(inputId78);
        node60.setInputId(inputId78);
        com.google.javascript.rhino.Node.FileLevelJsDocBuilder fileLevelJsDocBuilder81 = node60.getJsDocBuilderForNode();
        // The following exception was thrown during execution in test generation
        try {
            node3.addChildAfter(node54, node60);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "NUMBER 52.0 0" + "'", str10, "NUMBER 52.0 0");
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "NUMBER 52.0 0" + "'", str15, "NUMBER 52.0 0");
        org.junit.Assert.assertNotNull(node20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(node32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "NUMBER 52.0 0" + "'", str34, "NUMBER 52.0 0");
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertNotNull(node39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(node54);
        org.junit.Assert.assertNull(node55);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertNotNull(node60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "NUMBER 52.0 0" + "'", str67, "NUMBER 52.0 0");
        org.junit.Assert.assertNotNull(node68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(node74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(fileLevelJsDocBuilder81);
    }

    @Test
    public void test1966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1966");
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime4 = java.time.LocalTime.of(32, (int) '#', 0, 0);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for HourOfDay (valid values 0 - 23): 32");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1967");
        com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder builder0 = com.google.javascript.jscomp.FunctionInformationMap.Entry.newBuilder();
        boolean boolean1 = builder0.hasSourceName();
        com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder builder2 = com.google.javascript.jscomp.FunctionInformationMap.Entry.newBuilder();
        boolean boolean3 = builder2.hasSourceName();
        com.google.javascript.jscomp.FunctionInformationMap.Entry entry4 = builder2.getDefaultInstanceForType();
        com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder builder5 = builder0.mergeFrom(entry4);
        int int6 = builder5.getLineNumber();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(entry4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test1968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1968");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        int int5 = localDateTime4.getYear();
        java.time.LocalDate localDate6 = localDateTime4.toLocalDate();
        java.time.LocalDate localDate8 = localDate6.plusDays((long) '#');
        java.time.LocalDate localDate9 = java.time.LocalDate.now();
        java.time.chrono.ChronoPeriod chronoPeriod10 = localDate6.until((java.time.chrono.ChronoLocalDate) localDate9);
        java.time.chrono.Chronology chronology11 = java.time.chrono.Chronology.from((java.time.temporal.TemporalAccessor) localDate9);
        java.time.LocalDate localDate13 = localDate9.withMonth(6);
        int int14 = localDate9.lengthOfYear();
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronoPeriod10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 365 + "'", int14 == 365);
    }

    @Test
    public void test1969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1969");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean5 = node4.isStringKey();
        boolean boolean6 = node4.isThrow();
        boolean boolean7 = node4.isVarArgs();
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean12 = node11.isFromExterns();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean17 = node16.isFromExterns();
        java.lang.String str18 = node16.toString();
        com.google.javascript.rhino.Node node19 = node11.copyInformationFrom(node16);
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean24 = node23.isStringKey();
        boolean boolean25 = node23.isThrow();
        com.google.javascript.rhino.Node node29 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean30 = node29.isStringKey();
        com.google.javascript.rhino.Node node33 = new com.google.javascript.rhino.Node((-1), node4, node16, node23, node29, 16384, 16);
        node23.setVarArgs(true);
        boolean boolean36 = node23.hasOneChild();
        boolean boolean37 = node23.isName();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "NUMBER 52.0 0" + "'", str18, "NUMBER 52.0 0");
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(node29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test1970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1970");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        int int5 = localDateTime4.getYear();
        java.time.LocalDate localDate6 = localDateTime4.toLocalDate();
        java.time.LocalDate localDate8 = localDate6.plusDays((long) '#');
        java.time.LocalDate localDate9 = java.time.LocalDate.now();
        java.time.chrono.ChronoPeriod chronoPeriod10 = localDate6.until((java.time.chrono.ChronoLocalDate) localDate9);
        java.time.chrono.Chronology chronology11 = java.time.chrono.Chronology.from((java.time.temporal.TemporalAccessor) localDate9);
        java.time.LocalDate localDate13 = localDate9.withMonth(6);
        java.time.Instant instant14 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset18);
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset23);
        java.time.ZonedDateTime zonedDateTime25 = java.time.ZonedDateTime.of(localDateTime19, (java.time.ZoneId) zoneOffset23);
        java.time.temporal.ChronoField chronoField27 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit28 = chronoField27.getBaseUnit();
        java.time.LocalDateTime localDateTime29 = localDateTime19.plus((long) 1970, temporalUnit28);
        java.time.LocalDateTime localDateTime31 = localDateTime19.withHour((int) (short) 1);
        java.time.ZoneOffset zoneOffset33 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.OffsetDateTime offsetDateTime34 = java.time.OffsetDateTime.of(localDateTime19, zoneOffset33);
        java.time.OffsetTime offsetTime35 = java.time.OffsetTime.ofInstant(instant14, (java.time.ZoneId) zoneOffset33);
        java.time.ZoneOffset zoneOffset39 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime40 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset39);
        java.time.ZoneOffset zoneOffset44 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime45 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset44);
        java.time.ZonedDateTime zonedDateTime46 = java.time.ZonedDateTime.of(localDateTime40, (java.time.ZoneId) zoneOffset44);
        java.time.temporal.ChronoField chronoField48 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit49 = chronoField48.getBaseUnit();
        java.time.LocalDateTime localDateTime50 = localDateTime40.plus((long) 1970, temporalUnit49);
        java.time.ZoneOffset zoneOffset55 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime56 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset55);
        java.time.ZoneOffset zoneOffset60 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime61 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset60);
        java.time.ZonedDateTime zonedDateTime62 = java.time.ZonedDateTime.of(localDateTime56, (java.time.ZoneId) zoneOffset60);
        java.time.temporal.ChronoField chronoField64 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit65 = chronoField64.getBaseUnit();
        java.time.LocalDateTime localDateTime66 = localDateTime56.plus((long) 1970, temporalUnit65);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime67 = localDateTime50.minus((long) 43, temporalUnit65);
        java.time.LocalDateTime localDateTime69 = localDateTime50.minusHours((long) 1024);
        java.time.ZoneOffset zoneOffset73 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime74 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset73);
        java.time.ZoneOffset zoneOffset78 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime79 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset78);
        java.time.ZonedDateTime zonedDateTime80 = java.time.ZonedDateTime.of(localDateTime74, (java.time.ZoneId) zoneOffset78);
        java.time.temporal.ChronoField chronoField81 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        boolean boolean82 = localDateTime74.isSupported((java.time.temporal.TemporalField) chronoField81);
        int int83 = localDateTime69.get((java.time.temporal.TemporalField) chronoField81);
        int int84 = offsetTime35.get((java.time.temporal.TemporalField) chronoField81);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDate localDate86 = localDate9.with((java.time.temporal.TemporalField) chronoField81, 100L);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for ClockHourOfAmPm (valid values 1 - 12): 100");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronoPeriod10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zonedDateTime25);
        org.junit.Assert.assertTrue("'" + chronoField27 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField27.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit28 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit28.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(zoneOffset33);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertNotNull(offsetTime35);
        org.junit.Assert.assertNotNull(zoneOffset39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(zoneOffset44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(zonedDateTime46);
        org.junit.Assert.assertTrue("'" + chronoField48 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField48.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit49 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit49.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(zoneOffset55);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(zoneOffset60);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(zonedDateTime62);
        org.junit.Assert.assertTrue("'" + chronoField64 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField64.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit65 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit65.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(zoneOffset73);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(zoneOffset78);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(zonedDateTime80);
        org.junit.Assert.assertTrue("'" + chronoField81 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField81.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 10 + "'", int83 == 10);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 12 + "'", int84 == 12);
    }

    @Test
    public void test1971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1971");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        compilerOptions0.setRemoveDeadCode(false);
        java.lang.Object obj7 = compilerOptions0.clone();
        compilerOptions0.setMarkNoSideEffectCalls(false);
        com.google.javascript.jscomp.ComposeWarningsGuard composeWarningsGuard10 = null;
        compilerOptions0.setWarningsGuard(composeWarningsGuard10);
        org.junit.Assert.assertNotNull(errorFormat3);
        org.junit.Assert.assertNotNull(obj7);
    }

    @Test
    public void test1972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1972");
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder1 = builder0.clearCcGenericServices();
        boolean boolean2 = builder0.isInitialized();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder4 = builder0.setCcGenericServices(true);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder5 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label6 = builder5.getLabel();
        com.google.protobuf.ByteString byteString7 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder8 = builder5.mergeFrom(byteString7);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite9 = null;
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder10 = builder4.mergeFrom(byteString7, extensionRegistryLite9);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite11 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions12 = com.google.protobuf.DescriptorProtos.EnumValueOptions.parseFrom(byteString7, extensionRegistryLite11);
        java.util.List<com.google.protobuf.DescriptorProtos.UninterpretedOption> uninterpretedOptionList13 = enumValueOptions12.getUninterpretedOptionList();
        java.util.List<com.google.protobuf.DescriptorProtos.UninterpretedOption> uninterpretedOptionList14 = enumValueOptions12.getUninterpretedOptionList();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + label6 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label6.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(byteString7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(enumValueOptions12);
        org.junit.Assert.assertNotNull(uninterpretedOptionList13);
        org.junit.Assert.assertNotNull(uninterpretedOptionList14);
    }

    @Test
    public void test1973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1973");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode3 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry2.setResolveMode(resolveMode3);
        jSTypeRegistry2.clearNamedTypes();
        org.junit.Assert.assertTrue("'" + resolveMode3 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode3.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
    }

    @Test
    public void test1974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1974");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label4 = builder3.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = builder0.addExtension(builder3);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder6 = builder0.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder7 = builder6.getOptionsBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions8 = builder7.getDefaultInstanceForType();
        com.google.javascript.jscomp.FunctionInformationMap.Module.Builder builder9 = com.google.javascript.jscomp.FunctionInformationMap.Module.newBuilder();
        boolean boolean10 = builder9.hasName();
        java.lang.String str11 = builder9.getName();
        boolean boolean12 = enumOptions8.equals((java.lang.Object) builder9);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + label4 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label4.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(enumOptions8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1975");
        com.google.javascript.jscomp.JsMessage.Builder builder1 = new com.google.javascript.jscomp.JsMessage.Builder("2022-02-21");
        com.google.javascript.jscomp.JsMessage.Builder builder3 = builder1.appendStringPart("16:00:52+00:00:52");
        com.google.javascript.jscomp.JsMessage.Builder builder5 = builder1.setSourceName("{}");
        com.google.javascript.jscomp.JsMessage jsMessage6 = builder5.build();
        com.google.javascript.jscomp.JsMessage.Builder builder8 = builder5.setMeaning("{}");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(jsMessage6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test1976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1976");
        com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder builder0 = com.google.javascript.jscomp.FunctionInformationMap.Entry.newBuilder();
        com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder builder1 = builder0.clearModuleName();
        java.lang.String str2 = builder0.getModuleName();
        boolean boolean3 = builder0.hasModuleName();
        com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder builder5 = builder0.setName("*global*");
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test1977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1977");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset10);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.of(localDateTime11, (java.time.ZoneId) zoneOffset15);
        java.time.Clock clock18 = java.time.Clock.fixed(instant0, (java.time.ZoneId) zoneOffset15);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.now(clock18);
        java.time.LocalDate localDate20 = java.time.LocalDate.now(clock18);
        com.google.protobuf.Descriptors.Descriptor descriptor21 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto22 = descriptor21.toProto();
        boolean boolean23 = descriptorProto22.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList24 = descriptorProto22.getNestedTypeList();
        int int25 = descriptorProto22.getExtensionRangeCount();
        boolean boolean26 = localDate20.equals((java.lang.Object) descriptorProto22);
        java.time.temporal.ChronoField chronoField27 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_MONTH;
        java.time.temporal.ValueRange valueRange28 = localDate20.range((java.time.temporal.TemporalField) chronoField27);
        java.time.LocalDate localDate30 = localDate20.minusYears((long) 9);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(clock18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(descriptor21);
        org.junit.Assert.assertNotNull(descriptorProto22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + chronoField27 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_MONTH + "'", chronoField27.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_MONTH));
        org.junit.Assert.assertNotNull(valueRange28);
        org.junit.Assert.assertNotNull(localDate30);
    }

    @Test
    public void test1978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1978");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy5 = null;
        compilerOptions0.variableRenaming = variableRenamingPolicy5;
        compilerOptions0.setSummaryDetailLevel(999);
        compilerOptions0.setInlineVariables(true);
        byte[] byteArray11 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite12 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions13 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray11, extensionRegistryLite12);
        com.google.protobuf.CodedOutputStream codedOutputStream16 = com.google.protobuf.CodedOutputStream.newInstance(byteArray11, (int) (short) 0, 1);
        com.google.protobuf.CodedOutputStream codedOutputStream19 = com.google.protobuf.CodedOutputStream.newInstance(byteArray11, (int) ' ', 0);
        compilerOptions0.inputVariableMapSerialized = byteArray11;
        compilerOptions0.setRemoveUnusedClassProperties(false);
        org.junit.Assert.assertNotNull(errorFormat3);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(methodOptions13);
        org.junit.Assert.assertNotNull(codedOutputStream16);
        org.junit.Assert.assertNotNull(codedOutputStream19);
    }

    @Test
    public void test1979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1979");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label4 = builder3.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = builder0.addExtension(builder3);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder6 = builder0.addEnumTypeBuilder();
        int int7 = builder0.getEnumTypeCount();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + label4 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label4.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test1980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1980");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.of(localDateTime4, (java.time.ZoneId) zoneOffset8);
        java.time.temporal.ChronoField chronoField12 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit13 = chronoField12.getBaseUnit();
        java.time.LocalDateTime localDateTime14 = localDateTime4.plus((long) 1970, temporalUnit13);
        java.time.LocalTime localTime15 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localDateTime14);
        int int16 = localTime15.getNano();
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertTrue("'" + chronoField12 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField12.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit13 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit13.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test1981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1981");
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions fileOptions1 = builder0.getDefaultInstanceForType();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder3 = builder0.setPyGenericServices(false);
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder4 = builder3.clearJavaMultipleFiles();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder6 = builder4.setJavaGenerateEqualsAndHash(false);
        boolean boolean7 = builder6.hasJavaMultipleFiles();
        com.google.protobuf.Descriptors.Descriptor descriptor9 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto10 = descriptor9.toProto();
        boolean boolean11 = descriptorProto10.isInitialized();
        com.google.protobuf.DescriptorProtos.MessageOptions messageOptions12 = descriptorProto10.getOptions();
        com.google.protobuf.DescriptorProtos.MessageOptions.Builder builder13 = messageOptions12.newBuilderForType();
        com.google.protobuf.DescriptorProtos.MessageOptions.Builder builder15 = builder13.setMessageSetWireFormat(false);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder16 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output18 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream20 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output18, (int) 'a');
        byte[] byteArray21 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite22 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions23 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray21, extensionRegistryLite22);
        output18.write(byteArray21);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder25 = builder16.mergeFrom(byteArray21);
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions26 = builder16.buildPartial();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder27 = builder16.addUninterpretedOptionBuilder();
        com.google.protobuf.DescriptorProtos.UninterpretedOption uninterpretedOption28 = builder27.buildPartial();
        java.lang.String str29 = uninterpretedOption28.getIdentifierValue();
        int int30 = uninterpretedOption28.getNameCount();
        com.google.protobuf.DescriptorProtos.MessageOptions.Builder builder31 = builder15.addUninterpretedOption(uninterpretedOption28);
        com.google.protobuf.DescriptorProtos.UninterpretedOption uninterpretedOption32 = uninterpretedOption28.getDefaultInstanceForType();
        boolean boolean33 = uninterpretedOption28.hasAggregateValue();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder34 = builder6.addUninterpretedOption(0, uninterpretedOption28);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(fileOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(descriptor9);
        org.junit.Assert.assertNotNull(descriptorProto10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(messageOptions12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(output18);
        org.junit.Assert.assertNotNull(codedOutputStream20);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[]");
        org.junit.Assert.assertNotNull(methodOptions23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(methodOptions26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(uninterpretedOption28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(uninterpretedOption32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test1982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1982");
        java.util.function.UnaryOperator<com.google.javascript.jscomp.DiagnosticGroup> diagnosticGroupUnaryOperator0 = java.util.function.UnaryOperator.identity();
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup1 = com.google.javascript.jscomp.DiagnosticGroups.TYPE_INVALIDATION;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup2 = diagnosticGroupUnaryOperator0.apply(diagnosticGroup1);
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup3 = null;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup4 = diagnosticGroupUnaryOperator0.apply(diagnosticGroup3);
        org.junit.Assert.assertNotNull(diagnosticGroupUnaryOperator0);
        org.junit.Assert.assertNotNull(diagnosticGroup1);
        org.junit.Assert.assertNotNull(diagnosticGroup2);
        org.junit.Assert.assertNull(diagnosticGroup4);
    }

    @Test
    public void test1983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1983");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label4 = builder3.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = builder0.addExtension(builder3);
        com.google.protobuf.DescriptorProtos.SourceCodeInfoOrBuilder sourceCodeInfoOrBuilder6 = builder5.getSourceCodeInfoOrBuilder();
        byte[] byteArray8 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite9 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions10 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray8, extensionRegistryLite9);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite11 = null;
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto enumDescriptorProto12 = com.google.protobuf.DescriptorProtos.EnumDescriptorProto.parseFrom(byteArray8, extensionRegistryLite11);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder13 = enumDescriptorProto12.newBuilderForType();
        java.util.List<com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto> enumValueDescriptorProtoList14 = enumDescriptorProto12.getValueList();
        int int15 = enumDescriptorProto12.getSerializedSize();
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder16 = builder5.addEnumType((int) (short) -1, enumDescriptorProto12);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + label4 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label4.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(sourceCodeInfoOrBuilder6);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(methodOptions10);
        org.junit.Assert.assertNotNull(enumDescriptorProto12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(enumValueDescriptorProtoList14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test1984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1984");
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder1 = builder0.clearCcGenericServices();
        boolean boolean2 = builder0.isInitialized();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder3 = builder0.clearCcGenericServices();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test1985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1985");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean4 = node3.isFromExterns();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(1);
        com.google.javascript.rhino.Node node7 = node3.clonePropsFrom(node6);
        com.google.javascript.rhino.Node node8 = node6.getNext();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertNull(node8);
    }

    @Test
    public void test1986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1986");
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.of((long) (-1));
        java.util.stream.LongStream longStream2 = longStream1.distinct();
        java.util.stream.DoubleStream doubleStream3 = longStream2.asDoubleStream();
        boolean boolean4 = doubleStream3.isParallel();
        java.util.stream.DoubleStream doubleStream5 = doubleStream3.unordered();
        // The following exception was thrown during execution in test generation
        try {
            long long6 = doubleStream3.count();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(doubleStream3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(doubleStream5);
    }

    @Test
    public void test1987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1987");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label1 = builder0.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto2 = builder0.buildPartial();
        int int3 = fieldDescriptorProto2.getSerializedSize();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder4 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto2);
        com.google.protobuf.DescriptorProtos.FieldOptions fieldOptions5 = builder4.getOptions();
        boolean boolean6 = fieldOptions5.hasExperimentalMapKey();
        com.google.protobuf.DescriptorProtos.FieldOptions.CType cType7 = fieldOptions5.getCtype();
        int int8 = fieldOptions5.getUninterpretedOptionCount();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + label1 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label1.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(fieldOptions5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + cType7 + "' != '" + com.google.protobuf.DescriptorProtos.FieldOptions.CType.STRING + "'", cType7.equals(com.google.protobuf.DescriptorProtos.FieldOptions.CType.STRING));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test1988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1988");
        byte[] byteArray0 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions2 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray0, extensionRegistryLite1);
        com.google.protobuf.CodedInputStream codedInputStream5 = com.google.protobuf.CodedInputStream.newInstance(byteArray0, 16, (int) 'a');
        int int7 = codedInputStream5.pushLimit((int) 'a');
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder8 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output10 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream12 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output10, (int) 'a');
        byte[] byteArray13 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite14 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions15 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray13, extensionRegistryLite14);
        output10.write(byteArray13);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder17 = builder8.mergeFrom(byteArray13);
        java.util.List<com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder> builderList18 = builder17.getUninterpretedOptionBuilderList();
        java.util.List<com.google.protobuf.DescriptorProtos.UninterpretedOption> uninterpretedOptionList19 = builder17.getUninterpretedOptionList();
        java.io.InputStream inputStream20 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions21 = com.google.protobuf.DescriptorProtos.EnumValueOptions.getDefaultInstance();
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder22 = com.google.protobuf.DescriptorProtos.EnumValueOptions.newBuilder(enumValueOptions21);
        java.io.InputStream inputStream23 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder24 = builder22.mergeFrom(inputStream23);
        com.google.protobuf.ByteString byteString25 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto26 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.parseFrom(byteString25);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite27 = null;
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto enumValueDescriptorProto28 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.parseFrom(byteString25, extensionRegistryLite27);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite29 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions30 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteString25, extensionRegistryLite29);
        java.io.InputStream inputStream31 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite32 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location33 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream31, extensionRegistryLite32);
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder34 = builder24.mergeFrom(byteString25, extensionRegistryLite32);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder35 = builder17.mergeFrom(inputStream20, extensionRegistryLite32);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.MessageOptions messageOptions36 = com.google.protobuf.DescriptorProtos.MessageOptions.parseFrom(codedInputStream5, extensionRegistryLite32);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 16");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(methodOptions2);
        org.junit.Assert.assertNotNull(codedInputStream5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 97 + "'", int7 == 97);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(output10);
        org.junit.Assert.assertNotNull(codedOutputStream12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(methodOptions15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builderList18);
        org.junit.Assert.assertNotNull(uninterpretedOptionList19);
        org.junit.Assert.assertNotNull(enumValueOptions21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(byteString25);
        org.junit.Assert.assertNotNull(methodDescriptorProto26);
        org.junit.Assert.assertNotNull(enumValueDescriptorProto28);
        org.junit.Assert.assertNotNull(methodOptions30);
        org.junit.Assert.assertNotNull(extensionRegistryLite32);
        org.junit.Assert.assertNotNull(location33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test1989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1989");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy5 = null;
        compilerOptions0.variableRenaming = variableRenamingPolicy5;
        compilerOptions0.setSummaryDetailLevel(999);
        boolean boolean9 = compilerOptions0.getInferTypes();
        compilerOptions0.resetWarningsGuard();
        compilerOptions0.setAliasExternals(false);
        org.junit.Assert.assertNotNull(errorFormat3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test1990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1990");
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions0 = com.google.protobuf.DescriptorProtos.MethodOptions.getDefaultInstance();
        com.google.protobuf.Descriptors.Descriptor descriptor1 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto2 = descriptor1.toProto();
        boolean boolean3 = descriptorProto2.isInitialized();
        com.google.protobuf.DescriptorProtos.MessageOptions messageOptions4 = descriptorProto2.getOptions();
        com.google.protobuf.DescriptorProtos.MessageOptions.Builder builder5 = messageOptions4.newBuilderForType();
        boolean boolean6 = messageOptions4.hasNoStandardDescriptorAccessor();
        byte[] byteArray7 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite8 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions9 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray7, extensionRegistryLite8);
        com.google.protobuf.CodedOutputStream codedOutputStream12 = com.google.protobuf.CodedOutputStream.newInstance(byteArray7, (int) (short) 0, 1);
        com.google.protobuf.CodedOutputStream codedOutputStream15 = com.google.protobuf.CodedOutputStream.newInstance(byteArray7, (int) ' ', 0);
        messageOptions4.writeTo(codedOutputStream15);
        methodOptions0.writeTo(codedOutputStream15);
        java.util.List<com.google.protobuf.DescriptorProtos.UninterpretedOption> uninterpretedOptionList18 = methodOptions0.getUninterpretedOptionList();
        org.junit.Assert.assertNotNull(methodOptions0);
        org.junit.Assert.assertNotNull(descriptor1);
        org.junit.Assert.assertNotNull(descriptorProto2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(messageOptions4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(methodOptions9);
        org.junit.Assert.assertNotNull(codedOutputStream12);
        org.junit.Assert.assertNotNull(codedOutputStream15);
        org.junit.Assert.assertNotNull(uninterpretedOptionList18);
    }

    @Test
    public void test1991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1991");
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions fileOptions1 = builder0.getDefaultInstanceForType();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder3 = builder0.setPyGenericServices(false);
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder4 = builder3.clearJavaMultipleFiles();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder6 = builder4.setJavaGenerateEqualsAndHash(false);
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder7 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions fileOptions8 = builder7.getDefaultInstanceForType();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder9 = builder6.mergeFrom(fileOptions8);
        int int10 = builder9.getUninterpretedOptionCount();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(fileOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(fileOptions8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test1992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1992");
        com.google.javascript.jscomp.SourceAst sourceAst0 = null;
        com.google.javascript.rhino.InputId inputId1 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput3 = new com.google.javascript.jscomp.CompilerInput(sourceAst0, inputId1, true);
        com.google.javascript.jscomp.SourceAst sourceAst4 = null;
        com.google.javascript.rhino.InputId inputId5 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput7 = new com.google.javascript.jscomp.CompilerInput(sourceAst4, inputId5, true);
        com.google.javascript.jscomp.SourceAst sourceAst8 = null;
        com.google.javascript.rhino.InputId inputId9 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput11 = new com.google.javascript.jscomp.CompilerInput(sourceAst8, inputId9, true);
        com.google.javascript.rhino.InputId inputId12 = compilerInput11.getInputId();
        com.google.javascript.jscomp.SourceAst sourceAst13 = null;
        com.google.javascript.rhino.InputId inputId14 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput16 = new com.google.javascript.jscomp.CompilerInput(sourceAst13, inputId14, true);
        com.google.javascript.rhino.InputId inputId17 = compilerInput16.getInputId();
        com.google.javascript.jscomp.SourceAst sourceAst18 = null;
        com.google.javascript.rhino.InputId inputId19 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput21 = new com.google.javascript.jscomp.CompilerInput(sourceAst18, inputId19, true);
        java.io.PrintStream printStream22 = null;
        com.google.javascript.jscomp.Compiler compiler23 = new com.google.javascript.jscomp.Compiler(printStream22);
        com.google.javascript.jscomp.ErrorManager errorManager24 = compiler23.getErrorManager();
        compilerInput21.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler23);
        com.google.javascript.jscomp.SourceAst sourceAst26 = null;
        com.google.javascript.rhino.InputId inputId27 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput29 = new com.google.javascript.jscomp.CompilerInput(sourceAst26, inputId27, true);
        com.google.javascript.rhino.InputId inputId30 = compilerInput29.getInputId();
        com.google.javascript.jscomp.SourceAst sourceAst31 = null;
        com.google.javascript.rhino.InputId inputId32 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput34 = new com.google.javascript.jscomp.CompilerInput(sourceAst31, inputId32, true);
        com.google.javascript.jscomp.SourceAst sourceAst35 = null;
        com.google.javascript.rhino.InputId inputId36 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput38 = new com.google.javascript.jscomp.CompilerInput(sourceAst35, inputId36, true);
        java.io.PrintStream printStream39 = null;
        com.google.javascript.jscomp.Compiler compiler40 = new com.google.javascript.jscomp.Compiler(printStream39);
        com.google.javascript.jscomp.ErrorManager errorManager41 = compiler40.getErrorManager();
        compilerInput38.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler40);
        com.google.javascript.jscomp.SourceAst sourceAst43 = null;
        com.google.javascript.rhino.InputId inputId44 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput46 = new com.google.javascript.jscomp.CompilerInput(sourceAst43, inputId44, true);
        com.google.javascript.jscomp.CompilerInput[] compilerInputArray47 = new com.google.javascript.jscomp.CompilerInput[] { compilerInput34, compilerInput38, compilerInput46 };
        com.google.common.collect.ImmutableSet<com.google.javascript.jscomp.CompilerInput> compilerInputSet48 = com.google.common.collect.ImmutableSet.of(compilerInput3, compilerInput7, compilerInput11, compilerInput16, compilerInput21, compilerInput29, compilerInputArray47);
        com.google.javascript.rhino.InputId inputId49 = compilerInput29.getInputId();
        org.junit.Assert.assertNull(inputId12);
        org.junit.Assert.assertNull(inputId17);
        org.junit.Assert.assertNotNull(errorManager24);
        org.junit.Assert.assertNull(inputId30);
        org.junit.Assert.assertNotNull(errorManager41);
        org.junit.Assert.assertNotNull(compilerInputArray47);
        org.junit.Assert.assertNotNull(compilerInputSet48);
        org.junit.Assert.assertNull(inputId49);
    }

    @Test
    public void test1993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1993");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.of(localDateTime4, (java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime10.withYear((int) (short) 1);
        java.time.temporal.ChronoField chronoField13 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit14 = chronoField13.getBaseUnit();
        java.time.ZonedDateTime zonedDateTime15 = zonedDateTime10.truncatedTo(temporalUnit14);
        java.time.ZonedDateTime zonedDateTime16 = zonedDateTime15.withEarlierOffsetAtOverlap();
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZonedDateTime zonedDateTime18 = zonedDateTime16.withDayOfYear(0);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for DayOfYear (valid values 1 - 365/366): 0");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertTrue("'" + chronoField13 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField13.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit14 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit14.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(zonedDateTime15);
        org.junit.Assert.assertNotNull(zonedDateTime16);
    }

    @Test
    public void test1994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1994");
        java.util.Locale.FilteringMode filteringMode0 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        org.junit.Assert.assertTrue("'" + filteringMode0 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode0.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
    }

    @Test
    public void test1995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1995");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        boolean boolean3 = builder0.hasPackage();
        boolean boolean4 = builder0.hasPackage();
        byte[] byteArray5 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite6 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions7 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray5, extensionRegistryLite6);
        com.google.protobuf.CodedOutputStream codedOutputStream10 = com.google.protobuf.CodedOutputStream.newInstance(byteArray5, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite11 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto12 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray5, extensionRegistryLite11);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite13 = null;
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto14 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.parseFrom(byteArray5, extensionRegistryLite13);
        com.google.protobuf.UnknownFieldSet unknownFieldSet15 = com.google.protobuf.UnknownFieldSet.parseFrom(byteArray5);
        com.google.protobuf.Message.Builder builder16 = builder0.setUnknownFields(unknownFieldSet15);
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder17 = builder0.getOptionsBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder18 = builder17.clearOptimizeFor();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(methodOptions7);
        org.junit.Assert.assertNotNull(codedOutputStream10);
        org.junit.Assert.assertNotNull(fileDescriptorProto12);
        org.junit.Assert.assertNotNull(serviceDescriptorProto14);
        org.junit.Assert.assertNotNull(unknownFieldSet15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test1996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1996");
        java.io.PrintStream printStream1 = new java.io.PrintStream("goog.abstractMethod");
        java.util.Locale locale2 = null;
        java.security.ProtectionDomain protectionDomain4 = null;
        java.security.ProtectionDomain[] protectionDomainArray5 = new java.security.ProtectionDomain[] { protectionDomain4 };
        java.security.AccessControlContext accessControlContext6 = new java.security.AccessControlContext(protectionDomainArray5);
        java.io.PrintStream printStream7 = printStream1.format(locale2, "hi!", (java.lang.Object[]) protectionDomainArray5);
        java.util.Locale locale8 = java.util.Locale.KOREA;
        java.time.temporal.ChronoField chronoField9 = java.time.temporal.ChronoField.OFFSET_SECONDS;
        java.time.temporal.TemporalUnit temporalUnit10 = chronoField9.getRangeUnit();
        long long12 = chronoField9.checkValidValue((long) 2);
        java.util.Locale locale16 = new java.util.Locale("", "NUMBER 52.0 0", "hi!");
        java.lang.String str17 = chronoField9.getDisplayName(locale16);
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.lang.String str19 = locale16.getDisplayVariant(locale18);
        java.util.Locale.setDefault(locale18);
        java.lang.String str21 = locale18.getDisplayScript();
        java.lang.String str22 = locale8.getDisplayCountry(locale18);
        com.google.javascript.jscomp.CompilerOptions compilerOptions27 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions27.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat30 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions27.errorFormat = errorFormat30;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy32 = null;
        compilerOptions27.variableRenaming = variableRenamingPolicy32;
        compilerOptions27.setSummaryDetailLevel(999);
        compilerOptions27.checkSuspiciousCode = true;
        byte[] byteArray38 = compilerOptions27.inputPropertyMapSerialized;
        com.google.javascript.jscomp.CompilerOptions compilerOptions39 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions39.optimizeCalls = false;
        compilerOptions39.preferLineBreakAtEndOfFile = false;
        boolean boolean44 = compilerOptions39.markNoSideEffectCalls;
        boolean boolean45 = compilerOptions39.labelRenaming;
        com.google.javascript.jscomp.DependencyOptions dependencyOptions46 = new com.google.javascript.jscomp.DependencyOptions();
        java.lang.String[] strArray50 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet51 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet51, strArray50);
        boolean boolean53 = strSet51.isEmpty();
        java.nio.ByteBuffer byteBuffer55 = java.nio.ByteBuffer.allocate(100);
        boolean boolean56 = strSet51.equals((java.lang.Object) byteBuffer55);
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet61 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet61, strArray60);
        boolean boolean63 = strSet61.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream64 = strSet61.stream();
        boolean boolean65 = strSet51.retainAll((java.util.Collection<java.lang.String>) strSet61);
        com.google.javascript.jscomp.DependencyOptions dependencyOptions66 = dependencyOptions46.setEntryPoints((java.util.Collection<java.lang.String>) strSet51);
        compilerOptions39.setDependencyOptions(dependencyOptions46);
        com.google.javascript.jscomp.CheckLevel checkLevel68 = compilerOptions39.checkGlobalThisLevel;
        compilerOptions27.checkMissingReturn = checkLevel68;
        com.google.javascript.jscomp.DiagnosticType diagnosticType70 = com.google.javascript.jscomp.Compiler.MOTION_ITERATIONS_ERROR;
        java.lang.String[] strArray74 = new java.lang.String[] { "FileDescriptorProto", "16:00:52+00:00:52", "Exceeded max number of code motion iterations: {0}" };
        com.google.javascript.jscomp.JSError jSError75 = com.google.javascript.jscomp.JSError.make("java.nio.HeapFloatBuffer[pos=0 lim=6 cap=6]", (int) (short) 10, (int) ':', checkLevel68, diagnosticType70, strArray74);
        java.io.PrintStream printStream76 = printStream7.format(locale18, "1969-12-31T23:59:58.999Z", (java.lang.Object[]) strArray74);
        printStream7.print((double) 365249999634L);
        org.junit.Assert.assertNotNull(protectionDomainArray5);
        org.junit.Assert.assertNotNull(printStream7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko_KR");
        org.junit.Assert.assertTrue("'" + chronoField9 + "' != '" + java.time.temporal.ChronoField.OFFSET_SECONDS + "'", chronoField9.equals(java.time.temporal.ChronoField.OFFSET_SECONDS));
        org.junit.Assert.assertTrue("'" + temporalUnit10 + "' != '" + java.time.temporal.ChronoUnit.FOREVER + "'", temporalUnit10.equals(java.time.temporal.ChronoUnit.FOREVER));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 2L + "'", long12 == 2L);
        org.junit.Assert.assertEquals(locale16.toString(), "_NUMBER 52.0 0_hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "OffsetSeconds" + "'", str17, "OffsetSeconds");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "hi!" + "'", str19, "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\ub300\ud55c\ubbfc\uad6d" + "'", str22, "\ub300\ud55c\ubbfc\uad6d");
        org.junit.Assert.assertNotNull(errorFormat30);
        org.junit.Assert.assertNull(byteArray38);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(strStream64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(dependencyOptions66);
        org.junit.Assert.assertTrue("'" + checkLevel68 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel68.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(diagnosticType70);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(jSError75);
        org.junit.Assert.assertNotNull(printStream76);
    }

    @Test
    public void test1997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1997");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        byte[] byteArray5 = compilerOptions0.inputPropertyMapSerialized;
        compilerOptions0.exportTestFunctions = false;
        compilerOptions0.setFoldConstants(false);
        org.junit.Assert.assertNotNull(errorFormat3);
        org.junit.Assert.assertNull(byteArray5);
    }

    @Test
    public void test1998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1998");
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto0 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.getDefaultInstance();
        boolean boolean1 = methodDescriptorProto0.hasOutputType();
        com.google.protobuf.CodedOutputStream codedOutputStream2 = null;
        methodDescriptorProto0.writeTo(codedOutputStream2);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder4 = methodDescriptorProto0.toBuilder();
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder6 = builder4.setOutputType("java.nio.HeapFloatBuffer[pos=0 lim=6 cap=6]");
        java.io.InputStream inputStream7 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite8 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions9 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(inputStream7, extensionRegistryLite8);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder10 = builder6.mergeOptions(methodOptions9);
        java.util.Map<com.google.protobuf.Descriptors.FieldDescriptor, java.lang.Object> fieldDescriptorMap11 = builder10.getAllFields();
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder12 = builder10.clearName();
        boolean boolean13 = builder10.hasOutputType();
        org.junit.Assert.assertNotNull(methodDescriptorProto0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(methodOptions9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(fieldDescriptorMap11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test1999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1999");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto1 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.parseFrom(inputStream0);
        org.junit.Assert.assertNotNull(serviceDescriptorProto1);
    }

    @Test
    public void test2000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test2000");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label1 = builder0.getLabel();
        java.io.InputStream inputStream2 = null;
        com.google.protobuf.MessageLite.Builder builder3 = builder0.mergeFrom(inputStream2);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type type4 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type.TYPE_BYTES;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder5 = builder0.setType(type4);
        com.google.protobuf.UnknownFieldSet unknownFieldSet6 = builder0.getUnknownFields();
        boolean boolean8 = unknownFieldSet6.hasField(43);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + label1 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label1.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + type4 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type.TYPE_BYTES + "'", type4.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type.TYPE_BYTES));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(unknownFieldSet6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }
}

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest5 {

    public static boolean debug = false;

    @Test
    public void test2501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2501");
        java.nio.charset.CoderResult coderResult0 = java.nio.charset.CoderResult.OVERFLOW;
        // The following exception was thrown during execution in test generation
        try {
            coderResult0.throwException();
            org.junit.Assert.fail("Expected exception of type java.nio.BufferOverflowException; message: null");
        } catch (java.nio.BufferOverflowException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(coderResult0);
    }

    @Test
    public void test2502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2502");
        char[] charArray4 = new char[] { '#', ' ', ':', ' ' };
        java.nio.CharBuffer charBuffer5 = java.nio.CharBuffer.wrap(charArray4);
        java.nio.ByteOrder byteOrder6 = charBuffer5.order();
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "# : ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "# : ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[#,  , :,  ]");
        org.junit.Assert.assertNotNull(charBuffer5);
        org.junit.Assert.assertNotNull(byteOrder6);
    }

    @Test
    public void test2503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2503");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) ' ');
        boolean boolean2 = charBuffer1.isDirect();
        java.nio.CharBuffer charBuffer4 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer6 = charBuffer4.put('a');
        char[] charArray8 = new char[] { '4' };
        java.nio.CharBuffer charBuffer9 = charBuffer6.get(charArray8);
        java.nio.CharBuffer charBuffer10 = charBuffer6.compact();
        java.nio.CharBuffer charBuffer12 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer14 = charBuffer12.put('a');
        java.nio.CharBuffer charBuffer16 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer18 = charBuffer16.put('a');
        char[] charArray20 = new char[] { '4' };
        java.nio.CharBuffer charBuffer21 = charBuffer18.get(charArray20);
        java.nio.CharBuffer charBuffer22 = charBuffer18.compact();
        com.google.common.collect.ImmutableSet<java.lang.Appendable> appendableSet23 = com.google.common.collect.ImmutableSet.of((java.lang.Appendable) charBuffer1, (java.lang.Appendable) charBuffer6, (java.lang.Appendable) charBuffer12, (java.lang.Appendable) charBuffer22);
        java.time.ZoneOffset zoneOffset27 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset27);
        int int29 = localDateTime28.getYear();
        java.time.Instant instant30 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset34);
        java.time.OffsetDateTime offsetDateTime36 = java.time.OffsetDateTime.ofInstant(instant30, (java.time.ZoneId) zoneOffset34);
        java.time.Instant instant37 = localDateTime28.toInstant(zoneOffset34);
        boolean boolean38 = appendableSet23.equals((java.lang.Object) zoneOffset34);
        java.lang.Object[] objArray39 = appendableSet23.toArray();
        java.util.concurrent.TimeUnit timeUnit40 = java.util.concurrent.TimeUnit.HOURS;
        boolean boolean41 = appendableSet23.contains((java.lang.Object) timeUnit40);
        com.google.common.collect.ImmutableList<java.lang.Appendable> appendableList42 = appendableSet23.asList();
        java.time.ZoneOffset zoneOffset46 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime47 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset46);
        int int48 = localDateTime47.getYear();
        java.time.Instant instant49 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset53 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime54 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset53);
        java.time.OffsetDateTime offsetDateTime55 = java.time.OffsetDateTime.ofInstant(instant49, (java.time.ZoneId) zoneOffset53);
        java.time.Instant instant56 = localDateTime47.toInstant(zoneOffset53);
        int int57 = appendableList42.lastIndexOf((java.lang.Object) instant56);
        com.google.common.collect.ImmutableList<java.lang.Appendable> appendableList58 = appendableList42.reverse();
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charBuffer4);
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer9);
        org.junit.Assert.assertNotNull(charBuffer10);
        org.junit.Assert.assertNotNull(charBuffer12);
        org.junit.Assert.assertNotNull(charBuffer14);
        org.junit.Assert.assertNotNull(charBuffer16);
        org.junit.Assert.assertNotNull(charBuffer18);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer21);
        org.junit.Assert.assertNotNull(charBuffer22);
        org.junit.Assert.assertNotNull(appendableSet23);
        org.junit.Assert.assertNotNull(zoneOffset27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1970 + "'", int29 == 1970);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(offsetDateTime36);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000, \000\000, \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000, \000\000, \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000]");
        org.junit.Assert.assertNotNull(timeUnit40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(appendableList42);
        org.junit.Assert.assertNotNull(zoneOffset46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1970 + "'", int48 == 1970);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertNotNull(zoneOffset53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(offsetDateTime55);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(appendableList58);
    }

    @Test
    public void test2504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2504");
        java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite> priorityMap0 = new java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite>();
        java.lang.Object obj1 = priorityMap0.clone();
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder2 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.newBuilder();
        boolean boolean3 = priorityMap0.containsValue((java.lang.Object) builder2);
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder5 = builder2.setName("java.nio.ByteBufferAsDoubleBufferB[pos=0 lim=12 cap=12]");
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder7 = builder5.setNumber(52);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto8 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.getDefaultInstance();
        boolean boolean9 = methodDescriptorProto8.hasOutputType();
        com.google.protobuf.CodedOutputStream codedOutputStream10 = null;
        methodDescriptorProto8.writeTo(codedOutputStream10);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder12 = methodDescriptorProto8.toBuilder();
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder14 = builder12.setOutputType("java.nio.HeapFloatBuffer[pos=0 lim=6 cap=6]");
        java.io.InputStream inputStream15 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite16 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions17 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(inputStream15, extensionRegistryLite16);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder18 = builder14.mergeOptions(methodOptions17);
        java.util.Map<com.google.protobuf.Descriptors.FieldDescriptor, java.lang.Object> fieldDescriptorMap19 = builder18.getAllFields();
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions20 = builder18.getOptions();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder21 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder23 = builder21.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder24 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label25 = builder24.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder26 = builder21.addExtension(builder24);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder27 = builder21.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder28 = builder27.getOptionsBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder29 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder31 = builder29.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder32 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label33 = builder32.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder34 = builder29.addExtension(builder32);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder35 = builder29.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder36 = builder35.getOptionsBuilder();
        java.io.InputStream inputStream37 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions38 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream37);
        boolean boolean39 = enumOptions38.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder40 = builder36.mergeFrom(enumOptions38);
        com.google.protobuf.UnknownFieldSet unknownFieldSet41 = builder36.getUnknownFields();
        com.google.protobuf.CodedOutputStream codedOutputStream42 = null;
        unknownFieldSet41.writeTo(codedOutputStream42);
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder44 = builder28.setUnknownFields(unknownFieldSet41);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto45 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.getDefaultInstance();
        boolean boolean46 = methodDescriptorProto45.hasOutputType();
        byte[] byteArray47 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite48 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions49 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray47, extensionRegistryLite48);
        com.google.protobuf.CodedOutputStream codedOutputStream52 = com.google.protobuf.CodedOutputStream.newInstance(byteArray47, (int) (short) 0, 1);
        methodDescriptorProto45.writeTo(codedOutputStream52);
        unknownFieldSet41.writeTo(codedOutputStream52);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder55 = builder18.mergeUnknownFields(unknownFieldSet41);
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder56 = builder5.mergeUnknownFields(unknownFieldSet41);
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "{}");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(methodDescriptorProto8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(methodOptions17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(fieldDescriptorMap19);
        org.junit.Assert.assertNotNull(methodOptions20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + label25 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label25.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + label33 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label33.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(enumOptions38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(unknownFieldSet41);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(methodDescriptorProto45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[]");
        org.junit.Assert.assertNotNull(methodOptions49);
        org.junit.Assert.assertNotNull(codedOutputStream52);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
    }

    @Test
    public void test2505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2505");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        java.lang.String[] strArray11 = new java.lang.String[] { "South Korea", "Unknown class name", "ISO", "OffsetSeconds", ":" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        compilerOptions0.setReplaceStringsConfiguration("1970-01-01+00:00:52", (java.util.List<java.lang.String>) strList12);
        compilerOptions0.lineBreak = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions17 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions17.setRecordFunctionInformation(true);
        compilerOptions17.setMoveFunctionDeclarations(true);
        com.google.javascript.jscomp.CheckLevel checkLevel22 = compilerOptions17.checkMissingGetCssNameLevel;
        compilerOptions0.setCheckProvides(checkLevel22);
        boolean boolean24 = compilerOptions0.removeUnusedPrototypePropertiesInExterns;
        boolean boolean25 = compilerOptions0.generatePseudoNames;
        compilerOptions0.setLineLengthThreshold((int) (byte) 100);
        org.junit.Assert.assertNotNull(errorFormat3);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + checkLevel22 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel22.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test2506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2506");
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output2 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream4 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output2, (int) 'a');
        byte[] byteArray5 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite6 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions7 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray5, extensionRegistryLite6);
        output2.write(byteArray5);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder9 = builder0.mergeFrom(byteArray5);
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions10 = builder0.buildPartial();
        com.google.protobuf.DescriptorProtos.FileOptions fileOptions11 = com.google.protobuf.DescriptorProtos.FileOptions.getDefaultInstance();
        java.util.List<com.google.protobuf.DescriptorProtos.UninterpretedOption> uninterpretedOptionList12 = fileOptions11.getUninterpretedOptionList();
        com.google.protobuf.DescriptorProtos.FileOptions fileOptions13 = fileOptions11.getDefaultInstanceForType();
        com.google.protobuf.ByteString byteString14 = fileOptions13.toByteString();
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder15 = builder0.mergeFrom((com.google.protobuf.Message) fileOptions13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: mergeFrom(Message) can only merge messages of the same type.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(output2);
        org.junit.Assert.assertNotNull(codedOutputStream4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(methodOptions7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(methodOptions10);
        org.junit.Assert.assertNotNull(fileOptions11);
        org.junit.Assert.assertNotNull(uninterpretedOptionList12);
        org.junit.Assert.assertNotNull(fileOptions13);
        org.junit.Assert.assertNotNull(byteString14);
    }

    @Test
    public void test2507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2507");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label4 = builder3.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = builder0.addExtension(builder3);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder6 = builder0.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder7 = builder6.getOptionsBuilder();
        java.io.InputStream inputStream8 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions9 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream8);
        boolean boolean10 = enumOptions9.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder11 = builder7.mergeFrom(enumOptions9);
        com.google.protobuf.UnknownFieldSet unknownFieldSet12 = builder7.getUnknownFields();
        byte[] byteArray13 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite14 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions15 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray13, extensionRegistryLite14);
        com.google.protobuf.CodedOutputStream codedOutputStream18 = com.google.protobuf.CodedOutputStream.newInstance(byteArray13, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite19 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto20 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray13, extensionRegistryLite19);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite21 = null;
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto22 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.parseFrom(byteArray13, extensionRegistryLite21);
        com.google.protobuf.UnknownFieldSet unknownFieldSet23 = com.google.protobuf.UnknownFieldSet.parseFrom(byteArray13);
        com.google.protobuf.ByteString byteString24 = unknownFieldSet23.toByteString();
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite25 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder26 = builder7.mergeFrom(byteString24, extensionRegistryLite25);
        java.io.InputStream inputStream28 = null;
        byte[] byteArray29 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite30 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions31 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray29, extensionRegistryLite30);
        com.google.protobuf.CodedOutputStream codedOutputStream34 = com.google.protobuf.CodedOutputStream.newInstance(byteArray29, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite35 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto36 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray29, extensionRegistryLite35);
        com.google.protobuf.CodedOutputStream codedOutputStream37 = com.google.protobuf.CodedOutputStream.newInstance(byteArray29);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder38 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label39 = builder38.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto40 = builder38.buildPartial();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder41 = fieldDescriptorProto40.newBuilderForType();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder42 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto40);
        java.io.File file45 = null;
        java.io.File file46 = java.io.File.createTempFile("hi!", "ISO", file45);
        boolean boolean49 = file46.setWritable(false, false);
        java.net.URI uRI50 = file46.toURI();
        java.io.PrintStream printStream51 = new java.io.PrintStream(file46);
        printStream51.print((int) (byte) 0);
        printStream51.print(10.0d);
        printStream51.close();
        java.lang.String[] strArray60 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet61 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet61, strArray60);
        boolean boolean63 = strSet61.isEmpty();
        java.nio.ByteBuffer byteBuffer65 = java.nio.ByteBuffer.allocate(100);
        boolean boolean66 = strSet61.equals((java.lang.Object) byteBuffer65);
        java.nio.IntBuffer intBuffer67 = byteBuffer65.asIntBuffer();
        double double68 = byteBuffer65.getDouble();
        java.nio.ByteBuffer byteBuffer71 = byteBuffer65.put((int) (short) 1, (byte) 1);
        byte[] byteArray72 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite73 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions74 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray72, extensionRegistryLite73);
        com.google.protobuf.CodedOutputStream codedOutputStream77 = com.google.protobuf.CodedOutputStream.newInstance(byteArray72, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite78 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto79 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray72, extensionRegistryLite78);
        com.google.protobuf.CodedOutputStream codedOutputStream80 = com.google.protobuf.CodedOutputStream.newInstance(byteArray72);
        java.nio.ByteBuffer byteBuffer81 = byteBuffer65.get(byteArray72);
        printStream51.write(byteArray72, (int) '/', (int) (byte) 1);
        java.io.InputStream inputStream85 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite86 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location87 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream85, extensionRegistryLite86);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder88 = builder42.mergeFrom(byteArray72, extensionRegistryLite86);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto89 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray29, extensionRegistryLite86);
        com.google.protobuf.DescriptorProtos.UninterpretedOption uninterpretedOption90 = com.google.protobuf.DescriptorProtos.UninterpretedOption.parseFrom(inputStream28, extensionRegistryLite86);
        double double91 = uninterpretedOption90.getDoubleValue();
        java.util.List<com.google.protobuf.DescriptorProtos.UninterpretedOption.NamePart> namePartList92 = uninterpretedOption90.getNameList();
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder93 = builder7.setUninterpretedOption(32, uninterpretedOption90);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + label4 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label4.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(enumOptions9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(unknownFieldSet12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(methodOptions15);
        org.junit.Assert.assertNotNull(codedOutputStream18);
        org.junit.Assert.assertNotNull(fileDescriptorProto20);
        org.junit.Assert.assertNotNull(serviceDescriptorProto22);
        org.junit.Assert.assertNotNull(unknownFieldSet23);
        org.junit.Assert.assertNotNull(byteString24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[]");
        org.junit.Assert.assertNotNull(methodOptions31);
        org.junit.Assert.assertNotNull(codedOutputStream34);
        org.junit.Assert.assertNotNull(fileDescriptorProto36);
        org.junit.Assert.assertNotNull(codedOutputStream37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + label39 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label39.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(file46);
        org.junit.Assert.assertEquals(file46.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file46.toString(), "/tmp/hi!7921313995853853172ISO");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(uRI50);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(intBuffer67);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 0.0d + "'", double68 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer71);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[]");
        org.junit.Assert.assertNotNull(methodOptions74);
        org.junit.Assert.assertNotNull(codedOutputStream77);
        org.junit.Assert.assertNotNull(fileDescriptorProto79);
        org.junit.Assert.assertNotNull(codedOutputStream80);
        org.junit.Assert.assertNotNull(byteBuffer81);
        org.junit.Assert.assertNotNull(extensionRegistryLite86);
        org.junit.Assert.assertNotNull(location87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(fileDescriptorProto89);
        org.junit.Assert.assertNotNull(uninterpretedOption90);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 0.0d + "'", double91 == 0.0d);
        org.junit.Assert.assertNotNull(namePartList92);
    }

    @Test
    public void test2508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2508");
        java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite> priorityMap0 = new java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite>();
        java.lang.Object obj1 = priorityMap0.clone();
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder2 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.newBuilder();
        boolean boolean3 = priorityMap0.containsValue((java.lang.Object) builder2);
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder5 = builder2.setName("java.nio.ByteBufferAsDoubleBufferB[pos=0 lim=12 cap=12]");
        com.google.protobuf.ByteString byteString6 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder7 = builder2.mergeFrom(byteString6);
        com.google.protobuf.DescriptorProtos.ServiceOptions serviceOptions8 = com.google.protobuf.DescriptorProtos.ServiceOptions.parseFrom(byteString6);
        boolean boolean9 = serviceOptions8.isInitialized();
        com.google.protobuf.DescriptorProtos.ServiceOptions.Builder builder10 = serviceOptions8.newBuilderForType();
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.UninterpretedOptionOrBuilder uninterpretedOptionOrBuilder12 = builder10.getUninterpretedOptionOrBuilder(35);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 35");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "{}");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(byteString6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(serviceOptions8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test2509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2509");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.lang.String str1 = localDate0.toString();
        java.time.chrono.IsoChronology isoChronology2 = localDate0.getChronology();
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime8 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset7);
        int int9 = localDateTime8.getYear();
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset13);
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset18);
        java.time.ZonedDateTime zonedDateTime20 = java.time.ZonedDateTime.of(localDateTime14, (java.time.ZoneId) zoneOffset18);
        boolean boolean21 = localDateTime8.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime14);
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime26 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset25);
        int int27 = localDateTime26.getYear();
        java.time.LocalDate localDate28 = localDateTime26.toLocalDate();
        int int29 = localDateTime8.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime26);
        java.time.temporal.ChronoField chronoField30 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit31 = chronoField30.getBaseUnit();
        long long32 = localDateTime8.getLong((java.time.temporal.TemporalField) chronoField30);
        java.time.LocalTime localTime33 = localDateTime8.toLocalTime();
        java.time.Instant instant34 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset38 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime39 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset38);
        java.time.OffsetDateTime offsetDateTime40 = java.time.OffsetDateTime.ofInstant(instant34, (java.time.ZoneId) zoneOffset38);
        java.time.OffsetDateTime offsetDateTime42 = offsetDateTime40.minusDays((long) (short) 100);
        java.lang.String str43 = offsetDateTime40.toString();
        java.time.LocalTime localTime44 = offsetDateTime40.toLocalTime();
        java.time.ZoneOffset zoneOffset49 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime50 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset49);
        int int51 = localDateTime50.getYear();
        java.time.Instant instant52 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset56 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime57 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset56);
        java.time.OffsetDateTime offsetDateTime58 = java.time.OffsetDateTime.ofInstant(instant52, (java.time.ZoneId) zoneOffset56);
        java.time.Instant instant59 = localDateTime50.toInstant(zoneOffset56);
        java.time.ZoneOffset zoneOffset64 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime65 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset64);
        java.time.ZoneOffset zoneOffset69 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime70 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset69);
        java.time.ZonedDateTime zonedDateTime71 = java.time.ZonedDateTime.of(localDateTime65, (java.time.ZoneId) zoneOffset69);
        java.time.temporal.ChronoField chronoField73 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit74 = chronoField73.getBaseUnit();
        java.time.LocalDateTime localDateTime75 = localDateTime65.plus((long) 1970, temporalUnit74);
        java.time.ZoneOffset zoneOffset80 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime81 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset80);
        java.time.ZoneOffset zoneOffset85 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime86 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset85);
        java.time.ZonedDateTime zonedDateTime87 = java.time.ZonedDateTime.of(localDateTime81, (java.time.ZoneId) zoneOffset85);
        java.time.temporal.ChronoField chronoField89 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit90 = chronoField89.getBaseUnit();
        java.time.LocalDateTime localDateTime91 = localDateTime81.plus((long) 1970, temporalUnit90);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime92 = localDateTime75.minus((long) 43, temporalUnit90);
        java.time.Instant instant93 = instant59.plus((long) 16384, temporalUnit90);
        java.time.LocalTime localTime94 = localTime44.plus((long) 64, temporalUnit90);
        java.time.LocalDateTime localDateTime95 = localDateTime8.truncatedTo(temporalUnit90);
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoLocalDate chronoLocalDate96 = localDate0.minus(171L, temporalUnit90);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported unit: Hours");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "2022-02-21" + "'", str1, "2022-02-21");
        org.junit.Assert.assertNotNull(isoChronology2);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(zonedDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1970 + "'", int27 == 1970);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + chronoField30 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField30.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit31 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit31.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 12L + "'", long32 == 12L);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(zoneOffset38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(offsetDateTime40);
        org.junit.Assert.assertNotNull(offsetDateTime42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1970-01-01T00:00:52+00:00:52" + "'", str43, "1970-01-01T00:00:52+00:00:52");
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(zoneOffset49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1970 + "'", int51 == 1970);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertNotNull(zoneOffset56);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(offsetDateTime58);
        org.junit.Assert.assertNotNull(instant59);
        org.junit.Assert.assertNotNull(zoneOffset64);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(zoneOffset69);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(zonedDateTime71);
        org.junit.Assert.assertTrue("'" + chronoField73 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField73.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit74 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit74.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(zoneOffset80);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(zoneOffset85);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(zonedDateTime87);
        org.junit.Assert.assertTrue("'" + chronoField89 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField89.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit90 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit90.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime91);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime92);
        org.junit.Assert.assertNotNull(instant93);
        org.junit.Assert.assertNotNull(localTime94);
        org.junit.Assert.assertNotNull(localDateTime95);
    }

    @Test
    public void test2510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2510");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType4 = jSTypeRegistry2.createObjectType(objectType3);
        jSTypeRegistry2.identifyNonNullableName("/");
        com.google.javascript.rhino.Node node11 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean12 = node11.isFromExterns();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean17 = node16.isFromExterns();
        java.lang.String str18 = node16.toString();
        com.google.javascript.rhino.Node node19 = node11.copyInformationFrom(node16);
        int int20 = node11.getLineno();
        int int21 = node11.getType();
        boolean boolean22 = node11.isQuotedString();
        com.google.javascript.rhino.ErrorReporter errorReporter23 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry25 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter23, false);
        com.google.javascript.rhino.ErrorReporter errorReporter26 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter26, false);
        com.google.javascript.rhino.jstype.ObjectType objectType29 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType30 = jSTypeRegistry28.createObjectType(objectType29);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        com.google.javascript.rhino.jstype.ObjectType objectType34 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType35 = jSTypeRegistry33.createObjectType(objectType34);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair36 = objectType30.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType35);
        java.lang.String str37 = objectType35.getDisplayName();
        java.util.Collection<com.google.javascript.rhino.jstype.FunctionType> functionTypeCollection38 = jSTypeRegistry25.getDirectImplementors(objectType35);
        com.google.javascript.rhino.jstype.ObjectType objectType39 = jSTypeRegistry2.createObjectType("US-ASCII", node11, objectType35);
        com.google.javascript.rhino.ErrorReporter errorReporter40 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter40, false);
        com.google.javascript.rhino.ErrorReporter errorReporter43 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry45 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter43, false);
        com.google.javascript.rhino.jstype.ObjectType objectType46 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType47 = jSTypeRegistry45.createObjectType(objectType46);
        com.google.javascript.rhino.ErrorReporter errorReporter48 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry50 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter48, false);
        com.google.javascript.rhino.jstype.ObjectType objectType51 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType52 = jSTypeRegistry50.createObjectType(objectType51);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair53 = objectType47.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType52);
        java.lang.String str54 = objectType52.getDisplayName();
        java.util.Collection<com.google.javascript.rhino.jstype.FunctionType> functionTypeCollection55 = jSTypeRegistry42.getDirectImplementors(objectType52);
        boolean boolean56 = objectType52.isAllType();
        jSTypeRegistry2.resolveTypesInScope((com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>) objectType52);
        org.junit.Assert.assertNotNull(objectType4);
        org.junit.Assert.assertNotNull(node11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "NUMBER 52.0 0" + "'", str18, "NUMBER 52.0 0");
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 39 + "'", int21 == 39);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(objectType30);
        org.junit.Assert.assertNotNull(objectType35);
        org.junit.Assert.assertNotNull(typePair36);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(functionTypeCollection38);
        org.junit.Assert.assertNotNull(objectType39);
        org.junit.Assert.assertNotNull(objectType47);
        org.junit.Assert.assertNotNull(objectType52);
        org.junit.Assert.assertNotNull(typePair53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(functionTypeCollection55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test2511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2511");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset9);
        java.time.ZonedDateTime zonedDateTime11 = java.time.ZonedDateTime.of(localDateTime5, (java.time.ZoneId) zoneOffset9);
        java.time.ZonedDateTime zonedDateTime13 = zonedDateTime11.withHour(16);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime14 = zonedDateTime13.withLaterOffsetAtOverlap();
        java.time.temporal.Temporal temporal15 = instant0.adjustInto((java.time.temporal.Temporal) zonedDateTime13);
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset19);
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset24);
        java.time.ZonedDateTime zonedDateTime26 = java.time.ZonedDateTime.of(localDateTime20, (java.time.ZoneId) zoneOffset24);
        java.time.ZonedDateTime zonedDateTime28 = zonedDateTime26.withHour(16);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime29 = zonedDateTime28.toLocalDateTime();
        int int30 = zonedDateTime28.getDayOfMonth();
        boolean boolean31 = zonedDateTime13.isBefore((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime28);
        java.time.Duration duration33 = java.time.Duration.ofDays(52L);
        java.time.Duration duration35 = duration33.plusHours(0L);
        java.time.ZonedDateTime zonedDateTime36 = zonedDateTime28.minus((java.time.temporal.TemporalAmount) duration35);
        java.time.temporal.TemporalAmount temporalAmount37 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime38 = zonedDateTime28.minus(temporalAmount37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: amountToSubtract");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(zonedDateTime13);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime14);
        org.junit.Assert.assertNotNull(temporal15);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertNotNull(zonedDateTime28);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(zonedDateTime36);
    }

    @Test
    public void test2512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2512");
        com.google.protobuf.ByteString byteString0 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions2 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(byteString0, extensionRegistryLite1);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.UninterpretedOptionOrBuilder uninterpretedOptionOrBuilder4 = enumOptions2.getUninterpretedOptionOrBuilder((int) '\000');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteString0);
        org.junit.Assert.assertNotNull(enumOptions2);
    }

    @Test
    public void test2513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2513");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.of(localDateTime4, (java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime10.plusDays((long) '4');
        java.time.ZonedDateTime zonedDateTime13 = zonedDateTime10.withFixedOffsetZone();
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset17);
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset22);
        java.time.ZonedDateTime zonedDateTime24 = java.time.ZonedDateTime.of(localDateTime18, (java.time.ZoneId) zoneOffset22);
        java.time.ZonedDateTime zonedDateTime26 = zonedDateTime24.withYear((int) (short) 1);
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset30);
        int int32 = localDateTime31.getYear();
        java.time.LocalDate localDate33 = localDateTime31.toLocalDate();
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset37);
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime43 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset42);
        java.time.ZonedDateTime zonedDateTime44 = java.time.ZonedDateTime.of(localDateTime38, (java.time.ZoneId) zoneOffset42);
        java.time.temporal.ChronoField chronoField46 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit47 = chronoField46.getBaseUnit();
        java.time.LocalDateTime localDateTime48 = localDateTime38.plus((long) 1970, temporalUnit47);
        java.time.LocalTime localTime49 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localDateTime48);
        java.time.ZoneOffset zoneOffset53 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime54 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset53);
        java.time.OffsetDateTime offsetDateTime55 = java.time.OffsetDateTime.of(localDate33, localTime49, zoneOffset53);
        java.time.ZonedDateTime zonedDateTime56 = zonedDateTime24.withZoneSameInstant((java.time.ZoneId) zoneOffset53);
        java.time.ZoneOffset zoneOffset60 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime61 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset60);
        java.time.ZoneOffset zoneOffset65 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime66 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset65);
        java.time.ZonedDateTime zonedDateTime67 = java.time.ZonedDateTime.of(localDateTime61, (java.time.ZoneId) zoneOffset65);
        java.time.ZonedDateTime zonedDateTime69 = zonedDateTime67.plusDays((long) '4');
        java.time.ZonedDateTime zonedDateTime71 = zonedDateTime67.withMinute((int) '#');
        boolean boolean72 = zonedDateTime24.isAfter((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime71);
        boolean boolean73 = zonedDateTime10.isEqual((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime71);
        java.time.ZonedDateTime zonedDateTime75 = zonedDateTime10.minusHours((long) 67108864);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(zonedDateTime13);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zonedDateTime24);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1970 + "'", int32 == 1970);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(zonedDateTime44);
        org.junit.Assert.assertTrue("'" + chronoField46 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField46.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit47 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit47.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(zoneOffset53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(offsetDateTime55);
        org.junit.Assert.assertNotNull(zonedDateTime56);
        org.junit.Assert.assertNotNull(zoneOffset60);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(zoneOffset65);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(zonedDateTime67);
        org.junit.Assert.assertNotNull(zonedDateTime69);
        org.junit.Assert.assertNotNull(zonedDateTime71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(zonedDateTime75);
    }

    @Test
    public void test2514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2514");
        java.time.Month month0 = java.time.Month.FEBRUARY;
        java.time.temporal.ChronoField chronoField1 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        // The following exception was thrown during execution in test generation
        try {
            long long2 = month0.getLong((java.time.temporal.TemporalField) chronoField1);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: SecondOfDay");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + month0 + "' != '" + java.time.Month.FEBRUARY + "'", month0.equals(java.time.Month.FEBRUARY));
        org.junit.Assert.assertTrue("'" + chronoField1 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField1.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
    }

    @Test
    public void test2515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2515");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy5 = null;
        compilerOptions0.variableRenaming = variableRenamingPolicy5;
        compilerOptions0.setSummaryDetailLevel(999);
        boolean boolean9 = compilerOptions0.getInferTypes();
        boolean boolean10 = compilerOptions0.ideMode;
        compilerOptions0.setGroupVariableDeclarations(true);
        boolean boolean13 = compilerOptions0.deadAssignmentElimination;
        compilerOptions0.exportTestFunctions = true;
        compilerOptions0.setCheckControlStructures(true);
        boolean boolean18 = compilerOptions0.inlineFunctions;
        org.junit.Assert.assertNotNull(errorFormat3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test2516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2516");
        int int0 = java.util.Spliterator.SIZED;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 64 + "'", int0 == 64);
    }

    @Test
    public void test2517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2517");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder3 = builder2.clearSourceCodeInfo();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder4 = builder2.getSourceCodeInfoBuilder();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo sourceCodeInfo5 = builder4.getDefaultInstanceForType();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder6 = sourceCodeInfo5.newBuilderForType();
        java.util.List<com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location> locationList7 = builder6.getLocationList();
        java.io.InputStream inputStream8 = null;
        byte[] byteArray9 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite10 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions11 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray9, extensionRegistryLite10);
        com.google.protobuf.DescriptorProtos.UninterpretedOption uninterpretedOption12 = com.google.protobuf.DescriptorProtos.UninterpretedOption.parseFrom(byteArray9);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder13 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label14 = builder13.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto15 = builder13.buildPartial();
        int int16 = fieldDescriptorProto15.getSerializedSize();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder17 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto15);
        java.io.InputStream inputStream18 = null;
        java.io.InputStream inputStream19 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite20 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location21 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream19, extensionRegistryLite20);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder22 = builder17.mergeFrom(inputStream18, extensionRegistryLite20);
        com.google.javascript.jscomp.FunctionInformationMap functionInformationMap23 = com.google.javascript.jscomp.FunctionInformationMap.parseFrom(byteArray9, extensionRegistryLite20);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean24 = builder6.mergeDelimitedFrom(inputStream8, extensionRegistryLite20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(sourceCodeInfo5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locationList7);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(methodOptions11);
        org.junit.Assert.assertNotNull(uninterpretedOption12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + label14 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label14.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(extensionRegistryLite20);
        org.junit.Assert.assertNotNull(location21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(functionInformationMap23);
    }

    @Test
    public void test2518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2518");
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder1 = builder0.clearCcGenericServices();
        com.google.protobuf.Descriptors.Descriptor descriptor2 = builder0.getDescriptorForType();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(descriptor2);
    }

    @Test
    public void test2519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2519");
        java.io.PrintStream printStream0 = null;
        com.google.javascript.jscomp.Compiler compiler1 = new com.google.javascript.jscomp.Compiler(printStream0);
        com.google.javascript.jscomp.SourceMap sourceMap2 = compiler1.getSourceMap();
        java.util.stream.LongStream longStream4 = java.util.stream.LongStream.of((long) (-1));
        com.google.common.collect.ImmutableMap<com.google.javascript.jscomp.Compiler, java.util.stream.LongStream> compilerMap5 = com.google.common.collect.ImmutableMap.of(compiler1, longStream4);
        com.google.common.collect.ImmutableSet<com.google.javascript.jscomp.Compiler> compilerSet6 = compilerMap5.keySet();
        org.junit.Assert.assertNull(sourceMap2);
        org.junit.Assert.assertNotNull(longStream4);
        org.junit.Assert.assertNotNull(compilerMap5);
        org.junit.Assert.assertNotNull(compilerSet6);
    }

    @Test
    public void test2520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2520");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy5 = null;
        compilerOptions0.variableRenaming = variableRenamingPolicy5;
        compilerOptions0.setSummaryDetailLevel(999);
        compilerOptions0.renamePrefixNamespace = "1970-01-01";
        compilerOptions0.printInputDelimiter = true;
        compilerOptions0.removeUnusedClassProperties = true;
        org.junit.Assert.assertNotNull(errorFormat3);
    }

    @Test
    public void test2521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2521");
        com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder builder0 = com.google.javascript.jscomp.FunctionInformationMap.Entry.newBuilder();
        boolean boolean1 = builder0.hasSourceName();
        com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder builder2 = com.google.javascript.jscomp.FunctionInformationMap.Entry.newBuilder();
        boolean boolean3 = builder2.hasSourceName();
        com.google.javascript.jscomp.FunctionInformationMap.Entry entry4 = builder2.getDefaultInstanceForType();
        com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder builder5 = builder0.mergeFrom(entry4);
        com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder builder7 = builder5.setCompiledSource("{634185401}");
        boolean boolean8 = builder7.hasModuleName();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(entry4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test2522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2522");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        compilerOptions0.setRemoveDeadCode(false);
        compilerOptions0.sourceMapOutputPath = "South Korea";
        compilerOptions0.setAssumeStrictThis(false);
        compilerOptions0.setExternExportsPath("DiagnosticGroup<undefinedNames>");
        org.junit.Assert.assertNotNull(errorFormat3);
    }

    @Test
    public void test2523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2523");
        com.google.javascript.jscomp.FunctionInformationMap.Module.Builder builder0 = com.google.javascript.jscomp.FunctionInformationMap.Module.newBuilder();
        java.lang.String str1 = builder0.getCompiledSource();
        com.google.javascript.jscomp.CompilerOptions compilerOptions2 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions2.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat5 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions2.errorFormat = errorFormat5;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy7 = null;
        compilerOptions2.variableRenaming = variableRenamingPolicy7;
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode9 = compilerOptions2.getTracerMode();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder10 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder12 = builder10.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder13 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label14 = builder13.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder15 = builder10.addExtension(builder13);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder16 = builder10.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder17 = builder16.getOptionsBuilder();
        java.io.InputStream inputStream18 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions19 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream18);
        boolean boolean20 = enumOptions19.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder21 = builder17.mergeFrom(enumOptions19);
        byte[] byteArray22 = enumOptions19.toByteArray();
        compilerOptions2.setInputPropertyMapSerialized(byteArray22);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite24 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location25 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(byteArray22, extensionRegistryLite24);
        com.google.javascript.jscomp.FunctionInformationMap.Module.Builder builder28 = builder0.mergeFrom(byteArray22, 0, 0);
        boolean boolean29 = builder28.hasName();
        com.google.javascript.jscomp.FunctionInformationMap.Module.Builder builder31 = builder28.setCompiledSource("\ub300\ud55c\ubbfc\uad6d");
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor32 = null;
        java.lang.Object obj34 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.FunctionInformationMap.Module.Builder builder35 = builder28.setRepeatedField(fieldDescriptor32, 100, obj34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(errorFormat5);
        org.junit.Assert.assertTrue("'" + tracerMode9 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode9.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + label14 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label14.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(enumOptions19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(location25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test2524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2524");
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions0 = com.google.protobuf.DescriptorProtos.EnumValueOptions.getDefaultInstance();
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder1 = com.google.protobuf.DescriptorProtos.EnumValueOptions.newBuilder(enumValueOptions0);
        java.io.InputStream inputStream2 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder3 = builder1.mergeFrom(inputStream2);
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions4 = builder1.build();
        com.google.protobuf.Descriptors.Descriptor descriptor5 = builder1.getDescriptorForType();
        org.junit.Assert.assertNotNull(enumValueOptions0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(enumValueOptions4);
        org.junit.Assert.assertNotNull(descriptor5);
    }

    @Test
    public void test2525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2525");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setColorizeErrorOutput(false);
        compilerOptions0.setRenamePrefixNamespace("java.nio.ByteBufferAsDoubleBufferB[pos=0 lim=12 cap=12]");
    }

    @Test
    public void test2526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2526");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset10);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.of(localDateTime11, (java.time.ZoneId) zoneOffset15);
        java.time.Clock clock18 = java.time.Clock.fixed(instant0, (java.time.ZoneId) zoneOffset15);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.now(clock18);
        java.time.LocalDate localDate20 = java.time.LocalDate.now(clock18);
        com.google.protobuf.Descriptors.Descriptor descriptor21 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto22 = descriptor21.toProto();
        boolean boolean23 = descriptorProto22.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList24 = descriptorProto22.getNestedTypeList();
        int int25 = descriptorProto22.getExtensionRangeCount();
        boolean boolean26 = localDate20.equals((java.lang.Object) descriptorProto22);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder27 = descriptorProto22.newBuilderForType();
        java.util.List<com.google.protobuf.DescriptorProtos.FieldDescriptorProto> fieldDescriptorProtoList28 = builder27.getExtensionList();
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder29 = builder27.addNestedTypeBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder30 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder32 = builder30.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder33 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label34 = builder33.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder35 = builder30.addExtension(builder33);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder36 = builder30.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder37 = builder36.getOptionsBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder38 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder40 = builder38.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder41 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label42 = builder41.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder43 = builder38.addExtension(builder41);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder44 = builder38.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder45 = builder44.getOptionsBuilder();
        java.io.InputStream inputStream46 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions47 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream46);
        boolean boolean48 = enumOptions47.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder49 = builder45.mergeFrom(enumOptions47);
        com.google.protobuf.UnknownFieldSet unknownFieldSet50 = builder45.getUnknownFields();
        com.google.protobuf.CodedOutputStream codedOutputStream51 = null;
        unknownFieldSet50.writeTo(codedOutputStream51);
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder53 = builder37.setUnknownFields(unknownFieldSet50);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder54 = builder27.setUnknownFields(unknownFieldSet50);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder55 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder57 = builder55.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder58 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label59 = builder58.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder60 = builder55.addExtension(builder58);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder61 = builder55.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder62 = builder61.getOptionsBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder63 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder65 = builder63.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder66 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label67 = builder66.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder68 = builder63.addExtension(builder66);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder69 = builder63.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder70 = builder69.getOptionsBuilder();
        java.io.InputStream inputStream71 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions72 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream71);
        boolean boolean73 = enumOptions72.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder74 = builder70.mergeFrom(enumOptions72);
        com.google.protobuf.UnknownFieldSet unknownFieldSet75 = builder70.getUnknownFields();
        com.google.protobuf.CodedOutputStream codedOutputStream76 = null;
        unknownFieldSet75.writeTo(codedOutputStream76);
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder78 = builder62.setUnknownFields(unknownFieldSet75);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto79 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.getDefaultInstance();
        boolean boolean80 = methodDescriptorProto79.hasOutputType();
        byte[] byteArray81 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite82 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions83 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray81, extensionRegistryLite82);
        com.google.protobuf.CodedOutputStream codedOutputStream86 = com.google.protobuf.CodedOutputStream.newInstance(byteArray81, (int) (short) 0, 1);
        methodDescriptorProto79.writeTo(codedOutputStream86);
        unknownFieldSet75.writeTo(codedOutputStream86);
        unknownFieldSet50.writeAsMessageSetTo(codedOutputStream86);
        codedOutputStream86.flush();
        // The following exception was thrown during execution in test generation
        try {
            codedOutputStream86.writeUInt64(1024, (long) 16);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(clock18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(descriptor21);
        org.junit.Assert.assertNotNull(descriptorProto22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(fieldDescriptorProtoList28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + label34 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label34.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + label42 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label42.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(enumOptions47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(unknownFieldSet50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + label59 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label59.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertTrue("'" + label67 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label67.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(enumOptions72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(unknownFieldSet75);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(methodDescriptorProto79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[]");
        org.junit.Assert.assertNotNull(methodOptions83);
        org.junit.Assert.assertNotNull(codedOutputStream86);
    }

    @Test
    public void test2527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2527");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        java.nio.charset.CodingErrorAction codingErrorAction2 = charsetDecoder1.malformedInputAction();
        java.nio.charset.CodingErrorAction codingErrorAction3 = java.nio.charset.CodingErrorAction.REPORT;
        java.nio.charset.CharsetDecoder charsetDecoder4 = charsetDecoder1.onUnmappableCharacter(codingErrorAction3);
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertNotNull(codingErrorAction2);
        org.junit.Assert.assertNotNull(codingErrorAction3);
        org.junit.Assert.assertNotNull(charsetDecoder4);
    }

    @Test
    public void test2528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2528");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label4 = builder3.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = builder0.addExtension(builder3);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder6 = builder0.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder7 = builder6.getOptionsBuilder();
        java.io.InputStream inputStream8 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions9 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream8);
        boolean boolean10 = enumOptions9.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder11 = builder7.mergeFrom(enumOptions9);
        com.google.protobuf.UnknownFieldSet unknownFieldSet12 = builder7.getUnknownFields();
        byte[] byteArray13 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite14 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions15 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray13, extensionRegistryLite14);
        com.google.protobuf.CodedOutputStream codedOutputStream18 = com.google.protobuf.CodedOutputStream.newInstance(byteArray13, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite19 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto20 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray13, extensionRegistryLite19);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite21 = null;
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto22 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.parseFrom(byteArray13, extensionRegistryLite21);
        com.google.protobuf.UnknownFieldSet unknownFieldSet23 = com.google.protobuf.UnknownFieldSet.parseFrom(byteArray13);
        com.google.protobuf.ByteString byteString24 = unknownFieldSet23.toByteString();
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite25 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder26 = builder7.mergeFrom(byteString24, extensionRegistryLite25);
        com.google.protobuf.DescriptorProtos.FieldOptions fieldOptions27 = com.google.protobuf.DescriptorProtos.FieldOptions.parseFrom(byteString24);
        boolean boolean28 = fieldOptions27.hasPacked();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + label4 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label4.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(enumOptions9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(unknownFieldSet12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(methodOptions15);
        org.junit.Assert.assertNotNull(codedOutputStream18);
        org.junit.Assert.assertNotNull(fileDescriptorProto20);
        org.junit.Assert.assertNotNull(serviceDescriptorProto22);
        org.junit.Assert.assertNotNull(unknownFieldSet23);
        org.junit.Assert.assertNotNull(byteString24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(fieldOptions27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test2529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2529");
        java.text.AttributedCharacterIterator.Attribute attribute0 = java.text.AttributedCharacterIterator.Attribute.READING;
        org.junit.Assert.assertNotNull(attribute0);
    }

    @Test
    public void test2530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2530");
        com.google.protobuf.Descriptors.Descriptor descriptor0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto1 = descriptor0.toProto();
        boolean boolean2 = descriptorProto1.isInitialized();
        int int3 = descriptorProto1.getExtensionCount();
        int int4 = descriptorProto1.getFieldCount();
        java.util.List<com.google.protobuf.DescriptorProtos.FieldDescriptorProto> fieldDescriptorProtoList5 = descriptorProto1.getExtensionList();
        org.junit.Assert.assertNotNull(descriptor0);
        org.junit.Assert.assertNotNull(descriptorProto1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 9 + "'", int4 == 9);
        org.junit.Assert.assertNotNull(fieldDescriptorProtoList5);
    }

    @Test
    public void test2531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2531");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset10);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.of(localDateTime11, (java.time.ZoneId) zoneOffset15);
        java.time.Clock clock18 = java.time.Clock.fixed(instant0, (java.time.ZoneId) zoneOffset15);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.now(clock18);
        java.time.LocalDate localDate20 = java.time.LocalDate.now(clock18);
        com.google.protobuf.Descriptors.Descriptor descriptor21 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto22 = descriptor21.toProto();
        boolean boolean23 = descriptorProto22.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList24 = descriptorProto22.getNestedTypeList();
        int int25 = descriptorProto22.getExtensionRangeCount();
        boolean boolean26 = localDate20.equals((java.lang.Object) descriptorProto22);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder27 = descriptorProto22.newBuilderForType();
        java.util.List<com.google.protobuf.DescriptorProtos.FieldDescriptorProto> fieldDescriptorProtoList28 = builder27.getExtensionList();
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder29 = builder27.addNestedTypeBuilder();
        java.util.List<com.google.protobuf.DescriptorProtos.FieldDescriptorProto> fieldDescriptorProtoList30 = builder27.getFieldList();
        java.time.Instant instant32 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset36 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime37 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset36);
        java.time.OffsetDateTime offsetDateTime38 = java.time.OffsetDateTime.ofInstant(instant32, (java.time.ZoneId) zoneOffset36);
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime43 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset42);
        java.time.ZoneOffset zoneOffset47 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime48 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset47);
        java.time.ZonedDateTime zonedDateTime49 = java.time.ZonedDateTime.of(localDateTime43, (java.time.ZoneId) zoneOffset47);
        java.time.Clock clock50 = java.time.Clock.fixed(instant32, (java.time.ZoneId) zoneOffset47);
        java.time.LocalDateTime localDateTime51 = java.time.LocalDateTime.now(clock50);
        java.time.LocalDate localDate52 = java.time.LocalDate.now(clock50);
        com.google.protobuf.Descriptors.Descriptor descriptor53 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto54 = descriptor53.toProto();
        boolean boolean55 = descriptorProto54.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList56 = descriptorProto54.getNestedTypeList();
        int int57 = descriptorProto54.getExtensionRangeCount();
        boolean boolean58 = localDate52.equals((java.lang.Object) descriptorProto54);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder59 = descriptorProto54.newBuilderForType();
        java.util.List<com.google.protobuf.DescriptorProtos.FieldDescriptorProto> fieldDescriptorProtoList60 = builder59.getExtensionList();
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.Builder builder61 = com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.newBuilder();
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder62 = builder59.addExtensionRange(builder61);
        com.google.protobuf.Descriptors.Descriptor descriptor63 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto64 = descriptor63.toProto();
        boolean boolean65 = descriptorProto64.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList66 = descriptorProto64.getNestedTypeList();
        int int67 = descriptorProto64.getExtensionCount();
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder68 = builder62.mergeFrom(descriptorProto64);
        boolean boolean69 = builder62.hasName();
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder70 = builder27.setNestedType(24, builder62);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 24, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(clock18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(descriptor21);
        org.junit.Assert.assertNotNull(descriptorProto22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(fieldDescriptorProtoList28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(fieldDescriptorProtoList30);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(zoneOffset36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(offsetDateTime38);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(zoneOffset47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(zonedDateTime49);
        org.junit.Assert.assertNotNull(clock50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(descriptor53);
        org.junit.Assert.assertNotNull(descriptorProto54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(fieldDescriptorProtoList60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(descriptor63);
        org.junit.Assert.assertNotNull(descriptorProto64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
    }

    @Test
    public void test2532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2532");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label1 = builder0.getLabel();
        java.io.InputStream inputStream2 = null;
        com.google.protobuf.MessageLite.Builder builder3 = builder0.mergeFrom(inputStream2);
        com.google.protobuf.UnknownFieldSet unknownFieldSet4 = null;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder5 = builder0.setUnknownFields(unknownFieldSet4);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder7 = builder5.setNumber((int) (short) 100);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder8 = builder7.clear();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto9 = builder8.getDefaultInstanceForType();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + label1 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label1.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(fieldDescriptorProto9);
    }

    @Test
    public void test2533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2533");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean5 = node4.isStringKey();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(0, node4);
        com.google.javascript.rhino.jstype.StaticSourceFile staticSourceFile7 = node4.getStaticSourceFile();
        node4.setCharno((int) (byte) 100);
        boolean boolean10 = node4.isDebugger();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(staticSourceFile7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test2534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2534");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo sourceCodeInfo2 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.parseFrom(inputStream0, extensionRegistryLite1);
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder3 = sourceCodeInfo2.newBuilderForType();
        boolean boolean4 = builder3.isInitialized();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo sourceCodeInfo5 = builder3.build();
        boolean boolean6 = sourceCodeInfo5.isInitialized();
        com.google.protobuf.Descriptors.Descriptor descriptor7 = sourceCodeInfo5.getDescriptorForType();
        org.junit.Assert.assertNotNull(sourceCodeInfo2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(sourceCodeInfo5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(descriptor7);
    }

    @Test
    public void test2535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2535");
        int int0 = com.google.javascript.rhino.Node.COLUMN_MASK;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 4095 + "'", int0 == 4095);
    }

    @Test
    public void test2536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2536");
        com.google.protobuf.DescriptorProtos.MessageOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.MessageOptions.newBuilder();
        java.util.List<com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder> builderList1 = builder0.getUninterpretedOptionBuilderList();
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.UninterpretedOptionOrBuilder uninterpretedOptionOrBuilder3 = builder0.getUninterpretedOptionOrBuilder((int) 'x');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 120");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builderList1);
    }

    @Test
    public void test2537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2537");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean4 = node3.isStringKey();
        boolean boolean5 = node3.isObjectLit();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test2538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2538");
        java.text.MessageFormat messageFormat1 = new java.text.MessageFormat("hi!");
        java.text.Format[] formatArray2 = messageFormat1.getFormatsByArgumentIndex();
        java.text.MessageFormat messageFormat5 = new java.text.MessageFormat("hi!");
        java.text.ParsePosition parsePosition8 = new java.text.ParsePosition(42);
        java.lang.Object obj9 = messageFormat5.parseObject("+00:00:52", parsePosition8);
        com.google.protobuf.WireFormat.FieldType fieldType10 = com.google.protobuf.WireFormat.FieldType.SINT32;
        com.google.protobuf.WireFormat.JavaType javaType11 = fieldType10.getJavaType();
        boolean boolean12 = parsePosition8.equals((java.lang.Object) javaType11);
        int int13 = parsePosition8.getErrorIndex();
        java.lang.Object[] objArray14 = messageFormat1.parse(":", parsePosition8);
        int int15 = parsePosition8.getErrorIndex();
        org.junit.Assert.assertNotNull(formatArray2);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertTrue("'" + fieldType10 + "' != '" + com.google.protobuf.WireFormat.FieldType.SINT32 + "'", fieldType10.equals(com.google.protobuf.WireFormat.FieldType.SINT32));
        org.junit.Assert.assertTrue("'" + javaType11 + "' != '" + com.google.protobuf.WireFormat.JavaType.INT + "'", javaType11.equals(com.google.protobuf.WireFormat.JavaType.INT));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 42 + "'", int13 == 42);
        org.junit.Assert.assertNull(objArray14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 42 + "'", int15 == 42);
    }

    @Test
    public void test2539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2539");
        byte[] byteArray0 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions2 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray0, extensionRegistryLite1);
        com.google.protobuf.CodedOutputStream codedOutputStream5 = com.google.protobuf.CodedOutputStream.newInstance(byteArray0, (int) (short) 0, 1);
        // The following exception was thrown during execution in test generation
        try {
            codedOutputStream5.writeRawVarint32(0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(methodOptions2);
        org.junit.Assert.assertNotNull(codedOutputStream5);
    }

    @Test
    public void test2540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2540");
        byte[] byteArray0 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions2 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray0, extensionRegistryLite1);
        com.google.protobuf.CodedInputStream codedInputStream5 = com.google.protobuf.CodedInputStream.newInstance(byteArray0, 16, (int) 'a');
        com.google.javascript.jscomp.VariableMap variableMap6 = com.google.javascript.jscomp.VariableMap.fromBytes(byteArray0);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite7 = null;
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto enumDescriptorProto8 = com.google.protobuf.DescriptorProtos.EnumDescriptorProto.parseFrom(byteArray0, extensionRegistryLite7);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder9 = enumDescriptorProto8.newBuilderForType();
        int int10 = enumDescriptorProto8.getSerializedSize();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(methodOptions2);
        org.junit.Assert.assertNotNull(codedInputStream5);
        org.junit.Assert.assertNotNull(variableMap6);
        org.junit.Assert.assertNotNull(enumDescriptorProto8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test2541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2541");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy5 = null;
        compilerOptions0.variableRenaming = variableRenamingPolicy5;
        compilerOptions0.setSpecializeInitialModule(true);
        compilerOptions0.setAliasKeywords(true);
        compilerOptions0.setDeadAssignmentElimination(false);
        org.junit.Assert.assertNotNull(errorFormat3);
    }

    @Test
    public void test2542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2542");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions1 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream0);
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder2 = enumOptions1.toBuilder();
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder3 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output5 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream7 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output5, (int) 'a');
        byte[] byteArray8 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite9 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions10 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray8, extensionRegistryLite9);
        output5.write(byteArray8);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder12 = builder3.mergeFrom(byteArray8);
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions13 = builder3.buildPartial();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder14 = builder3.addUninterpretedOptionBuilder();
        com.google.protobuf.DescriptorProtos.UninterpretedOption uninterpretedOption15 = builder14.buildPartial();
        java.lang.String str16 = uninterpretedOption15.getIdentifierValue();
        int int17 = uninterpretedOption15.getNameCount();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder18 = builder2.addUninterpretedOption(uninterpretedOption15);
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor19 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean20 = builder2.hasField(fieldDescriptor19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(enumOptions1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(output5);
        org.junit.Assert.assertNotNull(codedOutputStream7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(methodOptions10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(methodOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(uninterpretedOption15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test2543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2543");
        com.google.protobuf.DescriptorProtos.FileOptions fileOptions1 = com.google.protobuf.DescriptorProtos.FileOptions.getDefaultInstance();
        boolean boolean2 = fileOptions1.hasCcGenericServices();
        java.util.List<com.google.protobuf.DescriptorProtos.UninterpretedOption> uninterpretedOptionList3 = fileOptions1.getUninterpretedOptionList();
        int int4 = com.google.protobuf.CodedOutputStream.computeMessageSize((int) ' ', (com.google.protobuf.MessageLite) fileOptions1);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.UninterpretedOption uninterpretedOption6 = fileOptions1.getUninterpretedOption((int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fileOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(uninterpretedOptionList3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
    }

    @Test
    public void test2544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2544");
        byte[] byteArray0 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions2 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray0, extensionRegistryLite1);
        com.google.protobuf.CodedOutputStream codedOutputStream5 = com.google.protobuf.CodedOutputStream.newInstance(byteArray0, (int) (short) 0, 1);
        com.google.protobuf.CodedInputStream codedInputStream6 = com.google.protobuf.CodedInputStream.newInstance(byteArray0);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.FunctionInformationMap.Entry entry7 = com.google.javascript.jscomp.FunctionInformationMap.Entry.parseFrom(codedInputStream6);
            org.junit.Assert.fail("Expected exception of type com.google.protobuf.InvalidProtocolBufferException; message: Message missing required fields: id, source_name, line_number, module_name, size, name, compiled_source");
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(methodOptions2);
        org.junit.Assert.assertNotNull(codedOutputStream5);
        org.junit.Assert.assertNotNull(codedInputStream6);
    }

    @Test
    public void test2545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2545");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        java.lang.String[] strArray11 = new java.lang.String[] { "South Korea", "Unknown class name", "ISO", "OffsetSeconds", ":" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        compilerOptions0.setReplaceStringsConfiguration("1970-01-01+00:00:52", (java.util.List<java.lang.String>) strList12);
        compilerOptions0.lineBreak = false;
        compilerOptions0.setInlineVariables(true);
        boolean boolean19 = compilerOptions0.removeUnusedVars;
        org.junit.Assert.assertNotNull(errorFormat3);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test2546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2546");
        java.util.Enumeration<java.net.NetworkInterface> networkInterfaceEnumeration0 = java.net.NetworkInterface.getNetworkInterfaces();
        org.junit.Assert.assertNotNull(networkInterfaceEnumeration0);
    }

    @Test
    public void test2547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2547");
        java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite> priorityMap0 = new java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite>();
        java.lang.Object obj1 = priorityMap0.clone();
        java.util.Set<java.util.Map.Entry<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite>> priorityEntrySet2 = priorityMap0.entrySet();
        java.io.PrintWriter printWriter4 = new java.io.PrintWriter("1970-03-24T02:02:32");
        char[] charArray8 = new char[] { '/', '+', '/' };
        printWriter4.println(charArray8);
        printWriter4.flush();
        boolean boolean11 = priorityMap0.contains((java.lang.Object) printWriter4);
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "{}");
        org.junit.Assert.assertNotNull(priorityEntrySet2);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "/+/");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "/+/");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[/, +, /]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test2548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2548");
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto0 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.getDefaultInstance();
        boolean boolean1 = serviceDescriptorProto0.hasOptions();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder2 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.newBuilder(serviceDescriptorProto0);
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto3 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.getDefaultInstance();
        boolean boolean4 = serviceDescriptorProto3.hasOptions();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder5 = builder2.mergeFrom(serviceDescriptorProto3);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto7 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.getDefaultInstance();
        boolean boolean8 = methodDescriptorProto7.hasOutputType();
        com.google.protobuf.CodedOutputStream codedOutputStream9 = null;
        methodDescriptorProto7.writeTo(codedOutputStream9);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder11 = methodDescriptorProto7.toBuilder();
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder13 = builder11.setOutputType("java.nio.HeapFloatBuffer[pos=0 lim=6 cap=6]");
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder14 = builder11.clearInputType();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder15 = builder2.addMethod(0, builder14);
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder16 = builder2.clearOptions();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto17 = builder16.getDefaultInstanceForType();
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.MethodDescriptorProtoOrBuilder methodDescriptorProtoOrBuilder19 = builder16.getMethodOrBuilder(13);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 13, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serviceDescriptorProto0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(serviceDescriptorProto3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(methodDescriptorProto7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(serviceDescriptorProto17);
    }

    @Test
    public void test2549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2549");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        java.nio.charset.CodingErrorAction codingErrorAction2 = charsetDecoder1.malformedInputAction();
        float float3 = charsetDecoder1.maxCharsPerByte();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean4 = charsetDecoder1.isCharsetDetected();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertNotNull(codingErrorAction2);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 1.0f + "'", float3 == 1.0f);
    }

    @Test
    public void test2550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2550");
        java.io.PrintStream printStream0 = null;
        com.google.javascript.jscomp.Compiler compiler1 = new com.google.javascript.jscomp.Compiler(printStream0);
        com.google.javascript.jscomp.SourceMap sourceMap2 = compiler1.getSourceMap();
        java.util.stream.LongStream longStream4 = java.util.stream.LongStream.of((long) (-1));
        com.google.common.collect.ImmutableMap<com.google.javascript.jscomp.Compiler, java.util.stream.LongStream> compilerMap5 = com.google.common.collect.ImmutableMap.of(compiler1, longStream4);
        com.google.common.collect.ImmutableCollection<java.util.stream.LongStream> longStreamCollection6 = compilerMap5.values();
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet11 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet11, strArray10);
        boolean boolean13 = strSet11.isEmpty();
        java.nio.ByteBuffer byteBuffer15 = java.nio.ByteBuffer.allocate(100);
        boolean boolean16 = strSet11.equals((java.lang.Object) byteBuffer15);
        java.nio.IntBuffer intBuffer17 = byteBuffer15.asIntBuffer();
        double double18 = byteBuffer15.getDouble();
        java.nio.ByteBuffer byteBuffer19 = byteBuffer15.asReadOnlyBuffer();
        boolean boolean20 = byteBuffer15.hasArray();
        short short21 = byteBuffer15.getShort();
        java.nio.ByteOrder byteOrder22 = java.nio.ByteOrder.LITTLE_ENDIAN;
        java.nio.ByteBuffer byteBuffer23 = byteBuffer15.order(byteOrder22);
        java.util.stream.LongStream longStream24 = compilerMap5.get((java.lang.Object) byteOrder22);
        java.util.concurrent.TimeUnit timeUnit25 = java.util.concurrent.TimeUnit.NANOSECONDS;
        long long27 = timeUnit25.toMinutes(0L);
        long long29 = timeUnit25.toHours(1645437268288L);
        boolean boolean30 = compilerMap5.containsValue((java.lang.Object) timeUnit25);
        org.junit.Assert.assertNull(sourceMap2);
        org.junit.Assert.assertNotNull(longStream4);
        org.junit.Assert.assertNotNull(compilerMap5);
        org.junit.Assert.assertNotNull(longStreamCollection6);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intBuffer17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + short21 + "' != '" + (short) 0 + "'", short21 == (short) 0);
        org.junit.Assert.assertNotNull(byteOrder22);
        org.junit.Assert.assertNotNull(byteBuffer23);
        org.junit.Assert.assertNull(longStream24);
        org.junit.Assert.assertNotNull(timeUnit25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test2551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2551");
        com.google.protobuf.Internal.EnumLiteMap<com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type> typeEnumLiteMap0 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type.internalGetValueMap();
        org.junit.Assert.assertNotNull(typeEnumLiteMap0);
    }

    @Test
    public void test2552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2552");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.of(localDateTime4, (java.time.ZoneId) zoneOffset8);
        java.time.temporal.ChronoField chronoField12 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit13 = chronoField12.getBaseUnit();
        java.time.LocalDateTime localDateTime14 = localDateTime4.plus((long) 1970, temporalUnit13);
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset19);
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset24);
        java.time.ZonedDateTime zonedDateTime26 = java.time.ZonedDateTime.of(localDateTime20, (java.time.ZoneId) zoneOffset24);
        java.time.temporal.ChronoField chronoField28 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit29 = chronoField28.getBaseUnit();
        java.time.LocalDateTime localDateTime30 = localDateTime20.plus((long) 1970, temporalUnit29);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime31 = localDateTime14.minus((long) 43, temporalUnit29);
        java.time.LocalDateTime localDateTime33 = localDateTime14.minusHours((long) 1024);
        java.time.LocalDateTime localDateTime35 = localDateTime33.plusHours((long) 0);
        java.time.Instant instant36 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset40 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime41 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset40);
        java.time.OffsetDateTime offsetDateTime42 = java.time.OffsetDateTime.ofInstant(instant36, (java.time.ZoneId) zoneOffset40);
        java.time.OffsetDateTime offsetDateTime44 = offsetDateTime42.minusDays((long) (short) 100);
        java.lang.String str45 = offsetDateTime42.toString();
        java.time.ZoneOffset zoneOffset46 = offsetDateTime42.getOffset();
        java.time.Instant instant47 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset51 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime52 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset51);
        java.time.OffsetDateTime offsetDateTime53 = java.time.OffsetDateTime.ofInstant(instant47, (java.time.ZoneId) zoneOffset51);
        java.time.ZonedDateTime zonedDateTime54 = java.time.ZonedDateTime.ofLocal(localDateTime33, (java.time.ZoneId) zoneOffset46, zoneOffset51);
        java.time.Clock clock55 = java.time.Clock.tickSeconds((java.time.ZoneId) zoneOffset51);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertTrue("'" + chronoField12 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField12.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit13 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit13.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertTrue("'" + chronoField28 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField28.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit29 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit29.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(zoneOffset40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(offsetDateTime42);
        org.junit.Assert.assertNotNull(offsetDateTime44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1970-01-01T00:00:52+00:00:52" + "'", str45, "1970-01-01T00:00:52+00:00:52");
        org.junit.Assert.assertNotNull(zoneOffset46);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertNotNull(zoneOffset51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(offsetDateTime53);
        org.junit.Assert.assertNotNull(zonedDateTime54);
        org.junit.Assert.assertNotNull(clock55);
    }

    @Test
    public void test2553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2553");
        com.google.javascript.jscomp.JSSourceFile jSSourceFile2 = com.google.javascript.jscomp.JSSourceFile.fromCode("/tmp/hi!4308965599218662450ISO", "");
        org.junit.Assert.assertNotNull(jSSourceFile2);
    }

    @Test
    public void test2554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2554");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label4 = builder3.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = builder0.addExtension(builder3);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder6 = builder0.addEnumTypeBuilder();
        com.google.protobuf.ByteString.Output output8 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream10 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output8, (int) 'a');
        byte[] byteArray11 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite12 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions13 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray11, extensionRegistryLite12);
        output8.write(byteArray11);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder15 = builder0.mergeFrom(byteArray11);
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList16 = builder15.getMessageTypeList();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder17 = builder15.addExtensionBuilder();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + label4 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label4.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(output8);
        org.junit.Assert.assertNotNull(codedOutputStream10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(methodOptions13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(descriptorProtoList16);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test2555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2555");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean4 = node3.isTry();
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        int int10 = localDateTime9.getYear();
        java.time.LocalDate localDate11 = localDateTime9.toLocalDate();
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZoneOffset zoneOffset20 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset20);
        java.time.ZonedDateTime zonedDateTime22 = java.time.ZonedDateTime.of(localDateTime16, (java.time.ZoneId) zoneOffset20);
        java.time.temporal.ChronoField chronoField24 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit25 = chronoField24.getBaseUnit();
        java.time.LocalDateTime localDateTime26 = localDateTime16.plus((long) 1970, temporalUnit25);
        java.time.LocalTime localTime27 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localDateTime26);
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime32 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset31);
        java.time.OffsetDateTime offsetDateTime33 = java.time.OffsetDateTime.of(localDate11, localTime27, zoneOffset31);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean38 = node37.isFromExterns();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean43 = node42.isFromExterns();
        java.lang.String str44 = node42.toString();
        com.google.javascript.rhino.Node node45 = node37.copyInformationFrom(node42);
        boolean boolean46 = zoneOffset31.equals((java.lang.Object) node42);
        boolean boolean47 = node42.isVar();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean53 = node52.isStringKey();
        boolean boolean54 = node52.isThrow();
        boolean boolean55 = node52.isVarArgs();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean60 = node59.isFromExterns();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean65 = node64.isFromExterns();
        java.lang.String str66 = node64.toString();
        com.google.javascript.rhino.Node node67 = node59.copyInformationFrom(node64);
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean72 = node71.isStringKey();
        boolean boolean73 = node71.isThrow();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean78 = node77.isStringKey();
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node((-1), node52, node64, node71, node77, 16384, 16);
        com.google.javascript.rhino.Node node85 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean86 = node85.isStringKey();
        boolean boolean87 = node85.isThrow();
        boolean boolean88 = node85.isVarArgs();
        boolean boolean89 = node85.isHook();
        boolean boolean90 = node85.isAssign();
        boolean boolean91 = node85.isVar();
        com.google.javascript.jscomp.CodingConvention.Bind bind92 = new com.google.javascript.jscomp.CodingConvention.Bind(node42, node77, node85);
        boolean boolean93 = node42.isVar();
        com.google.javascript.rhino.Node node94 = node3.clonePropsFrom(node42);
        boolean boolean95 = node3.isOptionalArg();
        com.google.javascript.rhino.Node node97 = new com.google.javascript.rhino.Node((int) (byte) -1);
        com.google.javascript.rhino.Node node98 = node3.useSourceInfoFrom(node97);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zoneOffset20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zonedDateTime22);
        org.junit.Assert.assertTrue("'" + chronoField24 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField24.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit25 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit25.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(offsetDateTime33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "NUMBER 52.0 0" + "'", str44, "NUMBER 52.0 0");
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "NUMBER 52.0 0" + "'", str66, "NUMBER 52.0 0");
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(node98);
    }

    @Test
    public void test2556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2556");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
    }

    @Test
    public void test2557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2557");
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        boolean boolean6 = strSet4.isEmpty();
        java.nio.ByteBuffer byteBuffer8 = java.nio.ByteBuffer.allocate(100);
        boolean boolean9 = strSet4.equals((java.lang.Object) byteBuffer8);
        java.nio.IntBuffer intBuffer10 = byteBuffer8.asIntBuffer();
        java.nio.IntBuffer intBuffer11 = intBuffer10.duplicate();
        java.nio.IntBuffer intBuffer12 = intBuffer11.duplicate();
        java.nio.IntBuffer intBuffer14 = java.nio.IntBuffer.allocate(256);
        int[] intArray19 = new int[] { 16, ':', 43, (short) 100 };
        java.util.stream.IntStream intStream20 = java.util.stream.IntStream.of(intArray19);
        int[] intArray21 = intStream20.toArray();
        java.nio.IntBuffer intBuffer22 = intBuffer14.put(intArray21);
        java.nio.IntBuffer intBuffer23 = intBuffer12.get(intArray21);
        java.lang.String str24 = intBuffer23.toString();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(intBuffer10);
        org.junit.Assert.assertNotNull(intBuffer11);
        org.junit.Assert.assertNotNull(intBuffer12);
        org.junit.Assert.assertNotNull(intBuffer14);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[16, 58, 43, 100]");
        org.junit.Assert.assertNotNull(intStream20);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intBuffer22);
        org.junit.Assert.assertNotNull(intBuffer23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "java.nio.ByteBufferAsIntBufferB[pos=4 lim=25 cap=25]" + "'", str24, "java.nio.ByteBufferAsIntBufferB[pos=4 lim=25 cap=25]");
    }

    @Test
    public void test2558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2558");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean4 = node3.isStringKey();
        boolean boolean5 = node3.isTrue();
        com.google.javascript.rhino.InputId inputId7 = new com.google.javascript.rhino.InputId("NUMBER 52.0 0");
        node3.setInputId(inputId7);
        com.google.javascript.jscomp.SourceAst sourceAst9 = null;
        com.google.javascript.rhino.InputId inputId10 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput12 = new com.google.javascript.jscomp.CompilerInput(sourceAst9, inputId10, true);
        java.io.PrintStream printStream13 = null;
        com.google.javascript.jscomp.Compiler compiler14 = new com.google.javascript.jscomp.Compiler(printStream13);
        com.google.javascript.jscomp.ErrorManager errorManager15 = compiler14.getErrorManager();
        compilerInput12.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler14);
        com.google.javascript.jscomp.CodingConvention codingConvention17 = compiler14.getCodingConvention();
        boolean boolean18 = inputId7.equals((java.lang.Object) compiler14);
        com.google.javascript.jscomp.ErrorManager errorManager19 = compiler14.getErrorManager();
        com.google.javascript.jscomp.JSError[] jSErrorArray20 = errorManager19.getWarnings();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(errorManager15);
        org.junit.Assert.assertNotNull(codingConvention17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(errorManager19);
        org.junit.Assert.assertNotNull(jSErrorArray20);
    }

    @Test
    public void test2559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2559");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.of(localDateTime4, (java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime10.withYear((int) (short) 1);
        java.time.LocalTime localTime13 = zonedDateTime10.toLocalTime();
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset17);
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset22);
        java.time.ZonedDateTime zonedDateTime24 = java.time.ZonedDateTime.of(localDateTime18, (java.time.ZoneId) zoneOffset22);
        java.time.temporal.ChronoField chronoField26 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit27 = chronoField26.getBaseUnit();
        java.time.LocalDateTime localDateTime28 = localDateTime18.plus((long) 1970, temporalUnit27);
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime33 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset32);
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset37);
        java.time.ZonedDateTime zonedDateTime39 = java.time.ZonedDateTime.of(localDateTime33, (java.time.ZoneId) zoneOffset37);
        java.time.temporal.ChronoField chronoField41 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit42 = chronoField41.getBaseUnit();
        java.time.LocalDateTime localDateTime43 = localDateTime33.plus((long) 1970, temporalUnit42);
        java.time.LocalDateTime localDateTime45 = localDateTime33.withHour((int) (short) 1);
        java.time.ZoneOffset zoneOffset47 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.OffsetDateTime offsetDateTime48 = java.time.OffsetDateTime.of(localDateTime33, zoneOffset47);
        long long49 = localDateTime18.toEpochSecond(zoneOffset47);
        java.time.ZoneOffset zoneOffset53 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime54 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset53);
        java.time.ZoneOffset zoneOffset58 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime59 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset58);
        java.time.ZonedDateTime zonedDateTime60 = java.time.ZonedDateTime.of(localDateTime54, (java.time.ZoneId) zoneOffset58);
        java.time.ZonedDateTime zonedDateTime62 = zonedDateTime60.minusSeconds((long) '#');
        java.time.ZonedDateTime zonedDateTime64 = zonedDateTime60.minusYears((long) ' ');
        java.time.temporal.Temporal temporal65 = zoneOffset47.adjustInto((java.time.temporal.Temporal) zonedDateTime64);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime66 = zonedDateTime10.withZoneSameInstant((java.time.ZoneId) zoneOffset47);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zonedDateTime24);
        org.junit.Assert.assertTrue("'" + chronoField26 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField26.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit27 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit27.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(zonedDateTime39);
        org.junit.Assert.assertTrue("'" + chronoField41 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField41.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit42 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit42.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(zoneOffset47);
        org.junit.Assert.assertNotNull(offsetDateTime48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 100L + "'", long49 == 100L);
        org.junit.Assert.assertNotNull(zoneOffset53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(zoneOffset58);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(zonedDateTime60);
        org.junit.Assert.assertNotNull(zonedDateTime62);
        org.junit.Assert.assertNotNull(zonedDateTime64);
        org.junit.Assert.assertNotNull(temporal65);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime66);
    }

    @Test
    public void test2560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2560");
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto0 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.getDefaultInstance();
        boolean boolean1 = serviceDescriptorProto0.hasOptions();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder2 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.newBuilder(serviceDescriptorProto0);
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto3 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.getDefaultInstance();
        boolean boolean4 = serviceDescriptorProto3.hasOptions();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder5 = builder2.mergeFrom(serviceDescriptorProto3);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto7 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.getDefaultInstance();
        boolean boolean8 = methodDescriptorProto7.hasOutputType();
        com.google.protobuf.CodedOutputStream codedOutputStream9 = null;
        methodDescriptorProto7.writeTo(codedOutputStream9);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder11 = methodDescriptorProto7.toBuilder();
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder13 = builder11.setOutputType("java.nio.HeapFloatBuffer[pos=0 lim=6 cap=6]");
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder14 = builder11.clearInputType();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder15 = builder2.addMethod(0, builder14);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder17 = builder14.setOutputType("OffsetSeconds");
        boolean boolean18 = builder17.isInitialized();
        org.junit.Assert.assertNotNull(serviceDescriptorProto0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(serviceDescriptorProto3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(methodDescriptorProto7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test2561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2561");
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder1 = builder0.clearCcGenericServices();
        boolean boolean2 = builder0.isInitialized();
        boolean boolean3 = builder0.getJavaGenericServices();
        java.util.List<com.google.protobuf.DescriptorProtos.UninterpretedOption> uninterpretedOptionList4 = builder0.getUninterpretedOptionList();
        boolean boolean5 = builder0.hasJavaGenericServices();
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder7 = builder0.getUninterpretedOptionBuilder((int) '0');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 48, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(uninterpretedOptionList4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test2562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2562");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label4 = builder3.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = builder0.addExtension(builder3);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder6 = builder0.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder7 = builder6.getOptionsBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder8 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder10 = builder8.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder11 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label12 = builder11.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder13 = builder8.addExtension(builder11);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder14 = builder8.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder15 = builder14.getOptionsBuilder();
        java.io.InputStream inputStream16 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions17 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream16);
        boolean boolean18 = enumOptions17.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder19 = builder15.mergeFrom(enumOptions17);
        com.google.protobuf.UnknownFieldSet unknownFieldSet20 = builder15.getUnknownFields();
        com.google.protobuf.CodedOutputStream codedOutputStream21 = null;
        unknownFieldSet20.writeTo(codedOutputStream21);
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder23 = builder7.setUnknownFields(unknownFieldSet20);
        boolean boolean25 = unknownFieldSet20.hasField(1);
        java.util.Map<java.lang.Integer, com.google.protobuf.UnknownFieldSet.Field> intMap26 = unknownFieldSet20.asMap();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + label4 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label4.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + label12 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label12.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(enumOptions17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(unknownFieldSet20);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intMap26);
    }

    @Test
    public void test2563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2563");
        java.time.chrono.IsoChronology isoChronology0 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset9);
        java.time.ZonedDateTime zonedDateTime11 = java.time.ZonedDateTime.of(localDateTime5, (java.time.ZoneId) zoneOffset9);
        java.time.ZonedDateTime zonedDateTime13 = zonedDateTime11.withHour(16);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime14 = zonedDateTime13.toLocalDateTime();
        java.time.chrono.Chronology chronology15 = localDateChronoLocalDateTime14.getChronology();
        int int16 = isoChronology0.compareTo(chronology15);
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.MAX;
        java.time.LocalDate localDate18 = isoChronology0.dateNow((java.time.ZoneId) zoneOffset17);
        int int19 = localDate18.getMonthValue();
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset24);
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset29);
        java.time.ZonedDateTime zonedDateTime31 = java.time.ZonedDateTime.of(localDateTime25, (java.time.ZoneId) zoneOffset29);
        java.time.ZonedDateTime zonedDateTime33 = zonedDateTime31.minusSeconds((long) '#');
        java.time.temporal.ChronoField chronoField34 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit35 = chronoField34.getBaseUnit();
        boolean boolean36 = zonedDateTime33.isSupported(temporalUnit35);
        java.time.LocalDate localDate37 = java.time.LocalDate.now();
        java.lang.String str38 = localDate37.toString();
        boolean boolean39 = temporalUnit35.isSupportedBy((java.time.temporal.Temporal) localDate37);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDate localDate40 = localDate18.plus(0L, temporalUnit35);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported unit: Hours");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(isoChronology0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(zonedDateTime13);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(zonedDateTime31);
        org.junit.Assert.assertNotNull(zonedDateTime33);
        org.junit.Assert.assertTrue("'" + chronoField34 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField34.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit35 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit35.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2022-02-21" + "'", str38, "2022-02-21");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test2564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2564");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.DescriptorProtos.FieldOptions fieldOptions1 = com.google.protobuf.DescriptorProtos.FieldOptions.parseFrom(inputStream0);
        boolean boolean2 = fieldOptions1.hasExperimentalMapKey();
        com.google.protobuf.DescriptorProtos.FieldOptions.Builder builder3 = com.google.protobuf.DescriptorProtos.FieldOptions.newBuilder(fieldOptions1);
        com.google.javascript.jscomp.FunctionInformationMap.Module.Builder builder4 = com.google.javascript.jscomp.FunctionInformationMap.Module.newBuilder();
        java.lang.String str5 = builder4.getCompiledSource();
        boolean boolean6 = builder4.hasName();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder7 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder9 = builder7.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder10 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label11 = builder10.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder12 = builder7.addExtension(builder10);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder13 = builder7.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder14 = builder13.getOptionsBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder15 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder17 = builder15.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder18 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label19 = builder18.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder20 = builder15.addExtension(builder18);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder21 = builder15.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder22 = builder21.getOptionsBuilder();
        java.io.InputStream inputStream23 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions24 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream23);
        boolean boolean25 = enumOptions24.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder26 = builder22.mergeFrom(enumOptions24);
        com.google.protobuf.UnknownFieldSet unknownFieldSet27 = builder22.getUnknownFields();
        com.google.protobuf.CodedOutputStream codedOutputStream28 = null;
        unknownFieldSet27.writeTo(codedOutputStream28);
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder30 = builder14.setUnknownFields(unknownFieldSet27);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto31 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.getDefaultInstance();
        boolean boolean32 = methodDescriptorProto31.hasOutputType();
        byte[] byteArray33 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite34 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions35 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray33, extensionRegistryLite34);
        com.google.protobuf.CodedOutputStream codedOutputStream38 = com.google.protobuf.CodedOutputStream.newInstance(byteArray33, (int) (short) 0, 1);
        methodDescriptorProto31.writeTo(codedOutputStream38);
        unknownFieldSet27.writeTo(codedOutputStream38);
        com.google.javascript.jscomp.FunctionInformationMap.Module.Builder builder41 = builder4.setUnknownFields(unknownFieldSet27);
        boolean boolean43 = unknownFieldSet27.hasField(4096);
        com.google.protobuf.DescriptorProtos.FieldOptions.Builder builder44 = builder3.mergeUnknownFields(unknownFieldSet27);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder46 = builder3.addUninterpretedOptionBuilder(5);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 5, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fieldOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + label11 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label11.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + label19 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label19.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(enumOptions24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(unknownFieldSet27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(methodDescriptorProto31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(methodOptions35);
        org.junit.Assert.assertNotNull(codedOutputStream38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test2565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2565");
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        boolean boolean6 = strSet4.isEmpty();
        java.nio.ByteBuffer byteBuffer8 = java.nio.ByteBuffer.allocate(100);
        boolean boolean9 = strSet4.equals((java.lang.Object) byteBuffer8);
        java.nio.CharBuffer charBuffer10 = byteBuffer8.asCharBuffer();
        java.lang.String str11 = charBuffer10.toString();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(charBuffer10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + "'", str11, "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
    }

    @Test
    public void test2566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2566");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        java.util.List<com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder> builderList3 = builder0.getServiceBuilderList();
        com.google.protobuf.DescriptorProtos.SourceCodeInfoOrBuilder sourceCodeInfoOrBuilder4 = builder0.getSourceCodeInfoOrBuilder();
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder6 = builder0.removeEnumType(28);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 28, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builderList3);
        org.junit.Assert.assertNotNull(sourceCodeInfoOrBuilder4);
    }

    @Test
    public void test2567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2567");
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto0 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.getDefaultInstance();
        boolean boolean1 = serviceDescriptorProto0.hasOptions();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder2 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.newBuilder(serviceDescriptorProto0);
        byte[] byteArray3 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite4 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions5 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray3, extensionRegistryLite4);
        com.google.protobuf.CodedInputStream codedInputStream8 = com.google.protobuf.CodedInputStream.newInstance(byteArray3, 16, (int) 'a');
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder9 = builder2.mergeFrom(byteArray3);
        java.util.List<com.google.protobuf.DescriptorProtos.MethodDescriptorProto> methodDescriptorProtoList10 = builder9.getMethodList();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder11 = builder9.clearMethod();
        boolean boolean12 = builder11.hasOptions();
        org.junit.Assert.assertNotNull(serviceDescriptorProto0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(methodOptions5);
        org.junit.Assert.assertNotNull(codedInputStream8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(methodDescriptorProtoList10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test2568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2568");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType4 = jSTypeRegistry2.createObjectType(objectType3);
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.jstype.ObjectType objectType8 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry7.createObjectType(objectType8);
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10, false);
        com.google.javascript.rhino.jstype.ObjectType objectType13 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType14 = jSTypeRegistry12.createObjectType(objectType13);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair15 = objectType9.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType14);
        com.google.javascript.rhino.Node node16 = objectType9.getRootNode();
        com.google.javascript.rhino.jstype.EnumType enumType17 = objectType9.toMaybeEnumType();
        boolean boolean18 = objectType9.isParameterizedType();
        com.google.javascript.rhino.jstype.JSType jSType19 = jSTypeRegistry2.createNullableType((com.google.javascript.rhino.jstype.JSType) objectType9);
        com.google.javascript.rhino.ErrorReporter errorReporter21 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry23 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter21, false);
        com.google.javascript.rhino.jstype.ObjectType objectType24 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType25 = jSTypeRegistry23.createObjectType(objectType24);
        com.google.javascript.rhino.ErrorReporter errorReporter26 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter26, false);
        com.google.javascript.rhino.jstype.ObjectType objectType29 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType30 = jSTypeRegistry28.createObjectType(objectType29);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair31 = objectType25.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType30);
        boolean boolean32 = objectType30.isTemplateType();
        boolean boolean33 = objectType30.isNativeObjectType();
        boolean boolean34 = objectType30.isNumberValueType();
        jSTypeRegistry2.unregisterPropertyOnType("goog.exportSymbol", (com.google.javascript.rhino.jstype.JSType) objectType30);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode36 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.IMMEDIATE;
        jSTypeRegistry2.setResolveMode(resolveMode36);
        org.junit.Assert.assertNotNull(objectType4);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertNotNull(objectType14);
        org.junit.Assert.assertNotNull(typePair15);
        org.junit.Assert.assertNull(node16);
        org.junit.Assert.assertNull(enumType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jSType19);
        org.junit.Assert.assertNotNull(objectType25);
        org.junit.Assert.assertNotNull(objectType30);
        org.junit.Assert.assertNotNull(typePair31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + resolveMode36 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.IMMEDIATE + "'", resolveMode36.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.IMMEDIATE));
    }

    @Test
    public void test2569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2569");
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output2 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream4 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output2, (int) 'a');
        byte[] byteArray5 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite6 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions7 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray5, extensionRegistryLite6);
        output2.write(byteArray5);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder9 = builder0.mergeFrom(byteArray5);
        java.util.List<com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder> builderList10 = builder9.getUninterpretedOptionBuilderList();
        java.util.List<com.google.protobuf.DescriptorProtos.UninterpretedOption> uninterpretedOptionList11 = builder9.getUninterpretedOptionList();
        java.io.InputStream inputStream12 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions13 = com.google.protobuf.DescriptorProtos.EnumValueOptions.getDefaultInstance();
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder14 = com.google.protobuf.DescriptorProtos.EnumValueOptions.newBuilder(enumValueOptions13);
        java.io.InputStream inputStream15 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder16 = builder14.mergeFrom(inputStream15);
        com.google.protobuf.ByteString byteString17 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto18 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.parseFrom(byteString17);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite19 = null;
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto enumValueDescriptorProto20 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.parseFrom(byteString17, extensionRegistryLite19);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite21 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions22 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteString17, extensionRegistryLite21);
        java.io.InputStream inputStream23 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite24 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location25 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream23, extensionRegistryLite24);
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder26 = builder16.mergeFrom(byteString17, extensionRegistryLite24);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder27 = builder9.mergeFrom(inputStream12, extensionRegistryLite24);
        java.util.List<com.google.protobuf.DescriptorProtos.UninterpretedOption> uninterpretedOptionList28 = builder27.getUninterpretedOptionList();
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor29 = null;
        java.time.Instant instant30 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset34);
        java.time.OffsetDateTime offsetDateTime36 = java.time.OffsetDateTime.ofInstant(instant30, (java.time.ZoneId) zoneOffset34);
        java.time.ZoneOffset zoneOffset40 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime41 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset40);
        java.time.ZoneOffset zoneOffset45 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime46 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset45);
        java.time.ZonedDateTime zonedDateTime47 = java.time.ZonedDateTime.of(localDateTime41, (java.time.ZoneId) zoneOffset45);
        java.time.Clock clock48 = java.time.Clock.fixed(instant30, (java.time.ZoneId) zoneOffset45);
        java.time.LocalDateTime localDateTime49 = java.time.LocalDateTime.now(clock48);
        java.time.LocalDate localDate50 = java.time.LocalDate.now(clock48);
        com.google.protobuf.Descriptors.Descriptor descriptor51 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto52 = descriptor51.toProto();
        boolean boolean53 = descriptorProto52.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList54 = descriptorProto52.getNestedTypeList();
        int int55 = descriptorProto52.getExtensionRangeCount();
        boolean boolean56 = localDate50.equals((java.lang.Object) descriptorProto52);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder57 = descriptorProto52.newBuilderForType();
        java.util.List<com.google.protobuf.DescriptorProtos.FieldDescriptorProto> fieldDescriptorProtoList58 = builder57.getExtensionList();
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.Builder builder59 = com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.newBuilder();
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder60 = builder57.addExtensionRange(builder59);
        com.google.protobuf.Descriptors.Descriptor descriptor61 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto62 = descriptor61.toProto();
        boolean boolean63 = descriptorProto62.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList64 = descriptorProto62.getNestedTypeList();
        int int65 = descriptorProto62.getExtensionCount();
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder66 = builder60.mergeFrom(descriptorProto62);
        java.util.List<com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder> builderList67 = builder66.getEnumTypeBuilderList();
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder68 = builder27.addRepeatedField(fieldDescriptor29, (java.lang.Object) builder66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(output2);
        org.junit.Assert.assertNotNull(codedOutputStream4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(methodOptions7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builderList10);
        org.junit.Assert.assertNotNull(uninterpretedOptionList11);
        org.junit.Assert.assertNotNull(enumValueOptions13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(byteString17);
        org.junit.Assert.assertNotNull(methodDescriptorProto18);
        org.junit.Assert.assertNotNull(enumValueDescriptorProto20);
        org.junit.Assert.assertNotNull(methodOptions22);
        org.junit.Assert.assertNotNull(extensionRegistryLite24);
        org.junit.Assert.assertNotNull(location25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(uninterpretedOptionList28);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(offsetDateTime36);
        org.junit.Assert.assertNotNull(zoneOffset40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(zoneOffset45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(zonedDateTime47);
        org.junit.Assert.assertNotNull(clock48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(descriptor51);
        org.junit.Assert.assertNotNull(descriptorProto52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(fieldDescriptorProtoList58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(descriptor61);
        org.junit.Assert.assertNotNull(descriptorProto62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builderList67);
    }

    @Test
    public void test2570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2570");
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output2 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream4 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output2, (int) 'a');
        byte[] byteArray5 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite6 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions7 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray5, extensionRegistryLite6);
        output2.write(byteArray5);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder9 = builder0.mergeFrom(byteArray5);
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions10 = builder0.buildPartial();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder11 = builder0.addUninterpretedOptionBuilder();
        byte[] byteArray12 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite13 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions14 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray12, extensionRegistryLite13);
        com.google.protobuf.CodedOutputStream codedOutputStream17 = com.google.protobuf.CodedOutputStream.newInstance(byteArray12, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite18 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto19 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray12, extensionRegistryLite18);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite20 = null;
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto21 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.parseFrom(byteArray12, extensionRegistryLite20);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder22 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label23 = builder22.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto24 = builder22.buildPartial();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder25 = fieldDescriptorProto24.newBuilderForType();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder26 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto24);
        java.io.File file29 = null;
        java.io.File file30 = java.io.File.createTempFile("hi!", "ISO", file29);
        boolean boolean33 = file30.setWritable(false, false);
        java.net.URI uRI34 = file30.toURI();
        java.io.PrintStream printStream35 = new java.io.PrintStream(file30);
        printStream35.print((int) (byte) 0);
        printStream35.print(10.0d);
        printStream35.close();
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet45 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet45, strArray44);
        boolean boolean47 = strSet45.isEmpty();
        java.nio.ByteBuffer byteBuffer49 = java.nio.ByteBuffer.allocate(100);
        boolean boolean50 = strSet45.equals((java.lang.Object) byteBuffer49);
        java.nio.IntBuffer intBuffer51 = byteBuffer49.asIntBuffer();
        double double52 = byteBuffer49.getDouble();
        java.nio.ByteBuffer byteBuffer55 = byteBuffer49.put((int) (short) 1, (byte) 1);
        byte[] byteArray56 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite57 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions58 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray56, extensionRegistryLite57);
        com.google.protobuf.CodedOutputStream codedOutputStream61 = com.google.protobuf.CodedOutputStream.newInstance(byteArray56, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite62 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto63 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray56, extensionRegistryLite62);
        com.google.protobuf.CodedOutputStream codedOutputStream64 = com.google.protobuf.CodedOutputStream.newInstance(byteArray56);
        java.nio.ByteBuffer byteBuffer65 = byteBuffer49.get(byteArray56);
        printStream35.write(byteArray56, (int) '/', (int) (byte) 1);
        java.io.InputStream inputStream69 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite70 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location71 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream69, extensionRegistryLite70);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder72 = builder26.mergeFrom(byteArray56, extensionRegistryLite70);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder73 = builder0.mergeFrom(byteArray12, extensionRegistryLite70);
        com.google.protobuf.DescriptorProtos.UninterpretedOptionOrBuilder uninterpretedOptionOrBuilder75 = builder73.getUninterpretedOptionOrBuilder(0);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.UninterpretedOptionOrBuilder uninterpretedOptionOrBuilder77 = builder73.getUninterpretedOptionOrBuilder(22);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 22, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(output2);
        org.junit.Assert.assertNotNull(codedOutputStream4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(methodOptions7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(methodOptions10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(methodOptions14);
        org.junit.Assert.assertNotNull(codedOutputStream17);
        org.junit.Assert.assertNotNull(fileDescriptorProto19);
        org.junit.Assert.assertNotNull(serviceDescriptorProto21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + label23 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label23.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(file30);
        org.junit.Assert.assertEquals(file30.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file30.toString(), "/tmp/hi!925674262015384429ISO");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(uRI34);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(byteBuffer49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intBuffer51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer55);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[]");
        org.junit.Assert.assertNotNull(methodOptions58);
        org.junit.Assert.assertNotNull(codedOutputStream61);
        org.junit.Assert.assertNotNull(fileDescriptorProto63);
        org.junit.Assert.assertNotNull(codedOutputStream64);
        org.junit.Assert.assertNotNull(byteBuffer65);
        org.junit.Assert.assertNotNull(extensionRegistryLite70);
        org.junit.Assert.assertNotNull(location71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(uninterpretedOptionOrBuilder75);
    }

    @Test
    public void test2571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2571");
        byte[] byteArray0 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions2 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray0, extensionRegistryLite1);
        com.google.protobuf.CodedOutputStream codedOutputStream5 = com.google.protobuf.CodedOutputStream.newInstance(byteArray0, (int) (short) 0, 1);
        byte[] byteArray6 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite7 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions8 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray6, extensionRegistryLite7);
        com.google.protobuf.CodedOutputStream codedOutputStream11 = com.google.protobuf.CodedOutputStream.newInstance(byteArray6, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite12 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto13 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray6, extensionRegistryLite12);
        com.google.protobuf.CodedOutputStream codedOutputStream14 = com.google.protobuf.CodedOutputStream.newInstance(byteArray6);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder15 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label16 = builder15.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto17 = builder15.buildPartial();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder18 = fieldDescriptorProto17.newBuilderForType();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder19 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto17);
        java.io.File file22 = null;
        java.io.File file23 = java.io.File.createTempFile("hi!", "ISO", file22);
        boolean boolean26 = file23.setWritable(false, false);
        java.net.URI uRI27 = file23.toURI();
        java.io.PrintStream printStream28 = new java.io.PrintStream(file23);
        printStream28.print((int) (byte) 0);
        printStream28.print(10.0d);
        printStream28.close();
        java.lang.String[] strArray37 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet38 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet38, strArray37);
        boolean boolean40 = strSet38.isEmpty();
        java.nio.ByteBuffer byteBuffer42 = java.nio.ByteBuffer.allocate(100);
        boolean boolean43 = strSet38.equals((java.lang.Object) byteBuffer42);
        java.nio.IntBuffer intBuffer44 = byteBuffer42.asIntBuffer();
        double double45 = byteBuffer42.getDouble();
        java.nio.ByteBuffer byteBuffer48 = byteBuffer42.put((int) (short) 1, (byte) 1);
        byte[] byteArray49 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite50 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions51 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray49, extensionRegistryLite50);
        com.google.protobuf.CodedOutputStream codedOutputStream54 = com.google.protobuf.CodedOutputStream.newInstance(byteArray49, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite55 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto56 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray49, extensionRegistryLite55);
        com.google.protobuf.CodedOutputStream codedOutputStream57 = com.google.protobuf.CodedOutputStream.newInstance(byteArray49);
        java.nio.ByteBuffer byteBuffer58 = byteBuffer42.get(byteArray49);
        printStream28.write(byteArray49, (int) '/', (int) (byte) 1);
        java.io.InputStream inputStream62 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite63 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location64 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream62, extensionRegistryLite63);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder65 = builder19.mergeFrom(byteArray49, extensionRegistryLite63);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto66 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray6, extensionRegistryLite63);
        codedOutputStream5.writeUnknownGroupNoTag((com.google.protobuf.MessageLite) fileDescriptorProto66);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(methodOptions2);
        org.junit.Assert.assertNotNull(codedOutputStream5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
        org.junit.Assert.assertNotNull(methodOptions8);
        org.junit.Assert.assertNotNull(codedOutputStream11);
        org.junit.Assert.assertNotNull(fileDescriptorProto13);
        org.junit.Assert.assertNotNull(codedOutputStream14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + label16 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label16.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(file23);
        org.junit.Assert.assertEquals(file23.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file23.toString(), "/tmp/hi!9196300428648733633ISO");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(uRI27);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(byteBuffer42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(intBuffer44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 0.0d + "'", double45 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer48);
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[]");
        org.junit.Assert.assertNotNull(methodOptions51);
        org.junit.Assert.assertNotNull(codedOutputStream54);
        org.junit.Assert.assertNotNull(fileDescriptorProto56);
        org.junit.Assert.assertNotNull(codedOutputStream57);
        org.junit.Assert.assertNotNull(byteBuffer58);
        org.junit.Assert.assertNotNull(extensionRegistryLite63);
        org.junit.Assert.assertNotNull(location64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(fileDescriptorProto66);
    }

    @Test
    public void test2572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2572");
        java.io.File file2 = null;
        java.io.File file3 = java.io.File.createTempFile("hi!", "ISO", file2);
        boolean boolean6 = file3.setWritable(false, false);
        java.net.URI uRI7 = file3.toURI();
        java.io.PrintStream printStream8 = new java.io.PrintStream(file3);
        boolean boolean10 = file3.setReadable(true);
        boolean boolean11 = file3.setReadOnly();
        boolean boolean12 = file3.mkdir();
        boolean boolean13 = file3.isAbsolute();
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file3.toString(), "/tmp/hi!4177748975875805554ISO");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(uRI7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test2573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2573");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType4 = jSTypeRegistry2.createObjectType(objectType3);
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.jstype.ObjectType objectType8 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry7.createObjectType(objectType8);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair10 = objectType4.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType9);
        com.google.javascript.rhino.Node node11 = objectType4.getRootNode();
        com.google.javascript.rhino.jstype.EnumType enumType12 = objectType4.toMaybeEnumType();
        com.google.javascript.rhino.JSDocInfo jSDocInfo14 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean15 = jSDocInfo14.hasThisType();
        boolean boolean16 = jSDocInfo14.isJavaDispatch();
        // The following exception was thrown during execution in test generation
        try {
            enumType12.setPropertyJSDocInfo("", jSDocInfo14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectType4);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertNotNull(typePair10);
        org.junit.Assert.assertNull(node11);
        org.junit.Assert.assertNull(enumType12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test2574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2574");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRecordFunctionInformation(true);
        boolean boolean3 = compilerOptions0.checkControlStructures;
        compilerOptions0.setCollapseProperties(false);
        compilerOptions0.setAssumeStrictThis(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions8.optimizeCalls = false;
        compilerOptions8.preferLineBreakAtEndOfFile = false;
        boolean boolean13 = compilerOptions8.markNoSideEffectCalls;
        boolean boolean14 = compilerOptions8.labelRenaming;
        com.google.javascript.jscomp.DependencyOptions dependencyOptions15 = new com.google.javascript.jscomp.DependencyOptions();
        java.lang.String[] strArray19 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet20 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet20, strArray19);
        boolean boolean22 = strSet20.isEmpty();
        java.nio.ByteBuffer byteBuffer24 = java.nio.ByteBuffer.allocate(100);
        boolean boolean25 = strSet20.equals((java.lang.Object) byteBuffer24);
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        boolean boolean32 = strSet30.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream33 = strSet30.stream();
        boolean boolean34 = strSet20.retainAll((java.util.Collection<java.lang.String>) strSet30);
        com.google.javascript.jscomp.DependencyOptions dependencyOptions35 = dependencyOptions15.setEntryPoints((java.util.Collection<java.lang.String>) strSet20);
        compilerOptions8.setDependencyOptions(dependencyOptions15);
        com.google.javascript.jscomp.CheckLevel checkLevel37 = compilerOptions8.checkGlobalThisLevel;
        compilerOptions0.reportMissingOverride = checkLevel37;
        compilerOptions0.removeUnusedPrototypePropertiesInExterns = true;
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strStream33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dependencyOptions35);
        org.junit.Assert.assertTrue("'" + checkLevel37 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel37.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test2575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2575");
        com.google.protobuf.DescriptorProtos.UninterpretedOption.NamePart namePart0 = com.google.protobuf.DescriptorProtos.UninterpretedOption.NamePart.getDefaultInstance();
        boolean boolean1 = namePart0.hasIsExtension();
        boolean boolean2 = namePart0.hasNamePart();
        org.junit.Assert.assertNotNull(namePart0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test2576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2576");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.lang.String str1 = localDate0.toString();
        java.time.chrono.IsoChronology isoChronology2 = localDate0.getChronology();
        java.util.Map<java.time.temporal.TemporalField, java.lang.Long> temporalFieldMap3 = null;
        java.time.format.ResolverStyle resolverStyle4 = java.time.format.ResolverStyle.SMART;
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoLocalDate chronoLocalDate5 = isoChronology2.resolveDate(temporalFieldMap3, resolverStyle4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "2022-02-21" + "'", str1, "2022-02-21");
        org.junit.Assert.assertNotNull(isoChronology2);
        org.junit.Assert.assertTrue("'" + resolverStyle4 + "' != '" + java.time.format.ResolverStyle.SMART + "'", resolverStyle4.equals(java.time.format.ResolverStyle.SMART));
    }

    @Test
    public void test2577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2577");
        java.io.File file2 = null;
        java.io.File file3 = java.io.File.createTempFile("hi!", "ISO", file2);
        boolean boolean6 = file3.setWritable(false, false);
        java.net.URI uRI7 = file3.toURI();
        java.io.PrintStream printStream8 = new java.io.PrintStream(file3);
        com.google.javascript.jscomp.Compiler compiler9 = new com.google.javascript.jscomp.Compiler(printStream8);
        printStream8.write(100);
        printStream8.println((double) '#');
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file3.toString(), "/tmp/hi!5251399597239330090ISO");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(uRI7);
    }

    @Test
    public void test2578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2578");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) ' ');
        boolean boolean2 = charBuffer1.isDirect();
        java.nio.CharBuffer charBuffer4 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer6 = charBuffer4.put('a');
        char[] charArray8 = new char[] { '4' };
        java.nio.CharBuffer charBuffer9 = charBuffer6.get(charArray8);
        java.nio.CharBuffer charBuffer10 = charBuffer6.compact();
        java.nio.CharBuffer charBuffer12 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer14 = charBuffer12.put('a');
        java.nio.CharBuffer charBuffer16 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer18 = charBuffer16.put('a');
        char[] charArray20 = new char[] { '4' };
        java.nio.CharBuffer charBuffer21 = charBuffer18.get(charArray20);
        java.nio.CharBuffer charBuffer22 = charBuffer18.compact();
        com.google.common.collect.ImmutableSet<java.lang.Appendable> appendableSet23 = com.google.common.collect.ImmutableSet.of((java.lang.Appendable) charBuffer1, (java.lang.Appendable) charBuffer6, (java.lang.Appendable) charBuffer12, (java.lang.Appendable) charBuffer22);
        java.time.ZoneOffset zoneOffset27 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset27);
        int int29 = localDateTime28.getYear();
        java.time.Instant instant30 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset34);
        java.time.OffsetDateTime offsetDateTime36 = java.time.OffsetDateTime.ofInstant(instant30, (java.time.ZoneId) zoneOffset34);
        java.time.Instant instant37 = localDateTime28.toInstant(zoneOffset34);
        boolean boolean38 = appendableSet23.equals((java.lang.Object) zoneOffset34);
        java.lang.Object[] objArray39 = appendableSet23.toArray();
        java.util.concurrent.TimeUnit timeUnit40 = java.util.concurrent.TimeUnit.HOURS;
        boolean boolean41 = appendableSet23.contains((java.lang.Object) timeUnit40);
        com.google.common.collect.ImmutableList<java.lang.Appendable> appendableList42 = appendableSet23.asList();
        com.google.common.collect.UnmodifiableIterator<java.lang.Appendable> appendableItor43 = appendableSet23.iterator();
        // The following exception was thrown during execution in test generation
        try {
            appendableItor43.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charBuffer4);
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer9);
        org.junit.Assert.assertNotNull(charBuffer10);
        org.junit.Assert.assertNotNull(charBuffer12);
        org.junit.Assert.assertNotNull(charBuffer14);
        org.junit.Assert.assertNotNull(charBuffer16);
        org.junit.Assert.assertNotNull(charBuffer18);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer21);
        org.junit.Assert.assertNotNull(charBuffer22);
        org.junit.Assert.assertNotNull(appendableSet23);
        org.junit.Assert.assertNotNull(zoneOffset27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1970 + "'", int29 == 1970);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(offsetDateTime36);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000, \000\000, \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000, \000\000, \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000]");
        org.junit.Assert.assertNotNull(timeUnit40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(appendableList42);
        org.junit.Assert.assertNotNull(appendableItor43);
    }

    @Test
    public void test2579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2579");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto2 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.parseFrom(inputStream0, extensionRegistryLite1);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto3 = fieldDescriptorProto2.getDefaultInstanceForType();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder4 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto3);
        com.google.protobuf.MessageLite.Builder builder5 = fieldDescriptorProto3.toBuilder();
        boolean boolean6 = fieldDescriptorProto3.isInitialized();
        org.junit.Assert.assertNotNull(fieldDescriptorProto2);
        org.junit.Assert.assertNotNull(fieldDescriptorProto3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test2580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2580");
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto0 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.getDefaultInstance();
        boolean boolean1 = serviceDescriptorProto0.hasOptions();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder2 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.newBuilder(serviceDescriptorProto0);
        byte[] byteArray3 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite4 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions5 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray3, extensionRegistryLite4);
        com.google.protobuf.CodedInputStream codedInputStream8 = com.google.protobuf.CodedInputStream.newInstance(byteArray3, 16, (int) 'a');
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder9 = builder2.mergeFrom(byteArray3);
        java.util.List<com.google.protobuf.DescriptorProtos.MethodDescriptorProto> methodDescriptorProtoList10 = builder9.getMethodList();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder11 = builder9.clearMethod();
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto12 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.getDefaultInstance();
        boolean boolean13 = methodDescriptorProto12.hasOutputType();
        com.google.protobuf.CodedOutputStream codedOutputStream14 = null;
        methodDescriptorProto12.writeTo(codedOutputStream14);
        boolean boolean16 = methodDescriptorProto12.hasOutputType();
        boolean boolean17 = methodDescriptorProto12.hasOutputType();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder18 = builder11.addMethod(methodDescriptorProto12);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder19 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder21 = builder19.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder22 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label23 = builder22.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder24 = builder19.addExtension(builder22);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder25 = builder19.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder26 = builder25.getOptionsBuilder();
        java.io.InputStream inputStream27 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions28 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream27);
        boolean boolean29 = enumOptions28.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder30 = builder26.mergeFrom(enumOptions28);
        com.google.protobuf.UnknownFieldSet unknownFieldSet31 = builder26.getUnknownFields();
        byte[] byteArray32 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite33 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions34 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray32, extensionRegistryLite33);
        com.google.protobuf.CodedOutputStream codedOutputStream37 = com.google.protobuf.CodedOutputStream.newInstance(byteArray32, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite38 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto39 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray32, extensionRegistryLite38);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite40 = null;
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto41 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.parseFrom(byteArray32, extensionRegistryLite40);
        com.google.protobuf.UnknownFieldSet unknownFieldSet42 = com.google.protobuf.UnknownFieldSet.parseFrom(byteArray32);
        com.google.protobuf.ByteString byteString43 = unknownFieldSet42.toByteString();
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite44 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder45 = builder26.mergeFrom(byteString43, extensionRegistryLite44);
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder46 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder47 = builder46.clearCcGenericServices();
        boolean boolean48 = builder46.isInitialized();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder50 = builder46.setCcGenericServices(true);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder51 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label52 = builder51.getLabel();
        com.google.protobuf.ByteString byteString53 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder54 = builder51.mergeFrom(byteString53);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite55 = null;
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder56 = builder50.mergeFrom(byteString53, extensionRegistryLite55);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite57 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions58 = com.google.protobuf.DescriptorProtos.EnumValueOptions.parseFrom(byteString53, extensionRegistryLite57);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite59 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto60 = com.google.protobuf.DescriptorProtos.DescriptorProto.parseFrom(byteString53, extensionRegistryLite59);
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder61 = builder18.mergeFrom(byteString43, extensionRegistryLite59);
        boolean boolean62 = builder61.hasOptions();
        com.google.protobuf.DescriptorProtos.ServiceOptionsOrBuilder serviceOptionsOrBuilder63 = builder61.getOptionsOrBuilder();
        org.junit.Assert.assertNotNull(serviceDescriptorProto0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(methodOptions5);
        org.junit.Assert.assertNotNull(codedInputStream8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(methodDescriptorProtoList10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(methodDescriptorProto12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + label23 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label23.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(enumOptions28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(unknownFieldSet31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(methodOptions34);
        org.junit.Assert.assertNotNull(codedOutputStream37);
        org.junit.Assert.assertNotNull(fileDescriptorProto39);
        org.junit.Assert.assertNotNull(serviceDescriptorProto41);
        org.junit.Assert.assertNotNull(unknownFieldSet42);
        org.junit.Assert.assertNotNull(byteString43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertTrue("'" + label52 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label52.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(byteString53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(enumValueOptions58);
        org.junit.Assert.assertNotNull(extensionRegistryLite59);
        org.junit.Assert.assertNotNull(descriptorProto60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(serviceOptionsOrBuilder63);
    }

    @Test
    public void test2581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2581");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.INVALID_CASTS;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_TYPES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.UNKNOWN_DEFINES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROPERTIES = diagnosticGroup0;
        org.junit.Assert.assertNotNull(diagnosticGroup0);
    }

    @Test
    public void test2582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2582");
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        boolean boolean6 = strSet4.isEmpty();
        java.nio.ByteBuffer byteBuffer8 = java.nio.ByteBuffer.allocate(100);
        boolean boolean9 = strSet4.equals((java.lang.Object) byteBuffer8);
        java.nio.IntBuffer intBuffer10 = byteBuffer8.asIntBuffer();
        double double11 = byteBuffer8.getDouble();
        java.nio.ByteBuffer byteBuffer14 = byteBuffer8.put((int) (short) 1, (byte) 1);
        byte[] byteArray15 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite16 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions17 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray15, extensionRegistryLite16);
        com.google.protobuf.CodedOutputStream codedOutputStream20 = com.google.protobuf.CodedOutputStream.newInstance(byteArray15, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite21 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto22 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray15, extensionRegistryLite21);
        com.google.protobuf.CodedOutputStream codedOutputStream23 = com.google.protobuf.CodedOutputStream.newInstance(byteArray15);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer8.get(byteArray15);
        com.google.protobuf.CodedOutputStream codedOutputStream25 = com.google.protobuf.CodedOutputStream.newInstance(byteArray15);
        // The following exception was thrown during execution in test generation
        try {
            codedOutputStream25.writeBoolNoTag(true);
            org.junit.Assert.fail("Expected exception of type com.google.protobuf.CodedOutputStream.OutOfSpaceException; message: CodedOutputStream was writing to a flat byte array and ran out of space.");
        } catch (com.google.protobuf.CodedOutputStream.OutOfSpaceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(intBuffer10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(methodOptions17);
        org.junit.Assert.assertNotNull(codedOutputStream20);
        org.junit.Assert.assertNotNull(fileDescriptorProto22);
        org.junit.Assert.assertNotNull(codedOutputStream23);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(codedOutputStream25);
    }

    @Test
    public void test2583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2583");
        int[] intArray4 = new int[] { 16, ':', 43, (short) 100 };
        java.util.stream.IntStream intStream5 = java.util.stream.IntStream.of(intArray4);
        java.util.stream.IntStream intStream6 = intStream5.parallel();
        java.util.Spliterator.OfInt ofInt7 = intStream6.spliterator();
        long long8 = ofInt7.estimateSize();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[16, 58, 43, 100]");
        org.junit.Assert.assertNotNull(intStream5);
        org.junit.Assert.assertNotNull(intStream6);
        org.junit.Assert.assertNotNull(ofInt7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 4L + "'", long8 == 4L);
    }

    @Test
    public void test2584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2584");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label4 = builder3.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = builder0.addExtension(builder3);
        boolean boolean6 = builder3.hasDefaultValue();
        java.io.InputStream inputStream7 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite8 = null;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder9 = builder3.mergeFrom(inputStream7, extensionRegistryLite8);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder10 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label11 = builder10.getLabel();
        com.google.protobuf.ByteString byteString12 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder13 = builder10.mergeFrom(byteString12);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite14 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location15 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(byteString12, extensionRegistryLite14);
        boolean boolean16 = byteString12.isEmpty();
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite17 = null;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder18 = builder3.mergeFrom(byteString12, extensionRegistryLite17);
        java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite> priorityMap19 = new java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite>();
        java.lang.Object obj20 = priorityMap19.clone();
        boolean boolean21 = priorityMap19.isEmpty();
        java.lang.String str22 = priorityMap19.toString();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder23 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder24 = builder23.clearCcGenericServices();
        boolean boolean25 = builder23.isInitialized();
        com.google.protobuf.MessageLite messageLite26 = priorityMap19.get((java.lang.Object) builder23);
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder28 = builder23.setPyGenericServices(false);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder29 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label30 = builder29.getLabel();
        com.google.protobuf.ByteString byteString31 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder32 = builder29.mergeFrom(byteString31);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite33 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location34 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(byteString31, extensionRegistryLite33);
        com.google.protobuf.MessageLite.Builder builder35 = builder23.mergeFrom(byteString31);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite36 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.javascript.jscomp.FunctionInformationMap functionInformationMap37 = com.google.javascript.jscomp.FunctionInformationMap.parseFrom(byteString31, extensionRegistryLite36);
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange extensionRange38 = com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.parseFrom(byteString12, extensionRegistryLite36);
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.Builder builder39 = extensionRange38.toBuilder();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + label4 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label4.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + label11 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label11.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(byteString12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(location15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "{}");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{}" + "'", str22, "{}");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(messageLite26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + label30 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label30.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(byteString31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(location34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(extensionRegistryLite36);
        org.junit.Assert.assertNotNull(functionInformationMap37);
        org.junit.Assert.assertNotNull(extensionRange38);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test2585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2585");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean4 = node3.isStringKey();
        boolean boolean5 = node3.isTrue();
        com.google.javascript.rhino.InputId inputId7 = new com.google.javascript.rhino.InputId("NUMBER 52.0 0");
        node3.setInputId(inputId7);
        boolean boolean9 = node3.isThis();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean15 = node14.isStringKey();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(0, node14);
        boolean boolean17 = node16.isFor();
        node16.setLineno(0);
        com.google.javascript.rhino.Node node20 = node3.copyInformationFromForTree(node16);
        node3.setLineno(0);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node20);
    }

    @Test
    public void test2586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2586");
        com.google.javascript.jscomp.CompilerOptions compilerOptions1 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions1.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat4 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions1.errorFormat = errorFormat4;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy6 = null;
        compilerOptions1.variableRenaming = variableRenamingPolicy6;
        compilerOptions1.setSummaryDetailLevel(999);
        compilerOptions1.setInlineVariables(true);
        byte[] byteArray12 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite13 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions14 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray12, extensionRegistryLite13);
        com.google.protobuf.CodedOutputStream codedOutputStream17 = com.google.protobuf.CodedOutputStream.newInstance(byteArray12, (int) (short) 0, 1);
        com.google.protobuf.CodedOutputStream codedOutputStream20 = com.google.protobuf.CodedOutputStream.newInstance(byteArray12, (int) ' ', 0);
        compilerOptions1.inputVariableMapSerialized = byteArray12;
        // The following exception was thrown during execution in test generation
        try {
            java.net.InetAddress inetAddress22 = java.net.InetAddress.getByAddress("", byteArray12);
            org.junit.Assert.fail("Expected exception of type java.net.UnknownHostException; message: addr is of illegal length");
        } catch (java.net.UnknownHostException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(errorFormat4);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(methodOptions14);
        org.junit.Assert.assertNotNull(codedOutputStream17);
        org.junit.Assert.assertNotNull(codedOutputStream20);
    }

    @Test
    public void test2587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2587");
        com.google.javascript.jscomp.SourceFile.Builder builder0 = new com.google.javascript.jscomp.SourceFile.Builder();
        com.google.javascript.jscomp.SourceFile sourceFile2 = builder0.buildFromFile("ClockHourOfAmPm");
        com.google.javascript.jscomp.SourceFile.Generator generator4 = null;
        com.google.javascript.jscomp.SourceFile sourceFile5 = builder0.buildFromGenerator("java.nio.HeapLongBufferR[pos=0 lim=5 cap=5]", generator4);
        org.junit.Assert.assertNotNull(sourceFile2);
        org.junit.Assert.assertNotNull(sourceFile5);
    }

    @Test
    public void test2588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2588");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        boolean boolean1 = charset0.canEncode();
        java.lang.String str2 = charset0.displayName();
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "US-ASCII" + "'", str2, "US-ASCII");
    }

    @Test
    public void test2589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2589");
        com.google.javascript.jscomp.PerformanceTracker.Stats stats1 = new com.google.javascript.jscomp.PerformanceTracker.Stats("goog.global");
        stats1.size = 52;
    }

    @Test
    public void test2590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2590");
        java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite> priorityMap0 = new java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite>();
        java.lang.Object obj1 = priorityMap0.clone();
        boolean boolean2 = priorityMap0.isEmpty();
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions3 = com.google.protobuf.DescriptorProtos.EnumValueOptions.getDefaultInstance();
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder4 = com.google.protobuf.DescriptorProtos.EnumValueOptions.newBuilder(enumValueOptions3);
        boolean boolean5 = priorityMap0.contains((java.lang.Object) enumValueOptions3);
        boolean boolean6 = enumValueOptions3.isInitialized();
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(enumValueOptions3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test2591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2591");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo sourceCodeInfo2 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.parseFrom(inputStream0, extensionRegistryLite1);
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder3 = sourceCodeInfo2.newBuilderForType();
        com.google.protobuf.UnknownFieldSet unknownFieldSet4 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder5 = builder3.setUnknownFields(unknownFieldSet4);
        java.util.Map<com.google.protobuf.Descriptors.FieldDescriptor, java.lang.Object> fieldDescriptorMap6 = builder3.getAllFields();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder7 = builder3.clearLocation();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.Builder builder8 = builder3.addLocationBuilder();
        java.util.List<java.lang.Integer> intList9 = builder8.getSpanList();
        org.junit.Assert.assertNotNull(sourceCodeInfo2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(fieldDescriptorMap6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(intList9);
    }

    @Test
    public void test2592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2592");
        java.time.LocalTime localTime0 = java.time.LocalTime.now();
        org.junit.Assert.assertNotNull(localTime0);
    }

    @Test
    public void test2593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2593");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) ' ');
        boolean boolean2 = charBuffer1.isDirect();
        java.nio.CharBuffer charBuffer4 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer6 = charBuffer4.put('a');
        char[] charArray8 = new char[] { '4' };
        java.nio.CharBuffer charBuffer9 = charBuffer6.get(charArray8);
        java.nio.CharBuffer charBuffer10 = charBuffer6.compact();
        java.nio.CharBuffer charBuffer12 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer14 = charBuffer12.put('a');
        java.nio.CharBuffer charBuffer16 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer18 = charBuffer16.put('a');
        char[] charArray20 = new char[] { '4' };
        java.nio.CharBuffer charBuffer21 = charBuffer18.get(charArray20);
        java.nio.CharBuffer charBuffer22 = charBuffer18.compact();
        com.google.common.collect.ImmutableSet<java.lang.Appendable> appendableSet23 = com.google.common.collect.ImmutableSet.of((java.lang.Appendable) charBuffer1, (java.lang.Appendable) charBuffer6, (java.lang.Appendable) charBuffer12, (java.lang.Appendable) charBuffer22);
        java.time.ZoneOffset zoneOffset27 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset27);
        int int29 = localDateTime28.getYear();
        java.time.Instant instant30 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset34);
        java.time.OffsetDateTime offsetDateTime36 = java.time.OffsetDateTime.ofInstant(instant30, (java.time.ZoneId) zoneOffset34);
        java.time.Instant instant37 = localDateTime28.toInstant(zoneOffset34);
        boolean boolean38 = appendableSet23.equals((java.lang.Object) zoneOffset34);
        java.lang.Object[] objArray39 = appendableSet23.toArray();
        java.util.concurrent.TimeUnit timeUnit40 = java.util.concurrent.TimeUnit.HOURS;
        boolean boolean41 = appendableSet23.contains((java.lang.Object) timeUnit40);
        com.google.common.collect.ImmutableList<java.lang.Appendable> appendableList42 = appendableSet23.asList();
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap43 = java.nio.charset.Charset.availableCharsets();
        java.net.URISyntaxException uRISyntaxException46 = new java.net.URISyntaxException("hi!", "");
        boolean boolean47 = strMap43.containsKey((java.lang.Object) "");
        java.util.Set<java.lang.String> strSet48 = strMap43.keySet();
        java.lang.String[] strArray52 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet53 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet53, strArray52);
        boolean boolean55 = strSet53.isEmpty();
        java.nio.ByteBuffer byteBuffer57 = java.nio.ByteBuffer.allocate(100);
        boolean boolean58 = strSet53.equals((java.lang.Object) byteBuffer57);
        java.lang.String[] strArray62 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet63 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet63, strArray62);
        boolean boolean65 = strSet63.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream66 = strSet63.stream();
        boolean boolean67 = strSet53.retainAll((java.util.Collection<java.lang.String>) strSet63);
        boolean boolean68 = strSet48.containsAll((java.util.Collection<java.lang.String>) strSet53);
        com.google.javascript.jscomp.CompilerOptions compilerOptions69 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions69.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat72 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions69.errorFormat = errorFormat72;
        byte[] byteArray74 = compilerOptions69.inputPropertyMapSerialized;
        compilerOptions69.setInstrumentationTemplate("{}");
        compilerOptions69.renamePrefixNamespace = "";
        boolean boolean79 = strSet53.equals((java.lang.Object) "");
        boolean boolean80 = appendableSet23.containsAll((java.util.Collection<java.lang.String>) strSet53);
        java.util.Iterator<java.lang.String> strItor81 = strSet53.iterator();
        java.lang.String str82 = strItor81.next();
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charBuffer4);
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer9);
        org.junit.Assert.assertNotNull(charBuffer10);
        org.junit.Assert.assertNotNull(charBuffer12);
        org.junit.Assert.assertNotNull(charBuffer14);
        org.junit.Assert.assertNotNull(charBuffer16);
        org.junit.Assert.assertNotNull(charBuffer18);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer21);
        org.junit.Assert.assertNotNull(charBuffer22);
        org.junit.Assert.assertNotNull(appendableSet23);
        org.junit.Assert.assertNotNull(zoneOffset27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1970 + "'", int29 == 1970);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(offsetDateTime36);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000, \000\000, \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000, \000\000, \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000]");
        org.junit.Assert.assertNotNull(timeUnit40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(appendableList42);
        org.junit.Assert.assertNotNull(strMap43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(byteBuffer57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(strStream66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(errorFormat72);
        org.junit.Assert.assertNull(byteArray74);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(strItor81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "hi!" + "'", str82, "hi!");
    }

    @Test
    public void test2594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2594");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label1 = builder0.getLabel();
        com.google.protobuf.ByteString byteString2 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite3 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions4 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(byteString2, extensionRegistryLite3);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder5 = builder0.mergeFrom(byteString2);
        boolean boolean6 = builder0.hasType();
        java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite> priorityMap7 = new java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite>();
        java.lang.Object obj8 = priorityMap7.clone();
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder9 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.newBuilder();
        boolean boolean10 = priorityMap7.containsValue((java.lang.Object) builder9);
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder12 = builder9.setName("java.nio.ByteBufferAsDoubleBufferB[pos=0 lim=12 cap=12]");
        com.google.protobuf.ByteString byteString13 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder14 = builder9.mergeFrom(byteString13);
        com.google.protobuf.DescriptorProtos.ServiceOptions serviceOptions15 = com.google.protobuf.DescriptorProtos.ServiceOptions.parseFrom(byteString13);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder16 = builder0.mergeFrom(byteString13);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label17 = builder16.getLabel();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + label1 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label1.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(byteString2);
        org.junit.Assert.assertNotNull(enumOptions4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "{}");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(byteString13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(serviceOptions15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + label17 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label17.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
    }

    @Test
    public void test2595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2595");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        compilerOptions0.setRemoveDeadCode(false);
        compilerOptions0.sourceMapOutputPath = "South Korea";
        com.google.javascript.jscomp.SourceMap.LocationMapping locationMapping11 = new com.google.javascript.jscomp.SourceMap.LocationMapping("hi!", "(1970-01-01+00:00:52)");
        com.google.javascript.jscomp.SourceMap.LocationMapping[] locationMappingArray12 = new com.google.javascript.jscomp.SourceMap.LocationMapping[] { locationMapping11 };
        java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList13 = new java.util.ArrayList<com.google.javascript.jscomp.SourceMap.LocationMapping>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<com.google.javascript.jscomp.SourceMap.LocationMapping>) locationMappingList13, locationMappingArray12);
        compilerOptions0.sourceMapLocationMappings = locationMappingList13;
        org.junit.Assert.assertNotNull(errorFormat3);
        org.junit.Assert.assertNotNull(locationMappingArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test2596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2596");
        java.net.URISyntaxException uRISyntaxException3 = new java.net.URISyntaxException("ISO", "1970-01-01T00:00:52+00:00:52", 4);
        java.security.InvalidKeyException invalidKeyException4 = new java.security.InvalidKeyException((java.lang.Throwable) uRISyntaxException3);
    }

    @Test
    public void test2597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2597");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        com.google.javascript.rhino.jstype.ObjectType objectType6 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType7 = jSTypeRegistry5.createObjectType(objectType6);
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.jstype.ObjectType objectType11 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType12 = jSTypeRegistry10.createObjectType(objectType11);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair13 = objectType7.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType12);
        java.lang.String str14 = objectType12.getDisplayName();
        java.util.Collection<com.google.javascript.rhino.jstype.FunctionType> functionTypeCollection15 = jSTypeRegistry2.getDirectImplementors(objectType12);
        java.lang.String str16 = objectType12.getDisplayName();
        org.junit.Assert.assertNotNull(objectType7);
        org.junit.Assert.assertNotNull(objectType12);
        org.junit.Assert.assertNotNull(typePair13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(functionTypeCollection15);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test2598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2598");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy5 = null;
        compilerOptions0.variableRenaming = variableRenamingPolicy5;
        compilerOptions0.setSummaryDetailLevel(999);
        boolean boolean9 = compilerOptions0.getInferTypes();
        boolean boolean10 = compilerOptions0.ideMode;
        compilerOptions0.setGroupVariableDeclarations(true);
        compilerOptions0.setCheckCaja(false);
        java.util.Set<java.lang.String> strSet15 = compilerOptions0.stripNameSuffixes;
        java.util.stream.Stream<java.lang.String> strStream16 = strSet15.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream17 = strStream16.sequential();
        java.util.Iterator<java.lang.String> strItor18 = strStream17.iterator();
        org.junit.Assert.assertNotNull(errorFormat3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(strStream16);
        org.junit.Assert.assertNotNull(strStream17);
        org.junit.Assert.assertNotNull(strItor18);
    }

    @Test
    public void test2599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2599");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate(100);
        java.nio.DoubleBuffer doubleBuffer2 = byteBuffer1.asDoubleBuffer();
        double[] doubleArray6 = new double[] { (short) 100, (short) 1, (short) -1 };
        java.nio.DoubleBuffer doubleBuffer7 = java.nio.DoubleBuffer.wrap(doubleArray6);
        java.nio.DoubleBuffer doubleBuffer8 = doubleBuffer2.put(doubleBuffer7);
        java.nio.ByteOrder byteOrder9 = doubleBuffer2.order();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(doubleBuffer2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0, 1.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleBuffer7);
        org.junit.Assert.assertNotNull(doubleBuffer8);
        org.junit.Assert.assertNotNull(byteOrder9);
    }

    @Test
    public void test2600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2600");
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative0 = com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_PROTOTYPE;
        org.junit.Assert.assertTrue("'" + jSTypeNative0 + "' != '" + com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_PROTOTYPE + "'", jSTypeNative0.equals(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_PROTOTYPE));
    }

    @Test
    public void test2601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2601");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange extensionRange2 = com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.parseFrom(inputStream0, extensionRegistryLite1);
        int int3 = extensionRange2.getEnd();
        boolean boolean4 = extensionRange2.hasStart();
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.Builder builder5 = extensionRange2.newBuilderForType();
        boolean boolean6 = extensionRange2.hasStart();
        org.junit.Assert.assertNotNull(extensionRange2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test2602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2602");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo sourceCodeInfo2 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.parseFrom(inputStream0, extensionRegistryLite1);
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder3 = sourceCodeInfo2.newBuilderForType();
        com.google.protobuf.UnknownFieldSet unknownFieldSet4 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder5 = builder3.setUnknownFields(unknownFieldSet4);
        java.io.InputStream inputStream6 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean7 = builder3.mergeDelimitedFrom(inputStream6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(sourceCodeInfo2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test2603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2603");
        java.time.Month month1 = java.time.Month.APRIL;
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.of(37, month1, 10, (int) (short) 10, 4, 37, 1);
        java.time.Month month8 = month1.firstMonthOfQuarter();
        org.junit.Assert.assertTrue("'" + month1 + "' != '" + java.time.Month.APRIL + "'", month1.equals(java.time.Month.APRIL));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + month8 + "' != '" + java.time.Month.APRIL + "'", month8.equals(java.time.Month.APRIL));
    }

    @Test
    public void test2604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2604");
        com.google.protobuf.Descriptors.Descriptor descriptor0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto1 = descriptor0.toProto();
        boolean boolean2 = descriptorProto1.isInitialized();
        com.google.protobuf.DescriptorProtos.MessageOptions messageOptions3 = descriptorProto1.getOptions();
        boolean boolean4 = messageOptions3.getMessageSetWireFormat();
        org.junit.Assert.assertNotNull(descriptor0);
        org.junit.Assert.assertNotNull(descriptorProto1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(messageOptions3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test2605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2605");
        java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite> priorityMap0 = new java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite>();
        java.lang.Object obj1 = priorityMap0.clone();
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder2 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.newBuilder();
        boolean boolean3 = priorityMap0.containsValue((java.lang.Object) builder2);
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder5 = builder2.setName("java.nio.ByteBufferAsDoubleBufferB[pos=0 lim=12 cap=12]");
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions6 = builder5.getOptions();
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "{}");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(enumValueOptions6);
    }

    @Test
    public void test2606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2606");
        com.google.javascript.jscomp.CompilerOptions compilerOptions3 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions3.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat6 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions3.errorFormat = errorFormat6;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy8 = null;
        compilerOptions3.variableRenaming = variableRenamingPolicy8;
        compilerOptions3.setSummaryDetailLevel(999);
        compilerOptions3.checkSuspiciousCode = true;
        byte[] byteArray14 = compilerOptions3.inputPropertyMapSerialized;
        com.google.javascript.jscomp.CompilerOptions compilerOptions15 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions15.optimizeCalls = false;
        compilerOptions15.preferLineBreakAtEndOfFile = false;
        boolean boolean20 = compilerOptions15.markNoSideEffectCalls;
        boolean boolean21 = compilerOptions15.labelRenaming;
        com.google.javascript.jscomp.DependencyOptions dependencyOptions22 = new com.google.javascript.jscomp.DependencyOptions();
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet27 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet27, strArray26);
        boolean boolean29 = strSet27.isEmpty();
        java.nio.ByteBuffer byteBuffer31 = java.nio.ByteBuffer.allocate(100);
        boolean boolean32 = strSet27.equals((java.lang.Object) byteBuffer31);
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        boolean boolean39 = strSet37.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream40 = strSet37.stream();
        boolean boolean41 = strSet27.retainAll((java.util.Collection<java.lang.String>) strSet37);
        com.google.javascript.jscomp.DependencyOptions dependencyOptions42 = dependencyOptions22.setEntryPoints((java.util.Collection<java.lang.String>) strSet27);
        compilerOptions15.setDependencyOptions(dependencyOptions22);
        com.google.javascript.jscomp.CheckLevel checkLevel44 = compilerOptions15.checkGlobalThisLevel;
        compilerOptions3.checkMissingReturn = checkLevel44;
        com.google.javascript.jscomp.DiagnosticType diagnosticType46 = com.google.javascript.jscomp.Compiler.MOTION_ITERATIONS_ERROR;
        java.lang.String[] strArray50 = new java.lang.String[] { "FileDescriptorProto", "16:00:52+00:00:52", "Exceeded max number of code motion iterations: {0}" };
        com.google.javascript.jscomp.JSError jSError51 = com.google.javascript.jscomp.JSError.make("java.nio.HeapFloatBuffer[pos=0 lim=6 cap=6]", (int) (short) 10, (int) ':', checkLevel44, diagnosticType46, strArray50);
        java.lang.String str52 = diagnosticType46.toString();
        org.junit.Assert.assertNotNull(errorFormat6);
        org.junit.Assert.assertNull(byteArray14);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strStream40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dependencyOptions42);
        org.junit.Assert.assertTrue("'" + checkLevel44 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel44.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(diagnosticType46);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(jSError51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "JSC_OPTIMIZE_LOOP_ERROR: Exceeded max number of code motion iterations: {0}" + "'", str52, "JSC_OPTIMIZE_LOOP_ERROR: Exceeded max number of code motion iterations: {0}");
    }

    @Test
    public void test2607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2607");
        com.google.common.collect.ImmutableMap<com.google.protobuf.MessageLite, java.util.Optional<java.net.URISyntaxException>> messageLiteMap0 = com.google.common.collect.ImmutableMap.of();
        org.junit.Assert.assertNotNull(messageLiteMap0);
    }

    @Test
    public void test2608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2608");
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions0 = com.google.protobuf.DescriptorProtos.EnumValueOptions.getDefaultInstance();
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder1 = com.google.protobuf.DescriptorProtos.EnumValueOptions.newBuilder(enumValueOptions0);
        com.google.javascript.jscomp.CompilerOptions compilerOptions2 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions2.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat5 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions2.errorFormat = errorFormat5;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy7 = null;
        compilerOptions2.variableRenaming = variableRenamingPolicy7;
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode9 = compilerOptions2.getTracerMode();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder10 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder12 = builder10.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder13 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label14 = builder13.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder15 = builder10.addExtension(builder13);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder16 = builder10.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder17 = builder16.getOptionsBuilder();
        java.io.InputStream inputStream18 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions19 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream18);
        boolean boolean20 = enumOptions19.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder21 = builder17.mergeFrom(enumOptions19);
        byte[] byteArray22 = enumOptions19.toByteArray();
        compilerOptions2.setInputPropertyMapSerialized(byteArray22);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite24 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo sourceCodeInfo25 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.parseFrom(byteArray22, extensionRegistryLite24);
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder26 = builder1.mergeFrom(byteArray22);
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder27 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder28 = builder27.clearCcGenericServices();
        boolean boolean29 = builder27.isInitialized();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder31 = builder27.setCcGenericServices(true);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder32 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label33 = builder32.getLabel();
        com.google.protobuf.ByteString byteString34 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder35 = builder32.mergeFrom(byteString34);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite36 = null;
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder37 = builder31.mergeFrom(byteString34, extensionRegistryLite36);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite38 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions39 = com.google.protobuf.DescriptorProtos.EnumValueOptions.parseFrom(byteString34, extensionRegistryLite38);
        java.util.List<com.google.protobuf.DescriptorProtos.UninterpretedOption> uninterpretedOptionList40 = enumValueOptions39.getUninterpretedOptionList();
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder41 = builder26.mergeFrom(enumValueOptions39);
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder42 = builder41.clear();
        org.junit.Assert.assertNotNull(enumValueOptions0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(errorFormat5);
        org.junit.Assert.assertTrue("'" + tracerMode9 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode9.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + label14 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label14.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(enumOptions19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(sourceCodeInfo25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + label33 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label33.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(byteString34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(enumValueOptions39);
        org.junit.Assert.assertNotNull(uninterpretedOptionList40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test2609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2609");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label4 = builder3.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = builder0.addExtension(builder3);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder6 = builder0.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder7 = builder6.getOptionsBuilder();
        java.io.InputStream inputStream8 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions9 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream8);
        boolean boolean10 = enumOptions9.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder11 = builder7.mergeFrom(enumOptions9);
        com.google.protobuf.UnknownFieldSet unknownFieldSet12 = builder7.getUnknownFields();
        com.google.protobuf.CodedOutputStream codedOutputStream13 = null;
        unknownFieldSet12.writeTo(codedOutputStream13);
        byte[] byteArray15 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite16 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions17 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray15, extensionRegistryLite16);
        com.google.protobuf.CodedOutputStream codedOutputStream20 = com.google.protobuf.CodedOutputStream.newInstance(byteArray15, (int) (short) 0, 1);
        com.google.protobuf.CodedOutputStream codedOutputStream23 = com.google.protobuf.CodedOutputStream.newInstance(byteArray15, (int) ' ', 0);
        java.io.InputStream inputStream24 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location25 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream24);
        boolean boolean26 = location25.isInitialized();
        codedOutputStream23.writeGroupNoTag((com.google.protobuf.MessageLite) location25);
        unknownFieldSet12.writeAsMessageSetTo(codedOutputStream23);
        // The following exception was thrown during execution in test generation
        try {
            codedOutputStream23.writeSFixed64((int) ':', 0L);
            org.junit.Assert.fail("Expected exception of type com.google.protobuf.CodedOutputStream.OutOfSpaceException; message: CodedOutputStream was writing to a flat byte array and ran out of space.");
        } catch (com.google.protobuf.CodedOutputStream.OutOfSpaceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + label4 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label4.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(enumOptions9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(unknownFieldSet12);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(methodOptions17);
        org.junit.Assert.assertNotNull(codedOutputStream20);
        org.junit.Assert.assertNotNull(codedOutputStream23);
        org.junit.Assert.assertNotNull(location25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test2610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2610");
        java.time.temporal.ChronoField chronoField0 = java.time.temporal.ChronoField.YEAR_OF_ERA;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset9);
        java.time.ZonedDateTime zonedDateTime11 = java.time.ZonedDateTime.of(localDateTime5, (java.time.ZoneId) zoneOffset9);
        java.time.ZonedDateTime zonedDateTime13 = zonedDateTime11.withHour(16);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime14 = zonedDateTime13.withLaterOffsetAtOverlap();
        long long15 = chronoField0.getFrom((java.time.temporal.TemporalAccessor) zonedDateTime13);
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset19);
        int int21 = localDateTime20.getYear();
        java.time.Instant instant22 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset26);
        java.time.OffsetDateTime offsetDateTime28 = java.time.OffsetDateTime.ofInstant(instant22, (java.time.ZoneId) zoneOffset26);
        java.time.Instant instant29 = localDateTime20.toInstant(zoneOffset26);
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset34);
        java.time.ZoneOffset zoneOffset39 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime40 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset39);
        java.time.ZonedDateTime zonedDateTime41 = java.time.ZonedDateTime.of(localDateTime35, (java.time.ZoneId) zoneOffset39);
        java.time.temporal.ChronoField chronoField43 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit44 = chronoField43.getBaseUnit();
        java.time.LocalDateTime localDateTime45 = localDateTime35.plus((long) 1970, temporalUnit44);
        java.time.ZoneOffset zoneOffset50 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime51 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset50);
        java.time.ZoneOffset zoneOffset55 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime56 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset55);
        java.time.ZonedDateTime zonedDateTime57 = java.time.ZonedDateTime.of(localDateTime51, (java.time.ZoneId) zoneOffset55);
        java.time.temporal.ChronoField chronoField59 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit60 = chronoField59.getBaseUnit();
        java.time.LocalDateTime localDateTime61 = localDateTime51.plus((long) 1970, temporalUnit60);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime62 = localDateTime45.minus((long) 43, temporalUnit60);
        java.time.Instant instant63 = instant29.plus((long) 16384, temporalUnit60);
        java.time.ZoneOffset zoneOffset67 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime68 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset67);
        java.time.ZoneOffset zoneOffset72 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime73 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset72);
        java.time.ZonedDateTime zonedDateTime74 = java.time.ZonedDateTime.of(localDateTime68, (java.time.ZoneId) zoneOffset72);
        java.time.ZonedDateTime zonedDateTime76 = zonedDateTime74.withHour(16);
        java.time.ZoneOffset zoneOffset80 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime81 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset80);
        java.time.ZoneOffset zoneOffset85 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime86 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset85);
        java.time.ZonedDateTime zonedDateTime87 = java.time.ZonedDateTime.of(localDateTime81, (java.time.ZoneId) zoneOffset85);
        java.time.ZonedDateTime zonedDateTime89 = zonedDateTime87.withYear((int) (short) 1);
        java.time.temporal.ChronoField chronoField90 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit91 = chronoField90.getBaseUnit();
        java.time.ZonedDateTime zonedDateTime92 = zonedDateTime87.truncatedTo(temporalUnit91);
        long long93 = instant29.until((java.time.temporal.Temporal) zonedDateTime76, temporalUnit91);
        int int94 = zonedDateTime76.getSecond();
        boolean boolean95 = zonedDateTime13.isAfter((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime76);
        org.junit.Assert.assertTrue("'" + chronoField0 + "' != '" + java.time.temporal.ChronoField.YEAR_OF_ERA + "'", chronoField0.equals(java.time.temporal.ChronoField.YEAR_OF_ERA));
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertNotNull(zonedDateTime13);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1970L + "'", long15 == 1970L);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1970 + "'", int21 == 1970);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(offsetDateTime28);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(zoneOffset39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(zonedDateTime41);
        org.junit.Assert.assertTrue("'" + chronoField43 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField43.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit44 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit44.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(zoneOffset50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(zoneOffset55);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(zonedDateTime57);
        org.junit.Assert.assertTrue("'" + chronoField59 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField59.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit60 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit60.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime62);
        org.junit.Assert.assertNotNull(instant63);
        org.junit.Assert.assertNotNull(zoneOffset67);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(zoneOffset72);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(zonedDateTime74);
        org.junit.Assert.assertNotNull(zonedDateTime76);
        org.junit.Assert.assertNotNull(zoneOffset80);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(zoneOffset85);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(zonedDateTime87);
        org.junit.Assert.assertNotNull(zonedDateTime89);
        org.junit.Assert.assertTrue("'" + chronoField90 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField90.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit91 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit91.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(zonedDateTime92);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 16L + "'", long93 == 16L);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 32 + "'", int94 == 32);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test2611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2611");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.DescriptorProtos.FieldOptions fieldOptions1 = com.google.protobuf.DescriptorProtos.FieldOptions.parseFrom(inputStream0);
        boolean boolean2 = fieldOptions1.hasExperimentalMapKey();
        com.google.protobuf.DescriptorProtos.FieldOptions.Builder builder3 = com.google.protobuf.DescriptorProtos.FieldOptions.newBuilder(fieldOptions1);
        com.google.javascript.jscomp.FunctionInformationMap.Module.Builder builder4 = com.google.javascript.jscomp.FunctionInformationMap.Module.newBuilder();
        java.lang.String str5 = builder4.getCompiledSource();
        boolean boolean6 = builder4.hasName();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder7 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder9 = builder7.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder10 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label11 = builder10.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder12 = builder7.addExtension(builder10);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder13 = builder7.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder14 = builder13.getOptionsBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder15 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder17 = builder15.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder18 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label19 = builder18.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder20 = builder15.addExtension(builder18);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder21 = builder15.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder22 = builder21.getOptionsBuilder();
        java.io.InputStream inputStream23 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions24 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream23);
        boolean boolean25 = enumOptions24.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder26 = builder22.mergeFrom(enumOptions24);
        com.google.protobuf.UnknownFieldSet unknownFieldSet27 = builder22.getUnknownFields();
        com.google.protobuf.CodedOutputStream codedOutputStream28 = null;
        unknownFieldSet27.writeTo(codedOutputStream28);
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder30 = builder14.setUnknownFields(unknownFieldSet27);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto31 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.getDefaultInstance();
        boolean boolean32 = methodDescriptorProto31.hasOutputType();
        byte[] byteArray33 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite34 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions35 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray33, extensionRegistryLite34);
        com.google.protobuf.CodedOutputStream codedOutputStream38 = com.google.protobuf.CodedOutputStream.newInstance(byteArray33, (int) (short) 0, 1);
        methodDescriptorProto31.writeTo(codedOutputStream38);
        unknownFieldSet27.writeTo(codedOutputStream38);
        com.google.javascript.jscomp.FunctionInformationMap.Module.Builder builder41 = builder4.setUnknownFields(unknownFieldSet27);
        boolean boolean43 = unknownFieldSet27.hasField(4096);
        com.google.protobuf.DescriptorProtos.FieldOptions.Builder builder44 = builder3.mergeUnknownFields(unknownFieldSet27);
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor45 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean46 = builder44.hasField(fieldDescriptor45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fieldOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + label11 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label11.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + label19 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label19.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(enumOptions24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(unknownFieldSet27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(methodDescriptorProto31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(methodOptions35);
        org.junit.Assert.assertNotNull(codedOutputStream38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test2612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2612");
        int[] intArray4 = new int[] { 16, ':', 43, (short) 100 };
        java.util.stream.IntStream intStream5 = java.util.stream.IntStream.of(intArray4);
        java.util.stream.IntStream intStream6 = intStream5.parallel();
        java.util.Spliterator.OfInt ofInt7 = intStream6.spliterator();
        boolean boolean9 = ofInt7.hasCharacteristics(0);
        int int10 = ofInt7.characteristics();
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[16, 58, 43, 100]");
        org.junit.Assert.assertNotNull(intStream5);
        org.junit.Assert.assertNotNull(intStream6);
        org.junit.Assert.assertNotNull(ofInt7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 17488 + "'", int10 == 17488);
    }

    @Test
    public void test2613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2613");
        com.google.javascript.jscomp.SourceAst sourceAst0 = null;
        com.google.javascript.rhino.InputId inputId1 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput3 = new com.google.javascript.jscomp.CompilerInput(sourceAst0, inputId1, true);
        java.io.PrintStream printStream4 = null;
        com.google.javascript.jscomp.Compiler compiler5 = new com.google.javascript.jscomp.Compiler(printStream4);
        com.google.javascript.jscomp.ErrorManager errorManager6 = compiler5.getErrorManager();
        compilerInput3.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler5);
        com.google.javascript.jscomp.type.ReverseAbstractInterpreter reverseAbstractInterpreter8 = compiler5.getReverseAbstractInterpreter();
        boolean boolean9 = compiler5.isIdeMode();
        org.junit.Assert.assertNotNull(errorManager6);
        org.junit.Assert.assertNotNull(reverseAbstractInterpreter8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test2614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2614");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("1970-03-24T02:02:32");
        java.util.Locale locale2 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.text.MessageFormat messageFormat5 = new java.text.MessageFormat("hi!");
        java.text.Format[] formatArray6 = messageFormat5.getFormatsByArgumentIndex();
        java.io.PrintWriter printWriter7 = printWriter1.format(locale2, "file", (java.lang.Object[]) formatArray6);
        java.io.PrintWriter printWriter9 = printWriter1.append('+');
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(formatArray6);
        org.junit.Assert.assertNotNull(printWriter7);
        org.junit.Assert.assertNotNull(printWriter9);
    }

    @Test
    public void test2615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2615");
        com.google.javascript.rhino.JSDocInfo.TypePosition typePosition0 = new com.google.javascript.rhino.JSDocInfo.TypePosition();
        typePosition0.setPositionInformation(50, 0, 50, 50);
        int int6 = typePosition0.getPositionOnStartLine();
        int int7 = typePosition0.getPositionOnStartLine();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test2616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2616");
        byte[] byteArray0 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions2 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray0, extensionRegistryLite1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite3 = null;
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto enumDescriptorProto4 = com.google.protobuf.DescriptorProtos.EnumDescriptorProto.parseFrom(byteArray0, extensionRegistryLite3);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder5 = enumDescriptorProto4.newBuilderForType();
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor6 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder7 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder9 = builder7.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder10 = builder9.clearSourceCodeInfo();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder11 = builder9.getSourceCodeInfoBuilder();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo sourceCodeInfo12 = builder11.getDefaultInstanceForType();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder13 = sourceCodeInfo12.newBuilderForType();
        java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite> priorityMap14 = new java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite>();
        java.lang.Object obj15 = priorityMap14.clone();
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder16 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.newBuilder();
        boolean boolean17 = priorityMap14.containsValue((java.lang.Object) builder16);
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder19 = builder16.setName("java.nio.ByteBufferAsDoubleBufferB[pos=0 lim=12 cap=12]");
        com.google.protobuf.ByteString byteString20 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder21 = builder16.mergeFrom(byteString20);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite22 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder23 = builder13.mergeFrom(byteString20, extensionRegistryLite22);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite24 = null;
        com.google.protobuf.DescriptorProtos.ServiceOptions serviceOptions25 = com.google.protobuf.DescriptorProtos.ServiceOptions.parseFrom(byteString20, extensionRegistryLite24);
        java.util.Map<com.google.protobuf.Descriptors.FieldDescriptor, java.lang.Object> fieldDescriptorMap26 = serviceOptions25.getAllFields();
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder27 = builder5.addRepeatedField(fieldDescriptor6, (java.lang.Object) serviceOptions25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(methodOptions2);
        org.junit.Assert.assertNotNull(enumDescriptorProto4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(sourceCodeInfo12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "{}");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(byteString20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(serviceOptions25);
        org.junit.Assert.assertNotNull(fieldDescriptorMap26);
    }

    @Test
    public void test2617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2617");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo sourceCodeInfo2 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.parseFrom(inputStream0, extensionRegistryLite1);
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder3 = sourceCodeInfo2.newBuilderForType();
        com.google.protobuf.UnknownFieldSet unknownFieldSet4 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder5 = builder3.setUnknownFields(unknownFieldSet4);
        java.util.Map<com.google.protobuf.Descriptors.FieldDescriptor, java.lang.Object> fieldDescriptorMap6 = builder3.getAllFields();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder7 = builder3.clearLocation();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.Builder builder8 = builder3.addLocationBuilder();
        // The following exception was thrown during execution in test generation
        try {
            int int10 = builder8.getSpan(42);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 42");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(sourceCodeInfo2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(fieldDescriptorMap6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test2618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2618");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo sourceCodeInfo2 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.parseFrom(inputStream0, extensionRegistryLite1);
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder3 = sourceCodeInfo2.newBuilderForType();
        com.google.protobuf.UnknownFieldSet unknownFieldSet4 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder5 = builder3.setUnknownFields(unknownFieldSet4);
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.Builder builder7 = builder3.addLocationBuilder(0);
        int int8 = builder7.getPathCount();
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj10 = builder7.getField(fieldDescriptor9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(sourceCodeInfo2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test2619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2619");
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto0 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.getDefaultInstance();
        boolean boolean1 = serviceDescriptorProto0.hasOptions();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder2 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.newBuilder(serviceDescriptorProto0);
        byte[] byteArray3 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite4 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions5 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray3, extensionRegistryLite4);
        com.google.protobuf.CodedInputStream codedInputStream8 = com.google.protobuf.CodedInputStream.newInstance(byteArray3, 16, (int) 'a');
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder9 = builder2.mergeFrom(byteArray3);
        java.util.List<com.google.protobuf.DescriptorProtos.MethodDescriptorProto> methodDescriptorProtoList10 = builder9.getMethodList();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder11 = builder9.clearMethod();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto12 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.getDefaultInstance();
        boolean boolean13 = serviceDescriptorProto12.hasOptions();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder14 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.newBuilder(serviceDescriptorProto12);
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto15 = builder14.buildPartial();
        com.google.protobuf.DescriptorProtos.ServiceOptions serviceOptions16 = builder14.getOptions();
        com.google.protobuf.DescriptorProtos.ServiceOptions.Builder builder17 = serviceOptions16.toBuilder();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder18 = builder11.setOptions(builder17);
        com.google.javascript.jscomp.CompilerOptions compilerOptions19 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions19.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat22 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions19.errorFormat = errorFormat22;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy24 = null;
        compilerOptions19.variableRenaming = variableRenamingPolicy24;
        compilerOptions19.setSummaryDetailLevel(999);
        compilerOptions19.setInlineVariables(true);
        byte[] byteArray30 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite31 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions32 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray30, extensionRegistryLite31);
        com.google.protobuf.CodedOutputStream codedOutputStream35 = com.google.protobuf.CodedOutputStream.newInstance(byteArray30, (int) (short) 0, 1);
        com.google.protobuf.CodedOutputStream codedOutputStream38 = com.google.protobuf.CodedOutputStream.newInstance(byteArray30, (int) ' ', 0);
        compilerOptions19.inputVariableMapSerialized = byteArray30;
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.ServiceOptions.Builder builder42 = builder17.mergeFrom(byteArray30, 10, (int) '/');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serviceDescriptorProto0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(methodOptions5);
        org.junit.Assert.assertNotNull(codedInputStream8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(methodDescriptorProtoList10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(serviceDescriptorProto12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(serviceDescriptorProto15);
        org.junit.Assert.assertNotNull(serviceOptions16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(errorFormat22);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[]");
        org.junit.Assert.assertNotNull(methodOptions32);
        org.junit.Assert.assertNotNull(codedOutputStream35);
        org.junit.Assert.assertNotNull(codedOutputStream38);
    }

    @Test
    public void test2620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2620");
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions fileOptions1 = builder0.getDefaultInstanceForType();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder3 = builder0.setPyGenericServices(false);
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder4 = builder3.clearJavaMultipleFiles();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder6 = builder4.setJavaGenerateEqualsAndHash(false);
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor7 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean8 = builder6.hasField(fieldDescriptor7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(fileOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test2621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2621");
        java.text.MessageFormat messageFormat1 = new java.text.MessageFormat("hi!");
        java.text.Format[] formatArray2 = messageFormat1.getFormatsByArgumentIndex();
        java.text.Format[] formatArray3 = messageFormat1.getFormats();
        java.text.Format[] formatArray4 = messageFormat1.getFormatsByArgumentIndex();
        com.google.javascript.jscomp.CompilerOptions compilerOptions5 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions5.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat8 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions5.errorFormat = errorFormat8;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy10 = null;
        compilerOptions5.variableRenaming = variableRenamingPolicy10;
        compilerOptions5.setSummaryDetailLevel(999);
        boolean boolean14 = compilerOptions5.getInferTypes();
        boolean boolean15 = compilerOptions5.ideMode;
        compilerOptions5.setGroupVariableDeclarations(true);
        compilerOptions5.coalesceVariableNames = false;
        compilerOptions5.setRuntimeTypeCheckLogFunction("java.nio.ByteBufferAsDoubleBufferB[pos=0 lim=12 cap=12]");
        compilerOptions5.setLocale("");
        // The following exception was thrown during execution in test generation
        try {
            java.text.AttributedCharacterIterator attributedCharacterIterator24 = messageFormat1.formatToCharacterIterator((java.lang.Object) compilerOptions5);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: com.google.javascript.jscomp.CompilerOptions cannot be cast to [Ljava.lang.Object;");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(formatArray2);
        org.junit.Assert.assertNotNull(formatArray3);
        org.junit.Assert.assertNotNull(formatArray4);
        org.junit.Assert.assertNotNull(errorFormat8);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test2622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2622");
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.ByteString.Output output1 = com.google.protobuf.ByteString.newOutput((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Negative initial size: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2623");
        byte[] byteArray0 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions2 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray0, extensionRegistryLite1);
        com.google.protobuf.CodedInputStream codedInputStream5 = com.google.protobuf.CodedInputStream.newInstance(byteArray0, 16, (int) 'a');
        codedInputStream5.resetSizeCounter();
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.UninterpretedOption uninterpretedOption7 = com.google.protobuf.DescriptorProtos.UninterpretedOption.parseFrom(codedInputStream5);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 16");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(methodOptions2);
        org.junit.Assert.assertNotNull(codedInputStream5);
    }

    @Test
    public void test2624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2624");
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.text.MessageFormat messageFormat2 = new java.text.MessageFormat("/tmp/hi!117357409022682367ISO", locale1);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
    }

    @Test
    public void test2625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2625");
        java.time.zone.ZoneOffsetTransitionRule.TimeDefinition timeDefinition0 = java.time.zone.ZoneOffsetTransitionRule.TimeDefinition.STANDARD;
        org.junit.Assert.assertTrue("'" + timeDefinition0 + "' != '" + java.time.zone.ZoneOffsetTransitionRule.TimeDefinition.STANDARD + "'", timeDefinition0.equals(java.time.zone.ZoneOffsetTransitionRule.TimeDefinition.STANDARD));
    }

    @Test
    public void test2626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2626");
        java.net.ContentHandlerFactory contentHandlerFactory0 = null;
        java.net.URLConnection.setContentHandlerFactory(contentHandlerFactory0);
    }

    @Test
    public void test2627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2627");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label1 = builder0.getLabel();
        java.io.InputStream inputStream2 = null;
        com.google.protobuf.MessageLite.Builder builder3 = builder0.mergeFrom(inputStream2);
        com.google.protobuf.UnknownFieldSet unknownFieldSet4 = null;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder5 = builder0.setUnknownFields(unknownFieldSet4);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder6 = builder5.clear();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder8 = builder5.setTypeName("");
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor9 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int10 = builder5.getRepeatedFieldCount(fieldDescriptor9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + label1 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label1.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test2628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2628");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.nio.file.attribute.FileTime fileTime1 = java.nio.file.attribute.FileTime.from(instant0);
        java.time.Instant instant3 = java.time.Instant.ofEpochSecond((long) (-1));
        java.time.Instant instant5 = instant3.plusMillis((long) (byte) -1);
        boolean boolean6 = instant0.isBefore(instant5);
        java.time.Instant instant8 = instant0.plusNanos(1645437726000L);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(fileTime1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(instant8);
    }

    @Test
    public void test2629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2629");
        byte[] byteArray5 = new byte[] { (byte) 1, (byte) 1, (byte) 1, (byte) -1, (byte) 10 };
        com.google.protobuf.CodedInputStream codedInputStream8 = com.google.protobuf.CodedInputStream.newInstance(byteArray5, 39, (int) '+');
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.UninterpretedOption uninterpretedOption9 = com.google.protobuf.DescriptorProtos.UninterpretedOption.parseFrom(codedInputStream8);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 39");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[1, 1, 1, -1, 10]");
        org.junit.Assert.assertNotNull(codedInputStream8);
    }

    @Test
    public void test2630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2630");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.optimizeCalls = false;
        compilerOptions0.preferLineBreakAtEndOfFile = false;
        boolean boolean5 = compilerOptions0.markNoSideEffectCalls;
        compilerOptions0.setMoveFunctionDeclarations(true);
        com.google.javascript.jscomp.SourceAst sourceAst8 = null;
        com.google.javascript.rhino.InputId inputId9 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput11 = new com.google.javascript.jscomp.CompilerInput(sourceAst8, inputId9, true);
        java.io.PrintStream printStream12 = null;
        com.google.javascript.jscomp.Compiler compiler13 = new com.google.javascript.jscomp.Compiler(printStream12);
        com.google.javascript.jscomp.ErrorManager errorManager14 = compiler13.getErrorManager();
        compilerInput11.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler13);
        com.google.javascript.jscomp.Scope scope16 = compiler13.getTopScope();
        java.io.PrintStream printStream17 = null;
        com.google.javascript.jscomp.Compiler compiler18 = new com.google.javascript.jscomp.Compiler(printStream17);
        com.google.javascript.jscomp.ErrorManager errorManager19 = compiler18.getErrorManager();
        com.google.javascript.jscomp.ErrorManager errorManager20 = compiler18.getErrorManager();
        compiler13.setErrorManager(errorManager20);
        com.google.javascript.jscomp.JSError[] jSErrorArray22 = errorManager20.getErrors();
        compilerOptions0.setErrorHandler((com.google.javascript.jscomp.ErrorHandler) errorManager20);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(errorManager14);
        org.junit.Assert.assertNull(scope16);
        org.junit.Assert.assertNotNull(errorManager19);
        org.junit.Assert.assertNotNull(errorManager20);
        org.junit.Assert.assertNotNull(jSErrorArray22);
    }

    @Test
    public void test2631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2631");
        java.time.DayOfWeek dayOfWeek0 = java.time.DayOfWeek.FRIDAY;
        java.time.DayOfWeek dayOfWeek2 = dayOfWeek0.minus((long) ':');
        java.time.format.TextStyle textStyle3 = java.time.format.TextStyle.FULL;
        java.util.Locale.Category category4 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale5 = java.util.Locale.getDefault(category4);
        java.lang.String str6 = dayOfWeek2.getDisplayName(textStyle3, locale5);
        java.time.Instant instant7 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset11 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset11);
        java.time.OffsetDateTime offsetDateTime13 = java.time.OffsetDateTime.ofInstant(instant7, (java.time.ZoneId) zoneOffset11);
        java.time.OffsetDateTime offsetDateTime15 = offsetDateTime13.minusDays((long) (short) 100);
        java.lang.String str16 = offsetDateTime13.toString();
        java.time.temporal.ChronoField chronoField17 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        int int18 = offsetDateTime13.get((java.time.temporal.TemporalField) chronoField17);
        boolean boolean19 = dayOfWeek2.isSupported((java.time.temporal.TemporalField) chronoField17);
        org.junit.Assert.assertTrue("'" + dayOfWeek0 + "' != '" + java.time.DayOfWeek.FRIDAY + "'", dayOfWeek0.equals(java.time.DayOfWeek.FRIDAY));
        org.junit.Assert.assertTrue("'" + dayOfWeek2 + "' != '" + java.time.DayOfWeek.WEDNESDAY + "'", dayOfWeek2.equals(java.time.DayOfWeek.WEDNESDAY));
        org.junit.Assert.assertTrue("'" + textStyle3 + "' != '" + java.time.format.TextStyle.FULL + "'", textStyle3.equals(java.time.format.TextStyle.FULL));
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.FORMAT + "'", category4.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale5);
// flaky:         org.junit.Assert.assertEquals(locale5.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\uc218\uc694\uc77c" + "'", str6, "\uc218\uc694\uc77c");
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(zoneOffset11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(offsetDateTime13);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01T00:00:52+00:00:52" + "'", str16, "1970-01-01T00:00:52+00:00:52");
        org.junit.Assert.assertTrue("'" + chronoField17 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField17.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 12 + "'", int18 == 12);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test2632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2632");
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions0 = com.google.protobuf.DescriptorProtos.EnumValueOptions.getDefaultInstance();
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder1 = com.google.protobuf.DescriptorProtos.EnumValueOptions.newBuilder(enumValueOptions0);
        com.google.javascript.jscomp.CompilerOptions compilerOptions2 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions2.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat5 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions2.errorFormat = errorFormat5;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy7 = null;
        compilerOptions2.variableRenaming = variableRenamingPolicy7;
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode9 = compilerOptions2.getTracerMode();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder10 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder12 = builder10.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder13 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label14 = builder13.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder15 = builder10.addExtension(builder13);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder16 = builder10.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder17 = builder16.getOptionsBuilder();
        java.io.InputStream inputStream18 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions19 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream18);
        boolean boolean20 = enumOptions19.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder21 = builder17.mergeFrom(enumOptions19);
        byte[] byteArray22 = enumOptions19.toByteArray();
        compilerOptions2.setInputPropertyMapSerialized(byteArray22);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite24 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo sourceCodeInfo25 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.parseFrom(byteArray22, extensionRegistryLite24);
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder26 = builder1.mergeFrom(byteArray22);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder27 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder29 = builder27.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder30 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label31 = builder30.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder32 = builder27.addExtension(builder30);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder33 = builder27.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder34 = builder33.getOptionsBuilder();
        java.io.InputStream inputStream35 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions36 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream35);
        boolean boolean37 = enumOptions36.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder38 = builder34.mergeFrom(enumOptions36);
        com.google.protobuf.UnknownFieldSet unknownFieldSet39 = builder34.getUnknownFields();
        byte[] byteArray40 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite41 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions42 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray40, extensionRegistryLite41);
        com.google.protobuf.CodedOutputStream codedOutputStream45 = com.google.protobuf.CodedOutputStream.newInstance(byteArray40, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite46 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto47 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray40, extensionRegistryLite46);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite48 = null;
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto49 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.parseFrom(byteArray40, extensionRegistryLite48);
        com.google.protobuf.UnknownFieldSet unknownFieldSet50 = com.google.protobuf.UnknownFieldSet.parseFrom(byteArray40);
        com.google.protobuf.ByteString byteString51 = unknownFieldSet50.toByteString();
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite52 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder53 = builder34.mergeFrom(byteString51, extensionRegistryLite52);
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder54 = builder1.mergeFrom(byteString51);
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder55 = builder54.clear();
        org.junit.Assert.assertNotNull(enumValueOptions0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(errorFormat5);
        org.junit.Assert.assertTrue("'" + tracerMode9 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode9.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + label14 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label14.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(enumOptions19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(sourceCodeInfo25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + label31 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label31.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(enumOptions36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(unknownFieldSet39);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(methodOptions42);
        org.junit.Assert.assertNotNull(codedOutputStream45);
        org.junit.Assert.assertNotNull(fileDescriptorProto47);
        org.junit.Assert.assertNotNull(serviceDescriptorProto49);
        org.junit.Assert.assertNotNull(unknownFieldSet50);
        org.junit.Assert.assertNotNull(byteString51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
    }

    @Test
    public void test2633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2633");
        com.google.javascript.jscomp.SourceFile sourceFile3 = com.google.javascript.jscomp.SourceFile.fromCode("\ub300\ud55c\ubbfc\uad6d", "1970-01-01T00:00:00.000000032Z", "/tmp/hi!3925862994319982200ISO");
        org.junit.Assert.assertNotNull(sourceFile3);
    }

    @Test
    public void test2634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2634");
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        boolean boolean6 = strSet4.isEmpty();
        java.nio.ByteBuffer byteBuffer8 = java.nio.ByteBuffer.allocate(100);
        boolean boolean9 = strSet4.equals((java.lang.Object) byteBuffer8);
        java.nio.CharBuffer charBuffer10 = byteBuffer8.asCharBuffer();
        java.nio.ByteBuffer byteBuffer11 = byteBuffer8.asReadOnlyBuffer();
        com.google.javascript.rhino.Node node16 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean17 = node16.isStringKey();
        boolean boolean18 = node16.isThrow();
        boolean boolean19 = node16.isVarArgs();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean24 = node23.isFromExterns();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean29 = node28.isFromExterns();
        java.lang.String str30 = node28.toString();
        com.google.javascript.rhino.Node node31 = node23.copyInformationFrom(node28);
        com.google.javascript.rhino.Node node35 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean36 = node35.isStringKey();
        boolean boolean37 = node35.isThrow();
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean42 = node41.isStringKey();
        com.google.javascript.rhino.Node node45 = new com.google.javascript.rhino.Node((-1), node16, node28, node35, node41, 16384, 16);
        boolean boolean46 = node28.isWhile();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        com.google.javascript.rhino.Node node51 = node50.getLastChild();
        com.google.javascript.rhino.Node node52 = node28.copyInformationFromForTree(node50);
        com.google.javascript.rhino.Node node56 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean57 = node56.isVar();
        com.google.javascript.rhino.Node node61 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean62 = node61.isStringKey();
        boolean boolean63 = node61.isThrow();
        boolean boolean64 = node61.isVarArgs();
        boolean boolean65 = node61.isHook();
        com.google.javascript.rhino.Node node66 = node61.cloneNode();
        com.google.javascript.rhino.Node node67 = node56.useSourceInfoIfMissingFromForTree(node66);
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean72 = node71.isFromExterns();
        com.google.javascript.rhino.Node node76 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean77 = node76.isFromExterns();
        java.lang.String str78 = node76.toString();
        com.google.javascript.rhino.Node node79 = node71.copyInformationFrom(node76);
        int int80 = node71.getLineno();
        boolean boolean81 = node71.isLabel();
        java.lang.String str82 = node71.getSourceFileName();
        boolean boolean83 = node71.isDec();
        com.google.javascript.rhino.Node node84 = node66.useSourceInfoFrom(node71);
        node52.addChildToFront(node84);
        boolean boolean86 = byteBuffer8.equals((java.lang.Object) node84);
        java.nio.ByteBuffer byteBuffer88 = java.nio.ByteBuffer.allocate(100);
        int int89 = byteBuffer8.compareTo(byteBuffer88);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(charBuffer10);
        org.junit.Assert.assertNotNull(byteBuffer11);
        org.junit.Assert.assertNotNull(node16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "NUMBER 52.0 0" + "'", str30, "NUMBER 52.0 0");
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertNotNull(node35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertNull(node51);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertNotNull(node56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(node61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(node66);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(node76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "NUMBER 52.0 0" + "'", str78, "NUMBER 52.0 0");
        org.junit.Assert.assertNotNull(node79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(node84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(byteBuffer88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test2635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2635");
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto1 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.getDefaultInstance();
        int int2 = com.google.protobuf.CodedOutputStream.computeMessageSetExtensionSize((int) (byte) -1, (com.google.protobuf.MessageLite) methodDescriptorProto1);
        com.google.protobuf.CodedOutputStream codedOutputStream3 = null;
        methodDescriptorProto1.writeTo(codedOutputStream3);
        java.lang.String str5 = methodDescriptorProto1.getName();
        int int6 = methodDescriptorProto1.getSerializedSize();
        org.junit.Assert.assertNotNull(methodDescriptorProto1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test2636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2636");
        java.io.PrintStream printStream0 = null;
        com.google.javascript.jscomp.Compiler compiler1 = new com.google.javascript.jscomp.Compiler(printStream0);
        com.google.javascript.jscomp.ErrorManager errorManager2 = compiler1.getErrorManager();
        com.google.javascript.jscomp.JSError[] jSErrorArray3 = compiler1.getErrors();
        com.google.javascript.jscomp.PerformanceTracker performanceTracker4 = null;
        compiler1.tracker = performanceTracker4;
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean10 = node9.isFromExterns();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean15 = node14.isFromExterns();
        java.lang.String str16 = node14.toString();
        com.google.javascript.rhino.Node node17 = node9.copyInformationFrom(node14);
        int int18 = node9.getLineno();
        boolean boolean19 = node9.isLabel();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean24 = node23.isStringKey();
        boolean boolean25 = node23.isTrue();
        com.google.javascript.rhino.InputId inputId27 = new com.google.javascript.rhino.InputId("NUMBER 52.0 0");
        node23.setInputId(inputId27);
        node9.setInputId(inputId27);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CompilerInput compilerInput30 = compiler1.getInput(inputId27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(errorManager2);
        org.junit.Assert.assertNotNull(jSErrorArray3);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "NUMBER 52.0 0" + "'", str16, "NUMBER 52.0 0");
        org.junit.Assert.assertNotNull(node17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test2637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2637");
        java.io.File file2 = null;
        java.io.File file3 = java.io.File.createTempFile("hi!", "ISO", file2);
        boolean boolean6 = file3.setWritable(false, false);
        java.net.URI uRI7 = file3.toURI();
        java.io.PrintStream printStream8 = new java.io.PrintStream(file3);
        boolean boolean10 = file3.setReadable(true);
        boolean boolean11 = file3.setReadOnly();
        boolean boolean12 = file3.createNewFile();
        boolean boolean13 = file3.canExecute();
        java.nio.charset.Charset charset14 = java.nio.charset.Charset.defaultCharset();
        com.google.javascript.jscomp.JSSourceFile jSSourceFile15 = com.google.javascript.jscomp.JSSourceFile.fromFile(file3, charset14);
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file3.toString(), "/tmp/hi!4794199220164343237ISO");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(uRI7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertNotNull(jSSourceFile15);
    }

    @Test
    public void test2638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2638");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean4 = node3.isVar();
        com.google.javascript.rhino.Node node8 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean9 = node8.isStringKey();
        boolean boolean10 = node8.isThrow();
        boolean boolean11 = node8.isVarArgs();
        boolean boolean12 = node8.isHook();
        com.google.javascript.rhino.Node node13 = node8.cloneNode();
        com.google.javascript.rhino.Node node14 = node3.useSourceInfoIfMissingFromForTree(node13);
        com.google.javascript.rhino.Node node18 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean19 = node18.isFromExterns();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean24 = node23.isFromExterns();
        java.lang.String str25 = node23.toString();
        com.google.javascript.rhino.Node node26 = node18.copyInformationFrom(node23);
        int int27 = node18.getLineno();
        boolean boolean28 = node18.isLabel();
        java.lang.String str29 = node18.getSourceFileName();
        boolean boolean30 = node18.isDec();
        com.google.javascript.rhino.Node node31 = node13.useSourceInfoFrom(node18);
        boolean boolean32 = node13.isFor();
        boolean boolean33 = node13.isQuotedString();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(node13);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertNotNull(node18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "NUMBER 52.0 0" + "'", str25, "NUMBER 52.0 0");
        org.junit.Assert.assertNotNull(node26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(node31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test2639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2639");
        com.google.protobuf.UnknownFieldSet.Builder builder0 = com.google.protobuf.UnknownFieldSet.newBuilder();
        boolean boolean2 = builder0.hasField(7);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = builder3.addDependency("Named type with empty name component");
        boolean boolean6 = builder3.hasPackage();
        boolean boolean7 = builder3.hasPackage();
        byte[] byteArray8 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite9 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions10 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray8, extensionRegistryLite9);
        com.google.protobuf.CodedOutputStream codedOutputStream13 = com.google.protobuf.CodedOutputStream.newInstance(byteArray8, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite14 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto15 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray8, extensionRegistryLite14);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite16 = null;
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto17 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.parseFrom(byteArray8, extensionRegistryLite16);
        com.google.protobuf.UnknownFieldSet unknownFieldSet18 = com.google.protobuf.UnknownFieldSet.parseFrom(byteArray8);
        com.google.protobuf.Message.Builder builder19 = builder3.setUnknownFields(unknownFieldSet18);
        com.google.protobuf.UnknownFieldSet.Builder builder20 = builder0.mergeFrom(unknownFieldSet18);
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder22 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder23 = builder22.clearCcGenericServices();
        boolean boolean24 = builder22.isInitialized();
        boolean boolean25 = builder22.getJavaGenericServices();
        java.util.List<com.google.protobuf.DescriptorProtos.UninterpretedOption> uninterpretedOptionList26 = builder22.getUninterpretedOptionList();
        boolean boolean27 = builder22.hasJavaGenericServices();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder28 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder30 = builder28.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder31 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label32 = builder31.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder33 = builder28.addExtension(builder31);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder34 = builder28.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder35 = builder34.getOptionsBuilder();
        java.io.InputStream inputStream36 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions37 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream36);
        boolean boolean38 = enumOptions37.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder39 = builder35.mergeFrom(enumOptions37);
        com.google.protobuf.UnknownFieldSet unknownFieldSet40 = builder35.getUnknownFields();
        com.google.protobuf.CodedOutputStream codedOutputStream41 = null;
        unknownFieldSet40.writeTo(codedOutputStream41);
        byte[] byteArray43 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite44 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions45 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray43, extensionRegistryLite44);
        com.google.protobuf.CodedOutputStream codedOutputStream48 = com.google.protobuf.CodedOutputStream.newInstance(byteArray43, (int) (short) 0, 1);
        com.google.protobuf.CodedOutputStream codedOutputStream51 = com.google.protobuf.CodedOutputStream.newInstance(byteArray43, (int) ' ', 0);
        java.io.InputStream inputStream52 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location53 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream52);
        boolean boolean54 = location53.isInitialized();
        codedOutputStream51.writeGroupNoTag((com.google.protobuf.MessageLite) location53);
        unknownFieldSet40.writeAsMessageSetTo(codedOutputStream51);
        java.util.Map<java.lang.Integer, com.google.protobuf.UnknownFieldSet.Field> intMap57 = unknownFieldSet40.asMap();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder58 = builder22.setUnknownFields(unknownFieldSet40);
        com.google.protobuf.UnknownFieldSet.Field field60 = unknownFieldSet40.getField(32);
        com.google.protobuf.UnknownFieldSet.Field.Builder builder61 = com.google.protobuf.UnknownFieldSet.Field.newBuilder(field60);
        com.google.protobuf.UnknownFieldSet.Builder builder62 = builder0.mergeField((-2), field60);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(methodOptions10);
        org.junit.Assert.assertNotNull(codedOutputStream13);
        org.junit.Assert.assertNotNull(fileDescriptorProto15);
        org.junit.Assert.assertNotNull(serviceDescriptorProto17);
        org.junit.Assert.assertNotNull(unknownFieldSet18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(uninterpretedOptionList26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + label32 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label32.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(enumOptions37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(unknownFieldSet40);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(methodOptions45);
        org.junit.Assert.assertNotNull(codedOutputStream48);
        org.junit.Assert.assertNotNull(codedOutputStream51);
        org.junit.Assert.assertNotNull(location53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(intMap57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(field60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test2640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2640");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.OffsetDateTime offsetDateTime8 = offsetDateTime6.minusDays((long) (short) 100);
        java.lang.String str9 = offsetDateTime6.toString();
        java.time.ZoneOffset zoneOffset10 = offsetDateTime6.getOffset();
        java.time.LocalTime localTime11 = offsetDateTime6.toLocalTime();
        java.time.LocalDateTime localDateTime12 = offsetDateTime6.toLocalDateTime();
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset16);
        int int18 = localDateTime17.getYear();
        java.time.LocalDate localDate19 = localDateTime17.toLocalDate();
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset23);
        java.time.ZoneOffset zoneOffset28 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset28);
        java.time.ZonedDateTime zonedDateTime30 = java.time.ZonedDateTime.of(localDateTime24, (java.time.ZoneId) zoneOffset28);
        java.time.temporal.ChronoField chronoField32 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit33 = chronoField32.getBaseUnit();
        java.time.LocalDateTime localDateTime34 = localDateTime24.plus((long) 1970, temporalUnit33);
        java.time.LocalTime localTime35 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localDateTime34);
        java.time.ZoneOffset zoneOffset39 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime40 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset39);
        java.time.OffsetDateTime offsetDateTime41 = java.time.OffsetDateTime.of(localDate19, localTime35, zoneOffset39);
        com.google.javascript.rhino.Node node45 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean46 = node45.isFromExterns();
        com.google.javascript.rhino.Node node50 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean51 = node50.isFromExterns();
        java.lang.String str52 = node50.toString();
        com.google.javascript.rhino.Node node53 = node45.copyInformationFrom(node50);
        boolean boolean54 = zoneOffset39.equals((java.lang.Object) node50);
        java.time.Instant instant55 = localDateTime12.toInstant(zoneOffset39);
        java.time.temporal.ChronoField chronoField56 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        // The following exception was thrown during execution in test generation
        try {
            int int57 = zoneOffset39.get((java.time.temporal.TemporalField) chronoField56);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: SecondOfDay");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(offsetDateTime8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-01T00:00:52+00:00:52" + "'", str9, "1970-01-01T00:00:52+00:00:52");
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zonedDateTime30);
        org.junit.Assert.assertTrue("'" + chronoField32 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField32.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit33 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit33.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(zoneOffset39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(offsetDateTime41);
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(node50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "NUMBER 52.0 0" + "'", str52, "NUMBER 52.0 0");
        org.junit.Assert.assertNotNull(node53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertTrue("'" + chronoField56 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField56.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
    }

    @Test
    public void test2641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2641");
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions fileOptions1 = builder0.getDefaultInstanceForType();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder3 = builder0.setPyGenericServices(false);
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder4 = builder3.clearJavaMultipleFiles();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder6 = builder4.setJavaGenerateEqualsAndHash(false);
        boolean boolean7 = builder6.getPyGenericServices();
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder8 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output10 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream12 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output10, (int) 'a');
        byte[] byteArray13 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite14 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions15 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray13, extensionRegistryLite14);
        output10.write(byteArray13);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder17 = builder8.mergeFrom(byteArray13);
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions18 = builder8.buildPartial();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder19 = builder8.addUninterpretedOptionBuilder();
        boolean boolean20 = builder19.hasNegativeIntValue();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder21 = builder6.addUninterpretedOption(builder19);
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder23 = builder21.setJavaOuterClassname("\ub300\ud55c\ubbfc\uad6d");
        java.io.InputStream inputStream24 = null;
        com.google.protobuf.Message.Builder builder25 = builder23.mergeFrom(inputStream24);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(fileOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(output10);
        org.junit.Assert.assertNotNull(codedOutputStream12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(methodOptions15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(methodOptions18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test2642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2642");
        java.io.InputStream inputStream0 = null;
        byte[] byteArray1 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite2 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions3 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray1, extensionRegistryLite2);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite4 = null;
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto enumDescriptorProto5 = com.google.protobuf.DescriptorProtos.EnumDescriptorProto.parseFrom(byteArray1, extensionRegistryLite4);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite6 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions7 = com.google.protobuf.DescriptorProtos.EnumValueOptions.parseFrom(byteArray1, extensionRegistryLite6);
        com.google.javascript.jscomp.FunctionInformationMap.Module.Builder builder8 = com.google.javascript.jscomp.FunctionInformationMap.Module.newBuilder();
        java.lang.String str9 = builder8.getCompiledSource();
        java.io.InputStream inputStream10 = null;
        byte[] byteArray11 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite12 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions13 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray11, extensionRegistryLite12);
        com.google.protobuf.DescriptorProtos.UninterpretedOption uninterpretedOption14 = com.google.protobuf.DescriptorProtos.UninterpretedOption.parseFrom(byteArray11);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder15 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label16 = builder15.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto17 = builder15.buildPartial();
        int int18 = fieldDescriptorProto17.getSerializedSize();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder19 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto17);
        java.io.InputStream inputStream20 = null;
        java.io.InputStream inputStream21 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite22 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location23 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream21, extensionRegistryLite22);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder24 = builder19.mergeFrom(inputStream20, extensionRegistryLite22);
        com.google.javascript.jscomp.FunctionInformationMap functionInformationMap25 = com.google.javascript.jscomp.FunctionInformationMap.parseFrom(byteArray11, extensionRegistryLite22);
        com.google.javascript.jscomp.FunctionInformationMap.Module.Builder builder26 = builder8.mergeFrom(inputStream10, extensionRegistryLite22);
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions27 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray1, extensionRegistryLite22);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.MessageOptions messageOptions28 = com.google.protobuf.DescriptorProtos.MessageOptions.parseDelimitedFrom(inputStream0, extensionRegistryLite22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertNotNull(methodOptions3);
        org.junit.Assert.assertNotNull(enumDescriptorProto5);
        org.junit.Assert.assertNotNull(enumValueOptions7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(methodOptions13);
        org.junit.Assert.assertNotNull(uninterpretedOption14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + label16 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label16.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(extensionRegistryLite22);
        org.junit.Assert.assertNotNull(location23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(functionInformationMap25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(methodOptions27);
    }

    @Test
    public void test2643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2643");
        java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite> priorityMap0 = new java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite>();
        java.lang.Object obj1 = priorityMap0.clone();
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder2 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.newBuilder();
        boolean boolean3 = priorityMap0.containsValue((java.lang.Object) builder2);
        int int4 = builder2.getNumber();
        byte[] byteArray5 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite6 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions7 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray5, extensionRegistryLite6);
        com.google.protobuf.CodedInputStream codedInputStream10 = com.google.protobuf.CodedInputStream.newInstance(byteArray5, 16, (int) 'a');
        com.google.javascript.jscomp.VariableMap variableMap11 = com.google.javascript.jscomp.VariableMap.fromBytes(byteArray5);
        byte[] byteArray12 = variableMap11.toBytes();
        byte[] byteArray13 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite14 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions15 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray13, extensionRegistryLite14);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite16 = null;
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto enumDescriptorProto17 = com.google.protobuf.DescriptorProtos.EnumDescriptorProto.parseFrom(byteArray13, extensionRegistryLite16);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder18 = enumDescriptorProto17.newBuilderForType();
        com.google.protobuf.Descriptors.Descriptor descriptor19 = builder18.getDescriptorForType();
        boolean boolean20 = builder18.hasName();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder21 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder22 = builder21.clearCcGenericServices();
        boolean boolean23 = builder21.isInitialized();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder25 = builder21.setCcGenericServices(true);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder26 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label27 = builder26.getLabel();
        com.google.protobuf.ByteString byteString28 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder29 = builder26.mergeFrom(byteString28);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite30 = null;
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder31 = builder25.mergeFrom(byteString28, extensionRegistryLite30);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite32 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions33 = com.google.protobuf.DescriptorProtos.EnumValueOptions.parseFrom(byteString28, extensionRegistryLite32);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite34 = null;
        com.google.protobuf.DescriptorProtos.MessageOptions messageOptions35 = com.google.protobuf.DescriptorProtos.MessageOptions.parseFrom(byteString28, extensionRegistryLite34);
        com.google.protobuf.ByteString byteString36 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite37 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions38 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(byteString36, extensionRegistryLite37);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder39 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label40 = builder39.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto41 = builder39.buildPartial();
        int int42 = fieldDescriptorProto41.getSerializedSize();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder43 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto41);
        java.io.InputStream inputStream44 = null;
        java.io.InputStream inputStream45 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite46 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location47 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream45, extensionRegistryLite46);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder48 = builder43.mergeFrom(inputStream44, extensionRegistryLite46);
        com.google.javascript.jscomp.FunctionInformationMap functionInformationMap49 = com.google.javascript.jscomp.FunctionInformationMap.parseFrom(byteString36, extensionRegistryLite46);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder50 = builder18.mergeFrom(byteString28, extensionRegistryLite46);
        com.google.protobuf.DescriptorProtos.UninterpretedOption uninterpretedOption51 = com.google.protobuf.DescriptorProtos.UninterpretedOption.parseFrom(byteArray12, extensionRegistryLite46);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder54 = builder2.mergeFrom(byteArray12, 97, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "{}");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(methodOptions7);
        org.junit.Assert.assertNotNull(codedInputStream10);
        org.junit.Assert.assertNotNull(variableMap11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(methodOptions15);
        org.junit.Assert.assertNotNull(enumDescriptorProto17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(descriptor19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + label27 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label27.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(byteString28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(enumValueOptions33);
        org.junit.Assert.assertNotNull(messageOptions35);
        org.junit.Assert.assertNotNull(byteString36);
        org.junit.Assert.assertNotNull(enumOptions38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + label40 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label40.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(extensionRegistryLite46);
        org.junit.Assert.assertNotNull(location47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(functionInformationMap49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(uninterpretedOption51);
    }

    @Test
    public void test2644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2644");
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions0 = com.google.protobuf.DescriptorProtos.EnumOptions.getDefaultInstance();
        java.util.Map<com.google.protobuf.Descriptors.FieldDescriptor, java.lang.Object> fieldDescriptorMap1 = enumOptions0.getAllFields();
        org.junit.Assert.assertNotNull(enumOptions0);
        org.junit.Assert.assertNotNull(fieldDescriptorMap1);
    }

    @Test
    public void test2645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2645");
        int[] intArray4 = new int[] { 16, ':', 43, (short) 100 };
        java.util.stream.IntStream intStream5 = java.util.stream.IntStream.of(intArray4);
        int[] intArray6 = intStream5.toArray();
        java.nio.IntBuffer intBuffer7 = java.nio.IntBuffer.wrap(intArray6);
        java.util.stream.IntStream intStream8 = java.util.stream.IntStream.of(intArray6);
        java.util.stream.Stream<java.lang.Integer> intStream9 = intStream8.boxed();
        // The following exception was thrown during execution in test generation
        try {
            java.util.OptionalInt optionalInt10 = intStream8.findAny();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[16, 58, 43, 100]");
        org.junit.Assert.assertNotNull(intStream5);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[16, 58, 43, 100]");
        org.junit.Assert.assertNotNull(intBuffer7);
        org.junit.Assert.assertNotNull(intStream8);
        org.junit.Assert.assertNotNull(intStream9);
    }

    @Test
    public void test2646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2646");
        java.io.InputStream inputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.MessageOptions messageOptions1 = com.google.protobuf.DescriptorProtos.MessageOptions.parseDelimitedFrom(inputStream0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2647");
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto0 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.getDefaultInstance();
        boolean boolean1 = serviceDescriptorProto0.hasOptions();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder2 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.newBuilder(serviceDescriptorProto0);
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto3 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.getDefaultInstance();
        boolean boolean4 = serviceDescriptorProto3.hasOptions();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder5 = builder2.mergeFrom(serviceDescriptorProto3);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto7 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.getDefaultInstance();
        boolean boolean8 = methodDescriptorProto7.hasOutputType();
        com.google.protobuf.CodedOutputStream codedOutputStream9 = null;
        methodDescriptorProto7.writeTo(codedOutputStream9);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder11 = methodDescriptorProto7.toBuilder();
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder13 = builder11.setOutputType("java.nio.HeapFloatBuffer[pos=0 lim=6 cap=6]");
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder14 = builder11.clearInputType();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder15 = builder2.addMethod(0, builder14);
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder16 = builder2.clearOptions();
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor17 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int18 = builder16.getRepeatedFieldCount(fieldDescriptor17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serviceDescriptorProto0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(serviceDescriptorProto3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(methodDescriptorProto7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test2648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2648");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        java.time.Instant instant1 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset5);
        java.time.OffsetDateTime offsetDateTime7 = java.time.OffsetDateTime.ofInstant(instant1, (java.time.ZoneId) zoneOffset5);
        java.time.ZoneOffset zoneOffset11 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset11);
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset16);
        java.time.ZonedDateTime zonedDateTime18 = java.time.ZonedDateTime.of(localDateTime12, (java.time.ZoneId) zoneOffset16);
        java.time.Clock clock19 = java.time.Clock.fixed(instant1, (java.time.ZoneId) zoneOffset16);
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.now(clock19);
        java.time.LocalDate localDate21 = java.time.LocalDate.now(clock19);
        com.google.protobuf.Descriptors.Descriptor descriptor22 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto23 = descriptor22.toProto();
        boolean boolean24 = descriptorProto23.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList25 = descriptorProto23.getNestedTypeList();
        int int26 = descriptorProto23.getExtensionRangeCount();
        boolean boolean27 = localDate21.equals((java.lang.Object) descriptorProto23);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder28 = descriptorProto23.newBuilderForType();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList29 = builder28.getNestedTypeList();
        com.google.protobuf.UnknownFieldSet unknownFieldSet30 = builder28.getUnknownFields();
        com.google.protobuf.DescriptorProtos.MessageOptions messageOptions31 = builder28.getOptions();
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder32 = builder28.clone();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder33 = builder0.addMessageType(builder32);
        java.util.List<com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder> builderList34 = builder0.getServiceBuilderList();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder35 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label36 = builder35.getLabel();
        java.io.InputStream inputStream37 = null;
        com.google.protobuf.MessageLite.Builder builder38 = builder35.mergeFrom(inputStream37);
        com.google.protobuf.UnknownFieldSet unknownFieldSet39 = null;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder40 = builder35.setUnknownFields(unknownFieldSet39);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder41 = builder40.clear();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder42 = builder41.clear();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder43 = builder0.addExtension(builder42);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zonedDateTime18);
        org.junit.Assert.assertNotNull(clock19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(descriptor22);
        org.junit.Assert.assertNotNull(descriptorProto23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(descriptorProtoList29);
        org.junit.Assert.assertNotNull(unknownFieldSet30);
        org.junit.Assert.assertNotNull(messageOptions31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builderList34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + label36 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label36.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test2649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2649");
        java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite> priorityMap0 = new java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite>();
        java.lang.Object obj1 = priorityMap0.clone();
        boolean boolean2 = priorityMap0.isEmpty();
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup3 = com.google.javascript.jscomp.DiagnosticGroups.INVALID_CASTS;
        com.google.javascript.jscomp.DiagnosticGroups.MISSING_PROPERTIES = diagnosticGroup3;
        com.google.protobuf.MessageLite messageLite5 = priorityMap0.remove((java.lang.Object) diagnosticGroup3);
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(diagnosticGroup3);
        org.junit.Assert.assertNull(messageLite5);
    }

    @Test
    public void test2650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2650");
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto0 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.getDefaultInstance();
        boolean boolean1 = serviceDescriptorProto0.hasOptions();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder2 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.newBuilder(serviceDescriptorProto0);
        byte[] byteArray3 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite4 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions5 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray3, extensionRegistryLite4);
        com.google.protobuf.CodedInputStream codedInputStream8 = com.google.protobuf.CodedInputStream.newInstance(byteArray3, 16, (int) 'a');
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder9 = builder2.mergeFrom(byteArray3);
        java.util.List<com.google.protobuf.DescriptorProtos.MethodDescriptorProto> methodDescriptorProtoList10 = builder9.getMethodList();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder11 = builder9.clearMethod();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto12 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.getDefaultInstance();
        boolean boolean13 = serviceDescriptorProto12.hasOptions();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder14 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.newBuilder(serviceDescriptorProto12);
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto15 = builder14.buildPartial();
        com.google.protobuf.DescriptorProtos.ServiceOptions serviceOptions16 = builder14.getOptions();
        com.google.protobuf.DescriptorProtos.ServiceOptions.Builder builder17 = serviceOptions16.toBuilder();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder18 = builder11.setOptions(builder17);
        com.google.protobuf.DescriptorProtos.ServiceOptions serviceOptions19 = builder11.getOptions();
        org.junit.Assert.assertNotNull(serviceDescriptorProto0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(methodOptions5);
        org.junit.Assert.assertNotNull(codedInputStream8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(methodDescriptorProtoList10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(serviceDescriptorProto12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(serviceDescriptorProto15);
        org.junit.Assert.assertNotNull(serviceOptions16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(serviceOptions19);
    }

    @Test
    public void test2651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2651");
        byte[] byteArray0 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions2 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray0, extensionRegistryLite1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite3 = null;
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto enumDescriptorProto4 = com.google.protobuf.DescriptorProtos.EnumDescriptorProto.parseFrom(byteArray0, extensionRegistryLite3);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder5 = enumDescriptorProto4.newBuilderForType();
        com.google.protobuf.Descriptors.Descriptor descriptor6 = builder5.getDescriptorForType();
        boolean boolean7 = builder5.hasName();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder8 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder9 = builder8.clearCcGenericServices();
        boolean boolean10 = builder8.isInitialized();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder12 = builder8.setCcGenericServices(true);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder13 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label14 = builder13.getLabel();
        com.google.protobuf.ByteString byteString15 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder16 = builder13.mergeFrom(byteString15);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite17 = null;
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder18 = builder12.mergeFrom(byteString15, extensionRegistryLite17);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite19 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions20 = com.google.protobuf.DescriptorProtos.EnumValueOptions.parseFrom(byteString15, extensionRegistryLite19);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite21 = null;
        com.google.protobuf.DescriptorProtos.MessageOptions messageOptions22 = com.google.protobuf.DescriptorProtos.MessageOptions.parseFrom(byteString15, extensionRegistryLite21);
        com.google.protobuf.ByteString byteString23 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite24 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions25 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(byteString23, extensionRegistryLite24);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder26 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label27 = builder26.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto28 = builder26.buildPartial();
        int int29 = fieldDescriptorProto28.getSerializedSize();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder30 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto28);
        java.io.InputStream inputStream31 = null;
        java.io.InputStream inputStream32 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite33 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location34 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream32, extensionRegistryLite33);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder35 = builder30.mergeFrom(inputStream31, extensionRegistryLite33);
        com.google.javascript.jscomp.FunctionInformationMap functionInformationMap36 = com.google.javascript.jscomp.FunctionInformationMap.parseFrom(byteString23, extensionRegistryLite33);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder37 = builder5.mergeFrom(byteString15, extensionRegistryLite33);
        int int38 = builder37.getValueCount();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(methodOptions2);
        org.junit.Assert.assertNotNull(enumDescriptorProto4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(descriptor6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + label14 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label14.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(byteString15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(enumValueOptions20);
        org.junit.Assert.assertNotNull(messageOptions22);
        org.junit.Assert.assertNotNull(byteString23);
        org.junit.Assert.assertNotNull(enumOptions25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + label27 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label27.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(extensionRegistryLite33);
        org.junit.Assert.assertNotNull(location34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(functionInformationMap36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
    }

    @Test
    public void test2652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2652");
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto0 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.getDefaultInstance();
        boolean boolean1 = serviceDescriptorProto0.hasOptions();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder2 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.newBuilder(serviceDescriptorProto0);
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto3 = builder2.buildPartial();
        com.google.protobuf.DescriptorProtos.ServiceOptions serviceOptions4 = builder2.getOptions();
        com.google.protobuf.DescriptorProtos.ServiceOptions.Builder builder5 = serviceOptions4.toBuilder();
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.UninterpretedOption uninterpretedOption7 = builder5.getUninterpretedOption((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serviceDescriptorProto0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(serviceDescriptorProto3);
        org.junit.Assert.assertNotNull(serviceOptions4);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test2653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2653");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label4 = builder3.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = builder0.addExtension(builder3);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder6 = builder0.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions7 = builder6.getOptions();
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder8 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output10 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream12 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output10, (int) 'a');
        byte[] byteArray13 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite14 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions15 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray13, extensionRegistryLite14);
        output10.write(byteArray13);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder17 = builder8.mergeFrom(byteArray13);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder18 = builder6.mergeFrom(byteArray13);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder19 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder21 = builder19.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder22 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label23 = builder22.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder24 = builder19.addExtension(builder22);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder25 = builder19.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder26 = builder25.getOptionsBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder27 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder29 = builder27.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder30 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label31 = builder30.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder32 = builder27.addExtension(builder30);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder33 = builder27.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder34 = builder33.getOptionsBuilder();
        java.io.InputStream inputStream35 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions36 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream35);
        boolean boolean37 = enumOptions36.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder38 = builder34.mergeFrom(enumOptions36);
        com.google.protobuf.UnknownFieldSet unknownFieldSet39 = builder34.getUnknownFields();
        com.google.protobuf.CodedOutputStream codedOutputStream40 = null;
        unknownFieldSet39.writeTo(codedOutputStream40);
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder42 = builder26.setUnknownFields(unknownFieldSet39);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder43 = builder18.setOptions(builder26);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + label4 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label4.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(enumOptions7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(output10);
        org.junit.Assert.assertNotNull(codedOutputStream12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(methodOptions15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + label23 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label23.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + label31 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label31.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(enumOptions36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(unknownFieldSet39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test2654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2654");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        int int5 = localDateTime4.getYear();
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset9);
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset14);
        java.time.ZonedDateTime zonedDateTime16 = java.time.ZonedDateTime.of(localDateTime10, (java.time.ZoneId) zoneOffset14);
        boolean boolean17 = localDateTime4.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime10);
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset21);
        int int23 = localDateTime22.getYear();
        java.time.LocalDate localDate24 = localDateTime22.toLocalDate();
        int int25 = localDateTime4.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime22);
        java.time.temporal.ChronoField chronoField26 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit27 = chronoField26.getBaseUnit();
        long long28 = localDateTime4.getLong((java.time.temporal.TemporalField) chronoField26);
        java.time.LocalTime localTime29 = localDateTime4.toLocalTime();
        java.time.ZoneOffset zoneOffset33 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime34 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset33);
        int int35 = localDateTime34.getYear();
        java.time.ZoneOffset zoneOffset39 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime40 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset39);
        java.time.ZoneOffset zoneOffset44 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime45 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset44);
        java.time.ZonedDateTime zonedDateTime46 = java.time.ZonedDateTime.of(localDateTime40, (java.time.ZoneId) zoneOffset44);
        boolean boolean47 = localDateTime34.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime40);
        java.time.temporal.ChronoField chronoField48 = java.time.temporal.ChronoField.MONTH_OF_YEAR;
        boolean boolean49 = localDateTime40.isSupported((java.time.temporal.TemporalField) chronoField48);
        // The following exception was thrown during execution in test generation
        try {
            int int50 = localTime29.get((java.time.temporal.TemporalField) chronoField48);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: MonthOfYear");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zonedDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1970 + "'", int23 == 1970);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + chronoField26 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField26.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit27 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit27.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 12L + "'", long28 == 12L);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(zoneOffset33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1970 + "'", int35 == 1970);
        org.junit.Assert.assertNotNull(zoneOffset39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(zoneOffset44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(zonedDateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + chronoField48 + "' != '" + java.time.temporal.ChronoField.MONTH_OF_YEAR + "'", chronoField48.equals(java.time.temporal.ChronoField.MONTH_OF_YEAR));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test2655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2655");
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative0 = com.google.javascript.rhino.jstype.JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE;
        org.junit.Assert.assertTrue("'" + jSTypeNative0 + "' != '" + com.google.javascript.rhino.jstype.JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE + "'", jSTypeNative0.equals(com.google.javascript.rhino.jstype.JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE));
    }

    @Test
    public void test2656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2656");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label4 = builder3.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = builder0.addExtension(builder3);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder6 = builder0.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder7 = builder6.getOptionsBuilder();
        java.io.InputStream inputStream8 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions9 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream8);
        boolean boolean10 = enumOptions9.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder11 = builder7.mergeFrom(enumOptions9);
        com.google.protobuf.UnknownFieldSet unknownFieldSet12 = builder7.getUnknownFields();
        byte[] byteArray13 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite14 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions15 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray13, extensionRegistryLite14);
        com.google.protobuf.CodedOutputStream codedOutputStream18 = com.google.protobuf.CodedOutputStream.newInstance(byteArray13, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite19 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto20 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray13, extensionRegistryLite19);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite21 = null;
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto22 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.parseFrom(byteArray13, extensionRegistryLite21);
        com.google.protobuf.UnknownFieldSet unknownFieldSet23 = com.google.protobuf.UnknownFieldSet.parseFrom(byteArray13);
        com.google.protobuf.ByteString byteString24 = unknownFieldSet23.toByteString();
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite25 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder26 = builder7.mergeFrom(byteString24, extensionRegistryLite25);
        com.google.protobuf.DescriptorProtos.FieldOptions fieldOptions27 = com.google.protobuf.DescriptorProtos.FieldOptions.parseFrom(byteString24);
        com.google.protobuf.DescriptorProtos.FieldOptions.Builder builder28 = fieldOptions27.newBuilderForType();
        com.google.protobuf.DescriptorProtos.FieldOptions.Builder builder29 = builder28.clone();
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor30 = null;
        java.time.Instant instant31 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset35 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime36 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset35);
        java.time.OffsetDateTime offsetDateTime37 = java.time.OffsetDateTime.ofInstant(instant31, (java.time.ZoneId) zoneOffset35);
        java.time.OffsetDateTime offsetDateTime39 = offsetDateTime37.plusWeeks((long) (-1));
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.FieldOptions.Builder builder40 = builder29.setField(fieldDescriptor30, (java.lang.Object) offsetDateTime37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + label4 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label4.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(enumOptions9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(unknownFieldSet12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(methodOptions15);
        org.junit.Assert.assertNotNull(codedOutputStream18);
        org.junit.Assert.assertNotNull(fileDescriptorProto20);
        org.junit.Assert.assertNotNull(serviceDescriptorProto22);
        org.junit.Assert.assertNotNull(unknownFieldSet23);
        org.junit.Assert.assertNotNull(byteString24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(fieldOptions27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(zoneOffset35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(offsetDateTime37);
        org.junit.Assert.assertNotNull(offsetDateTime39);
    }

    @Test
    public void test2657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2657");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label4 = builder3.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = builder0.addExtension(builder3);
        boolean boolean6 = builder3.hasDefaultValue();
        java.io.InputStream inputStream7 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite8 = null;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder9 = builder3.mergeFrom(inputStream7, extensionRegistryLite8);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder10 = builder3.clone();
        boolean boolean11 = builder3.isInitialized();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + label4 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label4.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test2658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2658");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.of(localDateTime4, (java.time.ZoneId) zoneOffset8);
        java.time.temporal.ChronoField chronoField12 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit13 = chronoField12.getBaseUnit();
        java.time.LocalDateTime localDateTime14 = localDateTime4.plus((long) 1970, temporalUnit13);
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset18);
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset23);
        java.time.ZonedDateTime zonedDateTime25 = java.time.ZonedDateTime.of(localDateTime19, (java.time.ZoneId) zoneOffset23);
        java.time.temporal.ChronoField chronoField27 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit28 = chronoField27.getBaseUnit();
        java.time.LocalDateTime localDateTime29 = localDateTime19.plus((long) 1970, temporalUnit28);
        java.time.LocalDateTime localDateTime31 = localDateTime19.withHour((int) (short) 1);
        java.time.ZoneOffset zoneOffset33 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.OffsetDateTime offsetDateTime34 = java.time.OffsetDateTime.of(localDateTime19, zoneOffset33);
        long long35 = localDateTime4.toEpochSecond(zoneOffset33);
        java.time.ZoneOffset zoneOffset39 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime40 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset39);
        java.time.ZoneOffset zoneOffset44 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime45 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset44);
        java.time.ZonedDateTime zonedDateTime46 = java.time.ZonedDateTime.of(localDateTime40, (java.time.ZoneId) zoneOffset44);
        java.time.ZonedDateTime zonedDateTime48 = zonedDateTime46.minusSeconds((long) '#');
        java.time.ZonedDateTime zonedDateTime50 = zonedDateTime46.minusYears((long) ' ');
        java.time.temporal.Temporal temporal51 = zoneOffset33.adjustInto((java.time.temporal.Temporal) zonedDateTime50);
        java.time.Period period52 = java.time.Period.ZERO;
        java.time.Period period54 = period52.plusMonths(0L);
        int int55 = period52.getMonths();
        java.time.Period period57 = period52.multipliedBy(6);
        java.time.ZonedDateTime zonedDateTime58 = zonedDateTime50.plus((java.time.temporal.TemporalAmount) period52);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertTrue("'" + chronoField12 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField12.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit13 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit13.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zonedDateTime25);
        org.junit.Assert.assertTrue("'" + chronoField27 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField27.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit28 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit28.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(zoneOffset33);
        org.junit.Assert.assertNotNull(offsetDateTime34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 100L + "'", long35 == 100L);
        org.junit.Assert.assertNotNull(zoneOffset39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(zoneOffset44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(zonedDateTime46);
        org.junit.Assert.assertNotNull(zonedDateTime48);
        org.junit.Assert.assertNotNull(zonedDateTime50);
        org.junit.Assert.assertNotNull(temporal51);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(zonedDateTime58);
    }

    @Test
    public void test2659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2659");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.optimizeCalls = false;
        compilerOptions0.setDefineToNumberLiteral("1970-03-24T02:02:32", (int) (short) 0);
        com.google.javascript.jscomp.CompilerOptions compilerOptions6 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions6.setRecordFunctionInformation(true);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder9 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder11 = builder9.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder12 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label13 = builder12.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder14 = builder9.addExtension(builder12);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder15 = builder9.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions16 = builder15.getOptions();
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder17 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output19 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream21 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output19, (int) 'a');
        byte[] byteArray22 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite23 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions24 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray22, extensionRegistryLite23);
        output19.write(byteArray22);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder26 = builder17.mergeFrom(byteArray22);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder27 = builder15.mergeFrom(byteArray22);
        compilerOptions6.setInputVariableMapSerialized(byteArray22);
        com.google.javascript.jscomp.CheckLevel checkLevel29 = compilerOptions6.checkRequires;
        compilerOptions0.checkRequires = checkLevel29;
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + label13 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label13.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(enumOptions16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(output19);
        org.junit.Assert.assertNotNull(codedOutputStream21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(methodOptions24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + checkLevel29 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel29.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test2660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2660");
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions0 = com.google.protobuf.DescriptorProtos.EnumValueOptions.getDefaultInstance();
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder1 = com.google.protobuf.DescriptorProtos.EnumValueOptions.newBuilder(enumValueOptions0);
        com.google.javascript.jscomp.CompilerOptions compilerOptions2 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions2.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat5 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions2.errorFormat = errorFormat5;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy7 = null;
        compilerOptions2.variableRenaming = variableRenamingPolicy7;
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode9 = compilerOptions2.getTracerMode();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder10 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder12 = builder10.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder13 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label14 = builder13.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder15 = builder10.addExtension(builder13);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder16 = builder10.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder17 = builder16.getOptionsBuilder();
        java.io.InputStream inputStream18 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions19 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream18);
        boolean boolean20 = enumOptions19.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder21 = builder17.mergeFrom(enumOptions19);
        byte[] byteArray22 = enumOptions19.toByteArray();
        compilerOptions2.setInputPropertyMapSerialized(byteArray22);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite24 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo sourceCodeInfo25 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.parseFrom(byteArray22, extensionRegistryLite24);
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder26 = builder1.mergeFrom(byteArray22);
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor27 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj29 = builder1.getRepeatedField(fieldDescriptor27, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(enumValueOptions0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(errorFormat5);
        org.junit.Assert.assertTrue("'" + tracerMode9 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode9.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + label14 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label14.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(enumOptions19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(sourceCodeInfo25);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test2661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2661");
        int int0 = com.google.javascript.rhino.jstype.JSType.NOT_ENUMDECL;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 0 + "'", int0 == 0);
    }

    @Test
    public void test2662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2662");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.of(localDateTime4, (java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime10.withYear((int) (short) 1);
        java.time.LocalTime localTime13 = zonedDateTime10.toLocalTime();
        java.time.format.DateTimeFormatter dateTimeFormatter14 = java.time.format.DateTimeFormatter.ISO_OFFSET_DATE_TIME;
        java.util.Set<java.time.temporal.TemporalField> temporalFieldSet15 = dateTimeFormatter14.getResolverFields();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = localTime13.format(dateTimeFormatter14);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: Year");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNull(temporalFieldSet15);
    }

    @Test
    public void test2663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2663");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset10);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.of(localDateTime11, (java.time.ZoneId) zoneOffset15);
        java.time.Clock clock18 = java.time.Clock.fixed(instant0, (java.time.ZoneId) zoneOffset15);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.now(clock18);
        java.time.LocalDate localDate20 = java.time.LocalDate.now(clock18);
        com.google.protobuf.Descriptors.Descriptor descriptor21 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto22 = descriptor21.toProto();
        boolean boolean23 = descriptorProto22.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList24 = descriptorProto22.getNestedTypeList();
        int int25 = descriptorProto22.getExtensionRangeCount();
        boolean boolean26 = localDate20.equals((java.lang.Object) descriptorProto22);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder27 = descriptorProto22.newBuilderForType();
        java.util.List<com.google.protobuf.DescriptorProtos.FieldDescriptorProto> fieldDescriptorProtoList28 = builder27.getExtensionList();
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.Builder builder29 = com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.newBuilder();
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder30 = builder27.addExtensionRange(builder29);
        com.google.protobuf.Descriptors.Descriptor descriptor31 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto32 = descriptor31.toProto();
        boolean boolean33 = descriptorProto32.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList34 = descriptorProto32.getNestedTypeList();
        int int35 = descriptorProto32.getExtensionCount();
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder36 = builder30.mergeFrom(descriptorProto32);
        java.io.InputStream inputStream37 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite38 = null;
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange extensionRange39 = com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.parseFrom(inputStream37, extensionRegistryLite38);
        int int40 = extensionRange39.getEnd();
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange extensionRange41 = extensionRange39.getDefaultInstanceForType();
        int int42 = extensionRange41.getEnd();
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder43 = builder36.addExtensionRange(extensionRange41);
        java.io.InputStream inputStream44 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean45 = builder36.mergeDelimitedFrom(inputStream44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(clock18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(descriptor21);
        org.junit.Assert.assertNotNull(descriptorProto22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(fieldDescriptorProtoList28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(descriptor31);
        org.junit.Assert.assertNotNull(descriptorProto32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(extensionRange39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(extensionRange41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test2664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2664");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.OffsetDateTime offsetDateTime8 = offsetDateTime6.plusWeeks((long) (-1));
        java.time.OffsetDateTime offsetDateTime10 = offsetDateTime6.withDayOfYear(16);
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetDateTime offsetDateTime12 = offsetDateTime6.plusWeeks(9223372036854775807L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: long overflow");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(offsetDateTime8);
        org.junit.Assert.assertNotNull(offsetDateTime10);
    }

    @Test
    public void test2665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2665");
        java.io.File file2 = null;
        java.io.File file3 = java.io.File.createTempFile("hi!", "ISO", file2);
        boolean boolean6 = file3.setWritable(false, false);
        java.net.URI uRI7 = file3.toURI();
        java.io.PrintStream printStream8 = new java.io.PrintStream(file3);
        printStream8.print((int) (byte) 0);
        printStream8.close();
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file3.toString(), "/tmp/hi!1731155955502675229ISO");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(uRI7);
    }

    @Test
    public void test2666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2666");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType4 = jSTypeRegistry2.createObjectType(objectType3);
        jSTypeRegistry2.forwardDeclareType("");
        com.google.javascript.rhino.ErrorReporter errorReporter7 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry9 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter7, false);
        com.google.javascript.rhino.jstype.ObjectType objectType10 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType11 = jSTypeRegistry9.createObjectType(objectType10);
        com.google.javascript.rhino.ErrorReporter errorReporter12 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter12, false);
        com.google.javascript.rhino.jstype.ObjectType objectType15 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType16 = jSTypeRegistry14.createObjectType(objectType15);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair17 = objectType11.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType16);
        boolean boolean18 = objectType11.isInterface();
        com.google.javascript.rhino.jstype.JSType jSType23 = jSTypeRegistry2.getType((com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>) objectType11, "NUMBER 52.0 0", "OffsetSeconds", 256, (int) (short) 10);
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24, false);
        com.google.javascript.rhino.jstype.ObjectType objectType27 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType28 = jSTypeRegistry26.createObjectType(objectType27);
        com.google.javascript.rhino.ErrorReporter errorReporter29 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter29, false);
        com.google.javascript.rhino.jstype.ObjectType objectType32 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType33 = jSTypeRegistry31.createObjectType(objectType32);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair34 = objectType28.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType33);
        boolean boolean35 = objectType33.isTemplateType();
        boolean boolean36 = objectType33.isNativeObjectType();
        boolean boolean37 = objectType33.isNumberValueType();
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        com.google.javascript.rhino.jstype.ObjectType objectType42 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType43 = jSTypeRegistry41.createObjectType(objectType42);
        com.google.javascript.rhino.ErrorReporter errorReporter44 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry46 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter44, false);
        com.google.javascript.rhino.jstype.ObjectType objectType47 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType48 = jSTypeRegistry46.createObjectType(objectType47);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair49 = objectType43.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType48);
        java.lang.String str50 = objectType48.getDisplayName();
        com.google.javascript.rhino.ErrorReporter errorReporter51 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry53 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter51, false);
        com.google.javascript.rhino.jstype.ObjectType objectType54 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType55 = jSTypeRegistry53.createObjectType(objectType54);
        com.google.javascript.rhino.ErrorReporter errorReporter56 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry58 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter56, false);
        com.google.javascript.rhino.jstype.ObjectType objectType59 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType60 = jSTypeRegistry58.createObjectType(objectType59);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair61 = objectType55.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType60);
        boolean boolean62 = objectType60.isTemplateType();
        com.google.javascript.rhino.jstype.JSType jSType63 = objectType48.getLeastSupertype((com.google.javascript.rhino.jstype.JSType) objectType60);
        com.google.javascript.rhino.Node node67 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean68 = node67.isFromExterns();
        java.lang.String str69 = node67.toString();
        java.lang.Iterable<com.google.javascript.rhino.Node> nodeIterable70 = node67.siblings();
        boolean boolean71 = objectType33.defineDeclaredProperty("", (com.google.javascript.rhino.jstype.JSType) objectType60, node67);
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray72 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.FunctionType functionType73 = jSTypeRegistry2.createConstructorType((com.google.javascript.rhino.jstype.JSType) objectType33, jSTypeArray72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectType4);
        org.junit.Assert.assertNotNull(objectType11);
        org.junit.Assert.assertNotNull(objectType16);
        org.junit.Assert.assertNotNull(typePair17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(jSType23);
        org.junit.Assert.assertNotNull(objectType28);
        org.junit.Assert.assertNotNull(objectType33);
        org.junit.Assert.assertNotNull(typePair34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(objectType43);
        org.junit.Assert.assertNotNull(objectType48);
        org.junit.Assert.assertNotNull(typePair49);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(objectType55);
        org.junit.Assert.assertNotNull(objectType60);
        org.junit.Assert.assertNotNull(typePair61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(jSType63);
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "NUMBER 52.0 0" + "'", str69, "NUMBER 52.0 0");
        org.junit.Assert.assertNotNull(nodeIterable70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
    }

    @Test
    public void test2667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2667");
        byte[] byteArray0 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder1 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder3 = builder1.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder4 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label5 = builder4.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder6 = builder1.addExtension(builder4);
        boolean boolean7 = builder4.hasDefaultValue();
        java.io.InputStream inputStream8 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite9 = null;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder10 = builder4.mergeFrom(inputStream8, extensionRegistryLite9);
        java.io.InputStream inputStream11 = null;
        java.io.InputStream inputStream12 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite13 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location14 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream12, extensionRegistryLite13);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder15 = builder10.mergeFrom(inputStream11, extensionRegistryLite13);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.FileOptions fileOptions16 = com.google.protobuf.DescriptorProtos.FileOptions.parseFrom(byteArray0, extensionRegistryLite13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + label5 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label5.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(extensionRegistryLite13);
        org.junit.Assert.assertNotNull(location14);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test2668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2668");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        compilerOptions0.setRemoveDeadCode(false);
        compilerOptions0.setRemoveAbstractMethods(true);
        compilerOptions0.setInputDelimiter("South Korea");
        java.util.List<com.google.javascript.jscomp.SourceMap.LocationMapping> locationMappingList11 = compilerOptions0.sourceMapLocationMappings;
        org.junit.Assert.assertNotNull(errorFormat3);
        org.junit.Assert.assertNotNull(locationMappingList11);
    }

    @Test
    public void test2669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2669");
        java.util.MissingResourceException missingResourceException3 = new java.util.MissingResourceException("Not declared as a type name", "P-12D", "{}: ERROR - Unknown class name\n");
        java.lang.String str4 = missingResourceException3.getClassName();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "P-12D" + "'", str4, "P-12D");
    }

    @Test
    public void test2670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2670");
        java.io.PrintStream printStream0 = null;
        com.google.javascript.jscomp.Compiler compiler1 = new com.google.javascript.jscomp.Compiler(printStream0);
        com.google.javascript.jscomp.ErrorManager errorManager2 = compiler1.getErrorManager();
        com.google.javascript.jscomp.SourceFile sourceFile4 = com.google.javascript.jscomp.SourceFile.fromFile("/");
        com.google.javascript.jscomp.SourceFile.Generator generator6 = null;
        com.google.javascript.jscomp.SourceFile sourceFile7 = com.google.javascript.jscomp.SourceFile.fromGenerator("hi!", generator6);
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions8.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat11 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions8.errorFormat = errorFormat11;
        compilerOptions8.setRemoveDeadCode(false);
        com.google.javascript.jscomp.Result result15 = compiler1.compile(sourceFile4, sourceFile7, compilerOptions8);
        compilerOptions8.optimizeArgumentsArray = false;
        org.junit.Assert.assertNotNull(errorManager2);
        org.junit.Assert.assertNotNull(sourceFile4);
        org.junit.Assert.assertNotNull(sourceFile7);
        org.junit.Assert.assertNotNull(errorFormat11);
        org.junit.Assert.assertNotNull(result15);
    }

    @Test
    public void test2671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2671");
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.newBuilder();
        java.io.InputStream inputStream1 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite2 = null;
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder3 = builder0.mergeFrom(inputStream1, extensionRegistryLite2);
        com.google.protobuf.DescriptorProtos.EnumValueOptionsOrBuilder enumValueOptionsOrBuilder4 = builder0.getOptionsOrBuilder();
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto enumValueDescriptorProto5 = builder0.getDefaultInstanceForType();
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor6 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.Message.Builder builder7 = builder0.newBuilderForField(fieldDescriptor6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(enumValueOptionsOrBuilder4);
        org.junit.Assert.assertNotNull(enumValueDescriptorProto5);
    }

    @Test
    public void test2672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2672");
        java.net.URL uRL0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL2 = new java.net.URL(uRL0, "Mon Jun 09 00:00:00 UTC 1947");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: no protocol: Mon Jun 09 00:00:00 UTC 1947");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2673");
        int int2 = com.google.protobuf.CodedOutputStream.computeSFixed64Size(31, 74880L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 10 + "'", int2 == 10);
    }

    @Test
    public void test2674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2674");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.INVALID_CASTS;
        com.google.javascript.jscomp.DiagnosticGroups.DUPLICATE_MESSAGE = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_TYPES = diagnosticGroup0;
        com.google.javascript.jscomp.DiagnosticGroups.VISIBILITY = diagnosticGroup0;
        org.junit.Assert.assertNotNull(diagnosticGroup0);
    }

    @Test
    public void test2675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2675");
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        boolean boolean6 = strSet4.isEmpty();
        java.nio.ByteBuffer byteBuffer8 = java.nio.ByteBuffer.allocate(100);
        boolean boolean9 = strSet4.equals((java.lang.Object) byteBuffer8);
        java.nio.IntBuffer intBuffer10 = byteBuffer8.asIntBuffer();
        java.nio.IntBuffer intBuffer11 = intBuffer10.duplicate();
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet16 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet16, strArray15);
        boolean boolean18 = strSet16.isEmpty();
        java.nio.ByteBuffer byteBuffer20 = java.nio.ByteBuffer.allocate(100);
        boolean boolean21 = strSet16.equals((java.lang.Object) byteBuffer20);
        java.nio.IntBuffer intBuffer22 = byteBuffer20.asIntBuffer();
        java.nio.IntBuffer intBuffer23 = intBuffer22.duplicate();
        java.nio.IntBuffer intBuffer24 = intBuffer23.duplicate();
        java.nio.IntBuffer intBuffer26 = java.nio.IntBuffer.allocate(256);
        int[] intArray31 = new int[] { 16, ':', 43, (short) 100 };
        java.util.stream.IntStream intStream32 = java.util.stream.IntStream.of(intArray31);
        int[] intArray33 = intStream32.toArray();
        java.nio.IntBuffer intBuffer34 = intBuffer26.put(intArray33);
        java.nio.IntBuffer intBuffer35 = intBuffer24.get(intArray33);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.IntBuffer intBuffer38 = intBuffer11.get(intArray33, 171, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(intBuffer10);
        org.junit.Assert.assertNotNull(intBuffer11);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(byteBuffer20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intBuffer22);
        org.junit.Assert.assertNotNull(intBuffer23);
        org.junit.Assert.assertNotNull(intBuffer24);
        org.junit.Assert.assertNotNull(intBuffer26);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[16, 58, 43, 100]");
        org.junit.Assert.assertNotNull(intStream32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(intBuffer34);
        org.junit.Assert.assertNotNull(intBuffer35);
    }

    @Test
    public void test2676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2676");
        int int0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.EXTENSION_FIELD_NUMBER;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 7 + "'", int0 == 7);
    }

    @Test
    public void test2677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2677");
        com.google.javascript.jscomp.SourceAst sourceAst0 = null;
        com.google.javascript.rhino.InputId inputId1 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput3 = new com.google.javascript.jscomp.CompilerInput(sourceAst0, inputId1, true);
        com.google.javascript.jscomp.SourceAst sourceAst4 = null;
        com.google.javascript.rhino.InputId inputId5 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput7 = new com.google.javascript.jscomp.CompilerInput(sourceAst4, inputId5, true);
        com.google.javascript.jscomp.SourceAst sourceAst8 = null;
        com.google.javascript.rhino.InputId inputId9 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput11 = new com.google.javascript.jscomp.CompilerInput(sourceAst8, inputId9, true);
        com.google.javascript.rhino.InputId inputId12 = compilerInput11.getInputId();
        com.google.javascript.jscomp.SourceAst sourceAst13 = null;
        com.google.javascript.rhino.InputId inputId14 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput16 = new com.google.javascript.jscomp.CompilerInput(sourceAst13, inputId14, true);
        com.google.javascript.rhino.InputId inputId17 = compilerInput16.getInputId();
        com.google.javascript.jscomp.SourceAst sourceAst18 = null;
        com.google.javascript.rhino.InputId inputId19 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput21 = new com.google.javascript.jscomp.CompilerInput(sourceAst18, inputId19, true);
        java.io.PrintStream printStream22 = null;
        com.google.javascript.jscomp.Compiler compiler23 = new com.google.javascript.jscomp.Compiler(printStream22);
        com.google.javascript.jscomp.ErrorManager errorManager24 = compiler23.getErrorManager();
        compilerInput21.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler23);
        com.google.javascript.jscomp.SourceAst sourceAst26 = null;
        com.google.javascript.rhino.InputId inputId27 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput29 = new com.google.javascript.jscomp.CompilerInput(sourceAst26, inputId27, true);
        com.google.javascript.rhino.InputId inputId30 = compilerInput29.getInputId();
        com.google.javascript.jscomp.SourceAst sourceAst31 = null;
        com.google.javascript.rhino.InputId inputId32 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput34 = new com.google.javascript.jscomp.CompilerInput(sourceAst31, inputId32, true);
        com.google.javascript.jscomp.SourceAst sourceAst35 = null;
        com.google.javascript.rhino.InputId inputId36 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput38 = new com.google.javascript.jscomp.CompilerInput(sourceAst35, inputId36, true);
        java.io.PrintStream printStream39 = null;
        com.google.javascript.jscomp.Compiler compiler40 = new com.google.javascript.jscomp.Compiler(printStream39);
        com.google.javascript.jscomp.ErrorManager errorManager41 = compiler40.getErrorManager();
        compilerInput38.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler40);
        com.google.javascript.jscomp.SourceAst sourceAst43 = null;
        com.google.javascript.rhino.InputId inputId44 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput46 = new com.google.javascript.jscomp.CompilerInput(sourceAst43, inputId44, true);
        com.google.javascript.jscomp.CompilerInput[] compilerInputArray47 = new com.google.javascript.jscomp.CompilerInput[] { compilerInput34, compilerInput38, compilerInput46 };
        com.google.common.collect.ImmutableSet<com.google.javascript.jscomp.CompilerInput> compilerInputSet48 = com.google.common.collect.ImmutableSet.of(compilerInput3, compilerInput7, compilerInput11, compilerInput16, compilerInput21, compilerInput29, compilerInputArray47);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.Region region50 = compilerInput16.getRegion(48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(inputId12);
        org.junit.Assert.assertNull(inputId17);
        org.junit.Assert.assertNotNull(errorManager24);
        org.junit.Assert.assertNull(inputId30);
        org.junit.Assert.assertNotNull(errorManager41);
        org.junit.Assert.assertNotNull(compilerInputArray47);
        org.junit.Assert.assertNotNull(compilerInputSet48);
    }

    @Test
    public void test2678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2678");
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        boolean boolean6 = strSet4.isEmpty();
        java.nio.ByteBuffer byteBuffer8 = java.nio.ByteBuffer.allocate(100);
        boolean boolean9 = strSet4.equals((java.lang.Object) byteBuffer8);
        java.nio.IntBuffer intBuffer10 = byteBuffer8.asIntBuffer();
        double double11 = byteBuffer8.getDouble();
        java.nio.ByteBuffer byteBuffer12 = byteBuffer8.asReadOnlyBuffer();
        short short14 = byteBuffer8.getShort((int) (byte) 10);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer8.asReadOnlyBuffer();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer18 = byteBuffer8.putFloat((int) (short) 100, (float) 2);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(intBuffer10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertTrue("'" + short14 + "' != '" + (short) 0 + "'", short14 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer15);
    }

    @Test
    public void test2679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2679");
        com.google.javascript.jscomp.SourceFile sourceFile1 = new com.google.javascript.jscomp.SourceFile("OptionalDouble[-1.0]");
    }

    @Test
    public void test2680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2680");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset10);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.of(localDateTime11, (java.time.ZoneId) zoneOffset15);
        java.time.Clock clock18 = java.time.Clock.fixed(instant0, (java.time.ZoneId) zoneOffset15);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.now(clock18);
        java.time.LocalDate localDate20 = java.time.LocalDate.now(clock18);
        com.google.protobuf.Descriptors.Descriptor descriptor21 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto22 = descriptor21.toProto();
        boolean boolean23 = descriptorProto22.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList24 = descriptorProto22.getNestedTypeList();
        int int25 = descriptorProto22.getExtensionRangeCount();
        boolean boolean26 = localDate20.equals((java.lang.Object) descriptorProto22);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder27 = descriptorProto22.newBuilderForType();
        com.google.protobuf.ByteString byteString28 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite29 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto30 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteString28, extensionRegistryLite29);
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange extensionRange31 = com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.parseFrom(byteString28);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder32 = builder27.mergeFrom(byteString28);
        com.google.javascript.rhino.JSDocInfo jSDocInfo33 = new com.google.javascript.rhino.JSDocInfo();
        java.util.List<com.google.javascript.rhino.JSTypeExpression> jSTypeExpressionList34 = jSDocInfo33.getExtendedInterfaces();
        boolean boolean35 = byteString28.equals((java.lang.Object) jSDocInfo33);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(clock18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(descriptor21);
        org.junit.Assert.assertNotNull(descriptorProto22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(byteString28);
        org.junit.Assert.assertNotNull(fileDescriptorProto30);
        org.junit.Assert.assertNotNull(extensionRange31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(jSTypeExpressionList34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test2681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2681");
        java.util.function.DoubleUnaryOperator doubleUnaryOperator0 = java.util.function.DoubleUnaryOperator.identity();
        java.util.function.DoubleUnaryOperator doubleUnaryOperator1 = java.util.function.DoubleUnaryOperator.identity();
        java.util.function.DoubleUnaryOperator doubleUnaryOperator2 = doubleUnaryOperator0.andThen(doubleUnaryOperator1);
        java.util.function.DoubleUnaryOperator doubleUnaryOperator3 = java.util.function.DoubleUnaryOperator.identity();
        java.util.function.DoubleUnaryOperator doubleUnaryOperator4 = doubleUnaryOperator2.andThen(doubleUnaryOperator3);
        java.util.function.DoubleUnaryOperator doubleUnaryOperator5 = java.util.function.DoubleUnaryOperator.identity();
        java.util.function.DoubleUnaryOperator doubleUnaryOperator6 = java.util.function.DoubleUnaryOperator.identity();
        java.util.function.DoubleUnaryOperator doubleUnaryOperator7 = doubleUnaryOperator5.andThen(doubleUnaryOperator6);
        java.util.function.DoubleUnaryOperator doubleUnaryOperator8 = doubleUnaryOperator3.compose(doubleUnaryOperator5);
        org.junit.Assert.assertNotNull(doubleUnaryOperator0);
        org.junit.Assert.assertNotNull(doubleUnaryOperator1);
        org.junit.Assert.assertNotNull(doubleUnaryOperator2);
        org.junit.Assert.assertNotNull(doubleUnaryOperator3);
        org.junit.Assert.assertNotNull(doubleUnaryOperator4);
        org.junit.Assert.assertNotNull(doubleUnaryOperator5);
        org.junit.Assert.assertNotNull(doubleUnaryOperator6);
        org.junit.Assert.assertNotNull(doubleUnaryOperator7);
        org.junit.Assert.assertNotNull(doubleUnaryOperator8);
    }

    @Test
    public void test2682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2682");
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset9);
        java.time.ZonedDateTime zonedDateTime11 = java.time.ZonedDateTime.of(localDateTime5, (java.time.ZoneId) zoneOffset9);
        java.time.temporal.ChronoField chronoField12 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        boolean boolean13 = localDateTime5.isSupported((java.time.temporal.TemporalField) chronoField12);
        java.time.LocalDateTime localDateTime15 = localDateTime5.plusHours((long) 9);
        java.time.format.DateTimeFormatter dateTimeFormatter16 = java.time.format.DateTimeFormatter.ISO_DATE;
        java.lang.String str17 = localDateTime5.format(dateTimeFormatter16);
        java.util.Set<java.time.temporal.TemporalField> temporalFieldSet18 = dateTimeFormatter16.getResolverFields();
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetDateTime offsetDateTime19 = java.time.OffsetDateTime.parse((java.lang.CharSequence) "/tmp/hi!1355050172163310053ISO", dateTimeFormatter16);
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text '/tmp/hi!1355050172163310053ISO' could not be parsed at index 0");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + chronoField12 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField12.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970-01-01" + "'", str17, "1970-01-01");
        org.junit.Assert.assertNull(temporalFieldSet18);
    }

    @Test
    public void test2683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2683");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder3 = builder2.clearSourceCodeInfo();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder4 = builder2.getSourceCodeInfoBuilder();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo sourceCodeInfo5 = builder4.getDefaultInstanceForType();
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor6 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int7 = builder4.getRepeatedFieldCount(fieldDescriptor6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(sourceCodeInfo5);
    }

    @Test
    public void test2684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2684");
        java.util.concurrent.TimeUnit timeUnit0 = java.util.concurrent.TimeUnit.DAYS;
        long long2 = timeUnit0.toNanos((long) 50);
        long long4 = timeUnit0.toHours(0L);
        org.junit.Assert.assertNotNull(timeUnit0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 4320000000000000L + "'", long2 == 4320000000000000L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
    }

    @Test
    public void test2685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2685");
        java.security.cert.CertificateException certificateException0 = new java.security.cert.CertificateException();
    }

    @Test
    public void test2686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2686");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy5 = null;
        compilerOptions0.variableRenaming = variableRenamingPolicy5;
        compilerOptions0.setSummaryDetailLevel(999);
        boolean boolean9 = compilerOptions0.getInferTypes();
        boolean boolean10 = compilerOptions0.ideMode;
        compilerOptions0.setGroupVariableDeclarations(true);
        boolean boolean13 = compilerOptions0.deadAssignmentElimination;
        compilerOptions0.setTightenTypes(false);
        org.junit.Assert.assertNotNull(errorFormat3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test2687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2687");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.of(localDateTime4, (java.time.ZoneId) zoneOffset8);
        java.time.temporal.ChronoField chronoField12 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit13 = chronoField12.getBaseUnit();
        java.time.LocalDateTime localDateTime14 = localDateTime4.plus((long) 1970, temporalUnit13);
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset19);
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset24);
        java.time.ZonedDateTime zonedDateTime26 = java.time.ZonedDateTime.of(localDateTime20, (java.time.ZoneId) zoneOffset24);
        java.time.temporal.ChronoField chronoField28 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit29 = chronoField28.getBaseUnit();
        java.time.LocalDateTime localDateTime30 = localDateTime20.plus((long) 1970, temporalUnit29);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime31 = localDateTime14.minus((long) 43, temporalUnit29);
        java.time.LocalDateTime localDateTime33 = localDateTime14.minusHours((long) 1024);
        java.time.LocalDateTime localDateTime35 = localDateTime33.plusHours((long) 0);
        java.time.Instant instant36 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset40 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime41 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset40);
        java.time.OffsetDateTime offsetDateTime42 = java.time.OffsetDateTime.ofInstant(instant36, (java.time.ZoneId) zoneOffset40);
        java.time.OffsetDateTime offsetDateTime44 = offsetDateTime42.minusDays((long) (short) 100);
        java.lang.String str45 = offsetDateTime42.toString();
        java.time.ZoneOffset zoneOffset46 = offsetDateTime42.getOffset();
        java.time.Instant instant47 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset51 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime52 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset51);
        java.time.OffsetDateTime offsetDateTime53 = java.time.OffsetDateTime.ofInstant(instant47, (java.time.ZoneId) zoneOffset51);
        java.time.ZonedDateTime zonedDateTime54 = java.time.ZonedDateTime.ofLocal(localDateTime33, (java.time.ZoneId) zoneOffset46, zoneOffset51);
        java.time.ZonedDateTime zonedDateTime55 = java.time.ZonedDateTime.now((java.time.ZoneId) zoneOffset51);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertTrue("'" + chronoField12 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField12.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit13 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit13.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertTrue("'" + chronoField28 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField28.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit29 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit29.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(zoneOffset40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(offsetDateTime42);
        org.junit.Assert.assertNotNull(offsetDateTime44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1970-01-01T00:00:52+00:00:52" + "'", str45, "1970-01-01T00:00:52+00:00:52");
        org.junit.Assert.assertNotNull(zoneOffset46);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertNotNull(zoneOffset51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(offsetDateTime53);
        org.junit.Assert.assertNotNull(zonedDateTime54);
        org.junit.Assert.assertNotNull(zonedDateTime55);
    }

    @Test
    public void test2688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2688");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean5 = node4.isStringKey();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean10 = node9.isVar();
        com.google.javascript.rhino.Node[] nodeArray11 = new com.google.javascript.rhino.Node[] { node4, node9 };
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(10, nodeArray11);
        boolean boolean13 = node12.isInc();
        boolean boolean14 = node12.isTypeOf();
        com.google.javascript.rhino.Node node19 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean20 = node19.isFromExterns();
        com.google.javascript.rhino.Node node24 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean25 = node24.isFromExterns();
        java.lang.String str26 = node24.toString();
        com.google.javascript.rhino.Node node27 = node19.copyInformationFrom(node24);
        int int28 = node19.getLineno();
        boolean boolean29 = node19.isLabel();
        com.google.javascript.rhino.Node node33 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean34 = node33.isStringKey();
        boolean boolean35 = node33.isTrue();
        com.google.javascript.rhino.InputId inputId37 = new com.google.javascript.rhino.InputId("NUMBER 52.0 0");
        node33.setInputId(inputId37);
        node19.setInputId(inputId37);
        com.google.javascript.jscomp.CompilerOptions compilerOptions40 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions40.setRecordFunctionInformation(true);
        boolean boolean43 = compilerOptions40.checkControlStructures;
        compilerOptions40.setCollapseProperties(false);
        compilerOptions40.setAssumeStrictThis(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions48 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions48.optimizeCalls = false;
        compilerOptions48.preferLineBreakAtEndOfFile = false;
        boolean boolean53 = compilerOptions48.markNoSideEffectCalls;
        boolean boolean54 = compilerOptions48.labelRenaming;
        com.google.javascript.jscomp.DependencyOptions dependencyOptions55 = new com.google.javascript.jscomp.DependencyOptions();
        java.lang.String[] strArray59 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet60 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet60, strArray59);
        boolean boolean62 = strSet60.isEmpty();
        java.nio.ByteBuffer byteBuffer64 = java.nio.ByteBuffer.allocate(100);
        boolean boolean65 = strSet60.equals((java.lang.Object) byteBuffer64);
        java.lang.String[] strArray69 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet70 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet70, strArray69);
        boolean boolean72 = strSet70.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream73 = strSet70.stream();
        boolean boolean74 = strSet60.retainAll((java.util.Collection<java.lang.String>) strSet70);
        com.google.javascript.jscomp.DependencyOptions dependencyOptions75 = dependencyOptions55.setEntryPoints((java.util.Collection<java.lang.String>) strSet60);
        compilerOptions48.setDependencyOptions(dependencyOptions55);
        com.google.javascript.jscomp.CheckLevel checkLevel77 = compilerOptions48.checkGlobalThisLevel;
        compilerOptions40.reportMissingOverride = checkLevel77;
        com.google.javascript.jscomp.DiagnosticType diagnosticType81 = com.google.javascript.jscomp.DiagnosticType.warning("", "Unknown class name");
        java.lang.String[] strArray86 = new java.lang.String[] { "2022-02-21", "2022-02-21", "hi!", "/tmp/hi!4516073975838273390ISO" };
        com.google.javascript.jscomp.JSError jSError87 = com.google.javascript.jscomp.JSError.make("{}", node19, checkLevel77, diagnosticType81, strArray86);
        com.google.javascript.rhino.Node node91 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean92 = node91.isStringKey();
        boolean boolean93 = node91.isTrue();
        com.google.javascript.rhino.InputId inputId95 = new com.google.javascript.rhino.InputId("NUMBER 52.0 0");
        node91.setInputId(inputId95);
        boolean boolean97 = node91.isThis();
        boolean boolean98 = node91.isLabel();
        // The following exception was thrown during execution in test generation
        try {
            node12.addChildBefore(node19, node91);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The existing child node of the parent should not be null.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(nodeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(node19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(node24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "NUMBER 52.0 0" + "'", str26, "NUMBER 52.0 0");
        org.junit.Assert.assertNotNull(node27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(node33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(byteBuffer64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(strStream73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(dependencyOptions75);
        org.junit.Assert.assertTrue("'" + checkLevel77 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel77.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(diagnosticType81);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(jSError87);
        org.junit.Assert.assertNotNull(node91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test2689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2689");
        com.google.javascript.jscomp.JsMessage.Builder builder1 = new com.google.javascript.jscomp.JsMessage.Builder("2022-02-21");
        com.google.javascript.jscomp.JsMessage.Builder builder3 = builder1.appendStringPart("16:00:52+00:00:52");
        com.google.javascript.jscomp.JsMessage.Builder builder5 = builder1.setSourceName("{}");
        com.google.javascript.jscomp.JsMessage jsMessage6 = builder1.build();
        boolean boolean7 = jsMessage6.isHidden();
        java.lang.String str8 = jsMessage6.getKey();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(jsMessage6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-21" + "'", str8, "2022-02-21");
    }

    @Test
    public void test2690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2690");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions2 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(inputStream0, extensionRegistryLite1);
        java.lang.String str3 = methodOptions2.toString();
        org.junit.Assert.assertNotNull(methodOptions2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test2691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2691");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset10);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.of(localDateTime11, (java.time.ZoneId) zoneOffset15);
        java.time.Clock clock18 = java.time.Clock.fixed(instant0, (java.time.ZoneId) zoneOffset15);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.now(clock18);
        java.time.LocalDate localDate20 = java.time.LocalDate.now(clock18);
        com.google.protobuf.Descriptors.Descriptor descriptor21 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto22 = descriptor21.toProto();
        boolean boolean23 = descriptorProto22.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList24 = descriptorProto22.getNestedTypeList();
        int int25 = descriptorProto22.getExtensionRangeCount();
        boolean boolean26 = localDate20.equals((java.lang.Object) descriptorProto22);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder27 = descriptorProto22.newBuilderForType();
        java.util.List<com.google.protobuf.DescriptorProtos.FieldDescriptorProto> fieldDescriptorProtoList28 = builder27.getExtensionList();
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder29 = builder27.addNestedTypeBuilder();
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder30 = builder27.clearExtension();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder31 = builder30.addExtensionBuilder();
        java.util.Map<com.google.protobuf.Descriptors.FieldDescriptor, java.lang.Object> fieldDescriptorMap32 = builder30.getAllFields();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(clock18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(descriptor21);
        org.junit.Assert.assertNotNull(descriptorProto22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(fieldDescriptorProtoList28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(fieldDescriptorMap32);
    }

    @Test
    public void test2692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2692");
        java.time.chrono.IsoChronology isoChronology0 = java.time.chrono.IsoChronology.INSTANCE;
        java.lang.String str1 = isoChronology0.getId();
        java.time.Month month2 = java.time.Month.APRIL;
        java.time.chrono.Chronology chronology3 = java.time.chrono.Chronology.from((java.time.temporal.TemporalAccessor) month2);
        java.lang.String str4 = chronology3.toString();
        java.time.Instant instant5 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset9);
        java.time.OffsetDateTime offsetDateTime11 = java.time.OffsetDateTime.ofInstant(instant5, (java.time.ZoneId) zoneOffset9);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZoneOffset zoneOffset20 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset20);
        java.time.ZonedDateTime zonedDateTime22 = java.time.ZonedDateTime.of(localDateTime16, (java.time.ZoneId) zoneOffset20);
        java.time.Clock clock23 = java.time.Clock.fixed(instant5, (java.time.ZoneId) zoneOffset20);
        java.time.chrono.ChronoLocalDate chronoLocalDate24 = chronology3.dateNow(clock23);
        java.time.chrono.ChronoLocalDate chronoLocalDate25 = isoChronology0.dateNow(clock23);
        boolean boolean27 = isoChronology0.isLeapYear((long) 4096);
        org.junit.Assert.assertNotNull(isoChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISO" + "'", str1, "ISO");
        org.junit.Assert.assertTrue("'" + month2 + "' != '" + java.time.Month.APRIL + "'", month2.equals(java.time.Month.APRIL));
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISO" + "'", str4, "ISO");
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(offsetDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zoneOffset20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zonedDateTime22);
        org.junit.Assert.assertNotNull(clock23);
        org.junit.Assert.assertNotNull(chronoLocalDate24);
        org.junit.Assert.assertNotNull(chronoLocalDate25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test2693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2693");
        short[] shortArray1 = new short[] { (byte) 1 };
        java.nio.ShortBuffer shortBuffer2 = java.nio.ShortBuffer.wrap(shortArray1);
        short[] shortArray4 = new short[] { (byte) 1 };
        java.nio.ShortBuffer shortBuffer5 = java.nio.ShortBuffer.wrap(shortArray4);
        java.nio.ShortBuffer shortBuffer6 = shortBuffer2.put(shortArray4);
        boolean boolean7 = shortBuffer2.isDirect();
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray1), "[1]");
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[1]");
        org.junit.Assert.assertNotNull(shortBuffer5);
        org.junit.Assert.assertNotNull(shortBuffer6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test2694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2694");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.of(localDateTime4, (java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime10.withYear((int) (short) 1);
        java.time.OffsetDateTime offsetDateTime13 = zonedDateTime10.toOffsetDateTime();
        java.time.ZonedDateTime zonedDateTime15 = zonedDateTime10.plusDays((long) (byte) -1);
        java.time.ZoneOffset zoneOffset16 = zonedDateTime10.getOffset();
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(offsetDateTime13);
        org.junit.Assert.assertNotNull(zonedDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset16);
    }

    @Test
    public void test2695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2695");
        java.time.format.FormatStyle formatStyle0 = java.time.format.FormatStyle.MEDIUM;
        java.time.format.DateTimeFormatter dateTimeFormatter1 = java.time.format.DateTimeFormatter.ofLocalizedDateTime(formatStyle0);
        org.junit.Assert.assertTrue("'" + formatStyle0 + "' != '" + java.time.format.FormatStyle.MEDIUM + "'", formatStyle0.equals(java.time.format.FormatStyle.MEDIUM));
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
    }

    @Test
    public void test2696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2696");
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.of((long) (-1));
        java.util.stream.LongStream longStream2 = longStream1.distinct();
        // The following exception was thrown during execution in test generation
        try {
            java.util.OptionalLong optionalLong3 = longStream1.findAny();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
    }

    @Test
    public void test2697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2697");
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto0 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.getDefaultInstance();
        boolean boolean1 = methodDescriptorProto0.hasOutputType();
        com.google.protobuf.CodedOutputStream codedOutputStream2 = null;
        methodDescriptorProto0.writeTo(codedOutputStream2);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder4 = methodDescriptorProto0.toBuilder();
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder6 = builder4.setOutputType("java.nio.HeapFloatBuffer[pos=0 lim=6 cap=6]");
        java.io.InputStream inputStream7 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite8 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions9 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(inputStream7, extensionRegistryLite8);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder10 = builder6.mergeOptions(methodOptions9);
        java.util.Map<com.google.protobuf.Descriptors.FieldDescriptor, java.lang.Object> fieldDescriptorMap11 = builder10.getAllFields();
        java.util.Map<com.google.protobuf.Descriptors.FieldDescriptor, java.lang.Object> fieldDescriptorMap12 = builder10.getAllFields();
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder14 = builder10.setName("/tmp/hi!6894515710367881997ISO");
        boolean boolean15 = builder10.hasInputType();
        java.lang.String str16 = builder10.getInputType();
        org.junit.Assert.assertNotNull(methodDescriptorProto0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(methodOptions9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(fieldDescriptorMap11);
        org.junit.Assert.assertNotNull(fieldDescriptorMap12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test2698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2698");
        java.net.SocketException socketException1 = new java.net.SocketException("Named type with empty name component");
        java.security.NoSuchAlgorithmException noSuchAlgorithmException2 = new java.security.NoSuchAlgorithmException((java.lang.Throwable) socketException1);
    }

    @Test
    public void test2699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2699");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy5 = null;
        compilerOptions0.variableRenaming = variableRenamingPolicy5;
        compilerOptions0.setSummaryDetailLevel(999);
        compilerOptions0.setRemoveClosureAsserts(false);
        boolean boolean11 = compilerOptions0.moveFunctionDeclarations;
        compilerOptions0.exportTestFunctions = true;
        compilerOptions0.deadAssignmentElimination = true;
        boolean boolean16 = compilerOptions0.removeTryCatchFinally;
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(false);
        org.junit.Assert.assertNotNull(errorFormat3);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test2700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2700");
        java.io.File file2 = null;
        java.io.File file3 = java.io.File.createTempFile("hi!", "ISO", file2);
        boolean boolean6 = file3.setWritable(false, false);
        java.net.URI uRI7 = file3.toURI();
        java.lang.String str8 = uRI7.getSchemeSpecificPart();
        java.lang.String str9 = uRI7.getRawQuery();
        int int10 = uRI7.getPort();
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file3.toString(), "/tmp/hi!2108501188532967903ISO");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(uRI7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "/tmp/hi!2108501188532967903ISO" + "'", str8, "/tmp/hi!2108501188532967903ISO");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test2701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2701");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean5 = node4.isStringKey();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean10 = node9.isVar();
        com.google.javascript.rhino.Node[] nodeArray11 = new com.google.javascript.rhino.Node[] { node4, node9 };
        com.google.javascript.rhino.Node node12 = new com.google.javascript.rhino.Node(10, nodeArray11);
        boolean boolean13 = node12.isInc();
        boolean boolean14 = node12.isTypeOf();
        boolean boolean15 = node12.isRegExp();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(nodeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test2702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2702");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions1 = com.google.protobuf.DescriptorProtos.EnumValueOptions.parseFrom(inputStream0);
        org.junit.Assert.assertNotNull(enumValueOptions1);
    }

    @Test
    public void test2703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2703");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) ' ');
        boolean boolean2 = charBuffer1.isDirect();
        java.nio.CharBuffer charBuffer4 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer6 = charBuffer4.put('a');
        char[] charArray8 = new char[] { '4' };
        java.nio.CharBuffer charBuffer9 = charBuffer6.get(charArray8);
        java.nio.CharBuffer charBuffer10 = charBuffer6.compact();
        java.nio.CharBuffer charBuffer12 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer14 = charBuffer12.put('a');
        java.nio.CharBuffer charBuffer16 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer18 = charBuffer16.put('a');
        char[] charArray20 = new char[] { '4' };
        java.nio.CharBuffer charBuffer21 = charBuffer18.get(charArray20);
        java.nio.CharBuffer charBuffer22 = charBuffer18.compact();
        com.google.common.collect.ImmutableSet<java.lang.Appendable> appendableSet23 = com.google.common.collect.ImmutableSet.of((java.lang.Appendable) charBuffer1, (java.lang.Appendable) charBuffer6, (java.lang.Appendable) charBuffer12, (java.lang.Appendable) charBuffer22);
        java.nio.CharBuffer charBuffer24 = java.nio.CharBuffer.wrap((java.lang.CharSequence) charBuffer6);
        char[] charArray31 = new char[] { 'x', '\000', '0', 'a', '0', '4' };
        // The following exception was thrown during execution in test generation
        try {
            java.nio.CharBuffer charBuffer34 = charBuffer6.put(charArray31, (int) (byte) 100, 101);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charBuffer4);
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer9);
        org.junit.Assert.assertNotNull(charBuffer10);
        org.junit.Assert.assertNotNull(charBuffer12);
        org.junit.Assert.assertNotNull(charBuffer14);
        org.junit.Assert.assertNotNull(charBuffer16);
        org.junit.Assert.assertNotNull(charBuffer18);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer21);
        org.junit.Assert.assertNotNull(charBuffer22);
        org.junit.Assert.assertNotNull(appendableSet23);
        org.junit.Assert.assertNotNull(charBuffer24);
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "x\0000a04");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "x\0000a04");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[x, \000, 0, a, 0, 4]");
    }

    @Test
    public void test2704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2704");
        com.google.protobuf.Descriptors.Descriptor descriptor0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto1 = descriptor0.toProto();
        boolean boolean2 = descriptorProto1.isInitialized();
        com.google.protobuf.DescriptorProtos.MessageOptions messageOptions3 = descriptorProto1.getOptions();
        com.google.protobuf.DescriptorProtos.MessageOptions.Builder builder4 = messageOptions3.newBuilderForType();
        com.google.protobuf.DescriptorProtos.MessageOptions.Builder builder6 = builder4.setMessageSetWireFormat(false);
        com.google.protobuf.DescriptorProtos.MessageOptions.Builder builder7 = builder6.clone();
        java.util.List<com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder> builderList8 = builder6.getUninterpretedOptionBuilderList();
        org.junit.Assert.assertNotNull(descriptor0);
        org.junit.Assert.assertNotNull(descriptorProto1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(messageOptions3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builderList8);
    }

    @Test
    public void test2705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2705");
        byte[] byteArray0 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions2 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray0, extensionRegistryLite1);
        com.google.protobuf.CodedInputStream codedInputStream5 = com.google.protobuf.CodedInputStream.newInstance(byteArray0, 16, (int) 'a');
        codedInputStream5.resetSizeCounter();
        // The following exception was thrown during execution in test generation
        try {
            long long7 = codedInputStream5.readSInt64();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 16");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(methodOptions2);
        org.junit.Assert.assertNotNull(codedInputStream5);
    }

    @Test
    public void test2706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2706");
        com.google.protobuf.Descriptors.Descriptor descriptor0 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.getDescriptor();
        java.util.List<com.google.protobuf.Descriptors.Descriptor> descriptorList1 = descriptor0.getNestedTypes();
        org.junit.Assert.assertNotNull(descriptor0);
        org.junit.Assert.assertNotNull(descriptorList1);
    }

    @Test
    public void test2707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2707");
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative0 = com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE;
        org.junit.Assert.assertTrue("'" + jSTypeNative0 + "' != '" + com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE + "'", jSTypeNative0.equals(com.google.javascript.rhino.jstype.JSTypeNative.BOOLEAN_TYPE));
    }

    @Test
    public void test2708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2708");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.of(localDateTime4, (java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime10.withHour(16);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime13 = zonedDateTime12.toLocalDateTime();
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset17);
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset22);
        java.time.ZonedDateTime zonedDateTime24 = java.time.ZonedDateTime.of(localDateTime18, (java.time.ZoneId) zoneOffset22);
        java.time.ZonedDateTime zonedDateTime26 = zonedDateTime24.withYear((int) (short) 1);
        java.time.temporal.ChronoField chronoField27 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit28 = chronoField27.getBaseUnit();
        java.time.ZonedDateTime zonedDateTime29 = zonedDateTime24.truncatedTo(temporalUnit28);
        java.time.Duration duration30 = temporalUnit28.getDuration();
        long long31 = duration30.toDays();
        java.time.Duration duration32 = duration30.abs();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime33 = localDateChronoLocalDateTime13.minus((java.time.temporal.TemporalAmount) duration32);
        java.time.Duration duration35 = duration32.plusDays(16L);
        java.time.ZoneOffset zoneOffset39 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime40 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset39);
        java.time.ZoneOffset zoneOffset44 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime45 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset44);
        java.time.ZonedDateTime zonedDateTime46 = java.time.ZonedDateTime.of(localDateTime40, (java.time.ZoneId) zoneOffset44);
        java.time.ZonedDateTime zonedDateTime48 = zonedDateTime46.withYear((int) (short) 1);
        java.time.temporal.ChronoField chronoField49 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit50 = chronoField49.getBaseUnit();
        java.time.ZonedDateTime zonedDateTime51 = zonedDateTime46.truncatedTo(temporalUnit50);
        java.time.Duration duration52 = temporalUnit50.getDuration();
        long long53 = duration52.toDays();
        java.time.Duration duration55 = duration52.minusDays(999L);
        boolean boolean56 = duration52.isZero();
        long long57 = duration52.toMillis();
        java.time.Duration duration59 = duration52.minusNanos((long) 7);
        java.time.Duration duration60 = duration32.plus(duration59);
        long long61 = duration59.toDays();
        java.time.Duration duration63 = duration59.plusHours(0L);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime13);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zonedDateTime24);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertTrue("'" + chronoField27 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField27.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit28 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit28.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(zonedDateTime29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(zoneOffset39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(zoneOffset44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(zonedDateTime46);
        org.junit.Assert.assertNotNull(zonedDateTime48);
        org.junit.Assert.assertTrue("'" + chronoField49 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField49.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit50 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit50.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(zonedDateTime51);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 3600000L + "'", long57 == 3600000L);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(duration63);
    }

    @Test
    public void test2709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2709");
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder1 = builder0.clearCcGenericServices();
        boolean boolean2 = builder0.isInitialized();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder4 = builder0.setCcGenericServices(true);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder5 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label6 = builder5.getLabel();
        com.google.protobuf.ByteString byteString7 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder8 = builder5.mergeFrom(byteString7);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite9 = null;
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder10 = builder4.mergeFrom(byteString7, extensionRegistryLite9);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite11 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions12 = com.google.protobuf.DescriptorProtos.EnumValueOptions.parseFrom(byteString7, extensionRegistryLite11);
        int int13 = enumValueOptions12.getSerializedSize();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + label6 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label6.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(byteString7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(enumValueOptions12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test2710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2710");
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.newBuilder();
        java.io.InputStream inputStream1 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite2 = null;
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder3 = builder0.mergeFrom(inputStream1, extensionRegistryLite2);
        boolean boolean4 = builder3.hasOptions();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder5 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder6 = builder5.clearCcGenericServices();
        boolean boolean7 = builder5.isInitialized();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder9 = builder5.setCcGenericServices(true);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder10 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label11 = builder10.getLabel();
        com.google.protobuf.ByteString byteString12 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder13 = builder10.mergeFrom(byteString12);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite14 = null;
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder15 = builder9.mergeFrom(byteString12, extensionRegistryLite14);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite16 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions17 = com.google.protobuf.DescriptorProtos.EnumValueOptions.parseFrom(byteString12, extensionRegistryLite16);
        java.util.List<com.google.protobuf.DescriptorProtos.UninterpretedOption> uninterpretedOptionList18 = enumValueOptions17.getUninterpretedOptionList();
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions19 = enumValueOptions17.getDefaultInstanceForType();
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder20 = builder3.mergeOptions(enumValueOptions19);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + label11 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label11.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(byteString12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(enumValueOptions17);
        org.junit.Assert.assertNotNull(uninterpretedOptionList18);
        org.junit.Assert.assertNotNull(enumValueOptions19);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test2711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2711");
        com.google.common.collect.ImmutableMap.Builder<java.util.stream.LongStream, com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder> longStreamBuilder0 = com.google.common.collect.ImmutableMap.builder();
        java.util.stream.LongStream longStream3 = java.util.stream.LongStream.rangeClosed((long) 10, 4L);
        byte[] byteArray4 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite5 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions6 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray4, extensionRegistryLite5);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite7 = null;
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto enumDescriptorProto8 = com.google.protobuf.DescriptorProtos.EnumDescriptorProto.parseFrom(byteArray4, extensionRegistryLite7);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder9 = com.google.protobuf.DescriptorProtos.EnumDescriptorProto.newBuilder(enumDescriptorProto8);
        com.google.common.collect.ImmutableMap.Builder<java.util.stream.LongStream, com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder> longStreamBuilder10 = longStreamBuilder0.put(longStream3, builder9);
        com.google.protobuf.Descriptors.Descriptor descriptor11 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto12 = descriptor11.toProto();
        boolean boolean13 = descriptorProto12.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList14 = descriptorProto12.getNestedTypeList();
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder15 = builder9.mergeFrom((com.google.protobuf.Message) descriptorProto12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: mergeFrom(Message) can only merge messages of the same type.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStreamBuilder0);
        org.junit.Assert.assertNotNull(longStream3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(methodOptions6);
        org.junit.Assert.assertNotNull(enumDescriptorProto8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(longStreamBuilder10);
        org.junit.Assert.assertNotNull(descriptor11);
        org.junit.Assert.assertNotNull(descriptorProto12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList14);
    }

    @Test
    public void test2712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2712");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions1 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream0);
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder2 = enumOptions1.toBuilder();
        java.util.List<com.google.protobuf.DescriptorProtos.UninterpretedOption> uninterpretedOptionList3 = enumOptions1.getUninterpretedOptionList();
        org.junit.Assert.assertNotNull(enumOptions1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(uninterpretedOptionList3);
    }

    @Test
    public void test2713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2713");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label1 = builder0.getLabel();
        java.io.InputStream inputStream2 = null;
        com.google.protobuf.MessageLite.Builder builder3 = builder0.mergeFrom(inputStream2);
        com.google.protobuf.UnknownFieldSet unknownFieldSet4 = null;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder5 = builder0.setUnknownFields(unknownFieldSet4);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder6 = builder5.clear();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder7 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label8 = builder7.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto9 = builder7.buildPartial();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder10 = fieldDescriptorProto9.newBuilderForType();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder11 = fieldDescriptorProto9.newBuilderForType();
        com.google.protobuf.UnknownFieldSet unknownFieldSet12 = builder11.getUnknownFields();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder13 = builder5.mergeUnknownFields(unknownFieldSet12);
        boolean boolean14 = builder13.hasDefaultValue();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + label1 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label1.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + label8 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label8.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(unknownFieldSet12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test2714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2714");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.of(localDateTime4, (java.time.ZoneId) zoneOffset8);
        java.time.temporal.ChronoField chronoField12 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit13 = chronoField12.getBaseUnit();
        java.time.LocalDateTime localDateTime14 = localDateTime4.plus((long) 1970, temporalUnit13);
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset19);
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset24);
        java.time.ZonedDateTime zonedDateTime26 = java.time.ZonedDateTime.of(localDateTime20, (java.time.ZoneId) zoneOffset24);
        java.time.temporal.ChronoField chronoField28 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit29 = chronoField28.getBaseUnit();
        java.time.LocalDateTime localDateTime30 = localDateTime20.plus((long) 1970, temporalUnit29);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime31 = localDateTime14.minus((long) 43, temporalUnit29);
        java.time.ZoneOffset zoneOffset35 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime36 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset35);
        java.time.ZoneOffset zoneOffset40 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime41 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset40);
        java.time.ZonedDateTime zonedDateTime42 = java.time.ZonedDateTime.of(localDateTime36, (java.time.ZoneId) zoneOffset40);
        java.time.temporal.ChronoField chronoField43 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        boolean boolean44 = localDateTime36.isSupported((java.time.temporal.TemporalField) chronoField43);
        java.time.LocalDateTime localDateTime46 = localDateTime36.plusHours((long) 9);
        boolean boolean47 = localDateTime14.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime36);
        java.time.Instant instant48 = java.time.Instant.EPOCH;
        java.nio.file.attribute.FileTime fileTime49 = java.nio.file.attribute.FileTime.from(instant48);
        java.time.Instant instant51 = java.time.Instant.ofEpochSecond((long) (-1));
        java.time.Instant instant53 = instant51.plusMillis((long) (byte) -1);
        boolean boolean54 = instant48.isBefore(instant53);
        java.time.ZoneOffset zoneOffset60 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime61 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset60);
        java.time.ZoneOffset zoneOffset65 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime66 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset65);
        java.time.ZonedDateTime zonedDateTime67 = java.time.ZonedDateTime.of(localDateTime61, (java.time.ZoneId) zoneOffset65);
        java.time.chrono.Chronology chronology68 = java.time.chrono.Chronology.from((java.time.temporal.TemporalAccessor) zoneOffset65);
        java.time.LocalDateTime localDateTime69 = java.time.LocalDateTime.ofEpochSecond((long) 6, (int) 'a', zoneOffset65);
        java.time.OffsetTime offsetTime70 = java.time.OffsetTime.ofInstant(instant53, (java.time.ZoneId) zoneOffset65);
        java.time.ZoneOffset zoneOffset74 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime75 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset74);
        java.time.ZoneOffset zoneOffset79 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime80 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset79);
        java.time.ZonedDateTime zonedDateTime81 = java.time.ZonedDateTime.of(localDateTime75, (java.time.ZoneId) zoneOffset79);
        java.time.chrono.Chronology chronology82 = java.time.chrono.Chronology.from((java.time.temporal.TemporalAccessor) zoneOffset79);
        java.time.ZonedDateTime zonedDateTime83 = java.time.ZonedDateTime.ofLocal(localDateTime36, (java.time.ZoneId) zoneOffset65, zoneOffset79);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertTrue("'" + chronoField12 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField12.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit13 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit13.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertTrue("'" + chronoField28 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField28.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit29 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit29.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime31);
        org.junit.Assert.assertNotNull(zoneOffset35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(zoneOffset40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(zonedDateTime42);
        org.junit.Assert.assertTrue("'" + chronoField43 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField43.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(fileTime49);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertNotNull(instant53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(zoneOffset60);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(zoneOffset65);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(zonedDateTime67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(offsetTime70);
        org.junit.Assert.assertNotNull(zoneOffset74);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(zoneOffset79);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(zonedDateTime81);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(zonedDateTime83);
    }

    @Test
    public void test2715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2715");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo sourceCodeInfo2 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.parseFrom(inputStream0, extensionRegistryLite1);
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder3 = sourceCodeInfo2.newBuilderForType();
        com.google.protobuf.UnknownFieldSet unknownFieldSet4 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder5 = builder3.setUnknownFields(unknownFieldSet4);
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.Builder builder7 = builder3.addLocationBuilder(0);
        java.io.File file10 = null;
        java.io.File file11 = java.io.File.createTempFile("hi!", "ISO", file10);
        boolean boolean14 = file11.setWritable(false, false);
        java.net.URI uRI15 = file11.toURI();
        java.io.PrintStream printStream16 = new java.io.PrintStream(file11);
        printStream16.print((int) (byte) 0);
        printStream16.print(10.0d);
        printStream16.close();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        boolean boolean28 = strSet26.isEmpty();
        java.nio.ByteBuffer byteBuffer30 = java.nio.ByteBuffer.allocate(100);
        boolean boolean31 = strSet26.equals((java.lang.Object) byteBuffer30);
        java.nio.IntBuffer intBuffer32 = byteBuffer30.asIntBuffer();
        double double33 = byteBuffer30.getDouble();
        java.nio.ByteBuffer byteBuffer36 = byteBuffer30.put((int) (short) 1, (byte) 1);
        byte[] byteArray37 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite38 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions39 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray37, extensionRegistryLite38);
        com.google.protobuf.CodedOutputStream codedOutputStream42 = com.google.protobuf.CodedOutputStream.newInstance(byteArray37, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite43 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto44 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray37, extensionRegistryLite43);
        com.google.protobuf.CodedOutputStream codedOutputStream45 = com.google.protobuf.CodedOutputStream.newInstance(byteArray37);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer30.get(byteArray37);
        printStream16.write(byteArray37, (int) '/', (int) (byte) 1);
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.Builder builder50 = builder7.mergeFrom(byteArray37);
        int int51 = builder50.getSpanCount();
        org.junit.Assert.assertNotNull(sourceCodeInfo2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(file11);
        org.junit.Assert.assertEquals(file11.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file11.toString(), "/tmp/hi!3954608663937876168ISO");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(uRI15);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(intBuffer32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(methodOptions39);
        org.junit.Assert.assertNotNull(codedOutputStream42);
        org.junit.Assert.assertNotNull(fileDescriptorProto44);
        org.junit.Assert.assertNotNull(codedOutputStream45);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
    }

    @Test
    public void test2716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2716");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType4 = jSTypeRegistry2.createObjectType(objectType3);
        jSTypeRegistry2.identifyNonNullableName("/");
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.ErrorReporter errorReporter11 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry13 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter11, false);
        com.google.javascript.rhino.jstype.ObjectType objectType14 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType15 = jSTypeRegistry13.createObjectType(objectType14);
        com.google.javascript.rhino.ErrorReporter errorReporter16 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry18 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter16, false);
        com.google.javascript.rhino.jstype.ObjectType objectType19 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType20 = jSTypeRegistry18.createObjectType(objectType19);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair21 = objectType15.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType20);
        java.lang.String str22 = objectType20.getDisplayName();
        java.util.Collection<com.google.javascript.rhino.jstype.FunctionType> functionTypeCollection23 = jSTypeRegistry10.getDirectImplementors(objectType20);
        boolean boolean24 = objectType20.isAllType();
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter26 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter26, false);
        com.google.javascript.rhino.jstype.ObjectType objectType29 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType30 = jSTypeRegistry28.createObjectType(objectType29);
        com.google.javascript.rhino.jstype.JSType jSType31 = objectType20.forceResolve(errorReporter25, (com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>) objectType30);
        jSTypeRegistry2.registerPropertyOnType("/", (com.google.javascript.rhino.jstype.JSType) objectType20);
        com.google.javascript.rhino.jstype.ObjectType.Property property34 = objectType20.getSlot("(1970-01-01+00:00:52)");
        org.junit.Assert.assertNotNull(objectType4);
        org.junit.Assert.assertNotNull(objectType15);
        org.junit.Assert.assertNotNull(objectType20);
        org.junit.Assert.assertNotNull(typePair21);
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(functionTypeCollection23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objectType30);
        org.junit.Assert.assertNotNull(jSType31);
        org.junit.Assert.assertNull(property34);
    }

    @Test
    public void test2717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2717");
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions fileOptions1 = builder0.getDefaultInstanceForType();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder3 = builder0.setPyGenericServices(false);
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder4 = builder3.clearJavaMultipleFiles();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder5 = builder4.clearJavaGenericServices();
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor6 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int7 = builder5.getRepeatedFieldCount(fieldDescriptor6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(fileOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test2718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2718");
        com.google.javascript.jscomp.SourceMap.LocationMapping locationMapping2 = new com.google.javascript.jscomp.SourceMap.LocationMapping("type", "");
    }

    @Test
    public void test2719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2719");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.OffsetDateTime offsetDateTime8 = offsetDateTime6.minusDays((long) (short) 100);
        java.lang.String str9 = offsetDateTime6.toString();
        java.time.ZoneOffset zoneOffset10 = offsetDateTime6.getOffset();
        java.time.LocalTime localTime11 = offsetDateTime6.toLocalTime();
        java.time.Period period12 = java.time.Period.ZERO;
        java.time.Period period14 = period12.plusMonths(0L);
        java.time.LocalTime localTime15 = localTime11.plus((java.time.temporal.TemporalAmount) period14);
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset19);
        int int21 = localDateTime20.getYear();
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime26 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset25);
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset30);
        java.time.ZonedDateTime zonedDateTime32 = java.time.ZonedDateTime.of(localDateTime26, (java.time.ZoneId) zoneOffset30);
        boolean boolean33 = localDateTime20.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime26);
        java.time.ZoneOffset zoneOffset37 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset37);
        int int39 = localDateTime38.getYear();
        java.time.LocalDate localDate40 = localDateTime38.toLocalDate();
        int int41 = localDateTime20.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime38);
        java.time.temporal.ChronoField chronoField42 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit43 = chronoField42.getBaseUnit();
        long long44 = localDateTime20.getLong((java.time.temporal.TemporalField) chronoField42);
        boolean boolean45 = localTime11.isSupported((java.time.temporal.TemporalField) chronoField42);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(offsetDateTime8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-01T00:00:52+00:00:52" + "'", str9, "1970-01-01T00:00:52+00:00:52");
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1970 + "'", int21 == 1970);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(zonedDateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(zoneOffset37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1970 + "'", int39 == 1970);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + chronoField42 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField42.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit43 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit43.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 12L + "'", long44 == 12L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test2720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2720");
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto0 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.getDefaultInstance();
        boolean boolean1 = methodDescriptorProto0.hasOutputType();
        com.google.protobuf.CodedOutputStream codedOutputStream2 = null;
        methodDescriptorProto0.writeTo(codedOutputStream2);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder4 = methodDescriptorProto0.toBuilder();
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder6 = builder4.setOutputType("java.nio.HeapFloatBuffer[pos=0 lim=6 cap=6]");
        byte[] byteArray7 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite8 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions9 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray7, extensionRegistryLite8);
        com.google.protobuf.DescriptorProtos.UninterpretedOption uninterpretedOption10 = com.google.protobuf.DescriptorProtos.UninterpretedOption.parseFrom(byteArray7);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder11 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label12 = builder11.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto13 = builder11.buildPartial();
        int int14 = fieldDescriptorProto13.getSerializedSize();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder15 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto13);
        java.io.InputStream inputStream16 = null;
        java.io.InputStream inputStream17 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite18 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location19 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream17, extensionRegistryLite18);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder20 = builder15.mergeFrom(inputStream16, extensionRegistryLite18);
        com.google.javascript.jscomp.FunctionInformationMap functionInformationMap21 = com.google.javascript.jscomp.FunctionInformationMap.parseFrom(byteArray7, extensionRegistryLite18);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder22 = builder4.mergeFrom(byteArray7);
        java.lang.String str23 = builder22.getInputType();
        org.junit.Assert.assertNotNull(methodDescriptorProto0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(methodOptions9);
        org.junit.Assert.assertNotNull(uninterpretedOption10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + label12 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label12.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(extensionRegistryLite18);
        org.junit.Assert.assertNotNull(location19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(functionInformationMap21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
    }

    @Test
    public void test2721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2721");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder1 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label2 = builder1.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto3 = builder1.buildPartial();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder4 = fieldDescriptorProto3.newBuilderForType();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder5 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto3);
        java.io.File file8 = null;
        java.io.File file9 = java.io.File.createTempFile("hi!", "ISO", file8);
        boolean boolean12 = file9.setWritable(false, false);
        java.net.URI uRI13 = file9.toURI();
        java.io.PrintStream printStream14 = new java.io.PrintStream(file9);
        printStream14.print((int) (byte) 0);
        printStream14.print(10.0d);
        printStream14.close();
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        boolean boolean26 = strSet24.isEmpty();
        java.nio.ByteBuffer byteBuffer28 = java.nio.ByteBuffer.allocate(100);
        boolean boolean29 = strSet24.equals((java.lang.Object) byteBuffer28);
        java.nio.IntBuffer intBuffer30 = byteBuffer28.asIntBuffer();
        double double31 = byteBuffer28.getDouble();
        java.nio.ByteBuffer byteBuffer34 = byteBuffer28.put((int) (short) 1, (byte) 1);
        byte[] byteArray35 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite36 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions37 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray35, extensionRegistryLite36);
        com.google.protobuf.CodedOutputStream codedOutputStream40 = com.google.protobuf.CodedOutputStream.newInstance(byteArray35, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite41 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto42 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray35, extensionRegistryLite41);
        com.google.protobuf.CodedOutputStream codedOutputStream43 = com.google.protobuf.CodedOutputStream.newInstance(byteArray35);
        java.nio.ByteBuffer byteBuffer44 = byteBuffer28.get(byteArray35);
        printStream14.write(byteArray35, (int) '/', (int) (byte) 1);
        java.io.InputStream inputStream48 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite49 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location50 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream48, extensionRegistryLite49);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder51 = builder5.mergeFrom(byteArray35, extensionRegistryLite49);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto enumValueDescriptorProto52 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.parseDelimitedFrom(inputStream0, extensionRegistryLite49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + label2 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label2.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(file9);
        org.junit.Assert.assertEquals(file9.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file9.toString(), "/tmp/hi!1129156139261056767ISO");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(uRI13);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(intBuffer30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 0.0d + "'", double31 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[]");
        org.junit.Assert.assertNotNull(methodOptions37);
        org.junit.Assert.assertNotNull(codedOutputStream40);
        org.junit.Assert.assertNotNull(fileDescriptorProto42);
        org.junit.Assert.assertNotNull(codedOutputStream43);
        org.junit.Assert.assertNotNull(byteBuffer44);
        org.junit.Assert.assertNotNull(extensionRegistryLite49);
        org.junit.Assert.assertNotNull(location50);
        org.junit.Assert.assertNotNull(builder51);
    }

    @Test
    public void test2722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2722");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer3 = charBuffer1.put('a');
        char[] charArray5 = new char[] { '4' };
        java.nio.CharBuffer charBuffer6 = charBuffer3.get(charArray5);
        java.nio.CharBuffer charBuffer7 = charBuffer3.compact();
        java.util.stream.IntStream intStream8 = charBuffer7.chars();
        java.util.OptionalInt optionalInt9 = intStream8.findFirst();
        // The following exception was thrown during execution in test generation
        try {
            int int10 = intStream8.sum();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(charBuffer3);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(charBuffer7);
        org.junit.Assert.assertNotNull(intStream8);
        org.junit.Assert.assertNotNull(optionalInt9);
    }

    @Test
    public void test2723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2723");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.of(localDateTime4, (java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime10.withYear((int) (short) 1);
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset16);
        int int18 = localDateTime17.getYear();
        java.time.LocalDate localDate19 = localDateTime17.toLocalDate();
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset23);
        java.time.ZoneOffset zoneOffset28 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset28);
        java.time.ZonedDateTime zonedDateTime30 = java.time.ZonedDateTime.of(localDateTime24, (java.time.ZoneId) zoneOffset28);
        java.time.temporal.ChronoField chronoField32 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit33 = chronoField32.getBaseUnit();
        java.time.LocalDateTime localDateTime34 = localDateTime24.plus((long) 1970, temporalUnit33);
        java.time.LocalTime localTime35 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localDateTime34);
        java.time.ZoneOffset zoneOffset39 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime40 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset39);
        java.time.OffsetDateTime offsetDateTime41 = java.time.OffsetDateTime.of(localDate19, localTime35, zoneOffset39);
        java.time.ZonedDateTime zonedDateTime42 = zonedDateTime10.withZoneSameInstant((java.time.ZoneId) zoneOffset39);
        java.time.ZoneOffset zoneOffset46 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime47 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset46);
        java.time.ZoneOffset zoneOffset51 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime52 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset51);
        java.time.ZonedDateTime zonedDateTime53 = java.time.ZonedDateTime.of(localDateTime47, (java.time.ZoneId) zoneOffset51);
        java.time.ZonedDateTime zonedDateTime55 = zonedDateTime53.plusDays((long) '4');
        java.time.ZonedDateTime zonedDateTime57 = zonedDateTime53.withMinute((int) '#');
        boolean boolean58 = zonedDateTime10.isAfter((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime57);
        java.time.ZoneOffset zoneOffset62 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime63 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset62);
        java.time.ZoneOffset zoneOffset67 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime68 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset67);
        java.time.ZonedDateTime zonedDateTime69 = java.time.ZonedDateTime.of(localDateTime63, (java.time.ZoneId) zoneOffset67);
        java.time.ZonedDateTime zonedDateTime71 = zonedDateTime69.plusDays((long) '4');
        boolean boolean72 = zonedDateTime57.isBefore((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime69);
        java.time.Month month73 = zonedDateTime69.getMonth();
        int int74 = month73.minLength();
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zonedDateTime30);
        org.junit.Assert.assertTrue("'" + chronoField32 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField32.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit33 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit33.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(zoneOffset39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(offsetDateTime41);
        org.junit.Assert.assertNotNull(zonedDateTime42);
        org.junit.Assert.assertNotNull(zoneOffset46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(zoneOffset51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(zonedDateTime53);
        org.junit.Assert.assertNotNull(zonedDateTime55);
        org.junit.Assert.assertNotNull(zonedDateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(zoneOffset62);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(zoneOffset67);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(zonedDateTime69);
        org.junit.Assert.assertNotNull(zonedDateTime71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + month73 + "' != '" + java.time.Month.JANUARY + "'", month73.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 31 + "'", int74 == 31);
    }

    @Test
    public void test2724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2724");
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto0 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.getDefaultInstance();
        boolean boolean1 = serviceDescriptorProto0.hasOptions();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder2 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.newBuilder(serviceDescriptorProto0);
        byte[] byteArray3 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite4 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions5 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray3, extensionRegistryLite4);
        com.google.protobuf.CodedInputStream codedInputStream8 = com.google.protobuf.CodedInputStream.newInstance(byteArray3, 16, (int) 'a');
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder9 = builder2.mergeFrom(byteArray3);
        java.util.List<com.google.protobuf.DescriptorProtos.MethodDescriptorProto> methodDescriptorProtoList10 = builder9.getMethodList();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder11 = builder9.clearMethod();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto12 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.getDefaultInstance();
        boolean boolean13 = serviceDescriptorProto12.hasOptions();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder14 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.newBuilder(serviceDescriptorProto12);
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto15 = builder14.buildPartial();
        com.google.protobuf.DescriptorProtos.ServiceOptions serviceOptions16 = builder14.getOptions();
        com.google.protobuf.DescriptorProtos.ServiceOptions.Builder builder17 = serviceOptions16.toBuilder();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder18 = builder11.setOptions(builder17);
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor19 = null;
        com.google.javascript.jscomp.SourceAst sourceAst20 = null;
        com.google.javascript.rhino.InputId inputId21 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput23 = new com.google.javascript.jscomp.CompilerInput(sourceAst20, inputId21, true);
        java.io.PrintStream printStream24 = null;
        com.google.javascript.jscomp.Compiler compiler25 = new com.google.javascript.jscomp.Compiler(printStream24);
        com.google.javascript.jscomp.ErrorManager errorManager26 = compiler25.getErrorManager();
        compilerInput23.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler25);
        compiler25.reportCodeChange();
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder29 = builder11.addRepeatedField(fieldDescriptor19, (java.lang.Object) compiler25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serviceDescriptorProto0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[]");
        org.junit.Assert.assertNotNull(methodOptions5);
        org.junit.Assert.assertNotNull(codedInputStream8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(methodDescriptorProtoList10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(serviceDescriptorProto12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(serviceDescriptorProto15);
        org.junit.Assert.assertNotNull(serviceOptions16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(errorManager26);
    }

    @Test
    public void test2725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2725");
        java.time.Month month1 = java.time.Month.APRIL;
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.of(37, month1, 10, (int) (short) 10, 4, 37, 1);
        java.time.ZoneOffset zoneOffset11 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset11);
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset16);
        java.time.ZonedDateTime zonedDateTime18 = java.time.ZonedDateTime.of(localDateTime12, (java.time.ZoneId) zoneOffset16);
        java.time.ZonedDateTime zonedDateTime20 = zonedDateTime18.minusSeconds((long) '#');
        java.time.ZoneOffset zoneOffset24 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset24);
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset29);
        java.time.ZonedDateTime zonedDateTime31 = java.time.ZonedDateTime.of(localDateTime25, (java.time.ZoneId) zoneOffset29);
        boolean boolean32 = zonedDateTime18.isBefore((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime31);
        java.time.ZoneOffset zoneOffset33 = zonedDateTime18.getOffset();
        java.time.Instant instant34 = localDateTime7.toInstant(zoneOffset33);
        java.time.LocalDateTime localDateTime36 = localDateTime7.plusNanos(16L);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime37 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean38 = localDateTime36.isEqual(localDateChronoLocalDateTime37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + month1 + "' != '" + java.time.Month.APRIL + "'", month1.equals(java.time.Month.APRIL));
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zonedDateTime18);
        org.junit.Assert.assertNotNull(zonedDateTime20);
        org.junit.Assert.assertNotNull(zoneOffset24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(zonedDateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(zoneOffset33);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(localDateTime36);
    }

    @Test
    public void test2726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2726");
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative0 = com.google.javascript.rhino.jstype.JSTypeNative.ARRAY_TYPE;
        org.junit.Assert.assertTrue("'" + jSTypeNative0 + "' != '" + com.google.javascript.rhino.jstype.JSTypeNative.ARRAY_TYPE + "'", jSTypeNative0.equals(com.google.javascript.rhino.jstype.JSTypeNative.ARRAY_TYPE));
    }

    @Test
    public void test2727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2727");
        int[] intArray4 = new int[] { 16, ':', 43, (short) 100 };
        java.util.stream.IntStream intStream5 = java.util.stream.IntStream.of(intArray4);
        java.util.stream.IntStream intStream6 = intStream5.parallel();
        java.util.Spliterator.OfInt ofInt7 = intStream6.spliterator();
        boolean boolean9 = ofInt7.hasCharacteristics(0);
        boolean boolean11 = ofInt7.hasCharacteristics(22);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[16, 58, 43, 100]");
        org.junit.Assert.assertNotNull(intStream5);
        org.junit.Assert.assertNotNull(intStream6);
        org.junit.Assert.assertNotNull(ofInt7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test2728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2728");
        java.security.ProtectionDomain protectionDomain0 = null;
        java.security.ProtectionDomain[] protectionDomainArray1 = new java.security.ProtectionDomain[] { protectionDomain0 };
        java.security.AccessControlContext accessControlContext2 = new java.security.AccessControlContext(protectionDomainArray1);
        java.security.DomainCombiner domainCombiner3 = accessControlContext2.getDomainCombiner();
        javax.security.auth.Subject subject4 = javax.security.auth.Subject.getSubject(accessControlContext2);
        org.junit.Assert.assertNotNull(protectionDomainArray1);
        org.junit.Assert.assertNull(domainCombiner3);
        org.junit.Assert.assertNull(subject4);
    }

    @Test
    public void test2729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2729");
        com.google.common.collect.Ordering<com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode> optimizeModeOrdering0 = com.google.common.collect.Ordering.natural();
        com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode optimizeMode1 = com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE;
        com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode optimizeMode2 = com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE;
        com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode optimizeMode3 = optimizeModeOrdering0.min(optimizeMode1, optimizeMode2);
        com.google.protobuf.Descriptors.EnumDescriptor enumDescriptor4 = optimizeMode2.getDescriptorForType();
        org.junit.Assert.assertNotNull(optimizeModeOrdering0);
        org.junit.Assert.assertTrue("'" + optimizeMode1 + "' != '" + com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE + "'", optimizeMode1.equals(com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE));
        org.junit.Assert.assertTrue("'" + optimizeMode2 + "' != '" + com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE + "'", optimizeMode2.equals(com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE));
        org.junit.Assert.assertTrue("'" + optimizeMode3 + "' != '" + com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE + "'", optimizeMode3.equals(com.google.protobuf.DescriptorProtos.FileOptions.OptimizeMode.CODE_SIZE));
        org.junit.Assert.assertNotNull(enumDescriptor4);
    }

    @Test
    public void test2730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2730");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset10);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.of(localDateTime11, (java.time.ZoneId) zoneOffset15);
        java.time.Clock clock18 = java.time.Clock.fixed(instant0, (java.time.ZoneId) zoneOffset15);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.now(clock18);
        java.time.LocalDate localDate20 = java.time.LocalDate.now(clock18);
        com.google.protobuf.Descriptors.Descriptor descriptor21 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto22 = descriptor21.toProto();
        boolean boolean23 = descriptorProto22.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList24 = descriptorProto22.getNestedTypeList();
        int int25 = descriptorProto22.getExtensionRangeCount();
        boolean boolean26 = localDate20.equals((java.lang.Object) descriptorProto22);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder27 = descriptorProto22.newBuilderForType();
        java.util.List<com.google.protobuf.DescriptorProtos.FieldDescriptorProto> fieldDescriptorProtoList28 = builder27.getExtensionList();
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.Builder builder29 = com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.newBuilder();
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder30 = builder27.addExtensionRange(builder29);
        com.google.protobuf.Descriptors.Descriptor descriptor31 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto32 = descriptor31.toProto();
        boolean boolean33 = descriptorProto32.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList34 = descriptorProto32.getNestedTypeList();
        int int35 = descriptorProto32.getExtensionCount();
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder36 = builder30.mergeFrom(descriptorProto32);
        java.io.InputStream inputStream37 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite38 = null;
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange extensionRange39 = com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.parseFrom(inputStream37, extensionRegistryLite38);
        int int40 = extensionRange39.getEnd();
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange extensionRange41 = extensionRange39.getDefaultInstanceForType();
        int int42 = extensionRange41.getEnd();
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder43 = builder36.addExtensionRange(extensionRange41);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder44 = builder43.clearNestedType();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder45 = builder43.addExtensionBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder46 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder48 = builder46.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder49 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label50 = builder49.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder51 = builder46.addExtension(builder49);
        boolean boolean52 = builder49.hasDefaultValue();
        java.io.InputStream inputStream53 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite54 = null;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder55 = builder49.mergeFrom(inputStream53, extensionRegistryLite54);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder56 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label57 = builder56.getLabel();
        com.google.protobuf.ByteString byteString58 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder59 = builder56.mergeFrom(byteString58);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite60 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location61 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(byteString58, extensionRegistryLite60);
        boolean boolean62 = byteString58.isEmpty();
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite63 = null;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder64 = builder49.mergeFrom(byteString58, extensionRegistryLite63);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite65 = null;
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder66 = builder43.mergeFrom(byteString58, extensionRegistryLite65);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(clock18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(descriptor21);
        org.junit.Assert.assertNotNull(descriptorProto22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(fieldDescriptorProtoList28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(descriptor31);
        org.junit.Assert.assertNotNull(descriptorProto32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(extensionRange39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(extensionRange41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertTrue("'" + label50 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label50.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertTrue("'" + label57 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label57.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(byteString58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(location61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder66);
    }

    @Test
    public void test2731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2731");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label1 = builder0.getLabel();
        com.google.protobuf.ByteString byteString2 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder3 = builder0.mergeFrom(byteString2);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite4 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location5 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(byteString2, extensionRegistryLite4);
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.Builder builder6 = location5.toBuilder();
        // The following exception was thrown during execution in test generation
        try {
            int int8 = location5.getPath(23);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 23");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + label1 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label1.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(byteString2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(location5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test2732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2732");
        byte[] byteArray0 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions2 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray0, extensionRegistryLite1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite3 = null;
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto enumDescriptorProto4 = com.google.protobuf.DescriptorProtos.EnumDescriptorProto.parseFrom(byteArray0, extensionRegistryLite3);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder5 = enumDescriptorProto4.newBuilderForType();
        java.util.List<com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto> enumValueDescriptorProtoList6 = enumDescriptorProto4.getValueList();
        int int7 = enumDescriptorProto4.getSerializedSize();
        java.lang.String str8 = enumDescriptorProto4.getName();
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto enumValueDescriptorProto10 = enumDescriptorProto4.getValue(10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(methodOptions2);
        org.junit.Assert.assertNotNull(enumDescriptorProto4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(enumValueDescriptorProtoList6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test2733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2733");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray6 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet7 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet7, strArray6);
        boolean boolean9 = strSet7.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream10 = strSet7.stream();
        java.lang.String str11 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet7);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap12 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList13 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap12);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap14 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList15 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap14);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(strStream10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(languageRangeList13);
        org.junit.Assert.assertNotNull(languageRangeList15);
    }

    @Test
    public void test2734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2734");
        java.time.LocalTime localTime0 = java.time.LocalTime.MIN;
        java.time.temporal.ChronoField chronoField1 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit2 = chronoField1.getBaseUnit();
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset6);
        java.time.ZoneOffset zoneOffset11 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset11);
        java.time.ZonedDateTime zonedDateTime13 = java.time.ZonedDateTime.of(localDateTime7, (java.time.ZoneId) zoneOffset11);
        java.time.ZonedDateTime zonedDateTime15 = zonedDateTime13.withYear((int) (short) 1);
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset19);
        int int21 = localDateTime20.getYear();
        java.time.LocalDate localDate22 = localDateTime20.toLocalDate();
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset26);
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime32 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset31);
        java.time.ZonedDateTime zonedDateTime33 = java.time.ZonedDateTime.of(localDateTime27, (java.time.ZoneId) zoneOffset31);
        java.time.temporal.ChronoField chronoField35 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit36 = chronoField35.getBaseUnit();
        java.time.LocalDateTime localDateTime37 = localDateTime27.plus((long) 1970, temporalUnit36);
        java.time.LocalTime localTime38 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localDateTime37);
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime43 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset42);
        java.time.OffsetDateTime offsetDateTime44 = java.time.OffsetDateTime.of(localDate22, localTime38, zoneOffset42);
        java.time.ZonedDateTime zonedDateTime45 = zonedDateTime13.withZoneSameInstant((java.time.ZoneId) zoneOffset42);
        boolean boolean46 = temporalUnit2.isSupportedBy((java.time.temporal.Temporal) zonedDateTime13);
        java.time.LocalTime localTime47 = zonedDateTime13.toLocalTime();
        int int48 = localTime47.toSecondOfDay();
        java.time.Period period49 = java.time.Period.ZERO;
        java.time.chrono.ChronoPeriod chronoPeriod50 = period49.normalized();
        java.time.chrono.ChronoPeriod chronoPeriod51 = chronoPeriod50.normalized();
        java.time.LocalTime localTime52 = localTime47.minus((java.time.temporal.TemporalAmount) chronoPeriod51);
        int int53 = localTime0.compareTo(localTime52);
        java.time.LocalTime localTime55 = localTime52.withNano(5);
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertTrue("'" + chronoField1 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField1.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit2 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit2.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(zoneOffset11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(zonedDateTime13);
        org.junit.Assert.assertNotNull(zonedDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1970 + "'", int21 == 1970);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(zonedDateTime33);
        org.junit.Assert.assertTrue("'" + chronoField35 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField35.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit36 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit36.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(offsetDateTime44);
        org.junit.Assert.assertNotNull(zonedDateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 152 + "'", int48 == 152);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(chronoPeriod50);
        org.junit.Assert.assertNotNull(chronoPeriod51);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(localTime55);
    }

    @Test
    public void test2735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2735");
        java.io.File file2 = null;
        java.io.File file3 = java.io.File.createTempFile("hi!", "ISO", file2);
        long long4 = file3.getTotalSpace();
        java.io.File file6 = new java.io.File(file3, "1970-01-01T00:02:32+00:00:52");
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file3.toString(), "/tmp/hi!1457021202120597470ISO");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 364740218880L + "'", long4 == 364740218880L);
// flaky:         org.junit.Assert.assertEquals(file6.getParent(), "/tmp/hi!1457021202120597470ISO");
// flaky:         org.junit.Assert.assertEquals(file6.toString(), "/tmp/hi!1457021202120597470ISO/1970-01-01T00:02:32+00:00:52");
    }

    @Test
    public void test2736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2736");
        java.time.temporal.ChronoField chronoField0 = java.time.temporal.ChronoField.OFFSET_SECONDS;
        java.time.temporal.TemporalUnit temporalUnit1 = chronoField0.getRangeUnit();
        long long3 = chronoField0.checkValidValue((long) 2);
        java.util.Locale locale7 = new java.util.Locale("", "NUMBER 52.0 0", "hi!");
        java.lang.String str8 = chronoField0.getDisplayName(locale7);
        java.util.Locale locale12 = new java.util.Locale("", "NUMBER 52.0 0", "hi!");
        java.util.Locale locale16 = new java.util.Locale("", "NUMBER 52.0 0", "hi!");
        java.lang.String str17 = locale12.getDisplayLanguage(locale16);
        java.util.Locale locale18 = locale16.stripExtensions();
        java.lang.String str19 = locale7.getDisplayScript(locale18);
        java.lang.String str20 = locale18.getScript();
        org.junit.Assert.assertTrue("'" + chronoField0 + "' != '" + java.time.temporal.ChronoField.OFFSET_SECONDS + "'", chronoField0.equals(java.time.temporal.ChronoField.OFFSET_SECONDS));
        org.junit.Assert.assertTrue("'" + temporalUnit1 + "' != '" + java.time.temporal.ChronoUnit.FOREVER + "'", temporalUnit1.equals(java.time.temporal.ChronoUnit.FOREVER));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 2L + "'", long3 == 2L);
        org.junit.Assert.assertEquals(locale7.toString(), "_NUMBER 52.0 0_hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "OffsetSeconds" + "'", str8, "OffsetSeconds");
        org.junit.Assert.assertEquals(locale12.toString(), "_NUMBER 52.0 0_hi!");
        org.junit.Assert.assertEquals(locale16.toString(), "_NUMBER 52.0 0_hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "_NUMBER 52.0 0_hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test2737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2737");
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.Builder builder0 = com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.newBuilder();
        java.io.InputStream inputStream1 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite2 = null;
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.Builder builder3 = builder0.mergeFrom(inputStream1, extensionRegistryLite2);
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.Builder builder4 = builder0.clearEnd();
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.Builder builder5 = builder4.clearEnd();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test2738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2738");
        com.google.javascript.rhino.Node node4 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean5 = node4.isStringKey();
        com.google.javascript.rhino.Node node6 = new com.google.javascript.rhino.Node(0, node4);
        java.lang.String str7 = node4.getSourceFileName();
        org.junit.Assert.assertNotNull(node4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test2739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2739");
        java.nio.FloatBuffer floatBuffer1 = java.nio.FloatBuffer.allocate(6);
        float[] floatArray2 = floatBuffer1.array();
        java.nio.FloatBuffer floatBuffer3 = java.nio.FloatBuffer.wrap(floatArray2);
        boolean boolean4 = floatBuffer3.hasArray();
        org.junit.Assert.assertNotNull(floatBuffer1);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
        org.junit.Assert.assertNotNull(floatBuffer3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test2740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2740");
        java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite> priorityMap0 = new java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite>();
        java.lang.Object obj1 = priorityMap0.clone();
        boolean boolean2 = priorityMap0.isEmpty();
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions3 = com.google.protobuf.DescriptorProtos.EnumValueOptions.getDefaultInstance();
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder4 = com.google.protobuf.DescriptorProtos.EnumValueOptions.newBuilder(enumValueOptions3);
        boolean boolean5 = priorityMap0.contains((java.lang.Object) enumValueOptions3);
        java.io.PrintStream printStream6 = null;
        com.google.javascript.jscomp.Compiler compiler7 = new com.google.javascript.jscomp.Compiler(printStream6);
        com.google.javascript.jscomp.SourceMap sourceMap8 = compiler7.getSourceMap();
        java.util.stream.LongStream longStream10 = java.util.stream.LongStream.of((long) (-1));
        com.google.common.collect.ImmutableMap<com.google.javascript.jscomp.Compiler, java.util.stream.LongStream> compilerMap11 = com.google.common.collect.ImmutableMap.of(compiler7, longStream10);
        java.time.chrono.IsoChronology isoChronology12 = java.time.chrono.IsoChronology.INSTANCE;
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset16);
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset21);
        java.time.ZonedDateTime zonedDateTime23 = java.time.ZonedDateTime.of(localDateTime17, (java.time.ZoneId) zoneOffset21);
        java.time.ZonedDateTime zonedDateTime25 = zonedDateTime23.withHour(16);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime26 = zonedDateTime25.toLocalDateTime();
        java.time.chrono.Chronology chronology27 = localDateChronoLocalDateTime26.getChronology();
        int int28 = isoChronology12.compareTo(chronology27);
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.MAX;
        java.time.LocalDate localDate30 = isoChronology12.dateNow((java.time.ZoneId) zoneOffset29);
        java.time.Period period34 = isoChronology12.period((int) ':', 171, (int) (short) 100);
        java.util.stream.LongStream longStream35 = compilerMap11.get((java.lang.Object) ':');
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean36 = priorityMap0.containsValue((java.lang.Object) longStream35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(enumValueOptions3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(sourceMap8);
        org.junit.Assert.assertNotNull(longStream10);
        org.junit.Assert.assertNotNull(compilerMap11);
        org.junit.Assert.assertNotNull(isoChronology12);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zonedDateTime23);
        org.junit.Assert.assertNotNull(zonedDateTime25);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNull(longStream35);
    }

    @Test
    public void test2741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2741");
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder1 = builder0.clearCcGenericServices();
        boolean boolean2 = builder0.isInitialized();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder4 = builder0.setCcGenericServices(true);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder5 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label6 = builder5.getLabel();
        com.google.protobuf.ByteString byteString7 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder8 = builder5.mergeFrom(byteString7);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite9 = null;
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder10 = builder4.mergeFrom(byteString7, extensionRegistryLite9);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite11 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions12 = com.google.protobuf.DescriptorProtos.EnumValueOptions.parseFrom(byteString7, extensionRegistryLite11);
        boolean boolean13 = enumValueOptions12.isInitialized();
        boolean boolean14 = enumValueOptions12.isInitialized();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + label6 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label6.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(byteString7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(enumValueOptions12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test2742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2742");
        java.security.NoSuchAlgorithmException noSuchAlgorithmException3 = new java.security.NoSuchAlgorithmException("1970-01-01");
        java.security.GeneralSecurityException generalSecurityException4 = new java.security.GeneralSecurityException("java.nio.ByteBufferAsDoubleBufferB[pos=0 lim=12 cap=12]", (java.lang.Throwable) noSuchAlgorithmException3);
        java.io.IOException iOException5 = new java.io.IOException("1969-12-31T23:59:58.999Z", (java.lang.Throwable) generalSecurityException4);
    }

    @Test
    public void test2743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2743");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset10);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.of(localDateTime11, (java.time.ZoneId) zoneOffset15);
        java.time.Clock clock18 = java.time.Clock.fixed(instant0, (java.time.ZoneId) zoneOffset15);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.now(clock18);
        java.time.LocalDate localDate20 = java.time.LocalDate.now(clock18);
        com.google.protobuf.Descriptors.Descriptor descriptor21 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto22 = descriptor21.toProto();
        boolean boolean23 = descriptorProto22.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList24 = descriptorProto22.getNestedTypeList();
        int int25 = descriptorProto22.getExtensionRangeCount();
        boolean boolean26 = localDate20.equals((java.lang.Object) descriptorProto22);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder27 = descriptorProto22.newBuilderForType();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList28 = builder27.getNestedTypeList();
        com.google.protobuf.UnknownFieldSet unknownFieldSet29 = builder27.getUnknownFields();
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder30 = builder27.addEnumTypeBuilder();
        com.google.protobuf.ByteString byteString31 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite32 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto33 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteString31, extensionRegistryLite32);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder34 = builder30.mergeFrom(byteString31);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder35 = builder34.clearValue();
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions36 = builder34.getOptions();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(clock18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(descriptor21);
        org.junit.Assert.assertNotNull(descriptorProto22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(descriptorProtoList28);
        org.junit.Assert.assertNotNull(unknownFieldSet29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(byteString31);
        org.junit.Assert.assertNotNull(fileDescriptorProto33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(enumOptions36);
    }

    @Test
    public void test2744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2744");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.of(localDateTime4, (java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime10.withYear((int) (short) 1);
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset16);
        int int18 = localDateTime17.getYear();
        java.time.LocalDate localDate19 = localDateTime17.toLocalDate();
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset23);
        java.time.ZoneOffset zoneOffset28 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset28);
        java.time.ZonedDateTime zonedDateTime30 = java.time.ZonedDateTime.of(localDateTime24, (java.time.ZoneId) zoneOffset28);
        java.time.temporal.ChronoField chronoField32 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit33 = chronoField32.getBaseUnit();
        java.time.LocalDateTime localDateTime34 = localDateTime24.plus((long) 1970, temporalUnit33);
        java.time.LocalTime localTime35 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localDateTime34);
        java.time.ZoneOffset zoneOffset39 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime40 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset39);
        java.time.OffsetDateTime offsetDateTime41 = java.time.OffsetDateTime.of(localDate19, localTime35, zoneOffset39);
        java.time.ZonedDateTime zonedDateTime42 = zonedDateTime10.withZoneSameInstant((java.time.ZoneId) zoneOffset39);
        java.time.Period period43 = java.time.Period.ZERO;
        java.time.Period period45 = period43.plusMonths(0L);
        int int46 = period43.getMonths();
        java.time.Period period48 = period43.multipliedBy(6);
        java.time.ZonedDateTime zonedDateTime49 = zonedDateTime10.plus((java.time.temporal.TemporalAmount) period43);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zonedDateTime30);
        org.junit.Assert.assertTrue("'" + chronoField32 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField32.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit33 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit33.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(zoneOffset39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(offsetDateTime41);
        org.junit.Assert.assertNotNull(zonedDateTime42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(zonedDateTime49);
    }

    @Test
    public void test2745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2745");
        com.google.protobuf.DescriptorProtos.UninterpretedOption.NamePart namePart0 = com.google.protobuf.DescriptorProtos.UninterpretedOption.NamePart.getDefaultInstance();
        boolean boolean1 = namePart0.hasIsExtension();
        java.lang.String str2 = namePart0.getNamePart();
        boolean boolean3 = namePart0.hasNamePart();
        org.junit.Assert.assertNotNull(namePart0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test2746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2746");
        java.io.File file2 = null;
        java.io.File file3 = java.io.File.createTempFile("hi!", "ISO", file2);
        boolean boolean6 = file3.setWritable(false, false);
        java.net.URI uRI7 = file3.toURI();
        java.lang.String str8 = uRI7.getSchemeSpecificPart();
        java.lang.String str9 = uRI7.getScheme();
        int int10 = uRI7.getPort();
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file3.toString(), "/tmp/hi!1280117996904531031ISO");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(uRI7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "/tmp/hi!1280117996904531031ISO" + "'", str8, "/tmp/hi!1280117996904531031ISO");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "file" + "'", str9, "file");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test2747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2747");
        com.google.javascript.jscomp.Compiler.CodeBuilder codeBuilder0 = new com.google.javascript.jscomp.Compiler.CodeBuilder();
    }

    @Test
    public void test2748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2748");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        java.io.InputStream inputStream1 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite2 = null;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder3 = builder0.mergeFrom(inputStream1, extensionRegistryLite2);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder5 = builder0.setNumber((int) (byte) -1);
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj7 = builder0.getField(fieldDescriptor6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test2749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2749");
        java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite> priorityMap0 = new java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite>();
        java.lang.Object obj1 = priorityMap0.clone();
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder2 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.newBuilder();
        boolean boolean3 = priorityMap0.containsValue((java.lang.Object) builder2);
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder5 = builder2.setName("java.nio.ByteBufferAsDoubleBufferB[pos=0 lim=12 cap=12]");
        com.google.protobuf.ByteString byteString6 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder7 = builder2.mergeFrom(byteString6);
        com.google.protobuf.DescriptorProtos.ServiceOptions serviceOptions8 = com.google.protobuf.DescriptorProtos.ServiceOptions.parseFrom(byteString6);
        boolean boolean9 = serviceOptions8.isInitialized();
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor10 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj11 = serviceOptions8.getField(fieldDescriptor10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "{}");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(byteString6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(serviceOptions8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test2750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2750");
        com.google.protobuf.DescriptorProtos.MessageOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.MessageOptions.newBuilder();
        java.io.InputStream inputStream1 = null;
        com.google.protobuf.DescriptorProtos.MessageOptions.Builder builder2 = builder0.mergeFrom(inputStream1);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.UninterpretedOptionOrBuilder uninterpretedOptionOrBuilder4 = builder2.getUninterpretedOptionOrBuilder(102);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 102");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test2751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2751");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type type0 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type.TYPE_BOOL;
        com.google.protobuf.Descriptors.EnumValueDescriptor enumValueDescriptor1 = type0.getValueDescriptor();
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto enumValueDescriptorProto2 = enumValueDescriptor1.toProto();
        java.lang.String str3 = enumValueDescriptor1.getFullName();
        org.junit.Assert.assertTrue("'" + type0 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type.TYPE_BOOL + "'", type0.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Type.TYPE_BOOL));
        org.junit.Assert.assertNotNull(enumValueDescriptor1);
        org.junit.Assert.assertNotNull(enumValueDescriptorProto2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "google.protobuf.FieldDescriptorProto.Type.TYPE_BOOL" + "'", str3, "google.protobuf.FieldDescriptorProto.Type.TYPE_BOOL");
    }

    @Test
    public void test2752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2752");
        com.google.protobuf.DescriptorProtos.UninterpretedOption.NamePart namePart0 = com.google.protobuf.DescriptorProtos.UninterpretedOption.NamePart.getDefaultInstance();
        boolean boolean1 = namePart0.hasNamePart();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.NamePart.Builder builder2 = namePart0.newBuilderForType();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = builder3.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder6 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label7 = builder6.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder8 = builder3.addExtension(builder6);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder9 = builder3.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder10 = builder9.getOptionsBuilder();
        java.io.InputStream inputStream11 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions12 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream11);
        boolean boolean13 = enumOptions12.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder14 = builder10.mergeFrom(enumOptions12);
        com.google.protobuf.UnknownFieldSet unknownFieldSet15 = builder10.getUnknownFields();
        com.google.protobuf.CodedOutputStream codedOutputStream16 = null;
        unknownFieldSet15.writeTo(codedOutputStream16);
        byte[] byteArray18 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite19 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions20 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray18, extensionRegistryLite19);
        com.google.protobuf.CodedOutputStream codedOutputStream23 = com.google.protobuf.CodedOutputStream.newInstance(byteArray18, (int) (short) 0, 1);
        com.google.protobuf.CodedOutputStream codedOutputStream26 = com.google.protobuf.CodedOutputStream.newInstance(byteArray18, (int) ' ', 0);
        java.io.InputStream inputStream27 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location28 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream27);
        boolean boolean29 = location28.isInitialized();
        codedOutputStream26.writeGroupNoTag((com.google.protobuf.MessageLite) location28);
        unknownFieldSet15.writeAsMessageSetTo(codedOutputStream26);
        byte[] byteArray32 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite33 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions34 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray32, extensionRegistryLite33);
        com.google.protobuf.CodedOutputStream codedOutputStream37 = com.google.protobuf.CodedOutputStream.newInstance(byteArray32, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite38 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto39 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray32, extensionRegistryLite38);
        com.google.protobuf.CodedOutputStream codedOutputStream40 = com.google.protobuf.CodedOutputStream.newInstance(byteArray32);
        unknownFieldSet15.writeAsMessageSetTo(codedOutputStream40);
        boolean boolean42 = unknownFieldSet15.isInitialized();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.NamePart.Builder builder43 = builder2.setUnknownFields(unknownFieldSet15);
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor44 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.UninterpretedOption.NamePart.Builder builder45 = builder43.clearField(fieldDescriptor44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namePart0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + label7 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label7.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(enumOptions12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(unknownFieldSet15);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(methodOptions20);
        org.junit.Assert.assertNotNull(codedOutputStream23);
        org.junit.Assert.assertNotNull(codedOutputStream26);
        org.junit.Assert.assertNotNull(location28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(methodOptions34);
        org.junit.Assert.assertNotNull(codedOutputStream37);
        org.junit.Assert.assertNotNull(fileDescriptorProto39);
        org.junit.Assert.assertNotNull(codedOutputStream40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test2753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2753");
        byte[] byteArray0 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions2 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray0, extensionRegistryLite1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite3 = null;
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto enumDescriptorProto4 = com.google.protobuf.DescriptorProtos.EnumDescriptorProto.parseFrom(byteArray0, extensionRegistryLite3);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder5 = enumDescriptorProto4.newBuilderForType();
        com.google.protobuf.Descriptors.Descriptor descriptor6 = builder5.getDescriptorForType();
        boolean boolean7 = builder5.hasName();
        boolean boolean8 = builder5.isInitialized();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(methodOptions2);
        org.junit.Assert.assertNotNull(enumDescriptorProto4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(descriptor6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test2754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2754");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.of(localDateTime4, (java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime10.plusDays((long) '4');
        java.time.ZonedDateTime zonedDateTime14 = zonedDateTime10.withMinute((int) '#');
        int int15 = zonedDateTime10.getMinute();
        java.time.ZonedDateTime zonedDateTime17 = zonedDateTime10.plusWeeks((long) 11);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(zonedDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(zonedDateTime17);
    }

    @Test
    public void test2755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2755");
        java.time.Clock clock0 = java.time.Clock.systemDefaultZone();
        java.time.ZonedDateTime zonedDateTime1 = java.time.ZonedDateTime.now(clock0);
        int int2 = zonedDateTime1.getMinute();
        java.time.Instant instant3 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime8 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset7);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime13 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset12);
        java.time.ZonedDateTime zonedDateTime14 = java.time.ZonedDateTime.of(localDateTime8, (java.time.ZoneId) zoneOffset12);
        java.time.temporal.ChronoField chronoField16 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit17 = chronoField16.getBaseUnit();
        java.time.LocalDateTime localDateTime18 = localDateTime8.plus((long) 1970, temporalUnit17);
        java.time.LocalDateTime localDateTime20 = localDateTime8.withHour((int) (short) 1);
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.OffsetDateTime offsetDateTime23 = java.time.OffsetDateTime.of(localDateTime8, zoneOffset22);
        java.time.OffsetTime offsetTime24 = java.time.OffsetTime.ofInstant(instant3, (java.time.ZoneId) zoneOffset22);
        java.time.Instant instant25 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset29 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset29);
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset34);
        java.time.ZonedDateTime zonedDateTime36 = java.time.ZonedDateTime.of(localDateTime30, (java.time.ZoneId) zoneOffset34);
        java.time.temporal.ChronoField chronoField38 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit39 = chronoField38.getBaseUnit();
        java.time.LocalDateTime localDateTime40 = localDateTime30.plus((long) 1970, temporalUnit39);
        java.time.LocalDateTime localDateTime42 = localDateTime30.withHour((int) (short) 1);
        java.time.ZoneOffset zoneOffset44 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.OffsetDateTime offsetDateTime45 = java.time.OffsetDateTime.of(localDateTime30, zoneOffset44);
        java.time.OffsetTime offsetTime46 = java.time.OffsetTime.ofInstant(instant25, (java.time.ZoneId) zoneOffset44);
        boolean boolean47 = offsetTime24.isAfter(offsetTime46);
        java.time.ZonedDateTime zonedDateTime48 = zonedDateTime1.with((java.time.temporal.TemporalAdjuster) offsetTime46);
        org.junit.Assert.assertNotNull(clock0);
        org.junit.Assert.assertNotNull(zonedDateTime1);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(zonedDateTime14);
        org.junit.Assert.assertTrue("'" + chronoField16 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField16.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit17 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit17.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(offsetDateTime23);
        org.junit.Assert.assertNotNull(offsetTime24);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(zoneOffset29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(zonedDateTime36);
        org.junit.Assert.assertTrue("'" + chronoField38 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField38.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit39 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit39.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(zoneOffset44);
        org.junit.Assert.assertNotNull(offsetDateTime45);
        org.junit.Assert.assertNotNull(offsetTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(zonedDateTime48);
    }

    @Test
    public void test2756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2756");
        com.google.javascript.jscomp.JSModule jSModule1 = new com.google.javascript.jscomp.JSModule("1970-01-01T00:00:00.000000032Z");
        int int2 = jSModule1.getDepth();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test2757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2757");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) ' ');
        boolean boolean2 = charBuffer1.isDirect();
        java.nio.CharBuffer charBuffer4 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer6 = charBuffer4.put('a');
        char[] charArray8 = new char[] { '4' };
        java.nio.CharBuffer charBuffer9 = charBuffer6.get(charArray8);
        java.nio.CharBuffer charBuffer10 = charBuffer6.compact();
        java.nio.CharBuffer charBuffer12 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer14 = charBuffer12.put('a');
        java.nio.CharBuffer charBuffer16 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer18 = charBuffer16.put('a');
        char[] charArray20 = new char[] { '4' };
        java.nio.CharBuffer charBuffer21 = charBuffer18.get(charArray20);
        java.nio.CharBuffer charBuffer22 = charBuffer18.compact();
        com.google.common.collect.ImmutableSet<java.lang.Appendable> appendableSet23 = com.google.common.collect.ImmutableSet.of((java.lang.Appendable) charBuffer1, (java.lang.Appendable) charBuffer6, (java.lang.Appendable) charBuffer12, (java.lang.Appendable) charBuffer22);
        java.time.ZoneOffset zoneOffset27 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset27);
        int int29 = localDateTime28.getYear();
        java.time.Instant instant30 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset34);
        java.time.OffsetDateTime offsetDateTime36 = java.time.OffsetDateTime.ofInstant(instant30, (java.time.ZoneId) zoneOffset34);
        java.time.Instant instant37 = localDateTime28.toInstant(zoneOffset34);
        boolean boolean38 = appendableSet23.equals((java.lang.Object) zoneOffset34);
        java.lang.Object[] objArray39 = appendableSet23.toArray();
        java.util.concurrent.TimeUnit timeUnit40 = java.util.concurrent.TimeUnit.HOURS;
        boolean boolean41 = appendableSet23.contains((java.lang.Object) timeUnit40);
        long long43 = timeUnit40.toDays((long) 407);
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charBuffer4);
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer9);
        org.junit.Assert.assertNotNull(charBuffer10);
        org.junit.Assert.assertNotNull(charBuffer12);
        org.junit.Assert.assertNotNull(charBuffer14);
        org.junit.Assert.assertNotNull(charBuffer16);
        org.junit.Assert.assertNotNull(charBuffer18);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer21);
        org.junit.Assert.assertNotNull(charBuffer22);
        org.junit.Assert.assertNotNull(appendableSet23);
        org.junit.Assert.assertNotNull(zoneOffset27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1970 + "'", int29 == 1970);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(offsetDateTime36);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000, \000\000, \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000, \000\000, \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000]");
        org.junit.Assert.assertNotNull(timeUnit40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 16L + "'", long43 == 16L);
    }

    @Test
    public void test2758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2758");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType4 = jSTypeRegistry2.createObjectType(objectType3);
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.jstype.ObjectType objectType8 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry7.createObjectType(objectType8);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair10 = objectType4.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType9);
        com.google.javascript.rhino.ErrorReporter errorReporter12 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter12, false);
        com.google.javascript.rhino.jstype.ObjectType objectType15 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType16 = jSTypeRegistry14.createObjectType(objectType15);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        com.google.javascript.rhino.jstype.ObjectType objectType20 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType21 = jSTypeRegistry19.createObjectType(objectType20);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair22 = objectType16.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType21);
        com.google.javascript.rhino.Node node23 = objectType16.getRootNode();
        com.google.javascript.rhino.jstype.EnumType enumType24 = objectType16.toMaybeEnumType();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean29 = node28.isStringKey();
        boolean boolean30 = node28.isThrow();
        boolean boolean31 = node28.isVarArgs();
        boolean boolean32 = node28.isStringKey();
        boolean boolean33 = objectType9.defineInferredProperty("Unknown class name", (com.google.javascript.rhino.jstype.JSType) objectType16, node28);
        objectType16.clearResolved();
        boolean boolean35 = objectType16.isInterface();
        boolean boolean37 = objectType16.isPropertyTypeInferred("16:00:52+00:00:52");
        com.google.javascript.rhino.ErrorReporter errorReporter38 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry40 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter38, false);
        com.google.javascript.rhino.jstype.ObjectType objectType41 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType42 = jSTypeRegistry40.createObjectType(objectType41);
        jSTypeRegistry40.identifyNonNullableName("/");
        com.google.javascript.rhino.ErrorReporter errorReporter45 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter45, false);
        com.google.javascript.rhino.jstype.ObjectType objectType48 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType49 = jSTypeRegistry47.createObjectType(objectType48);
        com.google.javascript.rhino.ErrorReporter errorReporter50 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry52 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter50, false);
        com.google.javascript.rhino.jstype.ObjectType objectType53 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType54 = jSTypeRegistry52.createObjectType(objectType53);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair55 = objectType49.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType54);
        com.google.javascript.rhino.Node node56 = objectType49.getRootNode();
        com.google.javascript.rhino.ErrorReporter errorReporter57 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry59 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter57, false);
        com.google.javascript.rhino.jstype.ObjectType objectType60 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType61 = jSTypeRegistry59.createObjectType(objectType60);
        com.google.javascript.rhino.ErrorReporter errorReporter62 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry64 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter62, false);
        com.google.javascript.rhino.jstype.ObjectType objectType65 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType66 = jSTypeRegistry64.createObjectType(objectType65);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair67 = objectType61.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType66);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue68 = objectType49.testForEquality((com.google.javascript.rhino.jstype.JSType) objectType61);
        com.google.javascript.rhino.jstype.JSType jSType73 = jSTypeRegistry40.getType((com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>) objectType49, "ISO", "Named type with empty name component", 256, 9);
        com.google.javascript.rhino.jstype.JSType jSType74 = objectType16.getLeastSupertype((com.google.javascript.rhino.jstype.JSType) objectType49);
        com.google.javascript.rhino.JSDocInfo jSDocInfo75 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean76 = jSDocInfo75.isExterns();
        jSDocInfo75.setLicense("ClockHourOfAmPm");
        objectType16.setJSDocInfo(jSDocInfo75);
        boolean boolean80 = jSDocInfo75.isConsistentIdGenerator();
        org.junit.Assert.assertNotNull(objectType4);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertNotNull(typePair10);
        org.junit.Assert.assertNotNull(objectType16);
        org.junit.Assert.assertNotNull(objectType21);
        org.junit.Assert.assertNotNull(typePair22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNull(enumType24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(objectType42);
        org.junit.Assert.assertNotNull(objectType49);
        org.junit.Assert.assertNotNull(objectType54);
        org.junit.Assert.assertNotNull(typePair55);
        org.junit.Assert.assertNull(node56);
        org.junit.Assert.assertNotNull(objectType61);
        org.junit.Assert.assertNotNull(objectType66);
        org.junit.Assert.assertNotNull(typePair67);
        org.junit.Assert.assertNotNull(ternaryValue68);
        org.junit.Assert.assertNotNull(jSType73);
        org.junit.Assert.assertNotNull(jSType74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test2759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2759");
        com.google.protobuf.DescriptorProtos.UninterpretedOption.NamePart namePart0 = com.google.protobuf.DescriptorProtos.UninterpretedOption.NamePart.getDefaultInstance();
        boolean boolean1 = namePart0.hasNamePart();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.NamePart.Builder builder2 = namePart0.newBuilderForType();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder3 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder4 = builder3.clearCcGenericServices();
        boolean boolean5 = builder3.isInitialized();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder7 = builder3.setCcGenericServices(true);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder8 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label9 = builder8.getLabel();
        com.google.protobuf.ByteString byteString10 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder11 = builder8.mergeFrom(byteString10);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite12 = null;
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder13 = builder7.mergeFrom(byteString10, extensionRegistryLite12);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite14 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions15 = com.google.protobuf.DescriptorProtos.EnumValueOptions.parseFrom(byteString10, extensionRegistryLite14);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite16 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto17 = com.google.protobuf.DescriptorProtos.DescriptorProto.parseFrom(byteString10, extensionRegistryLite16);
        com.google.protobuf.DescriptorProtos.UninterpretedOption.NamePart.Builder builder18 = builder2.mergeFrom(byteString10);
        com.google.protobuf.DescriptorProtos.UninterpretedOption.NamePart namePart19 = com.google.protobuf.DescriptorProtos.UninterpretedOption.NamePart.getDefaultInstance();
        java.lang.String str20 = namePart19.getNamePart();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.NamePart.Builder builder21 = builder18.mergeFrom(namePart19);
        java.lang.String str22 = builder21.getNamePart();
        org.junit.Assert.assertNotNull(namePart0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + label9 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label9.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(byteString10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(enumValueOptions15);
        org.junit.Assert.assertNotNull(extensionRegistryLite16);
        org.junit.Assert.assertNotNull(descriptorProto17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(namePart19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
    }

    @Test
    public void test2760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2760");
        com.google.javascript.jscomp.SourceFile sourceFile1 = com.google.javascript.jscomp.SourceFile.fromFile("/");
        java.lang.String str3 = sourceFile1.getLine((int) 'a');
        int int5 = sourceFile1.getLineOfOffset(43);
        boolean boolean6 = sourceFile1.isExtern();
        java.lang.String str7 = sourceFile1.getName();
        java.lang.String str8 = sourceFile1.toString();
        org.junit.Assert.assertNotNull(sourceFile1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "/" + "'", str7, "/");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "/" + "'", str8, "/");
    }

    @Test
    public void test2761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2761");
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions fileOptions1 = builder0.getDefaultInstanceForType();
        boolean boolean2 = fileOptions1.hasCcGenericServices();
        boolean boolean3 = fileOptions1.hasCcGenericServices();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(fileOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test2762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2762");
        com.google.protobuf.UnknownFieldSet.Builder builder0 = com.google.protobuf.UnknownFieldSet.newBuilder();
        boolean boolean2 = builder0.hasField(100);
        com.google.protobuf.UnknownFieldSet.Builder builder3 = builder0.clone();
        com.google.protobuf.UnknownFieldSet.Builder builder6 = builder3.mergeVarintField(50, 4095);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test2763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2763");
        com.google.protobuf.Descriptors.FieldDescriptor.Type type0 = com.google.protobuf.Descriptors.FieldDescriptor.Type.MESSAGE;
        org.junit.Assert.assertTrue("'" + type0 + "' != '" + com.google.protobuf.Descriptors.FieldDescriptor.Type.MESSAGE + "'", type0.equals(com.google.protobuf.Descriptors.FieldDescriptor.Type.MESSAGE));
    }

    @Test
    public void test2764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2764");
        java.io.InputStream inputStream0 = null;
        com.google.javascript.jscomp.FunctionInformationMap.Module.Builder builder1 = com.google.javascript.jscomp.FunctionInformationMap.Module.newBuilder();
        java.io.InputStream inputStream2 = null;
        java.io.InputStream inputStream3 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite4 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location5 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream3, extensionRegistryLite4);
        com.google.javascript.jscomp.FunctionInformationMap.Module.Builder builder6 = builder1.mergeFrom(inputStream2, extensionRegistryLite4);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions7 = com.google.protobuf.DescriptorProtos.EnumValueOptions.parseDelimitedFrom(inputStream0, extensionRegistryLite4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(extensionRegistryLite4);
        org.junit.Assert.assertNotNull(location5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test2765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2765");
        java.time.Instant instant1 = java.time.Instant.ofEpochSecond((long) (-1));
        java.time.Instant instant3 = instant1.plusMillis((long) (byte) -1);
        java.lang.String str4 = instant3.toString();
        java.time.temporal.ChronoField chronoField5 = java.time.temporal.ChronoField.EPOCH_DAY;
        java.time.temporal.TemporalUnit temporalUnit6 = chronoField5.getRangeUnit();
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.Temporal temporal8 = instant3.with((java.time.temporal.TemporalField) chronoField5, 3600000L);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: EpochDay");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1969-12-31T23:59:58.999Z" + "'", str4, "1969-12-31T23:59:58.999Z");
        org.junit.Assert.assertTrue("'" + chronoField5 + "' != '" + java.time.temporal.ChronoField.EPOCH_DAY + "'", chronoField5.equals(java.time.temporal.ChronoField.EPOCH_DAY));
        org.junit.Assert.assertTrue("'" + temporalUnit6 + "' != '" + java.time.temporal.ChronoUnit.FOREVER + "'", temporalUnit6.equals(java.time.temporal.ChronoUnit.FOREVER));
    }

    @Test
    public void test2766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2766");
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions fileOptions1 = builder0.getDefaultInstanceForType();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder3 = builder0.setPyGenericServices(false);
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder4 = builder3.clearJavaMultipleFiles();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder6 = builder4.setJavaGenerateEqualsAndHash(false);
        boolean boolean7 = builder6.getPyGenericServices();
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder8 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output10 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream12 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output10, (int) 'a');
        byte[] byteArray13 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite14 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions15 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray13, extensionRegistryLite14);
        output10.write(byteArray13);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder17 = builder8.mergeFrom(byteArray13);
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions18 = builder8.buildPartial();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder19 = builder8.addUninterpretedOptionBuilder();
        boolean boolean20 = builder19.hasNegativeIntValue();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder21 = builder6.addUninterpretedOption(builder19);
        com.google.protobuf.DescriptorProtos.UninterpretedOption.NamePart namePart23 = com.google.protobuf.DescriptorProtos.UninterpretedOption.NamePart.getDefaultInstance();
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder24 = builder19.setName((int) '0', namePart23);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 48, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(fileOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(output10);
        org.junit.Assert.assertNotNull(codedOutputStream12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(methodOptions15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(methodOptions18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(namePart23);
    }

    @Test
    public void test2767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2767");
        com.google.javascript.jscomp.FunctionInformationMap.Module.Builder builder0 = com.google.javascript.jscomp.FunctionInformationMap.Module.newBuilder();
        com.google.javascript.jscomp.FunctionInformationMap.Module module1 = builder0.buildPartial();
        com.google.javascript.jscomp.FunctionInformationMap.Module.Builder builder2 = com.google.javascript.jscomp.FunctionInformationMap.Module.newBuilder(module1);
        java.lang.String str3 = module1.getCompiledSource();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(module1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test2768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2768");
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap0 = java.nio.charset.Charset.availableCharsets();
        java.util.Set<java.lang.String> strSet1 = strMap0.keySet();
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition2 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        boolean boolean3 = strMap0.containsValue((java.lang.Object) stringPosition2);
        int int4 = stringPosition2.getStartLine();
        int int5 = stringPosition2.getEndLine();
        org.junit.Assert.assertNotNull(strMap0);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test2769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2769");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        int int5 = localDateTime4.getYear();
        java.time.LocalDate localDate6 = localDateTime4.toLocalDate();
        java.time.temporal.ChronoField chronoField7 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_MONTH;
        long long8 = localDateTime4.getLong((java.time.temporal.TemporalField) chronoField7);
        boolean boolean9 = chronoField7.isTimeBased();
        java.time.temporal.TemporalUnit temporalUnit10 = chronoField7.getBaseUnit();
        java.time.Duration duration11 = temporalUnit10.getDuration();
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + chronoField7 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_MONTH + "'", chronoField7.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_MONTH));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit10 + "' != '" + java.time.temporal.ChronoUnit.WEEKS + "'", temporalUnit10.equals(java.time.temporal.ChronoUnit.WEEKS));
        org.junit.Assert.assertNotNull(duration11);
    }

    @Test
    public void test2770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2770");
        com.google.protobuf.CodedInputStream codedInputStream0 = null;
        byte[] byteArray1 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite2 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions3 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray1, extensionRegistryLite2);
        com.google.protobuf.CodedInputStream codedInputStream6 = com.google.protobuf.CodedInputStream.newInstance(byteArray1, 16, (int) 'a');
        com.google.javascript.jscomp.VariableMap variableMap7 = com.google.javascript.jscomp.VariableMap.fromBytes(byteArray1);
        byte[] byteArray8 = variableMap7.toBytes();
        byte[] byteArray9 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite10 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions11 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray9, extensionRegistryLite10);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite12 = null;
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto enumDescriptorProto13 = com.google.protobuf.DescriptorProtos.EnumDescriptorProto.parseFrom(byteArray9, extensionRegistryLite12);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder14 = enumDescriptorProto13.newBuilderForType();
        com.google.protobuf.Descriptors.Descriptor descriptor15 = builder14.getDescriptorForType();
        boolean boolean16 = builder14.hasName();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder17 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder18 = builder17.clearCcGenericServices();
        boolean boolean19 = builder17.isInitialized();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder21 = builder17.setCcGenericServices(true);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder22 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label23 = builder22.getLabel();
        com.google.protobuf.ByteString byteString24 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder25 = builder22.mergeFrom(byteString24);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite26 = null;
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder27 = builder21.mergeFrom(byteString24, extensionRegistryLite26);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite28 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions29 = com.google.protobuf.DescriptorProtos.EnumValueOptions.parseFrom(byteString24, extensionRegistryLite28);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite30 = null;
        com.google.protobuf.DescriptorProtos.MessageOptions messageOptions31 = com.google.protobuf.DescriptorProtos.MessageOptions.parseFrom(byteString24, extensionRegistryLite30);
        com.google.protobuf.ByteString byteString32 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite33 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions34 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(byteString32, extensionRegistryLite33);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder35 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label36 = builder35.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto37 = builder35.buildPartial();
        int int38 = fieldDescriptorProto37.getSerializedSize();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder39 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto37);
        java.io.InputStream inputStream40 = null;
        java.io.InputStream inputStream41 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite42 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location43 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream41, extensionRegistryLite42);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder44 = builder39.mergeFrom(inputStream40, extensionRegistryLite42);
        com.google.javascript.jscomp.FunctionInformationMap functionInformationMap45 = com.google.javascript.jscomp.FunctionInformationMap.parseFrom(byteString32, extensionRegistryLite42);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder46 = builder14.mergeFrom(byteString24, extensionRegistryLite42);
        com.google.protobuf.DescriptorProtos.UninterpretedOption uninterpretedOption47 = com.google.protobuf.DescriptorProtos.UninterpretedOption.parseFrom(byteArray8, extensionRegistryLite42);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.EnumDescriptorProto enumDescriptorProto48 = com.google.protobuf.DescriptorProtos.EnumDescriptorProto.parseFrom(codedInputStream0, extensionRegistryLite42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray1), "[]");
        org.junit.Assert.assertNotNull(methodOptions3);
        org.junit.Assert.assertNotNull(codedInputStream6);
        org.junit.Assert.assertNotNull(variableMap7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(methodOptions11);
        org.junit.Assert.assertNotNull(enumDescriptorProto13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(descriptor15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + label23 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label23.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(byteString24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(enumValueOptions29);
        org.junit.Assert.assertNotNull(messageOptions31);
        org.junit.Assert.assertNotNull(byteString32);
        org.junit.Assert.assertNotNull(enumOptions34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + label36 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label36.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(extensionRegistryLite42);
        org.junit.Assert.assertNotNull(location43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(functionInformationMap45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(uninterpretedOption47);
    }

    @Test
    public void test2771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2771");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto2 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.parseFrom(inputStream0, extensionRegistryLite1);
        int int3 = serviceDescriptorProto2.getMethodCount();
        org.junit.Assert.assertNotNull(serviceDescriptorProto2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test2772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2772");
        com.google.javascript.jscomp.SourceAst sourceAst0 = null;
        com.google.javascript.rhino.InputId inputId1 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput3 = new com.google.javascript.jscomp.CompilerInput(sourceAst0, inputId1, true);
        com.google.javascript.rhino.InputId inputId4 = compilerInput3.getInputId();
        java.io.File file7 = null;
        java.io.File file8 = java.io.File.createTempFile("hi!", "ISO", file7);
        boolean boolean11 = file8.setWritable(false, false);
        java.net.URI uRI12 = file8.toURI();
        java.io.PrintStream printStream13 = new java.io.PrintStream(file8);
        com.google.javascript.jscomp.Compiler compiler14 = new com.google.javascript.jscomp.Compiler(printStream13);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.Node node15 = compilerInput3.getAstRoot((com.google.javascript.jscomp.AbstractCompiler) compiler14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(inputId4);
        org.junit.Assert.assertNotNull(file8);
        org.junit.Assert.assertEquals(file8.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file8.toString(), "/tmp/hi!7997319979826227416ISO");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(uRI12);
    }

    @Test
    public void test2773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2773");
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions0 = com.google.protobuf.DescriptorProtos.EnumValueOptions.getDefaultInstance();
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder1 = com.google.protobuf.DescriptorProtos.EnumValueOptions.newBuilder(enumValueOptions0);
        java.io.InputStream inputStream2 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder3 = builder1.mergeFrom(inputStream2);
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions4 = builder1.build();
        boolean boolean5 = builder1.isInitialized();
        org.junit.Assert.assertNotNull(enumValueOptions0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(enumValueOptions4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test2774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2774");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy5 = null;
        compilerOptions0.variableRenaming = variableRenamingPolicy5;
        compilerOptions0.setSummaryDetailLevel(999);
        compilerOptions0.checkSuspiciousCode = true;
        compilerOptions0.setInlineLocalVariables(false);
        org.junit.Assert.assertNotNull(errorFormat3);
    }

    @Test
    public void test2775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2775");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset10);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.of(localDateTime11, (java.time.ZoneId) zoneOffset15);
        java.time.Clock clock18 = java.time.Clock.fixed(instant0, (java.time.ZoneId) zoneOffset15);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.now(clock18);
        java.time.LocalDate localDate20 = java.time.LocalDate.now(clock18);
        com.google.protobuf.Descriptors.Descriptor descriptor21 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto22 = descriptor21.toProto();
        boolean boolean23 = descriptorProto22.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList24 = descriptorProto22.getNestedTypeList();
        int int25 = descriptorProto22.getExtensionRangeCount();
        boolean boolean26 = localDate20.equals((java.lang.Object) descriptorProto22);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder27 = descriptorProto22.newBuilderForType();
        java.util.List<com.google.protobuf.DescriptorProtos.FieldDescriptorProto> fieldDescriptorProtoList28 = builder27.getExtensionList();
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.Builder builder29 = com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.newBuilder();
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder30 = builder27.addExtensionRange(builder29);
        com.google.protobuf.Descriptors.Descriptor descriptor31 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto32 = descriptor31.toProto();
        boolean boolean33 = descriptorProto32.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList34 = descriptorProto32.getNestedTypeList();
        int int35 = descriptorProto32.getExtensionCount();
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder36 = builder30.mergeFrom(descriptorProto32);
        java.time.Instant instant38 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset42 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime43 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset42);
        java.time.OffsetDateTime offsetDateTime44 = java.time.OffsetDateTime.ofInstant(instant38, (java.time.ZoneId) zoneOffset42);
        java.time.ZoneOffset zoneOffset48 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime49 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset48);
        java.time.ZoneOffset zoneOffset53 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime54 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset53);
        java.time.ZonedDateTime zonedDateTime55 = java.time.ZonedDateTime.of(localDateTime49, (java.time.ZoneId) zoneOffset53);
        java.time.Clock clock56 = java.time.Clock.fixed(instant38, (java.time.ZoneId) zoneOffset53);
        java.time.LocalDateTime localDateTime57 = java.time.LocalDateTime.now(clock56);
        java.time.LocalDate localDate58 = java.time.LocalDate.now(clock56);
        com.google.protobuf.Descriptors.Descriptor descriptor59 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto60 = descriptor59.toProto();
        boolean boolean61 = descriptorProto60.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList62 = descriptorProto60.getNestedTypeList();
        int int63 = descriptorProto60.getExtensionRangeCount();
        boolean boolean64 = localDate58.equals((java.lang.Object) descriptorProto60);
        java.lang.String str65 = descriptorProto60.getName();
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder66 = builder30.addNestedType(37, descriptorProto60);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 37, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(clock18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(descriptor21);
        org.junit.Assert.assertNotNull(descriptorProto22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(fieldDescriptorProtoList28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(descriptor31);
        org.junit.Assert.assertNotNull(descriptorProto32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertNotNull(zoneOffset42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(offsetDateTime44);
        org.junit.Assert.assertNotNull(zoneOffset48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(zoneOffset53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(zonedDateTime55);
        org.junit.Assert.assertNotNull(clock56);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(descriptor59);
        org.junit.Assert.assertNotNull(descriptorProto60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "FileDescriptorProto" + "'", str65, "FileDescriptorProto");
    }

    @Test
    public void test2776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2776");
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output2 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream4 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output2, (int) 'a');
        byte[] byteArray5 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite6 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions7 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray5, extensionRegistryLite6);
        output2.write(byteArray5);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder9 = builder0.mergeFrom(byteArray5);
        java.util.List<com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder> builderList10 = builder9.getUninterpretedOptionBuilderList();
        java.util.List<com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder> builderList11 = builder9.getUninterpretedOptionBuilderList();
        com.google.javascript.jscomp.CompilerOptions compilerOptions12 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions12.setRecordFunctionInformation(true);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder15 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder17 = builder15.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder18 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label19 = builder18.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder20 = builder15.addExtension(builder18);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder21 = builder15.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions22 = builder21.getOptions();
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder23 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output25 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream27 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output25, (int) 'a');
        byte[] byteArray28 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite29 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions30 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray28, extensionRegistryLite29);
        output25.write(byteArray28);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder32 = builder23.mergeFrom(byteArray28);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder33 = builder21.mergeFrom(byteArray28);
        compilerOptions12.setInputVariableMapSerialized(byteArray28);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite35 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder36 = builder9.mergeFrom(byteArray28, extensionRegistryLite35);
        com.google.protobuf.ByteString byteString37 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto38 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.parseFrom(byteString37);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder39 = builder36.mergeFrom(byteString37);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder41 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output43 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream45 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output43, (int) 'a');
        byte[] byteArray46 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite47 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions48 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray46, extensionRegistryLite47);
        output43.write(byteArray46);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder50 = builder41.mergeFrom(byteArray46);
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions51 = builder41.buildPartial();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder52 = builder41.addUninterpretedOptionBuilder();
        boolean boolean53 = builder52.hasNegativeIntValue();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder54 = builder52.clearStringValue();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder56 = builder54.setDoubleValue(0.0d);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder57 = builder36.addUninterpretedOption(4096, builder56);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 4096, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(output2);
        org.junit.Assert.assertNotNull(codedOutputStream4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(methodOptions7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builderList10);
        org.junit.Assert.assertNotNull(builderList11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + label19 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label19.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(enumOptions22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(output25);
        org.junit.Assert.assertNotNull(codedOutputStream27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(methodOptions30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(byteString37);
        org.junit.Assert.assertNotNull(methodDescriptorProto38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(output43);
        org.junit.Assert.assertNotNull(codedOutputStream45);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[]");
        org.junit.Assert.assertNotNull(methodOptions48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(methodOptions51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
    }

    @Test
    public void test2777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2777");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        stringPosition0.setPositionInformation(64, 102, (int) 'a', 999);
    }

    @Test
    public void test2778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2778");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy5 = null;
        compilerOptions0.variableRenaming = variableRenamingPolicy5;
        compilerOptions0.setSummaryDetailLevel(999);
        boolean boolean9 = compilerOptions0.getInferTypes();
        boolean boolean10 = compilerOptions0.ideMode;
        compilerOptions0.setGroupVariableDeclarations(true);
        boolean boolean13 = compilerOptions0.deadAssignmentElimination;
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap14 = java.nio.charset.Charset.availableCharsets();
        java.net.URISyntaxException uRISyntaxException17 = new java.net.URISyntaxException("hi!", "");
        boolean boolean18 = strMap14.containsKey((java.lang.Object) "");
        java.util.Set<java.lang.String> strSet19 = strMap14.keySet();
        java.lang.String[] strArray23 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        boolean boolean26 = strSet24.isEmpty();
        java.nio.ByteBuffer byteBuffer28 = java.nio.ByteBuffer.allocate(100);
        boolean boolean29 = strSet24.equals((java.lang.Object) byteBuffer28);
        java.lang.String[] strArray33 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet34 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet34, strArray33);
        boolean boolean36 = strSet34.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream37 = strSet34.stream();
        boolean boolean38 = strSet24.retainAll((java.util.Collection<java.lang.String>) strSet34);
        boolean boolean39 = strSet19.containsAll((java.util.Collection<java.lang.String>) strSet24);
        compilerOptions0.setStripTypes(strSet19);
        compilerOptions0.setIgnoreCajaProperties(false);
        java.util.Set<java.lang.String> strSet43 = compilerOptions0.stripTypes;
        compilerOptions0.setCollapseAnonymousFunctions(true);
        org.junit.Assert.assertNotNull(errorFormat3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strMap14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strStream37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strSet43);
    }

    @Test
    public void test2779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2779");
        int int0 = com.google.protobuf.DescriptorProtos.FileOptions.JAVA_MULTIPLE_FILES_FIELD_NUMBER;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 10 + "'", int0 == 10);
    }

    @Test
    public void test2780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2780");
        java.security.cert.CertificateException certificateException2 = new java.security.cert.CertificateException("{}");
        java.security.SignatureException signatureException3 = new java.security.SignatureException("{926447896}", (java.lang.Throwable) certificateException2);
    }

    @Test
    public void test2781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2781");
        int int0 = com.google.protobuf.DescriptorProtos.MethodOptions.UNINTERPRETED_OPTION_FIELD_NUMBER;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 999 + "'", int0 == 999);
    }

    @Test
    public void test2782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2782");
        long[] longArray5 = new long[] { 97, 57600000000000L, 28147497671065600L, 52, 37 };
        java.nio.LongBuffer longBuffer6 = java.nio.LongBuffer.wrap(longArray5);
        java.nio.LongBuffer longBuffer7 = longBuffer6.asReadOnlyBuffer();
        int int8 = longBuffer6.arrayOffset();
        long[] longArray14 = new long[] { 97, 57600000000000L, 28147497671065600L, 52, 37 };
        java.nio.LongBuffer longBuffer15 = java.nio.LongBuffer.wrap(longArray14);
        int int16 = longBuffer15.arrayOffset();
        int int17 = longBuffer6.compareTo(longBuffer15);
        java.nio.LongBuffer longBuffer18 = longBuffer6.compact();
        java.io.PrintWriter printWriter20 = new java.io.PrintWriter("1970-03-24T02:02:32");
        char[] charArray26 = new char[] { '4', ' ', 'a', 'a', ':' };
        printWriter20.println(charArray26);
        java.security.SignatureException signatureException29 = new java.security.SignatureException();
        java.security.SignatureException signatureException30 = new java.security.SignatureException();
        java.security.SignatureException signatureException31 = new java.security.SignatureException();
        java.security.SignatureException signatureException32 = new java.security.SignatureException();
        java.security.SignatureException signatureException33 = new java.security.SignatureException();
        java.security.SignatureException[] signatureExceptionArray34 = new java.security.SignatureException[] { signatureException29, signatureException30, signatureException31, signatureException32, signatureException33 };
        com.google.common.collect.ImmutableSet<java.security.SignatureException> signatureExceptionSet35 = com.google.common.collect.ImmutableSet.of(signatureExceptionArray34);
        java.io.PrintWriter printWriter36 = printWriter20.format("ISO", (java.lang.Object[]) signatureExceptionArray34);
        com.google.javascript.rhino.Node node41 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean42 = node41.isStringKey();
        boolean boolean43 = node41.isTrue();
        com.google.javascript.rhino.InputId inputId45 = new com.google.javascript.rhino.InputId("NUMBER 52.0 0");
        node41.setInputId(inputId45);
        com.google.javascript.jscomp.SourceAst sourceAst47 = null;
        com.google.javascript.rhino.InputId inputId48 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput50 = new com.google.javascript.jscomp.CompilerInput(sourceAst47, inputId48, true);
        java.io.PrintStream printStream51 = null;
        com.google.javascript.jscomp.Compiler compiler52 = new com.google.javascript.jscomp.Compiler(printStream51);
        com.google.javascript.jscomp.ErrorManager errorManager53 = compiler52.getErrorManager();
        compilerInput50.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler52);
        com.google.javascript.jscomp.CodingConvention codingConvention55 = compiler52.getCodingConvention();
        boolean boolean56 = inputId45.equals((java.lang.Object) compiler52);
        com.google.javascript.jscomp.Region region59 = compiler52.getSourceRegion("java.nio.HeapFloatBuffer[pos=0 lim=6 cap=6]", 0);
        com.google.javascript.jscomp.JSError[] jSErrorArray60 = compiler52.getWarnings();
        java.io.PrintWriter printWriter61 = printWriter20.format("*global*", (java.lang.Object[]) jSErrorArray60);
        boolean boolean62 = longBuffer18.equals((java.lang.Object) printWriter61);
        boolean boolean63 = longBuffer18.hasArray();
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[97, 57600000000000, 28147497671065600, 52, 37]");
        org.junit.Assert.assertNotNull(longBuffer6);
        org.junit.Assert.assertNotNull(longBuffer7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[97, 57600000000000, 28147497671065600, 52, 37]");
        org.junit.Assert.assertNotNull(longBuffer15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(longBuffer18);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "4 aa:");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "4 aa:");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[4,  , a, a, :]");
        org.junit.Assert.assertNotNull(signatureExceptionArray34);
        org.junit.Assert.assertNotNull(signatureExceptionSet35);
        org.junit.Assert.assertNotNull(printWriter36);
        org.junit.Assert.assertNotNull(node41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(errorManager53);
        org.junit.Assert.assertNotNull(codingConvention55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(region59);
        org.junit.Assert.assertNotNull(jSErrorArray60);
        org.junit.Assert.assertNotNull(printWriter61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test2783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2783");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        boolean boolean3 = builder0.hasPackage();
        com.google.protobuf.DescriptorProtos.FileOptions fileOptions4 = com.google.protobuf.DescriptorProtos.FileOptions.getDefaultInstance();
        java.util.List<com.google.protobuf.DescriptorProtos.UninterpretedOption> uninterpretedOptionList5 = fileOptions4.getUninterpretedOptionList();
        boolean boolean6 = fileOptions4.getPyGenericServices();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder7 = builder0.mergeOptions(fileOptions4);
        int int8 = fileOptions4.getSerializedSize();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(fileOptions4);
        org.junit.Assert.assertNotNull(uninterpretedOptionList5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test2784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2784");
        com.google.javascript.jscomp.SourceMap.Format format0 = com.google.javascript.jscomp.SourceMap.Format.DEFAULT;
        org.junit.Assert.assertNotNull(format0);
    }

    @Test
    public void test2785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2785");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("{}");
        java.lang.String str2 = locale1.getDisplayName();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test2786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2786");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset10);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.of(localDateTime11, (java.time.ZoneId) zoneOffset15);
        java.time.Clock clock18 = java.time.Clock.fixed(instant0, (java.time.ZoneId) zoneOffset15);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.now(clock18);
        java.time.LocalDate localDate20 = java.time.LocalDate.now(clock18);
        com.google.protobuf.Descriptors.Descriptor descriptor21 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto22 = descriptor21.toProto();
        boolean boolean23 = descriptorProto22.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList24 = descriptorProto22.getNestedTypeList();
        int int25 = descriptorProto22.getExtensionRangeCount();
        boolean boolean26 = localDate20.equals((java.lang.Object) descriptorProto22);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder27 = descriptorProto22.newBuilderForType();
        java.util.List<com.google.protobuf.DescriptorProtos.FieldDescriptorProto> fieldDescriptorProtoList28 = builder27.getExtensionList();
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder29 = builder27.addNestedTypeBuilder();
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder30 = builder27.clearExtension();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder31 = builder30.addExtensionBuilder();
        java.io.InputStream inputStream32 = null;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder33 = builder31.mergeFrom(inputStream32);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(clock18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(descriptor21);
        org.junit.Assert.assertNotNull(descriptorProto22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(fieldDescriptorProtoList28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test2787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2787");
        com.google.common.collect.ImmutableList.Builder<java.util.function.LongUnaryOperator> longUnaryOperatorBuilder0 = new com.google.common.collect.ImmutableList.Builder<java.util.function.LongUnaryOperator>();
    }

    @Test
    public void test2788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2788");
        java.time.Month month0 = java.time.Month.APRIL;
        java.time.chrono.Chronology chronology1 = java.time.chrono.Chronology.from((java.time.temporal.TemporalAccessor) month0);
        java.lang.String str2 = chronology1.toString();
        java.util.List<java.time.chrono.Era> eraList3 = chronology1.eras();
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoLocalDate chronoLocalDate7 = chronology1.date((int) '\000', (int) (byte) 1, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for DayOfMonth (valid values 1 - 28/31): 52");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + month0 + "' != '" + java.time.Month.APRIL + "'", month0.equals(java.time.Month.APRIL));
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISO" + "'", str2, "ISO");
        org.junit.Assert.assertNotNull(eraList3);
    }

    @Test
    public void test2789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2789");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset10);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.of(localDateTime11, (java.time.ZoneId) zoneOffset15);
        java.time.Clock clock18 = java.time.Clock.fixed(instant0, (java.time.ZoneId) zoneOffset15);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.now(clock18);
        java.time.LocalDate localDate20 = java.time.LocalDate.now(clock18);
        com.google.protobuf.Descriptors.Descriptor descriptor21 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto22 = descriptor21.toProto();
        boolean boolean23 = descriptorProto22.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList24 = descriptorProto22.getNestedTypeList();
        int int25 = descriptorProto22.getExtensionRangeCount();
        boolean boolean26 = localDate20.equals((java.lang.Object) descriptorProto22);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder27 = descriptorProto22.newBuilderForType();
        java.util.List<com.google.protobuf.DescriptorProtos.FieldDescriptorProto> fieldDescriptorProtoList28 = builder27.getExtensionList();
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder29 = builder27.addNestedTypeBuilder();
        java.util.List<com.google.protobuf.DescriptorProtos.FieldDescriptorProto> fieldDescriptorProtoList30 = builder27.getFieldList();
        java.util.List<com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder> builderList31 = builder27.getEnumTypeBuilderList();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(clock18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(descriptor21);
        org.junit.Assert.assertNotNull(descriptorProto22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(fieldDescriptorProtoList28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(fieldDescriptorProtoList30);
        org.junit.Assert.assertNotNull(builderList31);
    }

    @Test
    public void test2790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2790");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.DEBUGGER_STATEMENT_PRESENT;
        org.junit.Assert.assertNotNull(diagnosticGroup0);
    }

    @Test
    public void test2791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2791");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset10);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.of(localDateTime11, (java.time.ZoneId) zoneOffset15);
        java.time.Clock clock18 = java.time.Clock.fixed(instant0, (java.time.ZoneId) zoneOffset15);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.now(clock18);
        java.time.LocalDate localDate20 = java.time.LocalDate.now(clock18);
        com.google.protobuf.Descriptors.Descriptor descriptor21 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto22 = descriptor21.toProto();
        boolean boolean23 = descriptorProto22.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList24 = descriptorProto22.getNestedTypeList();
        int int25 = descriptorProto22.getExtensionRangeCount();
        boolean boolean26 = localDate20.equals((java.lang.Object) descriptorProto22);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder27 = descriptorProto22.newBuilderForType();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList28 = builder27.getNestedTypeList();
        com.google.protobuf.UnknownFieldSet unknownFieldSet29 = builder27.getUnknownFields();
        com.google.protobuf.DescriptorProtos.MessageOptions messageOptions30 = builder27.getOptions();
        boolean boolean31 = messageOptions30.getMessageSetWireFormat();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(clock18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(descriptor21);
        org.junit.Assert.assertNotNull(descriptorProto22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(descriptorProtoList28);
        org.junit.Assert.assertNotNull(unknownFieldSet29);
        org.junit.Assert.assertNotNull(messageOptions30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test2792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2792");
        int int0 = com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.START_FIELD_NUMBER;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 1 + "'", int0 == 1);
    }

    @Test
    public void test2793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2793");
        int int0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.MESSAGE_TYPE_FIELD_NUMBER;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 4 + "'", int0 == 4);
    }

    @Test
    public void test2794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2794");
        com.google.javascript.jscomp.CompilerOptions compilerOptions3 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions3.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat6 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions3.errorFormat = errorFormat6;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy8 = null;
        compilerOptions3.variableRenaming = variableRenamingPolicy8;
        compilerOptions3.setSummaryDetailLevel(999);
        compilerOptions3.checkSuspiciousCode = true;
        byte[] byteArray14 = compilerOptions3.inputPropertyMapSerialized;
        com.google.javascript.jscomp.CompilerOptions compilerOptions15 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions15.optimizeCalls = false;
        compilerOptions15.preferLineBreakAtEndOfFile = false;
        boolean boolean20 = compilerOptions15.markNoSideEffectCalls;
        boolean boolean21 = compilerOptions15.labelRenaming;
        com.google.javascript.jscomp.DependencyOptions dependencyOptions22 = new com.google.javascript.jscomp.DependencyOptions();
        java.lang.String[] strArray26 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet27 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet27, strArray26);
        boolean boolean29 = strSet27.isEmpty();
        java.nio.ByteBuffer byteBuffer31 = java.nio.ByteBuffer.allocate(100);
        boolean boolean32 = strSet27.equals((java.lang.Object) byteBuffer31);
        java.lang.String[] strArray36 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        boolean boolean39 = strSet37.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream40 = strSet37.stream();
        boolean boolean41 = strSet27.retainAll((java.util.Collection<java.lang.String>) strSet37);
        com.google.javascript.jscomp.DependencyOptions dependencyOptions42 = dependencyOptions22.setEntryPoints((java.util.Collection<java.lang.String>) strSet27);
        compilerOptions15.setDependencyOptions(dependencyOptions22);
        com.google.javascript.jscomp.CheckLevel checkLevel44 = compilerOptions15.checkGlobalThisLevel;
        compilerOptions3.checkMissingReturn = checkLevel44;
        com.google.javascript.jscomp.DiagnosticType diagnosticType46 = com.google.javascript.jscomp.Compiler.MOTION_ITERATIONS_ERROR;
        java.lang.String[] strArray50 = new java.lang.String[] { "FileDescriptorProto", "16:00:52+00:00:52", "Exceeded max number of code motion iterations: {0}" };
        com.google.javascript.jscomp.JSError jSError51 = com.google.javascript.jscomp.JSError.make("java.nio.HeapFloatBuffer[pos=0 lim=6 cap=6]", (int) (short) 10, (int) ':', checkLevel44, diagnosticType46, strArray50);
        int int52 = jSError51.getLineNumber();
        org.junit.Assert.assertNotNull(errorFormat6);
        org.junit.Assert.assertNull(byteArray14);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strStream40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dependencyOptions42);
        org.junit.Assert.assertTrue("'" + checkLevel44 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel44.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(diagnosticType46);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertNotNull(jSError51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 10 + "'", int52 == 10);
    }

    @Test
    public void test2795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2795");
        com.google.javascript.jscomp.SourceAst sourceAst0 = null;
        com.google.javascript.rhino.InputId inputId1 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput3 = new com.google.javascript.jscomp.CompilerInput(sourceAst0, inputId1, true);
        com.google.javascript.rhino.InputId inputId4 = compilerInput3.getInputId();
        com.google.javascript.jscomp.SourceAst sourceAst5 = null;
        com.google.javascript.rhino.InputId inputId6 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput8 = new com.google.javascript.jscomp.CompilerInput(sourceAst5, inputId6, true);
        java.io.PrintStream printStream9 = null;
        com.google.javascript.jscomp.Compiler compiler10 = new com.google.javascript.jscomp.Compiler(printStream9);
        com.google.javascript.jscomp.ErrorManager errorManager11 = compiler10.getErrorManager();
        compilerInput8.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler10);
        com.google.javascript.jscomp.Scope scope13 = compiler10.getTopScope();
        compilerInput3.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler10);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.CompilerInput compilerInput15 = new com.google.javascript.jscomp.CompilerInput((com.google.javascript.jscomp.SourceAst) compilerInput3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(inputId4);
        org.junit.Assert.assertNotNull(errorManager11);
        org.junit.Assert.assertNull(scope13);
    }

    @Test
    public void test2796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2796");
        java.io.PrintStream printStream0 = null;
        com.google.javascript.jscomp.Compiler compiler1 = new com.google.javascript.jscomp.Compiler(printStream0);
        com.google.javascript.jscomp.ErrorManager errorManager2 = compiler1.getErrorManager();
        com.google.javascript.jscomp.SourceFile sourceFile4 = com.google.javascript.jscomp.SourceFile.fromFile("/");
        com.google.javascript.jscomp.SourceFile.Generator generator6 = null;
        com.google.javascript.jscomp.SourceFile sourceFile7 = com.google.javascript.jscomp.SourceFile.fromGenerator("hi!", generator6);
        com.google.javascript.jscomp.CompilerOptions compilerOptions8 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions8.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat11 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions8.errorFormat = errorFormat11;
        compilerOptions8.setRemoveDeadCode(false);
        com.google.javascript.jscomp.Result result15 = compiler1.compile(sourceFile4, sourceFile7, compilerOptions8);
        java.util.Map<java.lang.String, java.lang.Integer> strMap16 = result15.cssNames;
        com.google.javascript.jscomp.VariableMap variableMap17 = result15.namedAnonFunctionMap;
        com.google.javascript.jscomp.VariableMap variableMap18 = result15.namedAnonFunctionMap;
        org.junit.Assert.assertNotNull(errorManager2);
        org.junit.Assert.assertNotNull(sourceFile4);
        org.junit.Assert.assertNotNull(sourceFile7);
        org.junit.Assert.assertNotNull(errorFormat11);
        org.junit.Assert.assertNotNull(result15);
        org.junit.Assert.assertNull(strMap16);
        org.junit.Assert.assertNull(variableMap17);
        org.junit.Assert.assertNull(variableMap18);
    }

    @Test
    public void test2797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2797");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        boolean boolean1 = localDate0.isLeapYear();
        java.time.chrono.Era era2 = localDate0.getEra();
        java.lang.String str3 = localDate0.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime6 = localDate0.atTime(97, 53);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for HourOfDay (valid values 0 - 23): 97");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + era2 + "' != '" + java.time.chrono.IsoEra.CE + "'", era2.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2022-02-21" + "'", str3, "2022-02-21");
    }

    @Test
    public void test2798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2798");
        com.google.javascript.jscomp.DiagnosticType diagnosticType0 = com.google.javascript.jscomp.Compiler.MOTION_ITERATIONS_ERROR;
        com.google.javascript.jscomp.CheckLevel checkLevel1 = diagnosticType0.defaultLevel;
        java.util.Date date5 = new java.util.Date((int) (short) 100, (int) (short) 0, (int) (byte) 0);
        date5.setSeconds((int) ':');
        boolean boolean8 = diagnosticType0.equals((java.lang.Object) date5);
        java.util.Date date12 = new java.util.Date((int) (byte) -1, 43, 16384);
        date12.setMonth(0);
        int int15 = date5.compareTo(date12);
        org.junit.Assert.assertNotNull(diagnosticType0);
        org.junit.Assert.assertTrue("'" + checkLevel1 + "' != '" + com.google.javascript.jscomp.CheckLevel.ERROR + "'", checkLevel1.equals(com.google.javascript.jscomp.CheckLevel.ERROR));
        org.junit.Assert.assertEquals(date5.toString(), "Fri Dec 31 00:00:58 UTC 1999");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 09 00:00:00 UTC 1947");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test2799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2799");
        com.google.javascript.jscomp.SourceAst sourceAst0 = null;
        com.google.javascript.rhino.InputId inputId1 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput3 = new com.google.javascript.jscomp.CompilerInput(sourceAst0, inputId1, true);
        com.google.javascript.rhino.InputId inputId4 = compilerInput3.getInputId();
        com.google.javascript.jscomp.SourceAst sourceAst5 = null;
        com.google.javascript.rhino.InputId inputId6 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput8 = new com.google.javascript.jscomp.CompilerInput(sourceAst5, inputId6, true);
        java.io.PrintStream printStream9 = null;
        com.google.javascript.jscomp.Compiler compiler10 = new com.google.javascript.jscomp.Compiler(printStream9);
        com.google.javascript.jscomp.ErrorManager errorManager11 = compiler10.getErrorManager();
        compilerInput8.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler10);
        com.google.javascript.jscomp.Scope scope13 = compiler10.getTopScope();
        compilerInput3.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler10);
        // The following exception was thrown during execution in test generation
        try {
            compilerInput3.removeRequire("OptionalLong.empty");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(inputId4);
        org.junit.Assert.assertNotNull(errorManager11);
        org.junit.Assert.assertNull(scope13);
    }

    @Test
    public void test2800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2800");
        java.nio.FloatBuffer floatBuffer1 = java.nio.FloatBuffer.allocate(6);
        float[] floatArray2 = floatBuffer1.array();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.FloatBuffer floatBuffer5 = java.nio.FloatBuffer.wrap(floatArray2, 21, 82000000);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatBuffer1);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0]");
    }

    @Test
    public void test2801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2801");
        java.util.Locale locale4 = new java.util.Locale("", "NUMBER 52.0 0", "hi!");
        java.util.Locale locale8 = new java.util.Locale("", "NUMBER 52.0 0", "hi!");
        java.lang.String str9 = locale4.getDisplayLanguage(locale8);
        java.text.MessageFormat messageFormat10 = new java.text.MessageFormat("Named type with empty name component", locale8);
        java.text.MessageFormat messageFormat13 = new java.text.MessageFormat("hi!");
        java.util.Locale locale14 = messageFormat13.getLocale();
        java.lang.Object obj15 = messageFormat13.clone();
        messageFormat10.setFormatByArgumentIndex(23, (java.text.Format) messageFormat13);
        org.junit.Assert.assertEquals(locale4.toString(), "_NUMBER 52.0 0_hi!");
        org.junit.Assert.assertEquals(locale8.toString(), "_NUMBER 52.0 0_hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale14);
// flaky:         org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(obj15);
    }

    @Test
    public void test2802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2802");
        byte[] byteArray0 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions2 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray0, extensionRegistryLite1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite3 = null;
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto enumDescriptorProto4 = com.google.protobuf.DescriptorProtos.EnumDescriptorProto.parseFrom(byteArray0, extensionRegistryLite3);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder5 = enumDescriptorProto4.newBuilderForType();
        com.google.protobuf.Descriptors.Descriptor descriptor6 = builder5.getDescriptorForType();
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder7 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.newBuilder();
        java.io.InputStream inputStream8 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite9 = null;
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder10 = builder7.mergeFrom(inputStream8, extensionRegistryLite9);
        com.google.protobuf.DescriptorProtos.EnumValueOptionsOrBuilder enumValueOptionsOrBuilder11 = builder7.getOptionsOrBuilder();
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder12 = builder5.addValue(builder7);
        java.lang.String str13 = builder5.getName();
        boolean boolean14 = builder5.hasName();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(methodOptions2);
        org.junit.Assert.assertNotNull(enumDescriptorProto4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(descriptor6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(enumValueOptionsOrBuilder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test2803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2803");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) ' ');
        boolean boolean2 = charBuffer1.isDirect();
        int int3 = charBuffer1.arrayOffset();
        java.nio.CharBuffer charBuffer5 = java.nio.CharBuffer.allocate((int) ' ');
        boolean boolean6 = charBuffer5.isDirect();
        java.nio.CharBuffer charBuffer8 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer10 = charBuffer8.put('a');
        char[] charArray12 = new char[] { '4' };
        java.nio.CharBuffer charBuffer13 = charBuffer10.get(charArray12);
        java.nio.CharBuffer charBuffer14 = charBuffer10.compact();
        java.nio.CharBuffer charBuffer16 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer18 = charBuffer16.put('a');
        java.nio.CharBuffer charBuffer20 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer22 = charBuffer20.put('a');
        char[] charArray24 = new char[] { '4' };
        java.nio.CharBuffer charBuffer25 = charBuffer22.get(charArray24);
        java.nio.CharBuffer charBuffer26 = charBuffer22.compact();
        com.google.common.collect.ImmutableSet<java.lang.Appendable> appendableSet27 = com.google.common.collect.ImmutableSet.of((java.lang.Appendable) charBuffer5, (java.lang.Appendable) charBuffer10, (java.lang.Appendable) charBuffer16, (java.lang.Appendable) charBuffer26);
        boolean boolean28 = charBuffer26.isDirect();
        char[] charArray29 = charBuffer26.array();
        boolean boolean30 = charBuffer26.isDirect();
        char[] charArray31 = charBuffer26.array();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.CharBuffer charBuffer34 = charBuffer1.put(charArray31, 32, 8);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(charBuffer5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(charBuffer8);
        org.junit.Assert.assertNotNull(charBuffer10);
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer13);
        org.junit.Assert.assertNotNull(charBuffer14);
        org.junit.Assert.assertNotNull(charBuffer16);
        org.junit.Assert.assertNotNull(charBuffer18);
        org.junit.Assert.assertNotNull(charBuffer20);
        org.junit.Assert.assertNotNull(charBuffer22);
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer25);
        org.junit.Assert.assertNotNull(charBuffer26);
        org.junit.Assert.assertNotNull(appendableSet27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[\000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[\000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000]");
    }

    @Test
    public void test2804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2804");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean4 = node3.isStringKey();
        boolean boolean5 = node3.isThrow();
        boolean boolean6 = node3.isVarArgs();
        boolean boolean7 = node3.isHook();
        com.google.javascript.rhino.Node node8 = node3.cloneNode();
        boolean boolean9 = node8.isAssignAdd();
        boolean boolean10 = node8.isAssign();
        boolean boolean11 = node8.isAdd();
        boolean boolean12 = node8.isGetProp();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(node8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test2805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2805");
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime4 = java.time.LocalTime.of(256, 29, (int) (short) 10, 5);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for HourOfDay (valid values 0 - 23): 256");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2806");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.time.Instant instant1 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset5 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset5);
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset10);
        java.time.ZonedDateTime zonedDateTime12 = java.time.ZonedDateTime.of(localDateTime6, (java.time.ZoneId) zoneOffset10);
        java.time.temporal.ChronoField chronoField14 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit15 = chronoField14.getBaseUnit();
        java.time.LocalDateTime localDateTime16 = localDateTime6.plus((long) 1970, temporalUnit15);
        java.time.LocalDateTime localDateTime18 = localDateTime6.withHour((int) (short) 1);
        java.time.ZoneOffset zoneOffset20 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.OffsetDateTime offsetDateTime21 = java.time.OffsetDateTime.of(localDateTime6, zoneOffset20);
        java.time.OffsetTime offsetTime22 = java.time.OffsetTime.ofInstant(instant1, (java.time.ZoneId) zoneOffset20);
        java.text.Format.Field field23 = null;
        java.text.FieldPosition fieldPosition25 = new java.text.FieldPosition(field23, (int) (byte) 1);
        java.text.Format.Field field26 = fieldPosition25.getFieldAttribute();
        boolean boolean27 = offsetTime22.equals((java.lang.Object) field26);
        java.time.OffsetDateTime offsetDateTime28 = localDate0.atTime(offsetTime22);
        int int29 = localDate0.getYear();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(zoneOffset5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertTrue("'" + chronoField14 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField14.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit15 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit15.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(zoneOffset20);
        org.junit.Assert.assertNotNull(offsetDateTime21);
        org.junit.Assert.assertNotNull(offsetTime22);
        org.junit.Assert.assertNull(field26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(offsetDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
    }

    @Test
    public void test2807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2807");
        java.time.LocalTime localTime0 = java.time.LocalTime.MIN;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset9);
        java.time.ZonedDateTime zonedDateTime11 = java.time.ZonedDateTime.of(localDateTime5, (java.time.ZoneId) zoneOffset9);
        java.time.temporal.ChronoField chronoField13 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit14 = chronoField13.getBaseUnit();
        java.time.LocalDateTime localDateTime15 = localDateTime5.plus((long) 1970, temporalUnit14);
        java.time.ZoneOffset zoneOffset20 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset20);
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime26 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset25);
        java.time.ZonedDateTime zonedDateTime27 = java.time.ZonedDateTime.of(localDateTime21, (java.time.ZoneId) zoneOffset25);
        java.time.temporal.ChronoField chronoField29 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit30 = chronoField29.getBaseUnit();
        java.time.LocalDateTime localDateTime31 = localDateTime21.plus((long) 1970, temporalUnit30);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime32 = localDateTime15.minus((long) 43, temporalUnit30);
        java.time.LocalDateTime localDateTime34 = localDateTime15.minusHours((long) 1024);
        java.time.ZoneOffset zoneOffset38 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime39 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset38);
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime44 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset43);
        java.time.ZonedDateTime zonedDateTime45 = java.time.ZonedDateTime.of(localDateTime39, (java.time.ZoneId) zoneOffset43);
        java.time.temporal.ChronoField chronoField46 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        boolean boolean47 = localDateTime39.isSupported((java.time.temporal.TemporalField) chronoField46);
        int int48 = localDateTime34.get((java.time.temporal.TemporalField) chronoField46);
        java.time.LocalTime localTime50 = localTime0.with((java.time.temporal.TemporalField) chronoField46, (long) 1);
        java.time.temporal.ChronoField chronoField51 = java.time.temporal.ChronoField.OFFSET_SECONDS;
        java.time.temporal.TemporalUnit temporalUnit52 = chronoField51.getRangeUnit();
        long long54 = chronoField51.checkValidValue((long) 2);
        java.util.Locale locale58 = new java.util.Locale("", "NUMBER 52.0 0", "hi!");
        java.lang.String str59 = chronoField51.getDisplayName(locale58);
        java.util.Locale locale60 = java.util.Locale.KOREAN;
        java.lang.String str61 = locale58.getDisplayVariant(locale60);
        java.util.Locale.setDefault(locale60);
        java.lang.String str63 = locale60.getDisplayVariant();
        java.lang.String str64 = chronoField46.getDisplayName(locale60);
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime11);
        org.junit.Assert.assertTrue("'" + chronoField13 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField13.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit14 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit14.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(zoneOffset20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(zonedDateTime27);
        org.junit.Assert.assertTrue("'" + chronoField29 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField29.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit30 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit30.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(zoneOffset38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(zonedDateTime45);
        org.junit.Assert.assertTrue("'" + chronoField46 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField46.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 10 + "'", int48 == 10);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertTrue("'" + chronoField51 + "' != '" + java.time.temporal.ChronoField.OFFSET_SECONDS + "'", chronoField51.equals(java.time.temporal.ChronoField.OFFSET_SECONDS));
        org.junit.Assert.assertTrue("'" + temporalUnit52 + "' != '" + java.time.temporal.ChronoUnit.FOREVER + "'", temporalUnit52.equals(java.time.temporal.ChronoUnit.FOREVER));
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 2L + "'", long54 == 2L);
        org.junit.Assert.assertEquals(locale58.toString(), "_NUMBER 52.0 0_hi!");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "OffsetSeconds" + "'", str59, "OffsetSeconds");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hi!" + "'", str61, "hi!");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "ClockHourOfAmPm" + "'", str64, "ClockHourOfAmPm");
    }

    @Test
    public void test2808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2808");
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto0 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.getDefaultInstance();
        boolean boolean1 = methodDescriptorProto0.hasOutputType();
        com.google.protobuf.CodedOutputStream codedOutputStream2 = null;
        methodDescriptorProto0.writeTo(codedOutputStream2);
        boolean boolean4 = methodDescriptorProto0.hasOptions();
        boolean boolean5 = methodDescriptorProto0.hasInputType();
        org.junit.Assert.assertNotNull(methodDescriptorProto0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test2809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2809");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset10);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.of(localDateTime11, (java.time.ZoneId) zoneOffset15);
        java.time.Clock clock18 = java.time.Clock.fixed(instant0, (java.time.ZoneId) zoneOffset15);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.now(clock18);
        java.time.LocalDate localDate20 = java.time.LocalDate.now(clock18);
        com.google.protobuf.Descriptors.Descriptor descriptor21 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto22 = descriptor21.toProto();
        boolean boolean23 = descriptorProto22.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList24 = descriptorProto22.getNestedTypeList();
        int int25 = descriptorProto22.getExtensionRangeCount();
        boolean boolean26 = localDate20.equals((java.lang.Object) descriptorProto22);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder27 = descriptorProto22.newBuilderForType();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList28 = builder27.getNestedTypeList();
        com.google.protobuf.UnknownFieldSet unknownFieldSet29 = builder27.getUnknownFields();
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder30 = builder27.addEnumTypeBuilder();
        com.google.protobuf.ByteString byteString31 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite32 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto33 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteString31, extensionRegistryLite32);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder34 = builder30.mergeFrom(byteString31);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder35 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder37 = builder35.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder38 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label39 = builder38.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder40 = builder35.addExtension(builder38);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder41 = builder35.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder42 = builder41.getOptionsBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions43 = builder42.getDefaultInstanceForType();
        com.google.protobuf.Descriptors.Descriptor descriptor44 = builder42.getDescriptorForType();
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder45 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output47 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream49 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output47, (int) 'a');
        byte[] byteArray50 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite51 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions52 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray50, extensionRegistryLite51);
        output47.write(byteArray50);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder54 = builder45.mergeFrom(byteArray50);
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions55 = builder45.buildPartial();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder56 = builder45.addUninterpretedOptionBuilder();
        com.google.protobuf.DescriptorProtos.UninterpretedOption uninterpretedOption57 = builder56.buildPartial();
        java.lang.String str58 = uninterpretedOption57.getIdentifierValue();
        int int59 = uninterpretedOption57.getNameCount();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder60 = builder42.addUninterpretedOption(uninterpretedOption57);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder61 = builder30.setOptions(builder42);
        java.io.InputStream inputStream62 = null;
        com.google.protobuf.ByteString byteString63 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite64 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions65 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(byteString63, extensionRegistryLite64);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder66 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label67 = builder66.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto68 = builder66.buildPartial();
        int int69 = fieldDescriptorProto68.getSerializedSize();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder70 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto68);
        java.io.InputStream inputStream71 = null;
        java.io.InputStream inputStream72 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite73 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location74 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream72, extensionRegistryLite73);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder75 = builder70.mergeFrom(inputStream71, extensionRegistryLite73);
        com.google.javascript.jscomp.FunctionInformationMap functionInformationMap76 = com.google.javascript.jscomp.FunctionInformationMap.parseFrom(byteString63, extensionRegistryLite73);
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder77 = builder42.mergeFrom(inputStream62, extensionRegistryLite73);
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor78 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.Message.Builder builder79 = builder77.newBuilderForField(fieldDescriptor78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(clock18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(descriptor21);
        org.junit.Assert.assertNotNull(descriptorProto22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(descriptorProtoList28);
        org.junit.Assert.assertNotNull(unknownFieldSet29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(byteString31);
        org.junit.Assert.assertNotNull(fileDescriptorProto33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + label39 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label39.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(enumOptions43);
        org.junit.Assert.assertNotNull(descriptor44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(output47);
        org.junit.Assert.assertNotNull(codedOutputStream49);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(methodOptions52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(methodOptions55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(uninterpretedOption57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(byteString63);
        org.junit.Assert.assertNotNull(enumOptions65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertTrue("'" + label67 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label67.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(extensionRegistryLite73);
        org.junit.Assert.assertNotNull(location74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(functionInformationMap76);
        org.junit.Assert.assertNotNull(builder77);
    }

    @Test
    public void test2810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2810");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setRecordFunctionInformation(true);
        compilerOptions0.setMoveFunctionDeclarations(true);
        java.util.Map<java.lang.String, java.lang.Object> strMap5 = null;
        compilerOptions0.setDefineReplacements(strMap5);
        java.util.Map<java.lang.String, java.lang.Object> strMap7 = null;
        compilerOptions0.setTweakReplacements(strMap7);
    }

    @Test
    public void test2811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2811");
        com.google.javascript.jscomp.FunctionInformationMap.Module.Builder builder0 = com.google.javascript.jscomp.FunctionInformationMap.Module.newBuilder();
        java.lang.String str1 = builder0.getCompiledSource();
        com.google.javascript.jscomp.CompilerOptions compilerOptions2 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions2.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat5 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions2.errorFormat = errorFormat5;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy7 = null;
        compilerOptions2.variableRenaming = variableRenamingPolicy7;
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode9 = compilerOptions2.getTracerMode();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder10 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder12 = builder10.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder13 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label14 = builder13.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder15 = builder10.addExtension(builder13);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder16 = builder10.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder17 = builder16.getOptionsBuilder();
        java.io.InputStream inputStream18 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions19 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream18);
        boolean boolean20 = enumOptions19.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder21 = builder17.mergeFrom(enumOptions19);
        byte[] byteArray22 = enumOptions19.toByteArray();
        compilerOptions2.setInputPropertyMapSerialized(byteArray22);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite24 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location25 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(byteArray22, extensionRegistryLite24);
        com.google.javascript.jscomp.FunctionInformationMap.Module.Builder builder28 = builder0.mergeFrom(byteArray22, 0, 0);
        com.google.javascript.jscomp.FunctionInformationMap.Module.Builder builder30 = builder28.setCompiledSource("ISO");
        byte[] byteArray31 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite32 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions33 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray31, extensionRegistryLite32);
        com.google.protobuf.CodedInputStream codedInputStream36 = com.google.protobuf.CodedInputStream.newInstance(byteArray31, 16, (int) 'a');
        com.google.javascript.jscomp.VariableMap variableMap37 = com.google.javascript.jscomp.VariableMap.fromBytes(byteArray31);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite38 = null;
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto enumDescriptorProto39 = com.google.protobuf.DescriptorProtos.EnumDescriptorProto.parseFrom(byteArray31, extensionRegistryLite38);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder40 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder42 = builder40.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder43 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label44 = builder43.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder45 = builder40.addExtension(builder43);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder46 = builder40.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder47 = builder46.getOptionsBuilder();
        java.io.InputStream inputStream48 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions49 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream48);
        boolean boolean50 = enumOptions49.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder51 = builder47.mergeFrom(enumOptions49);
        com.google.protobuf.UnknownFieldSet unknownFieldSet52 = builder47.getUnknownFields();
        byte[] byteArray53 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite54 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions55 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray53, extensionRegistryLite54);
        com.google.protobuf.CodedOutputStream codedOutputStream58 = com.google.protobuf.CodedOutputStream.newInstance(byteArray53, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite59 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto60 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray53, extensionRegistryLite59);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite61 = null;
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto62 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.parseFrom(byteArray53, extensionRegistryLite61);
        com.google.protobuf.UnknownFieldSet unknownFieldSet63 = com.google.protobuf.UnknownFieldSet.parseFrom(byteArray53);
        com.google.protobuf.ByteString byteString64 = unknownFieldSet63.toByteString();
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite65 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder66 = builder47.mergeFrom(byteString64, extensionRegistryLite65);
        com.google.protobuf.DescriptorProtos.FieldOptions fieldOptions67 = com.google.protobuf.DescriptorProtos.FieldOptions.parseFrom(byteString64);
        com.google.protobuf.ByteString byteString68 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite69 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions70 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(byteString68, extensionRegistryLite69);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder71 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label72 = builder71.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto73 = builder71.buildPartial();
        int int74 = fieldDescriptorProto73.getSerializedSize();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder75 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto73);
        java.io.InputStream inputStream76 = null;
        java.io.InputStream inputStream77 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite78 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location79 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream77, extensionRegistryLite78);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder80 = builder75.mergeFrom(inputStream76, extensionRegistryLite78);
        com.google.javascript.jscomp.FunctionInformationMap functionInformationMap81 = com.google.javascript.jscomp.FunctionInformationMap.parseFrom(byteString68, extensionRegistryLite78);
        com.google.protobuf.DescriptorProtos.FileOptions fileOptions82 = com.google.protobuf.DescriptorProtos.FileOptions.parseFrom(byteString64, extensionRegistryLite78);
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange extensionRange83 = com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.parseFrom(byteArray31, extensionRegistryLite78);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.FunctionInformationMap.Module.Builder builder86 = builder28.mergeFrom(byteArray31, 8, 36);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 8");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(errorFormat5);
        org.junit.Assert.assertTrue("'" + tracerMode9 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode9.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + label14 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label14.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(enumOptions19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(location25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(methodOptions33);
        org.junit.Assert.assertNotNull(codedInputStream36);
        org.junit.Assert.assertNotNull(variableMap37);
        org.junit.Assert.assertNotNull(enumDescriptorProto39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + label44 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label44.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(enumOptions49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(unknownFieldSet52);
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[]");
        org.junit.Assert.assertNotNull(methodOptions55);
        org.junit.Assert.assertNotNull(codedOutputStream58);
        org.junit.Assert.assertNotNull(fileDescriptorProto60);
        org.junit.Assert.assertNotNull(serviceDescriptorProto62);
        org.junit.Assert.assertNotNull(unknownFieldSet63);
        org.junit.Assert.assertNotNull(byteString64);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(fieldOptions67);
        org.junit.Assert.assertNotNull(byteString68);
        org.junit.Assert.assertNotNull(enumOptions70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertTrue("'" + label72 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label72.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(extensionRegistryLite78);
        org.junit.Assert.assertNotNull(location79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(functionInformationMap81);
        org.junit.Assert.assertNotNull(fileOptions82);
        org.junit.Assert.assertNotNull(extensionRange83);
    }

    @Test
    public void test2812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2812");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset10);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.of(localDateTime11, (java.time.ZoneId) zoneOffset15);
        java.time.Clock clock18 = java.time.Clock.fixed(instant0, (java.time.ZoneId) zoneOffset15);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.now(clock18);
        java.time.LocalDate localDate20 = java.time.LocalDate.now(clock18);
        com.google.protobuf.Descriptors.Descriptor descriptor21 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto22 = descriptor21.toProto();
        boolean boolean23 = descriptorProto22.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList24 = descriptorProto22.getNestedTypeList();
        int int25 = descriptorProto22.getExtensionRangeCount();
        boolean boolean26 = localDate20.equals((java.lang.Object) descriptorProto22);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder27 = descriptorProto22.newBuilderForType();
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.FieldDescriptorProtoOrBuilder fieldDescriptorProtoOrBuilder29 = descriptorProto22.getFieldOrBuilder(43);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 43, Size: 9");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(clock18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(descriptor21);
        org.junit.Assert.assertNotNull(descriptorProto22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test2813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2813");
        int int0 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.OPTIONS_FIELD_NUMBER;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 4 + "'", int0 == 4);
    }

    @Test
    public void test2814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2814");
        com.google.javascript.rhino.Node node7 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean8 = node7.isFromExterns();
        com.google.javascript.rhino.Node node12 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean13 = node12.isFromExterns();
        java.lang.String str14 = node12.toString();
        com.google.javascript.rhino.Node node15 = node7.copyInformationFrom(node12);
        int int16 = node7.getLineno();
        boolean boolean17 = node7.isLabel();
        com.google.javascript.rhino.Node node21 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean22 = node21.isStringKey();
        boolean boolean23 = node21.isTrue();
        com.google.javascript.rhino.InputId inputId25 = new com.google.javascript.rhino.InputId("NUMBER 52.0 0");
        node21.setInputId(inputId25);
        node7.setInputId(inputId25);
        com.google.javascript.jscomp.CompilerOptions compilerOptions28 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions28.setRecordFunctionInformation(true);
        boolean boolean31 = compilerOptions28.checkControlStructures;
        compilerOptions28.setCollapseProperties(false);
        compilerOptions28.setAssumeStrictThis(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions36 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions36.optimizeCalls = false;
        compilerOptions36.preferLineBreakAtEndOfFile = false;
        boolean boolean41 = compilerOptions36.markNoSideEffectCalls;
        boolean boolean42 = compilerOptions36.labelRenaming;
        com.google.javascript.jscomp.DependencyOptions dependencyOptions43 = new com.google.javascript.jscomp.DependencyOptions();
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet48 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet48, strArray47);
        boolean boolean50 = strSet48.isEmpty();
        java.nio.ByteBuffer byteBuffer52 = java.nio.ByteBuffer.allocate(100);
        boolean boolean53 = strSet48.equals((java.lang.Object) byteBuffer52);
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet58 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet58, strArray57);
        boolean boolean60 = strSet58.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream61 = strSet58.stream();
        boolean boolean62 = strSet48.retainAll((java.util.Collection<java.lang.String>) strSet58);
        com.google.javascript.jscomp.DependencyOptions dependencyOptions63 = dependencyOptions43.setEntryPoints((java.util.Collection<java.lang.String>) strSet48);
        compilerOptions36.setDependencyOptions(dependencyOptions43);
        com.google.javascript.jscomp.CheckLevel checkLevel65 = compilerOptions36.checkGlobalThisLevel;
        compilerOptions28.reportMissingOverride = checkLevel65;
        com.google.javascript.jscomp.DiagnosticType diagnosticType69 = com.google.javascript.jscomp.DiagnosticType.warning("", "Unknown class name");
        java.lang.String[] strArray74 = new java.lang.String[] { "2022-02-21", "2022-02-21", "hi!", "/tmp/hi!4516073975838273390ISO" };
        com.google.javascript.jscomp.JSError jSError75 = com.google.javascript.jscomp.JSError.make("{}", node7, checkLevel65, diagnosticType69, strArray74);
        java.lang.String[] strArray76 = new java.lang.String[] {};
        com.google.javascript.jscomp.JSError jSError77 = com.google.javascript.jscomp.JSError.make("{2106658412}", 8, 43, diagnosticType69, strArray76);
        org.junit.Assert.assertNotNull(node7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(node12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "NUMBER 52.0 0" + "'", str14, "NUMBER 52.0 0");
        org.junit.Assert.assertNotNull(node15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(byteBuffer52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(strStream61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(dependencyOptions63);
        org.junit.Assert.assertTrue("'" + checkLevel65 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel65.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(diagnosticType69);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertNotNull(jSError75);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertNotNull(jSError77);
    }

    @Test
    public void test2815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2815");
        byte[] byteArray0 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions2 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray0, extensionRegistryLite1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite3 = null;
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto enumDescriptorProto4 = com.google.protobuf.DescriptorProtos.EnumDescriptorProto.parseFrom(byteArray0, extensionRegistryLite3);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder5 = enumDescriptorProto4.newBuilderForType();
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto enumDescriptorProto6 = builder5.build();
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions7 = enumDescriptorProto6.getOptions();
        java.lang.Class class9 = null;
        java.io.InputStream inputStream10 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite11 = null;
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange extensionRange12 = com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.parseFrom(inputStream10, extensionRegistryLite11);
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.Builder builder13 = com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.newBuilder(extensionRange12);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.GeneratedMessage.GeneratedExtension<com.google.protobuf.DescriptorProtos.FileDescriptorProto, com.google.javascript.jscomp.CompilerOptions.Reach> fileDescriptorProtoGeneratedExtension14 = com.google.protobuf.GeneratedMessage.newMessageScopedGeneratedExtension((com.google.protobuf.Message) enumDescriptorProto6, (-1), class9, (com.google.protobuf.Message) extensionRange12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(methodOptions2);
        org.junit.Assert.assertNotNull(enumDescriptorProto4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(enumDescriptorProto6);
        org.junit.Assert.assertNotNull(enumOptions7);
        org.junit.Assert.assertNotNull(extensionRange12);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test2816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2816");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy5 = null;
        compilerOptions0.variableRenaming = variableRenamingPolicy5;
        compilerOptions0.setSummaryDetailLevel(999);
        com.google.javascript.jscomp.CompilerOptions compilerOptions9 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions9.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat12 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions9.errorFormat = errorFormat12;
        java.lang.String[] strArray20 = new java.lang.String[] { "South Korea", "Unknown class name", "ISO", "OffsetSeconds", ":" };
        java.util.ArrayList<java.lang.String> strList21 = new java.util.ArrayList<java.lang.String>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList21, strArray20);
        compilerOptions9.setReplaceStringsConfiguration("1970-01-01+00:00:52", (java.util.List<java.lang.String>) strList21);
        compilerOptions9.lineBreak = false;
        compilerOptions9.lineBreak = false;
        com.google.javascript.jscomp.AnonymousFunctionNamingPolicy anonymousFunctionNamingPolicy28 = com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF;
        compilerOptions9.setAnonymousFunctionNaming(anonymousFunctionNamingPolicy28);
        compilerOptions0.anonymousFunctionNaming = anonymousFunctionNamingPolicy28;
        compilerOptions0.generatePseudoNames = true;
        compilerOptions0.ideMode = true;
        org.junit.Assert.assertNotNull(errorFormat3);
        org.junit.Assert.assertNotNull(errorFormat12);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + anonymousFunctionNamingPolicy28 + "' != '" + com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF + "'", anonymousFunctionNamingPolicy28.equals(com.google.javascript.jscomp.AnonymousFunctionNamingPolicy.OFF));
    }

    @Test
    public void test2817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2817");
        java.time.Month month0 = java.time.Month.APRIL;
        java.time.chrono.Chronology chronology1 = java.time.chrono.Chronology.from((java.time.temporal.TemporalAccessor) month0);
        java.lang.String str2 = chronology1.toString();
        java.time.Instant instant3 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime8 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset7);
        java.time.OffsetDateTime offsetDateTime9 = java.time.OffsetDateTime.ofInstant(instant3, (java.time.ZoneId) zoneOffset7);
        java.time.ZoneOffset zoneOffset13 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset13);
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset18);
        java.time.ZonedDateTime zonedDateTime20 = java.time.ZonedDateTime.of(localDateTime14, (java.time.ZoneId) zoneOffset18);
        java.time.Clock clock21 = java.time.Clock.fixed(instant3, (java.time.ZoneId) zoneOffset18);
        java.time.chrono.ChronoLocalDate chronoLocalDate22 = chronology1.dateNow(clock21);
        long long23 = clock21.millis();
        java.time.ZoneId zoneId24 = clock21.getZone();
        org.junit.Assert.assertTrue("'" + month0 + "' != '" + java.time.Month.APRIL + "'", month0.equals(java.time.Month.APRIL));
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ISO" + "'", str2, "ISO");
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(zonedDateTime20);
        org.junit.Assert.assertNotNull(clock21);
        org.junit.Assert.assertNotNull(chronoLocalDate22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(zoneId24);
    }

    @Test
    public void test2818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2818");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo sourceCodeInfo2 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.parseFrom(inputStream0, extensionRegistryLite1);
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder3 = sourceCodeInfo2.newBuilderForType();
        com.google.protobuf.UnknownFieldSet unknownFieldSet4 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder5 = builder3.setUnknownFields(unknownFieldSet4);
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.Builder builder7 = builder3.addLocationBuilder(0);
        java.io.File file10 = null;
        java.io.File file11 = java.io.File.createTempFile("hi!", "ISO", file10);
        boolean boolean14 = file11.setWritable(false, false);
        java.net.URI uRI15 = file11.toURI();
        java.io.PrintStream printStream16 = new java.io.PrintStream(file11);
        printStream16.print((int) (byte) 0);
        printStream16.print(10.0d);
        printStream16.close();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        boolean boolean28 = strSet26.isEmpty();
        java.nio.ByteBuffer byteBuffer30 = java.nio.ByteBuffer.allocate(100);
        boolean boolean31 = strSet26.equals((java.lang.Object) byteBuffer30);
        java.nio.IntBuffer intBuffer32 = byteBuffer30.asIntBuffer();
        double double33 = byteBuffer30.getDouble();
        java.nio.ByteBuffer byteBuffer36 = byteBuffer30.put((int) (short) 1, (byte) 1);
        byte[] byteArray37 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite38 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions39 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray37, extensionRegistryLite38);
        com.google.protobuf.CodedOutputStream codedOutputStream42 = com.google.protobuf.CodedOutputStream.newInstance(byteArray37, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite43 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto44 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray37, extensionRegistryLite43);
        com.google.protobuf.CodedOutputStream codedOutputStream45 = com.google.protobuf.CodedOutputStream.newInstance(byteArray37);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer30.get(byteArray37);
        printStream16.write(byteArray37, (int) '/', (int) (byte) 1);
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.Builder builder50 = builder7.mergeFrom(byteArray37);
        int int51 = builder50.getPathCount();
        com.google.protobuf.Descriptors.Descriptor descriptor52 = builder50.getDescriptorForType();
        java.util.List<com.google.protobuf.Descriptors.Descriptor> descriptorList53 = descriptor52.getNestedTypes();
        org.junit.Assert.assertNotNull(sourceCodeInfo2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(file11);
        org.junit.Assert.assertEquals(file11.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file11.toString(), "/tmp/hi!2465214148319342807ISO");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(uRI15);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(intBuffer32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(methodOptions39);
        org.junit.Assert.assertNotNull(codedOutputStream42);
        org.junit.Assert.assertNotNull(fileDescriptorProto44);
        org.junit.Assert.assertNotNull(codedOutputStream45);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(descriptor52);
        org.junit.Assert.assertNotNull(descriptorList53);
    }

    @Test
    public void test2819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2819");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions1 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream0);
        java.util.List<com.google.protobuf.DescriptorProtos.UninterpretedOption> uninterpretedOptionList2 = enumOptions1.getUninterpretedOptionList();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder3 = enumOptions1.newBuilderForType();
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor4 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.Message.Builder builder5 = builder3.newBuilderForField(fieldDescriptor4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(enumOptions1);
        org.junit.Assert.assertNotNull(uninterpretedOptionList2);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test2820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2820");
        com.google.protobuf.Descriptors.Descriptor descriptor0 = com.google.protobuf.DescriptorProtos.DescriptorProto.getDescriptor();
        java.util.List<com.google.protobuf.Descriptors.FieldDescriptor> fieldDescriptorList1 = descriptor0.getFields();
        org.junit.Assert.assertNotNull(descriptor0);
        org.junit.Assert.assertNotNull(fieldDescriptorList1);
    }

    @Test
    public void test2821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2821");
        java.util.Date date3 = new java.util.Date((int) (byte) -1, 43, 16384);
        date3.setSeconds(4);
        java.lang.String str6 = date3.toLocaleString();
        date3.setMinutes((int) (byte) -1);
        org.junit.Assert.assertEquals(date3.toString(), "Sun Jun 08 23:59:04 UTC 1947");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\uc624\uc804 12:00:04" + "'", str6, "\uc624\uc804 12:00:04");
    }

    @Test
    public void test2822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2822");
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup0 = com.google.javascript.jscomp.DiagnosticGroups.ES5_STRICT;
        org.junit.Assert.assertNotNull(diagnosticGroup0);
    }

    @Test
    public void test2823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2823");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.OffsetDateTime offsetDateTime8 = offsetDateTime6.minusDays((long) (short) 100);
        java.lang.String str9 = offsetDateTime6.toString();
        java.time.temporal.ChronoField chronoField10 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        int int11 = offsetDateTime6.get((java.time.temporal.TemporalField) chronoField10);
        java.time.OffsetDateTime offsetDateTime13 = offsetDateTime6.withDayOfMonth((int) (short) 10);
        java.time.temporal.TemporalUnit temporalUnit15 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetDateTime offsetDateTime16 = offsetDateTime13.plus((-2161280968000L), temporalUnit15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(offsetDateTime8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-01T00:00:52+00:00:52" + "'", str9, "1970-01-01T00:00:52+00:00:52");
        org.junit.Assert.assertTrue("'" + chronoField10 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField10.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 12 + "'", int11 == 12);
        org.junit.Assert.assertNotNull(offsetDateTime13);
    }

    @Test
    public void test2824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2824");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.lang.String str1 = localDate0.toString();
        java.time.chrono.IsoChronology isoChronology2 = localDate0.getChronology();
        java.lang.String str3 = isoChronology2.getCalendarType();
        java.util.List<java.time.chrono.Era> eraList4 = isoChronology2.eras();
        java.lang.String str5 = isoChronology2.toString();
        java.lang.String str6 = isoChronology2.getId();
        java.util.List<java.time.chrono.Era> eraList7 = isoChronology2.eras();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "2022-02-21" + "'", str1, "2022-02-21");
        org.junit.Assert.assertNotNull(isoChronology2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "iso8601" + "'", str3, "iso8601");
        org.junit.Assert.assertNotNull(eraList4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ISO" + "'", str5, "ISO");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ISO" + "'", str6, "ISO");
        org.junit.Assert.assertNotNull(eraList7);
    }

    @Test
    public void test2825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2825");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label1 = builder0.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto2 = builder0.buildPartial();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder3 = fieldDescriptorProto2.newBuilderForType();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder4 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto2);
        java.io.File file7 = null;
        java.io.File file8 = java.io.File.createTempFile("hi!", "ISO", file7);
        boolean boolean11 = file8.setWritable(false, false);
        java.net.URI uRI12 = file8.toURI();
        java.io.PrintStream printStream13 = new java.io.PrintStream(file8);
        printStream13.print((int) (byte) 0);
        printStream13.print(10.0d);
        printStream13.close();
        java.lang.String[] strArray22 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet23 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet23, strArray22);
        boolean boolean25 = strSet23.isEmpty();
        java.nio.ByteBuffer byteBuffer27 = java.nio.ByteBuffer.allocate(100);
        boolean boolean28 = strSet23.equals((java.lang.Object) byteBuffer27);
        java.nio.IntBuffer intBuffer29 = byteBuffer27.asIntBuffer();
        double double30 = byteBuffer27.getDouble();
        java.nio.ByteBuffer byteBuffer33 = byteBuffer27.put((int) (short) 1, (byte) 1);
        byte[] byteArray34 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite35 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions36 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray34, extensionRegistryLite35);
        com.google.protobuf.CodedOutputStream codedOutputStream39 = com.google.protobuf.CodedOutputStream.newInstance(byteArray34, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite40 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto41 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray34, extensionRegistryLite40);
        com.google.protobuf.CodedOutputStream codedOutputStream42 = com.google.protobuf.CodedOutputStream.newInstance(byteArray34);
        java.nio.ByteBuffer byteBuffer43 = byteBuffer27.get(byteArray34);
        printStream13.write(byteArray34, (int) '/', (int) (byte) 1);
        java.io.InputStream inputStream47 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite48 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location49 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream47, extensionRegistryLite48);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder50 = builder4.mergeFrom(byteArray34, extensionRegistryLite48);
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor51 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.Message.Builder builder52 = builder50.newBuilderForField(fieldDescriptor51);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + label1 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label1.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(file8);
        org.junit.Assert.assertEquals(file8.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file8.toString(), "/tmp/hi!7487172687024036560ISO");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(uRI12);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(intBuffer29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.0d + "'", double30 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(methodOptions36);
        org.junit.Assert.assertNotNull(codedOutputStream39);
        org.junit.Assert.assertNotNull(fileDescriptorProto41);
        org.junit.Assert.assertNotNull(codedOutputStream42);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(extensionRegistryLite48);
        org.junit.Assert.assertNotNull(location49);
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test2826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2826");
        java.io.PrintStream printStream0 = null;
        com.google.javascript.jscomp.Compiler compiler1 = new com.google.javascript.jscomp.Compiler(printStream0);
        com.google.javascript.jscomp.SourceMap sourceMap2 = compiler1.getSourceMap();
        java.util.stream.LongStream longStream4 = java.util.stream.LongStream.of((long) (-1));
        com.google.common.collect.ImmutableMap<com.google.javascript.jscomp.Compiler, java.util.stream.LongStream> compilerMap5 = com.google.common.collect.ImmutableMap.of(compiler1, longStream4);
        java.util.stream.DoubleStream doubleStream6 = longStream4.asDoubleStream();
        java.util.stream.DoubleStream doubleStream7 = doubleStream6.unordered();
        boolean boolean8 = doubleStream7.isParallel();
        org.junit.Assert.assertNull(sourceMap2);
        org.junit.Assert.assertNotNull(longStream4);
        org.junit.Assert.assertNotNull(compilerMap5);
        org.junit.Assert.assertNotNull(doubleStream6);
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test2827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2827");
        com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder builder0 = com.google.javascript.jscomp.FunctionInformationMap.Entry.newBuilder();
        boolean boolean1 = builder0.hasSourceName();
        com.google.javascript.jscomp.FunctionInformationMap.Entry entry2 = builder0.getDefaultInstanceForType();
        boolean boolean3 = entry2.hasSize();
        com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder builder4 = entry2.toBuilder();
        java.io.InputStream inputStream5 = null;
        com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder builder6 = builder4.mergeFrom(inputStream5);
        boolean boolean7 = builder4.hasSize();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(entry2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test2828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2828");
        com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder builder0 = com.google.javascript.jscomp.FunctionInformationMap.Entry.newBuilder();
        boolean boolean1 = builder0.hasSourceName();
        com.google.javascript.jscomp.FunctionInformationMap.Entry entry2 = builder0.getDefaultInstanceForType();
        com.google.protobuf.Descriptors.Descriptor descriptor3 = builder0.getDescriptorForType();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto4 = descriptor3.toProto();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(entry2);
        org.junit.Assert.assertNotNull(descriptor3);
        org.junit.Assert.assertNotNull(descriptorProto4);
    }

    @Test
    public void test2829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2829");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean4 = node3.isStringKey();
        boolean boolean5 = node3.isTrue();
        com.google.javascript.rhino.InputId inputId7 = new com.google.javascript.rhino.InputId("NUMBER 52.0 0");
        node3.setInputId(inputId7);
        boolean boolean9 = node3.isThis();
        com.google.javascript.rhino.Node node14 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean15 = node14.isStringKey();
        com.google.javascript.rhino.Node node16 = new com.google.javascript.rhino.Node(0, node14);
        boolean boolean17 = node16.isFor();
        node16.setLineno(0);
        com.google.javascript.rhino.Node node20 = node3.copyInformationFromForTree(node16);
        node20.setLength(9);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(node14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(node20);
    }

    @Test
    public void test2830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2830");
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto0 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.getDefaultInstance();
        boolean boolean1 = serviceDescriptorProto0.hasOptions();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder2 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.newBuilder(serviceDescriptorProto0);
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto3 = builder2.buildPartial();
        com.google.protobuf.DescriptorProtos.ServiceOptions serviceOptions4 = builder2.getOptions();
        com.google.protobuf.DescriptorProtos.ServiceOptions.Builder builder5 = serviceOptions4.toBuilder();
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor6 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.ServiceOptions.Builder builder7 = builder5.clearField(fieldDescriptor6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(serviceDescriptorProto0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(serviceDescriptorProto3);
        org.junit.Assert.assertNotNull(serviceOptions4);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test2831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2831");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label4 = builder3.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = builder0.addExtension(builder3);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder6 = builder0.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder7 = builder6.getOptionsBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions8 = builder7.getDefaultInstanceForType();
        com.google.protobuf.Descriptors.Descriptor descriptor9 = builder7.getDescriptorForType();
        com.google.protobuf.ByteString.Output output11 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream13 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output11, (int) 'a');
        byte[] byteArray14 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite15 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions16 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray14, extensionRegistryLite15);
        output11.write(byteArray14);
        com.google.protobuf.CodedInputStream codedInputStream20 = com.google.protobuf.CodedInputStream.newInstance(byteArray14, 21, 4);
        boolean boolean21 = codedInputStream20.isAtEnd();
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder22 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output24 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream26 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output24, (int) 'a');
        byte[] byteArray27 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite28 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions29 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray27, extensionRegistryLite28);
        output24.write(byteArray27);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder31 = builder22.mergeFrom(byteArray27);
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions32 = builder22.buildPartial();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder33 = builder22.addUninterpretedOptionBuilder();
        byte[] byteArray34 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite35 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions36 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray34, extensionRegistryLite35);
        com.google.protobuf.CodedOutputStream codedOutputStream39 = com.google.protobuf.CodedOutputStream.newInstance(byteArray34, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite40 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto41 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray34, extensionRegistryLite40);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite42 = null;
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto43 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.parseFrom(byteArray34, extensionRegistryLite42);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder44 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label45 = builder44.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto46 = builder44.buildPartial();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder47 = fieldDescriptorProto46.newBuilderForType();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder48 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto46);
        java.io.File file51 = null;
        java.io.File file52 = java.io.File.createTempFile("hi!", "ISO", file51);
        boolean boolean55 = file52.setWritable(false, false);
        java.net.URI uRI56 = file52.toURI();
        java.io.PrintStream printStream57 = new java.io.PrintStream(file52);
        printStream57.print((int) (byte) 0);
        printStream57.print(10.0d);
        printStream57.close();
        java.lang.String[] strArray66 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet67 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet67, strArray66);
        boolean boolean69 = strSet67.isEmpty();
        java.nio.ByteBuffer byteBuffer71 = java.nio.ByteBuffer.allocate(100);
        boolean boolean72 = strSet67.equals((java.lang.Object) byteBuffer71);
        java.nio.IntBuffer intBuffer73 = byteBuffer71.asIntBuffer();
        double double74 = byteBuffer71.getDouble();
        java.nio.ByteBuffer byteBuffer77 = byteBuffer71.put((int) (short) 1, (byte) 1);
        byte[] byteArray78 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite79 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions80 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray78, extensionRegistryLite79);
        com.google.protobuf.CodedOutputStream codedOutputStream83 = com.google.protobuf.CodedOutputStream.newInstance(byteArray78, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite84 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto85 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray78, extensionRegistryLite84);
        com.google.protobuf.CodedOutputStream codedOutputStream86 = com.google.protobuf.CodedOutputStream.newInstance(byteArray78);
        java.nio.ByteBuffer byteBuffer87 = byteBuffer71.get(byteArray78);
        printStream57.write(byteArray78, (int) '/', (int) (byte) 1);
        java.io.InputStream inputStream91 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite92 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location93 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream91, extensionRegistryLite92);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder94 = builder48.mergeFrom(byteArray78, extensionRegistryLite92);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder95 = builder22.mergeFrom(byteArray34, extensionRegistryLite92);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.MessageLite.Builder builder96 = builder7.mergeFrom(codedInputStream20, extensionRegistryLite92);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 21");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + label4 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label4.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(enumOptions8);
        org.junit.Assert.assertNotNull(descriptor9);
        org.junit.Assert.assertNotNull(output11);
        org.junit.Assert.assertNotNull(codedOutputStream13);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(methodOptions16);
        org.junit.Assert.assertNotNull(codedInputStream20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(output24);
        org.junit.Assert.assertNotNull(codedOutputStream26);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[]");
        org.junit.Assert.assertNotNull(methodOptions29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(methodOptions32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[]");
        org.junit.Assert.assertNotNull(methodOptions36);
        org.junit.Assert.assertNotNull(codedOutputStream39);
        org.junit.Assert.assertNotNull(fileDescriptorProto41);
        org.junit.Assert.assertNotNull(serviceDescriptorProto43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + label45 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label45.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(file52);
        org.junit.Assert.assertEquals(file52.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file52.toString(), "/tmp/hi!4144908158204010549ISO");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(uRI56);
        org.junit.Assert.assertNotNull(strArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(byteBuffer71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(intBuffer73);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 0.0d + "'", double74 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer77);
        org.junit.Assert.assertNotNull(byteArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray78), "[]");
        org.junit.Assert.assertNotNull(methodOptions80);
        org.junit.Assert.assertNotNull(codedOutputStream83);
        org.junit.Assert.assertNotNull(fileDescriptorProto85);
        org.junit.Assert.assertNotNull(codedOutputStream86);
        org.junit.Assert.assertNotNull(byteBuffer87);
        org.junit.Assert.assertNotNull(extensionRegistryLite92);
        org.junit.Assert.assertNotNull(location93);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(builder95);
    }

    @Test
    public void test2832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2832");
        java.nio.ByteOrder byteOrder0 = java.nio.ByteOrder.nativeOrder();
        org.junit.Assert.assertNotNull(byteOrder0);
    }

    @Test
    public void test2833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2833");
        java.io.PrintStream printStream0 = null;
        com.google.javascript.jscomp.Compiler compiler1 = new com.google.javascript.jscomp.Compiler(printStream0);
        com.google.javascript.jscomp.SourceMap sourceMap2 = compiler1.getSourceMap();
        java.util.stream.LongStream longStream4 = java.util.stream.LongStream.of((long) (-1));
        com.google.common.collect.ImmutableMap<com.google.javascript.jscomp.Compiler, java.util.stream.LongStream> compilerMap5 = com.google.common.collect.ImmutableMap.of(compiler1, longStream4);
        java.util.stream.Stream<java.lang.Long> longStream6 = longStream4.boxed();
        org.junit.Assert.assertNull(sourceMap2);
        org.junit.Assert.assertNotNull(longStream4);
        org.junit.Assert.assertNotNull(compilerMap5);
        org.junit.Assert.assertNotNull(longStream6);
    }

    @Test
    public void test2834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2834");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.lang.String str1 = charset0.displayName();
        java.lang.String str2 = charset0.toString();
        java.lang.String str3 = charset0.toString();
        boolean boolean4 = charset0.canEncode();
        java.nio.charset.Charset charset5 = java.nio.charset.Charset.defaultCharset();
        boolean boolean6 = charset5.canEncode();
        java.lang.String str7 = charset5.toString();
        boolean boolean8 = charset0.contains(charset5);
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "US-ASCII" + "'", str1, "US-ASCII");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "US-ASCII" + "'", str2, "US-ASCII");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "US-ASCII" + "'", str3, "US-ASCII");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "US-ASCII" + "'", str7, "US-ASCII");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test2835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2835");
        java.io.InputStream inputStream0 = null;
        java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite> priorityMap1 = new java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite>();
        java.lang.Object obj2 = priorityMap1.clone();
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.newBuilder();
        boolean boolean4 = priorityMap1.containsValue((java.lang.Object) builder3);
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder6 = builder3.setName("java.nio.ByteBufferAsDoubleBufferB[pos=0 lim=12 cap=12]");
        com.google.protobuf.ByteString byteString7 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder8 = builder3.mergeFrom(byteString7);
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions9 = com.google.protobuf.DescriptorProtos.EnumValueOptions.getDefaultInstance();
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder10 = com.google.protobuf.DescriptorProtos.EnumValueOptions.newBuilder(enumValueOptions9);
        java.io.InputStream inputStream11 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder12 = builder10.mergeFrom(inputStream11);
        com.google.protobuf.ByteString byteString13 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto14 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.parseFrom(byteString13);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite15 = null;
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto enumValueDescriptorProto16 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.parseFrom(byteString13, extensionRegistryLite15);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite17 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions18 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteString13, extensionRegistryLite17);
        java.io.InputStream inputStream19 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite20 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location21 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream19, extensionRegistryLite20);
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder22 = builder12.mergeFrom(byteString13, extensionRegistryLite20);
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto23 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.parseFrom(byteString7, extensionRegistryLite20);
        com.google.javascript.jscomp.FunctionInformationMap functionInformationMap24 = com.google.javascript.jscomp.FunctionInformationMap.parseFrom(inputStream0, extensionRegistryLite20);
        int int25 = functionInformationMap24.getModuleCount();
        com.google.javascript.jscomp.FunctionInformationMap.Builder builder26 = functionInformationMap24.toBuilder();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.FunctionInformationMap.Module.Builder builder28 = builder26.addModuleBuilder(1024);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1024, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "{}");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(byteString7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(enumValueOptions9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(byteString13);
        org.junit.Assert.assertNotNull(methodDescriptorProto14);
        org.junit.Assert.assertNotNull(enumValueDescriptorProto16);
        org.junit.Assert.assertNotNull(methodOptions18);
        org.junit.Assert.assertNotNull(extensionRegistryLite20);
        org.junit.Assert.assertNotNull(location21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(serviceDescriptorProto23);
        org.junit.Assert.assertNotNull(functionInformationMap24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test2836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2836");
        java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite> priorityMap0 = new java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite>();
        java.lang.Object obj1 = priorityMap0.clone();
        boolean boolean2 = priorityMap0.isEmpty();
        java.lang.String str3 = priorityMap0.toString();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder4 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder5 = builder4.clearCcGenericServices();
        boolean boolean6 = builder4.isInitialized();
        com.google.protobuf.MessageLite messageLite7 = priorityMap0.get((java.lang.Object) builder4);
        java.util.Enumeration<com.google.javascript.jscomp.WarningsGuard.Priority> priorityEnumeration8 = priorityMap0.keys();
        java.util.Collection<com.google.protobuf.MessageLite> messageLiteCollection9 = priorityMap0.values();
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "{}");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "{}" + "'", str3, "{}");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNull(messageLite7);
        org.junit.Assert.assertNotNull(priorityEnumeration8);
        org.junit.Assert.assertNotNull(messageLiteCollection9);
    }

    @Test
    public void test2837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2837");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label4 = builder3.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = builder0.addExtension(builder3);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder6 = builder0.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder7 = builder6.getOptionsBuilder();
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder8 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output10 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream12 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output10, (int) 'a');
        byte[] byteArray13 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite14 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions15 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray13, extensionRegistryLite14);
        output10.write(byteArray13);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder17 = builder8.mergeFrom(byteArray13);
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder18 = builder7.mergeFrom(byteArray13);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder19 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder21 = builder19.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder22 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label23 = builder22.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder24 = builder19.addExtension(builder22);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder25 = builder19.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder26 = builder25.getOptionsBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions27 = builder26.getDefaultInstanceForType();
        int int28 = enumOptions27.getSerializedSize();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder29 = builder7.mergeFrom(enumOptions27);
        int int30 = enumOptions27.getUninterpretedOptionCount();
        java.util.Map<com.google.protobuf.Descriptors.FieldDescriptor, java.lang.Object> fieldDescriptorMap31 = enumOptions27.getAllFields();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + label4 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label4.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(output10);
        org.junit.Assert.assertNotNull(codedOutputStream12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(methodOptions15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + label23 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label23.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(enumOptions27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(fieldDescriptorMap31);
    }

    @Test
    public void test2838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2838");
        com.google.protobuf.ByteString.Output output1 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream3 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output1, (int) 'a');
        codedOutputStream3.writeSFixed64((int) 'a', (long) 10);
        codedOutputStream3.writeSFixed32((int) (byte) 0, 16);
        codedOutputStream3.writeEnumNoTag(0);
        org.junit.Assert.assertNotNull(output1);
        org.junit.Assert.assertNotNull(codedOutputStream3);
    }

    @Test
    public void test2839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2839");
        com.google.javascript.jscomp.DiagnosticType diagnosticType2 = com.google.javascript.jscomp.DiagnosticType.warning("", "Unknown class name");
        java.text.MessageFormat messageFormat3 = diagnosticType2.format;
        java.text.Format[] formatArray4 = messageFormat3.getFormatsByArgumentIndex();
        java.util.Locale locale5 = messageFormat3.getLocale();
        java.lang.String str6 = locale5.getVariant();
        org.junit.Assert.assertNotNull(diagnosticType2);
        org.junit.Assert.assertNotNull(messageFormat3);
        org.junit.Assert.assertNotNull(formatArray4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test2840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2840");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.DescriptorProtos.FieldOptions fieldOptions1 = com.google.protobuf.DescriptorProtos.FieldOptions.parseFrom(inputStream0);
        boolean boolean2 = fieldOptions1.hasExperimentalMapKey();
        com.google.protobuf.DescriptorProtos.FieldOptions.Builder builder3 = com.google.protobuf.DescriptorProtos.FieldOptions.newBuilder(fieldOptions1);
        com.google.javascript.jscomp.FunctionInformationMap.Module.Builder builder4 = com.google.javascript.jscomp.FunctionInformationMap.Module.newBuilder();
        java.lang.String str5 = builder4.getCompiledSource();
        boolean boolean6 = builder4.hasName();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder7 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder9 = builder7.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder10 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label11 = builder10.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder12 = builder7.addExtension(builder10);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder13 = builder7.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder14 = builder13.getOptionsBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder15 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder17 = builder15.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder18 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label19 = builder18.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder20 = builder15.addExtension(builder18);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder21 = builder15.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder22 = builder21.getOptionsBuilder();
        java.io.InputStream inputStream23 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions24 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream23);
        boolean boolean25 = enumOptions24.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder26 = builder22.mergeFrom(enumOptions24);
        com.google.protobuf.UnknownFieldSet unknownFieldSet27 = builder22.getUnknownFields();
        com.google.protobuf.CodedOutputStream codedOutputStream28 = null;
        unknownFieldSet27.writeTo(codedOutputStream28);
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder30 = builder14.setUnknownFields(unknownFieldSet27);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto31 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.getDefaultInstance();
        boolean boolean32 = methodDescriptorProto31.hasOutputType();
        byte[] byteArray33 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite34 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions35 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray33, extensionRegistryLite34);
        com.google.protobuf.CodedOutputStream codedOutputStream38 = com.google.protobuf.CodedOutputStream.newInstance(byteArray33, (int) (short) 0, 1);
        methodDescriptorProto31.writeTo(codedOutputStream38);
        unknownFieldSet27.writeTo(codedOutputStream38);
        com.google.javascript.jscomp.FunctionInformationMap.Module.Builder builder41 = builder4.setUnknownFields(unknownFieldSet27);
        boolean boolean43 = unknownFieldSet27.hasField(4096);
        com.google.protobuf.DescriptorProtos.FieldOptions.Builder builder44 = builder3.mergeUnknownFields(unknownFieldSet27);
        int int45 = unknownFieldSet27.getSerializedSizeAsMessageSet();
        org.junit.Assert.assertNotNull(fieldOptions1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + label11 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label11.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + label19 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label19.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(enumOptions24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(unknownFieldSet27);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(methodDescriptorProto31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[]");
        org.junit.Assert.assertNotNull(methodOptions35);
        org.junit.Assert.assertNotNull(codedOutputStream38);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test2841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2841");
        java.io.InputStream inputStream0 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.UninterpretedOption uninterpretedOption1 = com.google.protobuf.DescriptorProtos.UninterpretedOption.parseDelimitedFrom(inputStream0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2842");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet6 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet6, strArray5);
        boolean boolean8 = strSet6.isEmpty();
        java.nio.ByteBuffer byteBuffer10 = java.nio.ByteBuffer.allocate(100);
        boolean boolean11 = strSet6.equals((java.lang.Object) byteBuffer10);
        java.nio.IntBuffer intBuffer12 = byteBuffer10.asIntBuffer();
        java.nio.CharBuffer charBuffer14 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer16 = charBuffer14.put('a');
        char[] charArray18 = new char[] { '4' };
        java.nio.CharBuffer charBuffer19 = charBuffer16.get(charArray18);
        java.nio.charset.CoderResult coderResult21 = charsetDecoder1.decode(byteBuffer10, charBuffer16, true);
        java.nio.charset.CodingErrorAction codingErrorAction22 = charsetDecoder1.malformedInputAction();
        java.lang.String str23 = codingErrorAction22.toString();
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intBuffer12);
        org.junit.Assert.assertNotNull(charBuffer14);
        org.junit.Assert.assertNotNull(charBuffer16);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer19);
        org.junit.Assert.assertNotNull(coderResult21);
        org.junit.Assert.assertNotNull(codingErrorAction22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "REPORT" + "'", str23, "REPORT");
    }

    @Test
    public void test2843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2843");
        com.google.common.collect.ImmutableList.Builder<java.util.function.LongUnaryOperator> longUnaryOperatorBuilder0 = com.google.common.collect.ImmutableList.builder();
        java.util.function.LongUnaryOperator longUnaryOperator1 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.common.collect.ImmutableList.Builder<java.util.function.LongUnaryOperator> longUnaryOperatorBuilder2 = longUnaryOperatorBuilder0.add(longUnaryOperator1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longUnaryOperatorBuilder0);
    }

    @Test
    public void test2844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2844");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions1 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream0);
        java.util.List<com.google.protobuf.DescriptorProtos.UninterpretedOption> uninterpretedOptionList2 = enumOptions1.getUninterpretedOptionList();
        boolean boolean3 = enumOptions1.isInitialized();
        boolean boolean4 = enumOptions1.isInitialized();
        java.util.Map<com.google.protobuf.Descriptors.FieldDescriptor, java.lang.Object> fieldDescriptorMap5 = enumOptions1.getAllFields();
        org.junit.Assert.assertNotNull(enumOptions1);
        org.junit.Assert.assertNotNull(uninterpretedOptionList2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(fieldDescriptorMap5);
    }

    @Test
    public void test2845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2845");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder1 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder3 = builder1.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FileOptionsOrBuilder fileOptionsOrBuilder4 = builder3.getOptionsOrBuilder();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto5 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.getDefaultInstance();
        boolean boolean6 = serviceDescriptorProto5.hasOptions();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder7 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.newBuilder(serviceDescriptorProto5);
        byte[] byteArray8 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite9 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions10 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray8, extensionRegistryLite9);
        com.google.protobuf.CodedInputStream codedInputStream13 = com.google.protobuf.CodedInputStream.newInstance(byteArray8, 16, (int) 'a');
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder14 = builder7.mergeFrom(byteArray8);
        java.util.List<com.google.protobuf.DescriptorProtos.MethodDescriptorProto> methodDescriptorProtoList15 = builder14.getMethodList();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder16 = builder14.clearMethod();
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto17 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.getDefaultInstance();
        boolean boolean18 = methodDescriptorProto17.hasOutputType();
        com.google.protobuf.CodedOutputStream codedOutputStream19 = null;
        methodDescriptorProto17.writeTo(codedOutputStream19);
        boolean boolean21 = methodDescriptorProto17.hasOutputType();
        boolean boolean22 = methodDescriptorProto17.hasOutputType();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder23 = builder16.addMethod(methodDescriptorProto17);
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder24 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder25 = builder24.clearCcGenericServices();
        boolean boolean26 = builder24.isInitialized();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder28 = builder24.setCcGenericServices(true);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder29 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label30 = builder29.getLabel();
        com.google.protobuf.ByteString byteString31 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder32 = builder29.mergeFrom(byteString31);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite33 = null;
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder34 = builder28.mergeFrom(byteString31, extensionRegistryLite33);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite35 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions36 = com.google.protobuf.DescriptorProtos.EnumValueOptions.parseFrom(byteString31, extensionRegistryLite35);
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder37 = builder23.mergeFrom(byteString31);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder38 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output40 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream42 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output40, (int) 'a');
        byte[] byteArray43 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite44 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions45 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray43, extensionRegistryLite44);
        output40.write(byteArray43);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder47 = builder38.mergeFrom(byteArray43);
        java.util.List<com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder> builderList48 = builder47.getUninterpretedOptionBuilderList();
        java.util.List<com.google.protobuf.DescriptorProtos.UninterpretedOption> uninterpretedOptionList49 = builder47.getUninterpretedOptionList();
        java.io.InputStream inputStream50 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions51 = com.google.protobuf.DescriptorProtos.EnumValueOptions.getDefaultInstance();
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder52 = com.google.protobuf.DescriptorProtos.EnumValueOptions.newBuilder(enumValueOptions51);
        java.io.InputStream inputStream53 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder54 = builder52.mergeFrom(inputStream53);
        com.google.protobuf.ByteString byteString55 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto56 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.parseFrom(byteString55);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite57 = null;
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto enumValueDescriptorProto58 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.parseFrom(byteString55, extensionRegistryLite57);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite59 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions60 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteString55, extensionRegistryLite59);
        java.io.InputStream inputStream61 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite62 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location63 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream61, extensionRegistryLite62);
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder64 = builder54.mergeFrom(byteString55, extensionRegistryLite62);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder65 = builder47.mergeFrom(inputStream50, extensionRegistryLite62);
        com.google.protobuf.Message.Builder builder66 = builder3.mergeFrom(byteString31, extensionRegistryLite62);
        com.google.protobuf.DescriptorProtos.ServiceOptions serviceOptions67 = com.google.protobuf.DescriptorProtos.ServiceOptions.parseFrom(inputStream0, extensionRegistryLite62);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(fileOptionsOrBuilder4);
        org.junit.Assert.assertNotNull(serviceDescriptorProto5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[]");
        org.junit.Assert.assertNotNull(methodOptions10);
        org.junit.Assert.assertNotNull(codedInputStream13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(methodDescriptorProtoList15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(methodDescriptorProto17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + label30 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label30.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(byteString31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(enumValueOptions36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(output40);
        org.junit.Assert.assertNotNull(codedOutputStream42);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[]");
        org.junit.Assert.assertNotNull(methodOptions45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builderList48);
        org.junit.Assert.assertNotNull(uninterpretedOptionList49);
        org.junit.Assert.assertNotNull(enumValueOptions51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(byteString55);
        org.junit.Assert.assertNotNull(methodDescriptorProto56);
        org.junit.Assert.assertNotNull(enumValueDescriptorProto58);
        org.junit.Assert.assertNotNull(methodOptions60);
        org.junit.Assert.assertNotNull(extensionRegistryLite62);
        org.junit.Assert.assertNotNull(location63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(serviceOptions67);
    }

    @Test
    public void test2846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2846");
        com.google.javascript.jscomp.SourceAst sourceAst0 = null;
        com.google.javascript.rhino.InputId inputId1 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput3 = new com.google.javascript.jscomp.CompilerInput(sourceAst0, inputId1, true);
        java.io.PrintStream printStream4 = null;
        com.google.javascript.jscomp.Compiler compiler5 = new com.google.javascript.jscomp.Compiler(printStream4);
        com.google.javascript.jscomp.ErrorManager errorManager6 = compiler5.getErrorManager();
        compilerInput3.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler5);
        com.google.javascript.jscomp.CodingConvention codingConvention8 = compiler5.getCodingConvention();
        boolean boolean9 = compiler5.isTypeCheckingEnabled();
        // The following exception was thrown during execution in test generation
        try {
            compiler5.normalize();
            org.junit.Assert.fail("Expected exception of type java.lang.RuntimeException; message: INTERNAL COMPILER ERROR.?Please report this problem.?null");
        } catch (java.lang.RuntimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(errorManager6);
        org.junit.Assert.assertNotNull(codingConvention8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test2847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2847");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.of(localDateTime4, (java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime10.withYear((int) (short) 1);
        java.time.OffsetDateTime offsetDateTime13 = zonedDateTime10.toOffsetDateTime();
        java.time.ZonedDateTime zonedDateTime15 = zonedDateTime10.plusDays((long) (byte) -1);
        java.time.LocalDate localDate16 = zonedDateTime10.toLocalDate();
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(offsetDateTime13);
        org.junit.Assert.assertNotNull(zonedDateTime15);
        org.junit.Assert.assertNotNull(localDate16);
    }

    @Test
    public void test2848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2848");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset10);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.of(localDateTime11, (java.time.ZoneId) zoneOffset15);
        java.time.Clock clock18 = java.time.Clock.fixed(instant0, (java.time.ZoneId) zoneOffset15);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.now(clock18);
        java.time.LocalDate localDate20 = java.time.LocalDate.now(clock18);
        com.google.protobuf.Descriptors.Descriptor descriptor21 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto22 = descriptor21.toProto();
        boolean boolean23 = descriptorProto22.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList24 = descriptorProto22.getNestedTypeList();
        int int25 = descriptorProto22.getExtensionRangeCount();
        boolean boolean26 = localDate20.equals((java.lang.Object) descriptorProto22);
        java.lang.String str27 = descriptorProto22.getName();
        java.lang.String str28 = descriptorProto22.getName();
        boolean boolean29 = descriptorProto22.hasName();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(clock18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(descriptor21);
        org.junit.Assert.assertNotNull(descriptorProto22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "FileDescriptorProto" + "'", str27, "FileDescriptorProto");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "FileDescriptorProto" + "'", str28, "FileDescriptorProto");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test2849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2849");
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output2 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream4 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output2, (int) 'a');
        byte[] byteArray5 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite6 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions7 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray5, extensionRegistryLite6);
        output2.write(byteArray5);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder9 = builder0.mergeFrom(byteArray5);
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions10 = builder0.buildPartial();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder11 = builder0.addUninterpretedOptionBuilder();
        boolean boolean12 = builder11.hasNegativeIntValue();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder13 = builder11.clearStringValue();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder14 = builder13.clear();
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor15 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.Message.Builder builder16 = builder14.newBuilderForField(fieldDescriptor15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(output2);
        org.junit.Assert.assertNotNull(codedOutputStream4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(methodOptions7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(methodOptions10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test2850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2850");
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder1 = builder0.clearCcGenericServices();
        boolean boolean2 = builder0.isInitialized();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder4 = builder0.setJavaOuterClassname("hi!");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder7 = builder5.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder8 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label9 = builder8.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder10 = builder5.addExtension(builder8);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder11 = builder5.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder12 = builder11.getOptionsBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder13 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder15 = builder13.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder16 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label17 = builder16.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder18 = builder13.addExtension(builder16);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder19 = builder13.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder20 = builder19.getOptionsBuilder();
        java.io.InputStream inputStream21 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions22 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream21);
        boolean boolean23 = enumOptions22.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder24 = builder20.mergeFrom(enumOptions22);
        com.google.protobuf.UnknownFieldSet unknownFieldSet25 = builder20.getUnknownFields();
        com.google.protobuf.CodedOutputStream codedOutputStream26 = null;
        unknownFieldSet25.writeTo(codedOutputStream26);
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder28 = builder12.setUnknownFields(unknownFieldSet25);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto29 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.getDefaultInstance();
        boolean boolean30 = methodDescriptorProto29.hasOutputType();
        byte[] byteArray31 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite32 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions33 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray31, extensionRegistryLite32);
        com.google.protobuf.CodedOutputStream codedOutputStream36 = com.google.protobuf.CodedOutputStream.newInstance(byteArray31, (int) (short) 0, 1);
        methodDescriptorProto29.writeTo(codedOutputStream36);
        unknownFieldSet25.writeTo(codedOutputStream36);
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder39 = builder0.mergeUnknownFields(unknownFieldSet25);
        boolean boolean40 = builder39.hasJavaGenerateEqualsAndHash();
        boolean boolean41 = builder39.hasJavaPackage();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + label9 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label9.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + label17 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label17.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(enumOptions22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(unknownFieldSet25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(methodDescriptorProto29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[]");
        org.junit.Assert.assertNotNull(methodOptions33);
        org.junit.Assert.assertNotNull(codedOutputStream36);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test2851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2851");
        java.util.function.UnaryOperator<com.google.javascript.jscomp.DiagnosticGroup> diagnosticGroupUnaryOperator0 = java.util.function.UnaryOperator.identity();
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup1 = com.google.javascript.jscomp.DiagnosticGroups.TYPE_INVALIDATION;
        com.google.javascript.jscomp.DiagnosticGroup diagnosticGroup2 = diagnosticGroupUnaryOperator0.apply(diagnosticGroup1);
        com.google.javascript.jscomp.DiagnosticGroups.CHECK_VARIABLES = diagnosticGroup2;
        com.google.javascript.jscomp.DiagnosticGroups.DUPLICATE_MESSAGE = diagnosticGroup2;
        org.junit.Assert.assertNotNull(diagnosticGroupUnaryOperator0);
        org.junit.Assert.assertNotNull(diagnosticGroup1);
        org.junit.Assert.assertNotNull(diagnosticGroup2);
    }

    @Test
    public void test2852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2852");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy5 = null;
        compilerOptions0.variableRenaming = variableRenamingPolicy5;
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode7 = compilerOptions0.getTracerMode();
        boolean boolean8 = compilerOptions0.computeFunctionSideEffects;
        org.junit.Assert.assertNotNull(errorFormat3);
        org.junit.Assert.assertTrue("'" + tracerMode7 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode7.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test2853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2853");
        com.google.javascript.jscomp.JsMessage.Builder builder1 = new com.google.javascript.jscomp.JsMessage.Builder("2022-02-21");
        com.google.javascript.jscomp.JsMessage.Builder builder3 = builder1.appendStringPart("16:00:52+00:00:52");
        com.google.javascript.jscomp.JsMessage.Builder builder5 = builder1.setSourceName("{}");
        com.google.javascript.jscomp.JsMessage jsMessage6 = builder1.build();
        com.google.javascript.jscomp.JsMessage.Builder builder8 = builder1.setIsHidden(true);
        com.google.javascript.jscomp.JsMessage.Builder builder10 = builder8.setDesc("NUMBER 52.0 0 (hi!)");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(jsMessage6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test2854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2854");
        com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder builder0 = com.google.javascript.jscomp.FunctionInformationMap.Entry.newBuilder();
        boolean boolean1 = builder0.hasSourceName();
        com.google.javascript.jscomp.FunctionInformationMap.Entry entry2 = builder0.getDefaultInstanceForType();
        boolean boolean3 = entry2.hasSize();
        com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder builder4 = entry2.toBuilder();
        java.io.InputStream inputStream5 = null;
        com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder builder6 = builder4.mergeFrom(inputStream5);
        byte[] byteArray7 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite8 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions9 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray7, extensionRegistryLite8);
        com.google.protobuf.CodedOutputStream codedOutputStream12 = com.google.protobuf.CodedOutputStream.newInstance(byteArray7, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite13 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto14 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray7, extensionRegistryLite13);
        com.google.protobuf.CodedOutputStream codedOutputStream15 = com.google.protobuf.CodedOutputStream.newInstance(byteArray7);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder builder18 = builder4.mergeFrom(byteArray7, 22, 101);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 22");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(entry2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[]");
        org.junit.Assert.assertNotNull(methodOptions9);
        org.junit.Assert.assertNotNull(codedOutputStream12);
        org.junit.Assert.assertNotNull(fileDescriptorProto14);
        org.junit.Assert.assertNotNull(codedOutputStream15);
    }

    @Test
    public void test2855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2855");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType4 = jSTypeRegistry2.createObjectType(objectType3);
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.jstype.ObjectType objectType8 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry7.createObjectType(objectType8);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair10 = objectType4.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType9);
        boolean boolean11 = objectType9.isTemplateType();
        com.google.javascript.rhino.jstype.EnumType enumType12 = objectType9.toMaybeEnumType();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean13 = enumType12.isFunctionPrototypeType();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectType4);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertNotNull(typePair10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(enumType12);
    }

    @Test
    public void test2856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2856");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        boolean boolean1 = localDate0.isLeapYear();
        java.time.chrono.Era era2 = localDate0.getEra();
        java.time.LocalDate localDate4 = localDate0.withDayOfYear(5);
        java.time.LocalDate localDate5 = java.time.LocalDate.now();
        java.lang.String str6 = localDate5.toString();
        java.time.chrono.IsoChronology isoChronology7 = localDate5.getChronology();
        java.lang.String str8 = isoChronology7.getId();
        java.time.chrono.ChronoPeriod chronoPeriod12 = isoChronology7.period(1970, (int) (short) 10, (int) (short) 0);
        java.time.LocalDate localDate13 = localDate0.minus((java.time.temporal.TemporalAmount) chronoPeriod12);
        java.time.LocalDate localDate14 = java.time.LocalDate.now();
        boolean boolean15 = localDate14.isLeapYear();
        java.time.chrono.Era era16 = localDate14.getEra();
        boolean boolean17 = localDate0.isEqual((java.time.chrono.ChronoLocalDate) localDate14);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + era2 + "' != '" + java.time.chrono.IsoEra.CE + "'", era2.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-21" + "'", str6, "2022-02-21");
        org.junit.Assert.assertNotNull(isoChronology7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ISO" + "'", str8, "ISO");
        org.junit.Assert.assertNotNull(chronoPeriod12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + era16 + "' != '" + java.time.chrono.IsoEra.CE + "'", era16.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test2857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2857");
        byte[] byteArray0 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions2 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray0, extensionRegistryLite1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite3 = null;
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto enumDescriptorProto4 = com.google.protobuf.DescriptorProtos.EnumDescriptorProto.parseFrom(byteArray0, extensionRegistryLite3);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder5 = enumDescriptorProto4.newBuilderForType();
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto enumDescriptorProto6 = builder5.build();
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder7 = enumDescriptorProto6.toBuilder();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(methodOptions2);
        org.junit.Assert.assertNotNull(enumDescriptorProto4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(enumDescriptorProto6);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test2858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2858");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.time.LocalTime localTime2 = java.time.LocalTime.ofSecondOfDay((long) 8);
        java.time.ZoneOffset zoneOffset7 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime8 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset7);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime13 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset12);
        java.time.ZonedDateTime zonedDateTime14 = java.time.ZonedDateTime.of(localDateTime8, (java.time.ZoneId) zoneOffset12);
        java.time.ZonedDateTime zonedDateTime16 = zonedDateTime14.minusSeconds((long) '#');
        java.time.ZonedDateTime zonedDateTime18 = zonedDateTime14.minusYears((long) ' ');
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset22);
        java.time.ZoneOffset zoneOffset27 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset27);
        java.time.ZonedDateTime zonedDateTime29 = java.time.ZonedDateTime.of(localDateTime23, (java.time.ZoneId) zoneOffset27);
        java.time.ZonedDateTime zonedDateTime31 = zonedDateTime29.minusSeconds((long) '#');
        java.time.temporal.ChronoField chronoField32 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit33 = chronoField32.getBaseUnit();
        boolean boolean34 = zonedDateTime31.isSupported(temporalUnit33);
        java.time.ZoneOffset zoneOffset38 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime39 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset38);
        int int40 = localDateTime39.getYear();
        java.time.Instant instant41 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset45 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime46 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset45);
        java.time.OffsetDateTime offsetDateTime47 = java.time.OffsetDateTime.ofInstant(instant41, (java.time.ZoneId) zoneOffset45);
        java.time.Instant instant48 = localDateTime39.toInstant(zoneOffset45);
        java.time.ZoneOffset zoneOffset53 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime54 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset53);
        java.time.ZoneOffset zoneOffset58 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime59 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset58);
        java.time.ZonedDateTime zonedDateTime60 = java.time.ZonedDateTime.of(localDateTime54, (java.time.ZoneId) zoneOffset58);
        java.time.temporal.ChronoField chronoField62 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit63 = chronoField62.getBaseUnit();
        java.time.LocalDateTime localDateTime64 = localDateTime54.plus((long) 1970, temporalUnit63);
        java.time.ZoneOffset zoneOffset69 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime70 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset69);
        java.time.ZoneOffset zoneOffset74 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime75 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset74);
        java.time.ZonedDateTime zonedDateTime76 = java.time.ZonedDateTime.of(localDateTime70, (java.time.ZoneId) zoneOffset74);
        java.time.temporal.ChronoField chronoField78 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit79 = chronoField78.getBaseUnit();
        java.time.LocalDateTime localDateTime80 = localDateTime70.plus((long) 1970, temporalUnit79);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime81 = localDateTime64.minus((long) 43, temporalUnit79);
        java.time.Instant instant82 = instant48.plus((long) 16384, temporalUnit79);
        java.time.Instant instant84 = temporalUnit33.addTo(instant48, (long) (-1));
        boolean boolean85 = zonedDateTime14.isSupported(temporalUnit33);
        java.time.LocalTime localTime86 = localTime2.minus((long) 31, temporalUnit33);
        java.time.chrono.ChronoLocalDateTime<?> wildcardChronoLocalDateTime87 = localDate0.atTime(localTime2);
        java.time.format.DateTimeFormatter dateTimeFormatter88 = java.time.format.DateTimeFormatter.ISO_INSTANT;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str89 = localTime2.format(dateTimeFormatter88);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: InstantSeconds");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(zoneOffset7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(zonedDateTime14);
        org.junit.Assert.assertNotNull(zonedDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime18);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zoneOffset27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(zonedDateTime29);
        org.junit.Assert.assertNotNull(zonedDateTime31);
        org.junit.Assert.assertTrue("'" + chronoField32 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField32.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit33 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit33.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(zoneOffset38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1970 + "'", int40 == 1970);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(zoneOffset45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(offsetDateTime47);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(zoneOffset53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(zoneOffset58);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(zonedDateTime60);
        org.junit.Assert.assertTrue("'" + chronoField62 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField62.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit63 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit63.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(zoneOffset69);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(zoneOffset74);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(zonedDateTime76);
        org.junit.Assert.assertTrue("'" + chronoField78 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField78.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit79 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit79.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime81);
        org.junit.Assert.assertNotNull(instant82);
        org.junit.Assert.assertNotNull(instant84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(localTime86);
        org.junit.Assert.assertNotNull(wildcardChronoLocalDateTime87);
        org.junit.Assert.assertNotNull(dateTimeFormatter88);
    }

    @Test
    public void test2859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2859");
        com.google.protobuf.DescriptorProtos.UninterpretedOption.NamePart namePart0 = com.google.protobuf.DescriptorProtos.UninterpretedOption.NamePart.getDefaultInstance();
        boolean boolean1 = namePart0.hasNamePart();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.NamePart.Builder builder2 = namePart0.newBuilderForType();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder3 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder4 = builder3.clearCcGenericServices();
        boolean boolean5 = builder3.isInitialized();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder7 = builder3.setCcGenericServices(true);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder8 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label9 = builder8.getLabel();
        com.google.protobuf.ByteString byteString10 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder11 = builder8.mergeFrom(byteString10);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite12 = null;
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder13 = builder7.mergeFrom(byteString10, extensionRegistryLite12);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite14 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions15 = com.google.protobuf.DescriptorProtos.EnumValueOptions.parseFrom(byteString10, extensionRegistryLite14);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite16 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto17 = com.google.protobuf.DescriptorProtos.DescriptorProto.parseFrom(byteString10, extensionRegistryLite16);
        com.google.protobuf.DescriptorProtos.UninterpretedOption.NamePart.Builder builder18 = builder2.mergeFrom(byteString10);
        com.google.javascript.jscomp.FunctionInformationMap functionInformationMap19 = com.google.javascript.jscomp.FunctionInformationMap.parseFrom(byteString10);
        java.io.InputStream inputStream20 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite21 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location22 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream20, extensionRegistryLite21);
        com.google.protobuf.DescriptorProtos.SourceCodeInfo sourceCodeInfo23 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.parseFrom(byteString10, extensionRegistryLite21);
        org.junit.Assert.assertNotNull(namePart0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + label9 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label9.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(byteString10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(enumValueOptions15);
        org.junit.Assert.assertNotNull(extensionRegistryLite16);
        org.junit.Assert.assertNotNull(descriptorProto17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(functionInformationMap19);
        org.junit.Assert.assertNotNull(extensionRegistryLite21);
        org.junit.Assert.assertNotNull(location22);
        org.junit.Assert.assertNotNull(sourceCodeInfo23);
    }

    @Test
    public void test2860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2860");
        com.google.javascript.rhino.JSDocInfo.StringPosition stringPosition0 = new com.google.javascript.rhino.JSDocInfo.StringPosition();
        int int1 = stringPosition0.getPositionOnStartLine();
        stringPosition0.setItem("");
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
    }

    @Test
    public void test2861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2861");
        byte[] byteArray0 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions2 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray0, extensionRegistryLite1);
        com.google.protobuf.CodedOutputStream codedOutputStream5 = com.google.protobuf.CodedOutputStream.newInstance(byteArray0, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite6 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto7 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray0, extensionRegistryLite6);
        boolean boolean8 = fileDescriptorProto7.hasOptions();
        com.google.protobuf.DescriptorProtos.FileOptionsOrBuilder fileOptionsOrBuilder9 = fileDescriptorProto7.getOptionsOrBuilder();
        boolean boolean10 = fileDescriptorProto7.hasSourceCodeInfo();
        boolean boolean11 = fileDescriptorProto7.hasOptions();
        int int12 = fileDescriptorProto7.getSerializedSize();
        com.google.protobuf.ByteString byteString13 = fileDescriptorProto7.toByteString();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.FunctionInformationMap.Module module14 = com.google.javascript.jscomp.FunctionInformationMap.Module.parseFrom(byteString13);
            org.junit.Assert.fail("Expected exception of type com.google.protobuf.InvalidProtocolBufferException; message: Message missing required fields: name, compiled_source");
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(methodOptions2);
        org.junit.Assert.assertNotNull(codedOutputStream5);
        org.junit.Assert.assertNotNull(fileDescriptorProto7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(fileOptionsOrBuilder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(byteString13);
    }

    @Test
    public void test2862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2862");
        com.google.javascript.jscomp.SourceAst sourceAst0 = null;
        com.google.javascript.rhino.InputId inputId1 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput3 = new com.google.javascript.jscomp.CompilerInput(sourceAst0, inputId1, true);
        java.io.PrintStream printStream4 = null;
        com.google.javascript.jscomp.Compiler compiler5 = new com.google.javascript.jscomp.Compiler(printStream4);
        com.google.javascript.jscomp.ErrorManager errorManager6 = compiler5.getErrorManager();
        compilerInput3.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler5);
        com.google.javascript.jscomp.Scope scope8 = compiler5.getTopScope();
        java.lang.String str11 = compiler5.getSourceLine("US-ASCII", 0);
        com.google.javascript.jscomp.CodingConvention codingConvention12 = compiler5.getCodingConvention();
        int int13 = compiler5.getWarningCount();
        java.lang.String str14 = compiler5.toSource();
        com.google.javascript.jscomp.type.ReverseAbstractInterpreter reverseAbstractInterpreter15 = compiler5.getReverseAbstractInterpreter();
        int int16 = compiler5.getErrorCount();
        org.junit.Assert.assertNotNull(errorManager6);
        org.junit.Assert.assertNull(scope8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(codingConvention12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(reverseAbstractInterpreter15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test2863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2863");
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap0 = java.nio.charset.Charset.availableCharsets();
        java.util.Set<java.lang.String> strSet1 = strMap0.keySet();
        java.util.stream.Stream<java.lang.String> strStream2 = strSet1.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream4 = strStream2.limit((long) 171);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Stream<java.lang.String> strStream6 = strStream2.skip((long) 7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap0);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(strStream2);
        org.junit.Assert.assertNotNull(strStream4);
    }

    @Test
    public void test2864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2864");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label1 = builder0.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto2 = builder0.buildPartial();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder3 = fieldDescriptorProto2.newBuilderForType();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder4 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto2);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto5 = builder4.buildPartial();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + label1 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label1.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(fieldDescriptorProto5);
    }

    @Test
    public void test2865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2865");
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing0 = com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF;
        boolean boolean1 = tweakProcessing0.isOn();
        org.junit.Assert.assertTrue("'" + tweakProcessing0 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF + "'", tweakProcessing0.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF));
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test2866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2866");
        com.google.protobuf.DescriptorProtos.UninterpretedOption.NamePart namePart0 = com.google.protobuf.DescriptorProtos.UninterpretedOption.NamePart.getDefaultInstance();
        boolean boolean1 = namePart0.hasNamePart();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.NamePart.Builder builder2 = namePart0.newBuilderForType();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.NamePart.Builder builder4 = builder2.setIsExtension(true);
        boolean boolean5 = builder2.hasIsExtension();
        com.google.protobuf.Descriptors.Descriptor descriptor6 = builder2.getDescriptorForType();
        com.google.protobuf.Descriptors.FieldDescriptor fieldDescriptor7 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean8 = builder2.hasField(fieldDescriptor7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(namePart0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(descriptor6);
    }

    @Test
    public void test2867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2867");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label1 = builder0.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto2 = builder0.buildPartial();
        boolean boolean3 = fieldDescriptorProto2.hasExtendee();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + label1 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label1.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test2868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2868");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.of(localDateTime4, (java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime10.minusSeconds((long) '#');
        java.time.ZoneId zoneId13 = zonedDateTime12.getZone();
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(zoneId13);
    }

    @Test
    public void test2869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2869");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        boolean boolean1 = charset0.canEncode();
        java.nio.charset.CharsetEncoder charsetEncoder2 = charset0.newEncoder();
        java.nio.charset.Charset charset3 = java.nio.charset.Charset.defaultCharset();
        java.lang.String str4 = charset3.displayName();
        java.lang.String str5 = charset3.toString();
        int int6 = charset0.compareTo(charset3);
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(charsetEncoder2);
        org.junit.Assert.assertNotNull(charset3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "US-ASCII" + "'", str4, "US-ASCII");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "US-ASCII" + "'", str5, "US-ASCII");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test2870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2870");
        java.nio.FloatBuffer floatBuffer1 = java.nio.FloatBuffer.allocate(6);
        java.nio.FloatBuffer floatBuffer2 = floatBuffer1.asReadOnlyBuffer();
        java.nio.FloatBuffer floatBuffer3 = floatBuffer1.duplicate();
        java.nio.FloatBuffer floatBuffer5 = java.nio.FloatBuffer.allocate(6);
        java.nio.FloatBuffer floatBuffer6 = floatBuffer5.asReadOnlyBuffer();
        java.nio.FloatBuffer floatBuffer7 = floatBuffer5.asReadOnlyBuffer();
        java.nio.ByteOrder byteOrder8 = floatBuffer7.order();
        boolean boolean9 = floatBuffer7.hasArray();
        java.nio.FloatBuffer floatBuffer10 = floatBuffer3.put(floatBuffer7);
        java.lang.String str11 = floatBuffer10.toString();
        boolean boolean12 = floatBuffer10.isDirect();
        java.nio.FloatBuffer floatBuffer14 = java.nio.FloatBuffer.allocate(6);
        java.nio.FloatBuffer floatBuffer15 = floatBuffer14.asReadOnlyBuffer();
        java.nio.FloatBuffer floatBuffer16 = floatBuffer14.duplicate();
        java.nio.FloatBuffer floatBuffer18 = java.nio.FloatBuffer.allocate(6);
        java.nio.FloatBuffer floatBuffer19 = floatBuffer18.asReadOnlyBuffer();
        java.nio.FloatBuffer floatBuffer20 = floatBuffer18.asReadOnlyBuffer();
        java.nio.ByteOrder byteOrder21 = floatBuffer20.order();
        boolean boolean22 = floatBuffer20.hasArray();
        java.nio.FloatBuffer floatBuffer23 = floatBuffer16.put(floatBuffer20);
        java.lang.String str24 = floatBuffer23.toString();
        java.nio.FloatBuffer floatBuffer25 = floatBuffer10.put(floatBuffer23);
        org.junit.Assert.assertNotNull(floatBuffer1);
        org.junit.Assert.assertNotNull(floatBuffer2);
        org.junit.Assert.assertNotNull(floatBuffer3);
        org.junit.Assert.assertNotNull(floatBuffer5);
        org.junit.Assert.assertNotNull(floatBuffer6);
        org.junit.Assert.assertNotNull(floatBuffer7);
        org.junit.Assert.assertNotNull(byteOrder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(floatBuffer10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "java.nio.HeapFloatBuffer[pos=6 lim=6 cap=6]" + "'", str11, "java.nio.HeapFloatBuffer[pos=6 lim=6 cap=6]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(floatBuffer14);
        org.junit.Assert.assertNotNull(floatBuffer15);
        org.junit.Assert.assertNotNull(floatBuffer16);
        org.junit.Assert.assertNotNull(floatBuffer18);
        org.junit.Assert.assertNotNull(floatBuffer19);
        org.junit.Assert.assertNotNull(floatBuffer20);
        org.junit.Assert.assertNotNull(byteOrder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(floatBuffer23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "java.nio.HeapFloatBuffer[pos=6 lim=6 cap=6]" + "'", str24, "java.nio.HeapFloatBuffer[pos=6 lim=6 cap=6]");
        org.junit.Assert.assertNotNull(floatBuffer25);
    }

    @Test
    public void test2871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2871");
        com.google.javascript.jscomp.JsMessage.Builder builder1 = new com.google.javascript.jscomp.JsMessage.Builder("2022-02-21");
        com.google.javascript.jscomp.JsMessage jsMessage2 = builder1.build();
        java.lang.String str3 = jsMessage2.getKey();
        java.lang.String str4 = jsMessage2.getKey();
        org.junit.Assert.assertNotNull(jsMessage2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2022-02-21" + "'", str3, "2022-02-21");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-21" + "'", str4, "2022-02-21");
    }

    @Test
    public void test2872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2872");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        compilerOptions0.setRemoveDeadCode(false);
        java.lang.Object obj7 = compilerOptions0.clone();
        compilerOptions0.setMarkNoSideEffectCalls(false);
        com.google.javascript.jscomp.CodingConvention codingConvention10 = compilerOptions0.getCodingConvention();
        org.junit.Assert.assertNotNull(errorFormat3);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNull(codingConvention10);
    }

    @Test
    public void test2873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2873");
        byte[] byteArray0 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions2 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray0, extensionRegistryLite1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite3 = null;
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto enumDescriptorProto4 = com.google.protobuf.DescriptorProtos.EnumDescriptorProto.parseFrom(byteArray0, extensionRegistryLite3);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder5 = enumDescriptorProto4.newBuilderForType();
        java.util.List<com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto> enumValueDescriptorProtoList6 = enumDescriptorProto4.getValueList();
        int int7 = enumDescriptorProto4.getSerializedSize();
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder8 = enumDescriptorProto4.toBuilder();
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder9 = builder8.clone();
        com.google.protobuf.Message message10 = builder8.buildPartial();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder12 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder14 = builder12.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder15 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label16 = builder15.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder17 = builder12.addExtension(builder15);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder18 = builder12.addEnumTypeBuilder();
        com.google.protobuf.ByteString.Output output20 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream22 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output20, (int) 'a');
        byte[] byteArray23 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite24 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions25 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray23, extensionRegistryLite24);
        output20.write(byteArray23);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder27 = builder12.mergeFrom(byteArray23);
        byte[] byteArray28 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite29 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions30 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray28, extensionRegistryLite29);
        com.google.protobuf.CodedOutputStream codedOutputStream33 = com.google.protobuf.CodedOutputStream.newInstance(byteArray28, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite34 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto35 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray28, extensionRegistryLite34);
        com.google.protobuf.CodedOutputStream codedOutputStream36 = com.google.protobuf.CodedOutputStream.newInstance(byteArray28);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder37 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label38 = builder37.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto39 = builder37.buildPartial();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder40 = fieldDescriptorProto39.newBuilderForType();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder41 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto39);
        java.io.File file44 = null;
        java.io.File file45 = java.io.File.createTempFile("hi!", "ISO", file44);
        boolean boolean48 = file45.setWritable(false, false);
        java.net.URI uRI49 = file45.toURI();
        java.io.PrintStream printStream50 = new java.io.PrintStream(file45);
        printStream50.print((int) (byte) 0);
        printStream50.print(10.0d);
        printStream50.close();
        java.lang.String[] strArray59 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet60 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet60, strArray59);
        boolean boolean62 = strSet60.isEmpty();
        java.nio.ByteBuffer byteBuffer64 = java.nio.ByteBuffer.allocate(100);
        boolean boolean65 = strSet60.equals((java.lang.Object) byteBuffer64);
        java.nio.IntBuffer intBuffer66 = byteBuffer64.asIntBuffer();
        double double67 = byteBuffer64.getDouble();
        java.nio.ByteBuffer byteBuffer70 = byteBuffer64.put((int) (short) 1, (byte) 1);
        byte[] byteArray71 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite72 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions73 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray71, extensionRegistryLite72);
        com.google.protobuf.CodedOutputStream codedOutputStream76 = com.google.protobuf.CodedOutputStream.newInstance(byteArray71, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite77 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto78 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray71, extensionRegistryLite77);
        com.google.protobuf.CodedOutputStream codedOutputStream79 = com.google.protobuf.CodedOutputStream.newInstance(byteArray71);
        java.nio.ByteBuffer byteBuffer80 = byteBuffer64.get(byteArray71);
        printStream50.write(byteArray71, (int) '/', (int) (byte) 1);
        java.io.InputStream inputStream84 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite85 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location86 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream84, extensionRegistryLite85);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder87 = builder41.mergeFrom(byteArray71, extensionRegistryLite85);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto88 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray28, extensionRegistryLite85);
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto enumValueDescriptorProto89 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.parseFrom(byteArray23, extensionRegistryLite85);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder90 = builder8.setValue(9, enumValueDescriptorProto89);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 9, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(methodOptions2);
        org.junit.Assert.assertNotNull(enumDescriptorProto4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(enumValueDescriptorProtoList6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(message10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + label16 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label16.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(output20);
        org.junit.Assert.assertNotNull(codedOutputStream22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(methodOptions25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(methodOptions30);
        org.junit.Assert.assertNotNull(codedOutputStream33);
        org.junit.Assert.assertNotNull(fileDescriptorProto35);
        org.junit.Assert.assertNotNull(codedOutputStream36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + label38 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label38.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(file45);
        org.junit.Assert.assertEquals(file45.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file45.toString(), "/tmp/hi!5909829525264823511ISO");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(uRI49);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(byteBuffer64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(intBuffer66);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 0.0d + "'", double67 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer70);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[]");
        org.junit.Assert.assertNotNull(methodOptions73);
        org.junit.Assert.assertNotNull(codedOutputStream76);
        org.junit.Assert.assertNotNull(fileDescriptorProto78);
        org.junit.Assert.assertNotNull(codedOutputStream79);
        org.junit.Assert.assertNotNull(byteBuffer80);
        org.junit.Assert.assertNotNull(extensionRegistryLite85);
        org.junit.Assert.assertNotNull(location86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(fileDescriptorProto88);
        org.junit.Assert.assertNotNull(enumValueDescriptorProto89);
    }

    @Test
    public void test2874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2874");
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions fileOptions1 = builder0.getDefaultInstanceForType();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder3 = builder0.setPyGenericServices(false);
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder4 = builder3.clearJavaMultipleFiles();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder6 = builder4.setJavaGenerateEqualsAndHash(false);
        boolean boolean7 = builder6.getPyGenericServices();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder8 = builder6.clearJavaOuterClassname();
        java.util.Map<com.google.protobuf.Descriptors.FieldDescriptor, java.lang.Object> fieldDescriptorMap9 = builder8.getAllFields();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(fileOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(fieldDescriptorMap9);
    }

    @Test
    public void test2875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2875");
        com.google.protobuf.ByteString byteString0 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto1 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.parseFrom(byteString0);
        int int2 = com.google.protobuf.CodedOutputStream.computeBytesSizeNoTag(byteString0);
        org.junit.Assert.assertNotNull(byteString0);
        org.junit.Assert.assertNotNull(methodDescriptorProto1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    }

    @Test
    public void test2876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2876");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FileOptionsOrBuilder fileOptionsOrBuilder3 = builder2.getOptionsOrBuilder();
        byte[] byteArray4 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite5 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions6 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray4, extensionRegistryLite5);
        com.google.protobuf.CodedOutputStream codedOutputStream9 = com.google.protobuf.CodedOutputStream.newInstance(byteArray4, (int) (short) 0, 1);
        com.google.protobuf.CodedOutputStream codedOutputStream12 = com.google.protobuf.CodedOutputStream.newInstance(byteArray4, (int) ' ', 0);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder13 = builder2.mergeFrom(byteArray4);
        com.google.javascript.jscomp.CompilerOptions compilerOptions14 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions14.setColorizeErrorOutput(false);
        compilerOptions14.setCrossModuleCodeMotion(false);
        java.lang.String[] strArray39 = new java.lang.String[] { "java.text.MessageFormat$Field(message argument field)", "java.nio.ByteBufferAsDoubleBufferB[pos=0 lim=12 cap=12]", "MethodDescriptorProto", "hi!", "16:00:52+00:00:52", "JSC_OPTIMIZE_LOOP_ERROR", "OffsetSeconds", "South Korea", "", "MethodDescriptorProto", "java.nio.HeapFloatBuffer[pos=0 lim=6 cap=6]", "{}", ":", "/", "1970-03-24T02:02:32", "16:00:52+00:00:52", "file", ":", "hi!", "file" };
        java.util.ArrayList<java.lang.String> strList40 = new java.util.ArrayList<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList40, strArray39);
        compilerOptions14.setManageClosureDependencies((java.util.List<java.lang.String>) strList40);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder43 = builder2.addAllDependency((java.lang.Iterable<java.lang.String>) strList40);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(fileOptionsOrBuilder3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(methodOptions6);
        org.junit.Assert.assertNotNull(codedOutputStream9);
        org.junit.Assert.assertNotNull(codedOutputStream12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test2877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2877");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset10);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.of(localDateTime11, (java.time.ZoneId) zoneOffset15);
        java.time.Clock clock18 = java.time.Clock.fixed(instant0, (java.time.ZoneId) zoneOffset15);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.now(clock18);
        java.time.LocalDate localDate20 = java.time.LocalDate.now(clock18);
        com.google.protobuf.Descriptors.Descriptor descriptor21 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto22 = descriptor21.toProto();
        boolean boolean23 = descriptorProto22.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList24 = descriptorProto22.getNestedTypeList();
        int int25 = descriptorProto22.getExtensionRangeCount();
        boolean boolean26 = localDate20.equals((java.lang.Object) descriptorProto22);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder27 = descriptorProto22.newBuilderForType();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList28 = builder27.getNestedTypeList();
        com.google.protobuf.UnknownFieldSet unknownFieldSet29 = builder27.getUnknownFields();
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder30 = builder27.addEnumTypeBuilder();
        com.google.protobuf.ByteString byteString31 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite32 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto33 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteString31, extensionRegistryLite32);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder34 = builder30.mergeFrom(byteString31);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder35 = builder34.clearValue();
        int int36 = builder34.getValueCount();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(clock18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(descriptor21);
        org.junit.Assert.assertNotNull(descriptorProto22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(descriptorProtoList28);
        org.junit.Assert.assertNotNull(unknownFieldSet29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(byteString31);
        org.junit.Assert.assertNotNull(fileDescriptorProto33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test2878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2878");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer3 = charBuffer1.put('a');
        char[] charArray5 = new char[] { '4' };
        java.nio.CharBuffer charBuffer6 = charBuffer3.get(charArray5);
        java.nio.CharBuffer charBuffer8 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer10 = charBuffer8.put('a');
        char[] charArray12 = new char[] { '4' };
        java.nio.CharBuffer charBuffer13 = charBuffer10.get(charArray12);
        java.nio.CharBuffer charBuffer14 = charBuffer3.put(charArray12);
        java.nio.CharBuffer charBuffer15 = charBuffer3.slice();
        char[] charArray20 = new char[] { '#', ' ', ':', ' ' };
        java.nio.CharBuffer charBuffer21 = java.nio.CharBuffer.wrap(charArray20);
        java.nio.CharBuffer charBuffer22 = charBuffer15.get(charArray20);
        java.nio.CharBuffer charBuffer24 = charBuffer15.put('a');
        java.io.PrintWriter printWriter26 = new java.io.PrintWriter("1970-03-24T02:02:32");
        char[] charArray32 = new char[] { '4', ' ', 'a', 'a', ':' };
        printWriter26.println(charArray32);
        java.nio.CharBuffer charBuffer34 = charBuffer24.put(charArray32);
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(charBuffer3);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(charBuffer8);
        org.junit.Assert.assertNotNull(charBuffer10);
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer13);
        org.junit.Assert.assertNotNull(charBuffer14);
        org.junit.Assert.assertNotNull(charBuffer15);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[\000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(charBuffer21);
        org.junit.Assert.assertNotNull(charBuffer22);
        org.junit.Assert.assertNotNull(charBuffer24);
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "4 aa:");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "4 aa:");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[4,  , a, a, :]");
        org.junit.Assert.assertNotNull(charBuffer34);
    }

    @Test
    public void test2879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2879");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate(100);
        java.nio.DoubleBuffer doubleBuffer2 = byteBuffer1.asDoubleBuffer();
        java.lang.String str3 = doubleBuffer2.toString();
        java.nio.ByteBuffer byteBuffer5 = java.nio.ByteBuffer.allocate(100);
        java.nio.DoubleBuffer doubleBuffer6 = byteBuffer5.asDoubleBuffer();
        java.io.PrintStream printStream7 = null;
        com.google.javascript.jscomp.Compiler compiler8 = new com.google.javascript.jscomp.Compiler(printStream7);
        com.google.javascript.jscomp.SourceMap sourceMap9 = compiler8.getSourceMap();
        java.util.stream.LongStream longStream11 = java.util.stream.LongStream.of((long) (-1));
        com.google.common.collect.ImmutableMap<com.google.javascript.jscomp.Compiler, java.util.stream.LongStream> compilerMap12 = com.google.common.collect.ImmutableMap.of(compiler8, longStream11);
        java.util.stream.DoubleStream doubleStream13 = longStream11.asDoubleStream();
        double[] doubleArray14 = doubleStream13.toArray();
        java.nio.DoubleBuffer doubleBuffer15 = doubleBuffer6.put(doubleArray14);
        java.nio.DoubleBuffer doubleBuffer16 = doubleBuffer2.put(doubleArray14);
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(doubleBuffer2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "java.nio.ByteBufferAsDoubleBufferB[pos=0 lim=12 cap=12]" + "'", str3, "java.nio.ByteBufferAsDoubleBufferB[pos=0 lim=12 cap=12]");
        org.junit.Assert.assertNotNull(byteBuffer5);
        org.junit.Assert.assertNotNull(doubleBuffer6);
        org.junit.Assert.assertNull(sourceMap9);
        org.junit.Assert.assertNotNull(longStream11);
        org.junit.Assert.assertNotNull(compilerMap12);
        org.junit.Assert.assertNotNull(doubleStream13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0]");
        org.junit.Assert.assertNotNull(doubleBuffer15);
        org.junit.Assert.assertNotNull(doubleBuffer16);
    }

    @Test
    public void test2880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2880");
        java.time.Month month0 = java.time.Month.APRIL;
        java.time.chrono.Chronology chronology1 = java.time.chrono.Chronology.from((java.time.temporal.TemporalAccessor) month0);
        java.time.Month month2 = month0.firstMonthOfQuarter();
        java.time.Month month3 = month0.firstMonthOfQuarter();
        org.junit.Assert.assertTrue("'" + month0 + "' != '" + java.time.Month.APRIL + "'", month0.equals(java.time.Month.APRIL));
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertTrue("'" + month2 + "' != '" + java.time.Month.APRIL + "'", month2.equals(java.time.Month.APRIL));
        org.junit.Assert.assertTrue("'" + month3 + "' != '" + java.time.Month.APRIL + "'", month3.equals(java.time.Month.APRIL));
    }

    @Test
    public void test2881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2881");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer3 = charBuffer1.put('a');
        char[] charArray5 = new char[] { '4' };
        java.nio.CharBuffer charBuffer6 = charBuffer3.get(charArray5);
        java.nio.CharBuffer charBuffer8 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer10 = charBuffer8.put('a');
        char[] charArray12 = new char[] { '4' };
        java.nio.CharBuffer charBuffer13 = charBuffer10.get(charArray12);
        java.nio.CharBuffer charBuffer14 = charBuffer3.put(charArray12);
        java.nio.CharBuffer charBuffer15 = charBuffer3.slice();
        char[] charArray20 = new char[] { '#', ' ', ':', ' ' };
        java.nio.CharBuffer charBuffer21 = java.nio.CharBuffer.wrap(charArray20);
        java.nio.CharBuffer charBuffer22 = charBuffer15.get(charArray20);
        java.nio.CharBuffer charBuffer24 = charBuffer15.put('a');
        java.nio.CharBuffer charBuffer25 = charBuffer24.asReadOnlyBuffer();
        java.lang.String str26 = charBuffer24.toString();
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(charBuffer3);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(charBuffer8);
        org.junit.Assert.assertNotNull(charBuffer10);
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer13);
        org.junit.Assert.assertNotNull(charBuffer14);
        org.junit.Assert.assertNotNull(charBuffer15);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[\000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(charBuffer21);
        org.junit.Assert.assertNotNull(charBuffer22);
        org.junit.Assert.assertNotNull(charBuffer24);
        org.junit.Assert.assertNotNull(charBuffer25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + "'", str26, "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
    }

    @Test
    public void test2882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2882");
        java.time.chrono.IsoChronology isoChronology0 = java.time.chrono.IsoChronology.INSTANCE;
        java.lang.String str1 = isoChronology0.getId();
        java.time.Month month2 = java.time.Month.APRIL;
        java.time.chrono.Chronology chronology3 = java.time.chrono.Chronology.from((java.time.temporal.TemporalAccessor) month2);
        java.lang.String str4 = chronology3.toString();
        java.time.Instant instant5 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset9);
        java.time.OffsetDateTime offsetDateTime11 = java.time.OffsetDateTime.ofInstant(instant5, (java.time.ZoneId) zoneOffset9);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZoneOffset zoneOffset20 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset20);
        java.time.ZonedDateTime zonedDateTime22 = java.time.ZonedDateTime.of(localDateTime16, (java.time.ZoneId) zoneOffset20);
        java.time.Clock clock23 = java.time.Clock.fixed(instant5, (java.time.ZoneId) zoneOffset20);
        java.time.chrono.ChronoLocalDate chronoLocalDate24 = chronology3.dateNow(clock23);
        java.time.chrono.ChronoLocalDate chronoLocalDate25 = isoChronology0.dateNow(clock23);
        java.time.Month month26 = java.time.Month.AUGUST;
        java.time.ZoneOffset zoneOffset30 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset30);
        java.time.ZoneOffset zoneOffset35 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime36 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset35);
        java.time.ZonedDateTime zonedDateTime37 = java.time.ZonedDateTime.of(localDateTime31, (java.time.ZoneId) zoneOffset35);
        java.time.temporal.ChronoField chronoField38 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        boolean boolean39 = localDateTime31.isSupported((java.time.temporal.TemporalField) chronoField38);
        boolean boolean40 = month26.isSupported((java.time.temporal.TemporalField) chronoField38);
        java.time.temporal.ValueRange valueRange41 = isoChronology0.range(chronoField38);
        java.lang.String str42 = isoChronology0.getCalendarType();
        org.junit.Assert.assertNotNull(isoChronology0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ISO" + "'", str1, "ISO");
        org.junit.Assert.assertTrue("'" + month2 + "' != '" + java.time.Month.APRIL + "'", month2.equals(java.time.Month.APRIL));
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ISO" + "'", str4, "ISO");
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(offsetDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zoneOffset20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zonedDateTime22);
        org.junit.Assert.assertNotNull(clock23);
        org.junit.Assert.assertNotNull(chronoLocalDate24);
        org.junit.Assert.assertNotNull(chronoLocalDate25);
        org.junit.Assert.assertTrue("'" + month26 + "' != '" + java.time.Month.AUGUST + "'", month26.equals(java.time.Month.AUGUST));
        org.junit.Assert.assertNotNull(zoneOffset30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(zoneOffset35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(zonedDateTime37);
        org.junit.Assert.assertTrue("'" + chronoField38 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField38.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(valueRange41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "iso8601" + "'", str42, "iso8601");
    }

    @Test
    public void test2883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2883");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("Type");
        java.lang.String str2 = languageRange1.getRange();
        double double3 = languageRange1.getWeight();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "type" + "'", str2, "type");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
    }

    @Test
    public void test2884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2884");
        com.google.javascript.jscomp.JsMessage.Builder builder1 = new com.google.javascript.jscomp.JsMessage.Builder("2022-02-21");
        com.google.javascript.jscomp.JsMessage.Builder builder3 = builder1.appendStringPart("16:00:52+00:00:52");
        com.google.javascript.jscomp.JsMessage.Builder builder5 = builder1.setSourceName("{}");
        com.google.javascript.jscomp.JsMessage jsMessage6 = builder5.build();
        java.util.List<java.lang.CharSequence> charSequenceList7 = jsMessage6.parts();
        java.lang.String str8 = jsMessage6.getKey();
        java.lang.String str9 = jsMessage6.getKey();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(jsMessage6);
        org.junit.Assert.assertNotNull(charSequenceList7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-21" + "'", str8, "2022-02-21");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-21" + "'", str9, "2022-02-21");
    }

    @Test
    public void test2885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2885");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        com.google.javascript.rhino.jstype.ObjectType objectType6 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType7 = jSTypeRegistry5.createObjectType(objectType6);
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.jstype.ObjectType objectType11 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType12 = jSTypeRegistry10.createObjectType(objectType11);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair13 = objectType7.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType12);
        java.lang.String str14 = objectType12.getDisplayName();
        java.util.Collection<com.google.javascript.rhino.jstype.FunctionType> functionTypeCollection15 = jSTypeRegistry2.getDirectImplementors(objectType12);
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable17 = jSTypeRegistry2.getEachReferenceTypeWithProperty("+00:00:52");
        jSTypeRegistry2.resetForTypeCheck();
        com.google.javascript.rhino.ErrorReporter errorReporter19 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter19, false);
        com.google.javascript.rhino.jstype.ObjectType objectType22 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType23 = jSTypeRegistry21.createObjectType(objectType22);
        com.google.javascript.rhino.ErrorReporter errorReporter24 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry26 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter24, false);
        com.google.javascript.rhino.jstype.ObjectType objectType27 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType28 = jSTypeRegistry26.createObjectType(objectType27);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair29 = objectType23.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType28);
        com.google.javascript.rhino.Node node30 = objectType23.getRootNode();
        com.google.javascript.rhino.jstype.JSType jSType32 = objectType23.getPropertyType("java.text.MessageFormat$Field(message argument field)");
        com.google.javascript.rhino.jstype.JSType jSType33 = jSTypeRegistry2.createOptionalNullableType((com.google.javascript.rhino.jstype.JSType) objectType23);
        com.google.javascript.rhino.ErrorReporter errorReporter35 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry37 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter35, false);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode38 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry37.setResolveMode(resolveMode38);
        com.google.javascript.rhino.ErrorReporter errorReporter40 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry42 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter40, false);
        com.google.javascript.rhino.jstype.ObjectType objectType43 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType44 = jSTypeRegistry42.createObjectType(objectType43);
        com.google.javascript.rhino.ErrorReporter errorReporter45 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry47 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter45, false);
        com.google.javascript.rhino.jstype.ObjectType objectType48 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType49 = jSTypeRegistry47.createObjectType(objectType48);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair50 = objectType44.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType49);
        java.lang.String str51 = objectType49.getDisplayName();
        objectType49.clearResolved();
        com.google.javascript.rhino.jstype.JSType jSType53 = jSTypeRegistry37.createNullableType((com.google.javascript.rhino.jstype.JSType) objectType49);
        boolean boolean54 = jSType53.isEmptyType();
        jSTypeRegistry2.registerPropertyOnType("Unknown class name", jSType53);
        boolean boolean57 = jSTypeRegistry2.hasNamespace("/tmp/hi!7679603766417355096ISO");
        com.google.javascript.rhino.ErrorReporter errorReporter58 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry60 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter58, false);
        com.google.javascript.rhino.jstype.ObjectType objectType61 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType62 = jSTypeRegistry60.createObjectType(objectType61);
        com.google.javascript.rhino.ErrorReporter errorReporter63 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry65 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter63, false);
        com.google.javascript.rhino.jstype.ObjectType objectType66 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType67 = jSTypeRegistry65.createObjectType(objectType66);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair68 = objectType62.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType67);
        java.lang.String str69 = objectType67.getDisplayName();
        com.google.javascript.rhino.ErrorReporter errorReporter70 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry72 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter70, false);
        com.google.javascript.rhino.jstype.ObjectType objectType73 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType74 = jSTypeRegistry72.createObjectType(objectType73);
        com.google.javascript.rhino.ErrorReporter errorReporter75 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry77 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter75, false);
        com.google.javascript.rhino.jstype.ObjectType objectType78 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType79 = jSTypeRegistry77.createObjectType(objectType78);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair80 = objectType74.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType79);
        boolean boolean81 = objectType79.isTemplateType();
        com.google.javascript.rhino.jstype.JSType jSType82 = objectType67.getLeastSupertype((com.google.javascript.rhino.jstype.JSType) objectType79);
        com.google.javascript.rhino.jstype.JSType jSType84 = objectType67.getPropertyType("JSDocInfo");
        com.google.javascript.rhino.jstype.JSType jSType89 = jSTypeRegistry2.getType((com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>) objectType67, "{}", "/tmp/hi!117357409022682367ISO", 0, 52);
        com.google.javascript.rhino.jstype.FunctionType functionType90 = objectType67.toMaybeFunctionType();
        org.junit.Assert.assertNotNull(objectType7);
        org.junit.Assert.assertNotNull(objectType12);
        org.junit.Assert.assertNotNull(typePair13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(functionTypeCollection15);
        org.junit.Assert.assertNotNull(objectTypeIterable17);
        org.junit.Assert.assertNotNull(objectType23);
        org.junit.Assert.assertNotNull(objectType28);
        org.junit.Assert.assertNotNull(typePair29);
        org.junit.Assert.assertNull(node30);
        org.junit.Assert.assertNotNull(jSType32);
        org.junit.Assert.assertNotNull(jSType33);
        org.junit.Assert.assertTrue("'" + resolveMode38 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode38.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType44);
        org.junit.Assert.assertNotNull(objectType49);
        org.junit.Assert.assertNotNull(typePair50);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(jSType53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(objectType62);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertNotNull(typePair68);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(objectType74);
        org.junit.Assert.assertNotNull(objectType79);
        org.junit.Assert.assertNotNull(typePair80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(jSType82);
        org.junit.Assert.assertNotNull(jSType84);
        org.junit.Assert.assertNotNull(jSType89);
        org.junit.Assert.assertNull(functionType90);
    }

    @Test
    public void test2886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2886");
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto0 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.getDefaultInstance();
        boolean boolean1 = serviceDescriptorProto0.hasOptions();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder2 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.newBuilder(serviceDescriptorProto0);
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto3 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.getDefaultInstance();
        boolean boolean4 = serviceDescriptorProto3.hasOptions();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder5 = builder2.mergeFrom(serviceDescriptorProto3);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto7 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.getDefaultInstance();
        boolean boolean8 = methodDescriptorProto7.hasOutputType();
        com.google.protobuf.CodedOutputStream codedOutputStream9 = null;
        methodDescriptorProto7.writeTo(codedOutputStream9);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder11 = methodDescriptorProto7.toBuilder();
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder13 = builder11.setOutputType("java.nio.HeapFloatBuffer[pos=0 lim=6 cap=6]");
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder14 = builder11.clearInputType();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder15 = builder2.addMethod(0, builder14);
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.Builder builder16 = builder2.clearOptions();
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto17 = builder2.getDefaultInstanceForType();
        org.junit.Assert.assertNotNull(serviceDescriptorProto0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(serviceDescriptorProto3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(methodDescriptorProto7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(serviceDescriptorProto17);
    }

    @Test
    public void test2887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2887");
        java.text.MessageFormat messageFormat1 = new java.text.MessageFormat("hi!");
        java.util.Locale locale2 = messageFormat1.getLocale();
        java.util.Locale locale3 = messageFormat1.getLocale();
        java.text.MessageFormat messageFormat5 = new java.text.MessageFormat("hi!");
        java.text.Format[] formatArray6 = messageFormat5.getFormatsByArgumentIndex();
        messageFormat1.setFormatsByArgumentIndex(formatArray6);
        java.io.PrintWriter printWriter9 = new java.io.PrintWriter("1970-03-24T02:02:32");
        char[] charArray15 = new char[] { '4', ' ', 'a', 'a', ':' };
        printWriter9.println(charArray15);
        java.security.SignatureException signatureException18 = new java.security.SignatureException();
        java.security.SignatureException signatureException19 = new java.security.SignatureException();
        java.security.SignatureException signatureException20 = new java.security.SignatureException();
        java.security.SignatureException signatureException21 = new java.security.SignatureException();
        java.security.SignatureException signatureException22 = new java.security.SignatureException();
        java.security.SignatureException[] signatureExceptionArray23 = new java.security.SignatureException[] { signatureException18, signatureException19, signatureException20, signatureException21, signatureException22 };
        com.google.common.collect.ImmutableSet<java.security.SignatureException> signatureExceptionSet24 = com.google.common.collect.ImmutableSet.of(signatureExceptionArray23);
        java.io.PrintWriter printWriter25 = printWriter9.format("ISO", (java.lang.Object[]) signatureExceptionArray23);
        com.google.javascript.rhino.Node node30 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean31 = node30.isStringKey();
        boolean boolean32 = node30.isTrue();
        com.google.javascript.rhino.InputId inputId34 = new com.google.javascript.rhino.InputId("NUMBER 52.0 0");
        node30.setInputId(inputId34);
        com.google.javascript.jscomp.SourceAst sourceAst36 = null;
        com.google.javascript.rhino.InputId inputId37 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput39 = new com.google.javascript.jscomp.CompilerInput(sourceAst36, inputId37, true);
        java.io.PrintStream printStream40 = null;
        com.google.javascript.jscomp.Compiler compiler41 = new com.google.javascript.jscomp.Compiler(printStream40);
        com.google.javascript.jscomp.ErrorManager errorManager42 = compiler41.getErrorManager();
        compilerInput39.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler41);
        com.google.javascript.jscomp.CodingConvention codingConvention44 = compiler41.getCodingConvention();
        boolean boolean45 = inputId34.equals((java.lang.Object) compiler41);
        com.google.javascript.jscomp.Region region48 = compiler41.getSourceRegion("java.nio.HeapFloatBuffer[pos=0 lim=6 cap=6]", 0);
        com.google.javascript.jscomp.JSError[] jSErrorArray49 = compiler41.getWarnings();
        java.io.PrintWriter printWriter50 = printWriter9.format("*global*", (java.lang.Object[]) jSErrorArray49);
        java.lang.StringBuffer stringBuffer51 = null;
        java.text.Format.Field field52 = null;
        java.text.FieldPosition fieldPosition54 = new java.text.FieldPosition(field52, (int) (byte) 1);
        int int55 = fieldPosition54.getField();
        int int56 = fieldPosition54.getBeginIndex();
        java.text.Format.Field field57 = fieldPosition54.getFieldAttribute();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer58 = messageFormat1.format((java.lang.Object[]) jSErrorArray49, stringBuffer51, fieldPosition54);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(formatArray6);
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "4 aa:");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "4 aa:");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[4,  , a, a, :]");
        org.junit.Assert.assertNotNull(signatureExceptionArray23);
        org.junit.Assert.assertNotNull(signatureExceptionSet24);
        org.junit.Assert.assertNotNull(printWriter25);
        org.junit.Assert.assertNotNull(node30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(errorManager42);
        org.junit.Assert.assertNotNull(codingConvention44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNull(region48);
        org.junit.Assert.assertNotNull(jSErrorArray49);
        org.junit.Assert.assertNotNull(printWriter50);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNull(field57);
    }

    @Test
    public void test2888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2888");
        java.nio.FloatBuffer floatBuffer1 = java.nio.FloatBuffer.allocate(6);
        java.nio.FloatBuffer floatBuffer2 = floatBuffer1.asReadOnlyBuffer();
        java.nio.FloatBuffer floatBuffer3 = floatBuffer1.duplicate();
        java.nio.FloatBuffer floatBuffer5 = java.nio.FloatBuffer.allocate(6);
        java.nio.FloatBuffer floatBuffer6 = floatBuffer5.asReadOnlyBuffer();
        java.nio.FloatBuffer floatBuffer7 = floatBuffer5.asReadOnlyBuffer();
        java.nio.ByteOrder byteOrder8 = floatBuffer7.order();
        boolean boolean9 = floatBuffer7.hasArray();
        java.nio.FloatBuffer floatBuffer10 = floatBuffer3.put(floatBuffer7);
        java.lang.String str11 = floatBuffer10.toString();
        boolean boolean12 = floatBuffer10.isDirect();
        // The following exception was thrown during execution in test generation
        try {
            float float14 = floatBuffer10.get(36);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatBuffer1);
        org.junit.Assert.assertNotNull(floatBuffer2);
        org.junit.Assert.assertNotNull(floatBuffer3);
        org.junit.Assert.assertNotNull(floatBuffer5);
        org.junit.Assert.assertNotNull(floatBuffer6);
        org.junit.Assert.assertNotNull(floatBuffer7);
        org.junit.Assert.assertNotNull(byteOrder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(floatBuffer10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "java.nio.HeapFloatBuffer[pos=6 lim=6 cap=6]" + "'", str11, "java.nio.HeapFloatBuffer[pos=6 lim=6 cap=6]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test2889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2889");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        int int6 = localDateTime5.getYear();
        java.time.LocalDate localDate7 = localDateTime5.toLocalDate();
        java.time.LocalDate localDate9 = localDate7.plusDays((long) '#');
        java.time.LocalDate localDate10 = java.time.LocalDate.now();
        java.time.chrono.ChronoPeriod chronoPeriod11 = localDate7.until((java.time.chrono.ChronoLocalDate) localDate10);
        java.time.chrono.Chronology chronology12 = java.time.chrono.Chronology.from((java.time.temporal.TemporalAccessor) localDate10);
        java.time.Instant instant13 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset17);
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime23 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset22);
        java.time.ZonedDateTime zonedDateTime24 = java.time.ZonedDateTime.of(localDateTime18, (java.time.ZoneId) zoneOffset22);
        java.time.temporal.ChronoField chronoField26 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit27 = chronoField26.getBaseUnit();
        java.time.LocalDateTime localDateTime28 = localDateTime18.plus((long) 1970, temporalUnit27);
        java.time.LocalDateTime localDateTime30 = localDateTime18.withHour((int) (short) 1);
        java.time.ZoneOffset zoneOffset32 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.OffsetDateTime offsetDateTime33 = java.time.OffsetDateTime.of(localDateTime18, zoneOffset32);
        java.time.OffsetTime offsetTime34 = java.time.OffsetTime.ofInstant(instant13, (java.time.ZoneId) zoneOffset32);
        java.time.Instant instant35 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset39 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime40 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset39);
        java.time.ZoneOffset zoneOffset44 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime45 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset44);
        java.time.ZonedDateTime zonedDateTime46 = java.time.ZonedDateTime.of(localDateTime40, (java.time.ZoneId) zoneOffset44);
        java.time.temporal.ChronoField chronoField48 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit49 = chronoField48.getBaseUnit();
        java.time.LocalDateTime localDateTime50 = localDateTime40.plus((long) 1970, temporalUnit49);
        java.time.LocalDateTime localDateTime52 = localDateTime40.withHour((int) (short) 1);
        java.time.ZoneOffset zoneOffset54 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.OffsetDateTime offsetDateTime55 = java.time.OffsetDateTime.of(localDateTime40, zoneOffset54);
        java.time.OffsetTime offsetTime56 = java.time.OffsetTime.ofInstant(instant35, (java.time.ZoneId) zoneOffset54);
        boolean boolean57 = offsetTime34.isAfter(offsetTime56);
        java.time.OffsetDateTime offsetDateTime58 = localDate10.atTime(offsetTime34);
        java.time.OffsetTime offsetTime60 = offsetTime34.plusNanos(999L);
        java.time.ZoneOffset zoneOffset64 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime65 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset64);
        int int66 = localDateTime65.getYear();
        java.time.LocalDate localDate67 = localDateTime65.toLocalDate();
        java.time.LocalDate localDate69 = localDate67.plusDays((long) '#');
        java.time.LocalDate localDate70 = java.time.LocalDate.now();
        java.time.chrono.ChronoPeriod chronoPeriod71 = localDate67.until((java.time.chrono.ChronoLocalDate) localDate70);
        java.time.chrono.Chronology chronology72 = java.time.chrono.Chronology.from((java.time.temporal.TemporalAccessor) localDate70);
        java.time.LocalDate localDate74 = localDate70.withMonth(6);
        java.time.LocalDate localDate76 = localDate74.minusYears((long) 365);
        java.time.OffsetDateTime offsetDateTime77 = offsetTime60.atDate(localDate74);
        java.time.temporal.Temporal temporal78 = localDate0.adjustInto((java.time.temporal.Temporal) localDate74);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(chronoPeriod11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(zonedDateTime24);
        org.junit.Assert.assertTrue("'" + chronoField26 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField26.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit27 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit27.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(zoneOffset32);
        org.junit.Assert.assertNotNull(offsetDateTime33);
        org.junit.Assert.assertNotNull(offsetTime34);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(zoneOffset39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(zoneOffset44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(zonedDateTime46);
        org.junit.Assert.assertTrue("'" + chronoField48 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField48.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit49 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit49.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(zoneOffset54);
        org.junit.Assert.assertNotNull(offsetDateTime55);
        org.junit.Assert.assertNotNull(offsetTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(offsetDateTime58);
        org.junit.Assert.assertNotNull(offsetTime60);
        org.junit.Assert.assertNotNull(zoneOffset64);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1970 + "'", int66 == 1970);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertNotNull(chronoPeriod71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertNotNull(offsetDateTime77);
        org.junit.Assert.assertNotNull(temporal78);
    }

    @Test
    public void test2890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2890");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy5 = null;
        compilerOptions0.variableRenaming = variableRenamingPolicy5;
        compilerOptions0.setSummaryDetailLevel(999);
        compilerOptions0.setRemoveClosureAsserts(false);
        boolean boolean11 = compilerOptions0.moveFunctionDeclarations;
        compilerOptions0.exportTestFunctions = true;
        com.google.javascript.jscomp.CheckLevel checkLevel14 = null;
        compilerOptions0.setCheckRequires(checkLevel14);
        org.junit.Assert.assertNotNull(errorFormat3);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test2891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2891");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label4 = builder3.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = builder0.addExtension(builder3);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder7 = builder5.removeExtension(13);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 13, Size: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + label4 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label4.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test2892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2892");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        int int5 = localDateTime4.getYear();
        java.time.LocalDate localDate6 = localDateTime4.toLocalDate();
        java.time.LocalDate localDate8 = localDate6.plusDays((long) '#');
        java.time.LocalDate localDate9 = java.time.LocalDate.now();
        java.time.chrono.ChronoPeriod chronoPeriod10 = localDate6.until((java.time.chrono.ChronoLocalDate) localDate9);
        java.time.chrono.Chronology chronology11 = java.time.chrono.Chronology.from((java.time.temporal.TemporalAccessor) localDate9);
        java.time.Instant instant12 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset16);
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset21);
        java.time.ZonedDateTime zonedDateTime23 = java.time.ZonedDateTime.of(localDateTime17, (java.time.ZoneId) zoneOffset21);
        java.time.temporal.ChronoField chronoField25 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit26 = chronoField25.getBaseUnit();
        java.time.LocalDateTime localDateTime27 = localDateTime17.plus((long) 1970, temporalUnit26);
        java.time.LocalDateTime localDateTime29 = localDateTime17.withHour((int) (short) 1);
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.OffsetDateTime offsetDateTime32 = java.time.OffsetDateTime.of(localDateTime17, zoneOffset31);
        java.time.OffsetTime offsetTime33 = java.time.OffsetTime.ofInstant(instant12, (java.time.ZoneId) zoneOffset31);
        java.time.Instant instant34 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset38 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime39 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset38);
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime44 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset43);
        java.time.ZonedDateTime zonedDateTime45 = java.time.ZonedDateTime.of(localDateTime39, (java.time.ZoneId) zoneOffset43);
        java.time.temporal.ChronoField chronoField47 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit48 = chronoField47.getBaseUnit();
        java.time.LocalDateTime localDateTime49 = localDateTime39.plus((long) 1970, temporalUnit48);
        java.time.LocalDateTime localDateTime51 = localDateTime39.withHour((int) (short) 1);
        java.time.ZoneOffset zoneOffset53 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.OffsetDateTime offsetDateTime54 = java.time.OffsetDateTime.of(localDateTime39, zoneOffset53);
        java.time.OffsetTime offsetTime55 = java.time.OffsetTime.ofInstant(instant34, (java.time.ZoneId) zoneOffset53);
        boolean boolean56 = offsetTime33.isAfter(offsetTime55);
        java.time.OffsetDateTime offsetDateTime57 = localDate9.atTime(offsetTime33);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder58 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label59 = builder58.getLabel();
        com.google.protobuf.ByteString byteString60 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite61 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions62 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(byteString60, extensionRegistryLite61);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder63 = builder58.mergeFrom(byteString60);
        boolean boolean64 = builder58.hasType();
        boolean boolean65 = offsetTime33.equals((java.lang.Object) builder58);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronoPeriod10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zonedDateTime23);
        org.junit.Assert.assertTrue("'" + chronoField25 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField25.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit26 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit26.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertNotNull(offsetTime33);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(zoneOffset38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(zonedDateTime45);
        org.junit.Assert.assertTrue("'" + chronoField47 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField47.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit48 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit48.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(zoneOffset53);
        org.junit.Assert.assertNotNull(offsetDateTime54);
        org.junit.Assert.assertNotNull(offsetTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(offsetDateTime57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + label59 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label59.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(byteString60);
        org.junit.Assert.assertNotNull(enumOptions62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test2893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2893");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.optimizeCalls = false;
        compilerOptions0.preferLineBreakAtEndOfFile = false;
        compilerOptions0.setProcessCommonJSModules(true);
        com.google.javascript.jscomp.CompilerOptions compilerOptions7 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions7.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat10 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions7.errorFormat = errorFormat10;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy12 = null;
        compilerOptions7.variableRenaming = variableRenamingPolicy12;
        compilerOptions7.setSummaryDetailLevel(999);
        boolean boolean16 = compilerOptions7.getInferTypes();
        boolean boolean17 = compilerOptions7.ideMode;
        compilerOptions7.setGroupVariableDeclarations(true);
        boolean boolean20 = compilerOptions7.deadAssignmentElimination;
        com.google.javascript.jscomp.CompilerOptions compilerOptions21 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions21.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat24 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions21.errorFormat = errorFormat24;
        java.lang.String[] strArray32 = new java.lang.String[] { "South Korea", "Unknown class name", "ISO", "OffsetSeconds", ":" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        compilerOptions21.setReplaceStringsConfiguration("1970-01-01+00:00:52", (java.util.List<java.lang.String>) strList33);
        compilerOptions21.lineBreak = false;
        com.google.javascript.jscomp.CompilerOptions compilerOptions38 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions38.setRecordFunctionInformation(true);
        compilerOptions38.setMoveFunctionDeclarations(true);
        com.google.javascript.jscomp.CheckLevel checkLevel43 = compilerOptions38.checkMissingGetCssNameLevel;
        compilerOptions21.setCheckProvides(checkLevel43);
        compilerOptions7.aggressiveVarCheck = checkLevel43;
        compilerOptions0.setCheckUnreachableCode(checkLevel43);
        compilerOptions0.collapseProperties = false;
        org.junit.Assert.assertNotNull(errorFormat10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(errorFormat24);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + checkLevel43 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel43.equals(com.google.javascript.jscomp.CheckLevel.OFF));
    }

    @Test
    public void test2894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2894");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        com.google.javascript.rhino.jstype.ObjectType objectType6 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType7 = jSTypeRegistry5.createObjectType(objectType6);
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.jstype.ObjectType objectType11 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType12 = jSTypeRegistry10.createObjectType(objectType11);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair13 = objectType7.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType12);
        java.lang.String str14 = objectType12.getDisplayName();
        java.util.Collection<com.google.javascript.rhino.jstype.FunctionType> functionTypeCollection15 = jSTypeRegistry2.getDirectImplementors(objectType12);
        jSTypeRegistry2.clearNamedTypes();
        jSTypeRegistry2.setLastGeneration(true);
        com.google.javascript.rhino.jstype.JSTypeNative jSTypeNative19 = com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_FUNCTION_TYPE;
        com.google.javascript.rhino.jstype.ObjectType objectType20 = jSTypeRegistry2.getNativeObjectType(jSTypeNative19);
        com.google.javascript.rhino.JSDocInfo jSDocInfo21 = objectType20.getJSDocInfo();
        org.junit.Assert.assertNotNull(objectType7);
        org.junit.Assert.assertNotNull(objectType12);
        org.junit.Assert.assertNotNull(typePair13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(functionTypeCollection15);
        org.junit.Assert.assertTrue("'" + jSTypeNative19 + "' != '" + com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_FUNCTION_TYPE + "'", jSTypeNative19.equals(com.google.javascript.rhino.jstype.JSTypeNative.OBJECT_FUNCTION_TYPE));
        org.junit.Assert.assertNotNull(objectType20);
        org.junit.Assert.assertNull(jSDocInfo21);
    }

    @Test
    public void test2895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2895");
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        boolean boolean6 = strSet4.isEmpty();
        java.nio.ByteBuffer byteBuffer8 = java.nio.ByteBuffer.allocate(100);
        boolean boolean9 = strSet4.equals((java.lang.Object) byteBuffer8);
        java.nio.IntBuffer intBuffer10 = byteBuffer8.asIntBuffer();
        java.nio.IntBuffer intBuffer11 = intBuffer10.duplicate();
        java.nio.IntBuffer intBuffer12 = intBuffer11.duplicate();
        java.nio.IntBuffer intBuffer13 = intBuffer12.duplicate();
        java.nio.IntBuffer intBuffer14 = intBuffer12.asReadOnlyBuffer();
        // The following exception was thrown during execution in test generation
        try {
            int int16 = intBuffer12.get(101);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(intBuffer10);
        org.junit.Assert.assertNotNull(intBuffer11);
        org.junit.Assert.assertNotNull(intBuffer12);
        org.junit.Assert.assertNotNull(intBuffer13);
        org.junit.Assert.assertNotNull(intBuffer14);
    }

    @Test
    public void test2896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2896");
        com.google.protobuf.ByteString.Output output1 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream3 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output1, (int) 'a');
        byte[] byteArray4 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite5 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions6 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray4, extensionRegistryLite5);
        output1.write(byteArray4);
        com.google.protobuf.CodedInputStream codedInputStream10 = com.google.protobuf.CodedInputStream.newInstance(byteArray4, 21, 4);
        int int12 = codedInputStream10.setSizeLimit((int) '/');
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder13 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output15 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream17 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output15, (int) 'a');
        byte[] byteArray18 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite19 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions20 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray18, extensionRegistryLite19);
        output15.write(byteArray18);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder22 = builder13.mergeFrom(byteArray18);
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions23 = builder13.buildPartial();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder24 = builder13.addUninterpretedOptionBuilder();
        byte[] byteArray25 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite26 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions27 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray25, extensionRegistryLite26);
        com.google.protobuf.CodedOutputStream codedOutputStream30 = com.google.protobuf.CodedOutputStream.newInstance(byteArray25, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite31 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto32 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray25, extensionRegistryLite31);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite33 = null;
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto34 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.parseFrom(byteArray25, extensionRegistryLite33);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder35 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label36 = builder35.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto37 = builder35.buildPartial();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder38 = fieldDescriptorProto37.newBuilderForType();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder39 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto37);
        java.io.File file42 = null;
        java.io.File file43 = java.io.File.createTempFile("hi!", "ISO", file42);
        boolean boolean46 = file43.setWritable(false, false);
        java.net.URI uRI47 = file43.toURI();
        java.io.PrintStream printStream48 = new java.io.PrintStream(file43);
        printStream48.print((int) (byte) 0);
        printStream48.print(10.0d);
        printStream48.close();
        java.lang.String[] strArray57 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet58 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet58, strArray57);
        boolean boolean60 = strSet58.isEmpty();
        java.nio.ByteBuffer byteBuffer62 = java.nio.ByteBuffer.allocate(100);
        boolean boolean63 = strSet58.equals((java.lang.Object) byteBuffer62);
        java.nio.IntBuffer intBuffer64 = byteBuffer62.asIntBuffer();
        double double65 = byteBuffer62.getDouble();
        java.nio.ByteBuffer byteBuffer68 = byteBuffer62.put((int) (short) 1, (byte) 1);
        byte[] byteArray69 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite70 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions71 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray69, extensionRegistryLite70);
        com.google.protobuf.CodedOutputStream codedOutputStream74 = com.google.protobuf.CodedOutputStream.newInstance(byteArray69, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite75 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto76 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray69, extensionRegistryLite75);
        com.google.protobuf.CodedOutputStream codedOutputStream77 = com.google.protobuf.CodedOutputStream.newInstance(byteArray69);
        java.nio.ByteBuffer byteBuffer78 = byteBuffer62.get(byteArray69);
        printStream48.write(byteArray69, (int) '/', (int) (byte) 1);
        java.io.InputStream inputStream82 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite83 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location84 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream82, extensionRegistryLite83);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder85 = builder39.mergeFrom(byteArray69, extensionRegistryLite83);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder86 = builder13.mergeFrom(byteArray25, extensionRegistryLite83);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions87 = com.google.protobuf.DescriptorProtos.EnumValueOptions.parseFrom(codedInputStream10, extensionRegistryLite83);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 21");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(output1);
        org.junit.Assert.assertNotNull(codedOutputStream3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(methodOptions6);
        org.junit.Assert.assertNotNull(codedInputStream10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 67108864 + "'", int12 == 67108864);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(output15);
        org.junit.Assert.assertNotNull(codedOutputStream17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[]");
        org.junit.Assert.assertNotNull(methodOptions20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(methodOptions23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[]");
        org.junit.Assert.assertNotNull(methodOptions27);
        org.junit.Assert.assertNotNull(codedOutputStream30);
        org.junit.Assert.assertNotNull(fileDescriptorProto32);
        org.junit.Assert.assertNotNull(serviceDescriptorProto34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + label36 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label36.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(file43);
        org.junit.Assert.assertEquals(file43.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file43.toString(), "/tmp/hi!4039980407862252365ISO");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(uRI47);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(byteBuffer62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(intBuffer64);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 0.0d + "'", double65 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer68);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[]");
        org.junit.Assert.assertNotNull(methodOptions71);
        org.junit.Assert.assertNotNull(codedOutputStream74);
        org.junit.Assert.assertNotNull(fileDescriptorProto76);
        org.junit.Assert.assertNotNull(codedOutputStream77);
        org.junit.Assert.assertNotNull(byteBuffer78);
        org.junit.Assert.assertNotNull(extensionRegistryLite83);
        org.junit.Assert.assertNotNull(location84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(builder86);
    }

    @Test
    public void test2897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2897");
        com.google.protobuf.ByteString.Output output1 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream3 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output1, (int) 'a');
        byte[] byteArray4 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite5 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions6 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray4, extensionRegistryLite5);
        output1.write(byteArray4);
        com.google.protobuf.CodedInputStream codedInputStream10 = com.google.protobuf.CodedInputStream.newInstance(byteArray4, 21, 4);
        int int12 = codedInputStream10.setSizeLimit((int) '/');
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.EnumDescriptorProto enumDescriptorProto13 = com.google.protobuf.DescriptorProtos.EnumDescriptorProto.parseFrom(codedInputStream10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 21");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(output1);
        org.junit.Assert.assertNotNull(codedOutputStream3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[]");
        org.junit.Assert.assertNotNull(methodOptions6);
        org.junit.Assert.assertNotNull(codedInputStream10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 67108864 + "'", int12 == 67108864);
    }

    @Test
    public void test2898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2898");
        com.google.javascript.rhino.JSDocInfo jSDocInfo0 = new com.google.javascript.rhino.JSDocInfo();
        boolean boolean1 = jSDocInfo0.hasThisType();
        java.lang.String str2 = jSDocInfo0.toString();
        boolean boolean3 = jSDocInfo0.isInterface();
        com.google.javascript.rhino.JSTypeExpression jSTypeExpression4 = jSDocInfo0.getTypedefType();
        jSDocInfo0.setDeprecated(false);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "JSDocInfo" + "'", str2, "JSDocInfo");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(jSTypeExpression4);
    }

    @Test
    public void test2899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2899");
        com.google.protobuf.DescriptorProtos.MessageOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.MessageOptions.newBuilder();
        java.io.InputStream inputStream1 = null;
        com.google.protobuf.DescriptorProtos.MessageOptions.Builder builder2 = builder0.mergeFrom(inputStream1);
        java.net.InetAddress inetAddress4 = java.net.InetAddress.getLocalHost();
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder5 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output7 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream9 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output7, (int) 'a');
        byte[] byteArray10 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite11 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions12 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray10, extensionRegistryLite11);
        output7.write(byteArray10);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder14 = builder5.mergeFrom(byteArray10);
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions15 = builder5.buildPartial();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder16 = builder5.addUninterpretedOptionBuilder();
        boolean boolean17 = builder16.hasNegativeIntValue();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder19 = builder16.setNegativeIntValue((long) 55);
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder21 = builder16.setIdentifierValue("MethodDescriptorProto");
        boolean boolean22 = inetAddress4.equals((java.lang.Object) builder16);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.MessageOptions.Builder builder23 = builder2.setUninterpretedOption(67108864, builder16);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 67108864, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(inetAddress4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(output7);
        org.junit.Assert.assertNotNull(codedOutputStream9);
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[]");
        org.junit.Assert.assertNotNull(methodOptions12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(methodOptions15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test2900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2900");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset10);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.of(localDateTime11, (java.time.ZoneId) zoneOffset15);
        java.time.Clock clock18 = java.time.Clock.fixed(instant0, (java.time.ZoneId) zoneOffset15);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.now(clock18);
        java.time.LocalDate localDate20 = java.time.LocalDate.now(clock18);
        com.google.protobuf.Descriptors.Descriptor descriptor21 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto22 = descriptor21.toProto();
        boolean boolean23 = descriptorProto22.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList24 = descriptorProto22.getNestedTypeList();
        int int25 = descriptorProto22.getExtensionRangeCount();
        boolean boolean26 = localDate20.equals((java.lang.Object) descriptorProto22);
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder27 = descriptorProto22.newBuilderForType();
        java.util.List<com.google.protobuf.DescriptorProtos.FieldDescriptorProto> fieldDescriptorProtoList28 = builder27.getExtensionList();
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.Builder builder29 = com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.newBuilder();
        com.google.protobuf.DescriptorProtos.DescriptorProto.Builder builder30 = builder27.addExtensionRange(builder29);
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.Builder builder31 = builder29.clearEnd();
        java.io.InputStream inputStream32 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite33 = null;
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.Builder builder34 = builder29.mergeFrom(inputStream32, extensionRegistryLite33);
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange extensionRange35 = builder34.getDefaultInstanceForType();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(clock18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(descriptor21);
        org.junit.Assert.assertNotNull(descriptorProto22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(fieldDescriptorProtoList28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(extensionRange35);
    }

    @Test
    public void test2901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2901");
        byte[] byteArray0 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions2 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray0, extensionRegistryLite1);
        com.google.protobuf.CodedOutputStream codedOutputStream5 = com.google.protobuf.CodedOutputStream.newInstance(byteArray0, (int) (short) 0, 1);
        com.google.protobuf.CodedInputStream codedInputStream6 = com.google.protobuf.CodedInputStream.newInstance(byteArray0);
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto7 = com.google.protobuf.DescriptorProtos.DescriptorProto.parseFrom(codedInputStream6);
        // The following exception was thrown during execution in test generation
        try {
            long long8 = codedInputStream6.readRawLittleEndian64();
            org.junit.Assert.fail("Expected exception of type com.google.protobuf.InvalidProtocolBufferException; message: While parsing a protocol message, the input ended unexpectedly in the middle of a field.  This could mean either than the input has been truncated or that an embedded message misreported its own length.");
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(methodOptions2);
        org.junit.Assert.assertNotNull(codedOutputStream5);
        org.junit.Assert.assertNotNull(codedInputStream6);
        org.junit.Assert.assertNotNull(descriptorProto7);
    }

    @Test
    public void test2902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2902");
        com.google.javascript.rhino.Node node2 = com.google.javascript.rhino.Node.newString(8, "16:00:52+00:00:52");
        com.google.javascript.rhino.Node node3 = node2.cloneNode();
        boolean boolean4 = node2.isSetterDef();
        org.junit.Assert.assertNotNull(node2);
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test2903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2903");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy5 = null;
        compilerOptions0.variableRenaming = variableRenamingPolicy5;
        compilerOptions0.setSummaryDetailLevel(999);
        boolean boolean9 = compilerOptions0.getInferTypes();
        compilerOptions0.generateExports = false;
        compilerOptions0.setReplaceStringsPlaceholderToken("Exceeded max number of code motion iterations: {0}");
        org.junit.Assert.assertNotNull(errorFormat3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test2904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2904");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        com.google.javascript.rhino.jstype.ObjectType objectType6 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType7 = jSTypeRegistry5.createObjectType(objectType6);
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.jstype.ObjectType objectType11 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType12 = jSTypeRegistry10.createObjectType(objectType11);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair13 = objectType7.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType12);
        java.lang.String str14 = objectType12.getDisplayName();
        java.util.Collection<com.google.javascript.rhino.jstype.FunctionType> functionTypeCollection15 = jSTypeRegistry2.getDirectImplementors(objectType12);
        boolean boolean16 = objectType12.isAllType();
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.ErrorReporter errorReporter18 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry20 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter18, false);
        com.google.javascript.rhino.jstype.ObjectType objectType21 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType22 = jSTypeRegistry20.createObjectType(objectType21);
        com.google.javascript.rhino.jstype.JSType jSType23 = objectType12.forceResolve(errorReporter17, (com.google.javascript.rhino.jstype.StaticScope<com.google.javascript.rhino.jstype.JSType>) objectType22);
        boolean boolean24 = objectType22.hasReferenceName();
        org.junit.Assert.assertNotNull(objectType7);
        org.junit.Assert.assertNotNull(objectType12);
        org.junit.Assert.assertNotNull(typePair13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(functionTypeCollection15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(objectType22);
        org.junit.Assert.assertNotNull(jSType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test2905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2905");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.OffsetDateTime offsetDateTime8 = offsetDateTime6.minusDays((long) (short) 100);
        java.lang.String str9 = offsetDateTime6.toString();
        java.time.OffsetDateTime offsetDateTime11 = offsetDateTime6.minusMonths(0L);
        java.time.Month month12 = offsetDateTime6.getMonth();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(offsetDateTime8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-01T00:00:52+00:00:52" + "'", str9, "1970-01-01T00:00:52+00:00:52");
        org.junit.Assert.assertNotNull(offsetDateTime11);
        org.junit.Assert.assertTrue("'" + month12 + "' != '" + java.time.Month.JANUARY + "'", month12.equals(java.time.Month.JANUARY));
    }

    @Test
    public void test2906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2906");
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto0 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.getDefaultInstance();
        boolean boolean1 = methodDescriptorProto0.hasOutputType();
        com.google.protobuf.CodedOutputStream codedOutputStream2 = null;
        methodDescriptorProto0.writeTo(codedOutputStream2);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder4 = methodDescriptorProto0.toBuilder();
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder6 = builder4.setOutputType("java.nio.HeapFloatBuffer[pos=0 lim=6 cap=6]");
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder7 = builder4.clear();
        org.junit.Assert.assertNotNull(methodDescriptorProto0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test2907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2907");
        java.io.InputStream inputStream0 = null;
        java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite> priorityMap1 = new java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite>();
        java.lang.Object obj2 = priorityMap1.clone();
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.newBuilder();
        boolean boolean4 = priorityMap1.containsValue((java.lang.Object) builder3);
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder6 = builder3.setName("java.nio.ByteBufferAsDoubleBufferB[pos=0 lim=12 cap=12]");
        com.google.protobuf.ByteString byteString7 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder8 = builder3.mergeFrom(byteString7);
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions9 = com.google.protobuf.DescriptorProtos.EnumValueOptions.getDefaultInstance();
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder10 = com.google.protobuf.DescriptorProtos.EnumValueOptions.newBuilder(enumValueOptions9);
        java.io.InputStream inputStream11 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder12 = builder10.mergeFrom(inputStream11);
        com.google.protobuf.ByteString byteString13 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto14 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.parseFrom(byteString13);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite15 = null;
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto enumValueDescriptorProto16 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.parseFrom(byteString13, extensionRegistryLite15);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite17 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions18 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteString13, extensionRegistryLite17);
        java.io.InputStream inputStream19 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite20 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location21 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream19, extensionRegistryLite20);
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder22 = builder12.mergeFrom(byteString13, extensionRegistryLite20);
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto23 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.parseFrom(byteString7, extensionRegistryLite20);
        com.google.javascript.jscomp.FunctionInformationMap functionInformationMap24 = com.google.javascript.jscomp.FunctionInformationMap.parseFrom(inputStream0, extensionRegistryLite20);
        int int25 = functionInformationMap24.getModuleCount();
        com.google.javascript.jscomp.FunctionInformationMap.Builder builder26 = functionInformationMap24.toBuilder();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.FunctionInformationMap.Builder builder28 = builder26.removeEntry(52);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "{}");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(byteString7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(enumValueOptions9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(byteString13);
        org.junit.Assert.assertNotNull(methodDescriptorProto14);
        org.junit.Assert.assertNotNull(enumValueDescriptorProto16);
        org.junit.Assert.assertNotNull(methodOptions18);
        org.junit.Assert.assertNotNull(extensionRegistryLite20);
        org.junit.Assert.assertNotNull(location21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(serviceDescriptorProto23);
        org.junit.Assert.assertNotNull(functionInformationMap24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test2908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2908");
        com.google.protobuf.ByteString byteString0 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto1 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.parseFrom(byteString0);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite2 = null;
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto enumValueDescriptorProto3 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.parseFrom(byteString0, extensionRegistryLite2);
        boolean boolean4 = enumValueDescriptorProto3.isInitialized();
        org.junit.Assert.assertNotNull(byteString0);
        org.junit.Assert.assertNotNull(methodDescriptorProto1);
        org.junit.Assert.assertNotNull(enumValueDescriptorProto3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test2909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2909");
        com.google.protobuf.DescriptorProtos.MessageOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.MessageOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.MessageOptions messageOptions1 = builder0.getDefaultInstanceForType();
        com.google.protobuf.Descriptors.Descriptor descriptor2 = builder0.getDescriptorForType();
        com.google.protobuf.DescriptorProtos.MessageOptions messageOptions3 = builder0.buildPartial();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(messageOptions1);
        org.junit.Assert.assertNotNull(descriptor2);
        org.junit.Assert.assertNotNull(messageOptions3);
    }

    @Test
    public void test2910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2910");
        java.util.Locale locale3 = new java.util.Locale("+00:00:52", "{}: ERROR - Unknown class name\n", "goog.exportProperty");
        java.lang.String str4 = locale3.toLanguageTag();
        org.junit.Assert.assertEquals(locale3.toString(), "+00:00:52_{}: ERROR - UNKNOWN CLASS NAME\n_goog.exportProperty");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "und" + "'", str4, "und");
    }

    @Test
    public void test2911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2911");
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        boolean boolean6 = strSet4.isEmpty();
        java.nio.ByteBuffer byteBuffer8 = java.nio.ByteBuffer.allocate(100);
        boolean boolean9 = strSet4.equals((java.lang.Object) byteBuffer8);
        java.nio.IntBuffer intBuffer10 = byteBuffer8.asIntBuffer();
        double double11 = byteBuffer8.getDouble();
        java.nio.ByteBuffer byteBuffer14 = byteBuffer8.put((int) (short) 1, (byte) 1);
        byte[] byteArray15 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite16 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions17 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray15, extensionRegistryLite16);
        com.google.protobuf.CodedOutputStream codedOutputStream20 = com.google.protobuf.CodedOutputStream.newInstance(byteArray15, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite21 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto22 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray15, extensionRegistryLite21);
        com.google.protobuf.CodedOutputStream codedOutputStream23 = com.google.protobuf.CodedOutputStream.newInstance(byteArray15);
        java.nio.ByteBuffer byteBuffer24 = byteBuffer8.get(byteArray15);
        java.nio.LongBuffer longBuffer25 = byteBuffer24.asLongBuffer();
        java.lang.String str26 = longBuffer25.toString();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(intBuffer10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(methodOptions17);
        org.junit.Assert.assertNotNull(codedOutputStream20);
        org.junit.Assert.assertNotNull(fileDescriptorProto22);
        org.junit.Assert.assertNotNull(codedOutputStream23);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(longBuffer25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "java.nio.ByteBufferAsLongBufferB[pos=0 lim=11 cap=11]" + "'", str26, "java.nio.ByteBufferAsLongBufferB[pos=0 lim=11 cap=11]");
    }

    @Test
    public void test2912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2912");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("1970-03-24T02:02:32");
        char[] charArray7 = new char[] { '4', ' ', 'a', 'a', ':' };
        printWriter1.println(charArray7);
        java.security.SignatureException signatureException10 = new java.security.SignatureException();
        java.security.SignatureException signatureException11 = new java.security.SignatureException();
        java.security.SignatureException signatureException12 = new java.security.SignatureException();
        java.security.SignatureException signatureException13 = new java.security.SignatureException();
        java.security.SignatureException signatureException14 = new java.security.SignatureException();
        java.security.SignatureException[] signatureExceptionArray15 = new java.security.SignatureException[] { signatureException10, signatureException11, signatureException12, signatureException13, signatureException14 };
        com.google.common.collect.ImmutableSet<java.security.SignatureException> signatureExceptionSet16 = com.google.common.collect.ImmutableSet.of(signatureExceptionArray15);
        java.io.PrintWriter printWriter17 = printWriter1.format("ISO", (java.lang.Object[]) signatureExceptionArray15);
        com.google.javascript.rhino.Node node22 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean23 = node22.isStringKey();
        boolean boolean24 = node22.isTrue();
        com.google.javascript.rhino.InputId inputId26 = new com.google.javascript.rhino.InputId("NUMBER 52.0 0");
        node22.setInputId(inputId26);
        com.google.javascript.jscomp.SourceAst sourceAst28 = null;
        com.google.javascript.rhino.InputId inputId29 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput31 = new com.google.javascript.jscomp.CompilerInput(sourceAst28, inputId29, true);
        java.io.PrintStream printStream32 = null;
        com.google.javascript.jscomp.Compiler compiler33 = new com.google.javascript.jscomp.Compiler(printStream32);
        com.google.javascript.jscomp.ErrorManager errorManager34 = compiler33.getErrorManager();
        compilerInput31.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler33);
        com.google.javascript.jscomp.CodingConvention codingConvention36 = compiler33.getCodingConvention();
        boolean boolean37 = inputId26.equals((java.lang.Object) compiler33);
        com.google.javascript.jscomp.Region region40 = compiler33.getSourceRegion("java.nio.HeapFloatBuffer[pos=0 lim=6 cap=6]", 0);
        com.google.javascript.jscomp.JSError[] jSErrorArray41 = compiler33.getWarnings();
        java.io.PrintWriter printWriter42 = printWriter1.format("*global*", (java.lang.Object[]) jSErrorArray41);
        printWriter42.print((long) 5);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "4 aa:");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "4 aa:");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[4,  , a, a, :]");
        org.junit.Assert.assertNotNull(signatureExceptionArray15);
        org.junit.Assert.assertNotNull(signatureExceptionSet16);
        org.junit.Assert.assertNotNull(printWriter17);
        org.junit.Assert.assertNotNull(node22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(errorManager34);
        org.junit.Assert.assertNotNull(codingConvention36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(region40);
        org.junit.Assert.assertNotNull(jSErrorArray41);
        org.junit.Assert.assertNotNull(printWriter42);
    }

    @Test
    public void test2913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2913");
        java.lang.Throwable throwable0 = null;
        java.security.InvalidKeyException invalidKeyException1 = new java.security.InvalidKeyException(throwable0);
    }

    @Test
    public void test2914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2914");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        compilerOptions0.setRemoveDeadCode(false);
        boolean boolean7 = compilerOptions0.assumeStrictThis();
        com.google.javascript.jscomp.CompilerOptions.TweakProcessing tweakProcessing8 = compilerOptions0.getTweakProcessing();
        compilerOptions0.enableExternExports(false);
        org.junit.Assert.assertNotNull(errorFormat3);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + tweakProcessing8 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF + "'", tweakProcessing8.equals(com.google.javascript.jscomp.CompilerOptions.TweakProcessing.OFF));
    }

    @Test
    public void test2915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2915");
        short[] shortArray1 = new short[] { (byte) 1 };
        java.nio.ShortBuffer shortBuffer2 = java.nio.ShortBuffer.wrap(shortArray1);
        short[] shortArray4 = new short[] { (byte) 1 };
        java.nio.ShortBuffer shortBuffer5 = java.nio.ShortBuffer.wrap(shortArray4);
        int int6 = shortBuffer2.compareTo(shortBuffer5);
        short[] shortArray7 = shortBuffer2.array();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ShortBuffer shortBuffer10 = java.nio.ShortBuffer.wrap(shortArray7, 407, 256);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray1), "[1]");
        org.junit.Assert.assertNotNull(shortBuffer2);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[1]");
        org.junit.Assert.assertNotNull(shortBuffer5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[1]");
    }

    @Test
    public void test2916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2916");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        boolean boolean1 = subject0.isReadOnly();
        subject0.setReadOnly();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test2917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2917");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.of(localDateTime4, (java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime10.plusDays((long) '4');
        java.time.ZonedDateTime zonedDateTime14 = zonedDateTime10.withMinute((int) '#');
        java.time.format.DateTimeFormatter dateTimeFormatter15 = java.time.format.DateTimeFormatter.BASIC_ISO_DATE;
        java.lang.String str16 = zonedDateTime10.format(dateTimeFormatter15);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime17 = zonedDateTime10.withEarlierOffsetAtOverlap();
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(zonedDateTime14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "19700101+000052" + "'", str16, "19700101+000052");
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime17);
    }

    @Test
    public void test2918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2918");
        java.util.stream.DoubleStream.Builder builder0 = java.util.stream.DoubleStream.builder();
        java.util.stream.DoubleStream.Builder builder2 = builder0.add((double) 15);
        java.util.stream.DoubleStream doubleStream3 = builder0.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(doubleStream3);
    }

    @Test
    public void test2919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2919");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        java.lang.String str1 = localDate0.toString();
        java.time.chrono.IsoChronology isoChronology2 = localDate0.getChronology();
        java.lang.String str3 = isoChronology2.getCalendarType();
        java.util.List<java.time.chrono.Era> eraList4 = isoChronology2.eras();
        java.time.Month month5 = java.time.Month.APRIL;
        java.time.chrono.Chronology chronology6 = java.time.chrono.Chronology.from((java.time.temporal.TemporalAccessor) month5);
        java.lang.String str7 = chronology6.toString();
        java.time.Instant instant8 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime13 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset12);
        java.time.OffsetDateTime offsetDateTime14 = java.time.OffsetDateTime.ofInstant(instant8, (java.time.ZoneId) zoneOffset12);
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset18);
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset23);
        java.time.ZonedDateTime zonedDateTime25 = java.time.ZonedDateTime.of(localDateTime19, (java.time.ZoneId) zoneOffset23);
        java.time.Clock clock26 = java.time.Clock.fixed(instant8, (java.time.ZoneId) zoneOffset23);
        java.time.chrono.ChronoLocalDate chronoLocalDate27 = chronology6.dateNow(clock26);
        long long28 = clock26.millis();
        java.time.Instant instant29 = java.time.Instant.now(clock26);
        java.time.ZoneOffset zoneOffset33 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime34 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset33);
        java.time.ZoneOffset zoneOffset38 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime39 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset38);
        java.time.ZonedDateTime zonedDateTime40 = java.time.ZonedDateTime.of(localDateTime34, (java.time.ZoneId) zoneOffset38);
        java.time.temporal.ChronoField chronoField42 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit43 = chronoField42.getBaseUnit();
        java.time.LocalDateTime localDateTime44 = localDateTime34.plus((long) 1970, temporalUnit43);
        java.time.ZoneOffset zoneOffset49 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime50 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset49);
        java.time.ZoneOffset zoneOffset54 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime55 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset54);
        java.time.ZonedDateTime zonedDateTime56 = java.time.ZonedDateTime.of(localDateTime50, (java.time.ZoneId) zoneOffset54);
        java.time.temporal.ChronoField chronoField58 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit59 = chronoField58.getBaseUnit();
        java.time.LocalDateTime localDateTime60 = localDateTime50.plus((long) 1970, temporalUnit59);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime61 = localDateTime44.minus((long) 43, temporalUnit59);
        java.time.LocalDateTime localDateTime63 = localDateTime44.minusHours((long) 1024);
        java.time.LocalDateTime localDateTime65 = localDateTime63.plusHours((long) 0);
        java.time.Instant instant66 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset70 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime71 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset70);
        java.time.OffsetDateTime offsetDateTime72 = java.time.OffsetDateTime.ofInstant(instant66, (java.time.ZoneId) zoneOffset70);
        java.time.OffsetDateTime offsetDateTime74 = offsetDateTime72.minusDays((long) (short) 100);
        java.lang.String str75 = offsetDateTime72.toString();
        java.time.ZoneOffset zoneOffset76 = offsetDateTime72.getOffset();
        java.time.Instant instant77 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset81 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime82 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset81);
        java.time.OffsetDateTime offsetDateTime83 = java.time.OffsetDateTime.ofInstant(instant77, (java.time.ZoneId) zoneOffset81);
        java.time.ZonedDateTime zonedDateTime84 = java.time.ZonedDateTime.ofLocal(localDateTime63, (java.time.ZoneId) zoneOffset76, zoneOffset81);
        java.time.ZonedDateTime zonedDateTime85 = isoChronology2.zonedDateTime(instant29, (java.time.ZoneId) zoneOffset81);
        java.time.zone.ZoneRules zoneRules86 = java.time.zone.ZoneRules.of(zoneOffset81);
        java.util.Date date90 = new java.util.Date((int) (byte) -1, 43, 16384);
        date90.setSeconds(4);
        long long93 = date90.getTime();
        java.time.Instant instant94 = date90.toInstant();
        java.time.ZoneOffset zoneOffset95 = zoneRules86.getStandardOffset(instant94);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "2022-02-21" + "'", str1, "2022-02-21");
        org.junit.Assert.assertNotNull(isoChronology2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "iso8601" + "'", str3, "iso8601");
        org.junit.Assert.assertNotNull(eraList4);
        org.junit.Assert.assertTrue("'" + month5 + "' != '" + java.time.Month.APRIL + "'", month5.equals(java.time.Month.APRIL));
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ISO" + "'", str7, "ISO");
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zonedDateTime25);
        org.junit.Assert.assertNotNull(clock26);
        org.junit.Assert.assertNotNull(chronoLocalDate27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(zoneOffset33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(zoneOffset38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(zonedDateTime40);
        org.junit.Assert.assertTrue("'" + chronoField42 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField42.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit43 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit43.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(zoneOffset49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(zoneOffset54);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(zonedDateTime56);
        org.junit.Assert.assertTrue("'" + chronoField58 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField58.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit59 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit59.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(instant66);
        org.junit.Assert.assertNotNull(zoneOffset70);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(offsetDateTime72);
        org.junit.Assert.assertNotNull(offsetDateTime74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "1970-01-01T00:00:52+00:00:52" + "'", str75, "1970-01-01T00:00:52+00:00:52");
        org.junit.Assert.assertNotNull(zoneOffset76);
        org.junit.Assert.assertNotNull(instant77);
        org.junit.Assert.assertNotNull(zoneOffset81);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(offsetDateTime83);
        org.junit.Assert.assertNotNull(zonedDateTime84);
        org.junit.Assert.assertNotNull(zonedDateTime85);
        org.junit.Assert.assertNotNull(zoneRules86);
        org.junit.Assert.assertEquals(date90.toString(), "Mon Jun 09 00:00:04 UTC 1947");
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + (-712108796000L) + "'", long93 == (-712108796000L));
        org.junit.Assert.assertNotNull(instant94);
        org.junit.Assert.assertNotNull(zoneOffset95);
    }

    @Test
    public void test2920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2920");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.of(localDateTime4, (java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime10.withYear((int) (short) 1);
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset16);
        int int18 = localDateTime17.getYear();
        java.time.LocalDate localDate19 = localDateTime17.toLocalDate();
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset23);
        java.time.ZoneOffset zoneOffset28 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset28);
        java.time.ZonedDateTime zonedDateTime30 = java.time.ZonedDateTime.of(localDateTime24, (java.time.ZoneId) zoneOffset28);
        java.time.temporal.ChronoField chronoField32 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit33 = chronoField32.getBaseUnit();
        java.time.LocalDateTime localDateTime34 = localDateTime24.plus((long) 1970, temporalUnit33);
        java.time.LocalTime localTime35 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localDateTime34);
        java.time.ZoneOffset zoneOffset39 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime40 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset39);
        java.time.OffsetDateTime offsetDateTime41 = java.time.OffsetDateTime.of(localDate19, localTime35, zoneOffset39);
        java.time.ZonedDateTime zonedDateTime42 = zonedDateTime10.withZoneSameInstant((java.time.ZoneId) zoneOffset39);
        java.time.ZoneOffset zoneOffset46 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime47 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset46);
        java.time.ZoneOffset zoneOffset51 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime52 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset51);
        java.time.ZonedDateTime zonedDateTime53 = java.time.ZonedDateTime.of(localDateTime47, (java.time.ZoneId) zoneOffset51);
        java.time.ZonedDateTime zonedDateTime55 = zonedDateTime53.plusDays((long) '4');
        java.time.ZonedDateTime zonedDateTime57 = zonedDateTime53.withMinute((int) '#');
        boolean boolean58 = zonedDateTime10.isAfter((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime57);
        java.time.ZoneOffset zoneOffset62 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime63 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset62);
        java.time.ZoneOffset zoneOffset67 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime68 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset67);
        java.time.ZonedDateTime zonedDateTime69 = java.time.ZonedDateTime.of(localDateTime63, (java.time.ZoneId) zoneOffset67);
        java.time.ZonedDateTime zonedDateTime71 = zonedDateTime69.plusDays((long) '4');
        boolean boolean72 = zonedDateTime57.isBefore((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime69);
        java.time.Month month73 = zonedDateTime69.getMonth();
        java.time.Instant instant74 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset78 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime79 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset78);
        java.time.OffsetDateTime offsetDateTime80 = java.time.OffsetDateTime.ofInstant(instant74, (java.time.ZoneId) zoneOffset78);
        java.time.ZoneOffset zoneOffset84 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime85 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset84);
        java.time.ZoneOffset zoneOffset89 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime90 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset89);
        java.time.ZonedDateTime zonedDateTime91 = java.time.ZonedDateTime.of(localDateTime85, (java.time.ZoneId) zoneOffset89);
        java.time.Clock clock92 = java.time.Clock.fixed(instant74, (java.time.ZoneId) zoneOffset89);
        java.time.ZonedDateTime zonedDateTime93 = zonedDateTime69.withZoneSameLocal((java.time.ZoneId) zoneOffset89);
        java.time.chrono.Chronology chronology94 = zonedDateTime69.getChronology();
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zoneOffset28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zonedDateTime30);
        org.junit.Assert.assertTrue("'" + chronoField32 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField32.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit33 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit33.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(zoneOffset39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(offsetDateTime41);
        org.junit.Assert.assertNotNull(zonedDateTime42);
        org.junit.Assert.assertNotNull(zoneOffset46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(zoneOffset51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(zonedDateTime53);
        org.junit.Assert.assertNotNull(zonedDateTime55);
        org.junit.Assert.assertNotNull(zonedDateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(zoneOffset62);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(zoneOffset67);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(zonedDateTime69);
        org.junit.Assert.assertNotNull(zonedDateTime71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + month73 + "' != '" + java.time.Month.JANUARY + "'", month73.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertNotNull(instant74);
        org.junit.Assert.assertNotNull(zoneOffset78);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(offsetDateTime80);
        org.junit.Assert.assertNotNull(zoneOffset84);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(zoneOffset89);
        org.junit.Assert.assertNotNull(localDateTime90);
        org.junit.Assert.assertNotNull(zonedDateTime91);
        org.junit.Assert.assertNotNull(clock92);
        org.junit.Assert.assertNotNull(zonedDateTime93);
        org.junit.Assert.assertNotNull(chronology94);
    }

    @Test
    public void test2921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2921");
        java.time.LocalDate localDate0 = java.time.LocalDate.MIN;
        org.junit.Assert.assertNotNull(localDate0);
    }

    @Test
    public void test2922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2922");
        com.google.protobuf.DescriptorProtos.UninterpretedOption.NamePart namePart0 = com.google.protobuf.DescriptorProtos.UninterpretedOption.NamePart.getDefaultInstance();
        boolean boolean1 = namePart0.hasNamePart();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.NamePart.Builder builder2 = namePart0.newBuilderForType();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.NamePart.Builder builder3 = builder2.clearNamePart();
        org.junit.Assert.assertNotNull(namePart0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test2923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2923");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo sourceCodeInfo2 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.parseFrom(inputStream0, extensionRegistryLite1);
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder3 = sourceCodeInfo2.newBuilderForType();
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.SourceCodeInfo.LocationOrBuilder locationOrBuilder5 = sourceCodeInfo2.getLocationOrBuilder(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(sourceCodeInfo2);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test2924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2924");
        com.google.javascript.jscomp.SourceAst sourceAst0 = null;
        com.google.javascript.rhino.InputId inputId1 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput3 = new com.google.javascript.jscomp.CompilerInput(sourceAst0, inputId1, true);
        java.io.PrintStream printStream4 = null;
        com.google.javascript.jscomp.Compiler compiler5 = new com.google.javascript.jscomp.Compiler(printStream4);
        com.google.javascript.jscomp.ErrorManager errorManager6 = compiler5.getErrorManager();
        compilerInput3.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler5);
        com.google.javascript.jscomp.CodingConvention codingConvention8 = compiler5.getCodingConvention();
        double double9 = compiler5.getProgress();
        boolean boolean10 = compiler5.acceptEcmaScript5();
        compiler5.reportCodeChange();
        org.junit.Assert.assertNotNull(errorManager6);
        org.junit.Assert.assertNotNull(codingConvention8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test2925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2925");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType4 = jSTypeRegistry2.createObjectType(objectType3);
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.jstype.ObjectType objectType8 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry7.createObjectType(objectType8);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair10 = objectType4.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType9);
        java.lang.String str11 = objectType9.getDisplayName();
        com.google.javascript.rhino.ErrorReporter errorReporter12 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter12, false);
        com.google.javascript.rhino.jstype.ObjectType objectType15 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType16 = jSTypeRegistry14.createObjectType(objectType15);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        com.google.javascript.rhino.jstype.ObjectType objectType20 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType21 = jSTypeRegistry19.createObjectType(objectType20);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair22 = objectType16.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType21);
        boolean boolean23 = objectType21.isTemplateType();
        com.google.javascript.rhino.jstype.JSType jSType24 = objectType9.getLeastSupertype((com.google.javascript.rhino.jstype.JSType) objectType21);
        boolean boolean25 = objectType9.isNominalType();
        boolean boolean26 = objectType9.isFunctionPrototypeType();
        org.junit.Assert.assertNotNull(objectType4);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertNotNull(typePair10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(objectType16);
        org.junit.Assert.assertNotNull(objectType21);
        org.junit.Assert.assertNotNull(typePair22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(jSType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test2926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2926");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.OffsetDateTime offsetDateTime8 = offsetDateTime6.minusDays((long) (short) 100);
        java.lang.String str9 = offsetDateTime6.toString();
        java.time.ZoneOffset zoneOffset10 = offsetDateTime6.getOffset();
        java.time.LocalTime localTime11 = offsetDateTime6.toLocalTime();
        java.time.Instant instant12 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset16);
        java.time.OffsetDateTime offsetDateTime18 = java.time.OffsetDateTime.ofInstant(instant12, (java.time.ZoneId) zoneOffset16);
        java.time.OffsetDateTime offsetDateTime20 = offsetDateTime18.minusDays((long) (short) 100);
        java.lang.String str21 = offsetDateTime18.toString();
        java.time.temporal.ChronoField chronoField22 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        int int23 = offsetDateTime18.get((java.time.temporal.TemporalField) chronoField22);
        long long24 = localTime11.getLong((java.time.temporal.TemporalField) chronoField22);
        java.time.ZoneOffset zoneOffset28 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset28);
        int int30 = localDateTime29.getYear();
        java.time.LocalDate localDate31 = localDateTime29.toLocalDate();
        java.time.ZoneOffset zoneOffset35 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime36 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset35);
        java.time.ZoneOffset zoneOffset40 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime41 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset40);
        java.time.ZonedDateTime zonedDateTime42 = java.time.ZonedDateTime.of(localDateTime36, (java.time.ZoneId) zoneOffset40);
        java.time.temporal.ChronoField chronoField44 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit45 = chronoField44.getBaseUnit();
        java.time.LocalDateTime localDateTime46 = localDateTime36.plus((long) 1970, temporalUnit45);
        java.time.LocalTime localTime47 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localDateTime46);
        java.time.ZoneOffset zoneOffset51 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime52 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset51);
        java.time.OffsetDateTime offsetDateTime53 = java.time.OffsetDateTime.of(localDate31, localTime47, zoneOffset51);
        com.google.javascript.rhino.Node node57 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean58 = node57.isFromExterns();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean63 = node62.isFromExterns();
        java.lang.String str64 = node62.toString();
        com.google.javascript.rhino.Node node65 = node57.copyInformationFrom(node62);
        boolean boolean66 = zoneOffset51.equals((java.lang.Object) node62);
        java.time.OffsetTime offsetTime67 = localTime11.atOffset(zoneOffset51);
        java.time.Instant instant68 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset72 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime73 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset72);
        java.time.OffsetDateTime offsetDateTime74 = java.time.OffsetDateTime.ofInstant(instant68, (java.time.ZoneId) zoneOffset72);
        java.time.OffsetDateTime offsetDateTime76 = offsetDateTime74.minusDays((long) (short) 100);
        java.lang.String str77 = offsetDateTime74.toString();
        java.time.temporal.ChronoField chronoField78 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        int int79 = offsetDateTime74.get((java.time.temporal.TemporalField) chronoField78);
        java.time.OffsetDateTime offsetDateTime81 = offsetDateTime74.plusWeeks((long) 100);
        java.time.temporal.ChronoField chronoField82 = java.time.temporal.ChronoField.OFFSET_SECONDS;
        java.time.temporal.TemporalUnit temporalUnit83 = chronoField82.getRangeUnit();
        long long85 = chronoField82.checkValidValue((long) 2);
        long long86 = offsetDateTime81.getLong((java.time.temporal.TemporalField) chronoField82);
        long long87 = zoneOffset51.getLong((java.time.temporal.TemporalField) chronoField82);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(offsetDateTime8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-01T00:00:52+00:00:52" + "'", str9, "1970-01-01T00:00:52+00:00:52");
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1970-01-01T00:00:52+00:00:52" + "'", str21, "1970-01-01T00:00:52+00:00:52");
        org.junit.Assert.assertTrue("'" + chronoField22 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField22.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 12 + "'", int23 == 12);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 12L + "'", long24 == 12L);
        org.junit.Assert.assertNotNull(zoneOffset28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1970 + "'", int30 == 1970);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(zoneOffset35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(zoneOffset40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(zonedDateTime42);
        org.junit.Assert.assertTrue("'" + chronoField44 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField44.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit45 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit45.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(zoneOffset51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(offsetDateTime53);
        org.junit.Assert.assertNotNull(node57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "NUMBER 52.0 0" + "'", str64, "NUMBER 52.0 0");
        org.junit.Assert.assertNotNull(node65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(offsetTime67);
        org.junit.Assert.assertNotNull(instant68);
        org.junit.Assert.assertNotNull(zoneOffset72);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(offsetDateTime74);
        org.junit.Assert.assertNotNull(offsetDateTime76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "1970-01-01T00:00:52+00:00:52" + "'", str77, "1970-01-01T00:00:52+00:00:52");
        org.junit.Assert.assertTrue("'" + chronoField78 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField78.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 12 + "'", int79 == 12);
        org.junit.Assert.assertNotNull(offsetDateTime81);
        org.junit.Assert.assertTrue("'" + chronoField82 + "' != '" + java.time.temporal.ChronoField.OFFSET_SECONDS + "'", chronoField82.equals(java.time.temporal.ChronoField.OFFSET_SECONDS));
        org.junit.Assert.assertTrue("'" + temporalUnit83 + "' != '" + java.time.temporal.ChronoUnit.FOREVER + "'", temporalUnit83.equals(java.time.temporal.ChronoUnit.FOREVER));
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 2L + "'", long85 == 2L);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 52L + "'", long86 == 52L);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 52L + "'", long87 == 52L);
    }

    @Test
    public void test2927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2927");
        java.time.DayOfWeek dayOfWeek0 = java.time.DayOfWeek.SATURDAY;
        org.junit.Assert.assertTrue("'" + dayOfWeek0 + "' != '" + java.time.DayOfWeek.SATURDAY + "'", dayOfWeek0.equals(java.time.DayOfWeek.SATURDAY));
    }

    @Test
    public void test2928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2928");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.of(localDateTime4, (java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime10.minusSeconds((long) '#');
        java.time.temporal.ChronoField chronoField13 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit14 = chronoField13.getBaseUnit();
        boolean boolean15 = zonedDateTime12.isSupported(temporalUnit14);
        java.time.LocalDate localDate16 = java.time.LocalDate.now();
        java.lang.String str17 = localDate16.toString();
        boolean boolean18 = temporalUnit14.isSupportedBy((java.time.temporal.Temporal) localDate16);
        java.time.format.DateTimeFormatter dateTimeFormatter19 = java.time.format.DateTimeFormatter.ISO_WEEK_DATE;
        java.lang.String str20 = localDate16.format(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertTrue("'" + chronoField13 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField13.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit14 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit14.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-21" + "'", str17, "2022-02-21");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-W08-1" + "'", str20, "2022-W08-1");
    }

    @Test
    public void test2929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2929");
        com.google.javascript.jscomp.SourceAst sourceAst0 = null;
        com.google.javascript.rhino.InputId inputId1 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput3 = new com.google.javascript.jscomp.CompilerInput(sourceAst0, inputId1, true);
        java.io.PrintStream printStream4 = null;
        com.google.javascript.jscomp.Compiler compiler5 = new com.google.javascript.jscomp.Compiler(printStream4);
        com.google.javascript.jscomp.ErrorManager errorManager6 = compiler5.getErrorManager();
        compilerInput3.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler5);
        com.google.javascript.jscomp.Scope scope8 = compiler5.getTopScope();
        java.lang.String str11 = compiler5.getSourceLine("US-ASCII", 0);
        com.google.javascript.jscomp.CodingConvention codingConvention12 = compiler5.getCodingConvention();
        int int13 = compiler5.getWarningCount();
        java.lang.String str14 = compiler5.toSource();
        com.google.javascript.jscomp.type.ReverseAbstractInterpreter reverseAbstractInterpreter15 = compiler5.getReverseAbstractInterpreter();
        com.google.javascript.rhino.Node node16 = null;
        com.google.javascript.jscomp.type.FlowScope flowScope17 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.type.FlowScope flowScope19 = reverseAbstractInterpreter15.getPreciserScopeKnowingConditionOutcome(node16, flowScope17, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(errorManager6);
        org.junit.Assert.assertNull(scope8);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(codingConvention12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(reverseAbstractInterpreter15);
    }

    @Test
    public void test2930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2930");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange extensionRange2 = com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.parseFrom(inputStream0, extensionRegistryLite1);
        int int3 = extensionRange2.getEnd();
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions4 = com.google.protobuf.DescriptorProtos.MethodOptions.getDefaultInstance();
        com.google.protobuf.Descriptors.Descriptor descriptor5 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto6 = descriptor5.toProto();
        boolean boolean7 = descriptorProto6.isInitialized();
        com.google.protobuf.DescriptorProtos.MessageOptions messageOptions8 = descriptorProto6.getOptions();
        com.google.protobuf.DescriptorProtos.MessageOptions.Builder builder9 = messageOptions8.newBuilderForType();
        boolean boolean10 = messageOptions8.hasNoStandardDescriptorAccessor();
        byte[] byteArray11 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite12 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions13 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray11, extensionRegistryLite12);
        com.google.protobuf.CodedOutputStream codedOutputStream16 = com.google.protobuf.CodedOutputStream.newInstance(byteArray11, (int) (short) 0, 1);
        com.google.protobuf.CodedOutputStream codedOutputStream19 = com.google.protobuf.CodedOutputStream.newInstance(byteArray11, (int) ' ', 0);
        messageOptions8.writeTo(codedOutputStream19);
        methodOptions4.writeTo(codedOutputStream19);
        extensionRange2.writeTo(codedOutputStream19);
        // The following exception was thrown during execution in test generation
        try {
            codedOutputStream19.writeDouble((int) (short) -1, (double) 39);
            org.junit.Assert.fail("Expected exception of type com.google.protobuf.CodedOutputStream.OutOfSpaceException; message: CodedOutputStream was writing to a flat byte array and ran out of space.");
        } catch (com.google.protobuf.CodedOutputStream.OutOfSpaceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(extensionRange2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(methodOptions4);
        org.junit.Assert.assertNotNull(descriptor5);
        org.junit.Assert.assertNotNull(descriptorProto6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(messageOptions8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[]");
        org.junit.Assert.assertNotNull(methodOptions13);
        org.junit.Assert.assertNotNull(codedOutputStream16);
        org.junit.Assert.assertNotNull(codedOutputStream19);
    }

    @Test
    public void test2931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2931");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        java.nio.charset.CodingErrorAction codingErrorAction2 = charsetDecoder1.malformedInputAction();
        java.nio.charset.CodingErrorAction codingErrorAction3 = charsetDecoder1.unmappableCharacterAction();
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet8 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet8, strArray7);
        boolean boolean10 = strSet8.isEmpty();
        java.nio.ByteBuffer byteBuffer12 = java.nio.ByteBuffer.allocate(100);
        boolean boolean13 = strSet8.equals((java.lang.Object) byteBuffer12);
        java.nio.IntBuffer intBuffer14 = byteBuffer12.asIntBuffer();
        double double15 = byteBuffer12.getDouble();
        java.nio.ByteBuffer byteBuffer16 = byteBuffer12.asReadOnlyBuffer();
        java.nio.CharBuffer charBuffer17 = charsetDecoder1.decode(byteBuffer16);
        boolean boolean18 = byteBuffer16.isDirect();
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertNotNull(codingErrorAction2);
        org.junit.Assert.assertNotNull(codingErrorAction3);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(intBuffer14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer16);
        org.junit.Assert.assertNotNull(charBuffer17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test2932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2932");
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto0 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.getDefaultInstance();
        boolean boolean1 = methodDescriptorProto0.hasOutputType();
        com.google.protobuf.CodedOutputStream codedOutputStream2 = null;
        methodDescriptorProto0.writeTo(codedOutputStream2);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder4 = methodDescriptorProto0.toBuilder();
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder6 = builder4.setOutputType("java.nio.HeapFloatBuffer[pos=0 lim=6 cap=6]");
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder7 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output9 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream11 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output9, (int) 'a');
        byte[] byteArray12 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite13 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions14 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray12, extensionRegistryLite13);
        output9.write(byteArray12);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder16 = builder7.mergeFrom(byteArray12);
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions17 = builder7.buildPartial();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder18 = builder7.addUninterpretedOptionBuilder();
        byte[] byteArray19 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite20 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions21 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray19, extensionRegistryLite20);
        com.google.protobuf.CodedOutputStream codedOutputStream24 = com.google.protobuf.CodedOutputStream.newInstance(byteArray19, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite25 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto26 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray19, extensionRegistryLite25);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite27 = null;
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto28 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.parseFrom(byteArray19, extensionRegistryLite27);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder29 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label30 = builder29.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto31 = builder29.buildPartial();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder32 = fieldDescriptorProto31.newBuilderForType();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder33 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto31);
        java.io.File file36 = null;
        java.io.File file37 = java.io.File.createTempFile("hi!", "ISO", file36);
        boolean boolean40 = file37.setWritable(false, false);
        java.net.URI uRI41 = file37.toURI();
        java.io.PrintStream printStream42 = new java.io.PrintStream(file37);
        printStream42.print((int) (byte) 0);
        printStream42.print(10.0d);
        printStream42.close();
        java.lang.String[] strArray51 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet52 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet52, strArray51);
        boolean boolean54 = strSet52.isEmpty();
        java.nio.ByteBuffer byteBuffer56 = java.nio.ByteBuffer.allocate(100);
        boolean boolean57 = strSet52.equals((java.lang.Object) byteBuffer56);
        java.nio.IntBuffer intBuffer58 = byteBuffer56.asIntBuffer();
        double double59 = byteBuffer56.getDouble();
        java.nio.ByteBuffer byteBuffer62 = byteBuffer56.put((int) (short) 1, (byte) 1);
        byte[] byteArray63 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite64 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions65 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray63, extensionRegistryLite64);
        com.google.protobuf.CodedOutputStream codedOutputStream68 = com.google.protobuf.CodedOutputStream.newInstance(byteArray63, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite69 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto70 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray63, extensionRegistryLite69);
        com.google.protobuf.CodedOutputStream codedOutputStream71 = com.google.protobuf.CodedOutputStream.newInstance(byteArray63);
        java.nio.ByteBuffer byteBuffer72 = byteBuffer56.get(byteArray63);
        printStream42.write(byteArray63, (int) '/', (int) (byte) 1);
        java.io.InputStream inputStream76 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite77 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location78 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream76, extensionRegistryLite77);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder79 = builder33.mergeFrom(byteArray63, extensionRegistryLite77);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder80 = builder7.mergeFrom(byteArray19, extensionRegistryLite77);
        com.google.protobuf.DescriptorProtos.UninterpretedOptionOrBuilder uninterpretedOptionOrBuilder82 = builder80.getUninterpretedOptionOrBuilder(0);
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto.Builder builder83 = builder4.setOptions(builder80);
        com.google.protobuf.Descriptors.Descriptor descriptor84 = builder4.getDescriptorForType();
        org.junit.Assert.assertNotNull(methodDescriptorProto0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(output9);
        org.junit.Assert.assertNotNull(codedOutputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(methodOptions14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(methodOptions17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(methodOptions21);
        org.junit.Assert.assertNotNull(codedOutputStream24);
        org.junit.Assert.assertNotNull(fileDescriptorProto26);
        org.junit.Assert.assertNotNull(serviceDescriptorProto28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + label30 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label30.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(file37);
        org.junit.Assert.assertEquals(file37.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file37.toString(), "/tmp/hi!7220456224256570792ISO");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(uRI41);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(byteBuffer56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(intBuffer58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 0.0d + "'", double59 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer62);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[]");
        org.junit.Assert.assertNotNull(methodOptions65);
        org.junit.Assert.assertNotNull(codedOutputStream68);
        org.junit.Assert.assertNotNull(fileDescriptorProto70);
        org.junit.Assert.assertNotNull(codedOutputStream71);
        org.junit.Assert.assertNotNull(byteBuffer72);
        org.junit.Assert.assertNotNull(extensionRegistryLite77);
        org.junit.Assert.assertNotNull(location78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(uninterpretedOptionOrBuilder82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(descriptor84);
    }

    @Test
    public void test2933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2933");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto enumValueDescriptorProto2 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.parseFrom(inputStream0, extensionRegistryLite1);
        com.google.protobuf.DescriptorProtos.EnumValueOptionsOrBuilder enumValueOptionsOrBuilder3 = enumValueDescriptorProto2.getOptionsOrBuilder();
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder4 = enumValueDescriptorProto2.newBuilderForType();
        com.google.protobuf.Descriptors.Descriptor descriptor5 = builder4.getDescriptorForType();
        java.util.List<com.google.protobuf.Descriptors.Descriptor> descriptorList6 = descriptor5.getNestedTypes();
        org.junit.Assert.assertNotNull(enumValueDescriptorProto2);
        org.junit.Assert.assertNotNull(enumValueOptionsOrBuilder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(descriptor5);
        org.junit.Assert.assertNotNull(descriptorList6);
    }

    @Test
    public void test2934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2934");
        com.google.javascript.rhino.Node node3 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean4 = node3.isTry();
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        int int10 = localDateTime9.getYear();
        java.time.LocalDate localDate11 = localDateTime9.toLocalDate();
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZoneOffset zoneOffset20 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset20);
        java.time.ZonedDateTime zonedDateTime22 = java.time.ZonedDateTime.of(localDateTime16, (java.time.ZoneId) zoneOffset20);
        java.time.temporal.ChronoField chronoField24 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit25 = chronoField24.getBaseUnit();
        java.time.LocalDateTime localDateTime26 = localDateTime16.plus((long) 1970, temporalUnit25);
        java.time.LocalTime localTime27 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localDateTime26);
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime32 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset31);
        java.time.OffsetDateTime offsetDateTime33 = java.time.OffsetDateTime.of(localDate11, localTime27, zoneOffset31);
        com.google.javascript.rhino.Node node37 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean38 = node37.isFromExterns();
        com.google.javascript.rhino.Node node42 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean43 = node42.isFromExterns();
        java.lang.String str44 = node42.toString();
        com.google.javascript.rhino.Node node45 = node37.copyInformationFrom(node42);
        boolean boolean46 = zoneOffset31.equals((java.lang.Object) node42);
        boolean boolean47 = node42.isVar();
        com.google.javascript.rhino.Node node52 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean53 = node52.isStringKey();
        boolean boolean54 = node52.isThrow();
        boolean boolean55 = node52.isVarArgs();
        com.google.javascript.rhino.Node node59 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean60 = node59.isFromExterns();
        com.google.javascript.rhino.Node node64 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean65 = node64.isFromExterns();
        java.lang.String str66 = node64.toString();
        com.google.javascript.rhino.Node node67 = node59.copyInformationFrom(node64);
        com.google.javascript.rhino.Node node71 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean72 = node71.isStringKey();
        boolean boolean73 = node71.isThrow();
        com.google.javascript.rhino.Node node77 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean78 = node77.isStringKey();
        com.google.javascript.rhino.Node node81 = new com.google.javascript.rhino.Node((-1), node52, node64, node71, node77, 16384, 16);
        com.google.javascript.rhino.Node node85 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean86 = node85.isStringKey();
        boolean boolean87 = node85.isThrow();
        boolean boolean88 = node85.isVarArgs();
        boolean boolean89 = node85.isHook();
        boolean boolean90 = node85.isAssign();
        boolean boolean91 = node85.isVar();
        com.google.javascript.jscomp.CodingConvention.Bind bind92 = new com.google.javascript.jscomp.CodingConvention.Bind(node42, node77, node85);
        boolean boolean93 = node42.isVar();
        com.google.javascript.rhino.Node node94 = node3.clonePropsFrom(node42);
        boolean boolean95 = node94.isBreak();
        org.junit.Assert.assertNotNull(node3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1970 + "'", int10 == 1970);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zoneOffset20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zonedDateTime22);
        org.junit.Assert.assertTrue("'" + chronoField24 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField24.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit25 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit25.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(offsetDateTime33);
        org.junit.Assert.assertNotNull(node37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(node42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "NUMBER 52.0 0" + "'", str44, "NUMBER 52.0 0");
        org.junit.Assert.assertNotNull(node45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(node52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(node59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(node64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "NUMBER 52.0 0" + "'", str66, "NUMBER 52.0 0");
        org.junit.Assert.assertNotNull(node67);
        org.junit.Assert.assertNotNull(node71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(node77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(node85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(node94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test2935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2935");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset10);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.of(localDateTime11, (java.time.ZoneId) zoneOffset15);
        java.time.Clock clock18 = java.time.Clock.fixed(instant0, (java.time.ZoneId) zoneOffset15);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.now(clock18);
        java.time.LocalDate localDate20 = java.time.LocalDate.now(clock18);
        com.google.protobuf.Descriptors.Descriptor descriptor21 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder.getDescriptor();
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto22 = descriptor21.toProto();
        boolean boolean23 = descriptorProto22.isInitialized();
        java.util.List<com.google.protobuf.DescriptorProtos.DescriptorProto> descriptorProtoList24 = descriptorProto22.getNestedTypeList();
        int int25 = descriptorProto22.getExtensionRangeCount();
        boolean boolean26 = localDate20.equals((java.lang.Object) descriptorProto22);
        java.time.temporal.ChronoField chronoField27 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_MONTH;
        java.time.temporal.ValueRange valueRange28 = localDate20.range((java.time.temporal.TemporalField) chronoField27);
        java.time.LocalDate localDate29 = java.time.LocalDate.now();
        java.lang.String str30 = localDate29.toString();
        java.time.LocalDate localDate31 = java.time.LocalDate.now();
        java.time.ZoneOffset zoneOffset35 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime36 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset35);
        int int37 = localDateTime36.getYear();
        java.time.LocalDate localDate38 = localDateTime36.toLocalDate();
        java.time.LocalDate localDate40 = localDate38.plusDays((long) '#');
        java.time.LocalDate localDate41 = java.time.LocalDate.now();
        java.time.chrono.ChronoPeriod chronoPeriod42 = localDate38.until((java.time.chrono.ChronoLocalDate) localDate41);
        java.time.Period period43 = java.time.Period.ZERO;
        java.time.chrono.ChronoPeriod chronoPeriod44 = period43.normalized();
        int int45 = period43.getYears();
        java.time.Period period46 = period43.negated();
        boolean boolean47 = period46.isNegative();
        java.time.LocalDate localDate48 = localDate38.minus((java.time.temporal.TemporalAmount) period46);
        com.google.common.collect.ImmutableSet<java.time.chrono.ChronoLocalDate> chronoLocalDateSet49 = com.google.common.collect.ImmutableSet.of((java.time.chrono.ChronoLocalDate) localDate20, (java.time.chrono.ChronoLocalDate) localDate29, (java.time.chrono.ChronoLocalDate) localDate31, (java.time.chrono.ChronoLocalDate) localDate48);
        java.time.LocalDate localDate51 = localDate48.plusWeeks((long) 16384);
        java.time.LocalDate localDate53 = localDate51.plusWeeks((long) 10);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(clock18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(descriptor21);
        org.junit.Assert.assertNotNull(descriptorProto22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(descriptorProtoList24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + chronoField27 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_MONTH + "'", chronoField27.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_MONTH));
        org.junit.Assert.assertNotNull(valueRange28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022-02-21" + "'", str30, "2022-02-21");
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(zoneOffset35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1970 + "'", int37 == 1970);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(chronoPeriod42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(chronoPeriod44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(chronoLocalDateSet49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(localDate53);
    }

    @Test
    public void test2936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2936");
        com.google.protobuf.DescriptorProtos.UninterpretedOption.NamePart namePart0 = com.google.protobuf.DescriptorProtos.UninterpretedOption.NamePart.getDefaultInstance();
        boolean boolean1 = namePart0.hasNamePart();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.NamePart.Builder builder2 = namePart0.newBuilderForType();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.NamePart.Builder builder4 = builder2.setIsExtension(true);
        com.google.protobuf.DescriptorProtos.UninterpretedOption.NamePart namePart5 = builder4.buildPartial();
        org.junit.Assert.assertNotNull(namePart0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(namePart5);
    }

    @Test
    public void test2937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2937");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label4 = builder3.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = builder0.addExtension(builder3);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder6 = builder0.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions7 = builder6.getOptions();
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder8 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output10 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream12 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output10, (int) 'a');
        byte[] byteArray13 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite14 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions15 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray13, extensionRegistryLite14);
        output10.write(byteArray13);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder17 = builder8.mergeFrom(byteArray13);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder18 = builder6.mergeFrom(byteArray13);
        com.google.protobuf.ByteString.Output output20 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream22 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output20, (int) 'a');
        byte[] byteArray23 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite24 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions25 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray23, extensionRegistryLite24);
        output20.write(byteArray23);
        com.google.protobuf.CodedInputStream codedInputStream29 = com.google.protobuf.CodedInputStream.newInstance(byteArray23, 21, 4);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder32 = builder18.mergeFrom(byteArray23, 5, 1970);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + label4 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label4.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(enumOptions7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(output10);
        org.junit.Assert.assertNotNull(codedOutputStream12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(methodOptions15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(output20);
        org.junit.Assert.assertNotNull(codedOutputStream22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertNotNull(methodOptions25);
        org.junit.Assert.assertNotNull(codedInputStream29);
    }

    @Test
    public void test2938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2938");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo sourceCodeInfo2 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.parseFrom(inputStream0, extensionRegistryLite1);
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder3 = sourceCodeInfo2.newBuilderForType();
        boolean boolean4 = builder3.isInitialized();
        com.google.protobuf.UnknownFieldSet unknownFieldSet5 = builder3.getUnknownFields();
        org.junit.Assert.assertNotNull(sourceCodeInfo2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(unknownFieldSet5);
    }

    @Test
    public void test2939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2939");
        java.util.Locale locale3 = new java.util.Locale("", "NUMBER 52.0 0", "hi!");
        java.time.format.DecimalStyle decimalStyle4 = java.time.format.DecimalStyle.of(locale3);
        char char5 = decimalStyle4.getZeroDigit();
        char char6 = decimalStyle4.getZeroDigit();
        org.junit.Assert.assertEquals(locale3.toString(), "_NUMBER 52.0 0_hi!");
        org.junit.Assert.assertNotNull(decimalStyle4);
        org.junit.Assert.assertTrue("'" + char5 + "' != '" + '0' + "'", char5 == '0');
        org.junit.Assert.assertTrue("'" + char6 + "' != '" + '0' + "'", char6 == '0');
    }

    @Test
    public void test2940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2940");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        java.nio.charset.CodingErrorAction codingErrorAction2 = charsetDecoder1.malformedInputAction();
        java.nio.charset.CodingErrorAction codingErrorAction3 = charsetDecoder1.unmappableCharacterAction();
        float float4 = charsetDecoder1.maxCharsPerByte();
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertNotNull(codingErrorAction2);
        org.junit.Assert.assertNotNull(codingErrorAction3);
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 1.0f + "'", float4 == 1.0f);
    }

    @Test
    public void test2941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2941");
        com.google.protobuf.ByteString.Output output1 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream3 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output1, (int) 'a');
        com.google.protobuf.ByteString byteString4 = output1.toByteString();
        org.junit.Assert.assertNotNull(output1);
        org.junit.Assert.assertNotNull(codedOutputStream3);
        org.junit.Assert.assertNotNull(byteString4);
    }

    @Test
    public void test2942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2942");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType4 = jSTypeRegistry2.createObjectType(objectType3);
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode resolveMode8 = com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS;
        jSTypeRegistry7.setResolveMode(resolveMode8);
        com.google.javascript.rhino.ErrorReporter errorReporter10 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry12 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter10, false);
        com.google.javascript.rhino.jstype.ObjectType objectType13 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType14 = jSTypeRegistry12.createObjectType(objectType13);
        com.google.javascript.rhino.ErrorReporter errorReporter15 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry17 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter15, false);
        com.google.javascript.rhino.jstype.ObjectType objectType18 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType19 = jSTypeRegistry17.createObjectType(objectType18);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair20 = objectType14.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType19);
        java.lang.String str21 = objectType19.getDisplayName();
        objectType19.clearResolved();
        com.google.javascript.rhino.jstype.JSType jSType23 = jSTypeRegistry7.createNullableType((com.google.javascript.rhino.jstype.JSType) objectType19);
        boolean boolean24 = jSType23.isEmptyType();
        com.google.javascript.rhino.ErrorReporter errorReporter25 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry27 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter25, false);
        com.google.javascript.rhino.ErrorReporter errorReporter28 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry30 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter28, false);
        com.google.javascript.rhino.jstype.ObjectType objectType31 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType32 = jSTypeRegistry30.createObjectType(objectType31);
        com.google.javascript.rhino.ErrorReporter errorReporter33 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry35 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter33, false);
        com.google.javascript.rhino.jstype.ObjectType objectType36 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType37 = jSTypeRegistry35.createObjectType(objectType36);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair38 = objectType32.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType37);
        java.lang.String str39 = objectType37.getDisplayName();
        java.util.Collection<com.google.javascript.rhino.jstype.FunctionType> functionTypeCollection40 = jSTypeRegistry27.getDirectImplementors(objectType37);
        java.lang.String str41 = objectType37.toDebugHashCodeString();
        com.google.javascript.rhino.jstype.JSType jSType42 = jSType23.getGreatestSubtype((com.google.javascript.rhino.jstype.JSType) objectType37);
        com.google.javascript.rhino.Node node44 = objectType37.getPropertyNode("{1758850361}");
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        com.google.javascript.rhino.jstype.ObjectType objectType49 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType50 = jSTypeRegistry48.createObjectType(objectType49);
        com.google.javascript.rhino.ErrorReporter errorReporter51 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry53 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter51, false);
        com.google.javascript.rhino.jstype.ObjectType objectType54 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType55 = jSTypeRegistry53.createObjectType(objectType54);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair56 = objectType50.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType55);
        java.lang.String str57 = objectType55.getDisplayName();
        com.google.javascript.rhino.ErrorReporter errorReporter58 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry60 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter58, false);
        com.google.javascript.rhino.jstype.ObjectType objectType61 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType62 = jSTypeRegistry60.createObjectType(objectType61);
        com.google.javascript.rhino.ErrorReporter errorReporter63 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry65 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter63, false);
        com.google.javascript.rhino.jstype.ObjectType objectType66 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType67 = jSTypeRegistry65.createObjectType(objectType66);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair68 = objectType62.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType67);
        boolean boolean69 = objectType67.isTemplateType();
        com.google.javascript.rhino.jstype.JSType jSType70 = objectType55.getLeastSupertype((com.google.javascript.rhino.jstype.JSType) objectType67);
        com.google.javascript.rhino.ErrorReporter errorReporter71 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry73 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter71, false);
        com.google.javascript.rhino.jstype.ObjectType objectType74 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType75 = jSTypeRegistry73.createObjectType(objectType74);
        com.google.javascript.rhino.ErrorReporter errorReporter76 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry78 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter76, false);
        com.google.javascript.rhino.jstype.ObjectType objectType79 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType80 = jSTypeRegistry78.createObjectType(objectType79);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair81 = objectType75.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType80);
        boolean boolean82 = objectType80.isNullable();
        com.google.javascript.rhino.Node node84 = objectType80.getPropertyNode("OptionalLong.empty");
        com.google.javascript.rhino.ErrorReporter errorReporter85 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry87 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter85, false);
        com.google.javascript.rhino.jstype.ObjectType objectType88 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType89 = jSTypeRegistry87.createObjectType(objectType88);
        com.google.javascript.rhino.ErrorReporter errorReporter90 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry92 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter90, false);
        com.google.javascript.rhino.jstype.ObjectType objectType93 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType94 = jSTypeRegistry92.createObjectType(objectType93);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair95 = objectType89.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType94);
        com.google.javascript.rhino.Node node96 = objectType89.getRootNode();
        com.google.javascript.rhino.jstype.JSType[] jSTypeArray97 = new com.google.javascript.rhino.jstype.JSType[] { objectType55, objectType80, objectType89 };
        com.google.javascript.rhino.jstype.FunctionType functionType98 = jSTypeRegistry2.createConstructorType((com.google.javascript.rhino.jstype.JSType) objectType37, false, jSTypeArray97);
        org.junit.Assert.assertNotNull(objectType4);
        org.junit.Assert.assertTrue("'" + resolveMode8 + "' != '" + com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS + "'", resolveMode8.equals(com.google.javascript.rhino.jstype.JSTypeRegistry.ResolveMode.LAZY_EXPRESSIONS));
        org.junit.Assert.assertNotNull(objectType14);
        org.junit.Assert.assertNotNull(objectType19);
        org.junit.Assert.assertNotNull(typePair20);
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertNotNull(jSType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(objectType32);
        org.junit.Assert.assertNotNull(objectType37);
        org.junit.Assert.assertNotNull(typePair38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(functionTypeCollection40);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "{1741222678}" + "'", str41, "{1741222678}");
        org.junit.Assert.assertNotNull(jSType42);
        org.junit.Assert.assertNull(node44);
        org.junit.Assert.assertNotNull(objectType50);
        org.junit.Assert.assertNotNull(objectType55);
        org.junit.Assert.assertNotNull(typePair56);
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(objectType62);
        org.junit.Assert.assertNotNull(objectType67);
        org.junit.Assert.assertNotNull(typePair68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(jSType70);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertNotNull(objectType80);
        org.junit.Assert.assertNotNull(typePair81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNull(node84);
        org.junit.Assert.assertNotNull(objectType89);
        org.junit.Assert.assertNotNull(objectType94);
        org.junit.Assert.assertNotNull(typePair95);
        org.junit.Assert.assertNull(node96);
        org.junit.Assert.assertNotNull(jSTypeArray97);
        org.junit.Assert.assertNotNull(functionType98);
    }

    @Test
    public void test2943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2943");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions1 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream0);
        java.util.List<com.google.protobuf.DescriptorProtos.UninterpretedOption> uninterpretedOptionList2 = enumOptions1.getUninterpretedOptionList();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder3 = enumOptions1.newBuilderForType();
        java.io.InputStream inputStream4 = null;
        java.io.InputStream inputStream5 = null;
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset9);
        int int11 = localDateTime10.getYear();
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZoneOffset zoneOffset20 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset20);
        java.time.ZonedDateTime zonedDateTime22 = java.time.ZonedDateTime.of(localDateTime16, (java.time.ZoneId) zoneOffset20);
        boolean boolean23 = localDateTime10.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime16);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder24 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder26 = builder24.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder27 = builder26.clearSourceCodeInfo();
        boolean boolean28 = builder26.hasOptions();
        boolean boolean29 = localDateTime10.equals((java.lang.Object) builder26);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder30 = builder26.addEnumTypeBuilder();
        java.io.InputStream inputStream31 = null;
        byte[] byteArray32 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite33 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions34 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray32, extensionRegistryLite33);
        com.google.protobuf.CodedOutputStream codedOutputStream37 = com.google.protobuf.CodedOutputStream.newInstance(byteArray32, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite38 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto39 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray32, extensionRegistryLite38);
        com.google.protobuf.CodedOutputStream codedOutputStream40 = com.google.protobuf.CodedOutputStream.newInstance(byteArray32);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder41 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label42 = builder41.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto43 = builder41.buildPartial();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder44 = fieldDescriptorProto43.newBuilderForType();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder45 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto43);
        java.io.File file48 = null;
        java.io.File file49 = java.io.File.createTempFile("hi!", "ISO", file48);
        boolean boolean52 = file49.setWritable(false, false);
        java.net.URI uRI53 = file49.toURI();
        java.io.PrintStream printStream54 = new java.io.PrintStream(file49);
        printStream54.print((int) (byte) 0);
        printStream54.print(10.0d);
        printStream54.close();
        java.lang.String[] strArray63 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet64 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet64, strArray63);
        boolean boolean66 = strSet64.isEmpty();
        java.nio.ByteBuffer byteBuffer68 = java.nio.ByteBuffer.allocate(100);
        boolean boolean69 = strSet64.equals((java.lang.Object) byteBuffer68);
        java.nio.IntBuffer intBuffer70 = byteBuffer68.asIntBuffer();
        double double71 = byteBuffer68.getDouble();
        java.nio.ByteBuffer byteBuffer74 = byteBuffer68.put((int) (short) 1, (byte) 1);
        byte[] byteArray75 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite76 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions77 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray75, extensionRegistryLite76);
        com.google.protobuf.CodedOutputStream codedOutputStream80 = com.google.protobuf.CodedOutputStream.newInstance(byteArray75, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite81 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto82 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray75, extensionRegistryLite81);
        com.google.protobuf.CodedOutputStream codedOutputStream83 = com.google.protobuf.CodedOutputStream.newInstance(byteArray75);
        java.nio.ByteBuffer byteBuffer84 = byteBuffer68.get(byteArray75);
        printStream54.write(byteArray75, (int) '/', (int) (byte) 1);
        java.io.InputStream inputStream88 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite89 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location90 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream88, extensionRegistryLite89);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder91 = builder45.mergeFrom(byteArray75, extensionRegistryLite89);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto92 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray32, extensionRegistryLite89);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder93 = builder30.mergeFrom(inputStream31, extensionRegistryLite89);
        com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange extensionRange94 = com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange.parseFrom(inputStream5, extensionRegistryLite89);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean95 = builder3.mergeDelimitedFrom(inputStream4, extensionRegistryLite89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(enumOptions1);
        org.junit.Assert.assertNotNull(uninterpretedOptionList2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zoneOffset20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(zonedDateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
        org.junit.Assert.assertNotNull(methodOptions34);
        org.junit.Assert.assertNotNull(codedOutputStream37);
        org.junit.Assert.assertNotNull(fileDescriptorProto39);
        org.junit.Assert.assertNotNull(codedOutputStream40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + label42 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label42.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(file49);
        org.junit.Assert.assertEquals(file49.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file49.toString(), "/tmp/hi!3691922920235591569ISO");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(uRI53);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(byteBuffer68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(intBuffer70);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 0.0d + "'", double71 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer74);
        org.junit.Assert.assertNotNull(byteArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray75), "[]");
        org.junit.Assert.assertNotNull(methodOptions77);
        org.junit.Assert.assertNotNull(codedOutputStream80);
        org.junit.Assert.assertNotNull(fileDescriptorProto82);
        org.junit.Assert.assertNotNull(codedOutputStream83);
        org.junit.Assert.assertNotNull(byteBuffer84);
        org.junit.Assert.assertNotNull(extensionRegistryLite89);
        org.junit.Assert.assertNotNull(location90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(fileDescriptorProto92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(extensionRange94);
    }

    @Test
    public void test2944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2944");
        java.io.InputStream inputStream0 = null;
        java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite> priorityMap1 = new java.util.Hashtable<com.google.javascript.jscomp.WarningsGuard.Priority, com.google.protobuf.MessageLite>();
        java.lang.Object obj2 = priorityMap1.clone();
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.newBuilder();
        boolean boolean4 = priorityMap1.containsValue((java.lang.Object) builder3);
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder6 = builder3.setName("java.nio.ByteBufferAsDoubleBufferB[pos=0 lim=12 cap=12]");
        com.google.protobuf.ByteString byteString7 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.Builder builder8 = builder3.mergeFrom(byteString7);
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions9 = com.google.protobuf.DescriptorProtos.EnumValueOptions.getDefaultInstance();
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder10 = com.google.protobuf.DescriptorProtos.EnumValueOptions.newBuilder(enumValueOptions9);
        java.io.InputStream inputStream11 = null;
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder12 = builder10.mergeFrom(inputStream11);
        com.google.protobuf.ByteString byteString13 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto14 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.parseFrom(byteString13);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite15 = null;
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto enumValueDescriptorProto16 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.parseFrom(byteString13, extensionRegistryLite15);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite17 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions18 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteString13, extensionRegistryLite17);
        java.io.InputStream inputStream19 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite20 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location21 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream19, extensionRegistryLite20);
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder22 = builder12.mergeFrom(byteString13, extensionRegistryLite20);
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto23 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.parseFrom(byteString7, extensionRegistryLite20);
        com.google.javascript.jscomp.FunctionInformationMap functionInformationMap24 = com.google.javascript.jscomp.FunctionInformationMap.parseFrom(inputStream0, extensionRegistryLite20);
        int int25 = functionInformationMap24.getModuleCount();
        com.google.javascript.jscomp.FunctionInformationMap.Builder builder26 = functionInformationMap24.toBuilder();
        java.io.InputStream inputStream27 = null;
        com.google.javascript.jscomp.FunctionInformationMap.Builder builder28 = builder26.mergeFrom(inputStream27);
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.jscomp.FunctionInformationMap.Builder builder30 = builder26.removeModule(99);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 99, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "{}");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(byteString7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(enumValueOptions9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(byteString13);
        org.junit.Assert.assertNotNull(methodDescriptorProto14);
        org.junit.Assert.assertNotNull(enumValueDescriptorProto16);
        org.junit.Assert.assertNotNull(methodOptions18);
        org.junit.Assert.assertNotNull(extensionRegistryLite20);
        org.junit.Assert.assertNotNull(location21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(serviceDescriptorProto23);
        org.junit.Assert.assertNotNull(functionInformationMap24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test2945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2945");
        com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder builder0 = com.google.javascript.jscomp.FunctionInformationMap.Entry.newBuilder();
        com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder builder1 = builder0.clearModuleName();
        java.lang.String str2 = builder0.getModuleName();
        boolean boolean3 = builder0.hasId();
        com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder builder5 = builder0.setName("{1572375491}");
        boolean boolean6 = builder5.hasCompiledSource();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test2946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2946");
        long[] longArray5 = new long[] { 97, 57600000000000L, 28147497671065600L, 52, 37 };
        java.nio.LongBuffer longBuffer6 = java.nio.LongBuffer.wrap(longArray5);
        java.nio.LongBuffer longBuffer7 = longBuffer6.asReadOnlyBuffer();
        int int8 = longBuffer6.arrayOffset();
        long[] longArray14 = new long[] { 97, 57600000000000L, 28147497671065600L, 52, 37 };
        java.nio.LongBuffer longBuffer15 = java.nio.LongBuffer.wrap(longArray14);
        int int16 = longBuffer15.arrayOffset();
        int int17 = longBuffer6.compareTo(longBuffer15);
        java.nio.LongBuffer longBuffer18 = longBuffer6.compact();
        java.nio.LongBuffer longBuffer19 = longBuffer6.duplicate();
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[97, 57600000000000, 28147497671065600, 52, 37]");
        org.junit.Assert.assertNotNull(longBuffer6);
        org.junit.Assert.assertNotNull(longBuffer7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[97, 57600000000000, 28147497671065600, 52, 37]");
        org.junit.Assert.assertNotNull(longBuffer15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(longBuffer18);
        org.junit.Assert.assertNotNull(longBuffer19);
    }

    @Test
    public void test2947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2947");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.jstype.ObjectType objectType3 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType4 = jSTypeRegistry2.createObjectType(objectType3);
        com.google.javascript.rhino.ErrorReporter errorReporter5 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry7 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter5, false);
        com.google.javascript.rhino.jstype.ObjectType objectType8 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType9 = jSTypeRegistry7.createObjectType(objectType8);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair10 = objectType4.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType9);
        com.google.javascript.rhino.ErrorReporter errorReporter12 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry14 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter12, false);
        com.google.javascript.rhino.jstype.ObjectType objectType15 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType16 = jSTypeRegistry14.createObjectType(objectType15);
        com.google.javascript.rhino.ErrorReporter errorReporter17 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry19 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter17, false);
        com.google.javascript.rhino.jstype.ObjectType objectType20 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType21 = jSTypeRegistry19.createObjectType(objectType20);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair22 = objectType16.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType21);
        com.google.javascript.rhino.Node node23 = objectType16.getRootNode();
        com.google.javascript.rhino.jstype.EnumType enumType24 = objectType16.toMaybeEnumType();
        com.google.javascript.rhino.Node node28 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean29 = node28.isStringKey();
        boolean boolean30 = node28.isThrow();
        boolean boolean31 = node28.isVarArgs();
        boolean boolean32 = node28.isStringKey();
        boolean boolean33 = objectType9.defineInferredProperty("Unknown class name", (com.google.javascript.rhino.jstype.JSType) objectType16, node28);
        com.google.javascript.rhino.ErrorReporter errorReporter34 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry36 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter34, false);
        com.google.javascript.rhino.jstype.ObjectType objectType37 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType38 = jSTypeRegistry36.createObjectType(objectType37);
        com.google.javascript.rhino.ErrorReporter errorReporter39 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry41 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter39, false);
        com.google.javascript.rhino.jstype.ObjectType objectType42 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType43 = jSTypeRegistry41.createObjectType(objectType42);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair44 = objectType38.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType43);
        com.google.javascript.rhino.ErrorReporter errorReporter46 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry48 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter46, false);
        com.google.javascript.rhino.jstype.ObjectType objectType49 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType50 = jSTypeRegistry48.createObjectType(objectType49);
        com.google.javascript.rhino.ErrorReporter errorReporter51 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry53 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter51, false);
        com.google.javascript.rhino.jstype.ObjectType objectType54 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType55 = jSTypeRegistry53.createObjectType(objectType54);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair56 = objectType50.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType55);
        com.google.javascript.rhino.Node node57 = objectType50.getRootNode();
        com.google.javascript.rhino.jstype.EnumType enumType58 = objectType50.toMaybeEnumType();
        com.google.javascript.rhino.Node node62 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean63 = node62.isStringKey();
        boolean boolean64 = node62.isThrow();
        boolean boolean65 = node62.isVarArgs();
        boolean boolean66 = node62.isStringKey();
        boolean boolean67 = objectType43.defineInferredProperty("Unknown class name", (com.google.javascript.rhino.jstype.JSType) objectType50, node62);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair68 = objectType16.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType43);
        objectType43.clearResolved();
        boolean boolean71 = objectType43.isPropertyInExterns("1970-01-01T00:01:40Z");
        boolean boolean72 = objectType43.isFunctionPrototypeType();
        org.junit.Assert.assertNotNull(objectType4);
        org.junit.Assert.assertNotNull(objectType9);
        org.junit.Assert.assertNotNull(typePair10);
        org.junit.Assert.assertNotNull(objectType16);
        org.junit.Assert.assertNotNull(objectType21);
        org.junit.Assert.assertNotNull(typePair22);
        org.junit.Assert.assertNull(node23);
        org.junit.Assert.assertNull(enumType24);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(objectType38);
        org.junit.Assert.assertNotNull(objectType43);
        org.junit.Assert.assertNotNull(typePair44);
        org.junit.Assert.assertNotNull(objectType50);
        org.junit.Assert.assertNotNull(objectType55);
        org.junit.Assert.assertNotNull(typePair56);
        org.junit.Assert.assertNull(node57);
        org.junit.Assert.assertNull(enumType58);
        org.junit.Assert.assertNotNull(node62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(typePair68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test2948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2948");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        java.lang.String[] strArray4 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet5 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet5, strArray4);
        boolean boolean7 = strSet5.isEmpty();
        java.nio.ByteBuffer byteBuffer9 = java.nio.ByteBuffer.allocate(100);
        boolean boolean10 = strSet5.equals((java.lang.Object) byteBuffer9);
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet15 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet15, strArray14);
        boolean boolean17 = strSet15.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream18 = strSet15.stream();
        boolean boolean19 = strSet5.retainAll((java.util.Collection<java.lang.String>) strSet15);
        compilerOptions0.setExtraAnnotationNames((java.util.Set<java.lang.String>) strSet15);
        compilerOptions0.setTweakToDoubleLiteral("ISO", (double) (short) 1);
        compilerOptions0.setUnaliasableGlobals("{1572375491}");
        compilerOptions0.setGroupVariableDeclarations(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat28 = com.google.javascript.jscomp.ErrorFormat.LEGACY;
        compilerOptions0.errorFormat = errorFormat28;
        compilerOptions0.lineBreak = false;
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strStream18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(errorFormat28);
    }

    @Test
    public void test2949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2949");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        boolean boolean3 = builder0.hasPackage();
        boolean boolean4 = builder0.hasPackage();
        byte[] byteArray5 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite6 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions7 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray5, extensionRegistryLite6);
        com.google.protobuf.CodedOutputStream codedOutputStream10 = com.google.protobuf.CodedOutputStream.newInstance(byteArray5, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite11 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto12 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray5, extensionRegistryLite11);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite13 = null;
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto14 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.parseFrom(byteArray5, extensionRegistryLite13);
        com.google.protobuf.UnknownFieldSet unknownFieldSet15 = com.google.protobuf.UnknownFieldSet.parseFrom(byteArray5);
        com.google.protobuf.Message.Builder builder16 = builder0.setUnknownFields(unknownFieldSet15);
        com.google.protobuf.Message.Builder builder17 = builder0.clone();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(methodOptions7);
        org.junit.Assert.assertNotNull(codedOutputStream10);
        org.junit.Assert.assertNotNull(fileDescriptorProto12);
        org.junit.Assert.assertNotNull(serviceDescriptorProto14);
        org.junit.Assert.assertNotNull(unknownFieldSet15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test2950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2950");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.RFC_1123_DATE_TIME;
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
    }

    @Test
    public void test2951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2951");
        java.time.LocalTime localTime1 = java.time.LocalTime.ofSecondOfDay((long) 8);
        java.time.temporal.ChronoField chronoField2 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.LocalTime localTime4 = localTime1.with((java.time.temporal.TemporalField) chronoField2, (long) 5);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertTrue("'" + chronoField2 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField2.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertNotNull(localTime4);
    }

    @Test
    public void test2952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2952");
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.FileOptions.newBuilder();
        com.google.protobuf.DescriptorProtos.FileOptions fileOptions1 = builder0.getDefaultInstanceForType();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder3 = builder0.setPyGenericServices(false);
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder4 = builder3.clearJavaMultipleFiles();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder6 = builder4.setJavaGenerateEqualsAndHash(false);
        boolean boolean7 = builder6.getPyGenericServices();
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder8 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output10 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream12 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output10, (int) 'a');
        byte[] byteArray13 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite14 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions15 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray13, extensionRegistryLite14);
        output10.write(byteArray13);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder17 = builder8.mergeFrom(byteArray13);
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions18 = builder8.buildPartial();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder19 = builder8.addUninterpretedOptionBuilder();
        boolean boolean20 = builder19.hasNegativeIntValue();
        com.google.protobuf.DescriptorProtos.FileOptions.Builder builder21 = builder6.addUninterpretedOption(builder19);
        boolean boolean22 = builder21.getJavaGenerateEqualsAndHash();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(fileOptions1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(output10);
        org.junit.Assert.assertNotNull(codedOutputStream12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(methodOptions15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(methodOptions18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test2953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2953");
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        boolean boolean6 = strSet4.isEmpty();
        java.nio.ByteBuffer byteBuffer8 = java.nio.ByteBuffer.allocate(100);
        boolean boolean9 = strSet4.equals((java.lang.Object) byteBuffer8);
        java.nio.IntBuffer intBuffer10 = byteBuffer8.asIntBuffer();
        java.nio.IntBuffer intBuffer11 = intBuffer10.duplicate();
        java.nio.IntBuffer intBuffer12 = intBuffer11.duplicate();
        java.nio.IntBuffer intBuffer13 = intBuffer12.duplicate();
        java.nio.IntBuffer intBuffer14 = intBuffer12.duplicate();
        int int15 = intBuffer12.get();
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(intBuffer10);
        org.junit.Assert.assertNotNull(intBuffer11);
        org.junit.Assert.assertNotNull(intBuffer12);
        org.junit.Assert.assertNotNull(intBuffer13);
        org.junit.Assert.assertNotNull(intBuffer14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test2954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2954");
        byte[] byteArray0 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions2 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray0, extensionRegistryLite1);
        com.google.protobuf.CodedOutputStream codedOutputStream5 = com.google.protobuf.CodedOutputStream.newInstance(byteArray0, (int) (short) 0, 1);
        com.google.protobuf.CodedInputStream codedInputStream6 = com.google.protobuf.CodedInputStream.newInstance(byteArray0);
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto7 = com.google.protobuf.DescriptorProtos.DescriptorProto.parseFrom(codedInputStream6);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.ByteString byteString8 = codedInputStream6.readBytes();
            org.junit.Assert.fail("Expected exception of type com.google.protobuf.InvalidProtocolBufferException; message: While parsing a protocol message, the input ended unexpectedly in the middle of a field.  This could mean either than the input has been truncated or that an embedded message misreported its own length.");
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(methodOptions2);
        org.junit.Assert.assertNotNull(codedOutputStream5);
        org.junit.Assert.assertNotNull(codedInputStream6);
        org.junit.Assert.assertNotNull(descriptorProto7);
    }

    @Test
    public void test2955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2955");
        char char0 = java.util.Locale.UNICODE_LOCALE_EXTENSION;
        org.junit.Assert.assertTrue("'" + char0 + "' != '" + 'u' + "'", char0 == 'u');
    }

    @Test
    public void test2956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2956");
        // The following exception was thrown during execution in test generation
        try {
            java.time.Duration duration1 = java.time.Duration.parse((java.lang.CharSequence) "1970-01-01T00:00:00.000000032Z");
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text cannot be parsed to a Duration");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2957");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset4 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset4);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.ofInstant(instant0, (java.time.ZoneId) zoneOffset4);
        java.time.OffsetDateTime offsetDateTime8 = offsetDateTime6.minusDays((long) (short) 100);
        java.lang.String str9 = offsetDateTime6.toString();
        java.time.temporal.ChronoField chronoField10 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        int int11 = offsetDateTime6.get((java.time.temporal.TemporalField) chronoField10);
        java.time.OffsetDateTime offsetDateTime13 = offsetDateTime6.plusWeeks((long) 100);
        java.time.temporal.ChronoField chronoField14 = java.time.temporal.ChronoField.OFFSET_SECONDS;
        java.time.temporal.TemporalUnit temporalUnit15 = chronoField14.getRangeUnit();
        long long17 = chronoField14.checkValidValue((long) 2);
        long long18 = offsetDateTime13.getLong((java.time.temporal.TemporalField) chronoField14);
        java.time.OffsetDateTime offsetDateTime20 = offsetDateTime13.plusSeconds((long) 152);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(zoneOffset4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(offsetDateTime8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-01T00:00:52+00:00:52" + "'", str9, "1970-01-01T00:00:52+00:00:52");
        org.junit.Assert.assertTrue("'" + chronoField10 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField10.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 12 + "'", int11 == 12);
        org.junit.Assert.assertNotNull(offsetDateTime13);
        org.junit.Assert.assertTrue("'" + chronoField14 + "' != '" + java.time.temporal.ChronoField.OFFSET_SECONDS + "'", chronoField14.equals(java.time.temporal.ChronoField.OFFSET_SECONDS));
        org.junit.Assert.assertTrue("'" + temporalUnit15 + "' != '" + java.time.temporal.ChronoUnit.FOREVER + "'", temporalUnit15.equals(java.time.temporal.ChronoUnit.FOREVER));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2L + "'", long17 == 2L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 52L + "'", long18 == 52L);
        org.junit.Assert.assertNotNull(offsetDateTime20);
    }

    @Test
    public void test2958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2958");
        java.security.cert.CertificateEncodingException certificateEncodingException0 = new java.security.cert.CertificateEncodingException();
        java.security.cert.CertificateException certificateException1 = new java.security.cert.CertificateException((java.lang.Throwable) certificateEncodingException0);
        java.lang.String str2 = certificateEncodingException0.toString();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.security.cert.CertificateEncodingException" + "'", str2, "java.security.cert.CertificateEncodingException");
    }

    @Test
    public void test2959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2959");
        com.google.javascript.jscomp.SourceAst sourceAst0 = null;
        com.google.javascript.rhino.InputId inputId1 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput3 = new com.google.javascript.jscomp.CompilerInput(sourceAst0, inputId1, true);
        com.google.javascript.rhino.InputId inputId4 = compilerInput3.getInputId();
        com.google.javascript.jscomp.SourceAst sourceAst5 = null;
        com.google.javascript.rhino.InputId inputId6 = null;
        com.google.javascript.jscomp.CompilerInput compilerInput8 = new com.google.javascript.jscomp.CompilerInput(sourceAst5, inputId6, true);
        java.io.PrintStream printStream9 = null;
        com.google.javascript.jscomp.Compiler compiler10 = new com.google.javascript.jscomp.Compiler(printStream9);
        com.google.javascript.jscomp.ErrorManager errorManager11 = compiler10.getErrorManager();
        compilerInput8.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler10);
        com.google.javascript.jscomp.Scope scope13 = compiler10.getTopScope();
        compilerInput3.setCompiler((com.google.javascript.jscomp.AbstractCompiler) compiler10);
        com.google.javascript.jscomp.CompilerOptions compilerOptions18 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions18.optimizeCalls = false;
        compilerOptions18.preferLineBreakAtEndOfFile = false;
        boolean boolean23 = compilerOptions18.markNoSideEffectCalls;
        boolean boolean24 = compilerOptions18.labelRenaming;
        com.google.javascript.jscomp.DependencyOptions dependencyOptions25 = new com.google.javascript.jscomp.DependencyOptions();
        java.lang.String[] strArray29 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet30 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet30, strArray29);
        boolean boolean32 = strSet30.isEmpty();
        java.nio.ByteBuffer byteBuffer34 = java.nio.ByteBuffer.allocate(100);
        boolean boolean35 = strSet30.equals((java.lang.Object) byteBuffer34);
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet40 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet40, strArray39);
        boolean boolean42 = strSet40.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream43 = strSet40.stream();
        boolean boolean44 = strSet30.retainAll((java.util.Collection<java.lang.String>) strSet40);
        com.google.javascript.jscomp.DependencyOptions dependencyOptions45 = dependencyOptions25.setEntryPoints((java.util.Collection<java.lang.String>) strSet30);
        compilerOptions18.setDependencyOptions(dependencyOptions25);
        com.google.javascript.jscomp.CheckLevel checkLevel47 = compilerOptions18.checkGlobalThisLevel;
        com.google.javascript.jscomp.DiagnosticType diagnosticType48 = com.google.javascript.jscomp.Compiler.MOTION_ITERATIONS_ERROR;
        java.lang.String[] strArray49 = null;
        com.google.javascript.jscomp.JSError jSError50 = com.google.javascript.jscomp.JSError.make("goog.abstractMethod", 37, (int) (byte) -1, checkLevel47, diagnosticType48, strArray49);
        int int51 = jSError50.getNodeLength();
        java.lang.String str52 = jSError50.description;
        compiler10.report(jSError50);
        com.google.javascript.jscomp.CompilerOptions compilerOptions54 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions54.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat57 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions54.errorFormat = errorFormat57;
        compilerOptions54.setPropertyAffinity(true);
        compilerOptions54.aliasStringsBlacklist = "1970-01-01+00:00:52";
        com.google.javascript.jscomp.CheckLevel checkLevel63 = compilerOptions54.checkProvides;
        com.google.javascript.jscomp.ErrorFormat errorFormat64 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        java.io.PrintStream printStream65 = null;
        com.google.javascript.jscomp.Compiler compiler66 = new com.google.javascript.jscomp.Compiler(printStream65);
        com.google.javascript.jscomp.ErrorManager errorManager67 = compiler66.getErrorManager();
        com.google.javascript.jscomp.MessageFormatter messageFormatter69 = errorFormat64.toFormatter((com.google.javascript.jscomp.SourceExcerptProvider) compiler66, false);
        java.lang.String str70 = jSError50.format(checkLevel63, messageFormatter69);
        org.junit.Assert.assertNull(inputId4);
        org.junit.Assert.assertNotNull(errorManager11);
        org.junit.Assert.assertNull(scope13);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strStream43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dependencyOptions45);
        org.junit.Assert.assertTrue("'" + checkLevel47 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel47.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(diagnosticType48);
        org.junit.Assert.assertNotNull(jSError50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Exceeded max number of code motion iterations: {0}" + "'", str52, "Exceeded max number of code motion iterations: {0}");
        org.junit.Assert.assertNotNull(errorFormat57);
        org.junit.Assert.assertTrue("'" + checkLevel63 + "' != '" + com.google.javascript.jscomp.CheckLevel.OFF + "'", checkLevel63.equals(com.google.javascript.jscomp.CheckLevel.OFF));
        org.junit.Assert.assertNotNull(errorFormat64);
        org.junit.Assert.assertNotNull(errorManager67);
        org.junit.Assert.assertNotNull(messageFormatter69);
        org.junit.Assert.assertNull(str70);
    }

    @Test
    public void test2960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2960");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        int int5 = localDateTime4.getYear();
        java.time.LocalDate localDate6 = localDateTime4.toLocalDate();
        java.time.LocalDate localDate8 = localDate6.plusDays((long) '#');
        java.time.LocalDate localDate9 = java.time.LocalDate.now();
        java.time.chrono.ChronoPeriod chronoPeriod10 = localDate6.until((java.time.chrono.ChronoLocalDate) localDate9);
        java.time.chrono.Chronology chronology11 = java.time.chrono.Chronology.from((java.time.temporal.TemporalAccessor) localDate9);
        java.time.Instant instant12 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset16);
        java.time.ZoneOffset zoneOffset21 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset21);
        java.time.ZonedDateTime zonedDateTime23 = java.time.ZonedDateTime.of(localDateTime17, (java.time.ZoneId) zoneOffset21);
        java.time.temporal.ChronoField chronoField25 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit26 = chronoField25.getBaseUnit();
        java.time.LocalDateTime localDateTime27 = localDateTime17.plus((long) 1970, temporalUnit26);
        java.time.LocalDateTime localDateTime29 = localDateTime17.withHour((int) (short) 1);
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.OffsetDateTime offsetDateTime32 = java.time.OffsetDateTime.of(localDateTime17, zoneOffset31);
        java.time.OffsetTime offsetTime33 = java.time.OffsetTime.ofInstant(instant12, (java.time.ZoneId) zoneOffset31);
        java.time.Instant instant34 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset38 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime39 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset38);
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime44 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset43);
        java.time.ZonedDateTime zonedDateTime45 = java.time.ZonedDateTime.of(localDateTime39, (java.time.ZoneId) zoneOffset43);
        java.time.temporal.ChronoField chronoField47 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit48 = chronoField47.getBaseUnit();
        java.time.LocalDateTime localDateTime49 = localDateTime39.plus((long) 1970, temporalUnit48);
        java.time.LocalDateTime localDateTime51 = localDateTime39.withHour((int) (short) 1);
        java.time.ZoneOffset zoneOffset53 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.OffsetDateTime offsetDateTime54 = java.time.OffsetDateTime.of(localDateTime39, zoneOffset53);
        java.time.OffsetTime offsetTime55 = java.time.OffsetTime.ofInstant(instant34, (java.time.ZoneId) zoneOffset53);
        boolean boolean56 = offsetTime33.isAfter(offsetTime55);
        java.time.OffsetDateTime offsetDateTime57 = localDate9.atTime(offsetTime33);
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetDateTime offsetDateTime59 = offsetDateTime57.minusYears(946598400000L);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for Year (valid values -999999999 - 999999999): -946598397978");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronoPeriod10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(zonedDateTime23);
        org.junit.Assert.assertTrue("'" + chronoField25 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField25.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit26 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit26.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertNotNull(offsetTime33);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(zoneOffset38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(zonedDateTime45);
        org.junit.Assert.assertTrue("'" + chronoField47 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField47.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit48 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit48.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(zoneOffset53);
        org.junit.Assert.assertNotNull(offsetDateTime54);
        org.junit.Assert.assertNotNull(offsetTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(offsetDateTime57);
    }

    @Test
    public void test2961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2961");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo sourceCodeInfo2 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.parseFrom(inputStream0, extensionRegistryLite1);
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder3 = sourceCodeInfo2.newBuilderForType();
        com.google.protobuf.UnknownFieldSet unknownFieldSet4 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder5 = builder3.setUnknownFields(unknownFieldSet4);
        java.util.Map<com.google.protobuf.Descriptors.FieldDescriptor, java.lang.Object> fieldDescriptorMap6 = builder3.getAllFields();
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder8 = builder3.removeLocation(97);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 97, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(sourceCodeInfo2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(fieldDescriptorMap6);
    }

    @Test
    public void test2962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2962");
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder2 = builder0.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder3 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label4 = builder3.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder5 = builder0.addExtension(builder3);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder6 = builder0.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder7 = builder6.getOptionsBuilder();
        java.lang.String str8 = builder6.getName();
        byte[] byteArray9 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite10 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions11 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray9, extensionRegistryLite10);
        com.google.protobuf.CodedOutputStream codedOutputStream14 = com.google.protobuf.CodedOutputStream.newInstance(byteArray9, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite15 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto16 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray9, extensionRegistryLite15);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite17 = null;
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto18 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.parseFrom(byteArray9, extensionRegistryLite17);
        com.google.protobuf.UnknownFieldSet unknownFieldSet19 = com.google.protobuf.UnknownFieldSet.parseFrom(byteArray9);
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto20 = com.google.protobuf.DescriptorProtos.DescriptorProto.parseFrom(byteArray9);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder21 = builder6.mergeFrom(byteArray9);
        byte[] byteArray22 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite23 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions24 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray22, extensionRegistryLite23);
        com.google.protobuf.CodedInputStream codedInputStream27 = com.google.protobuf.CodedInputStream.newInstance(byteArray22, 16, (int) 'a');
        com.google.protobuf.CodedInputStream codedInputStream30 = com.google.protobuf.CodedInputStream.newInstance(byteArray22, 0, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder31 = builder6.mergeFrom(codedInputStream30);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + label4 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label4.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[]");
        org.junit.Assert.assertNotNull(methodOptions11);
        org.junit.Assert.assertNotNull(codedOutputStream14);
        org.junit.Assert.assertNotNull(fileDescriptorProto16);
        org.junit.Assert.assertNotNull(serviceDescriptorProto18);
        org.junit.Assert.assertNotNull(unknownFieldSet19);
        org.junit.Assert.assertNotNull(descriptorProto20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(methodOptions24);
        org.junit.Assert.assertNotNull(codedInputStream27);
        org.junit.Assert.assertNotNull(codedInputStream30);
    }

    @Test
    public void test2963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2963");
        byte[] byteArray0 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions2 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray0, extensionRegistryLite1);
        com.google.protobuf.CodedOutputStream codedOutputStream5 = com.google.protobuf.CodedOutputStream.newInstance(byteArray0, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite6 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto7 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray0, extensionRegistryLite6);
        com.google.protobuf.CodedOutputStream codedOutputStream8 = com.google.protobuf.CodedOutputStream.newInstance(byteArray0);
        // The following exception was thrown during execution in test generation
        try {
            codedOutputStream8.writeRawVarint64((long) (-2));
            org.junit.Assert.fail("Expected exception of type com.google.protobuf.CodedOutputStream.OutOfSpaceException; message: CodedOutputStream was writing to a flat byte array and ran out of space.");
        } catch (com.google.protobuf.CodedOutputStream.OutOfSpaceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(methodOptions2);
        org.junit.Assert.assertNotNull(codedOutputStream5);
        org.junit.Assert.assertNotNull(fileDescriptorProto7);
        org.junit.Assert.assertNotNull(codedOutputStream8);
    }

    @Test
    public void test2964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2964");
        byte[] byteArray0 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions2 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray0, extensionRegistryLite1);
        com.google.protobuf.CodedOutputStream codedOutputStream5 = com.google.protobuf.CodedOutputStream.newInstance(byteArray0, (int) (short) 0, 1);
        com.google.protobuf.CodedInputStream codedInputStream6 = com.google.protobuf.CodedInputStream.newInstance(byteArray0);
        // The following exception was thrown during execution in test generation
        try {
            int int7 = codedInputStream6.readSInt32();
            org.junit.Assert.fail("Expected exception of type com.google.protobuf.InvalidProtocolBufferException; message: While parsing a protocol message, the input ended unexpectedly in the middle of a field.  This could mean either than the input has been truncated or that an embedded message misreported its own length.");
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(methodOptions2);
        org.junit.Assert.assertNotNull(codedOutputStream5);
        org.junit.Assert.assertNotNull(codedInputStream6);
    }

    @Test
    public void test2965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2965");
        java.util.stream.IntStream intStream2 = java.util.stream.IntStream.rangeClosed((int) (short) 10, 365);
        org.junit.Assert.assertNotNull(intStream2);
    }

    @Test
    public void test2966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2966");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer3 = charBuffer1.put('a');
        char[] charArray5 = new char[] { '4' };
        java.nio.CharBuffer charBuffer6 = charBuffer3.get(charArray5);
        java.nio.CharBuffer charBuffer8 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer10 = charBuffer8.put('a');
        char[] charArray12 = new char[] { '4' };
        java.nio.CharBuffer charBuffer13 = charBuffer10.get(charArray12);
        java.nio.CharBuffer charBuffer14 = charBuffer3.put(charArray12);
        java.nio.CharBuffer charBuffer16 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer18 = charBuffer16.put('a');
        char[] charArray20 = new char[] { '4' };
        java.nio.CharBuffer charBuffer21 = charBuffer18.get(charArray20);
        java.nio.CharBuffer charBuffer23 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer25 = charBuffer23.put('a');
        char[] charArray27 = new char[] { '4' };
        java.nio.CharBuffer charBuffer28 = charBuffer25.get(charArray27);
        java.nio.CharBuffer charBuffer29 = charBuffer18.put(charArray27);
        java.nio.CharBuffer charBuffer30 = charBuffer18.slice();
        char[] charArray35 = new char[] { '#', ' ', ':', ' ' };
        java.nio.CharBuffer charBuffer36 = java.nio.CharBuffer.wrap(charArray35);
        java.nio.CharBuffer charBuffer37 = charBuffer30.get(charArray35);
        java.nio.CharBuffer charBuffer39 = charBuffer30.put('a');
        java.nio.CharBuffer charBuffer41 = java.nio.CharBuffer.allocate((int) ' ');
        boolean boolean42 = charBuffer41.isDirect();
        java.nio.CharBuffer charBuffer44 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer46 = charBuffer44.put('a');
        char[] charArray48 = new char[] { '4' };
        java.nio.CharBuffer charBuffer49 = charBuffer46.get(charArray48);
        java.nio.CharBuffer charBuffer50 = charBuffer46.compact();
        java.nio.CharBuffer charBuffer52 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer54 = charBuffer52.put('a');
        java.nio.CharBuffer charBuffer56 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer58 = charBuffer56.put('a');
        char[] charArray60 = new char[] { '4' };
        java.nio.CharBuffer charBuffer61 = charBuffer58.get(charArray60);
        java.nio.CharBuffer charBuffer62 = charBuffer58.compact();
        com.google.common.collect.ImmutableSet<java.lang.Appendable> appendableSet63 = com.google.common.collect.ImmutableSet.of((java.lang.Appendable) charBuffer41, (java.lang.Appendable) charBuffer46, (java.lang.Appendable) charBuffer52, (java.lang.Appendable) charBuffer62);
        boolean boolean64 = charBuffer62.isDirect();
        char[] charArray65 = charBuffer62.array();
        java.nio.CharBuffer charBuffer67 = java.nio.CharBuffer.allocate((int) ' ');
        boolean boolean68 = charBuffer67.isDirect();
        java.nio.CharBuffer charBuffer70 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer72 = charBuffer70.put('a');
        char[] charArray74 = new char[] { '4' };
        java.nio.CharBuffer charBuffer75 = charBuffer72.get(charArray74);
        java.nio.CharBuffer charBuffer76 = charBuffer72.compact();
        java.nio.CharBuffer charBuffer78 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer80 = charBuffer78.put('a');
        java.nio.CharBuffer charBuffer82 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer84 = charBuffer82.put('a');
        char[] charArray86 = new char[] { '4' };
        java.nio.CharBuffer charBuffer87 = charBuffer84.get(charArray86);
        java.nio.CharBuffer charBuffer88 = charBuffer84.compact();
        com.google.common.collect.ImmutableSet<java.lang.Appendable> appendableSet89 = com.google.common.collect.ImmutableSet.of((java.lang.Appendable) charBuffer67, (java.lang.Appendable) charBuffer72, (java.lang.Appendable) charBuffer78, (java.lang.Appendable) charBuffer88);
        boolean boolean90 = charBuffer88.isDirect();
        int int91 = charBuffer62.read(charBuffer88);
        char[] charArray92 = new char[] {};
        java.nio.CharBuffer charBuffer93 = charBuffer62.get(charArray92);
        java.nio.ByteOrder byteOrder94 = charBuffer62.order();
        java.nio.CharBuffer charBuffer95 = charBuffer30.append((java.lang.CharSequence) charBuffer62);
        int int96 = charBuffer3.read(charBuffer30);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.CharBuffer charBuffer98 = charBuffer3.put("NUMBER 52.0 0 (hi!)");
            org.junit.Assert.fail("Expected exception of type java.nio.BufferOverflowException; message: null");
        } catch (java.nio.BufferOverflowException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(charBuffer3);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(charBuffer8);
        org.junit.Assert.assertNotNull(charBuffer10);
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer13);
        org.junit.Assert.assertNotNull(charBuffer14);
        org.junit.Assert.assertNotNull(charBuffer16);
        org.junit.Assert.assertNotNull(charBuffer18);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer21);
        org.junit.Assert.assertNotNull(charBuffer23);
        org.junit.Assert.assertNotNull(charBuffer25);
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer28);
        org.junit.Assert.assertNotNull(charBuffer29);
        org.junit.Assert.assertNotNull(charBuffer30);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[\000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(charBuffer36);
        org.junit.Assert.assertNotNull(charBuffer37);
        org.junit.Assert.assertNotNull(charBuffer39);
        org.junit.Assert.assertNotNull(charBuffer41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(charBuffer44);
        org.junit.Assert.assertNotNull(charBuffer46);
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray48), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray48), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray48), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer49);
        org.junit.Assert.assertNotNull(charBuffer50);
        org.junit.Assert.assertNotNull(charBuffer52);
        org.junit.Assert.assertNotNull(charBuffer54);
        org.junit.Assert.assertNotNull(charBuffer56);
        org.junit.Assert.assertNotNull(charBuffer58);
        org.junit.Assert.assertNotNull(charArray60);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray60), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray60), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray60), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer61);
        org.junit.Assert.assertNotNull(charBuffer62);
        org.junit.Assert.assertNotNull(appendableSet63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(charArray65);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray65), "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray65), "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray65), "[\000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000, \000]");
        org.junit.Assert.assertNotNull(charBuffer67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(charBuffer70);
        org.junit.Assert.assertNotNull(charBuffer72);
        org.junit.Assert.assertNotNull(charArray74);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray74), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray74), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray74), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer75);
        org.junit.Assert.assertNotNull(charBuffer76);
        org.junit.Assert.assertNotNull(charBuffer78);
        org.junit.Assert.assertNotNull(charBuffer80);
        org.junit.Assert.assertNotNull(charBuffer82);
        org.junit.Assert.assertNotNull(charBuffer84);
        org.junit.Assert.assertNotNull(charArray86);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray86), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray86), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray86), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer87);
        org.junit.Assert.assertNotNull(charBuffer88);
        org.junit.Assert.assertNotNull(appendableSet89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 2 + "'", int91 == 2);
        org.junit.Assert.assertNotNull(charArray92);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray92), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray92), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray92), "[]");
        org.junit.Assert.assertNotNull(charBuffer93);
        org.junit.Assert.assertNotNull(byteOrder94);
        org.junit.Assert.assertNotNull(charBuffer95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 24 + "'", int96 == 24);
    }

    @Test
    public void test2967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2967");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo sourceCodeInfo2 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.parseFrom(inputStream0, extensionRegistryLite1);
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder3 = sourceCodeInfo2.newBuilderForType();
        com.google.protobuf.UnknownFieldSet unknownFieldSet4 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder5 = builder3.setUnknownFields(unknownFieldSet4);
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.Builder builder7 = builder3.addLocationBuilder(0);
        java.io.File file10 = null;
        java.io.File file11 = java.io.File.createTempFile("hi!", "ISO", file10);
        boolean boolean14 = file11.setWritable(false, false);
        java.net.URI uRI15 = file11.toURI();
        java.io.PrintStream printStream16 = new java.io.PrintStream(file11);
        printStream16.print((int) (byte) 0);
        printStream16.print(10.0d);
        printStream16.close();
        java.lang.String[] strArray25 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet26 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet26, strArray25);
        boolean boolean28 = strSet26.isEmpty();
        java.nio.ByteBuffer byteBuffer30 = java.nio.ByteBuffer.allocate(100);
        boolean boolean31 = strSet26.equals((java.lang.Object) byteBuffer30);
        java.nio.IntBuffer intBuffer32 = byteBuffer30.asIntBuffer();
        double double33 = byteBuffer30.getDouble();
        java.nio.ByteBuffer byteBuffer36 = byteBuffer30.put((int) (short) 1, (byte) 1);
        byte[] byteArray37 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite38 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions39 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray37, extensionRegistryLite38);
        com.google.protobuf.CodedOutputStream codedOutputStream42 = com.google.protobuf.CodedOutputStream.newInstance(byteArray37, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite43 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto44 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray37, extensionRegistryLite43);
        com.google.protobuf.CodedOutputStream codedOutputStream45 = com.google.protobuf.CodedOutputStream.newInstance(byteArray37);
        java.nio.ByteBuffer byteBuffer46 = byteBuffer30.get(byteArray37);
        printStream16.write(byteArray37, (int) '/', (int) (byte) 1);
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.Builder builder50 = builder7.mergeFrom(byteArray37);
        int int51 = builder50.getPathCount();
        com.google.protobuf.Descriptors.Descriptor descriptor52 = builder50.getDescriptorForType();
        // The following exception was thrown during execution in test generation
        try {
            int int54 = builder50.getSpan(407);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 407");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(sourceCodeInfo2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(file11);
        org.junit.Assert.assertEquals(file11.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file11.toString(), "/tmp/hi!2337928663849998305ISO");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(uRI15);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(intBuffer32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[]");
        org.junit.Assert.assertNotNull(methodOptions39);
        org.junit.Assert.assertNotNull(codedOutputStream42);
        org.junit.Assert.assertNotNull(fileDescriptorProto44);
        org.junit.Assert.assertNotNull(codedOutputStream45);
        org.junit.Assert.assertNotNull(byteBuffer46);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(descriptor52);
    }

    @Test
    public void test2968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2968");
        com.google.javascript.jscomp.SourceFile.Generator generator1 = null;
        com.google.javascript.jscomp.SourceFile sourceFile2 = com.google.javascript.jscomp.SourceFile.fromGenerator("hi!", generator1);
        // The following exception was thrown during execution in test generation
        try {
            int int4 = sourceFile2.getColumnOfOffset((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(sourceFile2);
    }

    @Test
    public void test2969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2969");
        java.util.Date date3 = new java.util.Date((int) (byte) -1, 43, 16384);
        date3.setSeconds(4);
        int int6 = date3.getMinutes();
        org.junit.Assert.assertEquals(date3.toString(), "Mon Jun 09 00:00:04 UTC 1947");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test2970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2970");
        byte[] byteArray0 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions2 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray0, extensionRegistryLite1);
        com.google.protobuf.CodedOutputStream codedOutputStream5 = com.google.protobuf.CodedOutputStream.newInstance(byteArray0, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite6 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto7 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray0, extensionRegistryLite6);
        boolean boolean8 = fileDescriptorProto7.hasOptions();
        com.google.protobuf.DescriptorProtos.FileOptionsOrBuilder fileOptionsOrBuilder9 = fileDescriptorProto7.getOptionsOrBuilder();
        boolean boolean10 = fileDescriptorProto7.hasSourceCodeInfo();
        com.google.protobuf.DescriptorProtos.FileOptions fileOptions11 = fileDescriptorProto7.getOptions();
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.EnumDescriptorProto enumDescriptorProto13 = fileDescriptorProto7.getEnumType((int) ':');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 58");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(methodOptions2);
        org.junit.Assert.assertNotNull(codedOutputStream5);
        org.junit.Assert.assertNotNull(fileDescriptorProto7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(fileOptionsOrBuilder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(fileOptions11);
    }

    @Test
    public void test2971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2971");
        com.google.protobuf.DescriptorProtos.UninterpretedOption.NamePart namePart0 = com.google.protobuf.DescriptorProtos.UninterpretedOption.NamePart.getDefaultInstance();
        boolean boolean1 = namePart0.hasIsExtension();
        boolean boolean2 = namePart0.hasIsExtension();
        org.junit.Assert.assertNotNull(namePart0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test2972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2972");
        java.lang.String[] strArray3 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        boolean boolean6 = strSet4.isEmpty();
        java.nio.ByteBuffer byteBuffer8 = java.nio.ByteBuffer.allocate(100);
        boolean boolean9 = strSet4.equals((java.lang.Object) byteBuffer8);
        java.nio.IntBuffer intBuffer10 = byteBuffer8.asIntBuffer();
        double double11 = byteBuffer8.getDouble();
        java.nio.ByteBuffer byteBuffer12 = byteBuffer8.asReadOnlyBuffer();
        short short14 = byteBuffer8.getShort((int) (byte) 10);
        java.nio.ByteBuffer byteBuffer15 = byteBuffer8.asReadOnlyBuffer();
        com.google.protobuf.ByteString byteString16 = com.google.protobuf.ByteString.copyFrom(byteBuffer8);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(byteBuffer8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(intBuffer10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer12);
        org.junit.Assert.assertTrue("'" + short14 + "' != '" + (short) 0 + "'", short14 == (short) 0);
        org.junit.Assert.assertNotNull(byteBuffer15);
        org.junit.Assert.assertNotNull(byteString16);
    }

    @Test
    public void test2973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2973");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        com.google.javascript.rhino.jstype.ObjectType objectType6 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType7 = jSTypeRegistry5.createObjectType(objectType6);
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.jstype.ObjectType objectType11 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType12 = jSTypeRegistry10.createObjectType(objectType11);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair13 = objectType7.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType12);
        java.lang.String str14 = objectType12.getDisplayName();
        java.util.Collection<com.google.javascript.rhino.jstype.FunctionType> functionTypeCollection15 = jSTypeRegistry2.getDirectImplementors(objectType12);
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable17 = jSTypeRegistry2.getEachReferenceTypeWithProperty("+00:00:52");
        jSTypeRegistry2.resetForTypeCheck();
        com.google.javascript.rhino.ErrorReporter errorReporter19 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry21 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter19, false);
        com.google.javascript.rhino.jstype.ObjectType objectType22 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType23 = jSTypeRegistry21.createObjectType(objectType22);
        jSTypeRegistry21.forwardDeclareType("");
        com.google.javascript.rhino.ErrorReporter errorReporter26 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry28 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter26, false);
        com.google.javascript.rhino.jstype.ObjectType objectType29 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType30 = jSTypeRegistry28.createObjectType(objectType29);
        com.google.javascript.rhino.ErrorReporter errorReporter31 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry33 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter31, false);
        com.google.javascript.rhino.jstype.ObjectType objectType34 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType35 = jSTypeRegistry33.createObjectType(objectType34);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair36 = objectType30.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType35);
        com.google.javascript.rhino.Node node37 = objectType30.getRootNode();
        com.google.javascript.rhino.ErrorReporter errorReporter38 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry40 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter38, false);
        com.google.javascript.rhino.jstype.ObjectType objectType41 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType42 = jSTypeRegistry40.createObjectType(objectType41);
        com.google.javascript.rhino.ErrorReporter errorReporter43 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry45 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter43, false);
        com.google.javascript.rhino.jstype.ObjectType objectType46 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType47 = jSTypeRegistry45.createObjectType(objectType46);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair48 = objectType42.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType47);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue49 = objectType30.testForEquality((com.google.javascript.rhino.jstype.JSType) objectType42);
        com.google.javascript.rhino.jstype.JSType jSType50 = jSTypeRegistry21.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType30);
        com.google.javascript.rhino.jstype.JSType jSType51 = jSTypeRegistry2.createOptionalNullableType((com.google.javascript.rhino.jstype.JSType) objectType30);
        org.junit.Assert.assertNotNull(objectType7);
        org.junit.Assert.assertNotNull(objectType12);
        org.junit.Assert.assertNotNull(typePair13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(functionTypeCollection15);
        org.junit.Assert.assertNotNull(objectTypeIterable17);
        org.junit.Assert.assertNotNull(objectType23);
        org.junit.Assert.assertNotNull(objectType30);
        org.junit.Assert.assertNotNull(objectType35);
        org.junit.Assert.assertNotNull(typePair36);
        org.junit.Assert.assertNull(node37);
        org.junit.Assert.assertNotNull(objectType42);
        org.junit.Assert.assertNotNull(objectType47);
        org.junit.Assert.assertNotNull(typePair48);
        org.junit.Assert.assertNotNull(ternaryValue49);
        org.junit.Assert.assertNotNull(jSType50);
        org.junit.Assert.assertNotNull(jSType51);
    }

    @Test
    public void test2974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2974");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) ' ');
        boolean boolean2 = charBuffer1.isDirect();
        java.nio.CharBuffer charBuffer4 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer6 = charBuffer4.put('a');
        char[] charArray8 = new char[] { '4' };
        java.nio.CharBuffer charBuffer9 = charBuffer6.get(charArray8);
        java.nio.CharBuffer charBuffer10 = charBuffer6.compact();
        java.nio.CharBuffer charBuffer12 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer14 = charBuffer12.put('a');
        java.nio.CharBuffer charBuffer16 = java.nio.CharBuffer.allocate((int) ' ');
        java.nio.CharBuffer charBuffer18 = charBuffer16.put('a');
        char[] charArray20 = new char[] { '4' };
        java.nio.CharBuffer charBuffer21 = charBuffer18.get(charArray20);
        java.nio.CharBuffer charBuffer22 = charBuffer18.compact();
        com.google.common.collect.ImmutableSet<java.lang.Appendable> appendableSet23 = com.google.common.collect.ImmutableSet.of((java.lang.Appendable) charBuffer1, (java.lang.Appendable) charBuffer6, (java.lang.Appendable) charBuffer12, (java.lang.Appendable) charBuffer22);
        java.time.ZoneOffset zoneOffset27 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset27);
        int int29 = localDateTime28.getYear();
        java.time.Instant instant30 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset34);
        java.time.OffsetDateTime offsetDateTime36 = java.time.OffsetDateTime.ofInstant(instant30, (java.time.ZoneId) zoneOffset34);
        java.time.Instant instant37 = localDateTime28.toInstant(zoneOffset34);
        boolean boolean38 = appendableSet23.equals((java.lang.Object) zoneOffset34);
        java.lang.Object[] objArray39 = appendableSet23.toArray();
        java.util.concurrent.TimeUnit timeUnit40 = java.util.concurrent.TimeUnit.HOURS;
        boolean boolean41 = appendableSet23.contains((java.lang.Object) timeUnit40);
        com.google.common.collect.ImmutableList<java.lang.Appendable> appendableList42 = appendableSet23.asList();
        com.google.common.collect.UnmodifiableIterator<java.lang.Appendable> appendableItor43 = appendableSet23.iterator();
        java.lang.Object[] objArray44 = appendableSet23.toArray();
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(charBuffer4);
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer9);
        org.junit.Assert.assertNotNull(charBuffer10);
        org.junit.Assert.assertNotNull(charBuffer12);
        org.junit.Assert.assertNotNull(charBuffer14);
        org.junit.Assert.assertNotNull(charBuffer16);
        org.junit.Assert.assertNotNull(charBuffer18);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "\000");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "\000");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[\000]");
        org.junit.Assert.assertNotNull(charBuffer21);
        org.junit.Assert.assertNotNull(charBuffer22);
        org.junit.Assert.assertNotNull(appendableSet23);
        org.junit.Assert.assertNotNull(zoneOffset27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1970 + "'", int29 == 1970);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(offsetDateTime36);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000, \000\000, \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000, \000\000, \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000]");
        org.junit.Assert.assertNotNull(timeUnit40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(appendableList42);
        org.junit.Assert.assertNotNull(appendableItor43);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000, \000\000, \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000, \000\000, \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000]");
    }

    @Test
    public void test2975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2975");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder0 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label1 = builder0.getLabel();
        java.io.InputStream inputStream2 = null;
        com.google.protobuf.MessageLite.Builder builder3 = builder0.mergeFrom(inputStream2);
        com.google.protobuf.UnknownFieldSet unknownFieldSet4 = null;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder5 = builder0.setUnknownFields(unknownFieldSet4);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder6 = builder5.clear();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder7 = builder6.clear();
        java.io.InputStream inputStream8 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder9 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder11 = builder9.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder12 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label13 = builder12.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder14 = builder9.addExtension(builder12);
        boolean boolean15 = builder12.hasDefaultValue();
        java.io.InputStream inputStream16 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite17 = null;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder18 = builder12.mergeFrom(inputStream16, extensionRegistryLite17);
        java.io.InputStream inputStream19 = null;
        java.io.InputStream inputStream20 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite21 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location22 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream20, extensionRegistryLite21);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder23 = builder18.mergeFrom(inputStream19, extensionRegistryLite21);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean24 = builder7.mergeDelimitedFrom(inputStream8, extensionRegistryLite21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + label1 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label1.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + label13 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label13.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(extensionRegistryLite21);
        org.junit.Assert.assertNotNull(location22);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test2976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2976");
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap0 = java.nio.charset.Charset.availableCharsets();
        java.net.URISyntaxException uRISyntaxException3 = new java.net.URISyntaxException("hi!", "");
        boolean boolean4 = strMap0.containsKey((java.lang.Object) "");
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap5 = java.nio.charset.Charset.availableCharsets();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean10 = strMap5.containsValue((java.lang.Object) '4');
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap11 = java.nio.charset.Charset.availableCharsets();
        java.net.URISyntaxException uRISyntaxException14 = new java.net.URISyntaxException("hi!", "");
        boolean boolean15 = strMap11.containsKey((java.lang.Object) "");
        int int16 = strMap11.size();
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap17 = java.nio.charset.Charset.availableCharsets();
        java.util.Set<java.lang.String> strSet18 = strMap17.keySet();
        java.util.Set<java.lang.String> strSet19 = strMap17.keySet();
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap20 = java.nio.charset.Charset.availableCharsets();
        java.net.URISyntaxException uRISyntaxException23 = new java.net.URISyntaxException("hi!", "");
        boolean boolean24 = strMap20.containsKey((java.lang.Object) "");
        int int25 = strMap20.size();
        com.google.common.collect.ImmutableList<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>> strMapList26 = com.google.common.collect.ImmutableList.of(strMap0, strMap5, strMap11, strMap17, strMap20);
        java.time.Period period27 = java.time.Period.ZERO;
        java.time.chrono.ChronoPeriod chronoPeriod28 = period27.normalized();
        java.time.temporal.ChronoField chronoField29 = java.time.temporal.ChronoField.EPOCH_DAY;
        java.time.Instant instant30 = java.time.Instant.EPOCH;
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset34);
        java.time.OffsetDateTime offsetDateTime36 = java.time.OffsetDateTime.ofInstant(instant30, (java.time.ZoneId) zoneOffset34);
        java.time.temporal.ValueRange valueRange37 = chronoField29.rangeRefinedBy((java.time.temporal.TemporalAccessor) offsetDateTime36);
        java.time.temporal.Temporal temporal38 = period27.subtractFrom((java.time.temporal.Temporal) offsetDateTime36);
        java.time.Period period39 = java.time.Period.ZERO;
        java.time.chrono.ChronoPeriod chronoPeriod40 = period39.normalized();
        java.time.OffsetDateTime offsetDateTime41 = offsetDateTime36.plus((java.time.temporal.TemporalAmount) chronoPeriod40);
        java.nio.charset.Charset charset42 = java.nio.charset.Charset.defaultCharset();
        java.lang.String str43 = charset42.displayName();
        java.lang.String str44 = charset42.toString();
        java.lang.String str45 = charset42.toString();
        boolean boolean46 = charset42.canEncode();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.charset.Charset charset47 = strMap5.getOrDefault((java.lang.Object) offsetDateTime36, charset42);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 171 + "'", int16 == 171);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 171 + "'", int25 == 171);
        org.junit.Assert.assertNotNull(strMapList26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(chronoPeriod28);
        org.junit.Assert.assertTrue("'" + chronoField29 + "' != '" + java.time.temporal.ChronoField.EPOCH_DAY + "'", chronoField29.equals(java.time.temporal.ChronoField.EPOCH_DAY));
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(offsetDateTime36);
        org.junit.Assert.assertNotNull(valueRange37);
        org.junit.Assert.assertNotNull(temporal38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(chronoPeriod40);
        org.junit.Assert.assertNotNull(offsetDateTime41);
        org.junit.Assert.assertNotNull(charset42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "US-ASCII" + "'", str43, "US-ASCII");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "US-ASCII" + "'", str44, "US-ASCII");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "US-ASCII" + "'", str45, "US-ASCII");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test2977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2977");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder1 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label2 = builder1.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto3 = builder1.buildPartial();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder4 = fieldDescriptorProto3.newBuilderForType();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder5 = fieldDescriptorProto3.newBuilderForType();
        int int6 = com.google.protobuf.CodedOutputStream.computeMessageSize((int) (byte) 10, (com.google.protobuf.MessageLite) fieldDescriptorProto3);
        int int7 = fieldDescriptorProto3.getNumber();
        int int8 = fieldDescriptorProto3.getSerializedSize();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + label2 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label2.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test2978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2978");
        com.google.protobuf.DescriptorProtos.EnumValueOptions enumValueOptions0 = com.google.protobuf.DescriptorProtos.EnumValueOptions.getDefaultInstance();
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder1 = com.google.protobuf.DescriptorProtos.EnumValueOptions.newBuilder(enumValueOptions0);
        com.google.javascript.jscomp.CompilerOptions compilerOptions2 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions2.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat5 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions2.errorFormat = errorFormat5;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy7 = null;
        compilerOptions2.variableRenaming = variableRenamingPolicy7;
        com.google.javascript.jscomp.CompilerOptions.TracerMode tracerMode9 = compilerOptions2.getTracerMode();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder10 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder12 = builder10.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder13 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label14 = builder13.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder15 = builder10.addExtension(builder13);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder16 = builder10.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder17 = builder16.getOptionsBuilder();
        java.io.InputStream inputStream18 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions19 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream18);
        boolean boolean20 = enumOptions19.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder21 = builder17.mergeFrom(enumOptions19);
        byte[] byteArray22 = enumOptions19.toByteArray();
        compilerOptions2.setInputPropertyMapSerialized(byteArray22);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite24 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo sourceCodeInfo25 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.parseFrom(byteArray22, extensionRegistryLite24);
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder26 = builder1.mergeFrom(byteArray22);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder27 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder29 = builder27.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder30 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label31 = builder30.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder32 = builder27.addExtension(builder30);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder33 = builder27.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder34 = builder33.getOptionsBuilder();
        java.io.InputStream inputStream35 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions36 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream35);
        boolean boolean37 = enumOptions36.isInitialized();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder38 = builder34.mergeFrom(enumOptions36);
        com.google.protobuf.UnknownFieldSet unknownFieldSet39 = builder34.getUnknownFields();
        byte[] byteArray40 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite41 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions42 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray40, extensionRegistryLite41);
        com.google.protobuf.CodedOutputStream codedOutputStream45 = com.google.protobuf.CodedOutputStream.newInstance(byteArray40, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite46 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto47 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray40, extensionRegistryLite46);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite48 = null;
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto49 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.parseFrom(byteArray40, extensionRegistryLite48);
        com.google.protobuf.UnknownFieldSet unknownFieldSet50 = com.google.protobuf.UnknownFieldSet.parseFrom(byteArray40);
        com.google.protobuf.ByteString byteString51 = unknownFieldSet50.toByteString();
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite52 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder53 = builder34.mergeFrom(byteString51, extensionRegistryLite52);
        com.google.protobuf.DescriptorProtos.EnumValueOptions.Builder builder54 = builder1.mergeFrom(byteString51);
        java.util.Map<com.google.protobuf.Descriptors.FieldDescriptor, java.lang.Object> fieldDescriptorMap55 = builder1.getAllFields();
        org.junit.Assert.assertNotNull(enumValueOptions0);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(errorFormat5);
        org.junit.Assert.assertTrue("'" + tracerMode9 + "' != '" + com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF + "'", tracerMode9.equals(com.google.javascript.jscomp.CompilerOptions.TracerMode.OFF));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + label14 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label14.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(enumOptions19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
        org.junit.Assert.assertNotNull(sourceCodeInfo25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + label31 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label31.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(enumOptions36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(unknownFieldSet39);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[]");
        org.junit.Assert.assertNotNull(methodOptions42);
        org.junit.Assert.assertNotNull(codedOutputStream45);
        org.junit.Assert.assertNotNull(fileDescriptorProto47);
        org.junit.Assert.assertNotNull(serviceDescriptorProto49);
        org.junit.Assert.assertNotNull(unknownFieldSet50);
        org.junit.Assert.assertNotNull(byteString51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(fieldDescriptorMap55);
    }

    @Test
    public void test2979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2979");
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder0 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output2 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream4 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output2, (int) 'a');
        byte[] byteArray5 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite6 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions7 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray5, extensionRegistryLite6);
        output2.write(byteArray5);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder9 = builder0.mergeFrom(byteArray5);
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions10 = builder0.buildPartial();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder11 = builder0.addUninterpretedOptionBuilder();
        boolean boolean12 = builder11.hasNegativeIntValue();
        com.google.protobuf.DescriptorProtos.UninterpretedOption.Builder builder13 = builder11.clearStringValue();
        int int14 = builder11.getNameCount();
        java.io.InputStream inputStream15 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = builder11.mergeDelimitedFrom(inputStream15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(output2);
        org.junit.Assert.assertNotNull(codedOutputStream4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[]");
        org.junit.Assert.assertNotNull(methodOptions7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(methodOptions10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test2980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2980");
        byte[] byteArray0 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions2 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray0, extensionRegistryLite1);
        com.google.protobuf.CodedInputStream codedInputStream5 = com.google.protobuf.CodedInputStream.newInstance(byteArray0, 16, (int) 'a');
        java.io.InputStream inputStream6 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite7 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location8 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream6, extensionRegistryLite7);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.FileOptions fileOptions9 = com.google.protobuf.DescriptorProtos.FileOptions.parseFrom(codedInputStream5, extensionRegistryLite7);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 16");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(methodOptions2);
        org.junit.Assert.assertNotNull(codedInputStream5);
        org.junit.Assert.assertNotNull(extensionRegistryLite7);
        org.junit.Assert.assertNotNull(location8);
    }

    @Test
    public void test2981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2981");
        com.google.protobuf.DescriptorProtos.MethodDescriptorProto methodDescriptorProto0 = com.google.protobuf.DescriptorProtos.MethodDescriptorProto.getDefaultInstance();
        boolean boolean1 = methodDescriptorProto0.hasOutputType();
        byte[] byteArray2 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite3 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions4 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray2, extensionRegistryLite3);
        com.google.protobuf.CodedOutputStream codedOutputStream7 = com.google.protobuf.CodedOutputStream.newInstance(byteArray2, (int) (short) 0, 1);
        methodDescriptorProto0.writeTo(codedOutputStream7);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder10 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label11 = builder10.getLabel();
        com.google.protobuf.ByteString byteString12 = com.google.protobuf.ByteString.EMPTY;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder13 = builder10.mergeFrom(byteString12);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite14 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location15 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(byteString12, extensionRegistryLite14);
        com.google.protobuf.DescriptorProtos.ServiceDescriptorProto serviceDescriptorProto16 = com.google.protobuf.DescriptorProtos.ServiceDescriptorProto.parseFrom(byteString12);
        // The following exception was thrown during execution in test generation
        try {
            codedOutputStream7.writeRawMessageSetExtension(21, byteString12);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(methodDescriptorProto0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[]");
        org.junit.Assert.assertNotNull(methodOptions4);
        org.junit.Assert.assertNotNull(codedOutputStream7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + label11 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label11.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(byteString12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(location15);
        org.junit.Assert.assertNotNull(serviceDescriptorProto16);
    }

    @Test
    public void test2982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2982");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto2 = com.google.protobuf.DescriptorProtos.DescriptorProto.parseFrom(inputStream0, extensionRegistryLite1);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.DescriptorProto.ExtensionRange extensionRange4 = descriptorProto2.getExtensionRange(2);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(descriptorProto2);
    }

    @Test
    public void test2983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2983");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo sourceCodeInfo2 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.parseFrom(inputStream0, extensionRegistryLite1);
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder3 = sourceCodeInfo2.newBuilderForType();
        com.google.protobuf.UnknownFieldSet unknownFieldSet4 = null;
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Builder builder5 = builder3.setUnknownFields(unknownFieldSet4);
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.Builder builder7 = builder3.addLocationBuilder(0);
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location8 = builder7.buildPartial();
        // The following exception was thrown during execution in test generation
        try {
            int int10 = location8.getSpan(5);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 5");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(sourceCodeInfo2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(location8);
    }

    @Test
    public void test2984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2984");
        com.google.protobuf.ByteString byteString0 = null;
        com.google.javascript.jscomp.CompilerOptions compilerOptions1 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions1.setRecordFunctionInformation(true);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder4 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder6 = builder4.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder7 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label8 = builder7.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder9 = builder4.addExtension(builder7);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder10 = builder4.addEnumTypeBuilder();
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions11 = builder10.getOptions();
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder12 = com.google.protobuf.DescriptorProtos.MethodOptions.newBuilder();
        com.google.protobuf.ByteString.Output output14 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream16 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output14, (int) 'a');
        byte[] byteArray17 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite18 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions19 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray17, extensionRegistryLite18);
        output14.write(byteArray17);
        com.google.protobuf.DescriptorProtos.MethodOptions.Builder builder21 = builder12.mergeFrom(byteArray17);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder22 = builder10.mergeFrom(byteArray17);
        compilerOptions1.setInputVariableMapSerialized(byteArray17);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite24 = null;
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto enumDescriptorProto25 = com.google.protobuf.DescriptorProtos.EnumDescriptorProto.parseFrom(byteArray17, extensionRegistryLite24);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder26 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder28 = builder26.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder29 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label30 = builder29.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder31 = builder26.addExtension(builder29);
        boolean boolean32 = builder29.hasDefaultValue();
        java.io.InputStream inputStream33 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite34 = null;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder35 = builder29.mergeFrom(inputStream33, extensionRegistryLite34);
        java.io.InputStream inputStream36 = null;
        java.io.InputStream inputStream37 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite38 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location39 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream37, extensionRegistryLite38);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder40 = builder35.mergeFrom(inputStream36, extensionRegistryLite38);
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location41 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(byteArray17, extensionRegistryLite38);
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.DescriptorProto descriptorProto42 = com.google.protobuf.DescriptorProtos.DescriptorProto.parseFrom(byteString0, extensionRegistryLite38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + label8 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label8.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(enumOptions11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(output14);
        org.junit.Assert.assertNotNull(codedOutputStream16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(methodOptions19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(enumDescriptorProto25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + label30 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label30.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(extensionRegistryLite38);
        org.junit.Assert.assertNotNull(location39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(location41);
    }

    @Test
    public void test2985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2985");
        com.google.javascript.jscomp.JsMessage.Builder builder1 = new com.google.javascript.jscomp.JsMessage.Builder("2022-02-21");
        com.google.javascript.jscomp.JsMessage.Builder builder3 = builder1.appendStringPart("16:00:52+00:00:52");
        com.google.javascript.jscomp.JsMessage.Builder builder5 = builder1.setSourceName("{}");
        com.google.javascript.jscomp.JsMessage jsMessage6 = builder1.build();
        boolean boolean7 = jsMessage6.isHidden();
        boolean boolean8 = jsMessage6.isExternal();
        java.util.Set<java.lang.String> strSet9 = jsMessage6.placeholders();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(jsMessage6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strSet9);
    }

    @Test
    public void test2986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2986");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_OFFSET_TIME;
        java.time.chrono.Chronology chronology1 = dateTimeFormatter0.getChronology();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(chronology1);
    }

    @Test
    public void test2987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2987");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        int int5 = localDateTime4.getYear();
        java.time.LocalDate localDate6 = localDateTime4.toLocalDate();
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset10);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime16 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset15);
        java.time.ZonedDateTime zonedDateTime17 = java.time.ZonedDateTime.of(localDateTime11, (java.time.ZoneId) zoneOffset15);
        java.time.temporal.ChronoField chronoField19 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit20 = chronoField19.getBaseUnit();
        java.time.LocalDateTime localDateTime21 = localDateTime11.plus((long) 1970, temporalUnit20);
        java.time.LocalTime localTime22 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localDateTime21);
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset26);
        java.time.OffsetDateTime offsetDateTime28 = java.time.OffsetDateTime.of(localDate6, localTime22, zoneOffset26);
        int int29 = localDate6.getMonthValue();
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertTrue("'" + chronoField19 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField19.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit20 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit20.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(offsetDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
    }

    @Test
    public void test2988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2988");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder1 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder3 = builder1.addDependency("Named type with empty name component");
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder4 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label5 = builder4.getLabel();
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder6 = builder1.addExtension(builder4);
        com.google.protobuf.DescriptorProtos.EnumDescriptorProto.Builder builder7 = builder1.addEnumTypeBuilder();
        com.google.protobuf.ByteString.Output output9 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream11 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output9, (int) 'a');
        byte[] byteArray12 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite13 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions14 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray12, extensionRegistryLite13);
        output9.write(byteArray12);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto.Builder builder16 = builder1.mergeFrom(byteArray12);
        byte[] byteArray17 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite18 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions19 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray17, extensionRegistryLite18);
        com.google.protobuf.CodedOutputStream codedOutputStream22 = com.google.protobuf.CodedOutputStream.newInstance(byteArray17, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite23 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto24 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray17, extensionRegistryLite23);
        com.google.protobuf.CodedOutputStream codedOutputStream25 = com.google.protobuf.CodedOutputStream.newInstance(byteArray17);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder26 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label label27 = builder26.getLabel();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto28 = builder26.buildPartial();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder29 = fieldDescriptorProto28.newBuilderForType();
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder30 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.newBuilder(fieldDescriptorProto28);
        java.io.File file33 = null;
        java.io.File file34 = java.io.File.createTempFile("hi!", "ISO", file33);
        boolean boolean37 = file34.setWritable(false, false);
        java.net.URI uRI38 = file34.toURI();
        java.io.PrintStream printStream39 = new java.io.PrintStream(file34);
        printStream39.print((int) (byte) 0);
        printStream39.print(10.0d);
        printStream39.close();
        java.lang.String[] strArray48 = new java.lang.String[] { "hi!", "", "Unknown class name" };
        java.util.LinkedHashSet<java.lang.String> strSet49 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet49, strArray48);
        boolean boolean51 = strSet49.isEmpty();
        java.nio.ByteBuffer byteBuffer53 = java.nio.ByteBuffer.allocate(100);
        boolean boolean54 = strSet49.equals((java.lang.Object) byteBuffer53);
        java.nio.IntBuffer intBuffer55 = byteBuffer53.asIntBuffer();
        double double56 = byteBuffer53.getDouble();
        java.nio.ByteBuffer byteBuffer59 = byteBuffer53.put((int) (short) 1, (byte) 1);
        byte[] byteArray60 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite61 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions62 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray60, extensionRegistryLite61);
        com.google.protobuf.CodedOutputStream codedOutputStream65 = com.google.protobuf.CodedOutputStream.newInstance(byteArray60, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite66 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto67 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray60, extensionRegistryLite66);
        com.google.protobuf.CodedOutputStream codedOutputStream68 = com.google.protobuf.CodedOutputStream.newInstance(byteArray60);
        java.nio.ByteBuffer byteBuffer69 = byteBuffer53.get(byteArray60);
        printStream39.write(byteArray60, (int) '/', (int) (byte) 1);
        java.io.InputStream inputStream73 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite74 = com.google.protobuf.ExtensionRegistryLite.newInstance();
        com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location location75 = com.google.protobuf.DescriptorProtos.SourceCodeInfo.Location.parseFrom(inputStream73, extensionRegistryLite74);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Builder builder76 = builder30.mergeFrom(byteArray60, extensionRegistryLite74);
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto77 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray17, extensionRegistryLite74);
        com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto enumValueDescriptorProto78 = com.google.protobuf.DescriptorProtos.EnumValueDescriptorProto.parseFrom(byteArray12, extensionRegistryLite74);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite79 = extensionRegistryLite74.getUnmodifiable();
        // The following exception was thrown during execution in test generation
        try {
            com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto80 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.parseDelimitedFrom(inputStream0, extensionRegistryLite79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + label5 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label5.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(output9);
        org.junit.Assert.assertNotNull(codedOutputStream11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(methodOptions14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[]");
        org.junit.Assert.assertNotNull(methodOptions19);
        org.junit.Assert.assertNotNull(codedOutputStream22);
        org.junit.Assert.assertNotNull(fileDescriptorProto24);
        org.junit.Assert.assertNotNull(codedOutputStream25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + label27 + "' != '" + com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL + "'", label27.equals(com.google.protobuf.DescriptorProtos.FieldDescriptorProto.Label.LABEL_OPTIONAL));
        org.junit.Assert.assertNotNull(fieldDescriptorProto28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(file34);
        org.junit.Assert.assertEquals(file34.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file34.toString(), "/tmp/hi!8827528628974278001ISO");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(uRI38);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(byteBuffer53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(intBuffer55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 0.0d + "'", double56 == 0.0d);
        org.junit.Assert.assertNotNull(byteBuffer59);
        org.junit.Assert.assertNotNull(byteArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[]");
        org.junit.Assert.assertNotNull(methodOptions62);
        org.junit.Assert.assertNotNull(codedOutputStream65);
        org.junit.Assert.assertNotNull(fileDescriptorProto67);
        org.junit.Assert.assertNotNull(codedOutputStream68);
        org.junit.Assert.assertNotNull(byteBuffer69);
        org.junit.Assert.assertNotNull(extensionRegistryLite74);
        org.junit.Assert.assertNotNull(location75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(fileDescriptorProto77);
        org.junit.Assert.assertNotNull(enumValueDescriptorProto78);
        org.junit.Assert.assertNotNull(extensionRegistryLite79);
    }

    @Test
    public void test2989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2989");
        com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder builder0 = com.google.javascript.jscomp.FunctionInformationMap.Entry.newBuilder();
        boolean boolean1 = builder0.hasSourceName();
        boolean boolean2 = builder0.hasSourceName();
        com.google.javascript.jscomp.FunctionInformationMap.Entry.Builder builder3 = builder0.clearSize();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test2990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2990");
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap0 = java.nio.charset.Charset.availableCharsets();
        java.net.URISyntaxException uRISyntaxException3 = new java.net.URISyntaxException("hi!", "");
        boolean boolean4 = strMap0.containsKey((java.lang.Object) "");
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap5 = java.nio.charset.Charset.availableCharsets();
        com.google.javascript.rhino.Node node9 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean10 = strMap5.containsValue((java.lang.Object) '4');
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap11 = java.nio.charset.Charset.availableCharsets();
        java.net.URISyntaxException uRISyntaxException14 = new java.net.URISyntaxException("hi!", "");
        boolean boolean15 = strMap11.containsKey((java.lang.Object) "");
        int int16 = strMap11.size();
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap17 = java.nio.charset.Charset.availableCharsets();
        java.util.Set<java.lang.String> strSet18 = strMap17.keySet();
        java.util.Set<java.lang.String> strSet19 = strMap17.keySet();
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap20 = java.nio.charset.Charset.availableCharsets();
        java.net.URISyntaxException uRISyntaxException23 = new java.net.URISyntaxException("hi!", "");
        boolean boolean24 = strMap20.containsKey((java.lang.Object) "");
        int int25 = strMap20.size();
        com.google.common.collect.ImmutableList<java.util.SortedMap<java.lang.String, java.nio.charset.Charset>> strMapList26 = com.google.common.collect.ImmutableList.of(strMap0, strMap5, strMap11, strMap17, strMap20);
        java.util.Collection<java.nio.charset.Charset> charsetCollection27 = strMap5.values();
        org.junit.Assert.assertNotNull(strMap0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strMap5);
        org.junit.Assert.assertNotNull(node9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strMap11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 171 + "'", int16 == 171);
        org.junit.Assert.assertNotNull(strMap17);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(strMap20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 171 + "'", int25 == 171);
        org.junit.Assert.assertNotNull(strMapList26);
        org.junit.Assert.assertNotNull(charsetCollection27);
    }

    @Test
    public void test2991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2991");
        java.io.InputStream inputStream0 = null;
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto2 = com.google.protobuf.DescriptorProtos.FieldDescriptorProto.parseFrom(inputStream0, extensionRegistryLite1);
        com.google.protobuf.DescriptorProtos.FieldDescriptorProto fieldDescriptorProto3 = fieldDescriptorProto2.getDefaultInstanceForType();
        int int4 = fieldDescriptorProto3.getNumber();
        org.junit.Assert.assertNotNull(fieldDescriptorProto2);
        org.junit.Assert.assertNotNull(fieldDescriptorProto3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test2992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2992");
        java.time.format.TextStyle textStyle0 = java.time.format.TextStyle.NARROW_STANDALONE;
        org.junit.Assert.assertTrue("'" + textStyle0 + "' != '" + java.time.format.TextStyle.NARROW_STANDALONE + "'", textStyle0.equals(java.time.format.TextStyle.NARROW_STANDALONE));
    }

    @Test
    public void test2993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2993");
        com.google.javascript.rhino.ErrorReporter errorReporter0 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry2 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter0, false);
        com.google.javascript.rhino.ErrorReporter errorReporter3 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry5 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter3, false);
        com.google.javascript.rhino.jstype.ObjectType objectType6 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType7 = jSTypeRegistry5.createObjectType(objectType6);
        com.google.javascript.rhino.ErrorReporter errorReporter8 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry10 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter8, false);
        com.google.javascript.rhino.jstype.ObjectType objectType11 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType12 = jSTypeRegistry10.createObjectType(objectType11);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair13 = objectType7.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType12);
        java.lang.String str14 = objectType12.getDisplayName();
        java.util.Collection<com.google.javascript.rhino.jstype.FunctionType> functionTypeCollection15 = jSTypeRegistry2.getDirectImplementors(objectType12);
        java.lang.Iterable<com.google.javascript.rhino.jstype.ObjectType> objectTypeIterable17 = jSTypeRegistry2.getEachReferenceTypeWithProperty("+00:00:52");
        jSTypeRegistry2.resetForTypeCheck();
        com.google.javascript.rhino.Node node23 = com.google.javascript.rhino.Node.newNumber((double) '4', 0, (int) ' ');
        boolean boolean24 = node23.isStringKey();
        boolean boolean25 = node23.isThrow();
        boolean boolean26 = node23.isVarArgs();
        boolean boolean27 = node23.isHook();
        com.google.javascript.rhino.Node node28 = node23.cloneNode();
        com.google.javascript.rhino.ErrorReporter errorReporter29 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry31 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter29, false);
        com.google.javascript.rhino.ErrorReporter errorReporter32 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry34 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter32, false);
        com.google.javascript.rhino.jstype.ObjectType objectType35 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType36 = jSTypeRegistry34.createObjectType(objectType35);
        com.google.javascript.rhino.ErrorReporter errorReporter37 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry39 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter37, false);
        com.google.javascript.rhino.jstype.ObjectType objectType40 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType41 = jSTypeRegistry39.createObjectType(objectType40);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair42 = objectType36.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType41);
        java.lang.String str43 = objectType41.getDisplayName();
        java.util.Collection<com.google.javascript.rhino.jstype.FunctionType> functionTypeCollection44 = jSTypeRegistry31.getDirectImplementors(objectType41);
        boolean boolean45 = objectType41.isAllType();
        com.google.javascript.rhino.jstype.ObjectType objectType46 = jSTypeRegistry2.createObjectType("+00:00:52", node28, objectType41);
        com.google.javascript.rhino.ErrorReporter errorReporter47 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry49 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter47, false);
        com.google.javascript.rhino.jstype.ObjectType objectType50 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType51 = jSTypeRegistry49.createObjectType(objectType50);
        jSTypeRegistry49.forwardDeclareType("");
        com.google.javascript.rhino.ErrorReporter errorReporter54 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry56 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter54, false);
        com.google.javascript.rhino.jstype.ObjectType objectType57 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType58 = jSTypeRegistry56.createObjectType(objectType57);
        com.google.javascript.rhino.ErrorReporter errorReporter59 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry61 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter59, false);
        com.google.javascript.rhino.jstype.ObjectType objectType62 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType63 = jSTypeRegistry61.createObjectType(objectType62);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair64 = objectType58.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType63);
        com.google.javascript.rhino.Node node65 = objectType58.getRootNode();
        com.google.javascript.rhino.ErrorReporter errorReporter66 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry68 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter66, false);
        com.google.javascript.rhino.jstype.ObjectType objectType69 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType70 = jSTypeRegistry68.createObjectType(objectType69);
        com.google.javascript.rhino.ErrorReporter errorReporter71 = null;
        com.google.javascript.rhino.jstype.JSTypeRegistry jSTypeRegistry73 = new com.google.javascript.rhino.jstype.JSTypeRegistry(errorReporter71, false);
        com.google.javascript.rhino.jstype.ObjectType objectType74 = null;
        com.google.javascript.rhino.jstype.ObjectType objectType75 = jSTypeRegistry73.createObjectType(objectType74);
        com.google.javascript.rhino.jstype.JSType.TypePair typePair76 = objectType70.getTypesUnderShallowInequality((com.google.javascript.rhino.jstype.JSType) objectType75);
        com.google.javascript.rhino.jstype.TernaryValue ternaryValue77 = objectType58.testForEquality((com.google.javascript.rhino.jstype.JSType) objectType70);
        com.google.javascript.rhino.jstype.JSType jSType78 = jSTypeRegistry49.createDefaultObjectUnion((com.google.javascript.rhino.jstype.JSType) objectType58);
        com.google.javascript.rhino.Node node80 = com.google.javascript.rhino.Node.newString("java.nio.ByteBufferAsDoubleBufferB[pos=0 lim=12 cap=12]");
        com.google.javascript.rhino.jstype.FunctionType functionType81 = jSTypeRegistry2.createFunctionType((com.google.javascript.rhino.jstype.JSType) objectType58, node80);
        com.google.javascript.rhino.jstype.ObjectType objectType82 = functionType81.getPrototype();
        // The following exception was thrown during execution in test generation
        try {
            com.google.javascript.rhino.jstype.FunctionType functionType83 = functionType81.getSuperClassConstructor();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objectType7);
        org.junit.Assert.assertNotNull(objectType12);
        org.junit.Assert.assertNotNull(typePair13);
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(functionTypeCollection15);
        org.junit.Assert.assertNotNull(objectTypeIterable17);
        org.junit.Assert.assertNotNull(node23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(node28);
        org.junit.Assert.assertNotNull(objectType36);
        org.junit.Assert.assertNotNull(objectType41);
        org.junit.Assert.assertNotNull(typePair42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(functionTypeCollection44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(objectType46);
        org.junit.Assert.assertNotNull(objectType51);
        org.junit.Assert.assertNotNull(objectType58);
        org.junit.Assert.assertNotNull(objectType63);
        org.junit.Assert.assertNotNull(typePair64);
        org.junit.Assert.assertNull(node65);
        org.junit.Assert.assertNotNull(objectType70);
        org.junit.Assert.assertNotNull(objectType75);
        org.junit.Assert.assertNotNull(typePair76);
        org.junit.Assert.assertNotNull(ternaryValue77);
        org.junit.Assert.assertNotNull(jSType78);
        org.junit.Assert.assertNotNull(node80);
        org.junit.Assert.assertNotNull(functionType81);
        org.junit.Assert.assertNotNull(objectType82);
    }

    @Test
    public void test2994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2994");
        com.google.protobuf.ByteString.Output output1 = com.google.protobuf.ByteString.newOutput(3);
        com.google.protobuf.CodedOutputStream codedOutputStream3 = com.google.protobuf.CodedOutputStream.newInstance((java.io.OutputStream) output1, (int) 'a');
        codedOutputStream3.writeEnumNoTag((int) '#');
        java.io.InputStream inputStream7 = null;
        com.google.protobuf.DescriptorProtos.EnumOptions enumOptions8 = com.google.protobuf.DescriptorProtos.EnumOptions.parseFrom(inputStream7);
        java.util.List<com.google.protobuf.DescriptorProtos.UninterpretedOption> uninterpretedOptionList9 = enumOptions8.getUninterpretedOptionList();
        com.google.protobuf.DescriptorProtos.EnumOptions.Builder builder10 = enumOptions8.newBuilderForType();
        boolean boolean11 = enumOptions8.isInitialized();
        codedOutputStream3.writeGroup(52, (com.google.protobuf.MessageLite) enumOptions8);
        org.junit.Assert.assertNotNull(output1);
        org.junit.Assert.assertNotNull(codedOutputStream3);
        org.junit.Assert.assertNotNull(enumOptions8);
        org.junit.Assert.assertNotNull(uninterpretedOptionList9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test2995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2995");
        com.google.javascript.jscomp.CompilerOptions compilerOptions0 = new com.google.javascript.jscomp.CompilerOptions();
        compilerOptions0.setAssumeClosuresOnlyCaptureReferences(true);
        com.google.javascript.jscomp.ErrorFormat errorFormat3 = com.google.javascript.jscomp.ErrorFormat.MULTILINE;
        compilerOptions0.errorFormat = errorFormat3;
        com.google.javascript.jscomp.VariableRenamingPolicy variableRenamingPolicy5 = null;
        compilerOptions0.variableRenaming = variableRenamingPolicy5;
        compilerOptions0.setSummaryDetailLevel(999);
        boolean boolean9 = compilerOptions0.getInferTypes();
        compilerOptions0.resetWarningsGuard();
        byte[] byteArray11 = compilerOptions0.inputVariableMapSerialized;
        org.junit.Assert.assertNotNull(errorFormat3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(byteArray11);
    }

    @Test
    public void test2996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2996");
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset3);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset8);
        java.time.ZonedDateTime zonedDateTime10 = java.time.ZonedDateTime.of(localDateTime4, (java.time.ZoneId) zoneOffset8);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime10.withYear((int) (short) 1);
        java.time.LocalTime localTime13 = zonedDateTime10.toLocalTime();
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset18);
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime24 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset23);
        java.time.ZonedDateTime zonedDateTime25 = java.time.ZonedDateTime.of(localDateTime19, (java.time.ZoneId) zoneOffset23);
        java.time.temporal.ChronoField chronoField27 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit28 = chronoField27.getBaseUnit();
        java.time.LocalDateTime localDateTime29 = localDateTime19.plus((long) 1970, temporalUnit28);
        java.time.ZoneOffset zoneOffset34 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset34);
        java.time.ZoneOffset zoneOffset39 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime40 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset39);
        java.time.ZonedDateTime zonedDateTime41 = java.time.ZonedDateTime.of(localDateTime35, (java.time.ZoneId) zoneOffset39);
        java.time.temporal.ChronoField chronoField43 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit44 = chronoField43.getBaseUnit();
        java.time.LocalDateTime localDateTime45 = localDateTime35.plus((long) 1970, temporalUnit44);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime46 = localDateTime29.minus((long) 43, temporalUnit44);
        java.time.LocalDateTime localDateTime48 = localDateTime29.minusHours((long) 1024);
        java.time.LocalDateTime localDateTime50 = localDateTime48.plusHours((long) 0);
        java.time.ZoneOffset zoneOffset54 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime55 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset54);
        java.time.ZoneOffset zoneOffset59 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime60 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset59);
        java.time.ZonedDateTime zonedDateTime61 = java.time.ZonedDateTime.of(localDateTime55, (java.time.ZoneId) zoneOffset59);
        java.time.ZonedDateTime zonedDateTime63 = zonedDateTime61.minusSeconds((long) '#');
        java.time.temporal.ChronoField chronoField64 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        java.time.temporal.TemporalUnit temporalUnit65 = chronoField64.getBaseUnit();
        boolean boolean66 = zonedDateTime63.isSupported(temporalUnit65);
        java.time.LocalDate localDate67 = java.time.LocalDate.now();
        java.lang.String str68 = localDate67.toString();
        boolean boolean69 = temporalUnit65.isSupportedBy((java.time.temporal.Temporal) localDate67);
        java.time.LocalDateTime localDateTime70 = localDateTime48.truncatedTo(temporalUnit65);
        boolean boolean71 = temporalUnit65.isTimeBased();
        java.time.LocalTime localTime72 = localTime13.plus((long) 50, temporalUnit65);
        java.time.ZoneOffset zoneOffset76 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime77 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset76);
        java.time.ZoneOffset zoneOffset81 = java.time.ZoneOffset.ofTotalSeconds((int) '4');
        java.time.LocalDateTime localDateTime82 = java.time.LocalDateTime.ofEpochSecond((long) 100, 0, zoneOffset81);
        java.time.ZonedDateTime zonedDateTime83 = java.time.ZonedDateTime.of(localDateTime77, (java.time.ZoneId) zoneOffset81);
        java.time.ZonedDateTime zonedDateTime85 = zonedDateTime83.minusSeconds((long) '#');
        java.time.OffsetDateTime offsetDateTime86 = zonedDateTime83.toOffsetDateTime();
        java.time.OffsetDateTime offsetDateTime88 = offsetDateTime86.plusNanos(3600000L);
        java.time.temporal.Temporal temporal89 = localTime13.adjustInto((java.time.temporal.Temporal) offsetDateTime86);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(zonedDateTime25);
        org.junit.Assert.assertTrue("'" + chronoField27 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField27.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit28 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit28.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(zoneOffset34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(zoneOffset39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(zonedDateTime41);
        org.junit.Assert.assertTrue("'" + chronoField43 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField43.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit44 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit44.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(zoneOffset54);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(zoneOffset59);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(zonedDateTime61);
        org.junit.Assert.assertNotNull(zonedDateTime63);
        org.junit.Assert.assertTrue("'" + chronoField64 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField64.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + temporalUnit65 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit65.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "2022-02-21" + "'", str68, "2022-02-21");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(localTime72);
        org.junit.Assert.assertNotNull(zoneOffset76);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(zoneOffset81);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(zonedDateTime83);
        org.junit.Assert.assertNotNull(zonedDateTime85);
        org.junit.Assert.assertNotNull(offsetDateTime86);
        org.junit.Assert.assertNotNull(offsetDateTime88);
        org.junit.Assert.assertNotNull(temporal89);
    }

    @Test
    public void test2997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2997");
        java.util.concurrent.TimeUnit timeUnit0 = java.util.concurrent.TimeUnit.HOURS;
        long long2 = timeUnit0.toDays((long) 35);
        org.junit.Assert.assertNotNull(timeUnit0);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
    }

    @Test
    public void test2998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2998");
        java.io.PrintWriter printWriter1 = new java.io.PrintWriter("1970-03-24T02:02:32");
        char[] charArray7 = new char[] { '4', ' ', 'a', 'a', ':' };
        printWriter1.println(charArray7);
        java.security.SignatureException signatureException10 = new java.security.SignatureException();
        java.security.SignatureException signatureException11 = new java.security.SignatureException();
        java.security.SignatureException signatureException12 = new java.security.SignatureException();
        java.security.SignatureException signatureException13 = new java.security.SignatureException();
        java.security.SignatureException signatureException14 = new java.security.SignatureException();
        java.security.SignatureException[] signatureExceptionArray15 = new java.security.SignatureException[] { signatureException10, signatureException11, signatureException12, signatureException13, signatureException14 };
        com.google.common.collect.ImmutableSet<java.security.SignatureException> signatureExceptionSet16 = com.google.common.collect.ImmutableSet.of(signatureExceptionArray15);
        java.io.PrintWriter printWriter17 = printWriter1.format("ISO", (java.lang.Object[]) signatureExceptionArray15);
        printWriter17.print((float) 36);
        // The following exception was thrown during execution in test generation
        try {
            printWriter17.write("java.nio.HeapFloatBuffer[pos=6 lim=6 cap=6]", (int) (byte) 100, (int) 'x');
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: 220");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "4 aa:");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "4 aa:");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[4,  , a, a, :]");
        org.junit.Assert.assertNotNull(signatureExceptionArray15);
        org.junit.Assert.assertNotNull(signatureExceptionSet16);
        org.junit.Assert.assertNotNull(printWriter17);
    }

    @Test
    public void test2999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test2999");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate((int) ' ');
        boolean boolean2 = charBuffer1.isDirect();
        int int3 = charBuffer1.arrayOffset();
        java.lang.String str4 = charBuffer1.toString();
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000" + "'", str4, "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000");
    }

    @Test
    public void test3000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest5.test3000");
        byte[] byteArray0 = new byte[] {};
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite1 = null;
        com.google.protobuf.DescriptorProtos.MethodOptions methodOptions2 = com.google.protobuf.DescriptorProtos.MethodOptions.parseFrom(byteArray0, extensionRegistryLite1);
        com.google.protobuf.CodedOutputStream codedOutputStream5 = com.google.protobuf.CodedOutputStream.newInstance(byteArray0, (int) (short) 0, 1);
        com.google.protobuf.ExtensionRegistryLite extensionRegistryLite6 = null;
        com.google.protobuf.DescriptorProtos.FileDescriptorProto fileDescriptorProto7 = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(byteArray0, extensionRegistryLite6);
        boolean boolean8 = fileDescriptorProto7.hasOptions();
        com.google.protobuf.DescriptorProtos.FileOptionsOrBuilder fileOptionsOrBuilder9 = fileDescriptorProto7.getOptionsOrBuilder();
        boolean boolean10 = fileDescriptorProto7.hasSourceCodeInfo();
        boolean boolean11 = fileDescriptorProto7.hasOptions();
        boolean boolean12 = fileDescriptorProto7.hasSourceCodeInfo();
        com.google.protobuf.DescriptorProtos.FileOptions fileOptions13 = fileDescriptorProto7.getOptions();
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray0), "[]");
        org.junit.Assert.assertNotNull(methodOptions2);
        org.junit.Assert.assertNotNull(codedOutputStream5);
        org.junit.Assert.assertNotNull(fileDescriptorProto7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(fileOptionsOrBuilder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(fileOptions13);
    }
}
